using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Text;

namespace OpenTK.Graphics.OpenGL4
{
	// Token: 0x020005F5 RID: 1525
	public sealed class GL : GraphicsBindingsBase
	{
		// Token: 0x06005006 RID: 20486 RVA: 0x000DBB04 File Offset: 0x000D9D04
		public GL()
		{
			this._EntryPointsInstance = GL.EntryPoints;
			this._EntryPointNamesInstance = GL.EntryPointNames;
			this._EntryPointNameOffsetsInstance = GL.EntryPointNameOffsets;
		}

		// Token: 0x17000451 RID: 1105
		// (get) Token: 0x06005007 RID: 20487 RVA: 0x000DBB30 File Offset: 0x000D9D30
		protected override object SyncRoot
		{
			get
			{
				return GL.sync_root;
			}
		}

		// Token: 0x06005008 RID: 20488 RVA: 0x000DBB38 File Offset: 0x000D9D38
		public static void ClearColor(Color color)
		{
			GL.ClearColor((float)color.R / 255f, (float)color.G / 255f, (float)color.B / 255f, (float)color.A / 255f);
		}

		// Token: 0x06005009 RID: 20489 RVA: 0x000DBB78 File Offset: 0x000D9D78
		public static void ClearColor(Color4 color)
		{
			GL.ClearColor(color.R, color.G, color.B, color.A);
		}

		// Token: 0x0600500A RID: 20490 RVA: 0x000DBB9C File Offset: 0x000D9D9C
		public static void BlendColor(Color color)
		{
			GL.BlendColor((float)color.R / 255f, (float)color.G / 255f, (float)color.B / 255f, (float)color.A / 255f);
		}

		// Token: 0x0600500B RID: 20491 RVA: 0x000DBBDC File Offset: 0x000D9DDC
		public static void BlendColor(Color4 color)
		{
			GL.BlendColor(color.R, color.G, color.B, color.A);
		}

		// Token: 0x0600500C RID: 20492 RVA: 0x000DBC00 File Offset: 0x000D9E00
		[CLSCompliant(false)]
		public static void Uniform2(int location, ref Vector2 vector)
		{
			GL.Uniform2(location, vector.X, vector.Y);
		}

		// Token: 0x0600500D RID: 20493 RVA: 0x000DBC14 File Offset: 0x000D9E14
		[CLSCompliant(false)]
		public static void Uniform3(int location, ref Vector3 vector)
		{
			GL.Uniform3(location, vector.X, vector.Y, vector.Z);
		}

		// Token: 0x0600500E RID: 20494 RVA: 0x000DBC30 File Offset: 0x000D9E30
		[CLSCompliant(false)]
		public static void Uniform4(int location, ref Vector4 vector)
		{
			GL.Uniform4(location, vector.X, vector.Y, vector.Z, vector.W);
		}

		// Token: 0x0600500F RID: 20495 RVA: 0x000DBC50 File Offset: 0x000D9E50
		public static void Uniform2(int location, Vector2 vector)
		{
			GL.Uniform2(location, vector.X, vector.Y);
		}

		// Token: 0x06005010 RID: 20496 RVA: 0x000DBC68 File Offset: 0x000D9E68
		public static void Uniform3(int location, Vector3 vector)
		{
			GL.Uniform3(location, vector.X, vector.Y, vector.Z);
		}

		// Token: 0x06005011 RID: 20497 RVA: 0x000DBC88 File Offset: 0x000D9E88
		public static void Uniform4(int location, Vector4 vector)
		{
			GL.Uniform4(location, vector.X, vector.Y, vector.Z, vector.W);
		}

		// Token: 0x06005012 RID: 20498 RVA: 0x000DBCAC File Offset: 0x000D9EAC
		public static void Uniform4(int location, Color4 color)
		{
			GL.Uniform4(location, color.R, color.G, color.B, color.A);
		}

		// Token: 0x06005013 RID: 20499 RVA: 0x000DBCD0 File Offset: 0x000D9ED0
		public static void Uniform4(int location, Quaternion quaternion)
		{
			GL.Uniform4(location, quaternion.X, quaternion.Y, quaternion.Z, quaternion.W);
		}

		// Token: 0x06005014 RID: 20500 RVA: 0x000DBCF4 File Offset: 0x000D9EF4
		public unsafe static void UniformMatrix2(int location, bool transpose, ref Matrix2 matrix)
		{
			fixed (float* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix2(location, 1, transpose, ptr);
			}
		}

		// Token: 0x06005015 RID: 20501 RVA: 0x000DBD1C File Offset: 0x000D9F1C
		public unsafe static void UniformMatrix3(int location, bool transpose, ref Matrix3 matrix)
		{
			fixed (float* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix3(location, 1, transpose, ptr);
			}
		}

		// Token: 0x06005016 RID: 20502 RVA: 0x000DBD44 File Offset: 0x000D9F44
		public unsafe static void UniformMatrix4(int location, bool transpose, ref Matrix4 matrix)
		{
			fixed (float* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix4(location, 1, transpose, ptr);
			}
		}

		// Token: 0x06005017 RID: 20503 RVA: 0x000DBD6C File Offset: 0x000D9F6C
		public static string GetActiveAttrib(int program, int index, out int size, out ActiveAttribType type)
		{
			int num;
			GL.GetProgram(program, GetProgramParameterName.ActiveAttributeMaxLength, out num);
			StringBuilder stringBuilder = new StringBuilder((num == 0) ? 1 : (num * 2));
			GL.GetActiveAttrib(program, index, stringBuilder.Capacity, out num, out size, out type, stringBuilder);
			return stringBuilder.ToString();
		}

		// Token: 0x06005018 RID: 20504 RVA: 0x000DBDB0 File Offset: 0x000D9FB0
		public static string GetActiveUniform(int program, int uniformIndex, out int size, out ActiveUniformType type)
		{
			int num;
			GL.GetProgram(program, GetProgramParameterName.ActiveUniformMaxLength, out num);
			StringBuilder stringBuilder = new StringBuilder((num == 0) ? 1 : num);
			GL.GetActiveUniform(program, uniformIndex, stringBuilder.Capacity, out num, out size, out type, stringBuilder);
			return stringBuilder.ToString();
		}

		// Token: 0x06005019 RID: 20505 RVA: 0x000DBDF0 File Offset: 0x000D9FF0
		public unsafe static void ShaderSource(int shader, string @string)
		{
			int length = @string.Length;
			GL.ShaderSource((uint)shader, 1, new string[]
			{
				@string
			}, &length);
		}

		// Token: 0x0600501A RID: 20506 RVA: 0x000DBE1C File Offset: 0x000DA01C
		public static string GetShaderInfoLog(int shader)
		{
			string result;
			GL.GetShaderInfoLog(shader, out result);
			return result;
		}

		// Token: 0x0600501B RID: 20507 RVA: 0x000DBE34 File Offset: 0x000DA034
		public unsafe static void GetShaderInfoLog(int shader, out string info)
		{
			int num;
			GL.GetShader(shader, ShaderParameter.InfoLogLength, out num);
			if (num == 0)
			{
				info = string.Empty;
				return;
			}
			StringBuilder stringBuilder = new StringBuilder(num * 2);
			GL.GetShaderInfoLog((uint)shader, stringBuilder.Capacity, &num, stringBuilder);
			info = stringBuilder.ToString();
		}

		// Token: 0x0600501C RID: 20508 RVA: 0x000DBE7C File Offset: 0x000DA07C
		public static string GetProgramInfoLog(int program)
		{
			string result;
			GL.GetProgramInfoLog(program, out result);
			return result;
		}

		// Token: 0x0600501D RID: 20509 RVA: 0x000DBE94 File Offset: 0x000DA094
		public unsafe static void GetProgramInfoLog(int program, out string info)
		{
			int num;
			GL.GetProgram(program, GetProgramParameterName.InfoLogLength, out num);
			if (num == 0)
			{
				info = string.Empty;
				return;
			}
			StringBuilder stringBuilder = new StringBuilder(num * 2);
			GL.GetProgramInfoLog((uint)program, stringBuilder.Capacity, &num, stringBuilder);
			info = stringBuilder.ToString();
		}

		// Token: 0x0600501E RID: 20510 RVA: 0x000DBEDC File Offset: 0x000DA0DC
		[CLSCompliant(false)]
		public static void VertexAttrib2(int index, ref Vector2 v)
		{
			GL.VertexAttrib2(index, v.X, v.Y);
		}

		// Token: 0x0600501F RID: 20511 RVA: 0x000DBEF0 File Offset: 0x000DA0F0
		[CLSCompliant(false)]
		public static void VertexAttrib3(int index, ref Vector3 v)
		{
			GL.VertexAttrib3(index, v.X, v.Y, v.Z);
		}

		// Token: 0x06005020 RID: 20512 RVA: 0x000DBF0C File Offset: 0x000DA10C
		[CLSCompliant(false)]
		public static void VertexAttrib4(int index, ref Vector4 v)
		{
			GL.VertexAttrib4(index, v.X, v.Y, v.Z, v.W);
		}

		// Token: 0x06005021 RID: 20513 RVA: 0x000DBF2C File Offset: 0x000DA12C
		public static void VertexAttrib2(int index, Vector2 v)
		{
			GL.VertexAttrib2(index, v.X, v.Y);
		}

		// Token: 0x06005022 RID: 20514 RVA: 0x000DBF44 File Offset: 0x000DA144
		public static void VertexAttrib3(int index, Vector3 v)
		{
			GL.VertexAttrib3(index, v.X, v.Y, v.Z);
		}

		// Token: 0x06005023 RID: 20515 RVA: 0x000DBF64 File Offset: 0x000DA164
		public static void VertexAttrib4(int index, Vector4 v)
		{
			GL.VertexAttrib4(index, v.X, v.Y, v.Z, v.W);
		}

		// Token: 0x06005024 RID: 20516 RVA: 0x000DBF88 File Offset: 0x000DA188
		public static void VertexAttribPointer(int index, int size, VertexAttribPointerType type, bool normalized, int stride, int offset)
		{
			GL.VertexAttribPointer(index, size, type, normalized, stride, (IntPtr)offset);
		}

		// Token: 0x06005025 RID: 20517 RVA: 0x000DBF9C File Offset: 0x000DA19C
		[CLSCompliant(false)]
		public static void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, int offset)
		{
			GL.VertexAttribPointer(index, size, type, normalized, stride, (IntPtr)offset);
		}

		// Token: 0x06005026 RID: 20518 RVA: 0x000DBFB0 File Offset: 0x000DA1B0
		public static void DrawElements(BeginMode mode, int count, DrawElementsType type, int offset)
		{
			GL.DrawElements((PrimitiveType)mode, count, type, new IntPtr(offset));
		}

		// Token: 0x06005027 RID: 20519 RVA: 0x000DBFC0 File Offset: 0x000DA1C0
		public unsafe static void GetFloat(GetPName pname, out Vector2 vector)
		{
			fixed (Vector2* ptr = &vector)
			{
				GL.GetFloat(pname, (float*)ptr);
			}
		}

		// Token: 0x06005028 RID: 20520 RVA: 0x000DBFDC File Offset: 0x000DA1DC
		public unsafe static void GetFloat(GetPName pname, out Vector3 vector)
		{
			fixed (Vector3* ptr = &vector)
			{
				GL.GetFloat(pname, (float*)ptr);
			}
		}

		// Token: 0x06005029 RID: 20521 RVA: 0x000DBFF8 File Offset: 0x000DA1F8
		public unsafe static void GetFloat(GetPName pname, out Vector4 vector)
		{
			fixed (Vector4* ptr = &vector)
			{
				GL.GetFloat(pname, (float*)ptr);
			}
		}

		// Token: 0x0600502A RID: 20522 RVA: 0x000DC014 File Offset: 0x000DA214
		public unsafe static void GetFloat(GetPName pname, out Matrix4 matrix)
		{
			fixed (Matrix4* ptr = &matrix)
			{
				GL.GetFloat(pname, (float*)ptr);
			}
		}

		// Token: 0x0600502B RID: 20523 RVA: 0x000DC030 File Offset: 0x000DA230
		public static void Viewport(Size size)
		{
			GL.Viewport(0, 0, size.Width, size.Height);
		}

		// Token: 0x0600502C RID: 20524 RVA: 0x000DC048 File Offset: 0x000DA248
		public static void Viewport(Point location, Size size)
		{
			GL.Viewport(location.X, location.Y, size.Width, size.Height);
		}

		// Token: 0x0600502D RID: 20525 RVA: 0x000DC06C File Offset: 0x000DA26C
		public static void Viewport(Rectangle rectangle)
		{
			GL.Viewport(rectangle.X, rectangle.Y, rectangle.Width, rectangle.Height);
		}

		// Token: 0x0600502E RID: 20526 RVA: 0x000DC090 File Offset: 0x000DA290
		static GL()
		{
			GL.EntryPoints = new IntPtr[GL.EntryPointNameOffsets.Length];
		}

		// Token: 0x0600502F RID: 20527 RVA: 0x000DC0EC File Offset: 0x000DA2EC
		[CLSCompliant(false)]
		public static void ActiveShaderProgram(int pipeline, int program)
		{
			calli(System.Void(System.UInt32,System.UInt32), pipeline, program, GL.EntryPoints[0]);
		}

		// Token: 0x06005030 RID: 20528 RVA: 0x000DC0FC File Offset: 0x000DA2FC
		[CLSCompliant(false)]
		public static void ActiveShaderProgram(uint pipeline, uint program)
		{
			calli(System.Void(System.UInt32,System.UInt32), pipeline, program, GL.EntryPoints[0]);
		}

		// Token: 0x06005031 RID: 20529 RVA: 0x000DC10C File Offset: 0x000DA30C
		public static void ActiveTexture(TextureUnit texture)
		{
			calli(System.Void(System.Int32), texture, GL.EntryPoints[1]);
		}

		// Token: 0x06005032 RID: 20530 RVA: 0x000DC11C File Offset: 0x000DA31C
		[CLSCompliant(false)]
		public static void AttachShader(int program, int shader)
		{
			calli(System.Void(System.UInt32,System.UInt32), program, shader, GL.EntryPoints[2]);
		}

		// Token: 0x06005033 RID: 20531 RVA: 0x000DC12C File Offset: 0x000DA32C
		[CLSCompliant(false)]
		public static void AttachShader(uint program, uint shader)
		{
			calli(System.Void(System.UInt32,System.UInt32), program, shader, GL.EntryPoints[2]);
		}

		// Token: 0x06005034 RID: 20532 RVA: 0x000DC13C File Offset: 0x000DA33C
		[CLSCompliant(false)]
		public static void BeginConditionalRender(int id, ConditionalRenderType mode)
		{
			calli(System.Void(System.UInt32,System.Int32), id, mode, GL.EntryPoints[3]);
		}

		// Token: 0x06005035 RID: 20533 RVA: 0x000DC14C File Offset: 0x000DA34C
		[CLSCompliant(false)]
		public static void BeginConditionalRender(uint id, ConditionalRenderType mode)
		{
			calli(System.Void(System.UInt32,System.Int32), id, mode, GL.EntryPoints[3]);
		}

		// Token: 0x06005036 RID: 20534 RVA: 0x000DC15C File Offset: 0x000DA35C
		[CLSCompliant(false)]
		public static void BeginQuery(QueryTarget target, int id)
		{
			calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[4]);
		}

		// Token: 0x06005037 RID: 20535 RVA: 0x000DC16C File Offset: 0x000DA36C
		[CLSCompliant(false)]
		public static void BeginQuery(QueryTarget target, uint id)
		{
			calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[4]);
		}

		// Token: 0x06005038 RID: 20536 RVA: 0x000DC17C File Offset: 0x000DA37C
		[CLSCompliant(false)]
		public static void BeginQueryIndexed(QueryTarget target, int index, int id)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, id, GL.EntryPoints[5]);
		}

		// Token: 0x06005039 RID: 20537 RVA: 0x000DC190 File Offset: 0x000DA390
		[CLSCompliant(false)]
		public static void BeginQueryIndexed(QueryTarget target, uint index, uint id)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, id, GL.EntryPoints[5]);
		}

		// Token: 0x0600503A RID: 20538 RVA: 0x000DC1A4 File Offset: 0x000DA3A4
		public static void BeginTransformFeedback(TransformFeedbackPrimitiveType primitiveMode)
		{
			calli(System.Void(System.Int32), primitiveMode, GL.EntryPoints[6]);
		}

		// Token: 0x0600503B RID: 20539 RVA: 0x000DC1B4 File Offset: 0x000DA3B4
		[CLSCompliant(false)]
		public static void BindAttribLocation(int program, int index, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			calli(System.Void(System.UInt32,System.UInt32,System.IntPtr), program, index, intPtr, GL.EntryPoints[7]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x0600503C RID: 20540 RVA: 0x000DC1E0 File Offset: 0x000DA3E0
		[CLSCompliant(false)]
		public static void BindAttribLocation(uint program, uint index, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			calli(System.Void(System.UInt32,System.UInt32,System.IntPtr), program, index, intPtr, GL.EntryPoints[7]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x0600503D RID: 20541 RVA: 0x000DC20C File Offset: 0x000DA40C
		[CLSCompliant(false)]
		public static void BindBuffer(BufferTarget target, int buffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, buffer, GL.EntryPoints[8]);
		}

		// Token: 0x0600503E RID: 20542 RVA: 0x000DC21C File Offset: 0x000DA41C
		[CLSCompliant(false)]
		public static void BindBuffer(BufferTarget target, uint buffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, buffer, GL.EntryPoints[8]);
		}

		// Token: 0x0600503F RID: 20543 RVA: 0x000DC22C File Offset: 0x000DA42C
		[CLSCompliant(false)]
		public static void BindBufferBase(BufferRangeTarget target, int index, int buffer)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, buffer, GL.EntryPoints[9]);
		}

		// Token: 0x06005040 RID: 20544 RVA: 0x000DC240 File Offset: 0x000DA440
		[CLSCompliant(false)]
		public static void BindBufferBase(BufferRangeTarget target, uint index, uint buffer)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, buffer, GL.EntryPoints[9]);
		}

		// Token: 0x06005041 RID: 20545 RVA: 0x000DC254 File Offset: 0x000DA454
		[CLSCompliant(false)]
		public static void BindBufferRange(BufferRangeTarget target, int index, int buffer, IntPtr offset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr), target, index, buffer, offset, size, GL.EntryPoints[10]);
		}

		// Token: 0x06005042 RID: 20546 RVA: 0x000DC26C File Offset: 0x000DA46C
		[CLSCompliant(false)]
		public static void BindBufferRange(BufferRangeTarget target, uint index, uint buffer, IntPtr offset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr), target, index, buffer, offset, size, GL.EntryPoints[10]);
		}

		// Token: 0x06005043 RID: 20547 RVA: 0x000DC284 File Offset: 0x000DA484
		[CLSCompliant(false)]
		public unsafe static void BindBuffersBase(BufferRangeTarget target, int first, int count, int[] buffers)
		{
			fixed (int* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, first, count, ptr, GL.EntryPoints[11]);
			}
		}

		// Token: 0x06005044 RID: 20548 RVA: 0x000DC2B8 File Offset: 0x000DA4B8
		[CLSCompliant(false)]
		public unsafe static void BindBuffersBase(BufferRangeTarget target, int first, int count, ref int buffers)
		{
			fixed (int* ptr = &buffers)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, first, count, ptr, GL.EntryPoints[11]);
			}
		}

		// Token: 0x06005045 RID: 20549 RVA: 0x000DC2DC File Offset: 0x000DA4DC
		[CLSCompliant(false)]
		public unsafe static void BindBuffersBase(BufferRangeTarget target, int first, int count, int* buffers)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, first, count, buffers, GL.EntryPoints[11]);
		}

		// Token: 0x06005046 RID: 20550 RVA: 0x000DC2F0 File Offset: 0x000DA4F0
		[CLSCompliant(false)]
		public unsafe static void BindBuffersBase(BufferRangeTarget target, uint first, int count, uint[] buffers)
		{
			fixed (uint* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, first, count, ptr, GL.EntryPoints[11]);
			}
		}

		// Token: 0x06005047 RID: 20551 RVA: 0x000DC324 File Offset: 0x000DA524
		[CLSCompliant(false)]
		public unsafe static void BindBuffersBase(BufferRangeTarget target, uint first, int count, ref uint buffers)
		{
			fixed (uint* ptr = &buffers)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, first, count, ptr, GL.EntryPoints[11]);
			}
		}

		// Token: 0x06005048 RID: 20552 RVA: 0x000DC348 File Offset: 0x000DA548
		[CLSCompliant(false)]
		public unsafe static void BindBuffersBase(BufferRangeTarget target, uint first, int count, uint* buffers)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, first, count, buffers, GL.EntryPoints[11]);
		}

		// Token: 0x06005049 RID: 20553 RVA: 0x000DC35C File Offset: 0x000DA55C
		[CLSCompliant(false)]
		public unsafe static void BindBuffersRange(BufferRangeTarget target, int first, int count, int[] buffers, IntPtr[] offsets, IntPtr[] sizes)
		{
			fixed (int* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (IntPtr* ptr3 = ref (offsets != null && offsets.Length != 0) ? ref offsets[0] : ref *null)
				{
					IntPtr* ptr4 = ptr3;
					fixed (IntPtr* ptr5 = ref (sizes != null && sizes.Length != 0) ? ref sizes[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.IntPtr*), target, first, count, ptr2, ptr4, ptr5, GL.EntryPoints[12]);
					}
				}
			}
		}

		// Token: 0x0600504A RID: 20554 RVA: 0x000DC3C4 File Offset: 0x000DA5C4
		[CLSCompliant(false)]
		public unsafe static void BindBuffersRange(BufferRangeTarget target, int first, int count, ref int buffers, ref IntPtr offsets, ref IntPtr sizes)
		{
			fixed (int* ptr = &buffers)
			{
				int* ptr2 = ptr;
				fixed (IntPtr* ptr3 = &offsets)
				{
					IntPtr* ptr4 = ptr3;
					fixed (IntPtr* ptr5 = &sizes)
					{
						calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.IntPtr*), target, first, count, ptr2, ptr4, ptr5, GL.EntryPoints[12]);
					}
				}
			}
		}

		// Token: 0x0600504B RID: 20555 RVA: 0x000DC3F0 File Offset: 0x000DA5F0
		[CLSCompliant(false)]
		public unsafe static void BindBuffersRange(BufferRangeTarget target, int first, int count, int* buffers, IntPtr* offsets, IntPtr* sizes)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.IntPtr*), target, first, count, buffers, offsets, sizes, GL.EntryPoints[12]);
		}

		// Token: 0x0600504C RID: 20556 RVA: 0x000DC408 File Offset: 0x000DA608
		[CLSCompliant(false)]
		public unsafe static void BindBuffersRange(BufferRangeTarget target, uint first, int count, uint[] buffers, IntPtr[] offsets, IntPtr[] sizes)
		{
			fixed (uint* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (IntPtr* ptr3 = ref (offsets != null && offsets.Length != 0) ? ref offsets[0] : ref *null)
				{
					IntPtr* ptr4 = ptr3;
					fixed (IntPtr* ptr5 = ref (sizes != null && sizes.Length != 0) ? ref sizes[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.IntPtr*), target, first, count, ptr2, ptr4, ptr5, GL.EntryPoints[12]);
					}
				}
			}
		}

		// Token: 0x0600504D RID: 20557 RVA: 0x000DC470 File Offset: 0x000DA670
		[CLSCompliant(false)]
		public unsafe static void BindBuffersRange(BufferRangeTarget target, uint first, int count, ref uint buffers, ref IntPtr offsets, ref IntPtr sizes)
		{
			fixed (uint* ptr = &buffers)
			{
				uint* ptr2 = ptr;
				fixed (IntPtr* ptr3 = &offsets)
				{
					IntPtr* ptr4 = ptr3;
					fixed (IntPtr* ptr5 = &sizes)
					{
						calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.IntPtr*), target, first, count, ptr2, ptr4, ptr5, GL.EntryPoints[12]);
					}
				}
			}
		}

		// Token: 0x0600504E RID: 20558 RVA: 0x000DC49C File Offset: 0x000DA69C
		[CLSCompliant(false)]
		public unsafe static void BindBuffersRange(BufferRangeTarget target, uint first, int count, uint* buffers, IntPtr* offsets, IntPtr* sizes)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.IntPtr*), target, first, count, buffers, offsets, sizes, GL.EntryPoints[12]);
		}

		// Token: 0x0600504F RID: 20559 RVA: 0x000DC4B4 File Offset: 0x000DA6B4
		[CLSCompliant(false)]
		public static void BindFragDataLocation(int program, int color, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			calli(System.Void(System.UInt32,System.UInt32,System.IntPtr), program, color, intPtr, GL.EntryPoints[13]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06005050 RID: 20560 RVA: 0x000DC4E0 File Offset: 0x000DA6E0
		[CLSCompliant(false)]
		public static void BindFragDataLocation(uint program, uint color, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			calli(System.Void(System.UInt32,System.UInt32,System.IntPtr), program, color, intPtr, GL.EntryPoints[13]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06005051 RID: 20561 RVA: 0x000DC50C File Offset: 0x000DA70C
		[CLSCompliant(false)]
		public static void BindFragDataLocationIndexed(int program, int colorNumber, int index, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr), program, colorNumber, index, intPtr, GL.EntryPoints[14]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06005052 RID: 20562 RVA: 0x000DC538 File Offset: 0x000DA738
		[CLSCompliant(false)]
		public static void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr), program, colorNumber, index, intPtr, GL.EntryPoints[14]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06005053 RID: 20563 RVA: 0x000DC564 File Offset: 0x000DA764
		[CLSCompliant(false)]
		public static void BindFramebuffer(FramebufferTarget target, int framebuffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, framebuffer, GL.EntryPoints[15]);
		}

		// Token: 0x06005054 RID: 20564 RVA: 0x000DC578 File Offset: 0x000DA778
		[CLSCompliant(false)]
		public static void BindFramebuffer(FramebufferTarget target, uint framebuffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, framebuffer, GL.EntryPoints[15]);
		}

		// Token: 0x06005055 RID: 20565 RVA: 0x000DC58C File Offset: 0x000DA78C
		[CLSCompliant(false)]
		public static void BindImageTexture(int unit, int texture, int level, bool layered, int layer, TextureAccess access, SizedInternalFormat format)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32), unit, texture, level, layered, layer, access, format, GL.EntryPoints[16]);
		}

		// Token: 0x06005056 RID: 20566 RVA: 0x000DC5B0 File Offset: 0x000DA7B0
		[CLSCompliant(false)]
		public static void BindImageTexture(uint unit, uint texture, int level, bool layered, int layer, TextureAccess access, SizedInternalFormat format)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32), unit, texture, level, layered, layer, access, format, GL.EntryPoints[16]);
		}

		// Token: 0x06005057 RID: 20567 RVA: 0x000DC5D4 File Offset: 0x000DA7D4
		[CLSCompliant(false)]
		public unsafe static void BindImageTextures(int first, int count, int[] textures)
		{
			fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[17]);
			}
		}

		// Token: 0x06005058 RID: 20568 RVA: 0x000DC608 File Offset: 0x000DA808
		[CLSCompliant(false)]
		public unsafe static void BindImageTextures(int first, int count, ref int textures)
		{
			fixed (int* ptr = &textures)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[17]);
			}
		}

		// Token: 0x06005059 RID: 20569 RVA: 0x000DC628 File Offset: 0x000DA828
		[CLSCompliant(false)]
		public unsafe static void BindImageTextures(int first, int count, int* textures)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, textures, GL.EntryPoints[17]);
		}

		// Token: 0x0600505A RID: 20570 RVA: 0x000DC63C File Offset: 0x000DA83C
		[CLSCompliant(false)]
		public unsafe static void BindImageTextures(uint first, int count, uint[] textures)
		{
			fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[17]);
			}
		}

		// Token: 0x0600505B RID: 20571 RVA: 0x000DC670 File Offset: 0x000DA870
		[CLSCompliant(false)]
		public unsafe static void BindImageTextures(uint first, int count, ref uint textures)
		{
			fixed (uint* ptr = &textures)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[17]);
			}
		}

		// Token: 0x0600505C RID: 20572 RVA: 0x000DC690 File Offset: 0x000DA890
		[CLSCompliant(false)]
		public unsafe static void BindImageTextures(uint first, int count, uint* textures)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, textures, GL.EntryPoints[17]);
		}

		// Token: 0x0600505D RID: 20573 RVA: 0x000DC6A4 File Offset: 0x000DA8A4
		[CLSCompliant(false)]
		public static void BindProgramPipeline(int pipeline)
		{
			calli(System.Void(System.UInt32), pipeline, GL.EntryPoints[18]);
		}

		// Token: 0x0600505E RID: 20574 RVA: 0x000DC6B4 File Offset: 0x000DA8B4
		[CLSCompliant(false)]
		public static void BindProgramPipeline(uint pipeline)
		{
			calli(System.Void(System.UInt32), pipeline, GL.EntryPoints[18]);
		}

		// Token: 0x0600505F RID: 20575 RVA: 0x000DC6C4 File Offset: 0x000DA8C4
		[CLSCompliant(false)]
		public static void BindRenderbuffer(RenderbufferTarget target, int renderbuffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, renderbuffer, GL.EntryPoints[19]);
		}

		// Token: 0x06005060 RID: 20576 RVA: 0x000DC6D8 File Offset: 0x000DA8D8
		[CLSCompliant(false)]
		public static void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, renderbuffer, GL.EntryPoints[19]);
		}

		// Token: 0x06005061 RID: 20577 RVA: 0x000DC6EC File Offset: 0x000DA8EC
		[CLSCompliant(false)]
		public static void BindSampler(int unit, int sampler)
		{
			calli(System.Void(System.UInt32,System.UInt32), unit, sampler, GL.EntryPoints[20]);
		}

		// Token: 0x06005062 RID: 20578 RVA: 0x000DC700 File Offset: 0x000DA900
		[CLSCompliant(false)]
		public static void BindSampler(uint unit, uint sampler)
		{
			calli(System.Void(System.UInt32,System.UInt32), unit, sampler, GL.EntryPoints[20]);
		}

		// Token: 0x06005063 RID: 20579 RVA: 0x000DC714 File Offset: 0x000DA914
		[CLSCompliant(false)]
		public unsafe static void BindSamplers(int first, int count, int[] samplers)
		{
			fixed (int* ptr = ref (samplers != null && samplers.Length != 0) ? ref samplers[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[21]);
			}
		}

		// Token: 0x06005064 RID: 20580 RVA: 0x000DC748 File Offset: 0x000DA948
		[CLSCompliant(false)]
		public unsafe static void BindSamplers(int first, int count, ref int samplers)
		{
			fixed (int* ptr = &samplers)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[21]);
			}
		}

		// Token: 0x06005065 RID: 20581 RVA: 0x000DC768 File Offset: 0x000DA968
		[CLSCompliant(false)]
		public unsafe static void BindSamplers(int first, int count, int* samplers)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, samplers, GL.EntryPoints[21]);
		}

		// Token: 0x06005066 RID: 20582 RVA: 0x000DC77C File Offset: 0x000DA97C
		[CLSCompliant(false)]
		public unsafe static void BindSamplers(uint first, int count, uint[] samplers)
		{
			fixed (uint* ptr = ref (samplers != null && samplers.Length != 0) ? ref samplers[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[21]);
			}
		}

		// Token: 0x06005067 RID: 20583 RVA: 0x000DC7B0 File Offset: 0x000DA9B0
		[CLSCompliant(false)]
		public unsafe static void BindSamplers(uint first, int count, ref uint samplers)
		{
			fixed (uint* ptr = &samplers)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[21]);
			}
		}

		// Token: 0x06005068 RID: 20584 RVA: 0x000DC7D0 File Offset: 0x000DA9D0
		[CLSCompliant(false)]
		public unsafe static void BindSamplers(uint first, int count, uint* samplers)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, samplers, GL.EntryPoints[21]);
		}

		// Token: 0x06005069 RID: 20585 RVA: 0x000DC7E4 File Offset: 0x000DA9E4
		[CLSCompliant(false)]
		public static void BindTexture(TextureTarget target, int texture)
		{
			calli(System.Void(System.Int32,System.UInt32), target, texture, GL.EntryPoints[22]);
		}

		// Token: 0x0600506A RID: 20586 RVA: 0x000DC7F8 File Offset: 0x000DA9F8
		[CLSCompliant(false)]
		public static void BindTexture(TextureTarget target, uint texture)
		{
			calli(System.Void(System.Int32,System.UInt32), target, texture, GL.EntryPoints[22]);
		}

		// Token: 0x0600506B RID: 20587 RVA: 0x000DC80C File Offset: 0x000DAA0C
		[CLSCompliant(false)]
		public unsafe static void BindTextures(int first, int count, int[] textures)
		{
			fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[23]);
			}
		}

		// Token: 0x0600506C RID: 20588 RVA: 0x000DC840 File Offset: 0x000DAA40
		[CLSCompliant(false)]
		public unsafe static void BindTextures(int first, int count, ref int textures)
		{
			fixed (int* ptr = &textures)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[23]);
			}
		}

		// Token: 0x0600506D RID: 20589 RVA: 0x000DC860 File Offset: 0x000DAA60
		[CLSCompliant(false)]
		public unsafe static void BindTextures(int first, int count, int* textures)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, textures, GL.EntryPoints[23]);
		}

		// Token: 0x0600506E RID: 20590 RVA: 0x000DC874 File Offset: 0x000DAA74
		[CLSCompliant(false)]
		public unsafe static void BindTextures(uint first, int count, uint[] textures)
		{
			fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[23]);
			}
		}

		// Token: 0x0600506F RID: 20591 RVA: 0x000DC8A8 File Offset: 0x000DAAA8
		[CLSCompliant(false)]
		public unsafe static void BindTextures(uint first, int count, ref uint textures)
		{
			fixed (uint* ptr = &textures)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[23]);
			}
		}

		// Token: 0x06005070 RID: 20592 RVA: 0x000DC8C8 File Offset: 0x000DAAC8
		[CLSCompliant(false)]
		public unsafe static void BindTextures(uint first, int count, uint* textures)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, textures, GL.EntryPoints[23]);
		}

		// Token: 0x06005071 RID: 20593 RVA: 0x000DC8DC File Offset: 0x000DAADC
		[CLSCompliant(false)]
		public static void BindTransformFeedback(TransformFeedbackTarget target, int id)
		{
			calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[24]);
		}

		// Token: 0x06005072 RID: 20594 RVA: 0x000DC8F0 File Offset: 0x000DAAF0
		[CLSCompliant(false)]
		public static void BindTransformFeedback(TransformFeedbackTarget target, uint id)
		{
			calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[24]);
		}

		// Token: 0x06005073 RID: 20595 RVA: 0x000DC904 File Offset: 0x000DAB04
		[CLSCompliant(false)]
		public static void BindVertexArray(int array)
		{
			calli(System.Void(System.UInt32), array, GL.EntryPoints[25]);
		}

		// Token: 0x06005074 RID: 20596 RVA: 0x000DC914 File Offset: 0x000DAB14
		[CLSCompliant(false)]
		public static void BindVertexArray(uint array)
		{
			calli(System.Void(System.UInt32), array, GL.EntryPoints[25]);
		}

		// Token: 0x06005075 RID: 20597 RVA: 0x000DC924 File Offset: 0x000DAB24
		[CLSCompliant(false)]
		public static void BindVertexBuffer(int bindingindex, int buffer, IntPtr offset, int stride)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.Int32), bindingindex, buffer, offset, stride, GL.EntryPoints[26]);
		}

		// Token: 0x06005076 RID: 20598 RVA: 0x000DC938 File Offset: 0x000DAB38
		[CLSCompliant(false)]
		public static void BindVertexBuffer(uint bindingindex, uint buffer, IntPtr offset, int stride)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.Int32), bindingindex, buffer, offset, stride, GL.EntryPoints[26]);
		}

		// Token: 0x06005077 RID: 20599 RVA: 0x000DC94C File Offset: 0x000DAB4C
		[CLSCompliant(false)]
		public unsafe static void BindVertexBuffers(int first, int count, int[] buffers, IntPtr[] offsets, int[] strides)
		{
			fixed (int* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (IntPtr* ptr3 = ref (offsets != null && offsets.Length != 0) ? ref offsets[0] : ref *null)
				{
					IntPtr* ptr4 = ptr3;
					fixed (int* ptr5 = ref (strides != null && strides.Length != 0) ? ref strides[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.Int32*), first, count, ptr2, ptr4, ptr5, GL.EntryPoints[27]);
					}
				}
			}
		}

		// Token: 0x06005078 RID: 20600 RVA: 0x000DC9B0 File Offset: 0x000DABB0
		[CLSCompliant(false)]
		public unsafe static void BindVertexBuffers(int first, int count, ref int buffers, ref IntPtr offsets, ref int strides)
		{
			fixed (int* ptr = &buffers)
			{
				int* ptr2 = ptr;
				fixed (IntPtr* ptr3 = &offsets)
				{
					IntPtr* ptr4 = ptr3;
					fixed (int* ptr5 = &strides)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.Int32*), first, count, ptr2, ptr4, ptr5, GL.EntryPoints[27]);
					}
				}
			}
		}

		// Token: 0x06005079 RID: 20601 RVA: 0x000DC9DC File Offset: 0x000DABDC
		[CLSCompliant(false)]
		public unsafe static void BindVertexBuffers(int first, int count, int* buffers, IntPtr* offsets, int* strides)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.Int32*), first, count, buffers, offsets, strides, GL.EntryPoints[27]);
		}

		// Token: 0x0600507A RID: 20602 RVA: 0x000DC9F4 File Offset: 0x000DABF4
		[CLSCompliant(false)]
		public unsafe static void BindVertexBuffers(uint first, int count, uint[] buffers, IntPtr[] offsets, int[] strides)
		{
			fixed (uint* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (IntPtr* ptr3 = ref (offsets != null && offsets.Length != 0) ? ref offsets[0] : ref *null)
				{
					IntPtr* ptr4 = ptr3;
					fixed (int* ptr5 = ref (strides != null && strides.Length != 0) ? ref strides[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.Int32*), first, count, ptr2, ptr4, ptr5, GL.EntryPoints[27]);
					}
				}
			}
		}

		// Token: 0x0600507B RID: 20603 RVA: 0x000DCA58 File Offset: 0x000DAC58
		[CLSCompliant(false)]
		public unsafe static void BindVertexBuffers(uint first, int count, ref uint buffers, ref IntPtr offsets, ref int strides)
		{
			fixed (uint* ptr = &buffers)
			{
				uint* ptr2 = ptr;
				fixed (IntPtr* ptr3 = &offsets)
				{
					IntPtr* ptr4 = ptr3;
					fixed (int* ptr5 = &strides)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.Int32*), first, count, ptr2, ptr4, ptr5, GL.EntryPoints[27]);
					}
				}
			}
		}

		// Token: 0x0600507C RID: 20604 RVA: 0x000DCA84 File Offset: 0x000DAC84
		[CLSCompliant(false)]
		public unsafe static void BindVertexBuffers(uint first, int count, uint* buffers, IntPtr* offsets, int* strides)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.Int32*), first, count, buffers, offsets, strides, GL.EntryPoints[27]);
		}

		// Token: 0x0600507D RID: 20605 RVA: 0x000DCA9C File Offset: 0x000DAC9C
		public static void BlendColor(float red, float green, float blue, float alpha)
		{
			calli(System.Void(System.Single,System.Single,System.Single,System.Single), red, green, blue, alpha, GL.EntryPoints[28]);
		}

		// Token: 0x0600507E RID: 20606 RVA: 0x000DCAB0 File Offset: 0x000DACB0
		public static void BlendEquation(BlendEquationMode mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[29]);
		}

		// Token: 0x0600507F RID: 20607 RVA: 0x000DCAC0 File Offset: 0x000DACC0
		[CLSCompliant(false)]
		public static void BlendEquation(int buf, BlendEquationMode mode)
		{
			calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[30]);
		}

		// Token: 0x06005080 RID: 20608 RVA: 0x000DCAD4 File Offset: 0x000DACD4
		[CLSCompliant(false)]
		public static void BlendEquation(uint buf, BlendEquationMode mode)
		{
			calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[30]);
		}

		// Token: 0x06005081 RID: 20609 RVA: 0x000DCAE8 File Offset: 0x000DACE8
		public static void BlendEquationSeparate(BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
		{
			calli(System.Void(System.Int32,System.Int32), modeRGB, modeAlpha, GL.EntryPoints[32]);
		}

		// Token: 0x06005082 RID: 20610 RVA: 0x000DCAFC File Offset: 0x000DACFC
		[CLSCompliant(false)]
		public static void BlendEquationSeparate(int buf, BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, modeRGB, modeAlpha, GL.EntryPoints[33]);
		}

		// Token: 0x06005083 RID: 20611 RVA: 0x000DCB10 File Offset: 0x000DAD10
		[CLSCompliant(false)]
		public static void BlendEquationSeparate(uint buf, BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, modeRGB, modeAlpha, GL.EntryPoints[33]);
		}

		// Token: 0x06005084 RID: 20612 RVA: 0x000DCB24 File Offset: 0x000DAD24
		public static void BlendFunc(BlendingFactorSrc sfactor, BlendingFactorDest dfactor)
		{
			calli(System.Void(System.Int32,System.Int32), sfactor, dfactor, GL.EntryPoints[35]);
		}

		// Token: 0x06005085 RID: 20613 RVA: 0x000DCB38 File Offset: 0x000DAD38
		[CLSCompliant(false)]
		public static void BlendFunc(int buf, BlendingFactorSrc src, BlendingFactorDest dst)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, src, dst, GL.EntryPoints[36]);
		}

		// Token: 0x06005086 RID: 20614 RVA: 0x000DCB4C File Offset: 0x000DAD4C
		[CLSCompliant(false)]
		public static void BlendFunc(uint buf, BlendingFactorSrc src, BlendingFactorDest dst)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, src, dst, GL.EntryPoints[36]);
		}

		// Token: 0x06005087 RID: 20615 RVA: 0x000DCB60 File Offset: 0x000DAD60
		public static void BlendFuncSeparate(BlendingFactorSrc sfactorRGB, BlendingFactorDest dfactorRGB, BlendingFactorSrc sfactorAlpha, BlendingFactorDest dfactorAlpha)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha, GL.EntryPoints[38]);
		}

		// Token: 0x06005088 RID: 20616 RVA: 0x000DCB74 File Offset: 0x000DAD74
		[CLSCompliant(false)]
		public static void BlendFuncSeparate(int buf, BlendingFactorSrc srcRGB, BlendingFactorDest dstRGB, BlendingFactorSrc srcAlpha, BlendingFactorDest dstAlpha)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), buf, srcRGB, dstRGB, srcAlpha, dstAlpha, GL.EntryPoints[39]);
		}

		// Token: 0x06005089 RID: 20617 RVA: 0x000DCB8C File Offset: 0x000DAD8C
		[CLSCompliant(false)]
		public static void BlendFuncSeparate(uint buf, BlendingFactorSrc srcRGB, BlendingFactorDest dstRGB, BlendingFactorSrc srcAlpha, BlendingFactorDest dstAlpha)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), buf, srcRGB, dstRGB, srcAlpha, dstAlpha, GL.EntryPoints[39]);
		}

		// Token: 0x0600508A RID: 20618 RVA: 0x000DCBA4 File Offset: 0x000DADA4
		public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter, GL.EntryPoints[41]);
		}

		// Token: 0x0600508B RID: 20619 RVA: 0x000DCBD0 File Offset: 0x000DADD0
		public static void BufferData(BufferTarget target, IntPtr size, IntPtr data, BufferUsageHint usage)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, data, usage, GL.EntryPoints[42]);
		}

		// Token: 0x0600508C RID: 20620 RVA: 0x000DCBE4 File Offset: 0x000DADE4
		[CLSCompliant(false)]
		public unsafe static void BufferData<T2>(BufferTarget target, IntPtr size, [In] [Out] T2[] data, BufferUsageHint usage) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[42]);
			}
		}

		// Token: 0x0600508D RID: 20621 RVA: 0x000DCC18 File Offset: 0x000DAE18
		[CLSCompliant(false)]
		public unsafe static void BufferData<T2>(BufferTarget target, IntPtr size, [In] [Out] T2[,] data, BufferUsageHint usage) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[42]);
			}
		}

		// Token: 0x0600508E RID: 20622 RVA: 0x000DCC50 File Offset: 0x000DAE50
		[CLSCompliant(false)]
		public unsafe static void BufferData<T2>(BufferTarget target, IntPtr size, [In] [Out] T2[,,] data, BufferUsageHint usage) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[42]);
			}
		}

		// Token: 0x0600508F RID: 20623 RVA: 0x000DCC88 File Offset: 0x000DAE88
		public unsafe static void BufferData<T2>(BufferTarget target, IntPtr size, [In] [Out] ref T2 data, BufferUsageHint usage) where T2 : struct
		{
			fixed (T2* ptr = &data)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[42]);
			}
		}

		// Token: 0x06005090 RID: 20624 RVA: 0x000DCCAC File Offset: 0x000DAEAC
		public static void BufferStorage(BufferTarget target, IntPtr size, IntPtr data, BufferStorageFlags flags)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, data, flags, GL.EntryPoints[43]);
		}

		// Token: 0x06005091 RID: 20625 RVA: 0x000DCCC0 File Offset: 0x000DAEC0
		[CLSCompliant(false)]
		public unsafe static void BufferStorage<T2>(BufferTarget target, IntPtr size, [In] [Out] T2[] data, BufferStorageFlags flags) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, flags, GL.EntryPoints[43]);
			}
		}

		// Token: 0x06005092 RID: 20626 RVA: 0x000DCCF4 File Offset: 0x000DAEF4
		[CLSCompliant(false)]
		public unsafe static void BufferStorage<T2>(BufferTarget target, IntPtr size, [In] [Out] T2[,] data, BufferStorageFlags flags) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, flags, GL.EntryPoints[43]);
			}
		}

		// Token: 0x06005093 RID: 20627 RVA: 0x000DCD2C File Offset: 0x000DAF2C
		[CLSCompliant(false)]
		public unsafe static void BufferStorage<T2>(BufferTarget target, IntPtr size, [In] [Out] T2[,,] data, BufferStorageFlags flags) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, flags, GL.EntryPoints[43]);
			}
		}

		// Token: 0x06005094 RID: 20628 RVA: 0x000DCD64 File Offset: 0x000DAF64
		public unsafe static void BufferStorage<T2>(BufferTarget target, IntPtr size, [In] [Out] ref T2 data, BufferStorageFlags flags) where T2 : struct
		{
			fixed (T2* ptr = &data)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, flags, GL.EntryPoints[43]);
			}
		}

		// Token: 0x06005095 RID: 20629 RVA: 0x000DCD88 File Offset: 0x000DAF88
		public static void BufferSubData(BufferTarget target, IntPtr offset, IntPtr size, IntPtr data)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, data, GL.EntryPoints[44]);
		}

		// Token: 0x06005096 RID: 20630 RVA: 0x000DCD9C File Offset: 0x000DAF9C
		[CLSCompliant(false)]
		public unsafe static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] T3[] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[44]);
			}
		}

		// Token: 0x06005097 RID: 20631 RVA: 0x000DCDD0 File Offset: 0x000DAFD0
		[CLSCompliant(false)]
		public unsafe static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] T3[,] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[44]);
			}
		}

		// Token: 0x06005098 RID: 20632 RVA: 0x000DCE08 File Offset: 0x000DB008
		[CLSCompliant(false)]
		public unsafe static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] T3[,,] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[44]);
			}
		}

		// Token: 0x06005099 RID: 20633 RVA: 0x000DCE40 File Offset: 0x000DB040
		public unsafe static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] ref T3 data) where T3 : struct
		{
			fixed (T3* ptr = &data)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[44]);
			}
		}

		// Token: 0x0600509A RID: 20634 RVA: 0x000DCE64 File Offset: 0x000DB064
		public static FramebufferErrorCode CheckFramebufferStatus(FramebufferTarget target)
		{
			return calli(System.Int32(System.Int32), target, GL.EntryPoints[45]);
		}

		// Token: 0x0600509B RID: 20635 RVA: 0x000DCE74 File Offset: 0x000DB074
		public static void ClampColor(ClampColorTarget target, ClampColorMode clamp)
		{
			calli(System.Void(System.Int32,System.Int32), target, clamp, GL.EntryPoints[46]);
		}

		// Token: 0x0600509C RID: 20636 RVA: 0x000DCE88 File Offset: 0x000DB088
		public static void Clear(ClearBufferMask mask)
		{
			calli(System.Void(System.Int32), mask, GL.EntryPoints[47]);
		}

		// Token: 0x0600509D RID: 20637 RVA: 0x000DCE98 File Offset: 0x000DB098
		public static void ClearBufferData(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, format, type, data, GL.EntryPoints[48]);
		}

		// Token: 0x0600509E RID: 20638 RVA: 0x000DCEB0 File Offset: 0x000DB0B0
		[CLSCompliant(false)]
		public unsafe static void ClearBufferData<T4>(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, [In] [Out] T4[] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, format, type, ptr, GL.EntryPoints[48]);
			}
		}

		// Token: 0x0600509F RID: 20639 RVA: 0x000DCEE8 File Offset: 0x000DB0E8
		[CLSCompliant(false)]
		public unsafe static void ClearBufferData<T4>(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, [In] [Out] T4[,] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, format, type, ptr, GL.EntryPoints[48]);
			}
		}

		// Token: 0x060050A0 RID: 20640 RVA: 0x000DCF24 File Offset: 0x000DB124
		[CLSCompliant(false)]
		public unsafe static void ClearBufferData<T4>(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, [In] [Out] T4[,,] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, format, type, ptr, GL.EntryPoints[48]);
			}
		}

		// Token: 0x060050A1 RID: 20641 RVA: 0x000DCF60 File Offset: 0x000DB160
		public unsafe static void ClearBufferData<T4>(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, [In] [Out] ref T4 data) where T4 : struct
		{
			fixed (T4* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, format, type, ptr, GL.EntryPoints[48]);
			}
		}

		// Token: 0x060050A2 RID: 20642 RVA: 0x000DCF84 File Offset: 0x000DB184
		public static void ClearBuffer(ClearBufferCombined buffer, int drawbuffer, float depth, int stencil)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single,System.Int32), buffer, drawbuffer, depth, stencil, GL.EntryPoints[49]);
		}

		// Token: 0x060050A3 RID: 20643 RVA: 0x000DCF98 File Offset: 0x000DB198
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), buffer, drawbuffer, ptr, GL.EntryPoints[50]);
			}
		}

		// Token: 0x060050A4 RID: 20644 RVA: 0x000DCFCC File Offset: 0x000DB1CC
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), buffer, drawbuffer, ptr, GL.EntryPoints[50]);
			}
		}

		// Token: 0x060050A5 RID: 20645 RVA: 0x000DCFEC File Offset: 0x000DB1EC
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), buffer, drawbuffer, value, GL.EntryPoints[50]);
		}

		// Token: 0x060050A6 RID: 20646 RVA: 0x000DD000 File Offset: 0x000DB200
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), buffer, drawbuffer, ptr, GL.EntryPoints[51]);
			}
		}

		// Token: 0x060050A7 RID: 20647 RVA: 0x000DD034 File Offset: 0x000DB234
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), buffer, drawbuffer, ptr, GL.EntryPoints[51]);
			}
		}

		// Token: 0x060050A8 RID: 20648 RVA: 0x000DD054 File Offset: 0x000DB254
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, int* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), buffer, drawbuffer, value, GL.EntryPoints[51]);
		}

		// Token: 0x060050A9 RID: 20649 RVA: 0x000DD068 File Offset: 0x000DB268
		public static void ClearBufferSubData(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), target, internalformat, offset, size, format, type, data, GL.EntryPoints[52]);
		}

		// Token: 0x060050AA RID: 20650 RVA: 0x000DD08C File Offset: 0x000DB28C
		[CLSCompliant(false)]
		public unsafe static void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, [In] [Out] T6[] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), target, internalformat, offset, size, format, type, ptr, GL.EntryPoints[52]);
			}
		}

		// Token: 0x060050AB RID: 20651 RVA: 0x000DD0C8 File Offset: 0x000DB2C8
		[CLSCompliant(false)]
		public unsafe static void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, [In] [Out] T6[,] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), target, internalformat, offset, size, format, type, ptr, GL.EntryPoints[52]);
			}
		}

		// Token: 0x060050AC RID: 20652 RVA: 0x000DD108 File Offset: 0x000DB308
		[CLSCompliant(false)]
		public unsafe static void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, [In] [Out] T6[,,] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), target, internalformat, offset, size, format, type, ptr, GL.EntryPoints[52]);
			}
		}

		// Token: 0x060050AD RID: 20653 RVA: 0x000DD148 File Offset: 0x000DB348
		public unsafe static void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, [In] [Out] ref T6 data) where T6 : struct
		{
			fixed (T6* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), target, internalformat, offset, size, format, type, ptr, GL.EntryPoints[52]);
			}
		}

		// Token: 0x060050AE RID: 20654 RVA: 0x000DD170 File Offset: 0x000DB370
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), buffer, drawbuffer, ptr, GL.EntryPoints[53]);
			}
		}

		// Token: 0x060050AF RID: 20655 RVA: 0x000DD1A4 File Offset: 0x000DB3A4
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), buffer, drawbuffer, ptr, GL.EntryPoints[53]);
			}
		}

		// Token: 0x060050B0 RID: 20656 RVA: 0x000DD1C4 File Offset: 0x000DB3C4
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, uint* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), buffer, drawbuffer, value, GL.EntryPoints[53]);
		}

		// Token: 0x060050B1 RID: 20657 RVA: 0x000DD1D8 File Offset: 0x000DB3D8
		public static void ClearColor(float red, float green, float blue, float alpha)
		{
			calli(System.Void(System.Single,System.Single,System.Single,System.Single), red, green, blue, alpha, GL.EntryPoints[54]);
		}

		// Token: 0x060050B2 RID: 20658 RVA: 0x000DD1EC File Offset: 0x000DB3EC
		public static void ClearDepth(double depth)
		{
			calli(System.Void(System.Double), depth, GL.EntryPoints[55]);
		}

		// Token: 0x060050B3 RID: 20659 RVA: 0x000DD1FC File Offset: 0x000DB3FC
		public static void ClearDepth(float d)
		{
			calli(System.Void(System.Single), d, GL.EntryPoints[56]);
		}

		// Token: 0x060050B4 RID: 20660 RVA: 0x000DD20C File Offset: 0x000DB40C
		public static void ClearStencil(int s)
		{
			calli(System.Void(System.Int32), s, GL.EntryPoints[57]);
		}

		// Token: 0x060050B5 RID: 20661 RVA: 0x000DD21C File Offset: 0x000DB41C
		[CLSCompliant(false)]
		public static void ClearTexImage(int texture, int level, PixelFormat format, PixelType type, IntPtr data)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, data, GL.EntryPoints[58]);
		}

		// Token: 0x060050B6 RID: 20662 RVA: 0x000DD234 File Offset: 0x000DB434
		[CLSCompliant(false)]
		public unsafe static void ClearTexImage<T4>(int texture, int level, PixelFormat format, PixelType type, [In] [Out] T4[] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, ptr, GL.EntryPoints[58]);
			}
		}

		// Token: 0x060050B7 RID: 20663 RVA: 0x000DD26C File Offset: 0x000DB46C
		[CLSCompliant(false)]
		public unsafe static void ClearTexImage<T4>(int texture, int level, PixelFormat format, PixelType type, [In] [Out] T4[,] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, ptr, GL.EntryPoints[58]);
			}
		}

		// Token: 0x060050B8 RID: 20664 RVA: 0x000DD2A8 File Offset: 0x000DB4A8
		[CLSCompliant(false)]
		public unsafe static void ClearTexImage<T4>(int texture, int level, PixelFormat format, PixelType type, [In] [Out] T4[,,] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, ptr, GL.EntryPoints[58]);
			}
		}

		// Token: 0x060050B9 RID: 20665 RVA: 0x000DD2E4 File Offset: 0x000DB4E4
		[CLSCompliant(false)]
		public unsafe static void ClearTexImage<T4>(int texture, int level, PixelFormat format, PixelType type, [In] [Out] ref T4 data) where T4 : struct
		{
			fixed (T4* ptr = &data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, ptr, GL.EntryPoints[58]);
			}
		}

		// Token: 0x060050BA RID: 20666 RVA: 0x000DD308 File Offset: 0x000DB508
		[CLSCompliant(false)]
		public static void ClearTexImage(uint texture, int level, PixelFormat format, PixelType type, IntPtr data)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, data, GL.EntryPoints[58]);
		}

		// Token: 0x060050BB RID: 20667 RVA: 0x000DD320 File Offset: 0x000DB520
		[CLSCompliant(false)]
		public unsafe static void ClearTexImage<T4>(uint texture, int level, PixelFormat format, PixelType type, [In] [Out] T4[] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, ptr, GL.EntryPoints[58]);
			}
		}

		// Token: 0x060050BC RID: 20668 RVA: 0x000DD358 File Offset: 0x000DB558
		[CLSCompliant(false)]
		public unsafe static void ClearTexImage<T4>(uint texture, int level, PixelFormat format, PixelType type, [In] [Out] T4[,] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, ptr, GL.EntryPoints[58]);
			}
		}

		// Token: 0x060050BD RID: 20669 RVA: 0x000DD394 File Offset: 0x000DB594
		[CLSCompliant(false)]
		public unsafe static void ClearTexImage<T4>(uint texture, int level, PixelFormat format, PixelType type, [In] [Out] T4[,,] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, ptr, GL.EntryPoints[58]);
			}
		}

		// Token: 0x060050BE RID: 20670 RVA: 0x000DD3D0 File Offset: 0x000DB5D0
		[CLSCompliant(false)]
		public unsafe static void ClearTexImage<T4>(uint texture, int level, PixelFormat format, PixelType type, [In] [Out] ref T4 data) where T4 : struct
		{
			fixed (T4* ptr = &data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, ptr, GL.EntryPoints[58]);
			}
		}

		// Token: 0x060050BF RID: 20671 RVA: 0x000DD3F4 File Offset: 0x000DB5F4
		[CLSCompliant(false)]
		public static void ClearTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data, GL.EntryPoints[59]);
		}

		// Token: 0x060050C0 RID: 20672 RVA: 0x000DD420 File Offset: 0x000DB620
		[CLSCompliant(false)]
		public unsafe static void ClearTexSubImage<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[59]);
			}
		}

		// Token: 0x060050C1 RID: 20673 RVA: 0x000DD464 File Offset: 0x000DB664
		[CLSCompliant(false)]
		public unsafe static void ClearTexSubImage<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[,] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[59]);
			}
		}

		// Token: 0x060050C2 RID: 20674 RVA: 0x000DD4AC File Offset: 0x000DB6AC
		[CLSCompliant(false)]
		public unsafe static void ClearTexSubImage<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[,,] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[59]);
			}
		}

		// Token: 0x060050C3 RID: 20675 RVA: 0x000DD4F4 File Offset: 0x000DB6F4
		[CLSCompliant(false)]
		public unsafe static void ClearTexSubImage<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] ref T10 data) where T10 : struct
		{
			fixed (T10* ptr = &data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[59]);
			}
		}

		// Token: 0x060050C4 RID: 20676 RVA: 0x000DD524 File Offset: 0x000DB724
		[CLSCompliant(false)]
		public static void ClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data, GL.EntryPoints[59]);
		}

		// Token: 0x060050C5 RID: 20677 RVA: 0x000DD550 File Offset: 0x000DB750
		[CLSCompliant(false)]
		public unsafe static void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[59]);
			}
		}

		// Token: 0x060050C6 RID: 20678 RVA: 0x000DD594 File Offset: 0x000DB794
		[CLSCompliant(false)]
		public unsafe static void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[,] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[59]);
			}
		}

		// Token: 0x060050C7 RID: 20679 RVA: 0x000DD5DC File Offset: 0x000DB7DC
		[CLSCompliant(false)]
		public unsafe static void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[,,] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[59]);
			}
		}

		// Token: 0x060050C8 RID: 20680 RVA: 0x000DD624 File Offset: 0x000DB824
		[CLSCompliant(false)]
		public unsafe static void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] ref T10 data) where T10 : struct
		{
			fixed (T10* ptr = &data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[59]);
			}
		}

		// Token: 0x060050C9 RID: 20681 RVA: 0x000DD654 File Offset: 0x000DB854
		[CLSCompliant(false)]
		public static WaitSyncStatus ClientWaitSync(IntPtr sync, ClientWaitSyncFlags flags, long timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[60]);
		}

		// Token: 0x060050CA RID: 20682 RVA: 0x000DD668 File Offset: 0x000DB868
		[CLSCompliant(false)]
		public static WaitSyncStatus ClientWaitSync(IntPtr sync, ClientWaitSyncFlags flags, ulong timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[60]);
		}

		// Token: 0x060050CB RID: 20683 RVA: 0x000DD67C File Offset: 0x000DB87C
		public static void ColorMask(bool red, bool green, bool blue, bool alpha)
		{
			calli(System.Void(System.Boolean,System.Boolean,System.Boolean,System.Boolean), red, green, blue, alpha, GL.EntryPoints[61]);
		}

		// Token: 0x060050CC RID: 20684 RVA: 0x000DD690 File Offset: 0x000DB890
		[CLSCompliant(false)]
		public static void ColorMask(int index, bool r, bool g, bool b, bool a)
		{
			calli(System.Void(System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean), index, r, g, b, a, GL.EntryPoints[62]);
		}

		// Token: 0x060050CD RID: 20685 RVA: 0x000DD6A8 File Offset: 0x000DB8A8
		[CLSCompliant(false)]
		public static void ColorMask(uint index, bool r, bool g, bool b, bool a)
		{
			calli(System.Void(System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean), index, r, g, b, a, GL.EntryPoints[62]);
		}

		// Token: 0x060050CE RID: 20686 RVA: 0x000DD6C0 File Offset: 0x000DB8C0
		[CLSCompliant(false)]
		public static void ColorP3(PackedPointerType type, int color)
		{
			calli(System.Void(System.Int32,System.UInt32), type, color, GL.EntryPoints[63]);
		}

		// Token: 0x060050CF RID: 20687 RVA: 0x000DD6D4 File Offset: 0x000DB8D4
		[CLSCompliant(false)]
		public static void ColorP3(PackedPointerType type, uint color)
		{
			calli(System.Void(System.Int32,System.UInt32), type, color, GL.EntryPoints[63]);
		}

		// Token: 0x060050D0 RID: 20688 RVA: 0x000DD6E8 File Offset: 0x000DB8E8
		[CLSCompliant(false)]
		public unsafe static void ColorP3(PackedPointerType type, int* color)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, color, GL.EntryPoints[64]);
		}

		// Token: 0x060050D1 RID: 20689 RVA: 0x000DD6FC File Offset: 0x000DB8FC
		[CLSCompliant(false)]
		public unsafe static void ColorP3(PackedPointerType type, uint* color)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, color, GL.EntryPoints[64]);
		}

		// Token: 0x060050D2 RID: 20690 RVA: 0x000DD710 File Offset: 0x000DB910
		[CLSCompliant(false)]
		public static void ColorP4(PackedPointerType type, int color)
		{
			calli(System.Void(System.Int32,System.UInt32), type, color, GL.EntryPoints[65]);
		}

		// Token: 0x060050D3 RID: 20691 RVA: 0x000DD724 File Offset: 0x000DB924
		[CLSCompliant(false)]
		public static void ColorP4(PackedPointerType type, uint color)
		{
			calli(System.Void(System.Int32,System.UInt32), type, color, GL.EntryPoints[65]);
		}

		// Token: 0x060050D4 RID: 20692 RVA: 0x000DD738 File Offset: 0x000DB938
		[CLSCompliant(false)]
		public unsafe static void ColorP4(PackedPointerType type, int* color)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, color, GL.EntryPoints[66]);
		}

		// Token: 0x060050D5 RID: 20693 RVA: 0x000DD74C File Offset: 0x000DB94C
		[CLSCompliant(false)]
		public unsafe static void ColorP4(PackedPointerType type, uint* color)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, color, GL.EntryPoints[66]);
		}

		// Token: 0x060050D6 RID: 20694 RVA: 0x000DD760 File Offset: 0x000DB960
		public static void ColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, start, count, format, type, data, GL.EntryPoints[67]);
		}

		// Token: 0x060050D7 RID: 20695 RVA: 0x000DD778 File Offset: 0x000DB978
		[CLSCompliant(false)]
		public unsafe static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In] [Out] T5[] data) where T5 : struct
		{
			fixed (T5* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, start, count, format, type, ptr, GL.EntryPoints[67]);
			}
		}

		// Token: 0x060050D8 RID: 20696 RVA: 0x000DD7B4 File Offset: 0x000DB9B4
		[CLSCompliant(false)]
		public unsafe static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In] [Out] T5[,] data) where T5 : struct
		{
			fixed (T5* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, start, count, format, type, ptr, GL.EntryPoints[67]);
			}
		}

		// Token: 0x060050D9 RID: 20697 RVA: 0x000DD7F4 File Offset: 0x000DB9F4
		[CLSCompliant(false)]
		public unsafe static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In] [Out] T5[,,] data) where T5 : struct
		{
			fixed (T5* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, start, count, format, type, ptr, GL.EntryPoints[67]);
			}
		}

		// Token: 0x060050DA RID: 20698 RVA: 0x000DD834 File Offset: 0x000DBA34
		public unsafe static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In] [Out] ref T5 data) where T5 : struct
		{
			fixed (T5* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, start, count, format, type, ptr, GL.EntryPoints[67]);
			}
		}

		// Token: 0x060050DB RID: 20699 RVA: 0x000DD85C File Offset: 0x000DBA5C
		public static void ColorTable(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, table, GL.EntryPoints[68]);
		}

		// Token: 0x060050DC RID: 20700 RVA: 0x000DD874 File Offset: 0x000DBA74
		[CLSCompliant(false)]
		public unsafe static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[] table) where T5 : struct
		{
			fixed (T5* ptr = ref (table != null && table.Length != 0) ? ref table[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[68]);
			}
		}

		// Token: 0x060050DD RID: 20701 RVA: 0x000DD8B0 File Offset: 0x000DBAB0
		[CLSCompliant(false)]
		public unsafe static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,] table) where T5 : struct
		{
			fixed (T5* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[68]);
			}
		}

		// Token: 0x060050DE RID: 20702 RVA: 0x000DD8F0 File Offset: 0x000DBAF0
		[CLSCompliant(false)]
		public unsafe static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,,] table) where T5 : struct
		{
			fixed (T5* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[68]);
			}
		}

		// Token: 0x060050DF RID: 20703 RVA: 0x000DD930 File Offset: 0x000DBB30
		public unsafe static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] ref T5 table) where T5 : struct
		{
			fixed (T5* ptr = &table)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[68]);
			}
		}

		// Token: 0x060050E0 RID: 20704 RVA: 0x000DD958 File Offset: 0x000DBB58
		[CLSCompliant(false)]
		public unsafe static void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[69]);
			}
		}

		// Token: 0x060050E1 RID: 20705 RVA: 0x000DD98C File Offset: 0x000DBB8C
		[CLSCompliant(false)]
		public unsafe static void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, ref float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[69]);
			}
		}

		// Token: 0x060050E2 RID: 20706 RVA: 0x000DD9AC File Offset: 0x000DBBAC
		[CLSCompliant(false)]
		public unsafe static void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[69]);
		}

		// Token: 0x060050E3 RID: 20707 RVA: 0x000DD9C0 File Offset: 0x000DBBC0
		[CLSCompliant(false)]
		public unsafe static void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[70]);
			}
		}

		// Token: 0x060050E4 RID: 20708 RVA: 0x000DD9F4 File Offset: 0x000DBBF4
		[CLSCompliant(false)]
		public unsafe static void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, ref int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[70]);
			}
		}

		// Token: 0x060050E5 RID: 20709 RVA: 0x000DDA14 File Offset: 0x000DBC14
		[CLSCompliant(false)]
		public unsafe static void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[70]);
		}

		// Token: 0x060050E6 RID: 20710 RVA: 0x000DDA28 File Offset: 0x000DBC28
		[CLSCompliant(false)]
		public static void CompileShader(int shader)
		{
			calli(System.Void(System.UInt32), shader, GL.EntryPoints[71]);
		}

		// Token: 0x060050E7 RID: 20711 RVA: 0x000DDA38 File Offset: 0x000DBC38
		[CLSCompliant(false)]
		public static void CompileShader(uint shader)
		{
			calli(System.Void(System.UInt32), shader, GL.EntryPoints[71]);
		}

		// Token: 0x060050E8 RID: 20712 RVA: 0x000DDA48 File Offset: 0x000DBC48
		public static void CompressedTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, imageSize, data, GL.EntryPoints[73]);
		}

		// Token: 0x060050E9 RID: 20713 RVA: 0x000DDA6C File Offset: 0x000DBC6C
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In] [Out] T6[] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[73]);
			}
		}

		// Token: 0x060050EA RID: 20714 RVA: 0x000DDAA8 File Offset: 0x000DBCA8
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In] [Out] T6[,] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[73]);
			}
		}

		// Token: 0x060050EB RID: 20715 RVA: 0x000DDAE8 File Offset: 0x000DBCE8
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In] [Out] T6[,,] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[73]);
			}
		}

		// Token: 0x060050EC RID: 20716 RVA: 0x000DDB28 File Offset: 0x000DBD28
		public unsafe static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In] [Out] ref T6 data) where T6 : struct
		{
			fixed (T6* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[73]);
			}
		}

		// Token: 0x060050ED RID: 20717 RVA: 0x000DDB50 File Offset: 0x000DBD50
		public static void CompressedTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, data, GL.EntryPoints[74]);
		}

		// Token: 0x060050EE RID: 20718 RVA: 0x000DDB78 File Offset: 0x000DBD78
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[] data) where T7 : struct
		{
			fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[74]);
			}
		}

		// Token: 0x060050EF RID: 20719 RVA: 0x000DDBB8 File Offset: 0x000DBDB8
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[,] data) where T7 : struct
		{
			fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[74]);
			}
		}

		// Token: 0x060050F0 RID: 20720 RVA: 0x000DDBFC File Offset: 0x000DBDFC
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[,,] data) where T7 : struct
		{
			fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[74]);
			}
		}

		// Token: 0x060050F1 RID: 20721 RVA: 0x000DDC40 File Offset: 0x000DBE40
		public unsafe static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In] [Out] ref T7 data) where T7 : struct
		{
			fixed (T7* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[74]);
			}
		}

		// Token: 0x060050F2 RID: 20722 RVA: 0x000DDC6C File Offset: 0x000DBE6C
		public static void CompressedTexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, data, GL.EntryPoints[75]);
		}

		// Token: 0x060050F3 RID: 20723 RVA: 0x000DDC94 File Offset: 0x000DBE94
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[75]);
			}
		}

		// Token: 0x060050F4 RID: 20724 RVA: 0x000DDCD4 File Offset: 0x000DBED4
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[,] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[75]);
			}
		}

		// Token: 0x060050F5 RID: 20725 RVA: 0x000DDD18 File Offset: 0x000DBF18
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[,,] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[75]);
			}
		}

		// Token: 0x060050F6 RID: 20726 RVA: 0x000DDD5C File Offset: 0x000DBF5C
		public unsafe static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] ref T8 data) where T8 : struct
		{
			fixed (T8* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[75]);
			}
		}

		// Token: 0x060050F7 RID: 20727 RVA: 0x000DDD88 File Offset: 0x000DBF88
		public static void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, imageSize, data, GL.EntryPoints[76]);
		}

		// Token: 0x060050F8 RID: 20728 RVA: 0x000DDDAC File Offset: 0x000DBFAC
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T6[] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[76]);
			}
		}

		// Token: 0x060050F9 RID: 20729 RVA: 0x000DDDE8 File Offset: 0x000DBFE8
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T6[,] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[76]);
			}
		}

		// Token: 0x060050FA RID: 20730 RVA: 0x000DDE28 File Offset: 0x000DC028
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T6[,,] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[76]);
			}
		}

		// Token: 0x060050FB RID: 20731 RVA: 0x000DDE68 File Offset: 0x000DC068
		public unsafe static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] ref T6 data) where T6 : struct
		{
			fixed (T6* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[76]);
			}
		}

		// Token: 0x060050FC RID: 20732 RVA: 0x000DDE90 File Offset: 0x000DC090
		public static void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, data, GL.EntryPoints[77]);
		}

		// Token: 0x060050FD RID: 20733 RVA: 0x000DDEB8 File Offset: 0x000DC0B8
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T8[] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[77]);
			}
		}

		// Token: 0x060050FE RID: 20734 RVA: 0x000DDEF8 File Offset: 0x000DC0F8
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T8[,] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[77]);
			}
		}

		// Token: 0x060050FF RID: 20735 RVA: 0x000DDF3C File Offset: 0x000DC13C
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T8[,,] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[77]);
			}
		}

		// Token: 0x06005100 RID: 20736 RVA: 0x000DDF80 File Offset: 0x000DC180
		public unsafe static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] ref T8 data) where T8 : struct
		{
			fixed (T8* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[77]);
			}
		}

		// Token: 0x06005101 RID: 20737 RVA: 0x000DDFAC File Offset: 0x000DC1AC
		public static void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data, GL.EntryPoints[78]);
		}

		// Token: 0x06005102 RID: 20738 RVA: 0x000DDFD8 File Offset: 0x000DC1D8
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T10[] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[78]);
			}
		}

		// Token: 0x06005103 RID: 20739 RVA: 0x000DE01C File Offset: 0x000DC21C
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T10[,] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[78]);
			}
		}

		// Token: 0x06005104 RID: 20740 RVA: 0x000DE064 File Offset: 0x000DC264
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T10[,,] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[78]);
			}
		}

		// Token: 0x06005105 RID: 20741 RVA: 0x000DE0AC File Offset: 0x000DC2AC
		public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] ref T10 data) where T10 : struct
		{
			fixed (T10* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[78]);
			}
		}

		// Token: 0x06005106 RID: 20742 RVA: 0x000DE0DC File Offset: 0x000DC2DC
		public static void ConvolutionFilter1D(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, image, GL.EntryPoints[79]);
		}

		// Token: 0x06005107 RID: 20743 RVA: 0x000DE0F4 File Offset: 0x000DC2F4
		[CLSCompliant(false)]
		public unsafe static void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[] image) where T5 : struct
		{
			fixed (T5* ptr = ref (image != null && image.Length != 0) ? ref image[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[79]);
			}
		}

		// Token: 0x06005108 RID: 20744 RVA: 0x000DE130 File Offset: 0x000DC330
		[CLSCompliant(false)]
		public unsafe static void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,] image) where T5 : struct
		{
			fixed (T5* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[79]);
			}
		}

		// Token: 0x06005109 RID: 20745 RVA: 0x000DE170 File Offset: 0x000DC370
		[CLSCompliant(false)]
		public unsafe static void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,,] image) where T5 : struct
		{
			fixed (T5* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[79]);
			}
		}

		// Token: 0x0600510A RID: 20746 RVA: 0x000DE1B0 File Offset: 0x000DC3B0
		public unsafe static void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] ref T5 image) where T5 : struct
		{
			fixed (T5* ptr = &image)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[79]);
			}
		}

		// Token: 0x0600510B RID: 20747 RVA: 0x000DE1D8 File Offset: 0x000DC3D8
		public static void ConvolutionFilter2D(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, image, GL.EntryPoints[80]);
		}

		// Token: 0x0600510C RID: 20748 RVA: 0x000DE1FC File Offset: 0x000DC3FC
		[CLSCompliant(false)]
		public unsafe static void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[] image) where T6 : struct
		{
			fixed (T6* ptr = ref (image != null && image.Length != 0) ? ref image[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, ptr, GL.EntryPoints[80]);
			}
		}

		// Token: 0x0600510D RID: 20749 RVA: 0x000DE238 File Offset: 0x000DC438
		[CLSCompliant(false)]
		public unsafe static void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,] image) where T6 : struct
		{
			fixed (T6* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, ptr, GL.EntryPoints[80]);
			}
		}

		// Token: 0x0600510E RID: 20750 RVA: 0x000DE278 File Offset: 0x000DC478
		[CLSCompliant(false)]
		public unsafe static void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,,] image) where T6 : struct
		{
			fixed (T6* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, ptr, GL.EntryPoints[80]);
			}
		}

		// Token: 0x0600510F RID: 20751 RVA: 0x000DE2B8 File Offset: 0x000DC4B8
		public unsafe static void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T6 image) where T6 : struct
		{
			fixed (T6* ptr = &image)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, ptr, GL.EntryPoints[80]);
			}
		}

		// Token: 0x06005110 RID: 20752 RVA: 0x000DE2E0 File Offset: 0x000DC4E0
		public static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, float @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single), target, pname, @params, GL.EntryPoints[81]);
		}

		// Token: 0x06005111 RID: 20753 RVA: 0x000DE2F4 File Offset: 0x000DC4F4
		[CLSCompliant(false)]
		public unsafe static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[82]);
			}
		}

		// Token: 0x06005112 RID: 20754 RVA: 0x000DE328 File Offset: 0x000DC528
		[CLSCompliant(false)]
		public unsafe static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[82]);
		}

		// Token: 0x06005113 RID: 20755 RVA: 0x000DE33C File Offset: 0x000DC53C
		public static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, int @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, @params, GL.EntryPoints[83]);
		}

		// Token: 0x06005114 RID: 20756 RVA: 0x000DE350 File Offset: 0x000DC550
		[CLSCompliant(false)]
		public unsafe static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[84]);
			}
		}

		// Token: 0x06005115 RID: 20757 RVA: 0x000DE384 File Offset: 0x000DC584
		[CLSCompliant(false)]
		public unsafe static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[84]);
		}

		// Token: 0x06005116 RID: 20758 RVA: 0x000DE398 File Offset: 0x000DC598
		public static void CopyBufferSubData(BufferTarget readTarget, BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), readTarget, writeTarget, readOffset, writeOffset, size, GL.EntryPoints[85]);
		}

		// Token: 0x06005117 RID: 20759 RVA: 0x000DE3B0 File Offset: 0x000DC5B0
		public static void CopyColorSubTable(ColorTableTarget target, int start, int x, int y, int width)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, start, x, y, width, GL.EntryPoints[86]);
		}

		// Token: 0x06005118 RID: 20760 RVA: 0x000DE3C8 File Offset: 0x000DC5C8
		public static void CopyColorTable(ColorTableTarget target, PixelInternalFormat internalformat, int x, int y, int width)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, x, y, width, GL.EntryPoints[87]);
		}

		// Token: 0x06005119 RID: 20761 RVA: 0x000DE3E0 File Offset: 0x000DC5E0
		public static void CopyConvolutionFilter1D(ConvolutionTarget target, PixelInternalFormat internalformat, int x, int y, int width)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, x, y, width, GL.EntryPoints[88]);
		}

		// Token: 0x0600511A RID: 20762 RVA: 0x000DE3F8 File Offset: 0x000DC5F8
		public static void CopyConvolutionFilter2D(ConvolutionTarget target, PixelInternalFormat internalformat, int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, x, y, width, height, GL.EntryPoints[89]);
		}

		// Token: 0x0600511B RID: 20763 RVA: 0x000DE410 File Offset: 0x000DC610
		[CLSCompliant(false)]
		public static void CopyImageSubData(int srcName, ImageTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, ImageTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, GL.EntryPoints[90]);
		}

		// Token: 0x0600511C RID: 20764 RVA: 0x000DE444 File Offset: 0x000DC644
		[CLSCompliant(false)]
		public static void CopyImageSubData(uint srcName, ImageTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, ImageTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, GL.EntryPoints[90]);
		}

		// Token: 0x0600511D RID: 20765 RVA: 0x000DE478 File Offset: 0x000DC678
		public static void CopyTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int border)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, internalformat, x, y, width, border, GL.EntryPoints[91]);
		}

		// Token: 0x0600511E RID: 20766 RVA: 0x000DE49C File Offset: 0x000DC69C
		public static void CopyTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int height, int border)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, internalformat, x, y, width, height, border, GL.EntryPoints[92]);
		}

		// Token: 0x0600511F RID: 20767 RVA: 0x000DE4C4 File Offset: 0x000DC6C4
		public static void CopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, xoffset, x, y, width, GL.EntryPoints[93]);
		}

		// Token: 0x06005120 RID: 20768 RVA: 0x000DE4DC File Offset: 0x000DC6DC
		public static void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, xoffset, yoffset, x, y, width, height, GL.EntryPoints[94]);
		}

		// Token: 0x06005121 RID: 20769 RVA: 0x000DE504 File Offset: 0x000DC704
		public static void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, xoffset, yoffset, zoffset, x, y, width, height, GL.EntryPoints[95]);
		}

		// Token: 0x06005122 RID: 20770 RVA: 0x000DE52C File Offset: 0x000DC72C
		public static int CreateProgram()
		{
			return calli(System.Int32(), GL.EntryPoints[96]);
		}

		// Token: 0x06005123 RID: 20771 RVA: 0x000DE53C File Offset: 0x000DC73C
		public static int CreateShader(ShaderType type)
		{
			return calli(System.Int32(System.Int32), type, GL.EntryPoints[97]);
		}

		// Token: 0x06005124 RID: 20772 RVA: 0x000DE54C File Offset: 0x000DC74C
		public static int CreateShaderProgram(ShaderType type, int count, string[] strings)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(strings);
			int result = calli(System.Int32(System.Int32,System.Int32,System.IntPtr), type, count, intPtr, GL.EntryPoints[98]);
			BindingsBase.FreeStringArrayPtr(intPtr, strings.Length);
			return result;
		}

		// Token: 0x06005125 RID: 20773 RVA: 0x000DE57C File Offset: 0x000DC77C
		public static void CullFace(CullFaceMode mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[100]);
		}

		// Token: 0x06005126 RID: 20774 RVA: 0x000DE58C File Offset: 0x000DC78C
		public static void DebugMessageCallback(DebugProc callback, IntPtr userParam)
		{
			calli(System.Void(OpenTK.Graphics.OpenGL4.DebugProc,System.IntPtr), callback, userParam, GL.EntryPoints[101]);
		}

		// Token: 0x06005127 RID: 20775 RVA: 0x000DE5A0 File Offset: 0x000DC7A0
		[CLSCompliant(false)]
		public unsafe static void DebugMessageCallback<T1>(DebugProc callback, [In] [Out] T1[] userParam) where T1 : struct
		{
			fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0] : ref *null)
			{
				calli(System.Void(OpenTK.Graphics.OpenGL4.DebugProc,System.IntPtr), callback, ptr, GL.EntryPoints[101]);
			}
		}

		// Token: 0x06005128 RID: 20776 RVA: 0x000DE5D4 File Offset: 0x000DC7D4
		[CLSCompliant(false)]
		public unsafe static void DebugMessageCallback<T1>(DebugProc callback, [In] [Out] T1[,] userParam) where T1 : struct
		{
			fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0] : ref *null)
			{
				calli(System.Void(OpenTK.Graphics.OpenGL4.DebugProc,System.IntPtr), callback, ptr, GL.EntryPoints[101]);
			}
		}

		// Token: 0x06005129 RID: 20777 RVA: 0x000DE60C File Offset: 0x000DC80C
		[CLSCompliant(false)]
		public unsafe static void DebugMessageCallback<T1>(DebugProc callback, [In] [Out] T1[,,] userParam) where T1 : struct
		{
			fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0, 0] : ref *null)
			{
				calli(System.Void(OpenTK.Graphics.OpenGL4.DebugProc,System.IntPtr), callback, ptr, GL.EntryPoints[101]);
			}
		}

		// Token: 0x0600512A RID: 20778 RVA: 0x000DE644 File Offset: 0x000DC844
		public unsafe static void DebugMessageCallback<T1>(DebugProc callback, [In] [Out] ref T1 userParam) where T1 : struct
		{
			fixed (T1* ptr = &userParam)
			{
				calli(System.Void(OpenTK.Graphics.OpenGL4.DebugProc,System.IntPtr), callback, ptr, GL.EntryPoints[101]);
			}
		}

		// Token: 0x0600512B RID: 20779 RVA: 0x000DE664 File Offset: 0x000DC864
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, int[] ids, bool enabled)
		{
			fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[104]);
			}
		}

		// Token: 0x0600512C RID: 20780 RVA: 0x000DE6A0 File Offset: 0x000DC8A0
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, ref int ids, bool enabled)
		{
			fixed (int* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[104]);
			}
		}

		// Token: 0x0600512D RID: 20781 RVA: 0x000DE6C8 File Offset: 0x000DC8C8
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, int* ids, bool enabled)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[104]);
		}

		// Token: 0x0600512E RID: 20782 RVA: 0x000DE6E0 File Offset: 0x000DC8E0
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, uint[] ids, bool enabled)
		{
			fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[104]);
			}
		}

		// Token: 0x0600512F RID: 20783 RVA: 0x000DE71C File Offset: 0x000DC91C
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, ref uint ids, bool enabled)
		{
			fixed (uint* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[104]);
			}
		}

		// Token: 0x06005130 RID: 20784 RVA: 0x000DE744 File Offset: 0x000DC944
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, uint* ids, bool enabled)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[104]);
		}

		// Token: 0x06005131 RID: 20785 RVA: 0x000DE75C File Offset: 0x000DC95C
		[CLSCompliant(false)]
		public static void DebugMessageInsert(DebugSourceExternal source, DebugType type, int id, DebugSeverity severity, int length, string buf)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[107]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06005132 RID: 20786 RVA: 0x000DE78C File Offset: 0x000DC98C
		[CLSCompliant(false)]
		public static void DebugMessageInsert(DebugSourceExternal source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[107]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06005133 RID: 20787 RVA: 0x000DE7BC File Offset: 0x000DC9BC
		[CLSCompliant(false)]
		public static void DeleteBuffer(int buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref buffers, GL.EntryPoints[110]);
		}

		// Token: 0x06005134 RID: 20788 RVA: 0x000DE7D0 File Offset: 0x000DC9D0
		[CLSCompliant(false)]
		public static void DeleteBuffer(uint buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref buffers, GL.EntryPoints[110]);
		}

		// Token: 0x06005135 RID: 20789 RVA: 0x000DE7E4 File Offset: 0x000DC9E4
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, int[] buffers)
		{
			fixed (int* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[110]);
			}
		}

		// Token: 0x06005136 RID: 20790 RVA: 0x000DE818 File Offset: 0x000DCA18
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, ref int buffers)
		{
			fixed (int* ptr = &buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[110]);
			}
		}

		// Token: 0x06005137 RID: 20791 RVA: 0x000DE838 File Offset: 0x000DCA38
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, int* buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, buffers, GL.EntryPoints[110]);
		}

		// Token: 0x06005138 RID: 20792 RVA: 0x000DE84C File Offset: 0x000DCA4C
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, uint[] buffers)
		{
			fixed (uint* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[110]);
			}
		}

		// Token: 0x06005139 RID: 20793 RVA: 0x000DE880 File Offset: 0x000DCA80
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, ref uint buffers)
		{
			fixed (uint* ptr = &buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[110]);
			}
		}

		// Token: 0x0600513A RID: 20794 RVA: 0x000DE8A0 File Offset: 0x000DCAA0
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, uint* buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, buffers, GL.EntryPoints[110]);
		}

		// Token: 0x0600513B RID: 20795 RVA: 0x000DE8B4 File Offset: 0x000DCAB4
		[CLSCompliant(false)]
		public static void DeleteFramebuffer(int framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref framebuffers, GL.EntryPoints[111]);
		}

		// Token: 0x0600513C RID: 20796 RVA: 0x000DE8C8 File Offset: 0x000DCAC8
		[CLSCompliant(false)]
		public static void DeleteFramebuffer(uint framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref framebuffers, GL.EntryPoints[111]);
		}

		// Token: 0x0600513D RID: 20797 RVA: 0x000DE8DC File Offset: 0x000DCADC
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, int[] framebuffers)
		{
			fixed (int* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[111]);
			}
		}

		// Token: 0x0600513E RID: 20798 RVA: 0x000DE910 File Offset: 0x000DCB10
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, ref int framebuffers)
		{
			fixed (int* ptr = &framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[111]);
			}
		}

		// Token: 0x0600513F RID: 20799 RVA: 0x000DE930 File Offset: 0x000DCB30
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, int* framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, framebuffers, GL.EntryPoints[111]);
		}

		// Token: 0x06005140 RID: 20800 RVA: 0x000DE944 File Offset: 0x000DCB44
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, uint[] framebuffers)
		{
			fixed (uint* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[111]);
			}
		}

		// Token: 0x06005141 RID: 20801 RVA: 0x000DE978 File Offset: 0x000DCB78
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, ref uint framebuffers)
		{
			fixed (uint* ptr = &framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[111]);
			}
		}

		// Token: 0x06005142 RID: 20802 RVA: 0x000DE998 File Offset: 0x000DCB98
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, uint* framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, framebuffers, GL.EntryPoints[111]);
		}

		// Token: 0x06005143 RID: 20803 RVA: 0x000DE9AC File Offset: 0x000DCBAC
		[CLSCompliant(false)]
		public static void DeleteProgram(int program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[113]);
		}

		// Token: 0x06005144 RID: 20804 RVA: 0x000DE9BC File Offset: 0x000DCBBC
		[CLSCompliant(false)]
		public static void DeleteProgram(uint program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[113]);
		}

		// Token: 0x06005145 RID: 20805 RVA: 0x000DE9CC File Offset: 0x000DCBCC
		[CLSCompliant(false)]
		public static void DeleteProgramPipeline(int pipelines)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref pipelines, GL.EntryPoints[114]);
		}

		// Token: 0x06005146 RID: 20806 RVA: 0x000DE9E0 File Offset: 0x000DCBE0
		[CLSCompliant(false)]
		public static void DeleteProgramPipeline(uint pipelines)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref pipelines, GL.EntryPoints[114]);
		}

		// Token: 0x06005147 RID: 20807 RVA: 0x000DE9F4 File Offset: 0x000DCBF4
		[CLSCompliant(false)]
		public unsafe static void DeleteProgramPipelines(int n, int[] pipelines)
		{
			fixed (int* ptr = ref (pipelines != null && pipelines.Length != 0) ? ref pipelines[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[114]);
			}
		}

		// Token: 0x06005148 RID: 20808 RVA: 0x000DEA28 File Offset: 0x000DCC28
		[CLSCompliant(false)]
		public unsafe static void DeleteProgramPipelines(int n, ref int pipelines)
		{
			fixed (int* ptr = &pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[114]);
			}
		}

		// Token: 0x06005149 RID: 20809 RVA: 0x000DEA48 File Offset: 0x000DCC48
		[CLSCompliant(false)]
		public unsafe static void DeleteProgramPipelines(int n, int* pipelines)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, pipelines, GL.EntryPoints[114]);
		}

		// Token: 0x0600514A RID: 20810 RVA: 0x000DEA5C File Offset: 0x000DCC5C
		[CLSCompliant(false)]
		public unsafe static void DeleteProgramPipelines(int n, uint[] pipelines)
		{
			fixed (uint* ptr = ref (pipelines != null && pipelines.Length != 0) ? ref pipelines[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[114]);
			}
		}

		// Token: 0x0600514B RID: 20811 RVA: 0x000DEA90 File Offset: 0x000DCC90
		[CLSCompliant(false)]
		public unsafe static void DeleteProgramPipelines(int n, ref uint pipelines)
		{
			fixed (uint* ptr = &pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[114]);
			}
		}

		// Token: 0x0600514C RID: 20812 RVA: 0x000DEAB0 File Offset: 0x000DCCB0
		[CLSCompliant(false)]
		public unsafe static void DeleteProgramPipelines(int n, uint* pipelines)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, pipelines, GL.EntryPoints[114]);
		}

		// Token: 0x0600514D RID: 20813 RVA: 0x000DEAC4 File Offset: 0x000DCCC4
		[CLSCompliant(false)]
		public static void DeleteQuery(int ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[115]);
		}

		// Token: 0x0600514E RID: 20814 RVA: 0x000DEAD8 File Offset: 0x000DCCD8
		[CLSCompliant(false)]
		public static void DeleteQuery(uint ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[115]);
		}

		// Token: 0x0600514F RID: 20815 RVA: 0x000DEAEC File Offset: 0x000DCCEC
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, int[] ids)
		{
			fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[115]);
			}
		}

		// Token: 0x06005150 RID: 20816 RVA: 0x000DEB20 File Offset: 0x000DCD20
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, ref int ids)
		{
			fixed (int* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[115]);
			}
		}

		// Token: 0x06005151 RID: 20817 RVA: 0x000DEB40 File Offset: 0x000DCD40
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, int* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[115]);
		}

		// Token: 0x06005152 RID: 20818 RVA: 0x000DEB54 File Offset: 0x000DCD54
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, uint[] ids)
		{
			fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[115]);
			}
		}

		// Token: 0x06005153 RID: 20819 RVA: 0x000DEB88 File Offset: 0x000DCD88
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, ref uint ids)
		{
			fixed (uint* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[115]);
			}
		}

		// Token: 0x06005154 RID: 20820 RVA: 0x000DEBA8 File Offset: 0x000DCDA8
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, uint* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[115]);
		}

		// Token: 0x06005155 RID: 20821 RVA: 0x000DEBBC File Offset: 0x000DCDBC
		[CLSCompliant(false)]
		public static void DeleteRenderbuffer(int renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref renderbuffers, GL.EntryPoints[116]);
		}

		// Token: 0x06005156 RID: 20822 RVA: 0x000DEBD0 File Offset: 0x000DCDD0
		[CLSCompliant(false)]
		public static void DeleteRenderbuffer(uint renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref renderbuffers, GL.EntryPoints[116]);
		}

		// Token: 0x06005157 RID: 20823 RVA: 0x000DEBE4 File Offset: 0x000DCDE4
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, int[] renderbuffers)
		{
			fixed (int* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[116]);
			}
		}

		// Token: 0x06005158 RID: 20824 RVA: 0x000DEC18 File Offset: 0x000DCE18
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, ref int renderbuffers)
		{
			fixed (int* ptr = &renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[116]);
			}
		}

		// Token: 0x06005159 RID: 20825 RVA: 0x000DEC38 File Offset: 0x000DCE38
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, int* renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, renderbuffers, GL.EntryPoints[116]);
		}

		// Token: 0x0600515A RID: 20826 RVA: 0x000DEC4C File Offset: 0x000DCE4C
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, uint[] renderbuffers)
		{
			fixed (uint* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[116]);
			}
		}

		// Token: 0x0600515B RID: 20827 RVA: 0x000DEC80 File Offset: 0x000DCE80
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, ref uint renderbuffers)
		{
			fixed (uint* ptr = &renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[116]);
			}
		}

		// Token: 0x0600515C RID: 20828 RVA: 0x000DECA0 File Offset: 0x000DCEA0
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, uint* renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, renderbuffers, GL.EntryPoints[116]);
		}

		// Token: 0x0600515D RID: 20829 RVA: 0x000DECB4 File Offset: 0x000DCEB4
		[CLSCompliant(false)]
		public static void DeleteSampler(int samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref samplers, GL.EntryPoints[117]);
		}

		// Token: 0x0600515E RID: 20830 RVA: 0x000DECC8 File Offset: 0x000DCEC8
		[CLSCompliant(false)]
		public static void DeleteSampler(uint samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref samplers, GL.EntryPoints[117]);
		}

		// Token: 0x0600515F RID: 20831 RVA: 0x000DECDC File Offset: 0x000DCEDC
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, int[] samplers)
		{
			fixed (int* ptr = ref (samplers != null && samplers.Length != 0) ? ref samplers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[117]);
			}
		}

		// Token: 0x06005160 RID: 20832 RVA: 0x000DED10 File Offset: 0x000DCF10
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, ref int samplers)
		{
			fixed (int* ptr = &samplers)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[117]);
			}
		}

		// Token: 0x06005161 RID: 20833 RVA: 0x000DED30 File Offset: 0x000DCF30
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, int* samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), count, samplers, GL.EntryPoints[117]);
		}

		// Token: 0x06005162 RID: 20834 RVA: 0x000DED44 File Offset: 0x000DCF44
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, uint[] samplers)
		{
			fixed (uint* ptr = ref (samplers != null && samplers.Length != 0) ? ref samplers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[117]);
			}
		}

		// Token: 0x06005163 RID: 20835 RVA: 0x000DED78 File Offset: 0x000DCF78
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, ref uint samplers)
		{
			fixed (uint* ptr = &samplers)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[117]);
			}
		}

		// Token: 0x06005164 RID: 20836 RVA: 0x000DED98 File Offset: 0x000DCF98
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, uint* samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), count, samplers, GL.EntryPoints[117]);
		}

		// Token: 0x06005165 RID: 20837 RVA: 0x000DEDAC File Offset: 0x000DCFAC
		[CLSCompliant(false)]
		public static void DeleteShader(int shader)
		{
			calli(System.Void(System.UInt32), shader, GL.EntryPoints[118]);
		}

		// Token: 0x06005166 RID: 20838 RVA: 0x000DEDBC File Offset: 0x000DCFBC
		[CLSCompliant(false)]
		public static void DeleteShader(uint shader)
		{
			calli(System.Void(System.UInt32), shader, GL.EntryPoints[118]);
		}

		// Token: 0x06005167 RID: 20839 RVA: 0x000DEDCC File Offset: 0x000DCFCC
		public static void DeleteSync(IntPtr sync)
		{
			calli(System.Void(System.IntPtr), sync, GL.EntryPoints[119]);
		}

		// Token: 0x06005168 RID: 20840 RVA: 0x000DEDDC File Offset: 0x000DCFDC
		[CLSCompliant(false)]
		public static void DeleteTexture(int textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref textures, GL.EntryPoints[120]);
		}

		// Token: 0x06005169 RID: 20841 RVA: 0x000DEDF0 File Offset: 0x000DCFF0
		[CLSCompliant(false)]
		public static void DeleteTexture(uint textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref textures, GL.EntryPoints[120]);
		}

		// Token: 0x0600516A RID: 20842 RVA: 0x000DEE04 File Offset: 0x000DD004
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, int[] textures)
		{
			fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[120]);
			}
		}

		// Token: 0x0600516B RID: 20843 RVA: 0x000DEE38 File Offset: 0x000DD038
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, ref int textures)
		{
			fixed (int* ptr = &textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[120]);
			}
		}

		// Token: 0x0600516C RID: 20844 RVA: 0x000DEE58 File Offset: 0x000DD058
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, int* textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, textures, GL.EntryPoints[120]);
		}

		// Token: 0x0600516D RID: 20845 RVA: 0x000DEE6C File Offset: 0x000DD06C
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, uint[] textures)
		{
			fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[120]);
			}
		}

		// Token: 0x0600516E RID: 20846 RVA: 0x000DEEA0 File Offset: 0x000DD0A0
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, ref uint textures)
		{
			fixed (uint* ptr = &textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[120]);
			}
		}

		// Token: 0x0600516F RID: 20847 RVA: 0x000DEEC0 File Offset: 0x000DD0C0
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, uint* textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, textures, GL.EntryPoints[120]);
		}

		// Token: 0x06005170 RID: 20848 RVA: 0x000DEED4 File Offset: 0x000DD0D4
		[CLSCompliant(false)]
		public static void DeleteTransformFeedback(int ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[121]);
		}

		// Token: 0x06005171 RID: 20849 RVA: 0x000DEEE8 File Offset: 0x000DD0E8
		[CLSCompliant(false)]
		public static void DeleteTransformFeedback(uint ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[121]);
		}

		// Token: 0x06005172 RID: 20850 RVA: 0x000DEEFC File Offset: 0x000DD0FC
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, int[] ids)
		{
			fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[121]);
			}
		}

		// Token: 0x06005173 RID: 20851 RVA: 0x000DEF30 File Offset: 0x000DD130
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, ref int ids)
		{
			fixed (int* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[121]);
			}
		}

		// Token: 0x06005174 RID: 20852 RVA: 0x000DEF50 File Offset: 0x000DD150
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, int* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[121]);
		}

		// Token: 0x06005175 RID: 20853 RVA: 0x000DEF64 File Offset: 0x000DD164
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, uint[] ids)
		{
			fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[121]);
			}
		}

		// Token: 0x06005176 RID: 20854 RVA: 0x000DEF98 File Offset: 0x000DD198
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, ref uint ids)
		{
			fixed (uint* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[121]);
			}
		}

		// Token: 0x06005177 RID: 20855 RVA: 0x000DEFB8 File Offset: 0x000DD1B8
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, uint* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[121]);
		}

		// Token: 0x06005178 RID: 20856 RVA: 0x000DEFCC File Offset: 0x000DD1CC
		[CLSCompliant(false)]
		public static void DeleteVertexArray(int arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref arrays, GL.EntryPoints[122]);
		}

		// Token: 0x06005179 RID: 20857 RVA: 0x000DEFE0 File Offset: 0x000DD1E0
		[CLSCompliant(false)]
		public static void DeleteVertexArray(uint arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref arrays, GL.EntryPoints[122]);
		}

		// Token: 0x0600517A RID: 20858 RVA: 0x000DEFF4 File Offset: 0x000DD1F4
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, int[] arrays)
		{
			fixed (int* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[122]);
			}
		}

		// Token: 0x0600517B RID: 20859 RVA: 0x000DF028 File Offset: 0x000DD228
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, ref int arrays)
		{
			fixed (int* ptr = &arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[122]);
			}
		}

		// Token: 0x0600517C RID: 20860 RVA: 0x000DF048 File Offset: 0x000DD248
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, int* arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[122]);
		}

		// Token: 0x0600517D RID: 20861 RVA: 0x000DF05C File Offset: 0x000DD25C
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, uint[] arrays)
		{
			fixed (uint* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[122]);
			}
		}

		// Token: 0x0600517E RID: 20862 RVA: 0x000DF090 File Offset: 0x000DD290
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, ref uint arrays)
		{
			fixed (uint* ptr = &arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[122]);
			}
		}

		// Token: 0x0600517F RID: 20863 RVA: 0x000DF0B0 File Offset: 0x000DD2B0
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, uint* arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[122]);
		}

		// Token: 0x06005180 RID: 20864 RVA: 0x000DF0C4 File Offset: 0x000DD2C4
		public static void DepthFunc(DepthFunction func)
		{
			calli(System.Void(System.Int32), func, GL.EntryPoints[123]);
		}

		// Token: 0x06005181 RID: 20865 RVA: 0x000DF0D4 File Offset: 0x000DD2D4
		public static void DepthMask(bool flag)
		{
			calli(System.Void(System.Boolean), flag, GL.EntryPoints[124]);
		}

		// Token: 0x06005182 RID: 20866 RVA: 0x000DF0E4 File Offset: 0x000DD2E4
		public static void DepthRange(double near, double far)
		{
			calli(System.Void(System.Double,System.Double), near, far, GL.EntryPoints[125]);
		}

		// Token: 0x06005183 RID: 20867 RVA: 0x000DF0F8 File Offset: 0x000DD2F8
		[CLSCompliant(false)]
		public unsafe static void DepthRangeArray(int first, int count, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), first, count, ptr, GL.EntryPoints[126]);
			}
		}

		// Token: 0x06005184 RID: 20868 RVA: 0x000DF12C File Offset: 0x000DD32C
		[CLSCompliant(false)]
		public unsafe static void DepthRangeArray(int first, int count, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), first, count, ptr, GL.EntryPoints[126]);
			}
		}

		// Token: 0x06005185 RID: 20869 RVA: 0x000DF14C File Offset: 0x000DD34C
		[CLSCompliant(false)]
		public unsafe static void DepthRangeArray(int first, int count, double* v)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double*), first, count, v, GL.EntryPoints[126]);
		}

		// Token: 0x06005186 RID: 20870 RVA: 0x000DF160 File Offset: 0x000DD360
		[CLSCompliant(false)]
		public unsafe static void DepthRangeArray(uint first, int count, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), first, count, ptr, GL.EntryPoints[126]);
			}
		}

		// Token: 0x06005187 RID: 20871 RVA: 0x000DF194 File Offset: 0x000DD394
		[CLSCompliant(false)]
		public unsafe static void DepthRangeArray(uint first, int count, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), first, count, ptr, GL.EntryPoints[126]);
			}
		}

		// Token: 0x06005188 RID: 20872 RVA: 0x000DF1B4 File Offset: 0x000DD3B4
		[CLSCompliant(false)]
		public unsafe static void DepthRangeArray(uint first, int count, double* v)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double*), first, count, v, GL.EntryPoints[126]);
		}

		// Token: 0x06005189 RID: 20873 RVA: 0x000DF1C8 File Offset: 0x000DD3C8
		public static void DepthRange(float n, float f)
		{
			calli(System.Void(System.Single,System.Single), n, f, GL.EntryPoints[127]);
		}

		// Token: 0x0600518A RID: 20874 RVA: 0x000DF1DC File Offset: 0x000DD3DC
		[CLSCompliant(false)]
		public static void DepthRangeIndexed(int index, double n, double f)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double), index, n, f, GL.EntryPoints[128]);
		}

		// Token: 0x0600518B RID: 20875 RVA: 0x000DF1F4 File Offset: 0x000DD3F4
		[CLSCompliant(false)]
		public static void DepthRangeIndexed(uint index, double n, double f)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double), index, n, f, GL.EntryPoints[128]);
		}

		// Token: 0x0600518C RID: 20876 RVA: 0x000DF20C File Offset: 0x000DD40C
		[CLSCompliant(false)]
		public static void DetachShader(int program, int shader)
		{
			calli(System.Void(System.UInt32,System.UInt32), program, shader, GL.EntryPoints[129]);
		}

		// Token: 0x0600518D RID: 20877 RVA: 0x000DF220 File Offset: 0x000DD420
		[CLSCompliant(false)]
		public static void DetachShader(uint program, uint shader)
		{
			calli(System.Void(System.UInt32,System.UInt32), program, shader, GL.EntryPoints[129]);
		}

		// Token: 0x0600518E RID: 20878 RVA: 0x000DF234 File Offset: 0x000DD434
		public static void Disable(EnableCap cap)
		{
			calli(System.Void(System.Int32), cap, GL.EntryPoints[130]);
		}

		// Token: 0x0600518F RID: 20879 RVA: 0x000DF248 File Offset: 0x000DD448
		[CLSCompliant(false)]
		public static void Disable(IndexedEnableCap target, int index)
		{
			calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[131]);
		}

		// Token: 0x06005190 RID: 20880 RVA: 0x000DF25C File Offset: 0x000DD45C
		[CLSCompliant(false)]
		public static void Disable(IndexedEnableCap target, uint index)
		{
			calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[131]);
		}

		// Token: 0x06005191 RID: 20881 RVA: 0x000DF270 File Offset: 0x000DD470
		[CLSCompliant(false)]
		public static void DisableVertexAttribArray(int index)
		{
			calli(System.Void(System.UInt32), index, GL.EntryPoints[132]);
		}

		// Token: 0x06005192 RID: 20882 RVA: 0x000DF284 File Offset: 0x000DD484
		[CLSCompliant(false)]
		public static void DisableVertexAttribArray(uint index)
		{
			calli(System.Void(System.UInt32), index, GL.EntryPoints[132]);
		}

		// Token: 0x06005193 RID: 20883 RVA: 0x000DF298 File Offset: 0x000DD498
		[CLSCompliant(false)]
		public static void DispatchCompute(int num_groups_x, int num_groups_y, int num_groups_z)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), num_groups_x, num_groups_y, num_groups_z, GL.EntryPoints[133]);
		}

		// Token: 0x06005194 RID: 20884 RVA: 0x000DF2B0 File Offset: 0x000DD4B0
		[CLSCompliant(false)]
		public static void DispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), num_groups_x, num_groups_y, num_groups_z, GL.EntryPoints[133]);
		}

		// Token: 0x06005195 RID: 20885 RVA: 0x000DF2C8 File Offset: 0x000DD4C8
		public static void DispatchComputeIndirect(IntPtr indirect)
		{
			calli(System.Void(System.IntPtr), indirect, GL.EntryPoints[135]);
		}

		// Token: 0x06005196 RID: 20886 RVA: 0x000DF2DC File Offset: 0x000DD4DC
		public static void DrawArrays(PrimitiveType mode, int first, int count)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), mode, first, count, GL.EntryPoints[136]);
		}

		// Token: 0x06005197 RID: 20887 RVA: 0x000DF2F4 File Offset: 0x000DD4F4
		public static void DrawArraysIndirect(PrimitiveType mode, IntPtr indirect)
		{
			calli(System.Void(System.Int32,System.IntPtr), mode, indirect, GL.EntryPoints[137]);
		}

		// Token: 0x06005198 RID: 20888 RVA: 0x000DF308 File Offset: 0x000DD508
		[CLSCompliant(false)]
		public unsafe static void DrawArraysIndirect<T1>(PrimitiveType mode, [In] [Out] T1[] indirect) where T1 : struct
		{
			fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), mode, ptr, GL.EntryPoints[137]);
			}
		}

		// Token: 0x06005199 RID: 20889 RVA: 0x000DF33C File Offset: 0x000DD53C
		[CLSCompliant(false)]
		public unsafe static void DrawArraysIndirect<T1>(PrimitiveType mode, [In] [Out] T1[,] indirect) where T1 : struct
		{
			fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), mode, ptr, GL.EntryPoints[137]);
			}
		}

		// Token: 0x0600519A RID: 20890 RVA: 0x000DF374 File Offset: 0x000DD574
		[CLSCompliant(false)]
		public unsafe static void DrawArraysIndirect<T1>(PrimitiveType mode, [In] [Out] T1[,,] indirect) where T1 : struct
		{
			fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), mode, ptr, GL.EntryPoints[137]);
			}
		}

		// Token: 0x0600519B RID: 20891 RVA: 0x000DF3B0 File Offset: 0x000DD5B0
		public unsafe static void DrawArraysIndirect<T1>(PrimitiveType mode, [In] [Out] ref T1 indirect) where T1 : struct
		{
			fixed (T1* ptr = &indirect)
			{
				calli(System.Void(System.Int32,System.IntPtr), mode, ptr, GL.EntryPoints[137]);
			}
		}

		// Token: 0x0600519C RID: 20892 RVA: 0x000DF3D4 File Offset: 0x000DD5D4
		public static void DrawArraysInstanced(PrimitiveType mode, int first, int count, int instancecount)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, first, count, instancecount, GL.EntryPoints[138]);
		}

		// Token: 0x0600519D RID: 20893 RVA: 0x000DF3EC File Offset: 0x000DD5EC
		[CLSCompliant(false)]
		public static void DrawArraysInstancedBaseInstance(PrimitiveType mode, int first, int count, int instancecount, int baseinstance)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32), mode, first, count, instancecount, baseinstance, GL.EntryPoints[139]);
		}

		// Token: 0x0600519E RID: 20894 RVA: 0x000DF404 File Offset: 0x000DD604
		[CLSCompliant(false)]
		public static void DrawArraysInstancedBaseInstance(PrimitiveType mode, int first, int count, int instancecount, uint baseinstance)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32), mode, first, count, instancecount, baseinstance, GL.EntryPoints[139]);
		}

		// Token: 0x0600519F RID: 20895 RVA: 0x000DF41C File Offset: 0x000DD61C
		public static void DrawBuffer(DrawBufferMode mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[140]);
		}

		// Token: 0x060051A0 RID: 20896 RVA: 0x000DF430 File Offset: 0x000DD630
		[CLSCompliant(false)]
		public unsafe static void DrawBuffers(int n, DrawBuffersEnum[] bufs)
		{
			fixed (DrawBuffersEnum* ptr = ref (bufs != null && bufs.Length != 0) ? ref bufs[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[141]);
			}
		}

		// Token: 0x060051A1 RID: 20897 RVA: 0x000DF464 File Offset: 0x000DD664
		[CLSCompliant(false)]
		public unsafe static void DrawBuffers(int n, ref DrawBuffersEnum bufs)
		{
			fixed (DrawBuffersEnum* ptr = &bufs)
			{
				calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[141]);
			}
		}

		// Token: 0x060051A2 RID: 20898 RVA: 0x000DF488 File Offset: 0x000DD688
		[CLSCompliant(false)]
		public unsafe static void DrawBuffers(int n, DrawBuffersEnum* bufs)
		{
			calli(System.Void(System.Int32,System.Int32*), n, bufs, GL.EntryPoints[141]);
		}

		// Token: 0x060051A3 RID: 20899 RVA: 0x000DF49C File Offset: 0x000DD69C
		public static void DrawElements(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, indices, GL.EntryPoints[142]);
		}

		// Token: 0x060051A4 RID: 20900 RVA: 0x000DF4B4 File Offset: 0x000DD6B4
		[CLSCompliant(false)]
		public unsafe static void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[142]);
			}
		}

		// Token: 0x060051A5 RID: 20901 RVA: 0x000DF4EC File Offset: 0x000DD6EC
		[CLSCompliant(false)]
		public unsafe static void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[142]);
			}
		}

		// Token: 0x060051A6 RID: 20902 RVA: 0x000DF528 File Offset: 0x000DD728
		[CLSCompliant(false)]
		public unsafe static void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[142]);
			}
		}

		// Token: 0x060051A7 RID: 20903 RVA: 0x000DF564 File Offset: 0x000DD764
		public unsafe static void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[142]);
			}
		}

		// Token: 0x060051A8 RID: 20904 RVA: 0x000DF588 File Offset: 0x000DD788
		public static void DrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int basevertex)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, basevertex, GL.EntryPoints[143]);
		}

		// Token: 0x060051A9 RID: 20905 RVA: 0x000DF5A0 File Offset: 0x000DD7A0
		[CLSCompliant(false)]
		public unsafe static void DrawElementsBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, basevertex, GL.EntryPoints[143]);
			}
		}

		// Token: 0x060051AA RID: 20906 RVA: 0x000DF5D8 File Offset: 0x000DD7D8
		[CLSCompliant(false)]
		public unsafe static void DrawElementsBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, basevertex, GL.EntryPoints[143]);
			}
		}

		// Token: 0x060051AB RID: 20907 RVA: 0x000DF614 File Offset: 0x000DD814
		[CLSCompliant(false)]
		public unsafe static void DrawElementsBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, basevertex, GL.EntryPoints[143]);
			}
		}

		// Token: 0x060051AC RID: 20908 RVA: 0x000DF654 File Offset: 0x000DD854
		public unsafe static void DrawElementsBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, basevertex, GL.EntryPoints[143]);
			}
		}

		// Token: 0x060051AD RID: 20909 RVA: 0x000DF67C File Offset: 0x000DD87C
		public static void DrawElementsIndirect(PrimitiveType mode, All type, IntPtr indirect)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr), mode, type, indirect, GL.EntryPoints[144]);
		}

		// Token: 0x060051AE RID: 20910 RVA: 0x000DF694 File Offset: 0x000DD894
		[CLSCompliant(false)]
		public unsafe static void DrawElementsIndirect<T2>(PrimitiveType mode, All type, [In] [Out] T2[] indirect) where T2 : struct
		{
			fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), mode, type, ptr, GL.EntryPoints[144]);
			}
		}

		// Token: 0x060051AF RID: 20911 RVA: 0x000DF6CC File Offset: 0x000DD8CC
		[CLSCompliant(false)]
		public unsafe static void DrawElementsIndirect<T2>(PrimitiveType mode, All type, [In] [Out] T2[,] indirect) where T2 : struct
		{
			fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), mode, type, ptr, GL.EntryPoints[144]);
			}
		}

		// Token: 0x060051B0 RID: 20912 RVA: 0x000DF708 File Offset: 0x000DD908
		[CLSCompliant(false)]
		public unsafe static void DrawElementsIndirect<T2>(PrimitiveType mode, All type, [In] [Out] T2[,,] indirect) where T2 : struct
		{
			fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), mode, type, ptr, GL.EntryPoints[144]);
			}
		}

		// Token: 0x060051B1 RID: 20913 RVA: 0x000DF744 File Offset: 0x000DD944
		public unsafe static void DrawElementsIndirect<T2>(PrimitiveType mode, All type, [In] [Out] ref T2 indirect) where T2 : struct
		{
			fixed (T2* ptr = &indirect)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), mode, type, ptr, GL.EntryPoints[144]);
			}
		}

		// Token: 0x060051B2 RID: 20914 RVA: 0x000DF768 File Offset: 0x000DD968
		public static void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, instancecount, GL.EntryPoints[145]);
		}

		// Token: 0x060051B3 RID: 20915 RVA: 0x000DF780 File Offset: 0x000DD980
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[145]);
			}
		}

		// Token: 0x060051B4 RID: 20916 RVA: 0x000DF7B8 File Offset: 0x000DD9B8
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[145]);
			}
		}

		// Token: 0x060051B5 RID: 20917 RVA: 0x000DF7F4 File Offset: 0x000DD9F4
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[145]);
			}
		}

		// Token: 0x060051B6 RID: 20918 RVA: 0x000DF834 File Offset: 0x000DDA34
		public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[145]);
			}
		}

		// Token: 0x060051B7 RID: 20919 RVA: 0x000DF85C File Offset: 0x000DDA5C
		[CLSCompliant(false)]
		public static void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int baseinstance)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, indices, instancecount, baseinstance, GL.EntryPoints[146]);
		}

		// Token: 0x060051B8 RID: 20920 RVA: 0x000DF878 File Offset: 0x000DDA78
		[CLSCompliant(false)]
		public static void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, uint baseinstance)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, indices, instancecount, baseinstance, GL.EntryPoints[146]);
		}

		// Token: 0x060051B9 RID: 20921 RVA: 0x000DF894 File Offset: 0x000DDA94
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int instancecount, int baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, baseinstance, GL.EntryPoints[146]);
			}
		}

		// Token: 0x060051BA RID: 20922 RVA: 0x000DF8D0 File Offset: 0x000DDAD0
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int instancecount, uint baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, baseinstance, GL.EntryPoints[146]);
			}
		}

		// Token: 0x060051BB RID: 20923 RVA: 0x000DF90C File Offset: 0x000DDB0C
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int instancecount, int baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, baseinstance, GL.EntryPoints[146]);
			}
		}

		// Token: 0x060051BC RID: 20924 RVA: 0x000DF94C File Offset: 0x000DDB4C
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int instancecount, uint baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, baseinstance, GL.EntryPoints[146]);
			}
		}

		// Token: 0x060051BD RID: 20925 RVA: 0x000DF98C File Offset: 0x000DDB8C
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int instancecount, int baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, baseinstance, GL.EntryPoints[146]);
			}
		}

		// Token: 0x060051BE RID: 20926 RVA: 0x000DF9CC File Offset: 0x000DDBCC
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int instancecount, uint baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, baseinstance, GL.EntryPoints[146]);
			}
		}

		// Token: 0x060051BF RID: 20927 RVA: 0x000DFA0C File Offset: 0x000DDC0C
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int instancecount, int baseinstance) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, baseinstance, GL.EntryPoints[146]);
			}
		}

		// Token: 0x060051C0 RID: 20928 RVA: 0x000DFA34 File Offset: 0x000DDC34
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int instancecount, uint baseinstance) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, baseinstance, GL.EntryPoints[146]);
			}
		}

		// Token: 0x060051C1 RID: 20929 RVA: 0x000DFA5C File Offset: 0x000DDC5C
		public static void DrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, indices, instancecount, basevertex, GL.EntryPoints[147]);
		}

		// Token: 0x060051C2 RID: 20930 RVA: 0x000DFA78 File Offset: 0x000DDC78
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int instancecount, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, instancecount, basevertex, GL.EntryPoints[147]);
			}
		}

		// Token: 0x060051C3 RID: 20931 RVA: 0x000DFAB4 File Offset: 0x000DDCB4
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int instancecount, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, instancecount, basevertex, GL.EntryPoints[147]);
			}
		}

		// Token: 0x060051C4 RID: 20932 RVA: 0x000DFAF4 File Offset: 0x000DDCF4
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int instancecount, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, instancecount, basevertex, GL.EntryPoints[147]);
			}
		}

		// Token: 0x060051C5 RID: 20933 RVA: 0x000DFB34 File Offset: 0x000DDD34
		public unsafe static void DrawElementsInstancedBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int instancecount, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, instancecount, basevertex, GL.EntryPoints[147]);
			}
		}

		// Token: 0x060051C6 RID: 20934 RVA: 0x000DFB5C File Offset: 0x000DDD5C
		[CLSCompliant(false)]
		public static void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex, int baseinstance)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, indices, instancecount, basevertex, baseinstance, GL.EntryPoints[148]);
		}

		// Token: 0x060051C7 RID: 20935 RVA: 0x000DFB84 File Offset: 0x000DDD84
		[CLSCompliant(false)]
		public static void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex, uint baseinstance)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, indices, instancecount, basevertex, baseinstance, GL.EntryPoints[148]);
		}

		// Token: 0x060051C8 RID: 20936 RVA: 0x000DFBAC File Offset: 0x000DDDAC
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int instancecount, int basevertex, int baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, basevertex, baseinstance, GL.EntryPoints[148]);
			}
		}

		// Token: 0x060051C9 RID: 20937 RVA: 0x000DFBE8 File Offset: 0x000DDDE8
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int instancecount, int basevertex, uint baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, basevertex, baseinstance, GL.EntryPoints[148]);
			}
		}

		// Token: 0x060051CA RID: 20938 RVA: 0x000DFC24 File Offset: 0x000DDE24
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int instancecount, int basevertex, int baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, basevertex, baseinstance, GL.EntryPoints[148]);
			}
		}

		// Token: 0x060051CB RID: 20939 RVA: 0x000DFC64 File Offset: 0x000DDE64
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int instancecount, int basevertex, uint baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, basevertex, baseinstance, GL.EntryPoints[148]);
			}
		}

		// Token: 0x060051CC RID: 20940 RVA: 0x000DFCA4 File Offset: 0x000DDEA4
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int instancecount, int basevertex, int baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, basevertex, baseinstance, GL.EntryPoints[148]);
			}
		}

		// Token: 0x060051CD RID: 20941 RVA: 0x000DFCE8 File Offset: 0x000DDEE8
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int instancecount, int basevertex, uint baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, basevertex, baseinstance, GL.EntryPoints[148]);
			}
		}

		// Token: 0x060051CE RID: 20942 RVA: 0x000DFD2C File Offset: 0x000DDF2C
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int instancecount, int basevertex, int baseinstance) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, basevertex, baseinstance, GL.EntryPoints[148]);
			}
		}

		// Token: 0x060051CF RID: 20943 RVA: 0x000DFD58 File Offset: 0x000DDF58
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int instancecount, int basevertex, uint baseinstance) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, basevertex, baseinstance, GL.EntryPoints[148]);
			}
		}

		// Token: 0x060051D0 RID: 20944 RVA: 0x000DFD84 File Offset: 0x000DDF84
		[CLSCompliant(false)]
		public static void DrawRangeElements(PrimitiveType mode, int start, int end, int count, DrawElementsType type, IntPtr indices)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, indices, GL.EntryPoints[149]);
		}

		// Token: 0x060051D1 RID: 20945 RVA: 0x000DFDA0 File Offset: 0x000DDFA0
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[149]);
			}
		}

		// Token: 0x060051D2 RID: 20946 RVA: 0x000DFDDC File Offset: 0x000DDFDC
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[149]);
			}
		}

		// Token: 0x060051D3 RID: 20947 RVA: 0x000DFE1C File Offset: 0x000DE01C
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[149]);
			}
		}

		// Token: 0x060051D4 RID: 20948 RVA: 0x000DFE60 File Offset: 0x000DE060
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] ref T5 indices) where T5 : struct
		{
			fixed (T5* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[149]);
			}
		}

		// Token: 0x060051D5 RID: 20949 RVA: 0x000DFE88 File Offset: 0x000DE088
		[CLSCompliant(false)]
		public static void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, indices, GL.EntryPoints[149]);
		}

		// Token: 0x060051D6 RID: 20950 RVA: 0x000DFEA4 File Offset: 0x000DE0A4
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[149]);
			}
		}

		// Token: 0x060051D7 RID: 20951 RVA: 0x000DFEE0 File Offset: 0x000DE0E0
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[149]);
			}
		}

		// Token: 0x060051D8 RID: 20952 RVA: 0x000DFF20 File Offset: 0x000DE120
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[149]);
			}
		}

		// Token: 0x060051D9 RID: 20953 RVA: 0x000DFF64 File Offset: 0x000DE164
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] ref T5 indices) where T5 : struct
		{
			fixed (T5* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[149]);
			}
		}

		// Token: 0x060051DA RID: 20954 RVA: 0x000DFF8C File Offset: 0x000DE18C
		[CLSCompliant(false)]
		public static void DrawRangeElementsBaseVertex(PrimitiveType mode, int start, int end, int count, DrawElementsType type, IntPtr indices, int basevertex)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, indices, basevertex, GL.EntryPoints[150]);
		}

		// Token: 0x060051DB RID: 20955 RVA: 0x000DFFB4 File Offset: 0x000DE1B4
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[150]);
			}
		}

		// Token: 0x060051DC RID: 20956 RVA: 0x000DFFF4 File Offset: 0x000DE1F4
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[150]);
			}
		}

		// Token: 0x060051DD RID: 20957 RVA: 0x000E0038 File Offset: 0x000DE238
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,,] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[150]);
			}
		}

		// Token: 0x060051DE RID: 20958 RVA: 0x000E007C File Offset: 0x000DE27C
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] ref T5 indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[150]);
			}
		}

		// Token: 0x060051DF RID: 20959 RVA: 0x000E00A8 File Offset: 0x000DE2A8
		[CLSCompliant(false)]
		public static void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices, int basevertex)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, indices, basevertex, GL.EntryPoints[150]);
		}

		// Token: 0x060051E0 RID: 20960 RVA: 0x000E00D0 File Offset: 0x000DE2D0
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[150]);
			}
		}

		// Token: 0x060051E1 RID: 20961 RVA: 0x000E0110 File Offset: 0x000DE310
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[150]);
			}
		}

		// Token: 0x060051E2 RID: 20962 RVA: 0x000E0154 File Offset: 0x000DE354
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,,] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[150]);
			}
		}

		// Token: 0x060051E3 RID: 20963 RVA: 0x000E0198 File Offset: 0x000DE398
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] ref T5 indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[150]);
			}
		}

		// Token: 0x060051E4 RID: 20964 RVA: 0x000E01C4 File Offset: 0x000DE3C4
		[CLSCompliant(false)]
		public static void DrawTransformFeedback(PrimitiveType mode, int id)
		{
			calli(System.Void(System.Int32,System.UInt32), mode, id, GL.EntryPoints[151]);
		}

		// Token: 0x060051E5 RID: 20965 RVA: 0x000E01D8 File Offset: 0x000DE3D8
		[CLSCompliant(false)]
		public static void DrawTransformFeedback(PrimitiveType mode, uint id)
		{
			calli(System.Void(System.Int32,System.UInt32), mode, id, GL.EntryPoints[151]);
		}

		// Token: 0x060051E6 RID: 20966 RVA: 0x000E01EC File Offset: 0x000DE3EC
		[CLSCompliant(false)]
		public static void DrawTransformFeedbackInstanced(PrimitiveType mode, int id, int instancecount)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32), mode, id, instancecount, GL.EntryPoints[152]);
		}

		// Token: 0x060051E7 RID: 20967 RVA: 0x000E0204 File Offset: 0x000DE404
		[CLSCompliant(false)]
		public static void DrawTransformFeedbackInstanced(PrimitiveType mode, uint id, int instancecount)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32), mode, id, instancecount, GL.EntryPoints[152]);
		}

		// Token: 0x060051E8 RID: 20968 RVA: 0x000E021C File Offset: 0x000DE41C
		[CLSCompliant(false)]
		public static void DrawTransformFeedbackStream(PrimitiveType mode, int id, int stream)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), mode, id, stream, GL.EntryPoints[153]);
		}

		// Token: 0x060051E9 RID: 20969 RVA: 0x000E0234 File Offset: 0x000DE434
		[CLSCompliant(false)]
		public static void DrawTransformFeedbackStream(PrimitiveType mode, uint id, uint stream)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), mode, id, stream, GL.EntryPoints[153]);
		}

		// Token: 0x060051EA RID: 20970 RVA: 0x000E024C File Offset: 0x000DE44C
		[CLSCompliant(false)]
		public static void DrawTransformFeedbackStreamInstanced(PrimitiveType mode, int id, int stream, int instancecount)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32), mode, id, stream, instancecount, GL.EntryPoints[154]);
		}

		// Token: 0x060051EB RID: 20971 RVA: 0x000E0264 File Offset: 0x000DE464
		[CLSCompliant(false)]
		public static void DrawTransformFeedbackStreamInstanced(PrimitiveType mode, uint id, uint stream, int instancecount)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32), mode, id, stream, instancecount, GL.EntryPoints[154]);
		}

		// Token: 0x060051EC RID: 20972 RVA: 0x000E027C File Offset: 0x000DE47C
		public static void Enable(EnableCap cap)
		{
			calli(System.Void(System.Int32), cap, GL.EntryPoints[155]);
		}

		// Token: 0x060051ED RID: 20973 RVA: 0x000E0290 File Offset: 0x000DE490
		[CLSCompliant(false)]
		public static void Enable(IndexedEnableCap target, int index)
		{
			calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[156]);
		}

		// Token: 0x060051EE RID: 20974 RVA: 0x000E02A4 File Offset: 0x000DE4A4
		[CLSCompliant(false)]
		public static void Enable(IndexedEnableCap target, uint index)
		{
			calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[156]);
		}

		// Token: 0x060051EF RID: 20975 RVA: 0x000E02B8 File Offset: 0x000DE4B8
		[CLSCompliant(false)]
		public static void EnableVertexAttribArray(int index)
		{
			calli(System.Void(System.UInt32), index, GL.EntryPoints[157]);
		}

		// Token: 0x060051F0 RID: 20976 RVA: 0x000E02CC File Offset: 0x000DE4CC
		[CLSCompliant(false)]
		public static void EnableVertexAttribArray(uint index)
		{
			calli(System.Void(System.UInt32), index, GL.EntryPoints[157]);
		}

		// Token: 0x060051F1 RID: 20977 RVA: 0x000E02E0 File Offset: 0x000DE4E0
		public static void EndConditionalRender()
		{
			calli(System.Void(), GL.EntryPoints[158]);
		}

		// Token: 0x060051F2 RID: 20978 RVA: 0x000E02F4 File Offset: 0x000DE4F4
		public static void EndQuery(QueryTarget target)
		{
			calli(System.Void(System.Int32), target, GL.EntryPoints[159]);
		}

		// Token: 0x060051F3 RID: 20979 RVA: 0x000E0308 File Offset: 0x000DE508
		[CLSCompliant(false)]
		public static void EndQueryIndexed(QueryTarget target, int index)
		{
			calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[160]);
		}

		// Token: 0x060051F4 RID: 20980 RVA: 0x000E031C File Offset: 0x000DE51C
		[CLSCompliant(false)]
		public static void EndQueryIndexed(QueryTarget target, uint index)
		{
			calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[160]);
		}

		// Token: 0x060051F5 RID: 20981 RVA: 0x000E0330 File Offset: 0x000DE530
		public static void EndTransformFeedback()
		{
			calli(System.Void(), GL.EntryPoints[161]);
		}

		// Token: 0x060051F6 RID: 20982 RVA: 0x000E0344 File Offset: 0x000DE544
		public static IntPtr FenceSync(SyncCondition condition, WaitSyncFlags flags)
		{
			return calli(System.IntPtr(System.Int32,System.Int32), condition, flags, GL.EntryPoints[162]);
		}

		// Token: 0x060051F7 RID: 20983 RVA: 0x000E0358 File Offset: 0x000DE558
		public static void Finish()
		{
			calli(System.Void(), GL.EntryPoints[163]);
		}

		// Token: 0x060051F8 RID: 20984 RVA: 0x000E036C File Offset: 0x000DE56C
		public static void Flush()
		{
			calli(System.Void(), GL.EntryPoints[164]);
		}

		// Token: 0x060051F9 RID: 20985 RVA: 0x000E0380 File Offset: 0x000DE580
		public static void FlushMappedBufferRange(BufferTarget target, IntPtr offset, IntPtr length)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.IntPtr), target, offset, length, GL.EntryPoints[165]);
		}

		// Token: 0x060051FA RID: 20986 RVA: 0x000E0398 File Offset: 0x000DE598
		public static void FramebufferParameter(FramebufferTarget target, FramebufferDefaultParameter pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, param, GL.EntryPoints[166]);
		}

		// Token: 0x060051FB RID: 20987 RVA: 0x000E03B0 File Offset: 0x000DE5B0
		[CLSCompliant(false)]
		public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, int renderbuffer)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), target, attachment, renderbuffertarget, renderbuffer, GL.EntryPoints[167]);
		}

		// Token: 0x060051FC RID: 20988 RVA: 0x000E03C8 File Offset: 0x000DE5C8
		[CLSCompliant(false)]
		public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), target, attachment, renderbuffertarget, renderbuffer, GL.EntryPoints[167]);
		}

		// Token: 0x060051FD RID: 20989 RVA: 0x000E03E0 File Offset: 0x000DE5E0
		[CLSCompliant(false)]
		public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, texture, level, GL.EntryPoints[168]);
		}

		// Token: 0x060051FE RID: 20990 RVA: 0x000E03F8 File Offset: 0x000DE5F8
		[CLSCompliant(false)]
		public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, texture, level, GL.EntryPoints[168]);
		}

		// Token: 0x060051FF RID: 20991 RVA: 0x000E0410 File Offset: 0x000DE610
		[CLSCompliant(false)]
		public static void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, textarget, texture, level, GL.EntryPoints[169]);
		}

		// Token: 0x06005200 RID: 20992 RVA: 0x000E0428 File Offset: 0x000DE628
		[CLSCompliant(false)]
		public static void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, textarget, texture, level, GL.EntryPoints[169]);
		}

		// Token: 0x06005201 RID: 20993 RVA: 0x000E0440 File Offset: 0x000DE640
		[CLSCompliant(false)]
		public static void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, textarget, texture, level, GL.EntryPoints[170]);
		}

		// Token: 0x06005202 RID: 20994 RVA: 0x000E0458 File Offset: 0x000DE658
		[CLSCompliant(false)]
		public static void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, textarget, texture, level, GL.EntryPoints[170]);
		}

		// Token: 0x06005203 RID: 20995 RVA: 0x000E0470 File Offset: 0x000DE670
		[CLSCompliant(false)]
		public static void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level, int zoffset)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, textarget, texture, level, zoffset, GL.EntryPoints[171]);
		}

		// Token: 0x06005204 RID: 20996 RVA: 0x000E048C File Offset: 0x000DE68C
		[CLSCompliant(false)]
		public static void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, textarget, texture, level, zoffset, GL.EntryPoints[171]);
		}

		// Token: 0x06005205 RID: 20997 RVA: 0x000E04A8 File Offset: 0x000DE6A8
		[CLSCompliant(false)]
		public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level, int layer)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, texture, level, layer, GL.EntryPoints[172]);
		}

		// Token: 0x06005206 RID: 20998 RVA: 0x000E04C0 File Offset: 0x000DE6C0
		[CLSCompliant(false)]
		public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, texture, level, layer, GL.EntryPoints[172]);
		}

		// Token: 0x06005207 RID: 20999 RVA: 0x000E04D8 File Offset: 0x000DE6D8
		public static void FrontFace(FrontFaceDirection mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[173]);
		}

		// Token: 0x06005208 RID: 21000 RVA: 0x000E04EC File Offset: 0x000DE6EC
		[CLSCompliant(false)]
		public static int GenBuffer()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[174]);
			return result;
		}

		// Token: 0x06005209 RID: 21001 RVA: 0x000E0510 File Offset: 0x000DE710
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, [Out] int[] buffers)
		{
			fixed (int* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[174]);
			}
		}

		// Token: 0x0600520A RID: 21002 RVA: 0x000E0544 File Offset: 0x000DE744
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, out int buffers)
		{
			fixed (int* ptr = &buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[174]);
			}
		}

		// Token: 0x0600520B RID: 21003 RVA: 0x000E0568 File Offset: 0x000DE768
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, [Out] int* buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, buffers, GL.EntryPoints[174]);
		}

		// Token: 0x0600520C RID: 21004 RVA: 0x000E057C File Offset: 0x000DE77C
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, [Out] uint[] buffers)
		{
			fixed (uint* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[174]);
			}
		}

		// Token: 0x0600520D RID: 21005 RVA: 0x000E05B0 File Offset: 0x000DE7B0
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, out uint buffers)
		{
			fixed (uint* ptr = &buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[174]);
			}
		}

		// Token: 0x0600520E RID: 21006 RVA: 0x000E05D4 File Offset: 0x000DE7D4
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, [Out] uint* buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, buffers, GL.EntryPoints[174]);
		}

		// Token: 0x0600520F RID: 21007 RVA: 0x000E05E8 File Offset: 0x000DE7E8
		public static void GenerateMipmap(GenerateMipmapTarget target)
		{
			calli(System.Void(System.Int32), target, GL.EntryPoints[175]);
		}

		// Token: 0x06005210 RID: 21008 RVA: 0x000E05FC File Offset: 0x000DE7FC
		[CLSCompliant(false)]
		public static int GenFramebuffer()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[176]);
			return result;
		}

		// Token: 0x06005211 RID: 21009 RVA: 0x000E0620 File Offset: 0x000DE820
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, [Out] int[] framebuffers)
		{
			fixed (int* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[176]);
			}
		}

		// Token: 0x06005212 RID: 21010 RVA: 0x000E0654 File Offset: 0x000DE854
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, out int framebuffers)
		{
			fixed (int* ptr = &framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[176]);
			}
		}

		// Token: 0x06005213 RID: 21011 RVA: 0x000E0678 File Offset: 0x000DE878
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, [Out] int* framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, framebuffers, GL.EntryPoints[176]);
		}

		// Token: 0x06005214 RID: 21012 RVA: 0x000E068C File Offset: 0x000DE88C
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, [Out] uint[] framebuffers)
		{
			fixed (uint* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[176]);
			}
		}

		// Token: 0x06005215 RID: 21013 RVA: 0x000E06C0 File Offset: 0x000DE8C0
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, out uint framebuffers)
		{
			fixed (uint* ptr = &framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[176]);
			}
		}

		// Token: 0x06005216 RID: 21014 RVA: 0x000E06E4 File Offset: 0x000DE8E4
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, [Out] uint* framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, framebuffers, GL.EntryPoints[176]);
		}

		// Token: 0x06005217 RID: 21015 RVA: 0x000E06F8 File Offset: 0x000DE8F8
		[CLSCompliant(false)]
		public static int GenProgramPipeline()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[177]);
			return result;
		}

		// Token: 0x06005218 RID: 21016 RVA: 0x000E071C File Offset: 0x000DE91C
		[CLSCompliant(false)]
		public unsafe static void GenProgramPipelines(int n, [Out] int[] pipelines)
		{
			fixed (int* ptr = ref (pipelines != null && pipelines.Length != 0) ? ref pipelines[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[177]);
			}
		}

		// Token: 0x06005219 RID: 21017 RVA: 0x000E0750 File Offset: 0x000DE950
		[CLSCompliant(false)]
		public unsafe static void GenProgramPipelines(int n, out int pipelines)
		{
			fixed (int* ptr = &pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[177]);
			}
		}

		// Token: 0x0600521A RID: 21018 RVA: 0x000E0774 File Offset: 0x000DE974
		[CLSCompliant(false)]
		public unsafe static void GenProgramPipelines(int n, [Out] int* pipelines)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, pipelines, GL.EntryPoints[177]);
		}

		// Token: 0x0600521B RID: 21019 RVA: 0x000E0788 File Offset: 0x000DE988
		[CLSCompliant(false)]
		public unsafe static void GenProgramPipelines(int n, [Out] uint[] pipelines)
		{
			fixed (uint* ptr = ref (pipelines != null && pipelines.Length != 0) ? ref pipelines[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[177]);
			}
		}

		// Token: 0x0600521C RID: 21020 RVA: 0x000E07BC File Offset: 0x000DE9BC
		[CLSCompliant(false)]
		public unsafe static void GenProgramPipelines(int n, out uint pipelines)
		{
			fixed (uint* ptr = &pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[177]);
			}
		}

		// Token: 0x0600521D RID: 21021 RVA: 0x000E07E0 File Offset: 0x000DE9E0
		[CLSCompliant(false)]
		public unsafe static void GenProgramPipelines(int n, [Out] uint* pipelines)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, pipelines, GL.EntryPoints[177]);
		}

		// Token: 0x0600521E RID: 21022 RVA: 0x000E07F4 File Offset: 0x000DE9F4
		[CLSCompliant(false)]
		public static int GenQuery()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[178]);
			return result;
		}

		// Token: 0x0600521F RID: 21023 RVA: 0x000E0818 File Offset: 0x000DEA18
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, [Out] int[] ids)
		{
			fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[178]);
			}
		}

		// Token: 0x06005220 RID: 21024 RVA: 0x000E084C File Offset: 0x000DEA4C
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, out int ids)
		{
			fixed (int* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[178]);
			}
		}

		// Token: 0x06005221 RID: 21025 RVA: 0x000E0870 File Offset: 0x000DEA70
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, [Out] int* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[178]);
		}

		// Token: 0x06005222 RID: 21026 RVA: 0x000E0884 File Offset: 0x000DEA84
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, [Out] uint[] ids)
		{
			fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[178]);
			}
		}

		// Token: 0x06005223 RID: 21027 RVA: 0x000E08B8 File Offset: 0x000DEAB8
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, out uint ids)
		{
			fixed (uint* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[178]);
			}
		}

		// Token: 0x06005224 RID: 21028 RVA: 0x000E08DC File Offset: 0x000DEADC
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, [Out] uint* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[178]);
		}

		// Token: 0x06005225 RID: 21029 RVA: 0x000E08F0 File Offset: 0x000DEAF0
		[CLSCompliant(false)]
		public static int GenRenderbuffer()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[179]);
			return result;
		}

		// Token: 0x06005226 RID: 21030 RVA: 0x000E0914 File Offset: 0x000DEB14
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, [Out] int[] renderbuffers)
		{
			fixed (int* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[179]);
			}
		}

		// Token: 0x06005227 RID: 21031 RVA: 0x000E0948 File Offset: 0x000DEB48
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, out int renderbuffers)
		{
			fixed (int* ptr = &renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[179]);
			}
		}

		// Token: 0x06005228 RID: 21032 RVA: 0x000E096C File Offset: 0x000DEB6C
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, [Out] int* renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, renderbuffers, GL.EntryPoints[179]);
		}

		// Token: 0x06005229 RID: 21033 RVA: 0x000E0980 File Offset: 0x000DEB80
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, [Out] uint[] renderbuffers)
		{
			fixed (uint* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[179]);
			}
		}

		// Token: 0x0600522A RID: 21034 RVA: 0x000E09B4 File Offset: 0x000DEBB4
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, out uint renderbuffers)
		{
			fixed (uint* ptr = &renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[179]);
			}
		}

		// Token: 0x0600522B RID: 21035 RVA: 0x000E09D8 File Offset: 0x000DEBD8
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, [Out] uint* renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, renderbuffers, GL.EntryPoints[179]);
		}

		// Token: 0x0600522C RID: 21036 RVA: 0x000E09EC File Offset: 0x000DEBEC
		[CLSCompliant(false)]
		public static int GenSampler()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[180]);
			return result;
		}

		// Token: 0x0600522D RID: 21037 RVA: 0x000E0A10 File Offset: 0x000DEC10
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, [Out] int[] samplers)
		{
			fixed (int* ptr = ref (samplers != null && samplers.Length != 0) ? ref samplers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[180]);
			}
		}

		// Token: 0x0600522E RID: 21038 RVA: 0x000E0A44 File Offset: 0x000DEC44
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, out int samplers)
		{
			fixed (int* ptr = &samplers)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[180]);
			}
		}

		// Token: 0x0600522F RID: 21039 RVA: 0x000E0A68 File Offset: 0x000DEC68
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, [Out] int* samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), count, samplers, GL.EntryPoints[180]);
		}

		// Token: 0x06005230 RID: 21040 RVA: 0x000E0A7C File Offset: 0x000DEC7C
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, [Out] uint[] samplers)
		{
			fixed (uint* ptr = ref (samplers != null && samplers.Length != 0) ? ref samplers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[180]);
			}
		}

		// Token: 0x06005231 RID: 21041 RVA: 0x000E0AB0 File Offset: 0x000DECB0
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, out uint samplers)
		{
			fixed (uint* ptr = &samplers)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[180]);
			}
		}

		// Token: 0x06005232 RID: 21042 RVA: 0x000E0AD4 File Offset: 0x000DECD4
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, [Out] uint* samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), count, samplers, GL.EntryPoints[180]);
		}

		// Token: 0x06005233 RID: 21043 RVA: 0x000E0AE8 File Offset: 0x000DECE8
		[CLSCompliant(false)]
		public static int GenTexture()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[181]);
			return result;
		}

		// Token: 0x06005234 RID: 21044 RVA: 0x000E0B0C File Offset: 0x000DED0C
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, [Out] int[] textures)
		{
			fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[181]);
			}
		}

		// Token: 0x06005235 RID: 21045 RVA: 0x000E0B40 File Offset: 0x000DED40
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, out int textures)
		{
			fixed (int* ptr = &textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[181]);
			}
		}

		// Token: 0x06005236 RID: 21046 RVA: 0x000E0B64 File Offset: 0x000DED64
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, [Out] int* textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, textures, GL.EntryPoints[181]);
		}

		// Token: 0x06005237 RID: 21047 RVA: 0x000E0B78 File Offset: 0x000DED78
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, [Out] uint[] textures)
		{
			fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[181]);
			}
		}

		// Token: 0x06005238 RID: 21048 RVA: 0x000E0BAC File Offset: 0x000DEDAC
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, out uint textures)
		{
			fixed (uint* ptr = &textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[181]);
			}
		}

		// Token: 0x06005239 RID: 21049 RVA: 0x000E0BD0 File Offset: 0x000DEDD0
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, [Out] uint* textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, textures, GL.EntryPoints[181]);
		}

		// Token: 0x0600523A RID: 21050 RVA: 0x000E0BE4 File Offset: 0x000DEDE4
		[CLSCompliant(false)]
		public static int GenTransformFeedback()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[182]);
			return result;
		}

		// Token: 0x0600523B RID: 21051 RVA: 0x000E0C08 File Offset: 0x000DEE08
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, [Out] int[] ids)
		{
			fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[182]);
			}
		}

		// Token: 0x0600523C RID: 21052 RVA: 0x000E0C3C File Offset: 0x000DEE3C
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, out int ids)
		{
			fixed (int* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[182]);
			}
		}

		// Token: 0x0600523D RID: 21053 RVA: 0x000E0C60 File Offset: 0x000DEE60
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, [Out] int* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[182]);
		}

		// Token: 0x0600523E RID: 21054 RVA: 0x000E0C74 File Offset: 0x000DEE74
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, [Out] uint[] ids)
		{
			fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[182]);
			}
		}

		// Token: 0x0600523F RID: 21055 RVA: 0x000E0CA8 File Offset: 0x000DEEA8
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, out uint ids)
		{
			fixed (uint* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[182]);
			}
		}

		// Token: 0x06005240 RID: 21056 RVA: 0x000E0CCC File Offset: 0x000DEECC
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, [Out] uint* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[182]);
		}

		// Token: 0x06005241 RID: 21057 RVA: 0x000E0CE0 File Offset: 0x000DEEE0
		[CLSCompliant(false)]
		public static int GenVertexArray()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[183]);
			return result;
		}

		// Token: 0x06005242 RID: 21058 RVA: 0x000E0D04 File Offset: 0x000DEF04
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, [Out] int[] arrays)
		{
			fixed (int* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[183]);
			}
		}

		// Token: 0x06005243 RID: 21059 RVA: 0x000E0D38 File Offset: 0x000DEF38
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, out int arrays)
		{
			fixed (int* ptr = &arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[183]);
			}
		}

		// Token: 0x06005244 RID: 21060 RVA: 0x000E0D5C File Offset: 0x000DEF5C
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, [Out] int* arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[183]);
		}

		// Token: 0x06005245 RID: 21061 RVA: 0x000E0D70 File Offset: 0x000DEF70
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, [Out] uint[] arrays)
		{
			fixed (uint* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[183]);
			}
		}

		// Token: 0x06005246 RID: 21062 RVA: 0x000E0DA4 File Offset: 0x000DEFA4
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, out uint arrays)
		{
			fixed (uint* ptr = &arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[183]);
			}
		}

		// Token: 0x06005247 RID: 21063 RVA: 0x000E0DC8 File Offset: 0x000DEFC8
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, [Out] uint* arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[183]);
		}

		// Token: 0x06005248 RID: 21064 RVA: 0x000E0DDC File Offset: 0x000DEFDC
		[CLSCompliant(false)]
		public unsafe static void GetActiveAtomicCounterBuffer(int program, int bufferIndex, AtomicCounterBufferParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, bufferIndex, pname, ptr, GL.EntryPoints[184]);
			}
		}

		// Token: 0x06005249 RID: 21065 RVA: 0x000E0E14 File Offset: 0x000DF014
		[CLSCompliant(false)]
		public unsafe static void GetActiveAtomicCounterBuffer(int program, int bufferIndex, AtomicCounterBufferParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, bufferIndex, pname, ptr, GL.EntryPoints[184]);
			}
		}

		// Token: 0x0600524A RID: 21066 RVA: 0x000E0E38 File Offset: 0x000DF038
		[CLSCompliant(false)]
		public unsafe static void GetActiveAtomicCounterBuffer(int program, int bufferIndex, AtomicCounterBufferParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, bufferIndex, pname, @params, GL.EntryPoints[184]);
		}

		// Token: 0x0600524B RID: 21067 RVA: 0x000E0E50 File Offset: 0x000DF050
		[CLSCompliant(false)]
		public unsafe static void GetActiveAtomicCounterBuffer(uint program, uint bufferIndex, AtomicCounterBufferParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, bufferIndex, pname, ptr, GL.EntryPoints[184]);
			}
		}

		// Token: 0x0600524C RID: 21068 RVA: 0x000E0E88 File Offset: 0x000DF088
		[CLSCompliant(false)]
		public unsafe static void GetActiveAtomicCounterBuffer(uint program, uint bufferIndex, AtomicCounterBufferParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, bufferIndex, pname, ptr, GL.EntryPoints[184]);
			}
		}

		// Token: 0x0600524D RID: 21069 RVA: 0x000E0EAC File Offset: 0x000DF0AC
		[CLSCompliant(false)]
		public unsafe static void GetActiveAtomicCounterBuffer(uint program, uint bufferIndex, AtomicCounterBufferParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, bufferIndex, pname, @params, GL.EntryPoints[184]);
		}

		// Token: 0x0600524E RID: 21070 RVA: 0x000E0EC4 File Offset: 0x000DF0C4
		[CLSCompliant(false)]
		public unsafe static void GetActiveAttrib(int program, int index, int bufSize, out int length, out int size, out ActiveAttribType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (ActiveAttribType* ptr5 = &type)
					{
						ActiveAttribType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[185]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x0600524F RID: 21071 RVA: 0x000E0F10 File Offset: 0x000DF110
		[CLSCompliant(false)]
		public unsafe static void GetActiveAttrib(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[185]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005250 RID: 21072 RVA: 0x000E0F54 File Offset: 0x000DF154
		[CLSCompliant(false)]
		public unsafe static void GetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, out ActiveAttribType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (ActiveAttribType* ptr5 = &type)
					{
						ActiveAttribType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[185]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x06005251 RID: 21073 RVA: 0x000E0FA0 File Offset: 0x000DF1A0
		[CLSCompliant(false)]
		public unsafe static void GetActiveAttrib(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[185]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005252 RID: 21074 RVA: 0x000E0FE4 File Offset: 0x000DF1E4
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineName(int program, ShaderType shadertype, int index, int bufsize, out int length, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, shadertype, index, bufsize, ptr2, intPtr, GL.EntryPoints[186]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06005253 RID: 21075 RVA: 0x000E1028 File Offset: 0x000DF228
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineName(int program, ShaderType shadertype, int index, int bufsize, [Out] int* length, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, shadertype, index, bufsize, length, intPtr, GL.EntryPoints[186]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005254 RID: 21076 RVA: 0x000E1068 File Offset: 0x000DF268
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineName(uint program, ShaderType shadertype, uint index, int bufsize, out int length, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, shadertype, index, bufsize, ptr2, intPtr, GL.EntryPoints[186]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06005255 RID: 21077 RVA: 0x000E10AC File Offset: 0x000DF2AC
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineName(uint program, ShaderType shadertype, uint index, int bufsize, [Out] int* length, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, shadertype, index, bufsize, length, intPtr, GL.EntryPoints[186]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005256 RID: 21078 RVA: 0x000E10EC File Offset: 0x000DF2EC
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniform(int program, ShaderType shadertype, int index, ActiveSubroutineUniformParameter pname, [Out] int[] values)
		{
			fixed (int* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, shadertype, index, pname, ptr, GL.EntryPoints[187]);
			}
		}

		// Token: 0x06005257 RID: 21079 RVA: 0x000E1128 File Offset: 0x000DF328
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniform(int program, ShaderType shadertype, int index, ActiveSubroutineUniformParameter pname, out int values)
		{
			fixed (int* ptr = &values)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, shadertype, index, pname, ptr, GL.EntryPoints[187]);
			}
		}

		// Token: 0x06005258 RID: 21080 RVA: 0x000E1150 File Offset: 0x000DF350
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniform(int program, ShaderType shadertype, int index, ActiveSubroutineUniformParameter pname, [Out] int* values)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, shadertype, index, pname, values, GL.EntryPoints[187]);
		}

		// Token: 0x06005259 RID: 21081 RVA: 0x000E1168 File Offset: 0x000DF368
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniform(uint program, ShaderType shadertype, uint index, ActiveSubroutineUniformParameter pname, [Out] int[] values)
		{
			fixed (int* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, shadertype, index, pname, ptr, GL.EntryPoints[187]);
			}
		}

		// Token: 0x0600525A RID: 21082 RVA: 0x000E11A4 File Offset: 0x000DF3A4
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniform(uint program, ShaderType shadertype, uint index, ActiveSubroutineUniformParameter pname, out int values)
		{
			fixed (int* ptr = &values)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, shadertype, index, pname, ptr, GL.EntryPoints[187]);
			}
		}

		// Token: 0x0600525B RID: 21083 RVA: 0x000E11CC File Offset: 0x000DF3CC
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniform(uint program, ShaderType shadertype, uint index, ActiveSubroutineUniformParameter pname, [Out] int* values)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, shadertype, index, pname, values, GL.EntryPoints[187]);
		}

		// Token: 0x0600525C RID: 21084 RVA: 0x000E11E4 File Offset: 0x000DF3E4
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniformName(int program, ShaderType shadertype, int index, int bufsize, out int length, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, shadertype, index, bufsize, ptr2, intPtr, GL.EntryPoints[188]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600525D RID: 21085 RVA: 0x000E1228 File Offset: 0x000DF428
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniformName(int program, ShaderType shadertype, int index, int bufsize, [Out] int* length, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, shadertype, index, bufsize, length, intPtr, GL.EntryPoints[188]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x0600525E RID: 21086 RVA: 0x000E1268 File Offset: 0x000DF468
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniformName(uint program, ShaderType shadertype, uint index, int bufsize, out int length, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, shadertype, index, bufsize, ptr2, intPtr, GL.EntryPoints[188]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600525F RID: 21087 RVA: 0x000E12AC File Offset: 0x000DF4AC
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniformName(uint program, ShaderType shadertype, uint index, int bufsize, [Out] int* length, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, shadertype, index, bufsize, length, intPtr, GL.EntryPoints[188]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005260 RID: 21088 RVA: 0x000E12EC File Offset: 0x000DF4EC
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniform(int program, int index, int bufSize, out int length, out int size, out ActiveUniformType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (ActiveUniformType* ptr5 = &type)
					{
						ActiveUniformType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[189]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x06005261 RID: 21089 RVA: 0x000E1338 File Offset: 0x000DF538
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniform(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveUniformType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[189]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005262 RID: 21090 RVA: 0x000E137C File Offset: 0x000DF57C
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, out ActiveUniformType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (ActiveUniformType* ptr5 = &type)
					{
						ActiveUniformType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[189]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x06005263 RID: 21091 RVA: 0x000E13C8 File Offset: 0x000DF5C8
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniform(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveUniformType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[189]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005264 RID: 21092 RVA: 0x000E140C File Offset: 0x000DF60C
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(int program, int uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, ptr, GL.EntryPoints[190]);
			}
		}

		// Token: 0x06005265 RID: 21093 RVA: 0x000E1444 File Offset: 0x000DF644
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(int program, int uniformBlockIndex, ActiveUniformBlockParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, ptr, GL.EntryPoints[190]);
			}
		}

		// Token: 0x06005266 RID: 21094 RVA: 0x000E1468 File Offset: 0x000DF668
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(int program, int uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, @params, GL.EntryPoints[190]);
		}

		// Token: 0x06005267 RID: 21095 RVA: 0x000E1480 File Offset: 0x000DF680
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(uint program, uint uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, ptr, GL.EntryPoints[190]);
			}
		}

		// Token: 0x06005268 RID: 21096 RVA: 0x000E14B8 File Offset: 0x000DF6B8
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(uint program, uint uniformBlockIndex, ActiveUniformBlockParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, ptr, GL.EntryPoints[190]);
			}
		}

		// Token: 0x06005269 RID: 21097 RVA: 0x000E14DC File Offset: 0x000DF6DC
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(uint program, uint uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, @params, GL.EntryPoints[190]);
		}

		// Token: 0x0600526A RID: 21098 RVA: 0x000E14F4 File Offset: 0x000DF6F4
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlockName(int program, int uniformBlockIndex, int bufSize, out int length, [Out] StringBuilder uniformBlockName)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformBlockName.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformBlockIndex, bufSize, ptr2, intPtr, GL.EntryPoints[191]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformBlockName);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600526B RID: 21099 RVA: 0x000E1534 File Offset: 0x000DF734
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlockName(int program, int uniformBlockIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformBlockName)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformBlockName.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformBlockIndex, bufSize, length, intPtr, GL.EntryPoints[191]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformBlockName);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x0600526C RID: 21100 RVA: 0x000E1574 File Offset: 0x000DF774
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, out int length, [Out] StringBuilder uniformBlockName)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformBlockName.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformBlockIndex, bufSize, ptr2, intPtr, GL.EntryPoints[191]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformBlockName);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600526D RID: 21101 RVA: 0x000E15B4 File Offset: 0x000DF7B4
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformBlockName)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformBlockName.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformBlockIndex, bufSize, length, intPtr, GL.EntryPoints[191]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformBlockName);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x0600526E RID: 21102 RVA: 0x000E15F4 File Offset: 0x000DF7F4
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformName(int program, int uniformIndex, int bufSize, out int length, [Out] StringBuilder uniformName)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformName.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformIndex, bufSize, ptr2, intPtr, GL.EntryPoints[192]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformName);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600526F RID: 21103 RVA: 0x000E1634 File Offset: 0x000DF834
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformName(int program, int uniformIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformName)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformName.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformIndex, bufSize, length, intPtr, GL.EntryPoints[192]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformName);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005270 RID: 21104 RVA: 0x000E1674 File Offset: 0x000DF874
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, out int length, [Out] StringBuilder uniformName)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformName.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformIndex, bufSize, ptr2, intPtr, GL.EntryPoints[192]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformName);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06005271 RID: 21105 RVA: 0x000E16B4 File Offset: 0x000DF8B4
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformName)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformName.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformIndex, bufSize, length, intPtr, GL.EntryPoints[192]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformName);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005272 RID: 21106 RVA: 0x000E16F4 File Offset: 0x000DF8F4
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(int program, int uniformCount, int[] uniformIndices, ActiveUniformParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (uniformIndices != null && uniformIndices.Length != 0) ? ref uniformIndices[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, ptr2, pname, ptr3, GL.EntryPoints[193]);
				}
			}
		}

		// Token: 0x06005273 RID: 21107 RVA: 0x000E1744 File Offset: 0x000DF944
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(int program, int uniformCount, ref int uniformIndices, ActiveUniformParameter pname, out int @params)
		{
			fixed (int* ptr = &uniformIndices)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, ptr2, pname, ptr3, GL.EntryPoints[193]);
				}
			}
		}

		// Token: 0x06005274 RID: 21108 RVA: 0x000E1770 File Offset: 0x000DF970
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(int program, int uniformCount, int* uniformIndices, ActiveUniformParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, uniformIndices, pname, @params, GL.EntryPoints[193]);
		}

		// Token: 0x06005275 RID: 21109 RVA: 0x000E1788 File Offset: 0x000DF988
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(uint program, int uniformCount, uint[] uniformIndices, ActiveUniformParameter pname, [Out] int[] @params)
		{
			fixed (uint* ptr = ref (uniformIndices != null && uniformIndices.Length != 0) ? ref uniformIndices[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (int* ptr3 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, ptr2, pname, ptr3, GL.EntryPoints[193]);
				}
			}
		}

		// Token: 0x06005276 RID: 21110 RVA: 0x000E17D8 File Offset: 0x000DF9D8
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(uint program, int uniformCount, ref uint uniformIndices, ActiveUniformParameter pname, out int @params)
		{
			fixed (uint* ptr = &uniformIndices)
			{
				uint* ptr2 = ptr;
				fixed (int* ptr3 = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, ptr2, pname, ptr3, GL.EntryPoints[193]);
				}
			}
		}

		// Token: 0x06005277 RID: 21111 RVA: 0x000E1804 File Offset: 0x000DFA04
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(uint program, int uniformCount, uint* uniformIndices, ActiveUniformParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, uniformIndices, pname, @params, GL.EntryPoints[193]);
		}

		// Token: 0x06005278 RID: 21112 RVA: 0x000E181C File Offset: 0x000DFA1C
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(int program, int maxCount, out int count, [Out] int[] shaders)
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, ptr2, ptr3, GL.EntryPoints[194]);
				}
			}
		}

		// Token: 0x06005279 RID: 21113 RVA: 0x000E1858 File Offset: 0x000DFA58
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(int program, int maxCount, out int count, out int shaders)
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &shaders)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, ptr2, ptr3, GL.EntryPoints[194]);
				}
			}
		}

		// Token: 0x0600527A RID: 21114 RVA: 0x000E1880 File Offset: 0x000DFA80
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(int program, int maxCount, [Out] int* count, [Out] int* shaders)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, count, shaders, GL.EntryPoints[194]);
		}

		// Token: 0x0600527B RID: 21115 RVA: 0x000E1898 File Offset: 0x000DFA98
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(uint program, int maxCount, out int count, [Out] uint[] shaders)
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (uint* ptr3 = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, ptr2, ptr3, GL.EntryPoints[194]);
				}
			}
		}

		// Token: 0x0600527C RID: 21116 RVA: 0x000E18D4 File Offset: 0x000DFAD4
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(uint program, int maxCount, out int count, out uint shaders)
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (uint* ptr3 = &shaders)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, ptr2, ptr3, GL.EntryPoints[194]);
				}
			}
		}

		// Token: 0x0600527D RID: 21117 RVA: 0x000E18FC File Offset: 0x000DFAFC
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(uint program, int maxCount, [Out] int* count, [Out] uint* shaders)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, count, shaders, GL.EntryPoints[194]);
		}

		// Token: 0x0600527E RID: 21118 RVA: 0x000E1914 File Offset: 0x000DFB14
		[CLSCompliant(false)]
		public static int GetAttribLocation(int program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[195]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x0600527F RID: 21119 RVA: 0x000E1940 File Offset: 0x000DFB40
		[CLSCompliant(false)]
		public static int GetAttribLocation(uint program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[195]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06005280 RID: 21120 RVA: 0x000E196C File Offset: 0x000DFB6C
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetIndexedPName target, int index, [Out] bool[] data)
		{
			fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, ptr, GL.EntryPoints[196]);
			}
		}

		// Token: 0x06005281 RID: 21121 RVA: 0x000E19A4 File Offset: 0x000DFBA4
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetIndexedPName target, int index, out bool data)
		{
			fixed (bool* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, ptr, GL.EntryPoints[196]);
			}
		}

		// Token: 0x06005282 RID: 21122 RVA: 0x000E19C8 File Offset: 0x000DFBC8
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetIndexedPName target, int index, [Out] bool* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, data, GL.EntryPoints[196]);
		}

		// Token: 0x06005283 RID: 21123 RVA: 0x000E19E0 File Offset: 0x000DFBE0
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetIndexedPName target, uint index, [Out] bool[] data)
		{
			fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, ptr, GL.EntryPoints[196]);
			}
		}

		// Token: 0x06005284 RID: 21124 RVA: 0x000E1A18 File Offset: 0x000DFC18
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetIndexedPName target, uint index, out bool data)
		{
			fixed (bool* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, ptr, GL.EntryPoints[196]);
			}
		}

		// Token: 0x06005285 RID: 21125 RVA: 0x000E1A3C File Offset: 0x000DFC3C
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetIndexedPName target, uint index, [Out] bool* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, data, GL.EntryPoints[196]);
		}

		// Token: 0x06005286 RID: 21126 RVA: 0x000E1A54 File Offset: 0x000DFC54
		[CLSCompliant(false)]
		public static bool GetBoolean(GetPName pname)
		{
			bool result;
			calli(System.Void(System.Int32,System.Boolean*), pname, ref result, GL.EntryPoints[197]);
			return result;
		}

		// Token: 0x06005287 RID: 21127 RVA: 0x000E1A78 File Offset: 0x000DFC78
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetPName pname, [Out] bool[] data)
		{
			fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Boolean*), pname, ptr, GL.EntryPoints[197]);
			}
		}

		// Token: 0x06005288 RID: 21128 RVA: 0x000E1AAC File Offset: 0x000DFCAC
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetPName pname, out bool data)
		{
			fixed (bool* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Boolean*), pname, ptr, GL.EntryPoints[197]);
			}
		}

		// Token: 0x06005289 RID: 21129 RVA: 0x000E1AD0 File Offset: 0x000DFCD0
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetPName pname, [Out] bool* data)
		{
			calli(System.Void(System.Int32,System.Boolean*), pname, data, GL.EntryPoints[197]);
		}

		// Token: 0x0600528A RID: 21130 RVA: 0x000E1AE4 File Offset: 0x000DFCE4
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] long[] @params)
		{
			fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int64*), target, pname, ptr, GL.EntryPoints[198]);
			}
		}

		// Token: 0x0600528B RID: 21131 RVA: 0x000E1B1C File Offset: 0x000DFD1C
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, out long @params)
		{
			fixed (long* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int64*), target, pname, ptr, GL.EntryPoints[198]);
			}
		}

		// Token: 0x0600528C RID: 21132 RVA: 0x000E1B40 File Offset: 0x000DFD40
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] long* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int64*), target, pname, @params, GL.EntryPoints[198]);
		}

		// Token: 0x0600528D RID: 21133 RVA: 0x000E1B58 File Offset: 0x000DFD58
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[199]);
			}
		}

		// Token: 0x0600528E RID: 21134 RVA: 0x000E1B90 File Offset: 0x000DFD90
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[199]);
			}
		}

		// Token: 0x0600528F RID: 21135 RVA: 0x000E1BB4 File Offset: 0x000DFDB4
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[199]);
		}

		// Token: 0x06005290 RID: 21136 RVA: 0x000E1BCC File Offset: 0x000DFDCC
		public static void GetBufferPointer(BufferTarget target, BufferPointer pname, [Out] IntPtr @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, @params, GL.EntryPoints[200]);
		}

		// Token: 0x06005291 RID: 21137 RVA: 0x000E1BE4 File Offset: 0x000DFDE4
		[CLSCompliant(false)]
		public unsafe static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In] [Out] T2[] @params) where T2 : struct
		{
			fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[200]);
			}
		}

		// Token: 0x06005292 RID: 21138 RVA: 0x000E1C1C File Offset: 0x000DFE1C
		[CLSCompliant(false)]
		public unsafe static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In] [Out] T2[,] @params) where T2 : struct
		{
			fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[200]);
			}
		}

		// Token: 0x06005293 RID: 21139 RVA: 0x000E1C58 File Offset: 0x000DFE58
		[CLSCompliant(false)]
		public unsafe static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In] [Out] T2[,,] @params) where T2 : struct
		{
			fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[200]);
			}
		}

		// Token: 0x06005294 RID: 21140 RVA: 0x000E1C94 File Offset: 0x000DFE94
		public unsafe static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In] [Out] ref T2 @params) where T2 : struct
		{
			fixed (T2* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[200]);
			}
		}

		// Token: 0x06005295 RID: 21141 RVA: 0x000E1CB8 File Offset: 0x000DFEB8
		public static void GetBufferSubData(BufferTarget target, IntPtr offset, IntPtr size, [Out] IntPtr data)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, data, GL.EntryPoints[201]);
		}

		// Token: 0x06005296 RID: 21142 RVA: 0x000E1CD0 File Offset: 0x000DFED0
		[CLSCompliant(false)]
		public unsafe static void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] T3[] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[201]);
			}
		}

		// Token: 0x06005297 RID: 21143 RVA: 0x000E1D08 File Offset: 0x000DFF08
		[CLSCompliant(false)]
		public unsafe static void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] T3[,] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[201]);
			}
		}

		// Token: 0x06005298 RID: 21144 RVA: 0x000E1D44 File Offset: 0x000DFF44
		[CLSCompliant(false)]
		public unsafe static void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] T3[,,] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[201]);
			}
		}

		// Token: 0x06005299 RID: 21145 RVA: 0x000E1D80 File Offset: 0x000DFF80
		public unsafe static void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] ref T3 data) where T3 : struct
		{
			fixed (T3* ptr = &data)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[201]);
			}
		}

		// Token: 0x0600529A RID: 21146 RVA: 0x000E1DA4 File Offset: 0x000DFFA4
		public static void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, [Out] IntPtr table)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, table, GL.EntryPoints[202]);
		}

		// Token: 0x0600529B RID: 21147 RVA: 0x000E1DBC File Offset: 0x000DFFBC
		[CLSCompliant(false)]
		public unsafe static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[] table) where T3 : struct
		{
			fixed (T3* ptr = ref (table != null && table.Length != 0) ? ref table[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[202]);
			}
		}

		// Token: 0x0600529C RID: 21148 RVA: 0x000E1DF4 File Offset: 0x000DFFF4
		[CLSCompliant(false)]
		public unsafe static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[,] table) where T3 : struct
		{
			fixed (T3* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[202]);
			}
		}

		// Token: 0x0600529D RID: 21149 RVA: 0x000E1E30 File Offset: 0x000E0030
		[CLSCompliant(false)]
		public unsafe static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[,,] table) where T3 : struct
		{
			fixed (T3* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[202]);
			}
		}

		// Token: 0x0600529E RID: 21150 RVA: 0x000E1E6C File Offset: 0x000E006C
		public unsafe static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In] [Out] ref T3 table) where T3 : struct
		{
			fixed (T3* ptr = &table)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[202]);
			}
		}

		// Token: 0x0600529F RID: 21151 RVA: 0x000E1E90 File Offset: 0x000E0090
		[CLSCompliant(false)]
		public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[203]);
			}
		}

		// Token: 0x060052A0 RID: 21152 RVA: 0x000E1EC8 File Offset: 0x000E00C8
		[CLSCompliant(false)]
		public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[203]);
			}
		}

		// Token: 0x060052A1 RID: 21153 RVA: 0x000E1EEC File Offset: 0x000E00EC
		[CLSCompliant(false)]
		public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[203]);
		}

		// Token: 0x060052A2 RID: 21154 RVA: 0x000E1F04 File Offset: 0x000E0104
		[CLSCompliant(false)]
		public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[204]);
			}
		}

		// Token: 0x060052A3 RID: 21155 RVA: 0x000E1F3C File Offset: 0x000E013C
		[CLSCompliant(false)]
		public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[204]);
			}
		}

		// Token: 0x060052A4 RID: 21156 RVA: 0x000E1F60 File Offset: 0x000E0160
		[CLSCompliant(false)]
		public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[204]);
		}

		// Token: 0x060052A5 RID: 21157 RVA: 0x000E1F78 File Offset: 0x000E0178
		public static void GetCompressedTexImage(TextureTarget target, int level, [Out] IntPtr img)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, level, img, GL.EntryPoints[205]);
		}

		// Token: 0x060052A6 RID: 21158 RVA: 0x000E1F90 File Offset: 0x000E0190
		[CLSCompliant(false)]
		public unsafe static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In] [Out] T2[] img) where T2 : struct
		{
			fixed (T2* ptr = ref (img != null && img.Length != 0) ? ref img[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, level, ptr, GL.EntryPoints[205]);
			}
		}

		// Token: 0x060052A7 RID: 21159 RVA: 0x000E1FC8 File Offset: 0x000E01C8
		[CLSCompliant(false)]
		public unsafe static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In] [Out] T2[,] img) where T2 : struct
		{
			fixed (T2* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, level, ptr, GL.EntryPoints[205]);
			}
		}

		// Token: 0x060052A8 RID: 21160 RVA: 0x000E2004 File Offset: 0x000E0204
		[CLSCompliant(false)]
		public unsafe static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In] [Out] T2[,,] img) where T2 : struct
		{
			fixed (T2* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, level, ptr, GL.EntryPoints[205]);
			}
		}

		// Token: 0x060052A9 RID: 21161 RVA: 0x000E2040 File Offset: 0x000E0240
		public unsafe static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In] [Out] ref T2 img) where T2 : struct
		{
			fixed (T2* ptr = &img)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, level, ptr, GL.EntryPoints[205]);
			}
		}

		// Token: 0x060052AA RID: 21162 RVA: 0x000E2064 File Offset: 0x000E0264
		public static void GetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, [Out] IntPtr image)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, image, GL.EntryPoints[206]);
		}

		// Token: 0x060052AB RID: 21163 RVA: 0x000E207C File Offset: 0x000E027C
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, [In] [Out] T3[] image) where T3 : struct
		{
			fixed (T3* ptr = ref (image != null && image.Length != 0) ? ref image[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[206]);
			}
		}

		// Token: 0x060052AC RID: 21164 RVA: 0x000E20B4 File Offset: 0x000E02B4
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, [In] [Out] T3[,] image) where T3 : struct
		{
			fixed (T3* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[206]);
			}
		}

		// Token: 0x060052AD RID: 21165 RVA: 0x000E20F0 File Offset: 0x000E02F0
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, [In] [Out] T3[,,] image) where T3 : struct
		{
			fixed (T3* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[206]);
			}
		}

		// Token: 0x060052AE RID: 21166 RVA: 0x000E212C File Offset: 0x000E032C
		public unsafe static void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, [In] [Out] ref T3 image) where T3 : struct
		{
			fixed (T3* ptr = &image)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[206]);
			}
		}

		// Token: 0x060052AF RID: 21167 RVA: 0x000E2150 File Offset: 0x000E0350
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[207]);
			}
		}

		// Token: 0x060052B0 RID: 21168 RVA: 0x000E2188 File Offset: 0x000E0388
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[207]);
			}
		}

		// Token: 0x060052B1 RID: 21169 RVA: 0x000E21AC File Offset: 0x000E03AC
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[207]);
		}

		// Token: 0x060052B2 RID: 21170 RVA: 0x000E21C4 File Offset: 0x000E03C4
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[208]);
			}
		}

		// Token: 0x060052B3 RID: 21171 RVA: 0x000E21FC File Offset: 0x000E03FC
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[208]);
			}
		}

		// Token: 0x060052B4 RID: 21172 RVA: 0x000E2220 File Offset: 0x000E0420
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[208]);
		}

		// Token: 0x060052B5 RID: 21173 RVA: 0x000E2238 File Offset: 0x000E0438
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] DebugSource[] sources, [Out] DebugType[] types, [Out] int[] ids, [Out] DebugSeverity[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
		{
			fixed (DebugSource* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
			{
				DebugSource* ptr2 = ptr;
				fixed (DebugType* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
				{
					DebugType* ptr4 = ptr3;
					fixed (int* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
					{
						int* ptr6 = ptr5;
						fixed (DebugSeverity* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
						{
							DebugSeverity* ptr8 = ptr7;
							fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
							{
								int* ptr10 = ptr9;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[209]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}
		}

		// Token: 0x060052B6 RID: 21174 RVA: 0x000E22F0 File Offset: 0x000E04F0
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(int count, int bufSize, out DebugSource sources, out DebugType types, out int ids, out DebugSeverity severities, out int lengths, [Out] StringBuilder messageLog)
		{
			fixed (DebugSource* ptr = &sources)
			{
				DebugSource* ptr2 = ptr;
				fixed (DebugType* ptr3 = &types)
				{
					DebugType* ptr4 = ptr3;
					fixed (int* ptr5 = &ids)
					{
						int* ptr6 = ptr5;
						fixed (DebugSeverity* ptr7 = &severities)
						{
							DebugSeverity* ptr8 = ptr7;
							fixed (int* ptr9 = &lengths)
							{
								int* ptr10 = ptr9;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[209]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}
		}

		// Token: 0x060052B7 RID: 21175 RVA: 0x000E2348 File Offset: 0x000E0548
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] DebugSource* sources, [Out] DebugType* types, [Out] int* ids, [Out] DebugSeverity* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[209]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
			Marshal.FreeHGlobal(intPtr);
			return result;
		}

		// Token: 0x060052B8 RID: 21176 RVA: 0x000E238C File Offset: 0x000E058C
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] DebugSource[] sources, [Out] DebugType[] types, [Out] uint[] ids, [Out] DebugSeverity[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
		{
			fixed (DebugSource* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
			{
				DebugSource* ptr2 = ptr;
				fixed (DebugType* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
				{
					DebugType* ptr4 = ptr3;
					fixed (uint* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
					{
						uint* ptr6 = ptr5;
						fixed (DebugSeverity* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
						{
							DebugSeverity* ptr8 = ptr7;
							fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
							{
								int* ptr10 = ptr9;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[209]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}
		}

		// Token: 0x060052B9 RID: 21177 RVA: 0x000E2444 File Offset: 0x000E0644
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(uint count, int bufSize, out DebugSource sources, out DebugType types, out uint ids, out DebugSeverity severities, out int lengths, [Out] StringBuilder messageLog)
		{
			fixed (DebugSource* ptr = &sources)
			{
				DebugSource* ptr2 = ptr;
				fixed (DebugType* ptr3 = &types)
				{
					DebugType* ptr4 = ptr3;
					fixed (uint* ptr5 = &ids)
					{
						uint* ptr6 = ptr5;
						fixed (DebugSeverity* ptr7 = &severities)
						{
							DebugSeverity* ptr8 = ptr7;
							fixed (int* ptr9 = &lengths)
							{
								int* ptr10 = ptr9;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[209]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}
		}

		// Token: 0x060052BA RID: 21178 RVA: 0x000E249C File Offset: 0x000E069C
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] DebugSource* sources, [Out] DebugType* types, [Out] uint* ids, [Out] DebugSeverity* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[209]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
			Marshal.FreeHGlobal(intPtr);
			return result;
		}

		// Token: 0x060052BB RID: 21179 RVA: 0x000E24E0 File Offset: 0x000E06E0
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetIndexedPName target, int index, [Out] double[] data)
		{
			fixed (double* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[212]);
			}
		}

		// Token: 0x060052BC RID: 21180 RVA: 0x000E2518 File Offset: 0x000E0718
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetIndexedPName target, int index, out double data)
		{
			fixed (double* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[212]);
			}
		}

		// Token: 0x060052BD RID: 21181 RVA: 0x000E253C File Offset: 0x000E073C
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetIndexedPName target, int index, [Out] double* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, data, GL.EntryPoints[212]);
		}

		// Token: 0x060052BE RID: 21182 RVA: 0x000E2554 File Offset: 0x000E0754
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetIndexedPName target, uint index, [Out] double[] data)
		{
			fixed (double* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[212]);
			}
		}

		// Token: 0x060052BF RID: 21183 RVA: 0x000E258C File Offset: 0x000E078C
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetIndexedPName target, uint index, out double data)
		{
			fixed (double* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[212]);
			}
		}

		// Token: 0x060052C0 RID: 21184 RVA: 0x000E25B0 File Offset: 0x000E07B0
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetIndexedPName target, uint index, [Out] double* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, data, GL.EntryPoints[212]);
		}

		// Token: 0x060052C1 RID: 21185 RVA: 0x000E25C8 File Offset: 0x000E07C8
		[CLSCompliant(false)]
		public static double GetDouble(GetPName pname)
		{
			double result;
			calli(System.Void(System.Int32,System.Double*), pname, ref result, GL.EntryPoints[213]);
			return result;
		}

		// Token: 0x060052C2 RID: 21186 RVA: 0x000E25EC File Offset: 0x000E07EC
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetPName pname, [Out] double[] data)
		{
			fixed (double* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Double*), pname, ptr, GL.EntryPoints[213]);
			}
		}

		// Token: 0x060052C3 RID: 21187 RVA: 0x000E2620 File Offset: 0x000E0820
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetPName pname, out double data)
		{
			fixed (double* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Double*), pname, ptr, GL.EntryPoints[213]);
			}
		}

		// Token: 0x060052C4 RID: 21188 RVA: 0x000E2644 File Offset: 0x000E0844
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetPName pname, [Out] double* data)
		{
			calli(System.Void(System.Int32,System.Double*), pname, data, GL.EntryPoints[213]);
		}

		// Token: 0x060052C5 RID: 21189 RVA: 0x000E2658 File Offset: 0x000E0858
		public static ErrorCode GetError()
		{
			return calli(System.Int32(), GL.EntryPoints[214]);
		}

		// Token: 0x060052C6 RID: 21190 RVA: 0x000E266C File Offset: 0x000E086C
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetIndexedPName target, int index, [Out] float[] data)
		{
			fixed (float* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[215]);
			}
		}

		// Token: 0x060052C7 RID: 21191 RVA: 0x000E26A4 File Offset: 0x000E08A4
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetIndexedPName target, int index, out float data)
		{
			fixed (float* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[215]);
			}
		}

		// Token: 0x060052C8 RID: 21192 RVA: 0x000E26C8 File Offset: 0x000E08C8
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetIndexedPName target, int index, [Out] float* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, data, GL.EntryPoints[215]);
		}

		// Token: 0x060052C9 RID: 21193 RVA: 0x000E26E0 File Offset: 0x000E08E0
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetIndexedPName target, uint index, [Out] float[] data)
		{
			fixed (float* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[215]);
			}
		}

		// Token: 0x060052CA RID: 21194 RVA: 0x000E2718 File Offset: 0x000E0918
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetIndexedPName target, uint index, out float data)
		{
			fixed (float* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[215]);
			}
		}

		// Token: 0x060052CB RID: 21195 RVA: 0x000E273C File Offset: 0x000E093C
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetIndexedPName target, uint index, [Out] float* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, data, GL.EntryPoints[215]);
		}

		// Token: 0x060052CC RID: 21196 RVA: 0x000E2754 File Offset: 0x000E0954
		[CLSCompliant(false)]
		public static float GetFloat(GetPName pname)
		{
			float result;
			calli(System.Void(System.Int32,System.Single*), pname, ref result, GL.EntryPoints[216]);
			return result;
		}

		// Token: 0x060052CD RID: 21197 RVA: 0x000E2778 File Offset: 0x000E0978
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetPName pname, [Out] float[] data)
		{
			fixed (float* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[216]);
			}
		}

		// Token: 0x060052CE RID: 21198 RVA: 0x000E27AC File Offset: 0x000E09AC
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetPName pname, out float data)
		{
			fixed (float* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[216]);
			}
		}

		// Token: 0x060052CF RID: 21199 RVA: 0x000E27D0 File Offset: 0x000E09D0
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetPName pname, [Out] float* data)
		{
			calli(System.Void(System.Int32,System.Single*), pname, data, GL.EntryPoints[216]);
		}

		// Token: 0x060052D0 RID: 21200 RVA: 0x000E27E4 File Offset: 0x000E09E4
		[CLSCompliant(false)]
		public static int GetFragDataIndex(int program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[217]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060052D1 RID: 21201 RVA: 0x000E2810 File Offset: 0x000E0A10
		[CLSCompliant(false)]
		public static int GetFragDataIndex(uint program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[217]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060052D2 RID: 21202 RVA: 0x000E283C File Offset: 0x000E0A3C
		[CLSCompliant(false)]
		public static int GetFragDataLocation(int program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[218]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060052D3 RID: 21203 RVA: 0x000E2868 File Offset: 0x000E0A68
		[CLSCompliant(false)]
		public static int GetFragDataLocation(uint program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[218]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060052D4 RID: 21204 RVA: 0x000E2894 File Offset: 0x000E0A94
		[CLSCompliant(false)]
		public unsafe static void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, attachment, pname, ptr, GL.EntryPoints[219]);
			}
		}

		// Token: 0x060052D5 RID: 21205 RVA: 0x000E28CC File Offset: 0x000E0ACC
		[CLSCompliant(false)]
		public unsafe static void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, attachment, pname, ptr, GL.EntryPoints[219]);
			}
		}

		// Token: 0x060052D6 RID: 21206 RVA: 0x000E28F0 File Offset: 0x000E0AF0
		[CLSCompliant(false)]
		public unsafe static void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, attachment, pname, @params, GL.EntryPoints[219]);
		}

		// Token: 0x060052D7 RID: 21207 RVA: 0x000E2908 File Offset: 0x000E0B08
		[CLSCompliant(false)]
		public unsafe static void GetFramebufferParameter(FramebufferTarget target, FramebufferDefaultParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[220]);
			}
		}

		// Token: 0x060052D8 RID: 21208 RVA: 0x000E2940 File Offset: 0x000E0B40
		[CLSCompliant(false)]
		public unsafe static void GetFramebufferParameter(FramebufferTarget target, FramebufferDefaultParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[220]);
			}
		}

		// Token: 0x060052D9 RID: 21209 RVA: 0x000E2964 File Offset: 0x000E0B64
		[CLSCompliant(false)]
		public unsafe static void GetFramebufferParameter(FramebufferTarget target, FramebufferDefaultParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[220]);
		}

		// Token: 0x060052DA RID: 21210 RVA: 0x000E297C File Offset: 0x000E0B7C
		public static void GetHistogram(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values)
		{
			calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, values, GL.EntryPoints[222]);
		}

		// Token: 0x060052DB RID: 21211 RVA: 0x000E2994 File Offset: 0x000E0B94
		[CLSCompliant(false)]
		public unsafe static void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[] values) where T4 : struct
		{
			fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[222]);
			}
		}

		// Token: 0x060052DC RID: 21212 RVA: 0x000E29D0 File Offset: 0x000E0BD0
		[CLSCompliant(false)]
		public unsafe static void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[,] values) where T4 : struct
		{
			fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[222]);
			}
		}

		// Token: 0x060052DD RID: 21213 RVA: 0x000E2A10 File Offset: 0x000E0C10
		[CLSCompliant(false)]
		public unsafe static void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[,,] values) where T4 : struct
		{
			fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[222]);
			}
		}

		// Token: 0x060052DE RID: 21214 RVA: 0x000E2A50 File Offset: 0x000E0C50
		public unsafe static void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [In] [Out] ref T4 values) where T4 : struct
		{
			fixed (T4* ptr = &values)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[222]);
			}
		}

		// Token: 0x060052DF RID: 21215 RVA: 0x000E2A78 File Offset: 0x000E0C78
		[CLSCompliant(false)]
		public unsafe static void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[223]);
			}
		}

		// Token: 0x060052E0 RID: 21216 RVA: 0x000E2AB0 File Offset: 0x000E0CB0
		[CLSCompliant(false)]
		public unsafe static void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[223]);
			}
		}

		// Token: 0x060052E1 RID: 21217 RVA: 0x000E2AD4 File Offset: 0x000E0CD4
		[CLSCompliant(false)]
		public unsafe static void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[223]);
		}

		// Token: 0x060052E2 RID: 21218 RVA: 0x000E2AEC File Offset: 0x000E0CEC
		[CLSCompliant(false)]
		public unsafe static void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[224]);
			}
		}

		// Token: 0x060052E3 RID: 21219 RVA: 0x000E2B24 File Offset: 0x000E0D24
		[CLSCompliant(false)]
		public unsafe static void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[224]);
			}
		}

		// Token: 0x060052E4 RID: 21220 RVA: 0x000E2B48 File Offset: 0x000E0D48
		[CLSCompliant(false)]
		public unsafe static void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[224]);
		}

		// Token: 0x060052E5 RID: 21221 RVA: 0x000E2B60 File Offset: 0x000E0D60
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, int index, [Out] long[] data)
		{
			fixed (long* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[226]);
			}
		}

		// Token: 0x060052E6 RID: 21222 RVA: 0x000E2B98 File Offset: 0x000E0D98
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, int index, out long data)
		{
			fixed (long* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[226]);
			}
		}

		// Token: 0x060052E7 RID: 21223 RVA: 0x000E2BBC File Offset: 0x000E0DBC
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, int index, [Out] long* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, data, GL.EntryPoints[226]);
		}

		// Token: 0x060052E8 RID: 21224 RVA: 0x000E2BD4 File Offset: 0x000E0DD4
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, uint index, [Out] long[] data)
		{
			fixed (long* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[226]);
			}
		}

		// Token: 0x060052E9 RID: 21225 RVA: 0x000E2C0C File Offset: 0x000E0E0C
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, uint index, out long data)
		{
			fixed (long* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[226]);
			}
		}

		// Token: 0x060052EA RID: 21226 RVA: 0x000E2C30 File Offset: 0x000E0E30
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, uint index, [Out] long* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, data, GL.EntryPoints[226]);
		}

		// Token: 0x060052EB RID: 21227 RVA: 0x000E2C48 File Offset: 0x000E0E48
		[CLSCompliant(false)]
		public static long GetInteger64(GetPName pname)
		{
			long result;
			calli(System.Void(System.Int32,System.Int64*), pname, ref result, GL.EntryPoints[227]);
			return result;
		}

		// Token: 0x060052EC RID: 21228 RVA: 0x000E2C6C File Offset: 0x000E0E6C
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetPName pname, [Out] long[] data)
		{
			fixed (long* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int64*), pname, ptr, GL.EntryPoints[227]);
			}
		}

		// Token: 0x060052ED RID: 21229 RVA: 0x000E2CA0 File Offset: 0x000E0EA0
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetPName pname, out long data)
		{
			fixed (long* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int64*), pname, ptr, GL.EntryPoints[227]);
			}
		}

		// Token: 0x060052EE RID: 21230 RVA: 0x000E2CC4 File Offset: 0x000E0EC4
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetPName pname, [Out] long* data)
		{
			calli(System.Void(System.Int32,System.Int64*), pname, data, GL.EntryPoints[227]);
		}

		// Token: 0x060052EF RID: 21231 RVA: 0x000E2CD8 File Offset: 0x000E0ED8
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, int index, [Out] int[] data)
		{
			fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[228]);
			}
		}

		// Token: 0x060052F0 RID: 21232 RVA: 0x000E2D10 File Offset: 0x000E0F10
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, int index, out int data)
		{
			fixed (int* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[228]);
			}
		}

		// Token: 0x060052F1 RID: 21233 RVA: 0x000E2D34 File Offset: 0x000E0F34
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, int index, [Out] int* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, data, GL.EntryPoints[228]);
		}

		// Token: 0x060052F2 RID: 21234 RVA: 0x000E2D4C File Offset: 0x000E0F4C
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, uint index, [Out] int[] data)
		{
			fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[228]);
			}
		}

		// Token: 0x060052F3 RID: 21235 RVA: 0x000E2D84 File Offset: 0x000E0F84
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, uint index, out int data)
		{
			fixed (int* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[228]);
			}
		}

		// Token: 0x060052F4 RID: 21236 RVA: 0x000E2DA8 File Offset: 0x000E0FA8
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, uint index, [Out] int* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, data, GL.EntryPoints[228]);
		}

		// Token: 0x060052F5 RID: 21237 RVA: 0x000E2DC0 File Offset: 0x000E0FC0
		[CLSCompliant(false)]
		public static int GetInteger(GetPName pname)
		{
			int result;
			calli(System.Void(System.Int32,System.Int32*), pname, ref result, GL.EntryPoints[229]);
			return result;
		}

		// Token: 0x060052F6 RID: 21238 RVA: 0x000E2DE4 File Offset: 0x000E0FE4
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetPName pname, [Out] int[] data)
		{
			fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[229]);
			}
		}

		// Token: 0x060052F7 RID: 21239 RVA: 0x000E2E18 File Offset: 0x000E1018
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetPName pname, out int data)
		{
			fixed (int* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[229]);
			}
		}

		// Token: 0x060052F8 RID: 21240 RVA: 0x000E2E3C File Offset: 0x000E103C
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetPName pname, [Out] int* data)
		{
			calli(System.Void(System.Int32,System.Int32*), pname, data, GL.EntryPoints[229]);
		}

		// Token: 0x060052F9 RID: 21241 RVA: 0x000E2E50 File Offset: 0x000E1050
		[CLSCompliant(false)]
		public unsafe static void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, [Out] long[] @params)
		{
			fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int64*), target, internalformat, pname, bufSize, ptr, GL.EntryPoints[230]);
			}
		}

		// Token: 0x060052FA RID: 21242 RVA: 0x000E2E8C File Offset: 0x000E108C
		[CLSCompliant(false)]
		public unsafe static void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, out long @params)
		{
			fixed (long* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int64*), target, internalformat, pname, bufSize, ptr, GL.EntryPoints[230]);
			}
		}

		// Token: 0x060052FB RID: 21243 RVA: 0x000E2EB4 File Offset: 0x000E10B4
		[CLSCompliant(false)]
		public unsafe static void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, [Out] long* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int64*), target, internalformat, pname, bufSize, @params, GL.EntryPoints[230]);
		}

		// Token: 0x060052FC RID: 21244 RVA: 0x000E2ECC File Offset: 0x000E10CC
		[CLSCompliant(false)]
		public unsafe static void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), target, internalformat, pname, bufSize, ptr, GL.EntryPoints[231]);
			}
		}

		// Token: 0x060052FD RID: 21245 RVA: 0x000E2F08 File Offset: 0x000E1108
		[CLSCompliant(false)]
		public unsafe static void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), target, internalformat, pname, bufSize, ptr, GL.EntryPoints[231]);
			}
		}

		// Token: 0x060052FE RID: 21246 RVA: 0x000E2F30 File Offset: 0x000E1130
		[CLSCompliant(false)]
		public unsafe static void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), target, internalformat, pname, bufSize, @params, GL.EntryPoints[231]);
		}

		// Token: 0x060052FF RID: 21247 RVA: 0x000E2F48 File Offset: 0x000E1148
		public static void GetMinmax(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values)
		{
			calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, values, GL.EntryPoints[232]);
		}

		// Token: 0x06005300 RID: 21248 RVA: 0x000E2F60 File Offset: 0x000E1160
		[CLSCompliant(false)]
		public unsafe static void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[] values) where T4 : struct
		{
			fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[232]);
			}
		}

		// Token: 0x06005301 RID: 21249 RVA: 0x000E2F9C File Offset: 0x000E119C
		[CLSCompliant(false)]
		public unsafe static void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[,] values) where T4 : struct
		{
			fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[232]);
			}
		}

		// Token: 0x06005302 RID: 21250 RVA: 0x000E2FDC File Offset: 0x000E11DC
		[CLSCompliant(false)]
		public unsafe static void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[,,] values) where T4 : struct
		{
			fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[232]);
			}
		}

		// Token: 0x06005303 RID: 21251 RVA: 0x000E301C File Offset: 0x000E121C
		public unsafe static void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [In] [Out] ref T4 values) where T4 : struct
		{
			fixed (T4* ptr = &values)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[232]);
			}
		}

		// Token: 0x06005304 RID: 21252 RVA: 0x000E3044 File Offset: 0x000E1244
		[CLSCompliant(false)]
		public unsafe static void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[233]);
			}
		}

		// Token: 0x06005305 RID: 21253 RVA: 0x000E307C File Offset: 0x000E127C
		[CLSCompliant(false)]
		public unsafe static void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[233]);
			}
		}

		// Token: 0x06005306 RID: 21254 RVA: 0x000E30A0 File Offset: 0x000E12A0
		[CLSCompliant(false)]
		public unsafe static void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[233]);
		}

		// Token: 0x06005307 RID: 21255 RVA: 0x000E30B8 File Offset: 0x000E12B8
		[CLSCompliant(false)]
		public unsafe static void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[234]);
			}
		}

		// Token: 0x06005308 RID: 21256 RVA: 0x000E30F0 File Offset: 0x000E12F0
		[CLSCompliant(false)]
		public unsafe static void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[234]);
			}
		}

		// Token: 0x06005309 RID: 21257 RVA: 0x000E3114 File Offset: 0x000E1314
		[CLSCompliant(false)]
		public unsafe static void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[234]);
		}

		// Token: 0x0600530A RID: 21258 RVA: 0x000E312C File Offset: 0x000E132C
		[CLSCompliant(false)]
		public unsafe static void GetMultisample(GetMultisamplePName pname, int index, [Out] float[] val)
		{
			fixed (float* ptr = ref (val != null && val.Length != 0) ? ref val[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[235]);
			}
		}

		// Token: 0x0600530B RID: 21259 RVA: 0x000E3164 File Offset: 0x000E1364
		[CLSCompliant(false)]
		public unsafe static void GetMultisample(GetMultisamplePName pname, int index, out float val)
		{
			fixed (float* ptr = &val)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[235]);
			}
		}

		// Token: 0x0600530C RID: 21260 RVA: 0x000E3188 File Offset: 0x000E1388
		[CLSCompliant(false)]
		public unsafe static void GetMultisample(GetMultisamplePName pname, int index, [Out] float* val)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, val, GL.EntryPoints[235]);
		}

		// Token: 0x0600530D RID: 21261 RVA: 0x000E31A0 File Offset: 0x000E13A0
		[CLSCompliant(false)]
		public unsafe static void GetMultisample(GetMultisamplePName pname, uint index, [Out] float[] val)
		{
			fixed (float* ptr = ref (val != null && val.Length != 0) ? ref val[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[235]);
			}
		}

		// Token: 0x0600530E RID: 21262 RVA: 0x000E31D8 File Offset: 0x000E13D8
		[CLSCompliant(false)]
		public unsafe static void GetMultisample(GetMultisamplePName pname, uint index, out float val)
		{
			fixed (float* ptr = &val)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[235]);
			}
		}

		// Token: 0x0600530F RID: 21263 RVA: 0x000E31FC File Offset: 0x000E13FC
		[CLSCompliant(false)]
		public unsafe static void GetMultisample(GetMultisamplePName pname, uint index, [Out] float* val)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, val, GL.EntryPoints[235]);
		}

		// Token: 0x06005310 RID: 21264 RVA: 0x000E3214 File Offset: 0x000E1414
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, int name, int bufSize, [Out] int[] length, [Out] StringBuilder label)
		{
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[256]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06005311 RID: 21265 RVA: 0x000E3268 File Offset: 0x000E1468
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, int name, int bufSize, out int length, [Out] StringBuilder label)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[256]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06005312 RID: 21266 RVA: 0x000E32A8 File Offset: 0x000E14A8
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, int name, int bufSize, [Out] int* length, [Out] StringBuilder label)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, length, intPtr, GL.EntryPoints[256]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005313 RID: 21267 RVA: 0x000E32E8 File Offset: 0x000E14E8
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, uint name, int bufSize, [Out] int[] length, [Out] StringBuilder label)
		{
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[256]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06005314 RID: 21268 RVA: 0x000E333C File Offset: 0x000E153C
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, uint name, int bufSize, out int length, [Out] StringBuilder label)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[256]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06005315 RID: 21269 RVA: 0x000E337C File Offset: 0x000E157C
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, uint name, int bufSize, [Out] int* length, [Out] StringBuilder label)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, length, intPtr, GL.EntryPoints[256]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005316 RID: 21270 RVA: 0x000E33BC File Offset: 0x000E15BC
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label)
		{
			fixed (int* ptr2 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, ptr3, intPtr, GL.EntryPoints[258]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06005317 RID: 21271 RVA: 0x000E340C File Offset: 0x000E160C
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, out int length, [Out] StringBuilder label)
		{
			fixed (int* ptr2 = &length)
			{
				int* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, ptr3, intPtr, GL.EntryPoints[258]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06005318 RID: 21272 RVA: 0x000E344C File Offset: 0x000E164C
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [Out] int* length, [Out] StringBuilder label)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
			calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, length, intPtr, GL.EntryPoints[258]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005319 RID: 21273 RVA: 0x000E3488 File Offset: 0x000E1688
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[258]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x0600531A RID: 21274 RVA: 0x000E34EC File Offset: 0x000E16EC
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = &length)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[258]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x0600531B RID: 21275 RVA: 0x000E3540 File Offset: 0x000E1740
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[258]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600531C RID: 21276 RVA: 0x000E3590 File Offset: 0x000E1790
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[258]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x0600531D RID: 21277 RVA: 0x000E35F8 File Offset: 0x000E17F8
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = &length)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[258]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x0600531E RID: 21278 RVA: 0x000E3650 File Offset: 0x000E1850
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[258]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600531F RID: 21279 RVA: 0x000E36A4 File Offset: 0x000E18A4
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[258]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x06005320 RID: 21280 RVA: 0x000E3710 File Offset: 0x000E1910
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = &length)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[258]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x06005321 RID: 21281 RVA: 0x000E3768 File Offset: 0x000E1968
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[258]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06005322 RID: 21282 RVA: 0x000E37BC File Offset: 0x000E19BC
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = &ptr)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[258]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x06005323 RID: 21283 RVA: 0x000E3810 File Offset: 0x000E1A10
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = &ptr)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = &length)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[258]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x06005324 RID: 21284 RVA: 0x000E3850 File Offset: 0x000E1A50
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = &ptr)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[258]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06005325 RID: 21285 RVA: 0x000E3890 File Offset: 0x000E1A90
		public static void GetPointer(GetPointervPName pname, [Out] IntPtr @params)
		{
			calli(System.Void(System.Int32,System.IntPtr), pname, @params, GL.EntryPoints[260]);
		}

		// Token: 0x06005326 RID: 21286 RVA: 0x000E38A4 File Offset: 0x000E1AA4
		[CLSCompliant(false)]
		public unsafe static void GetPointer<T1>(GetPointervPName pname, [In] [Out] T1[] @params) where T1 : struct
		{
			fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[260]);
			}
		}

		// Token: 0x06005327 RID: 21287 RVA: 0x000E38D8 File Offset: 0x000E1AD8
		[CLSCompliant(false)]
		public unsafe static void GetPointer<T1>(GetPointervPName pname, [In] [Out] T1[,] @params) where T1 : struct
		{
			fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[260]);
			}
		}

		// Token: 0x06005328 RID: 21288 RVA: 0x000E3910 File Offset: 0x000E1B10
		[CLSCompliant(false)]
		public unsafe static void GetPointer<T1>(GetPointervPName pname, [In] [Out] T1[,,] @params) where T1 : struct
		{
			fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[260]);
			}
		}

		// Token: 0x06005329 RID: 21289 RVA: 0x000E394C File Offset: 0x000E1B4C
		public unsafe static void GetPointer<T1>(GetPointervPName pname, [In] [Out] ref T1 @params) where T1 : struct
		{
			fixed (T1* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[260]);
			}
		}

		// Token: 0x0600532A RID: 21290 RVA: 0x000E3970 File Offset: 0x000E1B70
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary(int program, int bufSize, out int length, out BinaryFormat binaryFormat, [Out] IntPtr binary)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr3, binary, GL.EntryPoints[262]);
				}
			}
		}

		// Token: 0x0600532B RID: 21291 RVA: 0x000E399C File Offset: 0x000E1B9C
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, out int length, out BinaryFormat binaryFormat, [In] [Out] T4[] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					BinaryFormat* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[262]);
					}
				}
			}
		}

		// Token: 0x0600532C RID: 21292 RVA: 0x000E39DC File Offset: 0x000E1BDC
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, out int length, out BinaryFormat binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					BinaryFormat* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[262]);
					}
				}
			}
		}

		// Token: 0x0600532D RID: 21293 RVA: 0x000E3A20 File Offset: 0x000E1C20
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, out int length, out BinaryFormat binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					BinaryFormat* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[262]);
					}
				}
			}
		}

		// Token: 0x0600532E RID: 21294 RVA: 0x000E3A68 File Offset: 0x000E1C68
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, out int length, out BinaryFormat binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					BinaryFormat* ptr4 = ptr3;
					fixed (T4* ptr5 = &binary)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[262]);
					}
				}
			}
		}

		// Token: 0x0600532F RID: 21295 RVA: 0x000E3A94 File Offset: 0x000E1C94
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary(int program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [Out] IntPtr binary)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, binary, GL.EntryPoints[262]);
		}

		// Token: 0x06005330 RID: 21296 RVA: 0x000E3AAC File Offset: 0x000E1CAC
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In] [Out] T4[] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[262]);
			}
		}

		// Token: 0x06005331 RID: 21297 RVA: 0x000E3AE8 File Offset: 0x000E1CE8
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[262]);
			}
		}

		// Token: 0x06005332 RID: 21298 RVA: 0x000E3B28 File Offset: 0x000E1D28
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[262]);
			}
		}

		// Token: 0x06005333 RID: 21299 RVA: 0x000E3B68 File Offset: 0x000E1D68
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
		{
			fixed (T4* ptr = &binary)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[262]);
			}
		}

		// Token: 0x06005334 RID: 21300 RVA: 0x000E3B90 File Offset: 0x000E1D90
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary(uint program, int bufSize, out int length, out BinaryFormat binaryFormat, [Out] IntPtr binary)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr3, binary, GL.EntryPoints[262]);
				}
			}
		}

		// Token: 0x06005335 RID: 21301 RVA: 0x000E3BBC File Offset: 0x000E1DBC
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, out int length, out BinaryFormat binaryFormat, [In] [Out] T4[] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					BinaryFormat* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[262]);
					}
				}
			}
		}

		// Token: 0x06005336 RID: 21302 RVA: 0x000E3BFC File Offset: 0x000E1DFC
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, out int length, out BinaryFormat binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					BinaryFormat* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[262]);
					}
				}
			}
		}

		// Token: 0x06005337 RID: 21303 RVA: 0x000E3C40 File Offset: 0x000E1E40
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, out int length, out BinaryFormat binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					BinaryFormat* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[262]);
					}
				}
			}
		}

		// Token: 0x06005338 RID: 21304 RVA: 0x000E3C88 File Offset: 0x000E1E88
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, out int length, out BinaryFormat binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					BinaryFormat* ptr4 = ptr3;
					fixed (T4* ptr5 = &binary)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[262]);
					}
				}
			}
		}

		// Token: 0x06005339 RID: 21305 RVA: 0x000E3CB4 File Offset: 0x000E1EB4
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [Out] IntPtr binary)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, binary, GL.EntryPoints[262]);
		}

		// Token: 0x0600533A RID: 21306 RVA: 0x000E3CCC File Offset: 0x000E1ECC
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In] [Out] T4[] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[262]);
			}
		}

		// Token: 0x0600533B RID: 21307 RVA: 0x000E3D08 File Offset: 0x000E1F08
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[262]);
			}
		}

		// Token: 0x0600533C RID: 21308 RVA: 0x000E3D48 File Offset: 0x000E1F48
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[262]);
			}
		}

		// Token: 0x0600533D RID: 21309 RVA: 0x000E3D88 File Offset: 0x000E1F88
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
		{
			fixed (T4* ptr = &binary)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[262]);
			}
		}

		// Token: 0x0600533E RID: 21310 RVA: 0x000E3DB0 File Offset: 0x000E1FB0
		[CLSCompliant(false)]
		public unsafe static void GetProgramInfoLog(int program, int bufSize, out int length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, bufSize, ptr2, intPtr, GL.EntryPoints[263]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600533F RID: 21311 RVA: 0x000E3DF0 File Offset: 0x000E1FF0
		[CLSCompliant(false)]
		public unsafe static void GetProgramInfoLog(int program, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, bufSize, length, intPtr, GL.EntryPoints[263]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005340 RID: 21312 RVA: 0x000E3E2C File Offset: 0x000E202C
		[CLSCompliant(false)]
		public unsafe static void GetProgramInfoLog(uint program, int bufSize, out int length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, bufSize, ptr2, intPtr, GL.EntryPoints[263]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06005341 RID: 21313 RVA: 0x000E3E6C File Offset: 0x000E206C
		[CLSCompliant(false)]
		public unsafe static void GetProgramInfoLog(uint program, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, bufSize, length, intPtr, GL.EntryPoints[263]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005342 RID: 21314 RVA: 0x000E3EA8 File Offset: 0x000E20A8
		[CLSCompliant(false)]
		public unsafe static void GetProgramInterface(int program, ProgramInterface programInterface, ProgramInterfaceParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, programInterface, pname, ptr, GL.EntryPoints[264]);
			}
		}

		// Token: 0x06005343 RID: 21315 RVA: 0x000E3EE0 File Offset: 0x000E20E0
		[CLSCompliant(false)]
		public unsafe static void GetProgramInterface(int program, ProgramInterface programInterface, ProgramInterfaceParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, programInterface, pname, ptr, GL.EntryPoints[264]);
			}
		}

		// Token: 0x06005344 RID: 21316 RVA: 0x000E3F04 File Offset: 0x000E2104
		[CLSCompliant(false)]
		public unsafe static void GetProgramInterface(int program, ProgramInterface programInterface, ProgramInterfaceParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, programInterface, pname, @params, GL.EntryPoints[264]);
		}

		// Token: 0x06005345 RID: 21317 RVA: 0x000E3F1C File Offset: 0x000E211C
		[CLSCompliant(false)]
		public unsafe static void GetProgramInterface(uint program, ProgramInterface programInterface, ProgramInterfaceParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, programInterface, pname, ptr, GL.EntryPoints[264]);
			}
		}

		// Token: 0x06005346 RID: 21318 RVA: 0x000E3F54 File Offset: 0x000E2154
		[CLSCompliant(false)]
		public unsafe static void GetProgramInterface(uint program, ProgramInterface programInterface, ProgramInterfaceParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, programInterface, pname, ptr, GL.EntryPoints[264]);
			}
		}

		// Token: 0x06005347 RID: 21319 RVA: 0x000E3F78 File Offset: 0x000E2178
		[CLSCompliant(false)]
		public unsafe static void GetProgramInterface(uint program, ProgramInterface programInterface, ProgramInterfaceParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, programInterface, pname, @params, GL.EntryPoints[264]);
		}

		// Token: 0x06005348 RID: 21320 RVA: 0x000E3F90 File Offset: 0x000E2190
		[CLSCompliant(false)]
		public unsafe static void GetProgram(int program, GetProgramParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[265]);
			}
		}

		// Token: 0x06005349 RID: 21321 RVA: 0x000E3FC8 File Offset: 0x000E21C8
		[CLSCompliant(false)]
		public unsafe static void GetProgram(int program, GetProgramParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[265]);
			}
		}

		// Token: 0x0600534A RID: 21322 RVA: 0x000E3FEC File Offset: 0x000E21EC
		[CLSCompliant(false)]
		public unsafe static void GetProgram(int program, GetProgramParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, @params, GL.EntryPoints[265]);
		}

		// Token: 0x0600534B RID: 21323 RVA: 0x000E4004 File Offset: 0x000E2204
		[CLSCompliant(false)]
		public unsafe static void GetProgram(uint program, GetProgramParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[265]);
			}
		}

		// Token: 0x0600534C RID: 21324 RVA: 0x000E403C File Offset: 0x000E223C
		[CLSCompliant(false)]
		public unsafe static void GetProgram(uint program, GetProgramParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[265]);
			}
		}

		// Token: 0x0600534D RID: 21325 RVA: 0x000E4060 File Offset: 0x000E2260
		[CLSCompliant(false)]
		public unsafe static void GetProgram(uint program, GetProgramParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, @params, GL.EntryPoints[265]);
		}

		// Token: 0x0600534E RID: 21326 RVA: 0x000E4078 File Offset: 0x000E2278
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipelineInfoLog(int pipeline, int bufSize, out int length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, ptr2, intPtr, GL.EntryPoints[266]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600534F RID: 21327 RVA: 0x000E40B8 File Offset: 0x000E22B8
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipelineInfoLog(int pipeline, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, length, intPtr, GL.EntryPoints[266]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005350 RID: 21328 RVA: 0x000E40F4 File Offset: 0x000E22F4
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, out int length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, ptr2, intPtr, GL.EntryPoints[266]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06005351 RID: 21329 RVA: 0x000E4134 File Offset: 0x000E2334
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, length, intPtr, GL.EntryPoints[266]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005352 RID: 21330 RVA: 0x000E4170 File Offset: 0x000E2370
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipeline(int pipeline, ProgramPipelineParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, ptr, GL.EntryPoints[267]);
			}
		}

		// Token: 0x06005353 RID: 21331 RVA: 0x000E41A8 File Offset: 0x000E23A8
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipeline(int pipeline, ProgramPipelineParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, ptr, GL.EntryPoints[267]);
			}
		}

		// Token: 0x06005354 RID: 21332 RVA: 0x000E41CC File Offset: 0x000E23CC
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipeline(int pipeline, ProgramPipelineParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, @params, GL.EntryPoints[267]);
		}

		// Token: 0x06005355 RID: 21333 RVA: 0x000E41E4 File Offset: 0x000E23E4
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipeline(uint pipeline, ProgramPipelineParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, ptr, GL.EntryPoints[267]);
			}
		}

		// Token: 0x06005356 RID: 21334 RVA: 0x000E421C File Offset: 0x000E241C
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipeline(uint pipeline, ProgramPipelineParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, ptr, GL.EntryPoints[267]);
			}
		}

		// Token: 0x06005357 RID: 21335 RVA: 0x000E4240 File Offset: 0x000E2440
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipeline(uint pipeline, ProgramPipelineParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, @params, GL.EntryPoints[267]);
		}

		// Token: 0x06005358 RID: 21336 RVA: 0x000E4258 File Offset: 0x000E2458
		[CLSCompliant(false)]
		public static int GetProgramResourceIndex(int program, ProgramInterface programInterface, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, programInterface, intPtr, GL.EntryPoints[268]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06005359 RID: 21337 RVA: 0x000E4288 File Offset: 0x000E2488
		[CLSCompliant(false)]
		public static int GetProgramResourceIndex(uint program, ProgramInterface programInterface, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, programInterface, intPtr, GL.EntryPoints[268]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x0600535A RID: 21338 RVA: 0x000E42B8 File Offset: 0x000E24B8
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetProgramResource(int program, ProgramInterface programInterface, int index, int propCount, ProgramProperty[] props, int bufSize, [Out] int[] length, [Out] int[] @params)
		{
			fixed (ProgramProperty* ptr = ref (props != null && props.Length != 0) ? ref props[0] : ref *null)
			{
				ProgramProperty* ptr2 = ptr;
				fixed (int* ptr3 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr4 = ptr3;
					fixed (int* ptr5 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32*), program, programInterface, index, propCount, ptr2, bufSize, ptr4, ptr5, GL.EntryPoints[269]);
					}
				}
			}
		}

		// Token: 0x0600535B RID: 21339 RVA: 0x000E4328 File Offset: 0x000E2528
		[CLSCompliant(false)]
		public unsafe static void GetProgramResource(int program, ProgramInterface programInterface, int index, int propCount, ProgramProperty[] props, int bufSize, out int length, [Out] int[] @params)
		{
			fixed (ProgramProperty* ptr = ref (props != null && props.Length != 0) ? ref props[0] : ref *null)
			{
				ProgramProperty* ptr2 = ptr;
				fixed (int* ptr3 = &length)
				{
					int* ptr4 = ptr3;
					fixed (int* ptr5 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32*), program, programInterface, index, propCount, ptr2, bufSize, ptr4, ptr5, GL.EntryPoints[269]);
					}
				}
			}
		}

		// Token: 0x0600535C RID: 21340 RVA: 0x000E4384 File Offset: 0x000E2584
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetProgramResource(int program, ProgramInterface programInterface, int index, int propCount, ref ProgramProperty props, int bufSize, out int length, out int @params)
		{
			fixed (ProgramProperty* ptr = &props)
			{
				ProgramProperty* ptr2 = ptr;
				fixed (int* ptr3 = &length)
				{
					int* ptr4 = ptr3;
					fixed (int* ptr5 = &@params)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32*), program, programInterface, index, propCount, ptr2, bufSize, ptr4, ptr5, GL.EntryPoints[269]);
					}
				}
			}
		}

		// Token: 0x0600535D RID: 21341 RVA: 0x000E43B8 File Offset: 0x000E25B8
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetProgramResource(int program, ProgramInterface programInterface, int index, int propCount, ProgramProperty* props, int bufSize, [Out] int* length, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32*), program, programInterface, index, propCount, props, bufSize, length, @params, GL.EntryPoints[269]);
		}

		// Token: 0x0600535E RID: 21342 RVA: 0x000E43E4 File Offset: 0x000E25E4
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetProgramResource(uint program, ProgramInterface programInterface, uint index, int propCount, ProgramProperty[] props, int bufSize, [Out] int[] length, [Out] int[] @params)
		{
			fixed (ProgramProperty* ptr = ref (props != null && props.Length != 0) ? ref props[0] : ref *null)
			{
				ProgramProperty* ptr2 = ptr;
				fixed (int* ptr3 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr4 = ptr3;
					fixed (int* ptr5 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32*), program, programInterface, index, propCount, ptr2, bufSize, ptr4, ptr5, GL.EntryPoints[269]);
					}
				}
			}
		}

		// Token: 0x0600535F RID: 21343 RVA: 0x000E4454 File Offset: 0x000E2654
		[CLSCompliant(false)]
		public unsafe static void GetProgramResource(uint program, ProgramInterface programInterface, uint index, int propCount, ProgramProperty[] props, int bufSize, out int length, [Out] int[] @params)
		{
			fixed (ProgramProperty* ptr = ref (props != null && props.Length != 0) ? ref props[0] : ref *null)
			{
				ProgramProperty* ptr2 = ptr;
				fixed (int* ptr3 = &length)
				{
					int* ptr4 = ptr3;
					fixed (int* ptr5 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32*), program, programInterface, index, propCount, ptr2, bufSize, ptr4, ptr5, GL.EntryPoints[269]);
					}
				}
			}
		}

		// Token: 0x06005360 RID: 21344 RVA: 0x000E44B0 File Offset: 0x000E26B0
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetProgramResource(uint program, ProgramInterface programInterface, uint index, int propCount, ref ProgramProperty props, int bufSize, out int length, out int @params)
		{
			fixed (ProgramProperty* ptr = &props)
			{
				ProgramProperty* ptr2 = ptr;
				fixed (int* ptr3 = &length)
				{
					int* ptr4 = ptr3;
					fixed (int* ptr5 = &@params)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32*), program, programInterface, index, propCount, ptr2, bufSize, ptr4, ptr5, GL.EntryPoints[269]);
					}
				}
			}
		}

		// Token: 0x06005361 RID: 21345 RVA: 0x000E44E4 File Offset: 0x000E26E4
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgramResource(uint program, ProgramInterface programInterface, uint index, int propCount, ProgramProperty* props, int bufSize, [Out] int* length, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32*), program, programInterface, index, propCount, props, bufSize, length, @params, GL.EntryPoints[269]);
		}

		// Token: 0x06005362 RID: 21346 RVA: 0x000E4510 File Offset: 0x000E2710
		[CLSCompliant(false)]
		public static int GetProgramResourceLocation(int program, ProgramInterface programInterface, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, programInterface, intPtr, GL.EntryPoints[270]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06005363 RID: 21347 RVA: 0x000E4540 File Offset: 0x000E2740
		[CLSCompliant(false)]
		public static int GetProgramResourceLocation(uint program, ProgramInterface programInterface, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, programInterface, intPtr, GL.EntryPoints[270]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06005364 RID: 21348 RVA: 0x000E4570 File Offset: 0x000E2770
		[CLSCompliant(false)]
		public static int GetProgramResourceLocationIndex(int program, ProgramInterface programInterface, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, programInterface, intPtr, GL.EntryPoints[271]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06005365 RID: 21349 RVA: 0x000E45A0 File Offset: 0x000E27A0
		[CLSCompliant(false)]
		public static int GetProgramResourceLocationIndex(uint program, ProgramInterface programInterface, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, programInterface, intPtr, GL.EntryPoints[271]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06005366 RID: 21350 RVA: 0x000E45D0 File Offset: 0x000E27D0
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetProgramResourceName(int program, ProgramInterface programInterface, int index, int bufSize, [Out] int[] length, [Out] StringBuilder name)
		{
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, programInterface, index, bufSize, ptr2, intPtr, GL.EntryPoints[272]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06005367 RID: 21351 RVA: 0x000E4628 File Offset: 0x000E2828
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetProgramResourceName(int program, ProgramInterface programInterface, int index, int bufSize, out int length, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, programInterface, index, bufSize, ptr2, intPtr, GL.EntryPoints[272]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06005368 RID: 21352 RVA: 0x000E466C File Offset: 0x000E286C
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgramResourceName(int program, ProgramInterface programInterface, int index, int bufSize, [Out] int* length, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, programInterface, index, bufSize, length, intPtr, GL.EntryPoints[272]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06005369 RID: 21353 RVA: 0x000E46AC File Offset: 0x000E28AC
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetProgramResourceName(uint program, ProgramInterface programInterface, uint index, int bufSize, [Out] int[] length, [Out] StringBuilder name)
		{
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, programInterface, index, bufSize, ptr2, intPtr, GL.EntryPoints[272]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600536A RID: 21354 RVA: 0x000E4704 File Offset: 0x000E2904
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgramResourceName(uint program, ProgramInterface programInterface, uint index, int bufSize, out int length, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, programInterface, index, bufSize, ptr2, intPtr, GL.EntryPoints[272]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600536B RID: 21355 RVA: 0x000E4748 File Offset: 0x000E2948
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetProgramResourceName(uint program, ProgramInterface programInterface, uint index, int bufSize, [Out] int* length, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, programInterface, index, bufSize, length, intPtr, GL.EntryPoints[272]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x0600536C RID: 21356 RVA: 0x000E4788 File Offset: 0x000E2988
		[CLSCompliant(false)]
		public unsafe static void GetProgramStage(int program, ShaderType shadertype, ProgramStageParameter pname, out int values)
		{
			fixed (int* ptr = &values)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, shadertype, pname, ptr, GL.EntryPoints[273]);
			}
		}

		// Token: 0x0600536D RID: 21357 RVA: 0x000E47AC File Offset: 0x000E29AC
		[CLSCompliant(false)]
		public unsafe static void GetProgramStage(int program, ShaderType shadertype, ProgramStageParameter pname, [Out] int* values)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, shadertype, pname, values, GL.EntryPoints[273]);
		}

		// Token: 0x0600536E RID: 21358 RVA: 0x000E47C4 File Offset: 0x000E29C4
		[CLSCompliant(false)]
		public unsafe static void GetProgramStage(uint program, ShaderType shadertype, ProgramStageParameter pname, out int values)
		{
			fixed (int* ptr = &values)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, shadertype, pname, ptr, GL.EntryPoints[273]);
			}
		}

		// Token: 0x0600536F RID: 21359 RVA: 0x000E47E8 File Offset: 0x000E29E8
		[CLSCompliant(false)]
		public unsafe static void GetProgramStage(uint program, ShaderType shadertype, ProgramStageParameter pname, [Out] int* values)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, shadertype, pname, values, GL.EntryPoints[273]);
		}

		// Token: 0x06005370 RID: 21360 RVA: 0x000E4800 File Offset: 0x000E2A00
		[CLSCompliant(false)]
		public unsafe static void GetQueryIndexed(QueryTarget target, int index, GetQueryParam pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, ptr, GL.EntryPoints[274]);
			}
		}

		// Token: 0x06005371 RID: 21361 RVA: 0x000E4838 File Offset: 0x000E2A38
		[CLSCompliant(false)]
		public unsafe static void GetQueryIndexed(QueryTarget target, int index, GetQueryParam pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, ptr, GL.EntryPoints[274]);
			}
		}

		// Token: 0x06005372 RID: 21362 RVA: 0x000E485C File Offset: 0x000E2A5C
		[CLSCompliant(false)]
		public unsafe static void GetQueryIndexed(QueryTarget target, int index, GetQueryParam pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, @params, GL.EntryPoints[274]);
		}

		// Token: 0x06005373 RID: 21363 RVA: 0x000E4874 File Offset: 0x000E2A74
		[CLSCompliant(false)]
		public unsafe static void GetQueryIndexed(QueryTarget target, uint index, GetQueryParam pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, ptr, GL.EntryPoints[274]);
			}
		}

		// Token: 0x06005374 RID: 21364 RVA: 0x000E48AC File Offset: 0x000E2AAC
		[CLSCompliant(false)]
		public unsafe static void GetQueryIndexed(QueryTarget target, uint index, GetQueryParam pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, ptr, GL.EntryPoints[274]);
			}
		}

		// Token: 0x06005375 RID: 21365 RVA: 0x000E48D0 File Offset: 0x000E2AD0
		[CLSCompliant(false)]
		public unsafe static void GetQueryIndexed(QueryTarget target, uint index, GetQueryParam pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, @params, GL.EntryPoints[274]);
		}

		// Token: 0x06005376 RID: 21366 RVA: 0x000E48E8 File Offset: 0x000E2AE8
		[CLSCompliant(false)]
		public unsafe static void GetQuery(QueryTarget target, GetQueryParam pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[275]);
			}
		}

		// Token: 0x06005377 RID: 21367 RVA: 0x000E4920 File Offset: 0x000E2B20
		[CLSCompliant(false)]
		public unsafe static void GetQuery(QueryTarget target, GetQueryParam pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[275]);
			}
		}

		// Token: 0x06005378 RID: 21368 RVA: 0x000E4944 File Offset: 0x000E2B44
		[CLSCompliant(false)]
		public unsafe static void GetQuery(QueryTarget target, GetQueryParam pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[275]);
		}

		// Token: 0x06005379 RID: 21369 RVA: 0x000E495C File Offset: 0x000E2B5C
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, [Out] long[] @params)
		{
			fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[276]);
			}
		}

		// Token: 0x0600537A RID: 21370 RVA: 0x000E4994 File Offset: 0x000E2B94
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, out long @params)
		{
			fixed (long* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[276]);
			}
		}

		// Token: 0x0600537B RID: 21371 RVA: 0x000E49B8 File Offset: 0x000E2BB8
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, [Out] long* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, @params, GL.EntryPoints[276]);
		}

		// Token: 0x0600537C RID: 21372 RVA: 0x000E49D0 File Offset: 0x000E2BD0
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] long[] @params)
		{
			fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[276]);
			}
		}

		// Token: 0x0600537D RID: 21373 RVA: 0x000E4A08 File Offset: 0x000E2C08
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, out long @params)
		{
			fixed (long* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[276]);
			}
		}

		// Token: 0x0600537E RID: 21374 RVA: 0x000E4A2C File Offset: 0x000E2C2C
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] long* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, @params, GL.EntryPoints[276]);
		}

		// Token: 0x0600537F RID: 21375 RVA: 0x000E4A44 File Offset: 0x000E2C44
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[277]);
			}
		}

		// Token: 0x06005380 RID: 21376 RVA: 0x000E4A7C File Offset: 0x000E2C7C
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[277]);
			}
		}

		// Token: 0x06005381 RID: 21377 RVA: 0x000E4AA0 File Offset: 0x000E2CA0
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, @params, GL.EntryPoints[277]);
		}

		// Token: 0x06005382 RID: 21378 RVA: 0x000E4AB8 File Offset: 0x000E2CB8
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[277]);
			}
		}

		// Token: 0x06005383 RID: 21379 RVA: 0x000E4AF0 File Offset: 0x000E2CF0
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[277]);
			}
		}

		// Token: 0x06005384 RID: 21380 RVA: 0x000E4B14 File Offset: 0x000E2D14
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, @params, GL.EntryPoints[277]);
		}

		// Token: 0x06005385 RID: 21381 RVA: 0x000E4B2C File Offset: 0x000E2D2C
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] ulong[] @params)
		{
			fixed (ulong* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, ptr, GL.EntryPoints[278]);
			}
		}

		// Token: 0x06005386 RID: 21382 RVA: 0x000E4B64 File Offset: 0x000E2D64
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, out ulong @params)
		{
			fixed (ulong* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, ptr, GL.EntryPoints[278]);
			}
		}

		// Token: 0x06005387 RID: 21383 RVA: 0x000E4B88 File Offset: 0x000E2D88
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] ulong* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, @params, GL.EntryPoints[278]);
		}

		// Token: 0x06005388 RID: 21384 RVA: 0x000E4BA0 File Offset: 0x000E2DA0
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] uint[] @params)
		{
			fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[279]);
			}
		}

		// Token: 0x06005389 RID: 21385 RVA: 0x000E4BD8 File Offset: 0x000E2DD8
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[279]);
			}
		}

		// Token: 0x0600538A RID: 21386 RVA: 0x000E4BFC File Offset: 0x000E2DFC
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] uint* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, @params, GL.EntryPoints[279]);
		}

		// Token: 0x0600538B RID: 21387 RVA: 0x000E4C14 File Offset: 0x000E2E14
		[CLSCompliant(false)]
		public unsafe static void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[280]);
			}
		}

		// Token: 0x0600538C RID: 21388 RVA: 0x000E4C4C File Offset: 0x000E2E4C
		[CLSCompliant(false)]
		public unsafe static void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[280]);
			}
		}

		// Token: 0x0600538D RID: 21389 RVA: 0x000E4C70 File Offset: 0x000E2E70
		[CLSCompliant(false)]
		public unsafe static void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[280]);
		}

		// Token: 0x0600538E RID: 21390 RVA: 0x000E4C88 File Offset: 0x000E2E88
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[281]);
			}
		}

		// Token: 0x0600538F RID: 21391 RVA: 0x000E4CC0 File Offset: 0x000E2EC0
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[281]);
			}
		}

		// Token: 0x06005390 RID: 21392 RVA: 0x000E4CE4 File Offset: 0x000E2EE4
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, @params, GL.EntryPoints[281]);
		}

		// Token: 0x06005391 RID: 21393 RVA: 0x000E4CFC File Offset: 0x000E2EFC
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[281]);
			}
		}

		// Token: 0x06005392 RID: 21394 RVA: 0x000E4D34 File Offset: 0x000E2F34
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[281]);
			}
		}

		// Token: 0x06005393 RID: 21395 RVA: 0x000E4D58 File Offset: 0x000E2F58
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, @params, GL.EntryPoints[281]);
		}

		// Token: 0x06005394 RID: 21396 RVA: 0x000E4D70 File Offset: 0x000E2F70
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(int sampler, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[282]);
			}
		}

		// Token: 0x06005395 RID: 21397 RVA: 0x000E4DA8 File Offset: 0x000E2FA8
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(int sampler, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[282]);
			}
		}

		// Token: 0x06005396 RID: 21398 RVA: 0x000E4DCC File Offset: 0x000E2FCC
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(int sampler, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[282]);
		}

		// Token: 0x06005397 RID: 21399 RVA: 0x000E4DE4 File Offset: 0x000E2FE4
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[282]);
			}
		}

		// Token: 0x06005398 RID: 21400 RVA: 0x000E4E1C File Offset: 0x000E301C
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[282]);
			}
		}

		// Token: 0x06005399 RID: 21401 RVA: 0x000E4E40 File Offset: 0x000E3040
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[282]);
		}

		// Token: 0x0600539A RID: 21402 RVA: 0x000E4E58 File Offset: 0x000E3058
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, All pname, [Out] uint[] @params)
		{
			fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, ptr, GL.EntryPoints[283]);
			}
		}

		// Token: 0x0600539B RID: 21403 RVA: 0x000E4E90 File Offset: 0x000E3090
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, All pname, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, ptr, GL.EntryPoints[283]);
			}
		}

		// Token: 0x0600539C RID: 21404 RVA: 0x000E4EB4 File Offset: 0x000E30B4
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, All pname, [Out] uint* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, @params, GL.EntryPoints[283]);
		}

		// Token: 0x0600539D RID: 21405 RVA: 0x000E4ECC File Offset: 0x000E30CC
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[284]);
			}
		}

		// Token: 0x0600539E RID: 21406 RVA: 0x000E4F04 File Offset: 0x000E3104
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[284]);
			}
		}

		// Token: 0x0600539F RID: 21407 RVA: 0x000E4F28 File Offset: 0x000E3128
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[284]);
		}

		// Token: 0x060053A0 RID: 21408 RVA: 0x000E4F40 File Offset: 0x000E3140
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[284]);
			}
		}

		// Token: 0x060053A1 RID: 21409 RVA: 0x000E4F78 File Offset: 0x000E3178
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[284]);
			}
		}

		// Token: 0x060053A2 RID: 21410 RVA: 0x000E4F9C File Offset: 0x000E319C
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[284]);
		}

		// Token: 0x060053A3 RID: 21411 RVA: 0x000E4FB4 File Offset: 0x000E31B4
		public static void GetSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [Out] IntPtr span)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, column, span, GL.EntryPoints[285]);
		}

		// Token: 0x060053A4 RID: 21412 RVA: 0x000E4FD0 File Offset: 0x000E31D0
		[CLSCompliant(false)]
		public unsafe static void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[] row, [In] [Out] T4[] column, [In] [Out] T5[] span) where T3 : struct where T4 : struct where T5 : struct
		{
			fixed (T3* ptr = ref (row != null && row.Length != 0) ? ref row[0] : ref *null)
			{
				T3* ptr2 = ptr;
				fixed (T4* ptr3 = ref (column != null && column.Length != 0) ? ref column[0] : ref *null)
				{
					T4* ptr4 = ptr3;
					fixed (T5* ptr5 = ref (span != null && span.Length != 0) ? ref span[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[285]);
					}
				}
			}
		}

		// Token: 0x060053A5 RID: 21413 RVA: 0x000E5038 File Offset: 0x000E3238
		[CLSCompliant(false)]
		public unsafe static void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[,] row, [In] [Out] T4[,] column, [In] [Out] T5[,] span) where T3 : struct where T4 : struct where T5 : struct
		{
			fixed (T3* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0] : ref *null)
			{
				T3* ptr2 = ptr;
				fixed (T4* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0] : ref *null)
				{
					T4* ptr4 = ptr3;
					fixed (T5* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[285]);
					}
				}
			}
		}

		// Token: 0x060053A6 RID: 21414 RVA: 0x000E50AC File Offset: 0x000E32AC
		[CLSCompliant(false)]
		public unsafe static void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[,,] row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
		{
			fixed (T3* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0, 0] : ref *null)
			{
				T3* ptr2 = ptr;
				fixed (T4* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
				{
					T4* ptr4 = ptr3;
					fixed (T5* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[285]);
					}
				}
			}
		}

		// Token: 0x060053A7 RID: 21415 RVA: 0x000E5124 File Offset: 0x000E3324
		public unsafe static void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [In] [Out] ref T3 row, [In] [Out] ref T4 column, [In] [Out] ref T5 span) where T3 : struct where T4 : struct where T5 : struct
		{
			fixed (T3* ptr = &row)
			{
				T3* ptr2 = ptr;
				fixed (T4* ptr3 = &column)
				{
					T4* ptr4 = ptr3;
					fixed (T5* ptr5 = &span)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[285]);
					}
				}
			}
		}

		// Token: 0x060053A8 RID: 21416 RVA: 0x000E5154 File Offset: 0x000E3354
		[CLSCompliant(false)]
		public unsafe static void GetShaderInfoLog(int shader, int bufSize, out int length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, ptr2, intPtr, GL.EntryPoints[286]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060053A9 RID: 21417 RVA: 0x000E5194 File Offset: 0x000E3394
		[CLSCompliant(false)]
		public unsafe static void GetShaderInfoLog(int shader, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, length, intPtr, GL.EntryPoints[286]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060053AA RID: 21418 RVA: 0x000E51D0 File Offset: 0x000E33D0
		[CLSCompliant(false)]
		public unsafe static void GetShaderInfoLog(uint shader, int bufSize, out int length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, ptr2, intPtr, GL.EntryPoints[286]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060053AB RID: 21419 RVA: 0x000E5210 File Offset: 0x000E3410
		[CLSCompliant(false)]
		public unsafe static void GetShaderInfoLog(uint shader, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, length, intPtr, GL.EntryPoints[286]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060053AC RID: 21420 RVA: 0x000E524C File Offset: 0x000E344C
		[CLSCompliant(false)]
		public unsafe static void GetShader(int shader, ShaderParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, ptr, GL.EntryPoints[287]);
			}
		}

		// Token: 0x060053AD RID: 21421 RVA: 0x000E5284 File Offset: 0x000E3484
		[CLSCompliant(false)]
		public unsafe static void GetShader(int shader, ShaderParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, ptr, GL.EntryPoints[287]);
			}
		}

		// Token: 0x060053AE RID: 21422 RVA: 0x000E52A8 File Offset: 0x000E34A8
		[CLSCompliant(false)]
		public unsafe static void GetShader(int shader, ShaderParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, @params, GL.EntryPoints[287]);
		}

		// Token: 0x060053AF RID: 21423 RVA: 0x000E52C0 File Offset: 0x000E34C0
		[CLSCompliant(false)]
		public unsafe static void GetShader(uint shader, ShaderParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, ptr, GL.EntryPoints[287]);
			}
		}

		// Token: 0x060053B0 RID: 21424 RVA: 0x000E52F8 File Offset: 0x000E34F8
		[CLSCompliant(false)]
		public unsafe static void GetShader(uint shader, ShaderParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, ptr, GL.EntryPoints[287]);
			}
		}

		// Token: 0x060053B1 RID: 21425 RVA: 0x000E531C File Offset: 0x000E351C
		[CLSCompliant(false)]
		public unsafe static void GetShader(uint shader, ShaderParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, @params, GL.EntryPoints[287]);
		}

		// Token: 0x060053B2 RID: 21426 RVA: 0x000E5334 File Offset: 0x000E3534
		[CLSCompliant(false)]
		public unsafe static void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecision precisiontype, [Out] int[] range, [Out] int[] precision)
		{
			fixed (int* ptr = ref (range != null && range.Length != 0) ? ref range[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (precision != null && precision.Length != 0) ? ref precision[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32*), shadertype, precisiontype, ptr2, ptr3, GL.EntryPoints[288]);
				}
			}
		}

		// Token: 0x060053B3 RID: 21427 RVA: 0x000E5380 File Offset: 0x000E3580
		[CLSCompliant(false)]
		public unsafe static void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecision precisiontype, out int range, out int precision)
		{
			fixed (int* ptr = &range)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &precision)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32*), shadertype, precisiontype, ptr2, ptr3, GL.EntryPoints[288]);
				}
			}
		}

		// Token: 0x060053B4 RID: 21428 RVA: 0x000E53A8 File Offset: 0x000E35A8
		[CLSCompliant(false)]
		public unsafe static void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecision precisiontype, [Out] int* range, [Out] int* precision)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32*), shadertype, precisiontype, range, precision, GL.EntryPoints[288]);
		}

		// Token: 0x060053B5 RID: 21429 RVA: 0x000E53C0 File Offset: 0x000E35C0
		[CLSCompliant(false)]
		public unsafe static void GetShaderSource(int shader, int bufSize, out int length, [Out] StringBuilder source)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, ptr2, intPtr, GL.EntryPoints[289]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060053B6 RID: 21430 RVA: 0x000E5400 File Offset: 0x000E3600
		[CLSCompliant(false)]
		public unsafe static void GetShaderSource(int shader, int bufSize, [Out] int* length, [Out] StringBuilder source)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, length, intPtr, GL.EntryPoints[289]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060053B7 RID: 21431 RVA: 0x000E543C File Offset: 0x000E363C
		[CLSCompliant(false)]
		public unsafe static void GetShaderSource(uint shader, int bufSize, out int length, [Out] StringBuilder source)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, ptr2, intPtr, GL.EntryPoints[289]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060053B8 RID: 21432 RVA: 0x000E547C File Offset: 0x000E367C
		[CLSCompliant(false)]
		public unsafe static void GetShaderSource(uint shader, int bufSize, [Out] int* length, [Out] StringBuilder source)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, length, intPtr, GL.EntryPoints[289]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060053B9 RID: 21433 RVA: 0x000E54B8 File Offset: 0x000E36B8
		public unsafe static string GetString(StringName name)
		{
			return new string((sbyte*)((void*)calli(System.IntPtr(System.Int32), name, GL.EntryPoints[290])));
		}

		// Token: 0x060053BA RID: 21434 RVA: 0x000E54D8 File Offset: 0x000E36D8
		[CLSCompliant(false)]
		public unsafe static string GetString(StringNameIndexed name, int index)
		{
			return new string((sbyte*)((void*)calli(System.IntPtr(System.Int32,System.UInt32), name, index, GL.EntryPoints[291])));
		}

		// Token: 0x060053BB RID: 21435 RVA: 0x000E54F8 File Offset: 0x000E36F8
		[CLSCompliant(false)]
		public unsafe static string GetString(StringNameIndexed name, uint index)
		{
			return new string((sbyte*)((void*)calli(System.IntPtr(System.Int32,System.UInt32), name, index, GL.EntryPoints[291])));
		}

		// Token: 0x060053BC RID: 21436 RVA: 0x000E5518 File Offset: 0x000E3718
		[CLSCompliant(false)]
		public static int GetSubroutineIndex(int program, ShaderType shadertype, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, shadertype, intPtr, GL.EntryPoints[292]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060053BD RID: 21437 RVA: 0x000E5548 File Offset: 0x000E3748
		[CLSCompliant(false)]
		public static int GetSubroutineIndex(uint program, ShaderType shadertype, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, shadertype, intPtr, GL.EntryPoints[292]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060053BE RID: 21438 RVA: 0x000E5578 File Offset: 0x000E3778
		[CLSCompliant(false)]
		public static int GetSubroutineUniformLocation(int program, ShaderType shadertype, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, shadertype, intPtr, GL.EntryPoints[293]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060053BF RID: 21439 RVA: 0x000E55A8 File Offset: 0x000E37A8
		[CLSCompliant(false)]
		public static int GetSubroutineUniformLocation(uint program, ShaderType shadertype, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, shadertype, intPtr, GL.EntryPoints[293]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060053C0 RID: 21440 RVA: 0x000E55D8 File Offset: 0x000E37D8
		[CLSCompliant(false)]
		public unsafe static void GetSync(IntPtr sync, SyncParameterName pname, int bufSize, out int length, [Out] int[] values)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, ptr2, ptr3, GL.EntryPoints[294]);
				}
			}
		}

		// Token: 0x060053C1 RID: 21441 RVA: 0x000E5618 File Offset: 0x000E3818
		[CLSCompliant(false)]
		public unsafe static void GetSync(IntPtr sync, SyncParameterName pname, int bufSize, out int length, out int values)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &values)
				{
					calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, ptr2, ptr3, GL.EntryPoints[294]);
				}
			}
		}

		// Token: 0x060053C2 RID: 21442 RVA: 0x000E5644 File Offset: 0x000E3844
		[CLSCompliant(false)]
		public unsafe static void GetSync(IntPtr sync, SyncParameterName pname, int bufSize, [Out] int* length, [Out] int* values)
		{
			calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, length, values, GL.EntryPoints[294]);
		}

		// Token: 0x060053C3 RID: 21443 RVA: 0x000E565C File Offset: 0x000E385C
		public static void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, [Out] IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, pixels, GL.EntryPoints[295]);
		}

		// Token: 0x060053C4 RID: 21444 RVA: 0x000E5674 File Offset: 0x000E3874
		[CLSCompliant(false)]
		public unsafe static void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] T4[] pixels) where T4 : struct
		{
			fixed (T4* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, ptr, GL.EntryPoints[295]);
			}
		}

		// Token: 0x060053C5 RID: 21445 RVA: 0x000E56B0 File Offset: 0x000E38B0
		[CLSCompliant(false)]
		public unsafe static void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] T4[,] pixels) where T4 : struct
		{
			fixed (T4* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, ptr, GL.EntryPoints[295]);
			}
		}

		// Token: 0x060053C6 RID: 21446 RVA: 0x000E56F0 File Offset: 0x000E38F0
		[CLSCompliant(false)]
		public unsafe static void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] T4[,,] pixels) where T4 : struct
		{
			fixed (T4* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, ptr, GL.EntryPoints[295]);
			}
		}

		// Token: 0x060053C7 RID: 21447 RVA: 0x000E5730 File Offset: 0x000E3930
		public unsafe static void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] ref T4 pixels) where T4 : struct
		{
			fixed (T4* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, ptr, GL.EntryPoints[295]);
			}
		}

		// Token: 0x060053C8 RID: 21448 RVA: 0x000E5758 File Offset: 0x000E3958
		[CLSCompliant(false)]
		public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), target, level, pname, ptr, GL.EntryPoints[296]);
			}
		}

		// Token: 0x060053C9 RID: 21449 RVA: 0x000E5790 File Offset: 0x000E3990
		[CLSCompliant(false)]
		public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), target, level, pname, ptr, GL.EntryPoints[296]);
			}
		}

		// Token: 0x060053CA RID: 21450 RVA: 0x000E57B4 File Offset: 0x000E39B4
		[CLSCompliant(false)]
		public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), target, level, pname, @params, GL.EntryPoints[296]);
		}

		// Token: 0x060053CB RID: 21451 RVA: 0x000E57CC File Offset: 0x000E39CC
		[CLSCompliant(false)]
		public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, level, pname, ptr, GL.EntryPoints[297]);
			}
		}

		// Token: 0x060053CC RID: 21452 RVA: 0x000E5804 File Offset: 0x000E3A04
		[CLSCompliant(false)]
		public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, level, pname, ptr, GL.EntryPoints[297]);
			}
		}

		// Token: 0x060053CD RID: 21453 RVA: 0x000E5828 File Offset: 0x000E3A28
		[CLSCompliant(false)]
		public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, level, pname, @params, GL.EntryPoints[297]);
		}

		// Token: 0x060053CE RID: 21454 RVA: 0x000E5840 File Offset: 0x000E3A40
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[298]);
			}
		}

		// Token: 0x060053CF RID: 21455 RVA: 0x000E5878 File Offset: 0x000E3A78
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[298]);
			}
		}

		// Token: 0x060053D0 RID: 21456 RVA: 0x000E589C File Offset: 0x000E3A9C
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[298]);
		}

		// Token: 0x060053D1 RID: 21457 RVA: 0x000E58B4 File Offset: 0x000E3AB4
		[CLSCompliant(false)]
		public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[299]);
			}
		}

		// Token: 0x060053D2 RID: 21458 RVA: 0x000E58EC File Offset: 0x000E3AEC
		[CLSCompliant(false)]
		public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[299]);
			}
		}

		// Token: 0x060053D3 RID: 21459 RVA: 0x000E5910 File Offset: 0x000E3B10
		[CLSCompliant(false)]
		public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[299]);
		}

		// Token: 0x060053D4 RID: 21460 RVA: 0x000E5928 File Offset: 0x000E3B28
		[CLSCompliant(false)]
		public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] uint[] @params)
		{
			fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[300]);
			}
		}

		// Token: 0x060053D5 RID: 21461 RVA: 0x000E5960 File Offset: 0x000E3B60
		[CLSCompliant(false)]
		public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[300]);
			}
		}

		// Token: 0x060053D6 RID: 21462 RVA: 0x000E5984 File Offset: 0x000E3B84
		[CLSCompliant(false)]
		public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] uint* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, @params, GL.EntryPoints[300]);
		}

		// Token: 0x060053D7 RID: 21463 RVA: 0x000E599C File Offset: 0x000E3B9C
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[301]);
			}
		}

		// Token: 0x060053D8 RID: 21464 RVA: 0x000E59D4 File Offset: 0x000E3BD4
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[301]);
			}
		}

		// Token: 0x060053D9 RID: 21465 RVA: 0x000E59F8 File Offset: 0x000E3BF8
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[301]);
		}

		// Token: 0x060053DA RID: 21466 RVA: 0x000E5A10 File Offset: 0x000E3C10
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(int program, int index, int bufSize, out int length, out int size, out TransformFeedbackType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (TransformFeedbackType* ptr5 = &type)
					{
						TransformFeedbackType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[304]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x060053DB RID: 21467 RVA: 0x000E5A5C File Offset: 0x000E3C5C
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] TransformFeedbackType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[304]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060053DC RID: 21468 RVA: 0x000E5AA0 File Offset: 0x000E3CA0
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, out int size, out TransformFeedbackType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (TransformFeedbackType* ptr5 = &type)
					{
						TransformFeedbackType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[304]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x060053DD RID: 21469 RVA: 0x000E5AEC File Offset: 0x000E3CEC
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] TransformFeedbackType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[304]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060053DE RID: 21470 RVA: 0x000E5B30 File Offset: 0x000E3D30
		[CLSCompliant(false)]
		public static int GetUniformBlockIndex(int program, string uniformBlockName)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(uniformBlockName);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[305]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060053DF RID: 21471 RVA: 0x000E5B5C File Offset: 0x000E3D5C
		[CLSCompliant(false)]
		public static int GetUniformBlockIndex(uint program, string uniformBlockName)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(uniformBlockName);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[305]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060053E0 RID: 21472 RVA: 0x000E5B88 File Offset: 0x000E3D88
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, [Out] double[] @params)
		{
			fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), program, location, ptr, GL.EntryPoints[306]);
			}
		}

		// Token: 0x060053E1 RID: 21473 RVA: 0x000E5BC0 File Offset: 0x000E3DC0
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, out double @params)
		{
			fixed (double* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), program, location, ptr, GL.EntryPoints[306]);
			}
		}

		// Token: 0x060053E2 RID: 21474 RVA: 0x000E5BE4 File Offset: 0x000E3DE4
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, [Out] double* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double*), program, location, @params, GL.EntryPoints[306]);
		}

		// Token: 0x060053E3 RID: 21475 RVA: 0x000E5BFC File Offset: 0x000E3DFC
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] double[] @params)
		{
			fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), program, location, ptr, GL.EntryPoints[306]);
			}
		}

		// Token: 0x060053E4 RID: 21476 RVA: 0x000E5C34 File Offset: 0x000E3E34
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, out double @params)
		{
			fixed (double* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), program, location, ptr, GL.EntryPoints[306]);
			}
		}

		// Token: 0x060053E5 RID: 21477 RVA: 0x000E5C58 File Offset: 0x000E3E58
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] double* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double*), program, location, @params, GL.EntryPoints[306]);
		}

		// Token: 0x060053E6 RID: 21478 RVA: 0x000E5C70 File Offset: 0x000E3E70
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, ptr, GL.EntryPoints[307]);
			}
		}

		// Token: 0x060053E7 RID: 21479 RVA: 0x000E5CA8 File Offset: 0x000E3EA8
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, ptr, GL.EntryPoints[307]);
			}
		}

		// Token: 0x060053E8 RID: 21480 RVA: 0x000E5CCC File Offset: 0x000E3ECC
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, @params, GL.EntryPoints[307]);
		}

		// Token: 0x060053E9 RID: 21481 RVA: 0x000E5CE4 File Offset: 0x000E3EE4
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, ptr, GL.EntryPoints[307]);
			}
		}

		// Token: 0x060053EA RID: 21482 RVA: 0x000E5D1C File Offset: 0x000E3F1C
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, ptr, GL.EntryPoints[307]);
			}
		}

		// Token: 0x060053EB RID: 21483 RVA: 0x000E5D40 File Offset: 0x000E3F40
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, @params, GL.EntryPoints[307]);
		}

		// Token: 0x060053EC RID: 21484 RVA: 0x000E5D58 File Offset: 0x000E3F58
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(int program, int uniformCount, string[] uniformNames, [Out] int[] uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = ref (uniformIndices != null && uniformIndices.Length != 0) ? ref uniformIndices[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr2, ptr, GL.EntryPoints[308]);
				BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
			}
		}

		// Token: 0x060053ED RID: 21485 RVA: 0x000E5DA0 File Offset: 0x000E3FA0
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(int program, int uniformCount, string[] uniformNames, out int uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = &uniformIndices)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr2, ptr, GL.EntryPoints[308]);
				BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
			}
		}

		// Token: 0x060053EE RID: 21486 RVA: 0x000E5DD4 File Offset: 0x000E3FD4
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(int program, int uniformCount, string[] uniformNames, [Out] int* uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr, uniformIndices, GL.EntryPoints[308]);
			BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
		}

		// Token: 0x060053EF RID: 21487 RVA: 0x000E5E08 File Offset: 0x000E4008
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, [Out] uint[] uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			IntPtr intPtr2 = intPtr;
			fixed (uint* ptr = ref (uniformIndices != null && uniformIndices.Length != 0) ? ref uniformIndices[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr2, ptr, GL.EntryPoints[308]);
				BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
			}
		}

		// Token: 0x060053F0 RID: 21488 RVA: 0x000E5E50 File Offset: 0x000E4050
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, out uint uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			IntPtr intPtr2 = intPtr;
			fixed (uint* ptr = &uniformIndices)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr2, ptr, GL.EntryPoints[308]);
				BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
			}
		}

		// Token: 0x060053F1 RID: 21489 RVA: 0x000E5E84 File Offset: 0x000E4084
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, [Out] uint* uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr, uniformIndices, GL.EntryPoints[308]);
			BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
		}

		// Token: 0x060053F2 RID: 21490 RVA: 0x000E5EB8 File Offset: 0x000E40B8
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, ptr, GL.EntryPoints[309]);
			}
		}

		// Token: 0x060053F3 RID: 21491 RVA: 0x000E5EF0 File Offset: 0x000E40F0
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, ptr, GL.EntryPoints[309]);
			}
		}

		// Token: 0x060053F4 RID: 21492 RVA: 0x000E5F14 File Offset: 0x000E4114
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, @params, GL.EntryPoints[309]);
		}

		// Token: 0x060053F5 RID: 21493 RVA: 0x000E5F2C File Offset: 0x000E412C
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, ptr, GL.EntryPoints[309]);
			}
		}

		// Token: 0x060053F6 RID: 21494 RVA: 0x000E5F64 File Offset: 0x000E4164
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, ptr, GL.EntryPoints[309]);
			}
		}

		// Token: 0x060053F7 RID: 21495 RVA: 0x000E5F88 File Offset: 0x000E4188
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, @params, GL.EntryPoints[309]);
		}

		// Token: 0x060053F8 RID: 21496 RVA: 0x000E5FA0 File Offset: 0x000E41A0
		[CLSCompliant(false)]
		public static int GetUniformLocation(int program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[310]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060053F9 RID: 21497 RVA: 0x000E5FCC File Offset: 0x000E41CC
		[CLSCompliant(false)]
		public static int GetUniformLocation(uint program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[310]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060053FA RID: 21498 RVA: 0x000E5FF8 File Offset: 0x000E41F8
		[CLSCompliant(false)]
		public unsafe static void GetUniformSubroutine(ShaderType shadertype, int location, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, location, ptr, GL.EntryPoints[311]);
			}
		}

		// Token: 0x060053FB RID: 21499 RVA: 0x000E601C File Offset: 0x000E421C
		[CLSCompliant(false)]
		public unsafe static void GetUniformSubroutine(ShaderType shadertype, int location, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, location, @params, GL.EntryPoints[311]);
		}

		// Token: 0x060053FC RID: 21500 RVA: 0x000E6034 File Offset: 0x000E4234
		[CLSCompliant(false)]
		public unsafe static void GetUniformSubroutine(ShaderType shadertype, int location, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, location, ptr, GL.EntryPoints[311]);
			}
		}

		// Token: 0x060053FD RID: 21501 RVA: 0x000E6058 File Offset: 0x000E4258
		[CLSCompliant(false)]
		public unsafe static void GetUniformSubroutine(ShaderType shadertype, int location, [Out] uint* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, location, @params, GL.EntryPoints[311]);
		}

		// Token: 0x060053FE RID: 21502 RVA: 0x000E6070 File Offset: 0x000E4270
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] uint[] @params)
		{
			fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), program, location, ptr, GL.EntryPoints[312]);
			}
		}

		// Token: 0x060053FF RID: 21503 RVA: 0x000E60A8 File Offset: 0x000E42A8
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), program, location, ptr, GL.EntryPoints[312]);
			}
		}

		// Token: 0x06005400 RID: 21504 RVA: 0x000E60CC File Offset: 0x000E42CC
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] uint* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), program, location, @params, GL.EntryPoints[312]);
		}

		// Token: 0x06005401 RID: 21505 RVA: 0x000E60E4 File Offset: 0x000E42E4
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] double[] @params)
		{
			fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[313]);
			}
		}

		// Token: 0x06005402 RID: 21506 RVA: 0x000E611C File Offset: 0x000E431C
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, out double @params)
		{
			fixed (double* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[313]);
			}
		}

		// Token: 0x06005403 RID: 21507 RVA: 0x000E6140 File Offset: 0x000E4340
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] double* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, @params, GL.EntryPoints[313]);
		}

		// Token: 0x06005404 RID: 21508 RVA: 0x000E6158 File Offset: 0x000E4358
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] double[] @params)
		{
			fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[313]);
			}
		}

		// Token: 0x06005405 RID: 21509 RVA: 0x000E6190 File Offset: 0x000E4390
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, out double @params)
		{
			fixed (double* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[313]);
			}
		}

		// Token: 0x06005406 RID: 21510 RVA: 0x000E61B4 File Offset: 0x000E43B4
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] double* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, @params, GL.EntryPoints[313]);
		}

		// Token: 0x06005407 RID: 21511 RVA: 0x000E61CC File Offset: 0x000E43CC
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[314]);
			}
		}

		// Token: 0x06005408 RID: 21512 RVA: 0x000E6204 File Offset: 0x000E4404
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[314]);
			}
		}

		// Token: 0x06005409 RID: 21513 RVA: 0x000E6228 File Offset: 0x000E4428
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, @params, GL.EntryPoints[314]);
		}

		// Token: 0x0600540A RID: 21514 RVA: 0x000E6240 File Offset: 0x000E4440
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[314]);
			}
		}

		// Token: 0x0600540B RID: 21515 RVA: 0x000E6278 File Offset: 0x000E4478
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[314]);
			}
		}

		// Token: 0x0600540C RID: 21516 RVA: 0x000E629C File Offset: 0x000E449C
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, @params, GL.EntryPoints[314]);
		}

		// Token: 0x0600540D RID: 21517 RVA: 0x000E62B4 File Offset: 0x000E44B4
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(int index, VertexAttribParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[315]);
			}
		}

		// Token: 0x0600540E RID: 21518 RVA: 0x000E62D8 File Offset: 0x000E44D8
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(int index, VertexAttribParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[315]);
		}

		// Token: 0x0600540F RID: 21519 RVA: 0x000E62F0 File Offset: 0x000E44F0
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(uint index, VertexAttribParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[315]);
			}
		}

		// Token: 0x06005410 RID: 21520 RVA: 0x000E6314 File Offset: 0x000E4514
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(uint index, VertexAttribParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[315]);
		}

		// Token: 0x06005411 RID: 21521 RVA: 0x000E632C File Offset: 0x000E452C
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(uint index, VertexAttribParameter pname, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), index, pname, ptr, GL.EntryPoints[316]);
			}
		}

		// Token: 0x06005412 RID: 21522 RVA: 0x000E6350 File Offset: 0x000E4550
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(uint index, VertexAttribParameter pname, [Out] uint* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), index, pname, @params, GL.EntryPoints[316]);
		}

		// Token: 0x06005413 RID: 21523 RVA: 0x000E6368 File Offset: 0x000E4568
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[317]);
			}
		}

		// Token: 0x06005414 RID: 21524 RVA: 0x000E63A0 File Offset: 0x000E45A0
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[317]);
			}
		}

		// Token: 0x06005415 RID: 21525 RVA: 0x000E63C4 File Offset: 0x000E45C4
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[317]);
		}

		// Token: 0x06005416 RID: 21526 RVA: 0x000E63DC File Offset: 0x000E45DC
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[317]);
			}
		}

		// Token: 0x06005417 RID: 21527 RVA: 0x000E6414 File Offset: 0x000E4614
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[317]);
			}
		}

		// Token: 0x06005418 RID: 21528 RVA: 0x000E6438 File Offset: 0x000E4638
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[317]);
		}

		// Token: 0x06005419 RID: 21529 RVA: 0x000E6450 File Offset: 0x000E4650
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribL(int index, VertexAttribParameter pname, [Out] double[] @params)
		{
			fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[318]);
			}
		}

		// Token: 0x0600541A RID: 21530 RVA: 0x000E6488 File Offset: 0x000E4688
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribL(int index, VertexAttribParameter pname, out double @params)
		{
			fixed (double* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[318]);
			}
		}

		// Token: 0x0600541B RID: 21531 RVA: 0x000E64AC File Offset: 0x000E46AC
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribL(int index, VertexAttribParameter pname, [Out] double* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, @params, GL.EntryPoints[318]);
		}

		// Token: 0x0600541C RID: 21532 RVA: 0x000E64C4 File Offset: 0x000E46C4
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribL(uint index, VertexAttribParameter pname, [Out] double[] @params)
		{
			fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[318]);
			}
		}

		// Token: 0x0600541D RID: 21533 RVA: 0x000E64FC File Offset: 0x000E46FC
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribL(uint index, VertexAttribParameter pname, out double @params)
		{
			fixed (double* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[318]);
			}
		}

		// Token: 0x0600541E RID: 21534 RVA: 0x000E6520 File Offset: 0x000E4720
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribL(uint index, VertexAttribParameter pname, [Out] double* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, @params, GL.EntryPoints[318]);
		}

		// Token: 0x0600541F RID: 21535 RVA: 0x000E6538 File Offset: 0x000E4738
		[CLSCompliant(false)]
		public static void GetVertexAttribPointer(int index, VertexAttribPointerParameter pname, [Out] IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, pointer, GL.EntryPoints[320]);
		}

		// Token: 0x06005420 RID: 21536 RVA: 0x000E6550 File Offset: 0x000E4750
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In] [Out] T2[] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[320]);
			}
		}

		// Token: 0x06005421 RID: 21537 RVA: 0x000E6588 File Offset: 0x000E4788
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In] [Out] T2[,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[320]);
			}
		}

		// Token: 0x06005422 RID: 21538 RVA: 0x000E65C4 File Offset: 0x000E47C4
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In] [Out] T2[,,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[320]);
			}
		}

		// Token: 0x06005423 RID: 21539 RVA: 0x000E6600 File Offset: 0x000E4800
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In] [Out] ref T2 pointer) where T2 : struct
		{
			fixed (T2* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[320]);
			}
		}

		// Token: 0x06005424 RID: 21540 RVA: 0x000E6624 File Offset: 0x000E4824
		[CLSCompliant(false)]
		public static void GetVertexAttribPointer(uint index, VertexAttribPointerParameter pname, [Out] IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, pointer, GL.EntryPoints[320]);
		}

		// Token: 0x06005425 RID: 21541 RVA: 0x000E663C File Offset: 0x000E483C
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In] [Out] T2[] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[320]);
			}
		}

		// Token: 0x06005426 RID: 21542 RVA: 0x000E6674 File Offset: 0x000E4874
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In] [Out] T2[,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[320]);
			}
		}

		// Token: 0x06005427 RID: 21543 RVA: 0x000E66B0 File Offset: 0x000E48B0
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In] [Out] T2[,,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[320]);
			}
		}

		// Token: 0x06005428 RID: 21544 RVA: 0x000E66EC File Offset: 0x000E48EC
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In] [Out] ref T2 pointer) where T2 : struct
		{
			fixed (T2* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[320]);
			}
		}

		// Token: 0x06005429 RID: 21545 RVA: 0x000E6710 File Offset: 0x000E4910
		public static void Hint(HintTarget target, HintMode mode)
		{
			calli(System.Void(System.Int32,System.Int32), target, mode, GL.EntryPoints[321]);
		}

		// Token: 0x0600542A RID: 21546 RVA: 0x000E6724 File Offset: 0x000E4924
		public static void Histogram(HistogramTarget target, int width, PixelInternalFormat internalformat, bool sink)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Boolean), target, width, internalformat, sink, GL.EntryPoints[322]);
		}

		// Token: 0x0600542B RID: 21547 RVA: 0x000E673C File Offset: 0x000E493C
		[CLSCompliant(false)]
		public static void InvalidateBufferData(int buffer)
		{
			calli(System.Void(System.UInt32), buffer, GL.EntryPoints[323]);
		}

		// Token: 0x0600542C RID: 21548 RVA: 0x000E6750 File Offset: 0x000E4950
		[CLSCompliant(false)]
		public static void InvalidateBufferData(uint buffer)
		{
			calli(System.Void(System.UInt32), buffer, GL.EntryPoints[323]);
		}

		// Token: 0x0600542D RID: 21549 RVA: 0x000E6764 File Offset: 0x000E4964
		[CLSCompliant(false)]
		public static void InvalidateBufferSubData(int buffer, IntPtr offset, IntPtr length)
		{
			calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr), buffer, offset, length, GL.EntryPoints[324]);
		}

		// Token: 0x0600542E RID: 21550 RVA: 0x000E677C File Offset: 0x000E497C
		[CLSCompliant(false)]
		public static void InvalidateBufferSubData(uint buffer, IntPtr offset, IntPtr length)
		{
			calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr), buffer, offset, length, GL.EntryPoints[324]);
		}

		// Token: 0x0600542F RID: 21551 RVA: 0x000E6794 File Offset: 0x000E4994
		[CLSCompliant(false)]
		public unsafe static void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, FramebufferAttachment[] attachments)
		{
			fixed (FramebufferAttachment* ptr = ref (attachments != null && attachments.Length != 0) ? ref attachments[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, numAttachments, ptr, GL.EntryPoints[325]);
			}
		}

		// Token: 0x06005430 RID: 21552 RVA: 0x000E67CC File Offset: 0x000E49CC
		[CLSCompliant(false)]
		public unsafe static void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, ref FramebufferAttachment attachments)
		{
			fixed (FramebufferAttachment* ptr = &attachments)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, numAttachments, ptr, GL.EntryPoints[325]);
			}
		}

		// Token: 0x06005431 RID: 21553 RVA: 0x000E67F0 File Offset: 0x000E49F0
		[CLSCompliant(false)]
		public unsafe static void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, FramebufferAttachment* attachments)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, numAttachments, attachments, GL.EntryPoints[325]);
		}

		// Token: 0x06005432 RID: 21554 RVA: 0x000E6808 File Offset: 0x000E4A08
		[CLSCompliant(false)]
		public unsafe static void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, FramebufferAttachment[] attachments, int x, int y, int width, int height)
		{
			fixed (FramebufferAttachment* ptr = ref (attachments != null && attachments.Length != 0) ? ref attachments[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32,System.Int32), target, numAttachments, ptr, x, y, width, height, GL.EntryPoints[326]);
			}
		}

		// Token: 0x06005433 RID: 21555 RVA: 0x000E6844 File Offset: 0x000E4A44
		[CLSCompliant(false)]
		public unsafe static void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, ref FramebufferAttachment attachments, int x, int y, int width, int height)
		{
			fixed (FramebufferAttachment* ptr = &attachments)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32,System.Int32), target, numAttachments, ptr, x, y, width, height, GL.EntryPoints[326]);
			}
		}

		// Token: 0x06005434 RID: 21556 RVA: 0x000E6870 File Offset: 0x000E4A70
		[CLSCompliant(false)]
		public unsafe static void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, FramebufferAttachment* attachments, int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32,System.Int32), target, numAttachments, attachments, x, y, width, height, GL.EntryPoints[326]);
		}

		// Token: 0x06005435 RID: 21557 RVA: 0x000E6898 File Offset: 0x000E4A98
		[CLSCompliant(false)]
		public static void InvalidateTexImage(int texture, int level)
		{
			calli(System.Void(System.UInt32,System.Int32), texture, level, GL.EntryPoints[327]);
		}

		// Token: 0x06005436 RID: 21558 RVA: 0x000E68AC File Offset: 0x000E4AAC
		[CLSCompliant(false)]
		public static void InvalidateTexImage(uint texture, int level)
		{
			calli(System.Void(System.UInt32,System.Int32), texture, level, GL.EntryPoints[327]);
		}

		// Token: 0x06005437 RID: 21559 RVA: 0x000E68C0 File Offset: 0x000E4AC0
		[CLSCompliant(false)]
		public static void InvalidateTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, level, xoffset, yoffset, zoffset, width, height, depth, GL.EntryPoints[328]);
		}

		// Token: 0x06005438 RID: 21560 RVA: 0x000E68EC File Offset: 0x000E4AEC
		[CLSCompliant(false)]
		public static void InvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, level, xoffset, yoffset, zoffset, width, height, depth, GL.EntryPoints[328]);
		}

		// Token: 0x06005439 RID: 21561 RVA: 0x000E6918 File Offset: 0x000E4B18
		[CLSCompliant(false)]
		public static bool IsBuffer(int buffer)
		{
			return calli(System.Byte(System.UInt32), buffer, GL.EntryPoints[329]);
		}

		// Token: 0x0600543A RID: 21562 RVA: 0x000E692C File Offset: 0x000E4B2C
		[CLSCompliant(false)]
		public static bool IsBuffer(uint buffer)
		{
			return calli(System.Byte(System.UInt32), buffer, GL.EntryPoints[329]);
		}

		// Token: 0x0600543B RID: 21563 RVA: 0x000E6940 File Offset: 0x000E4B40
		public static bool IsEnabled(EnableCap cap)
		{
			return calli(System.Byte(System.Int32), cap, GL.EntryPoints[330]);
		}

		// Token: 0x0600543C RID: 21564 RVA: 0x000E6954 File Offset: 0x000E4B54
		[CLSCompliant(false)]
		public static bool IsEnabled(IndexedEnableCap target, int index)
		{
			return calli(System.Byte(System.Int32,System.UInt32), target, index, GL.EntryPoints[331]);
		}

		// Token: 0x0600543D RID: 21565 RVA: 0x000E6968 File Offset: 0x000E4B68
		[CLSCompliant(false)]
		public static bool IsEnabled(IndexedEnableCap target, uint index)
		{
			return calli(System.Byte(System.Int32,System.UInt32), target, index, GL.EntryPoints[331]);
		}

		// Token: 0x0600543E RID: 21566 RVA: 0x000E697C File Offset: 0x000E4B7C
		[CLSCompliant(false)]
		public static bool IsFramebuffer(int framebuffer)
		{
			return calli(System.Byte(System.UInt32), framebuffer, GL.EntryPoints[332]);
		}

		// Token: 0x0600543F RID: 21567 RVA: 0x000E6990 File Offset: 0x000E4B90
		[CLSCompliant(false)]
		public static bool IsFramebuffer(uint framebuffer)
		{
			return calli(System.Byte(System.UInt32), framebuffer, GL.EntryPoints[332]);
		}

		// Token: 0x06005440 RID: 21568 RVA: 0x000E69A4 File Offset: 0x000E4BA4
		[CLSCompliant(false)]
		public static bool IsProgram(int program)
		{
			return calli(System.Byte(System.UInt32), program, GL.EntryPoints[335]);
		}

		// Token: 0x06005441 RID: 21569 RVA: 0x000E69B8 File Offset: 0x000E4BB8
		[CLSCompliant(false)]
		public static bool IsProgram(uint program)
		{
			return calli(System.Byte(System.UInt32), program, GL.EntryPoints[335]);
		}

		// Token: 0x06005442 RID: 21570 RVA: 0x000E69CC File Offset: 0x000E4BCC
		[CLSCompliant(false)]
		public static bool IsProgramPipeline(int pipeline)
		{
			return calli(System.Byte(System.UInt32), pipeline, GL.EntryPoints[336]);
		}

		// Token: 0x06005443 RID: 21571 RVA: 0x000E69E0 File Offset: 0x000E4BE0
		[CLSCompliant(false)]
		public static bool IsProgramPipeline(uint pipeline)
		{
			return calli(System.Byte(System.UInt32), pipeline, GL.EntryPoints[336]);
		}

		// Token: 0x06005444 RID: 21572 RVA: 0x000E69F4 File Offset: 0x000E4BF4
		[CLSCompliant(false)]
		public static bool IsQuery(int id)
		{
			return calli(System.Byte(System.UInt32), id, GL.EntryPoints[337]);
		}

		// Token: 0x06005445 RID: 21573 RVA: 0x000E6A08 File Offset: 0x000E4C08
		[CLSCompliant(false)]
		public static bool IsQuery(uint id)
		{
			return calli(System.Byte(System.UInt32), id, GL.EntryPoints[337]);
		}

		// Token: 0x06005446 RID: 21574 RVA: 0x000E6A1C File Offset: 0x000E4C1C
		[CLSCompliant(false)]
		public static bool IsRenderbuffer(int renderbuffer)
		{
			return calli(System.Byte(System.UInt32), renderbuffer, GL.EntryPoints[338]);
		}

		// Token: 0x06005447 RID: 21575 RVA: 0x000E6A30 File Offset: 0x000E4C30
		[CLSCompliant(false)]
		public static bool IsRenderbuffer(uint renderbuffer)
		{
			return calli(System.Byte(System.UInt32), renderbuffer, GL.EntryPoints[338]);
		}

		// Token: 0x06005448 RID: 21576 RVA: 0x000E6A44 File Offset: 0x000E4C44
		[CLSCompliant(false)]
		public static bool IsSampler(int sampler)
		{
			return calli(System.Byte(System.UInt32), sampler, GL.EntryPoints[339]);
		}

		// Token: 0x06005449 RID: 21577 RVA: 0x000E6A58 File Offset: 0x000E4C58
		[CLSCompliant(false)]
		public static bool IsSampler(uint sampler)
		{
			return calli(System.Byte(System.UInt32), sampler, GL.EntryPoints[339]);
		}

		// Token: 0x0600544A RID: 21578 RVA: 0x000E6A6C File Offset: 0x000E4C6C
		[CLSCompliant(false)]
		public static bool IsShader(int shader)
		{
			return calli(System.Byte(System.UInt32), shader, GL.EntryPoints[340]);
		}

		// Token: 0x0600544B RID: 21579 RVA: 0x000E6A80 File Offset: 0x000E4C80
		[CLSCompliant(false)]
		public static bool IsShader(uint shader)
		{
			return calli(System.Byte(System.UInt32), shader, GL.EntryPoints[340]);
		}

		// Token: 0x0600544C RID: 21580 RVA: 0x000E6A94 File Offset: 0x000E4C94
		public static bool IsSync(IntPtr sync)
		{
			return calli(System.Byte(System.IntPtr), sync, GL.EntryPoints[341]);
		}

		// Token: 0x0600544D RID: 21581 RVA: 0x000E6AA8 File Offset: 0x000E4CA8
		[CLSCompliant(false)]
		public static bool IsTexture(int texture)
		{
			return calli(System.Byte(System.UInt32), texture, GL.EntryPoints[342]);
		}

		// Token: 0x0600544E RID: 21582 RVA: 0x000E6ABC File Offset: 0x000E4CBC
		[CLSCompliant(false)]
		public static bool IsTexture(uint texture)
		{
			return calli(System.Byte(System.UInt32), texture, GL.EntryPoints[342]);
		}

		// Token: 0x0600544F RID: 21583 RVA: 0x000E6AD0 File Offset: 0x000E4CD0
		[CLSCompliant(false)]
		public static bool IsTransformFeedback(int id)
		{
			return calli(System.Byte(System.UInt32), id, GL.EntryPoints[344]);
		}

		// Token: 0x06005450 RID: 21584 RVA: 0x000E6AE4 File Offset: 0x000E4CE4
		[CLSCompliant(false)]
		public static bool IsTransformFeedback(uint id)
		{
			return calli(System.Byte(System.UInt32), id, GL.EntryPoints[344]);
		}

		// Token: 0x06005451 RID: 21585 RVA: 0x000E6AF8 File Offset: 0x000E4CF8
		[CLSCompliant(false)]
		public static bool IsVertexArray(int array)
		{
			return calli(System.Byte(System.UInt32), array, GL.EntryPoints[345]);
		}

		// Token: 0x06005452 RID: 21586 RVA: 0x000E6B0C File Offset: 0x000E4D0C
		[CLSCompliant(false)]
		public static bool IsVertexArray(uint array)
		{
			return calli(System.Byte(System.UInt32), array, GL.EntryPoints[345]);
		}

		// Token: 0x06005453 RID: 21587 RVA: 0x000E6B20 File Offset: 0x000E4D20
		public static void LineWidth(float width)
		{
			calli(System.Void(System.Single), width, GL.EntryPoints[346]);
		}

		// Token: 0x06005454 RID: 21588 RVA: 0x000E6B34 File Offset: 0x000E4D34
		[CLSCompliant(false)]
		public static void LinkProgram(int program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[347]);
		}

		// Token: 0x06005455 RID: 21589 RVA: 0x000E6B48 File Offset: 0x000E4D48
		[CLSCompliant(false)]
		public static void LinkProgram(uint program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[347]);
		}

		// Token: 0x06005456 RID: 21590 RVA: 0x000E6B5C File Offset: 0x000E4D5C
		public static void LogicOp(LogicOp opcode)
		{
			calli(System.Void(System.Int32), opcode, GL.EntryPoints[348]);
		}

		// Token: 0x06005457 RID: 21591 RVA: 0x000E6B70 File Offset: 0x000E4D70
		public static IntPtr MapBuffer(BufferTarget target, BufferAccess access)
		{
			return calli(System.IntPtr(System.Int32,System.Int32), target, access, GL.EntryPoints[353]);
		}

		// Token: 0x06005458 RID: 21592 RVA: 0x000E6B84 File Offset: 0x000E4D84
		public static IntPtr MapBufferRange(BufferTarget target, IntPtr offset, IntPtr length, BufferAccessMask access)
		{
			return calli(System.IntPtr(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, offset, length, access, GL.EntryPoints[354]);
		}

		// Token: 0x06005459 RID: 21593 RVA: 0x000E6B9C File Offset: 0x000E4D9C
		public static void MemoryBarrier(MemoryBarrierFlags barriers)
		{
			calli(System.Void(System.Int32), barriers, GL.EntryPoints[355]);
		}

		// Token: 0x0600545A RID: 21594 RVA: 0x000E6BB0 File Offset: 0x000E4DB0
		public static void Minmax(MinmaxTarget target, PixelInternalFormat internalformat, bool sink)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean), target, internalformat, sink, GL.EntryPoints[356]);
		}

		// Token: 0x0600545B RID: 21595 RVA: 0x000E6BC8 File Offset: 0x000E4DC8
		public static void MinSampleShading(float value)
		{
			calli(System.Void(System.Single), value, GL.EntryPoints[357]);
		}

		// Token: 0x0600545C RID: 21596 RVA: 0x000E6BDC File Offset: 0x000E4DDC
		[CLSCompliant(false)]
		public unsafe static void MultiDrawArrays(PrimitiveType mode, int[] first, int[] count, int drawcount)
		{
			fixed (int* ptr = ref (first != null && first.Length != 0) ? ref first[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, drawcount, GL.EntryPoints[359]);
				}
			}
		}

		// Token: 0x0600545D RID: 21597 RVA: 0x000E6C28 File Offset: 0x000E4E28
		[CLSCompliant(false)]
		public unsafe static void MultiDrawArrays(PrimitiveType mode, ref int first, ref int count, int drawcount)
		{
			fixed (int* ptr = &first)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &count)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, drawcount, GL.EntryPoints[359]);
				}
			}
		}

		// Token: 0x0600545E RID: 21598 RVA: 0x000E6C50 File Offset: 0x000E4E50
		[CLSCompliant(false)]
		public unsafe static void MultiDrawArrays(PrimitiveType mode, int* first, int* count, int drawcount)
		{
			calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, first, count, drawcount, GL.EntryPoints[359]);
		}

		// Token: 0x0600545F RID: 21599 RVA: 0x000E6C68 File Offset: 0x000E4E68
		public static void MultiDrawArraysIndirect(PrimitiveType mode, IntPtr indirect, int drawcount, int stride)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32), mode, indirect, drawcount, stride, GL.EntryPoints[360]);
		}

		// Token: 0x06005460 RID: 21600 RVA: 0x000E6C80 File Offset: 0x000E4E80
		[CLSCompliant(false)]
		public unsafe static void MultiDrawArraysIndirect<T1>(PrimitiveType mode, [In] [Out] T1[] indirect, int drawcount, int stride) where T1 : struct
		{
			fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32), mode, ptr, drawcount, stride, GL.EntryPoints[360]);
			}
		}

		// Token: 0x06005461 RID: 21601 RVA: 0x000E6CB8 File Offset: 0x000E4EB8
		[CLSCompliant(false)]
		public unsafe static void MultiDrawArraysIndirect<T1>(PrimitiveType mode, [In] [Out] T1[,] indirect, int drawcount, int stride) where T1 : struct
		{
			fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32), mode, ptr, drawcount, stride, GL.EntryPoints[360]);
			}
		}

		// Token: 0x06005462 RID: 21602 RVA: 0x000E6CF4 File Offset: 0x000E4EF4
		[CLSCompliant(false)]
		public unsafe static void MultiDrawArraysIndirect<T1>(PrimitiveType mode, [In] [Out] T1[,,] indirect, int drawcount, int stride) where T1 : struct
		{
			fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32), mode, ptr, drawcount, stride, GL.EntryPoints[360]);
			}
		}

		// Token: 0x06005463 RID: 21603 RVA: 0x000E6D30 File Offset: 0x000E4F30
		public unsafe static void MultiDrawArraysIndirect<T1>(PrimitiveType mode, [In] [Out] ref T1 indirect, int drawcount, int stride) where T1 : struct
		{
			fixed (T1* ptr = &indirect)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32), mode, ptr, drawcount, stride, GL.EntryPoints[360]);
			}
		}

		// Token: 0x06005464 RID: 21604 RVA: 0x000E6D54 File Offset: 0x000E4F54
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements(PrimitiveType mode, int[] count, DrawElementsType type, IntPtr indices, int drawcount)
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr, type, indices, drawcount, GL.EntryPoints[362]);
			}
		}

		// Token: 0x06005465 RID: 21605 RVA: 0x000E6D8C File Offset: 0x000E4F8C
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[362]);
				}
			}
		}

		// Token: 0x06005466 RID: 21606 RVA: 0x000E6DDC File Offset: 0x000E4FDC
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[362]);
				}
			}
		}

		// Token: 0x06005467 RID: 21607 RVA: 0x000E6E30 File Offset: 0x000E5030
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[362]);
				}
			}
		}

		// Token: 0x06005468 RID: 21608 RVA: 0x000E6E84 File Offset: 0x000E5084
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &indices)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[362]);
				}
			}
		}

		// Token: 0x06005469 RID: 21609 RVA: 0x000E6EC0 File Offset: 0x000E50C0
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements(PrimitiveType mode, ref int count, DrawElementsType type, IntPtr indices, int drawcount)
		{
			fixed (int* ptr = &count)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr, type, indices, drawcount, GL.EntryPoints[362]);
			}
		}

		// Token: 0x0600546A RID: 21610 RVA: 0x000E6EE8 File Offset: 0x000E50E8
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[362]);
				}
			}
		}

		// Token: 0x0600546B RID: 21611 RVA: 0x000E6F24 File Offset: 0x000E5124
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[362]);
				}
			}
		}

		// Token: 0x0600546C RID: 21612 RVA: 0x000E6F64 File Offset: 0x000E5164
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[362]);
				}
			}
		}

		// Token: 0x0600546D RID: 21613 RVA: 0x000E6FA4 File Offset: 0x000E51A4
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &indices)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[362]);
				}
			}
		}

		// Token: 0x0600546E RID: 21614 RVA: 0x000E6FD0 File Offset: 0x000E51D0
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements(PrimitiveType mode, int* count, DrawElementsType type, IntPtr indices, int drawcount)
		{
			calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, drawcount, GL.EntryPoints[362]);
		}

		// Token: 0x0600546F RID: 21615 RVA: 0x000E6FE8 File Offset: 0x000E51E8
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, drawcount, GL.EntryPoints[362]);
			}
		}

		// Token: 0x06005470 RID: 21616 RVA: 0x000E7020 File Offset: 0x000E5220
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, drawcount, GL.EntryPoints[362]);
			}
		}

		// Token: 0x06005471 RID: 21617 RVA: 0x000E705C File Offset: 0x000E525C
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, drawcount, GL.EntryPoints[362]);
			}
		}

		// Token: 0x06005472 RID: 21618 RVA: 0x000E709C File Offset: 0x000E529C
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, drawcount, GL.EntryPoints[362]);
			}
		}

		// Token: 0x06005473 RID: 21619 RVA: 0x000E70C4 File Offset: 0x000E52C4
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex(PrimitiveType mode, int[] count, DrawElementsType type, IntPtr indices, int drawcount, int[] basevertex)
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (basevertex != null && basevertex.Length != 0) ? ref basevertex[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, indices, drawcount, ptr3, GL.EntryPoints[363]);
				}
			}
		}

		// Token: 0x06005474 RID: 21620 RVA: 0x000E7118 File Offset: 0x000E5318
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount, int[] basevertex) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = ref (basevertex != null && basevertex.Length != 0) ? ref basevertex[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[363]);
					}
				}
			}
		}

		// Token: 0x06005475 RID: 21621 RVA: 0x000E7180 File Offset: 0x000E5380
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount, int[] basevertex) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = ref (basevertex != null && basevertex.Length != 0) ? ref basevertex[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[363]);
					}
				}
			}
		}

		// Token: 0x06005476 RID: 21622 RVA: 0x000E71EC File Offset: 0x000E53EC
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount, int[] basevertex) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = ref (basevertex != null && basevertex.Length != 0) ? ref basevertex[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[363]);
					}
				}
			}
		}

		// Token: 0x06005477 RID: 21623 RVA: 0x000E7258 File Offset: 0x000E5458
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount, int[] basevertex) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &indices)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = ref (basevertex != null && basevertex.Length != 0) ? ref basevertex[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[363]);
					}
				}
			}
		}

		// Token: 0x06005478 RID: 21624 RVA: 0x000E72AC File Offset: 0x000E54AC
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex(PrimitiveType mode, ref int count, DrawElementsType type, IntPtr indices, int drawcount, ref int basevertex)
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &basevertex)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, indices, drawcount, ptr3, GL.EntryPoints[363]);
				}
			}
		}

		// Token: 0x06005479 RID: 21625 RVA: 0x000E72D8 File Offset: 0x000E54D8
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount, ref int basevertex) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = &basevertex)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[363]);
					}
				}
			}
		}

		// Token: 0x0600547A RID: 21626 RVA: 0x000E7318 File Offset: 0x000E5518
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount, ref int basevertex) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = &basevertex)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[363]);
					}
				}
			}
		}

		// Token: 0x0600547B RID: 21627 RVA: 0x000E735C File Offset: 0x000E555C
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount, ref int basevertex) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = &basevertex)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[363]);
					}
				}
			}
		}

		// Token: 0x0600547C RID: 21628 RVA: 0x000E73A4 File Offset: 0x000E55A4
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount, ref int basevertex) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &indices)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = &basevertex)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[363]);
					}
				}
			}
		}

		// Token: 0x0600547D RID: 21629 RVA: 0x000E73D4 File Offset: 0x000E55D4
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex(PrimitiveType mode, int* count, DrawElementsType type, IntPtr indices, int drawcount, int* basevertex)
		{
			calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, count, type, indices, drawcount, basevertex, GL.EntryPoints[363]);
		}

		// Token: 0x0600547E RID: 21630 RVA: 0x000E73F0 File Offset: 0x000E55F0
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount, int* basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, count, type, ptr, drawcount, basevertex, GL.EntryPoints[363]);
			}
		}

		// Token: 0x0600547F RID: 21631 RVA: 0x000E742C File Offset: 0x000E562C
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount, int* basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, count, type, ptr, drawcount, basevertex, GL.EntryPoints[363]);
			}
		}

		// Token: 0x06005480 RID: 21632 RVA: 0x000E746C File Offset: 0x000E566C
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount, int* basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, count, type, ptr, drawcount, basevertex, GL.EntryPoints[363]);
			}
		}

		// Token: 0x06005481 RID: 21633 RVA: 0x000E74AC File Offset: 0x000E56AC
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount, int* basevertex) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, count, type, ptr, drawcount, basevertex, GL.EntryPoints[363]);
			}
		}

		// Token: 0x06005482 RID: 21634 RVA: 0x000E74D4 File Offset: 0x000E56D4
		public static void MultiDrawElementsIndirect(All mode, All type, IntPtr indirect, int drawcount, int stride)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, type, indirect, drawcount, stride, GL.EntryPoints[364]);
		}

		// Token: 0x06005483 RID: 21635 RVA: 0x000E74EC File Offset: 0x000E56EC
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsIndirect<T2>(All mode, All type, [In] [Out] T2[] indirect, int drawcount, int stride) where T2 : struct
		{
			fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, type, ptr, drawcount, stride, GL.EntryPoints[364]);
			}
		}

		// Token: 0x06005484 RID: 21636 RVA: 0x000E7524 File Offset: 0x000E5724
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsIndirect<T2>(All mode, All type, [In] [Out] T2[,] indirect, int drawcount, int stride) where T2 : struct
		{
			fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, type, ptr, drawcount, stride, GL.EntryPoints[364]);
			}
		}

		// Token: 0x06005485 RID: 21637 RVA: 0x000E7560 File Offset: 0x000E5760
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsIndirect<T2>(All mode, All type, [In] [Out] T2[,,] indirect, int drawcount, int stride) where T2 : struct
		{
			fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, type, ptr, drawcount, stride, GL.EntryPoints[364]);
			}
		}

		// Token: 0x06005486 RID: 21638 RVA: 0x000E75A0 File Offset: 0x000E57A0
		public unsafe static void MultiDrawElementsIndirect<T2>(All mode, All type, [In] [Out] ref T2 indirect, int drawcount, int stride) where T2 : struct
		{
			fixed (T2* ptr = &indirect)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, type, ptr, drawcount, stride, GL.EntryPoints[364]);
			}
		}

		// Token: 0x06005487 RID: 21639 RVA: 0x000E75C8 File Offset: 0x000E57C8
		[CLSCompliant(false)]
		public static void MultiTexCoordP1(TextureUnit texture, PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), texture, type, coords, GL.EntryPoints[366]);
		}

		// Token: 0x06005488 RID: 21640 RVA: 0x000E75E0 File Offset: 0x000E57E0
		[CLSCompliant(false)]
		public static void MultiTexCoordP1(TextureUnit texture, PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), texture, type, coords, GL.EntryPoints[366]);
		}

		// Token: 0x06005489 RID: 21641 RVA: 0x000E75F8 File Offset: 0x000E57F8
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoordP1(TextureUnit texture, PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), texture, type, coords, GL.EntryPoints[367]);
		}

		// Token: 0x0600548A RID: 21642 RVA: 0x000E7610 File Offset: 0x000E5810
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoordP1(TextureUnit texture, PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), texture, type, coords, GL.EntryPoints[367]);
		}

		// Token: 0x0600548B RID: 21643 RVA: 0x000E7628 File Offset: 0x000E5828
		[CLSCompliant(false)]
		public static void MultiTexCoordP2(TextureUnit texture, PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), texture, type, coords, GL.EntryPoints[368]);
		}

		// Token: 0x0600548C RID: 21644 RVA: 0x000E7640 File Offset: 0x000E5840
		[CLSCompliant(false)]
		public static void MultiTexCoordP2(TextureUnit texture, PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), texture, type, coords, GL.EntryPoints[368]);
		}

		// Token: 0x0600548D RID: 21645 RVA: 0x000E7658 File Offset: 0x000E5858
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoordP2(TextureUnit texture, PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), texture, type, coords, GL.EntryPoints[369]);
		}

		// Token: 0x0600548E RID: 21646 RVA: 0x000E7670 File Offset: 0x000E5870
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoordP2(TextureUnit texture, PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), texture, type, coords, GL.EntryPoints[369]);
		}

		// Token: 0x0600548F RID: 21647 RVA: 0x000E7688 File Offset: 0x000E5888
		[CLSCompliant(false)]
		public static void MultiTexCoordP3(TextureUnit texture, PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), texture, type, coords, GL.EntryPoints[370]);
		}

		// Token: 0x06005490 RID: 21648 RVA: 0x000E76A0 File Offset: 0x000E58A0
		[CLSCompliant(false)]
		public static void MultiTexCoordP3(TextureUnit texture, PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), texture, type, coords, GL.EntryPoints[370]);
		}

		// Token: 0x06005491 RID: 21649 RVA: 0x000E76B8 File Offset: 0x000E58B8
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoordP3(TextureUnit texture, PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), texture, type, coords, GL.EntryPoints[371]);
		}

		// Token: 0x06005492 RID: 21650 RVA: 0x000E76D0 File Offset: 0x000E58D0
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoordP3(TextureUnit texture, PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), texture, type, coords, GL.EntryPoints[371]);
		}

		// Token: 0x06005493 RID: 21651 RVA: 0x000E76E8 File Offset: 0x000E58E8
		[CLSCompliant(false)]
		public static void MultiTexCoordP4(TextureUnit texture, PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), texture, type, coords, GL.EntryPoints[372]);
		}

		// Token: 0x06005494 RID: 21652 RVA: 0x000E7700 File Offset: 0x000E5900
		[CLSCompliant(false)]
		public static void MultiTexCoordP4(TextureUnit texture, PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), texture, type, coords, GL.EntryPoints[372]);
		}

		// Token: 0x06005495 RID: 21653 RVA: 0x000E7718 File Offset: 0x000E5918
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoordP4(TextureUnit texture, PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), texture, type, coords, GL.EntryPoints[373]);
		}

		// Token: 0x06005496 RID: 21654 RVA: 0x000E7730 File Offset: 0x000E5930
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoordP4(TextureUnit texture, PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), texture, type, coords, GL.EntryPoints[373]);
		}

		// Token: 0x06005497 RID: 21655 RVA: 0x000E7748 File Offset: 0x000E5948
		[CLSCompliant(false)]
		public static void NormalP3(PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[375]);
		}

		// Token: 0x06005498 RID: 21656 RVA: 0x000E775C File Offset: 0x000E595C
		[CLSCompliant(false)]
		public static void NormalP3(PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[375]);
		}

		// Token: 0x06005499 RID: 21657 RVA: 0x000E7770 File Offset: 0x000E5970
		[CLSCompliant(false)]
		public unsafe static void NormalP3(PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[376]);
		}

		// Token: 0x0600549A RID: 21658 RVA: 0x000E7784 File Offset: 0x000E5984
		[CLSCompliant(false)]
		public unsafe static void NormalP3(PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[376]);
		}

		// Token: 0x0600549B RID: 21659 RVA: 0x000E7798 File Offset: 0x000E5998
		[CLSCompliant(false)]
		public static void ObjectLabel(ObjectLabelIdentifier identifier, int name, int length, string label)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), identifier, name, length, intPtr, GL.EntryPoints[377]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x0600549C RID: 21660 RVA: 0x000E77C8 File Offset: 0x000E59C8
		[CLSCompliant(false)]
		public static void ObjectLabel(ObjectLabelIdentifier identifier, uint name, int length, string label)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), identifier, name, length, intPtr, GL.EntryPoints[377]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x0600549D RID: 21661 RVA: 0x000E77F8 File Offset: 0x000E59F8
		public static void ObjectPtrLabel(IntPtr ptr, int length, string label)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
			calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr, length, intPtr, GL.EntryPoints[379]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x0600549E RID: 21662 RVA: 0x000E7828 File Offset: 0x000E5A28
		[CLSCompliant(false)]
		public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[] ptr, int length, string label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[379]);
				BindingsBase.FreeStringPtr(intPtr);
			}
		}

		// Token: 0x0600549F RID: 21663 RVA: 0x000E786C File Offset: 0x000E5A6C
		[CLSCompliant(false)]
		public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int length, string label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[379]);
				BindingsBase.FreeStringPtr(intPtr);
			}
		}

		// Token: 0x060054A0 RID: 21664 RVA: 0x000E78B4 File Offset: 0x000E5AB4
		[CLSCompliant(false)]
		public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int length, string label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[379]);
				BindingsBase.FreeStringPtr(intPtr);
			}
		}

		// Token: 0x060054A1 RID: 21665 RVA: 0x000E78FC File Offset: 0x000E5AFC
		public unsafe static void ObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int length, string label) where T0 : struct
		{
			fixed (T0* ptr2 = &ptr)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[379]);
				BindingsBase.FreeStringPtr(intPtr);
			}
		}

		// Token: 0x060054A2 RID: 21666 RVA: 0x000E792C File Offset: 0x000E5B2C
		[CLSCompliant(false)]
		public unsafe static void PatchParameter(PatchParameterFloat pname, float[] values)
		{
			fixed (float* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[381]);
			}
		}

		// Token: 0x060054A3 RID: 21667 RVA: 0x000E7960 File Offset: 0x000E5B60
		[CLSCompliant(false)]
		public unsafe static void PatchParameter(PatchParameterFloat pname, ref float values)
		{
			fixed (float* ptr = &values)
			{
				calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[381]);
			}
		}

		// Token: 0x060054A4 RID: 21668 RVA: 0x000E7984 File Offset: 0x000E5B84
		[CLSCompliant(false)]
		public unsafe static void PatchParameter(PatchParameterFloat pname, float* values)
		{
			calli(System.Void(System.Int32,System.Single*), pname, values, GL.EntryPoints[381]);
		}

		// Token: 0x060054A5 RID: 21669 RVA: 0x000E7998 File Offset: 0x000E5B98
		public static void PatchParameter(PatchParameterInt pname, int value)
		{
			calli(System.Void(System.Int32,System.Int32), pname, value, GL.EntryPoints[382]);
		}

		// Token: 0x060054A6 RID: 21670 RVA: 0x000E79AC File Offset: 0x000E5BAC
		public static void PauseTransformFeedback()
		{
			calli(System.Void(), GL.EntryPoints[383]);
		}

		// Token: 0x060054A7 RID: 21671 RVA: 0x000E79C0 File Offset: 0x000E5BC0
		public static void PixelStore(PixelStoreParameter pname, float param)
		{
			calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[384]);
		}

		// Token: 0x060054A8 RID: 21672 RVA: 0x000E79D4 File Offset: 0x000E5BD4
		public static void PixelStore(PixelStoreParameter pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[385]);
		}

		// Token: 0x060054A9 RID: 21673 RVA: 0x000E79E8 File Offset: 0x000E5BE8
		public static void PointParameter(PointParameterName pname, float param)
		{
			calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[386]);
		}

		// Token: 0x060054AA RID: 21674 RVA: 0x000E79FC File Offset: 0x000E5BFC
		[CLSCompliant(false)]
		public unsafe static void PointParameter(PointParameterName pname, float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[387]);
			}
		}

		// Token: 0x060054AB RID: 21675 RVA: 0x000E7A30 File Offset: 0x000E5C30
		[CLSCompliant(false)]
		public unsafe static void PointParameter(PointParameterName pname, float* @params)
		{
			calli(System.Void(System.Int32,System.Single*), pname, @params, GL.EntryPoints[387]);
		}

		// Token: 0x060054AC RID: 21676 RVA: 0x000E7A44 File Offset: 0x000E5C44
		public static void PointParameter(PointParameterName pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[388]);
		}

		// Token: 0x060054AD RID: 21677 RVA: 0x000E7A58 File Offset: 0x000E5C58
		[CLSCompliant(false)]
		public unsafe static void PointParameter(PointParameterName pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[389]);
			}
		}

		// Token: 0x060054AE RID: 21678 RVA: 0x000E7A8C File Offset: 0x000E5C8C
		[CLSCompliant(false)]
		public unsafe static void PointParameter(PointParameterName pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32*), pname, @params, GL.EntryPoints[389]);
		}

		// Token: 0x060054AF RID: 21679 RVA: 0x000E7AA0 File Offset: 0x000E5CA0
		public static void PointSize(float size)
		{
			calli(System.Void(System.Single), size, GL.EntryPoints[390]);
		}

		// Token: 0x060054B0 RID: 21680 RVA: 0x000E7AB4 File Offset: 0x000E5CB4
		public static void PolygonMode(MaterialFace face, PolygonMode mode)
		{
			calli(System.Void(System.Int32,System.Int32), face, mode, GL.EntryPoints[391]);
		}

		// Token: 0x060054B1 RID: 21681 RVA: 0x000E7AC8 File Offset: 0x000E5CC8
		public static void PolygonOffset(float factor, float units)
		{
			calli(System.Void(System.Single,System.Single), factor, units, GL.EntryPoints[392]);
		}

		// Token: 0x060054B2 RID: 21682 RVA: 0x000E7ADC File Offset: 0x000E5CDC
		public static void PopDebugGroup()
		{
			calli(System.Void(), GL.EntryPoints[393]);
		}

		// Token: 0x060054B3 RID: 21683 RVA: 0x000E7AF0 File Offset: 0x000E5CF0
		[CLSCompliant(false)]
		public static void PrimitiveRestartIndex(int index)
		{
			calli(System.Void(System.UInt32), index, GL.EntryPoints[395]);
		}

		// Token: 0x060054B4 RID: 21684 RVA: 0x000E7B04 File Offset: 0x000E5D04
		[CLSCompliant(false)]
		public static void PrimitiveRestartIndex(uint index)
		{
			calli(System.Void(System.UInt32), index, GL.EntryPoints[395]);
		}

		// Token: 0x060054B5 RID: 21685 RVA: 0x000E7B18 File Offset: 0x000E5D18
		[CLSCompliant(false)]
		public static void ProgramBinary(int program, BinaryFormat binaryFormat, IntPtr binary, int length)
		{
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, binary, length, GL.EntryPoints[396]);
		}

		// Token: 0x060054B6 RID: 21686 RVA: 0x000E7B30 File Offset: 0x000E5D30
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, [In] [Out] T2[] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[396]);
			}
		}

		// Token: 0x060054B7 RID: 21687 RVA: 0x000E7B68 File Offset: 0x000E5D68
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, [In] [Out] T2[,] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[396]);
			}
		}

		// Token: 0x060054B8 RID: 21688 RVA: 0x000E7BA4 File Offset: 0x000E5DA4
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, [In] [Out] T2[,,] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[396]);
			}
		}

		// Token: 0x060054B9 RID: 21689 RVA: 0x000E7BE0 File Offset: 0x000E5DE0
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, [In] [Out] ref T2 binary, int length) where T2 : struct
		{
			fixed (T2* ptr = &binary)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[396]);
			}
		}

		// Token: 0x060054BA RID: 21690 RVA: 0x000E7C04 File Offset: 0x000E5E04
		[CLSCompliant(false)]
		public static void ProgramBinary(uint program, BinaryFormat binaryFormat, IntPtr binary, int length)
		{
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, binary, length, GL.EntryPoints[396]);
		}

		// Token: 0x060054BB RID: 21691 RVA: 0x000E7C1C File Offset: 0x000E5E1C
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, [In] [Out] T2[] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[396]);
			}
		}

		// Token: 0x060054BC RID: 21692 RVA: 0x000E7C54 File Offset: 0x000E5E54
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, [In] [Out] T2[,] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[396]);
			}
		}

		// Token: 0x060054BD RID: 21693 RVA: 0x000E7C90 File Offset: 0x000E5E90
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, [In] [Out] T2[,,] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[396]);
			}
		}

		// Token: 0x060054BE RID: 21694 RVA: 0x000E7CCC File Offset: 0x000E5ECC
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, [In] [Out] ref T2 binary, int length) where T2 : struct
		{
			fixed (T2* ptr = &binary)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[396]);
			}
		}

		// Token: 0x060054BF RID: 21695 RVA: 0x000E7CF0 File Offset: 0x000E5EF0
		[CLSCompliant(false)]
		public static void ProgramParameter(int program, ProgramParameterName pname, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[397]);
		}

		// Token: 0x060054C0 RID: 21696 RVA: 0x000E7D08 File Offset: 0x000E5F08
		[CLSCompliant(false)]
		public static void ProgramParameter(uint program, ProgramParameterName pname, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[397]);
		}

		// Token: 0x060054C1 RID: 21697 RVA: 0x000E7D20 File Offset: 0x000E5F20
		[CLSCompliant(false)]
		public static void ProgramUniform1(int program, int location, double v0)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double), program, location, v0, GL.EntryPoints[398]);
		}

		// Token: 0x060054C2 RID: 21698 RVA: 0x000E7D38 File Offset: 0x000E5F38
		[CLSCompliant(false)]
		public static void ProgramUniform1(uint program, int location, double v0)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double), program, location, v0, GL.EntryPoints[398]);
		}

		// Token: 0x060054C3 RID: 21699 RVA: 0x000E7D50 File Offset: 0x000E5F50
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(int program, int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[399]);
			}
		}

		// Token: 0x060054C4 RID: 21700 RVA: 0x000E7D74 File Offset: 0x000E5F74
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(int program, int location, int count, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[399]);
		}

		// Token: 0x060054C5 RID: 21701 RVA: 0x000E7D8C File Offset: 0x000E5F8C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(uint program, int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[399]);
			}
		}

		// Token: 0x060054C6 RID: 21702 RVA: 0x000E7DB0 File Offset: 0x000E5FB0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(uint program, int location, int count, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[399]);
		}

		// Token: 0x060054C7 RID: 21703 RVA: 0x000E7DC8 File Offset: 0x000E5FC8
		[CLSCompliant(false)]
		public static void ProgramUniform1(int program, int location, float v0)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single), program, location, v0, GL.EntryPoints[400]);
		}

		// Token: 0x060054C8 RID: 21704 RVA: 0x000E7DE0 File Offset: 0x000E5FE0
		[CLSCompliant(false)]
		public static void ProgramUniform1(uint program, int location, float v0)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single), program, location, v0, GL.EntryPoints[400]);
		}

		// Token: 0x060054C9 RID: 21705 RVA: 0x000E7DF8 File Offset: 0x000E5FF8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(int program, int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[401]);
			}
		}

		// Token: 0x060054CA RID: 21706 RVA: 0x000E7E1C File Offset: 0x000E601C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(int program, int location, int count, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[401]);
		}

		// Token: 0x060054CB RID: 21707 RVA: 0x000E7E34 File Offset: 0x000E6034
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(uint program, int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[401]);
			}
		}

		// Token: 0x060054CC RID: 21708 RVA: 0x000E7E58 File Offset: 0x000E6058
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(uint program, int location, int count, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[401]);
		}

		// Token: 0x060054CD RID: 21709 RVA: 0x000E7E70 File Offset: 0x000E6070
		[CLSCompliant(false)]
		public static void ProgramUniform1(int program, int location, int v0)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), program, location, v0, GL.EntryPoints[402]);
		}

		// Token: 0x060054CE RID: 21710 RVA: 0x000E7E88 File Offset: 0x000E6088
		[CLSCompliant(false)]
		public static void ProgramUniform1(uint program, int location, int v0)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), program, location, v0, GL.EntryPoints[402]);
		}

		// Token: 0x060054CF RID: 21711 RVA: 0x000E7EA0 File Offset: 0x000E60A0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(int program, int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[403]);
			}
		}

		// Token: 0x060054D0 RID: 21712 RVA: 0x000E7EC4 File Offset: 0x000E60C4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(int program, int location, int count, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[403]);
		}

		// Token: 0x060054D1 RID: 21713 RVA: 0x000E7EDC File Offset: 0x000E60DC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(uint program, int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[403]);
			}
		}

		// Token: 0x060054D2 RID: 21714 RVA: 0x000E7F00 File Offset: 0x000E6100
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(uint program, int location, int count, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[403]);
		}

		// Token: 0x060054D3 RID: 21715 RVA: 0x000E7F18 File Offset: 0x000E6118
		[CLSCompliant(false)]
		public static void ProgramUniform1(uint program, int location, uint v0)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32), program, location, v0, GL.EntryPoints[404]);
		}

		// Token: 0x060054D4 RID: 21716 RVA: 0x000E7F30 File Offset: 0x000E6130
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(uint program, int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[405]);
			}
		}

		// Token: 0x060054D5 RID: 21717 RVA: 0x000E7F54 File Offset: 0x000E6154
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(uint program, int location, int count, uint* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, value, GL.EntryPoints[405]);
		}

		// Token: 0x060054D6 RID: 21718 RVA: 0x000E7F6C File Offset: 0x000E616C
		[CLSCompliant(false)]
		public static void ProgramUniform2(int program, int location, double v0, double v1)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double), program, location, v0, v1, GL.EntryPoints[406]);
		}

		// Token: 0x060054D7 RID: 21719 RVA: 0x000E7F84 File Offset: 0x000E6184
		[CLSCompliant(false)]
		public static void ProgramUniform2(uint program, int location, double v0, double v1)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double), program, location, v0, v1, GL.EntryPoints[406]);
		}

		// Token: 0x060054D8 RID: 21720 RVA: 0x000E7F9C File Offset: 0x000E619C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(int program, int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[407]);
			}
		}

		// Token: 0x060054D9 RID: 21721 RVA: 0x000E7FD4 File Offset: 0x000E61D4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(int program, int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[407]);
			}
		}

		// Token: 0x060054DA RID: 21722 RVA: 0x000E7FF8 File Offset: 0x000E61F8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(int program, int location, int count, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[407]);
		}

		// Token: 0x060054DB RID: 21723 RVA: 0x000E8010 File Offset: 0x000E6210
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[407]);
			}
		}

		// Token: 0x060054DC RID: 21724 RVA: 0x000E8048 File Offset: 0x000E6248
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[407]);
			}
		}

		// Token: 0x060054DD RID: 21725 RVA: 0x000E806C File Offset: 0x000E626C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[407]);
		}

		// Token: 0x060054DE RID: 21726 RVA: 0x000E8084 File Offset: 0x000E6284
		[CLSCompliant(false)]
		public static void ProgramUniform2(int program, int location, float v0, float v1)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single), program, location, v0, v1, GL.EntryPoints[408]);
		}

		// Token: 0x060054DF RID: 21727 RVA: 0x000E809C File Offset: 0x000E629C
		[CLSCompliant(false)]
		public static void ProgramUniform2(uint program, int location, float v0, float v1)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single), program, location, v0, v1, GL.EntryPoints[408]);
		}

		// Token: 0x060054E0 RID: 21728 RVA: 0x000E80B4 File Offset: 0x000E62B4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(int program, int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[409]);
			}
		}

		// Token: 0x060054E1 RID: 21729 RVA: 0x000E80EC File Offset: 0x000E62EC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(int program, int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[409]);
			}
		}

		// Token: 0x060054E2 RID: 21730 RVA: 0x000E8110 File Offset: 0x000E6310
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(int program, int location, int count, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[409]);
		}

		// Token: 0x060054E3 RID: 21731 RVA: 0x000E8128 File Offset: 0x000E6328
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[409]);
			}
		}

		// Token: 0x060054E4 RID: 21732 RVA: 0x000E8160 File Offset: 0x000E6360
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[409]);
			}
		}

		// Token: 0x060054E5 RID: 21733 RVA: 0x000E8184 File Offset: 0x000E6384
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[409]);
		}

		// Token: 0x060054E6 RID: 21734 RVA: 0x000E819C File Offset: 0x000E639C
		[CLSCompliant(false)]
		public static void ProgramUniform2(int program, int location, int v0, int v1)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, GL.EntryPoints[410]);
		}

		// Token: 0x060054E7 RID: 21735 RVA: 0x000E81B4 File Offset: 0x000E63B4
		[CLSCompliant(false)]
		public static void ProgramUniform2(uint program, int location, int v0, int v1)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, GL.EntryPoints[410]);
		}

		// Token: 0x060054E8 RID: 21736 RVA: 0x000E81CC File Offset: 0x000E63CC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(int program, int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[411]);
			}
		}

		// Token: 0x060054E9 RID: 21737 RVA: 0x000E8204 File Offset: 0x000E6404
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(int program, int location, int count, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[411]);
		}

		// Token: 0x060054EA RID: 21738 RVA: 0x000E821C File Offset: 0x000E641C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[411]);
			}
		}

		// Token: 0x060054EB RID: 21739 RVA: 0x000E8254 File Offset: 0x000E6454
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[411]);
		}

		// Token: 0x060054EC RID: 21740 RVA: 0x000E826C File Offset: 0x000E646C
		[CLSCompliant(false)]
		public static void ProgramUniform2(uint program, int location, uint v0, uint v1)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32), program, location, v0, v1, GL.EntryPoints[412]);
		}

		// Token: 0x060054ED RID: 21741 RVA: 0x000E8284 File Offset: 0x000E6484
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[413]);
			}
		}

		// Token: 0x060054EE RID: 21742 RVA: 0x000E82BC File Offset: 0x000E64BC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[413]);
			}
		}

		// Token: 0x060054EF RID: 21743 RVA: 0x000E82E0 File Offset: 0x000E64E0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, uint* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, value, GL.EntryPoints[413]);
		}

		// Token: 0x060054F0 RID: 21744 RVA: 0x000E82F8 File Offset: 0x000E64F8
		[CLSCompliant(false)]
		public static void ProgramUniform3(int program, int location, double v0, double v1, double v2)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double,System.Double), program, location, v0, v1, v2, GL.EntryPoints[414]);
		}

		// Token: 0x060054F1 RID: 21745 RVA: 0x000E8310 File Offset: 0x000E6510
		[CLSCompliant(false)]
		public static void ProgramUniform3(uint program, int location, double v0, double v1, double v2)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double,System.Double), program, location, v0, v1, v2, GL.EntryPoints[414]);
		}

		// Token: 0x060054F2 RID: 21746 RVA: 0x000E8328 File Offset: 0x000E6528
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[415]);
			}
		}

		// Token: 0x060054F3 RID: 21747 RVA: 0x000E8360 File Offset: 0x000E6560
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[415]);
			}
		}

		// Token: 0x060054F4 RID: 21748 RVA: 0x000E8384 File Offset: 0x000E6584
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[415]);
		}

		// Token: 0x060054F5 RID: 21749 RVA: 0x000E839C File Offset: 0x000E659C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[415]);
			}
		}

		// Token: 0x060054F6 RID: 21750 RVA: 0x000E83D4 File Offset: 0x000E65D4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[415]);
			}
		}

		// Token: 0x060054F7 RID: 21751 RVA: 0x000E83F8 File Offset: 0x000E65F8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[415]);
		}

		// Token: 0x060054F8 RID: 21752 RVA: 0x000E8410 File Offset: 0x000E6610
		[CLSCompliant(false)]
		public static void ProgramUniform3(int program, int location, float v0, float v1, float v2)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single,System.Single), program, location, v0, v1, v2, GL.EntryPoints[416]);
		}

		// Token: 0x060054F9 RID: 21753 RVA: 0x000E8428 File Offset: 0x000E6628
		[CLSCompliant(false)]
		public static void ProgramUniform3(uint program, int location, float v0, float v1, float v2)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single,System.Single), program, location, v0, v1, v2, GL.EntryPoints[416]);
		}

		// Token: 0x060054FA RID: 21754 RVA: 0x000E8440 File Offset: 0x000E6640
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[417]);
			}
		}

		// Token: 0x060054FB RID: 21755 RVA: 0x000E8478 File Offset: 0x000E6678
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[417]);
			}
		}

		// Token: 0x060054FC RID: 21756 RVA: 0x000E849C File Offset: 0x000E669C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[417]);
		}

		// Token: 0x060054FD RID: 21757 RVA: 0x000E84B4 File Offset: 0x000E66B4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[417]);
			}
		}

		// Token: 0x060054FE RID: 21758 RVA: 0x000E84EC File Offset: 0x000E66EC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[417]);
			}
		}

		// Token: 0x060054FF RID: 21759 RVA: 0x000E8510 File Offset: 0x000E6710
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[417]);
		}

		// Token: 0x06005500 RID: 21760 RVA: 0x000E8528 File Offset: 0x000E6728
		[CLSCompliant(false)]
		public static void ProgramUniform3(int program, int location, int v0, int v1, int v2)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, v2, GL.EntryPoints[418]);
		}

		// Token: 0x06005501 RID: 21761 RVA: 0x000E8540 File Offset: 0x000E6740
		[CLSCompliant(false)]
		public static void ProgramUniform3(uint program, int location, int v0, int v1, int v2)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, v2, GL.EntryPoints[418]);
		}

		// Token: 0x06005502 RID: 21762 RVA: 0x000E8558 File Offset: 0x000E6758
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[419]);
			}
		}

		// Token: 0x06005503 RID: 21763 RVA: 0x000E8590 File Offset: 0x000E6790
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[419]);
			}
		}

		// Token: 0x06005504 RID: 21764 RVA: 0x000E85B4 File Offset: 0x000E67B4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[419]);
		}

		// Token: 0x06005505 RID: 21765 RVA: 0x000E85CC File Offset: 0x000E67CC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[419]);
			}
		}

		// Token: 0x06005506 RID: 21766 RVA: 0x000E8604 File Offset: 0x000E6804
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[419]);
			}
		}

		// Token: 0x06005507 RID: 21767 RVA: 0x000E8628 File Offset: 0x000E6828
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[419]);
		}

		// Token: 0x06005508 RID: 21768 RVA: 0x000E8640 File Offset: 0x000E6840
		[CLSCompliant(false)]
		public static void ProgramUniform3(uint program, int location, uint v0, uint v1, uint v2)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32), program, location, v0, v1, v2, GL.EntryPoints[420]);
		}

		// Token: 0x06005509 RID: 21769 RVA: 0x000E8658 File Offset: 0x000E6858
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[421]);
			}
		}

		// Token: 0x0600550A RID: 21770 RVA: 0x000E8690 File Offset: 0x000E6890
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[421]);
			}
		}

		// Token: 0x0600550B RID: 21771 RVA: 0x000E86B4 File Offset: 0x000E68B4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, uint* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, value, GL.EntryPoints[421]);
		}

		// Token: 0x0600550C RID: 21772 RVA: 0x000E86CC File Offset: 0x000E68CC
		[CLSCompliant(false)]
		public static void ProgramUniform4(int program, int location, double v0, double v1, double v2, double v3)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double,System.Double,System.Double), program, location, v0, v1, v2, v3, GL.EntryPoints[422]);
		}

		// Token: 0x0600550D RID: 21773 RVA: 0x000E86E8 File Offset: 0x000E68E8
		[CLSCompliant(false)]
		public static void ProgramUniform4(uint program, int location, double v0, double v1, double v2, double v3)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double,System.Double,System.Double), program, location, v0, v1, v2, v3, GL.EntryPoints[422]);
		}

		// Token: 0x0600550E RID: 21774 RVA: 0x000E8704 File Offset: 0x000E6904
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[423]);
			}
		}

		// Token: 0x0600550F RID: 21775 RVA: 0x000E873C File Offset: 0x000E693C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[423]);
			}
		}

		// Token: 0x06005510 RID: 21776 RVA: 0x000E8760 File Offset: 0x000E6960
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[423]);
		}

		// Token: 0x06005511 RID: 21777 RVA: 0x000E8778 File Offset: 0x000E6978
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[423]);
			}
		}

		// Token: 0x06005512 RID: 21778 RVA: 0x000E87B0 File Offset: 0x000E69B0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[423]);
			}
		}

		// Token: 0x06005513 RID: 21779 RVA: 0x000E87D4 File Offset: 0x000E69D4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[423]);
		}

		// Token: 0x06005514 RID: 21780 RVA: 0x000E87EC File Offset: 0x000E69EC
		[CLSCompliant(false)]
		public static void ProgramUniform4(int program, int location, float v0, float v1, float v2, float v3)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single,System.Single,System.Single), program, location, v0, v1, v2, v3, GL.EntryPoints[424]);
		}

		// Token: 0x06005515 RID: 21781 RVA: 0x000E8808 File Offset: 0x000E6A08
		[CLSCompliant(false)]
		public static void ProgramUniform4(uint program, int location, float v0, float v1, float v2, float v3)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single,System.Single,System.Single), program, location, v0, v1, v2, v3, GL.EntryPoints[424]);
		}

		// Token: 0x06005516 RID: 21782 RVA: 0x000E8824 File Offset: 0x000E6A24
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[425]);
			}
		}

		// Token: 0x06005517 RID: 21783 RVA: 0x000E885C File Offset: 0x000E6A5C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[425]);
			}
		}

		// Token: 0x06005518 RID: 21784 RVA: 0x000E8880 File Offset: 0x000E6A80
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[425]);
		}

		// Token: 0x06005519 RID: 21785 RVA: 0x000E8898 File Offset: 0x000E6A98
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[425]);
			}
		}

		// Token: 0x0600551A RID: 21786 RVA: 0x000E88D0 File Offset: 0x000E6AD0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[425]);
			}
		}

		// Token: 0x0600551B RID: 21787 RVA: 0x000E88F4 File Offset: 0x000E6AF4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[425]);
		}

		// Token: 0x0600551C RID: 21788 RVA: 0x000E890C File Offset: 0x000E6B0C
		[CLSCompliant(false)]
		public static void ProgramUniform4(int program, int location, int v0, int v1, int v2, int v3)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, v2, v3, GL.EntryPoints[426]);
		}

		// Token: 0x0600551D RID: 21789 RVA: 0x000E8928 File Offset: 0x000E6B28
		[CLSCompliant(false)]
		public static void ProgramUniform4(uint program, int location, int v0, int v1, int v2, int v3)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, v2, v3, GL.EntryPoints[426]);
		}

		// Token: 0x0600551E RID: 21790 RVA: 0x000E8944 File Offset: 0x000E6B44
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[427]);
			}
		}

		// Token: 0x0600551F RID: 21791 RVA: 0x000E897C File Offset: 0x000E6B7C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[427]);
			}
		}

		// Token: 0x06005520 RID: 21792 RVA: 0x000E89A0 File Offset: 0x000E6BA0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[427]);
		}

		// Token: 0x06005521 RID: 21793 RVA: 0x000E89B8 File Offset: 0x000E6BB8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[427]);
			}
		}

		// Token: 0x06005522 RID: 21794 RVA: 0x000E89F0 File Offset: 0x000E6BF0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[427]);
			}
		}

		// Token: 0x06005523 RID: 21795 RVA: 0x000E8A14 File Offset: 0x000E6C14
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[427]);
		}

		// Token: 0x06005524 RID: 21796 RVA: 0x000E8A2C File Offset: 0x000E6C2C
		[CLSCompliant(false)]
		public static void ProgramUniform4(uint program, int location, uint v0, uint v1, uint v2, uint v3)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), program, location, v0, v1, v2, v3, GL.EntryPoints[428]);
		}

		// Token: 0x06005525 RID: 21797 RVA: 0x000E8A48 File Offset: 0x000E6C48
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[429]);
			}
		}

		// Token: 0x06005526 RID: 21798 RVA: 0x000E8A80 File Offset: 0x000E6C80
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[429]);
			}
		}

		// Token: 0x06005527 RID: 21799 RVA: 0x000E8AA4 File Offset: 0x000E6CA4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, uint* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, value, GL.EntryPoints[429]);
		}

		// Token: 0x06005528 RID: 21800 RVA: 0x000E8ABC File Offset: 0x000E6CBC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[432]);
			}
		}

		// Token: 0x06005529 RID: 21801 RVA: 0x000E8AF8 File Offset: 0x000E6CF8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[432]);
			}
		}

		// Token: 0x0600552A RID: 21802 RVA: 0x000E8B20 File Offset: 0x000E6D20
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[432]);
		}

		// Token: 0x0600552B RID: 21803 RVA: 0x000E8B38 File Offset: 0x000E6D38
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[432]);
			}
		}

		// Token: 0x0600552C RID: 21804 RVA: 0x000E8B74 File Offset: 0x000E6D74
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[432]);
			}
		}

		// Token: 0x0600552D RID: 21805 RVA: 0x000E8B9C File Offset: 0x000E6D9C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[432]);
		}

		// Token: 0x0600552E RID: 21806 RVA: 0x000E8BB4 File Offset: 0x000E6DB4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[433]);
			}
		}

		// Token: 0x0600552F RID: 21807 RVA: 0x000E8BF0 File Offset: 0x000E6DF0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[433]);
			}
		}

		// Token: 0x06005530 RID: 21808 RVA: 0x000E8C18 File Offset: 0x000E6E18
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[433]);
		}

		// Token: 0x06005531 RID: 21809 RVA: 0x000E8C30 File Offset: 0x000E6E30
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[433]);
			}
		}

		// Token: 0x06005532 RID: 21810 RVA: 0x000E8C6C File Offset: 0x000E6E6C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[433]);
			}
		}

		// Token: 0x06005533 RID: 21811 RVA: 0x000E8C94 File Offset: 0x000E6E94
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[433]);
		}

		// Token: 0x06005534 RID: 21812 RVA: 0x000E8CAC File Offset: 0x000E6EAC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[434]);
			}
		}

		// Token: 0x06005535 RID: 21813 RVA: 0x000E8CE8 File Offset: 0x000E6EE8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[434]);
			}
		}

		// Token: 0x06005536 RID: 21814 RVA: 0x000E8D10 File Offset: 0x000E6F10
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[434]);
		}

		// Token: 0x06005537 RID: 21815 RVA: 0x000E8D28 File Offset: 0x000E6F28
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[434]);
			}
		}

		// Token: 0x06005538 RID: 21816 RVA: 0x000E8D64 File Offset: 0x000E6F64
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[434]);
			}
		}

		// Token: 0x06005539 RID: 21817 RVA: 0x000E8D8C File Offset: 0x000E6F8C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[434]);
		}

		// Token: 0x0600553A RID: 21818 RVA: 0x000E8DA4 File Offset: 0x000E6FA4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[435]);
			}
		}

		// Token: 0x0600553B RID: 21819 RVA: 0x000E8DE0 File Offset: 0x000E6FE0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[435]);
			}
		}

		// Token: 0x0600553C RID: 21820 RVA: 0x000E8E08 File Offset: 0x000E7008
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[435]);
		}

		// Token: 0x0600553D RID: 21821 RVA: 0x000E8E20 File Offset: 0x000E7020
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[435]);
			}
		}

		// Token: 0x0600553E RID: 21822 RVA: 0x000E8E5C File Offset: 0x000E705C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[435]);
			}
		}

		// Token: 0x0600553F RID: 21823 RVA: 0x000E8E84 File Offset: 0x000E7084
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[435]);
		}

		// Token: 0x06005540 RID: 21824 RVA: 0x000E8E9C File Offset: 0x000E709C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[436]);
			}
		}

		// Token: 0x06005541 RID: 21825 RVA: 0x000E8ED8 File Offset: 0x000E70D8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[436]);
			}
		}

		// Token: 0x06005542 RID: 21826 RVA: 0x000E8F00 File Offset: 0x000E7100
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[436]);
		}

		// Token: 0x06005543 RID: 21827 RVA: 0x000E8F18 File Offset: 0x000E7118
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[436]);
			}
		}

		// Token: 0x06005544 RID: 21828 RVA: 0x000E8F54 File Offset: 0x000E7154
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[436]);
			}
		}

		// Token: 0x06005545 RID: 21829 RVA: 0x000E8F7C File Offset: 0x000E717C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[436]);
		}

		// Token: 0x06005546 RID: 21830 RVA: 0x000E8F94 File Offset: 0x000E7194
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[437]);
			}
		}

		// Token: 0x06005547 RID: 21831 RVA: 0x000E8FD0 File Offset: 0x000E71D0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[437]);
			}
		}

		// Token: 0x06005548 RID: 21832 RVA: 0x000E8FF8 File Offset: 0x000E71F8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[437]);
		}

		// Token: 0x06005549 RID: 21833 RVA: 0x000E9010 File Offset: 0x000E7210
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[437]);
			}
		}

		// Token: 0x0600554A RID: 21834 RVA: 0x000E904C File Offset: 0x000E724C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[437]);
			}
		}

		// Token: 0x0600554B RID: 21835 RVA: 0x000E9074 File Offset: 0x000E7274
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[437]);
		}

		// Token: 0x0600554C RID: 21836 RVA: 0x000E908C File Offset: 0x000E728C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[438]);
			}
		}

		// Token: 0x0600554D RID: 21837 RVA: 0x000E90C8 File Offset: 0x000E72C8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[438]);
			}
		}

		// Token: 0x0600554E RID: 21838 RVA: 0x000E90F0 File Offset: 0x000E72F0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[438]);
		}

		// Token: 0x0600554F RID: 21839 RVA: 0x000E9108 File Offset: 0x000E7308
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[438]);
			}
		}

		// Token: 0x06005550 RID: 21840 RVA: 0x000E9144 File Offset: 0x000E7344
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[438]);
			}
		}

		// Token: 0x06005551 RID: 21841 RVA: 0x000E916C File Offset: 0x000E736C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[438]);
		}

		// Token: 0x06005552 RID: 21842 RVA: 0x000E9184 File Offset: 0x000E7384
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[439]);
			}
		}

		// Token: 0x06005553 RID: 21843 RVA: 0x000E91C0 File Offset: 0x000E73C0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[439]);
			}
		}

		// Token: 0x06005554 RID: 21844 RVA: 0x000E91E8 File Offset: 0x000E73E8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[439]);
		}

		// Token: 0x06005555 RID: 21845 RVA: 0x000E9200 File Offset: 0x000E7400
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[439]);
			}
		}

		// Token: 0x06005556 RID: 21846 RVA: 0x000E923C File Offset: 0x000E743C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[439]);
			}
		}

		// Token: 0x06005557 RID: 21847 RVA: 0x000E9264 File Offset: 0x000E7464
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[439]);
		}

		// Token: 0x06005558 RID: 21848 RVA: 0x000E927C File Offset: 0x000E747C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[440]);
			}
		}

		// Token: 0x06005559 RID: 21849 RVA: 0x000E92B8 File Offset: 0x000E74B8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[440]);
			}
		}

		// Token: 0x0600555A RID: 21850 RVA: 0x000E92E0 File Offset: 0x000E74E0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[440]);
		}

		// Token: 0x0600555B RID: 21851 RVA: 0x000E92F8 File Offset: 0x000E74F8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[440]);
			}
		}

		// Token: 0x0600555C RID: 21852 RVA: 0x000E9334 File Offset: 0x000E7534
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[440]);
			}
		}

		// Token: 0x0600555D RID: 21853 RVA: 0x000E935C File Offset: 0x000E755C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[440]);
		}

		// Token: 0x0600555E RID: 21854 RVA: 0x000E9374 File Offset: 0x000E7574
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[441]);
			}
		}

		// Token: 0x0600555F RID: 21855 RVA: 0x000E93B0 File Offset: 0x000E75B0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[441]);
			}
		}

		// Token: 0x06005560 RID: 21856 RVA: 0x000E93D8 File Offset: 0x000E75D8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[441]);
		}

		// Token: 0x06005561 RID: 21857 RVA: 0x000E93F0 File Offset: 0x000E75F0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[441]);
			}
		}

		// Token: 0x06005562 RID: 21858 RVA: 0x000E942C File Offset: 0x000E762C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[441]);
			}
		}

		// Token: 0x06005563 RID: 21859 RVA: 0x000E9454 File Offset: 0x000E7654
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[441]);
		}

		// Token: 0x06005564 RID: 21860 RVA: 0x000E946C File Offset: 0x000E766C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[442]);
			}
		}

		// Token: 0x06005565 RID: 21861 RVA: 0x000E94A8 File Offset: 0x000E76A8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[442]);
			}
		}

		// Token: 0x06005566 RID: 21862 RVA: 0x000E94D0 File Offset: 0x000E76D0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[442]);
		}

		// Token: 0x06005567 RID: 21863 RVA: 0x000E94E8 File Offset: 0x000E76E8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[442]);
			}
		}

		// Token: 0x06005568 RID: 21864 RVA: 0x000E9524 File Offset: 0x000E7724
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[442]);
			}
		}

		// Token: 0x06005569 RID: 21865 RVA: 0x000E954C File Offset: 0x000E774C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[442]);
		}

		// Token: 0x0600556A RID: 21866 RVA: 0x000E9564 File Offset: 0x000E7764
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[443]);
			}
		}

		// Token: 0x0600556B RID: 21867 RVA: 0x000E95A0 File Offset: 0x000E77A0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[443]);
			}
		}

		// Token: 0x0600556C RID: 21868 RVA: 0x000E95C8 File Offset: 0x000E77C8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[443]);
		}

		// Token: 0x0600556D RID: 21869 RVA: 0x000E95E0 File Offset: 0x000E77E0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[443]);
			}
		}

		// Token: 0x0600556E RID: 21870 RVA: 0x000E961C File Offset: 0x000E781C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[443]);
			}
		}

		// Token: 0x0600556F RID: 21871 RVA: 0x000E9644 File Offset: 0x000E7844
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[443]);
		}

		// Token: 0x06005570 RID: 21872 RVA: 0x000E965C File Offset: 0x000E785C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[444]);
			}
		}

		// Token: 0x06005571 RID: 21873 RVA: 0x000E9698 File Offset: 0x000E7898
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[444]);
			}
		}

		// Token: 0x06005572 RID: 21874 RVA: 0x000E96C0 File Offset: 0x000E78C0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[444]);
		}

		// Token: 0x06005573 RID: 21875 RVA: 0x000E96D8 File Offset: 0x000E78D8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[444]);
			}
		}

		// Token: 0x06005574 RID: 21876 RVA: 0x000E9714 File Offset: 0x000E7914
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[444]);
			}
		}

		// Token: 0x06005575 RID: 21877 RVA: 0x000E973C File Offset: 0x000E793C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[444]);
		}

		// Token: 0x06005576 RID: 21878 RVA: 0x000E9754 File Offset: 0x000E7954
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[445]);
			}
		}

		// Token: 0x06005577 RID: 21879 RVA: 0x000E9790 File Offset: 0x000E7990
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[445]);
			}
		}

		// Token: 0x06005578 RID: 21880 RVA: 0x000E97B8 File Offset: 0x000E79B8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[445]);
		}

		// Token: 0x06005579 RID: 21881 RVA: 0x000E97D0 File Offset: 0x000E79D0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[445]);
			}
		}

		// Token: 0x0600557A RID: 21882 RVA: 0x000E980C File Offset: 0x000E7A0C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[445]);
			}
		}

		// Token: 0x0600557B RID: 21883 RVA: 0x000E9834 File Offset: 0x000E7A34
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[445]);
		}

		// Token: 0x0600557C RID: 21884 RVA: 0x000E984C File Offset: 0x000E7A4C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[446]);
			}
		}

		// Token: 0x0600557D RID: 21885 RVA: 0x000E9888 File Offset: 0x000E7A88
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[446]);
			}
		}

		// Token: 0x0600557E RID: 21886 RVA: 0x000E98B0 File Offset: 0x000E7AB0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[446]);
		}

		// Token: 0x0600557F RID: 21887 RVA: 0x000E98C8 File Offset: 0x000E7AC8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[446]);
			}
		}

		// Token: 0x06005580 RID: 21888 RVA: 0x000E9904 File Offset: 0x000E7B04
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[446]);
			}
		}

		// Token: 0x06005581 RID: 21889 RVA: 0x000E992C File Offset: 0x000E7B2C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[446]);
		}

		// Token: 0x06005582 RID: 21890 RVA: 0x000E9944 File Offset: 0x000E7B44
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[447]);
			}
		}

		// Token: 0x06005583 RID: 21891 RVA: 0x000E9980 File Offset: 0x000E7B80
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[447]);
			}
		}

		// Token: 0x06005584 RID: 21892 RVA: 0x000E99A8 File Offset: 0x000E7BA8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[447]);
		}

		// Token: 0x06005585 RID: 21893 RVA: 0x000E99C0 File Offset: 0x000E7BC0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[447]);
			}
		}

		// Token: 0x06005586 RID: 21894 RVA: 0x000E99FC File Offset: 0x000E7BFC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[447]);
			}
		}

		// Token: 0x06005587 RID: 21895 RVA: 0x000E9A24 File Offset: 0x000E7C24
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[447]);
		}

		// Token: 0x06005588 RID: 21896 RVA: 0x000E9A3C File Offset: 0x000E7C3C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[448]);
			}
		}

		// Token: 0x06005589 RID: 21897 RVA: 0x000E9A78 File Offset: 0x000E7C78
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[448]);
			}
		}

		// Token: 0x0600558A RID: 21898 RVA: 0x000E9AA0 File Offset: 0x000E7CA0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[448]);
		}

		// Token: 0x0600558B RID: 21899 RVA: 0x000E9AB8 File Offset: 0x000E7CB8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[448]);
			}
		}

		// Token: 0x0600558C RID: 21900 RVA: 0x000E9AF4 File Offset: 0x000E7CF4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[448]);
			}
		}

		// Token: 0x0600558D RID: 21901 RVA: 0x000E9B1C File Offset: 0x000E7D1C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[448]);
		}

		// Token: 0x0600558E RID: 21902 RVA: 0x000E9B34 File Offset: 0x000E7D34
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[449]);
			}
		}

		// Token: 0x0600558F RID: 21903 RVA: 0x000E9B70 File Offset: 0x000E7D70
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[449]);
			}
		}

		// Token: 0x06005590 RID: 21904 RVA: 0x000E9B98 File Offset: 0x000E7D98
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[449]);
		}

		// Token: 0x06005591 RID: 21905 RVA: 0x000E9BB0 File Offset: 0x000E7DB0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[449]);
			}
		}

		// Token: 0x06005592 RID: 21906 RVA: 0x000E9BEC File Offset: 0x000E7DEC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[449]);
			}
		}

		// Token: 0x06005593 RID: 21907 RVA: 0x000E9C14 File Offset: 0x000E7E14
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[449]);
		}

		// Token: 0x06005594 RID: 21908 RVA: 0x000E9C2C File Offset: 0x000E7E2C
		public static void ProvokingVertex(ProvokingVertexMode mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[450]);
		}

		// Token: 0x06005595 RID: 21909 RVA: 0x000E9C40 File Offset: 0x000E7E40
		[CLSCompliant(false)]
		public static void PushDebugGroup(DebugSourceExternal source, int id, int length, string message)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(message);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), source, id, length, intPtr, GL.EntryPoints[451]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06005596 RID: 21910 RVA: 0x000E9C70 File Offset: 0x000E7E70
		[CLSCompliant(false)]
		public static void PushDebugGroup(DebugSourceExternal source, uint id, int length, string message)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(message);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), source, id, length, intPtr, GL.EntryPoints[451]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06005597 RID: 21911 RVA: 0x000E9CA0 File Offset: 0x000E7EA0
		[CLSCompliant(false)]
		public static void QueryCounter(int id, QueryCounterTarget target)
		{
			calli(System.Void(System.UInt32,System.Int32), id, target, GL.EntryPoints[453]);
		}

		// Token: 0x06005598 RID: 21912 RVA: 0x000E9CB4 File Offset: 0x000E7EB4
		[CLSCompliant(false)]
		public static void QueryCounter(uint id, QueryCounterTarget target)
		{
			calli(System.Void(System.UInt32,System.Int32), id, target, GL.EntryPoints[453]);
		}

		// Token: 0x06005599 RID: 21913 RVA: 0x000E9CC8 File Offset: 0x000E7EC8
		public static void ReadBuffer(ReadBufferMode mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[454]);
		}

		// Token: 0x0600559A RID: 21914 RVA: 0x000E9CDC File Offset: 0x000E7EDC
		public static void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, [Out] IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, pixels, GL.EntryPoints[456]);
		}

		// Token: 0x0600559B RID: 21915 RVA: 0x000E9D04 File Offset: 0x000E7F04
		[CLSCompliant(false)]
		public unsafe static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, ptr, GL.EntryPoints[456]);
			}
		}

		// Token: 0x0600559C RID: 21916 RVA: 0x000E9D44 File Offset: 0x000E7F44
		[CLSCompliant(false)]
		public unsafe static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, ptr, GL.EntryPoints[456]);
			}
		}

		// Token: 0x0600559D RID: 21917 RVA: 0x000E9D88 File Offset: 0x000E7F88
		[CLSCompliant(false)]
		public unsafe static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,,] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, ptr, GL.EntryPoints[456]);
			}
		}

		// Token: 0x0600559E RID: 21918 RVA: 0x000E9DCC File Offset: 0x000E7FCC
		public unsafe static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T6 pixels) where T6 : struct
		{
			fixed (T6* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, ptr, GL.EntryPoints[456]);
			}
		}

		// Token: 0x0600559F RID: 21919 RVA: 0x000E9DF8 File Offset: 0x000E7FF8
		public static void ReleaseShaderCompiler()
		{
			calli(System.Void(), GL.EntryPoints[457]);
		}

		// Token: 0x060055A0 RID: 21920 RVA: 0x000E9E0C File Offset: 0x000E800C
		public static void RenderbufferStorage(RenderbufferTarget target, RenderbufferStorage internalformat, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, width, height, GL.EntryPoints[458]);
		}

		// Token: 0x060055A1 RID: 21921 RVA: 0x000E9E24 File Offset: 0x000E8024
		public static void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, RenderbufferStorage internalformat, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, samples, internalformat, width, height, GL.EntryPoints[459]);
		}

		// Token: 0x060055A2 RID: 21922 RVA: 0x000E9E3C File Offset: 0x000E803C
		public static void ResetHistogram(HistogramTarget target)
		{
			calli(System.Void(System.Int32), target, GL.EntryPoints[460]);
		}

		// Token: 0x060055A3 RID: 21923 RVA: 0x000E9E50 File Offset: 0x000E8050
		public static void ResetMinmax(MinmaxTarget target)
		{
			calli(System.Void(System.Int32), target, GL.EntryPoints[461]);
		}

		// Token: 0x060055A4 RID: 21924 RVA: 0x000E9E64 File Offset: 0x000E8064
		public static void ResumeTransformFeedback()
		{
			calli(System.Void(), GL.EntryPoints[462]);
		}

		// Token: 0x060055A5 RID: 21925 RVA: 0x000E9E78 File Offset: 0x000E8078
		public static void SampleCoverage(float value, bool invert)
		{
			calli(System.Void(System.Single,System.Boolean), value, invert, GL.EntryPoints[463]);
		}

		// Token: 0x060055A6 RID: 21926 RVA: 0x000E9E8C File Offset: 0x000E808C
		[CLSCompliant(false)]
		public static void SampleMask(int maskNumber, int mask)
		{
			calli(System.Void(System.UInt32,System.UInt32), maskNumber, mask, GL.EntryPoints[464]);
		}

		// Token: 0x060055A7 RID: 21927 RVA: 0x000E9EA0 File Offset: 0x000E80A0
		[CLSCompliant(false)]
		public static void SampleMask(uint maskNumber, uint mask)
		{
			calli(System.Void(System.UInt32,System.UInt32), maskNumber, mask, GL.EntryPoints[464]);
		}

		// Token: 0x060055A8 RID: 21928 RVA: 0x000E9EB4 File Offset: 0x000E80B4
		[CLSCompliant(false)]
		public static void SamplerParameter(int sampler, SamplerParameterName pname, float param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single), sampler, pname, param, GL.EntryPoints[465]);
		}

		// Token: 0x060055A9 RID: 21929 RVA: 0x000E9ECC File Offset: 0x000E80CC
		[CLSCompliant(false)]
		public static void SamplerParameter(uint sampler, SamplerParameterName pname, float param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single), sampler, pname, param, GL.EntryPoints[465]);
		}

		// Token: 0x060055AA RID: 21930 RVA: 0x000E9EE4 File Offset: 0x000E80E4
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(int sampler, SamplerParameterName pname, float[] param)
		{
			fixed (float* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[466]);
			}
		}

		// Token: 0x060055AB RID: 21931 RVA: 0x000E9F1C File Offset: 0x000E811C
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(int sampler, SamplerParameterName pname, float* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, param, GL.EntryPoints[466]);
		}

		// Token: 0x060055AC RID: 21932 RVA: 0x000E9F34 File Offset: 0x000E8134
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, SamplerParameterName pname, float[] param)
		{
			fixed (float* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[466]);
			}
		}

		// Token: 0x060055AD RID: 21933 RVA: 0x000E9F6C File Offset: 0x000E816C
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, SamplerParameterName pname, float* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, param, GL.EntryPoints[466]);
		}

		// Token: 0x060055AE RID: 21934 RVA: 0x000E9F84 File Offset: 0x000E8184
		[CLSCompliant(false)]
		public static void SamplerParameter(int sampler, SamplerParameterName pname, int param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), sampler, pname, param, GL.EntryPoints[467]);
		}

		// Token: 0x060055AF RID: 21935 RVA: 0x000E9F9C File Offset: 0x000E819C
		[CLSCompliant(false)]
		public static void SamplerParameter(uint sampler, SamplerParameterName pname, int param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), sampler, pname, param, GL.EntryPoints[467]);
		}

		// Token: 0x060055B0 RID: 21936 RVA: 0x000E9FB4 File Offset: 0x000E81B4
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(int sampler, SamplerParameterName pname, int[] param)
		{
			fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[468]);
			}
		}

		// Token: 0x060055B1 RID: 21937 RVA: 0x000E9FEC File Offset: 0x000E81EC
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(int sampler, SamplerParameterName pname, ref int param)
		{
			fixed (int* ptr = &param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[468]);
			}
		}

		// Token: 0x060055B2 RID: 21938 RVA: 0x000EA010 File Offset: 0x000E8210
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(int sampler, SamplerParameterName pname, int* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[468]);
		}

		// Token: 0x060055B3 RID: 21939 RVA: 0x000EA028 File Offset: 0x000E8228
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(uint sampler, SamplerParameterName pname, int[] param)
		{
			fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[468]);
			}
		}

		// Token: 0x060055B4 RID: 21940 RVA: 0x000EA060 File Offset: 0x000E8260
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(uint sampler, SamplerParameterName pname, ref int param)
		{
			fixed (int* ptr = &param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[468]);
			}
		}

		// Token: 0x060055B5 RID: 21941 RVA: 0x000EA084 File Offset: 0x000E8284
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(uint sampler, SamplerParameterName pname, int* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[468]);
		}

		// Token: 0x060055B6 RID: 21942 RVA: 0x000EA09C File Offset: 0x000E829C
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(uint sampler, SamplerParameterName pname, uint[] param)
		{
			fixed (uint* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, ptr, GL.EntryPoints[469]);
			}
		}

		// Token: 0x060055B7 RID: 21943 RVA: 0x000EA0D4 File Offset: 0x000E82D4
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(uint sampler, SamplerParameterName pname, ref uint param)
		{
			fixed (uint* ptr = &param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, ptr, GL.EntryPoints[469]);
			}
		}

		// Token: 0x060055B8 RID: 21944 RVA: 0x000EA0F8 File Offset: 0x000E82F8
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(uint sampler, SamplerParameterName pname, uint* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, param, GL.EntryPoints[469]);
		}

		// Token: 0x060055B9 RID: 21945 RVA: 0x000EA110 File Offset: 0x000E8310
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(int sampler, SamplerParameterName pname, int[] param)
		{
			fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[470]);
			}
		}

		// Token: 0x060055BA RID: 21946 RVA: 0x000EA148 File Offset: 0x000E8348
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(int sampler, SamplerParameterName pname, int* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[470]);
		}

		// Token: 0x060055BB RID: 21947 RVA: 0x000EA160 File Offset: 0x000E8360
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, SamplerParameterName pname, int[] param)
		{
			fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[470]);
			}
		}

		// Token: 0x060055BC RID: 21948 RVA: 0x000EA198 File Offset: 0x000E8398
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, SamplerParameterName pname, int* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[470]);
		}

		// Token: 0x060055BD RID: 21949 RVA: 0x000EA1B0 File Offset: 0x000E83B0
		public static void Scissor(int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), x, y, width, height, GL.EntryPoints[471]);
		}

		// Token: 0x060055BE RID: 21950 RVA: 0x000EA1C8 File Offset: 0x000E83C8
		[CLSCompliant(false)]
		public unsafe static void ScissorArray(int first, int count, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), first, count, ptr, GL.EntryPoints[472]);
			}
		}

		// Token: 0x060055BF RID: 21951 RVA: 0x000EA200 File Offset: 0x000E8400
		[CLSCompliant(false)]
		public unsafe static void ScissorArray(int first, int count, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), first, count, ptr, GL.EntryPoints[472]);
			}
		}

		// Token: 0x060055C0 RID: 21952 RVA: 0x000EA224 File Offset: 0x000E8424
		[CLSCompliant(false)]
		public unsafe static void ScissorArray(int first, int count, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), first, count, v, GL.EntryPoints[472]);
		}

		// Token: 0x060055C1 RID: 21953 RVA: 0x000EA23C File Offset: 0x000E843C
		[CLSCompliant(false)]
		public unsafe static void ScissorArray(uint first, int count, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), first, count, ptr, GL.EntryPoints[472]);
			}
		}

		// Token: 0x060055C2 RID: 21954 RVA: 0x000EA274 File Offset: 0x000E8474
		[CLSCompliant(false)]
		public unsafe static void ScissorArray(uint first, int count, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), first, count, ptr, GL.EntryPoints[472]);
			}
		}

		// Token: 0x060055C3 RID: 21955 RVA: 0x000EA298 File Offset: 0x000E8498
		[CLSCompliant(false)]
		public unsafe static void ScissorArray(uint first, int count, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), first, count, v, GL.EntryPoints[472]);
		}

		// Token: 0x060055C4 RID: 21956 RVA: 0x000EA2B0 File Offset: 0x000E84B0
		[CLSCompliant(false)]
		public static void ScissorIndexed(int index, int left, int bottom, int width, int height)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), index, left, bottom, width, height, GL.EntryPoints[473]);
		}

		// Token: 0x060055C5 RID: 21957 RVA: 0x000EA2C8 File Offset: 0x000E84C8
		[CLSCompliant(false)]
		public static void ScissorIndexed(uint index, int left, int bottom, int width, int height)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), index, left, bottom, width, height, GL.EntryPoints[473]);
		}

		// Token: 0x060055C6 RID: 21958 RVA: 0x000EA2E0 File Offset: 0x000E84E0
		[CLSCompliant(false)]
		public unsafe static void ScissorIndexed(int index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[474]);
			}
		}

		// Token: 0x060055C7 RID: 21959 RVA: 0x000EA314 File Offset: 0x000E8514
		[CLSCompliant(false)]
		public unsafe static void ScissorIndexed(int index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[474]);
			}
		}

		// Token: 0x060055C8 RID: 21960 RVA: 0x000EA338 File Offset: 0x000E8538
		[CLSCompliant(false)]
		public unsafe static void ScissorIndexed(int index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[474]);
		}

		// Token: 0x060055C9 RID: 21961 RVA: 0x000EA34C File Offset: 0x000E854C
		[CLSCompliant(false)]
		public unsafe static void ScissorIndexed(uint index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[474]);
			}
		}

		// Token: 0x060055CA RID: 21962 RVA: 0x000EA380 File Offset: 0x000E8580
		[CLSCompliant(false)]
		public unsafe static void ScissorIndexed(uint index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[474]);
			}
		}

		// Token: 0x060055CB RID: 21963 RVA: 0x000EA3A4 File Offset: 0x000E85A4
		[CLSCompliant(false)]
		public unsafe static void ScissorIndexed(uint index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[474]);
		}

		// Token: 0x060055CC RID: 21964 RVA: 0x000EA3B8 File Offset: 0x000E85B8
		[CLSCompliant(false)]
		public static void SecondaryColorP3(PackedPointerType type, int color)
		{
			calli(System.Void(System.Int32,System.UInt32), type, color, GL.EntryPoints[475]);
		}

		// Token: 0x060055CD RID: 21965 RVA: 0x000EA3CC File Offset: 0x000E85CC
		[CLSCompliant(false)]
		public static void SecondaryColorP3(PackedPointerType type, uint color)
		{
			calli(System.Void(System.Int32,System.UInt32), type, color, GL.EntryPoints[475]);
		}

		// Token: 0x060055CE RID: 21966 RVA: 0x000EA3E0 File Offset: 0x000E85E0
		[CLSCompliant(false)]
		public unsafe static void SecondaryColorP3(PackedPointerType type, int* color)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, color, GL.EntryPoints[476]);
		}

		// Token: 0x060055CF RID: 21967 RVA: 0x000EA3F4 File Offset: 0x000E85F4
		[CLSCompliant(false)]
		public unsafe static void SecondaryColorP3(PackedPointerType type, uint* color)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, color, GL.EntryPoints[476]);
		}

		// Token: 0x060055D0 RID: 21968 RVA: 0x000EA408 File Offset: 0x000E8608
		public static void SeparableFilter2D(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, row, column, GL.EntryPoints[477]);
		}

		// Token: 0x060055D1 RID: 21969 RVA: 0x000EA434 File Offset: 0x000E8634
		[CLSCompliant(false)]
		public unsafe static void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[] row, [In] [Out] T7[] column) where T6 : struct where T7 : struct
		{
			fixed (T6* ptr = ref (row != null && row.Length != 0) ? ref row[0] : ref *null)
			{
				T6* ptr2 = ptr;
				fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[477]);
				}
			}
		}

		// Token: 0x060055D2 RID: 21970 RVA: 0x000EA48C File Offset: 0x000E868C
		[CLSCompliant(false)]
		public unsafe static void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,] row, [In] [Out] T7[,] column) where T6 : struct where T7 : struct
		{
			fixed (T6* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0] : ref *null)
			{
				T6* ptr2 = ptr;
				fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[477]);
				}
			}
		}

		// Token: 0x060055D3 RID: 21971 RVA: 0x000EA4EC File Offset: 0x000E86EC
		[CLSCompliant(false)]
		public unsafe static void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,,] row, [In] [Out] T7[,,] column) where T6 : struct where T7 : struct
		{
			fixed (T6* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0, 0] : ref *null)
			{
				T6* ptr2 = ptr;
				fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[477]);
				}
			}
		}

		// Token: 0x060055D4 RID: 21972 RVA: 0x000EA550 File Offset: 0x000E8750
		public unsafe static void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T6 row, [In] [Out] ref T7 column) where T6 : struct where T7 : struct
		{
			fixed (T6* ptr = &row)
			{
				T6* ptr2 = ptr;
				fixed (T7* ptr3 = &column)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[477]);
				}
			}
		}

		// Token: 0x060055D5 RID: 21973 RVA: 0x000EA580 File Offset: 0x000E8780
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, int[] shaders, BinaryFormat binaryformat, IntPtr binary, int length)
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr, binaryformat, binary, length, GL.EntryPoints[478]);
			}
		}

		// Token: 0x060055D6 RID: 21974 RVA: 0x000EA5B8 File Offset: 0x000E87B8
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int[] shaders, BinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[478]);
				}
			}
		}

		// Token: 0x060055D7 RID: 21975 RVA: 0x000EA608 File Offset: 0x000E8808
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int[] shaders, BinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[478]);
				}
			}
		}

		// Token: 0x060055D8 RID: 21976 RVA: 0x000EA65C File Offset: 0x000E885C
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int[] shaders, BinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[478]);
				}
			}
		}

		// Token: 0x060055D9 RID: 21977 RVA: 0x000EA6B0 File Offset: 0x000E88B0
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int[] shaders, BinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &binary)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[478]);
				}
			}
		}

		// Token: 0x060055DA RID: 21978 RVA: 0x000EA6EC File Offset: 0x000E88EC
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, ref int shaders, BinaryFormat binaryformat, IntPtr binary, int length)
		{
			fixed (int* ptr = &shaders)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr, binaryformat, binary, length, GL.EntryPoints[478]);
			}
		}

		// Token: 0x060055DB RID: 21979 RVA: 0x000EA714 File Offset: 0x000E8914
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref int shaders, BinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (int* ptr = &shaders)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[478]);
				}
			}
		}

		// Token: 0x060055DC RID: 21980 RVA: 0x000EA750 File Offset: 0x000E8950
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref int shaders, BinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (int* ptr = &shaders)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[478]);
				}
			}
		}

		// Token: 0x060055DD RID: 21981 RVA: 0x000EA790 File Offset: 0x000E8990
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref int shaders, BinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (int* ptr = &shaders)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[478]);
				}
			}
		}

		// Token: 0x060055DE RID: 21982 RVA: 0x000EA7D0 File Offset: 0x000E89D0
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref int shaders, BinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (int* ptr = &shaders)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &binary)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[478]);
				}
			}
		}

		// Token: 0x060055DF RID: 21983 RVA: 0x000EA7FC File Offset: 0x000E89FC
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, int* shaders, BinaryFormat binaryformat, IntPtr binary, int length)
		{
			calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, binary, length, GL.EntryPoints[478]);
		}

		// Token: 0x060055E0 RID: 21984 RVA: 0x000EA814 File Offset: 0x000E8A14
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int* shaders, BinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[478]);
			}
		}

		// Token: 0x060055E1 RID: 21985 RVA: 0x000EA84C File Offset: 0x000E8A4C
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int* shaders, BinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[478]);
			}
		}

		// Token: 0x060055E2 RID: 21986 RVA: 0x000EA888 File Offset: 0x000E8A88
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int* shaders, BinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[478]);
			}
		}

		// Token: 0x060055E3 RID: 21987 RVA: 0x000EA8C8 File Offset: 0x000E8AC8
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int* shaders, BinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (T3* ptr = &binary)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[478]);
			}
		}

		// Token: 0x060055E4 RID: 21988 RVA: 0x000EA8F0 File Offset: 0x000E8AF0
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, uint[] shaders, BinaryFormat binaryformat, IntPtr binary, int length)
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr, binaryformat, binary, length, GL.EntryPoints[478]);
			}
		}

		// Token: 0x060055E5 RID: 21989 RVA: 0x000EA928 File Offset: 0x000E8B28
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint[] shaders, BinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[478]);
				}
			}
		}

		// Token: 0x060055E6 RID: 21990 RVA: 0x000EA978 File Offset: 0x000E8B78
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint[] shaders, BinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[478]);
				}
			}
		}

		// Token: 0x060055E7 RID: 21991 RVA: 0x000EA9CC File Offset: 0x000E8BCC
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint[] shaders, BinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[478]);
				}
			}
		}

		// Token: 0x060055E8 RID: 21992 RVA: 0x000EAA20 File Offset: 0x000E8C20
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint[] shaders, BinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = &binary)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[478]);
				}
			}
		}

		// Token: 0x060055E9 RID: 21993 RVA: 0x000EAA5C File Offset: 0x000E8C5C
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, ref uint shaders, BinaryFormat binaryformat, IntPtr binary, int length)
		{
			fixed (uint* ptr = &shaders)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr, binaryformat, binary, length, GL.EntryPoints[478]);
			}
		}

		// Token: 0x060055EA RID: 21994 RVA: 0x000EAA84 File Offset: 0x000E8C84
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref uint shaders, BinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = &shaders)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[478]);
				}
			}
		}

		// Token: 0x060055EB RID: 21995 RVA: 0x000EAAC0 File Offset: 0x000E8CC0
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref uint shaders, BinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = &shaders)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[478]);
				}
			}
		}

		// Token: 0x060055EC RID: 21996 RVA: 0x000EAB00 File Offset: 0x000E8D00
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref uint shaders, BinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = &shaders)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[478]);
				}
			}
		}

		// Token: 0x060055ED RID: 21997 RVA: 0x000EAB40 File Offset: 0x000E8D40
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref uint shaders, BinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (uint* ptr = &shaders)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = &binary)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[478]);
				}
			}
		}

		// Token: 0x060055EE RID: 21998 RVA: 0x000EAB6C File Offset: 0x000E8D6C
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, uint* shaders, BinaryFormat binaryformat, IntPtr binary, int length)
		{
			calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, binary, length, GL.EntryPoints[478]);
		}

		// Token: 0x060055EF RID: 21999 RVA: 0x000EAB84 File Offset: 0x000E8D84
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint* shaders, BinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[478]);
			}
		}

		// Token: 0x060055F0 RID: 22000 RVA: 0x000EABBC File Offset: 0x000E8DBC
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint* shaders, BinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[478]);
			}
		}

		// Token: 0x060055F1 RID: 22001 RVA: 0x000EABF8 File Offset: 0x000E8DF8
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint* shaders, BinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[478]);
			}
		}

		// Token: 0x060055F2 RID: 22002 RVA: 0x000EAC38 File Offset: 0x000E8E38
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint* shaders, BinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (T3* ptr = &binary)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[478]);
			}
		}

		// Token: 0x060055F3 RID: 22003 RVA: 0x000EAC60 File Offset: 0x000E8E60
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(int shader, int count, string[] @string, int[] length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[479]);
				BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
			}
		}

		// Token: 0x060055F4 RID: 22004 RVA: 0x000EACA8 File Offset: 0x000E8EA8
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(int shader, int count, string[] @string, ref int length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = &length)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[479]);
				BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
			}
		}

		// Token: 0x060055F5 RID: 22005 RVA: 0x000EACDC File Offset: 0x000E8EDC
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(int shader, int count, string[] @string, int* length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr, length, GL.EntryPoints[479]);
			BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
		}

		// Token: 0x060055F6 RID: 22006 RVA: 0x000EAD10 File Offset: 0x000E8F10
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(uint shader, int count, string[] @string, int[] length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[479]);
				BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
			}
		}

		// Token: 0x060055F7 RID: 22007 RVA: 0x000EAD58 File Offset: 0x000E8F58
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(uint shader, int count, string[] @string, ref int length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = &length)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[479]);
				BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
			}
		}

		// Token: 0x060055F8 RID: 22008 RVA: 0x000EAD8C File Offset: 0x000E8F8C
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(uint shader, int count, string[] @string, int* length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr, length, GL.EntryPoints[479]);
			BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
		}

		// Token: 0x060055F9 RID: 22009 RVA: 0x000EADC0 File Offset: 0x000E8FC0
		[CLSCompliant(false)]
		public static void ShaderStorageBlockBinding(int program, int storageBlockIndex, int storageBlockBinding)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), program, storageBlockIndex, storageBlockBinding, GL.EntryPoints[480]);
		}

		// Token: 0x060055FA RID: 22010 RVA: 0x000EADD8 File Offset: 0x000E8FD8
		[CLSCompliant(false)]
		public static void ShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), program, storageBlockIndex, storageBlockBinding, GL.EntryPoints[480]);
		}

		// Token: 0x060055FB RID: 22011 RVA: 0x000EADF0 File Offset: 0x000E8FF0
		[CLSCompliant(false)]
		public static void StencilFunc(StencilFunction func, int @ref, int mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), func, @ref, mask, GL.EntryPoints[481]);
		}

		// Token: 0x060055FC RID: 22012 RVA: 0x000EAE08 File Offset: 0x000E9008
		[CLSCompliant(false)]
		public static void StencilFunc(StencilFunction func, int @ref, uint mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), func, @ref, mask, GL.EntryPoints[481]);
		}

		// Token: 0x060055FD RID: 22013 RVA: 0x000EAE20 File Offset: 0x000E9020
		[CLSCompliant(false)]
		public static void StencilFuncSeparate(StencilFace face, StencilFunction func, int @ref, int mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), face, func, @ref, mask, GL.EntryPoints[482]);
		}

		// Token: 0x060055FE RID: 22014 RVA: 0x000EAE38 File Offset: 0x000E9038
		[CLSCompliant(false)]
		public static void StencilFuncSeparate(StencilFace face, StencilFunction func, int @ref, uint mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), face, func, @ref, mask, GL.EntryPoints[482]);
		}

		// Token: 0x060055FF RID: 22015 RVA: 0x000EAE50 File Offset: 0x000E9050
		[CLSCompliant(false)]
		public static void StencilMask(int mask)
		{
			calli(System.Void(System.UInt32), mask, GL.EntryPoints[483]);
		}

		// Token: 0x06005600 RID: 22016 RVA: 0x000EAE64 File Offset: 0x000E9064
		[CLSCompliant(false)]
		public static void StencilMask(uint mask)
		{
			calli(System.Void(System.UInt32), mask, GL.EntryPoints[483]);
		}

		// Token: 0x06005601 RID: 22017 RVA: 0x000EAE78 File Offset: 0x000E9078
		[CLSCompliant(false)]
		public static void StencilMaskSeparate(StencilFace face, int mask)
		{
			calli(System.Void(System.Int32,System.UInt32), face, mask, GL.EntryPoints[484]);
		}

		// Token: 0x06005602 RID: 22018 RVA: 0x000EAE8C File Offset: 0x000E908C
		[CLSCompliant(false)]
		public static void StencilMaskSeparate(StencilFace face, uint mask)
		{
			calli(System.Void(System.Int32,System.UInt32), face, mask, GL.EntryPoints[484]);
		}

		// Token: 0x06005603 RID: 22019 RVA: 0x000EAEA0 File Offset: 0x000E90A0
		public static void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), fail, zfail, zpass, GL.EntryPoints[485]);
		}

		// Token: 0x06005604 RID: 22020 RVA: 0x000EAEB8 File Offset: 0x000E90B8
		public static void StencilOpSeparate(StencilFace face, StencilOp sfail, StencilOp dpfail, StencilOp dppass)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), face, sfail, dpfail, dppass, GL.EntryPoints[486]);
		}

		// Token: 0x06005605 RID: 22021 RVA: 0x000EAED0 File Offset: 0x000E90D0
		[CLSCompliant(false)]
		public static void TexBuffer(TextureBufferTarget target, SizedInternalFormat internalformat, int buffer)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), target, internalformat, buffer, GL.EntryPoints[487]);
		}

		// Token: 0x06005606 RID: 22022 RVA: 0x000EAEE8 File Offset: 0x000E90E8
		[CLSCompliant(false)]
		public static void TexBuffer(TextureBufferTarget target, SizedInternalFormat internalformat, uint buffer)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), target, internalformat, buffer, GL.EntryPoints[487]);
		}

		// Token: 0x06005607 RID: 22023 RVA: 0x000EAF00 File Offset: 0x000E9100
		[CLSCompliant(false)]
		public static void TexBufferRange(TextureBufferTarget target, SizedInternalFormat internalformat, int buffer, IntPtr offset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.IntPtr,System.IntPtr), target, internalformat, buffer, offset, size, GL.EntryPoints[488]);
		}

		// Token: 0x06005608 RID: 22024 RVA: 0x000EAF18 File Offset: 0x000E9118
		[CLSCompliant(false)]
		public static void TexBufferRange(TextureBufferTarget target, SizedInternalFormat internalformat, uint buffer, IntPtr offset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.IntPtr,System.IntPtr), target, internalformat, buffer, offset, size, GL.EntryPoints[488]);
		}

		// Token: 0x06005609 RID: 22025 RVA: 0x000EAF30 File Offset: 0x000E9130
		[CLSCompliant(false)]
		public static void TexCoordP1(PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[489]);
		}

		// Token: 0x0600560A RID: 22026 RVA: 0x000EAF44 File Offset: 0x000E9144
		[CLSCompliant(false)]
		public static void TexCoordP1(PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[489]);
		}

		// Token: 0x0600560B RID: 22027 RVA: 0x000EAF58 File Offset: 0x000E9158
		[CLSCompliant(false)]
		public unsafe static void TexCoordP1(PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[490]);
		}

		// Token: 0x0600560C RID: 22028 RVA: 0x000EAF6C File Offset: 0x000E916C
		[CLSCompliant(false)]
		public unsafe static void TexCoordP1(PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[490]);
		}

		// Token: 0x0600560D RID: 22029 RVA: 0x000EAF80 File Offset: 0x000E9180
		[CLSCompliant(false)]
		public static void TexCoordP2(PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[491]);
		}

		// Token: 0x0600560E RID: 22030 RVA: 0x000EAF94 File Offset: 0x000E9194
		[CLSCompliant(false)]
		public static void TexCoordP2(PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[491]);
		}

		// Token: 0x0600560F RID: 22031 RVA: 0x000EAFA8 File Offset: 0x000E91A8
		[CLSCompliant(false)]
		public unsafe static void TexCoordP2(PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[492]);
		}

		// Token: 0x06005610 RID: 22032 RVA: 0x000EAFBC File Offset: 0x000E91BC
		[CLSCompliant(false)]
		public unsafe static void TexCoordP2(PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[492]);
		}

		// Token: 0x06005611 RID: 22033 RVA: 0x000EAFD0 File Offset: 0x000E91D0
		[CLSCompliant(false)]
		public static void TexCoordP3(PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[493]);
		}

		// Token: 0x06005612 RID: 22034 RVA: 0x000EAFE4 File Offset: 0x000E91E4
		[CLSCompliant(false)]
		public static void TexCoordP3(PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[493]);
		}

		// Token: 0x06005613 RID: 22035 RVA: 0x000EAFF8 File Offset: 0x000E91F8
		[CLSCompliant(false)]
		public unsafe static void TexCoordP3(PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[494]);
		}

		// Token: 0x06005614 RID: 22036 RVA: 0x000EB00C File Offset: 0x000E920C
		[CLSCompliant(false)]
		public unsafe static void TexCoordP3(PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[494]);
		}

		// Token: 0x06005615 RID: 22037 RVA: 0x000EB020 File Offset: 0x000E9220
		[CLSCompliant(false)]
		public static void TexCoordP4(PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[495]);
		}

		// Token: 0x06005616 RID: 22038 RVA: 0x000EB034 File Offset: 0x000E9234
		[CLSCompliant(false)]
		public static void TexCoordP4(PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[495]);
		}

		// Token: 0x06005617 RID: 22039 RVA: 0x000EB048 File Offset: 0x000E9248
		[CLSCompliant(false)]
		public unsafe static void TexCoordP4(PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[496]);
		}

		// Token: 0x06005618 RID: 22040 RVA: 0x000EB05C File Offset: 0x000E925C
		[CLSCompliant(false)]
		public unsafe static void TexCoordP4(PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[496]);
		}

		// Token: 0x06005619 RID: 22041 RVA: 0x000EB070 File Offset: 0x000E9270
		public static void TexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, format, type, pixels, GL.EntryPoints[497]);
		}

		// Token: 0x0600561A RID: 22042 RVA: 0x000EB09C File Offset: 0x000E929C
		[CLSCompliant(false)]
		public unsafe static void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T7[] pixels) where T7 : struct
		{
			fixed (T7* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[497]);
			}
		}

		// Token: 0x0600561B RID: 22043 RVA: 0x000EB0DC File Offset: 0x000E92DC
		[CLSCompliant(false)]
		public unsafe static void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T7[,] pixels) where T7 : struct
		{
			fixed (T7* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[497]);
			}
		}

		// Token: 0x0600561C RID: 22044 RVA: 0x000EB120 File Offset: 0x000E9320
		[CLSCompliant(false)]
		public unsafe static void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T7[,,] pixels) where T7 : struct
		{
			fixed (T7* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[497]);
			}
		}

		// Token: 0x0600561D RID: 22045 RVA: 0x000EB168 File Offset: 0x000E9368
		public unsafe static void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] ref T7 pixels) where T7 : struct
		{
			fixed (T7* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[497]);
			}
		}

		// Token: 0x0600561E RID: 22046 RVA: 0x000EB194 File Offset: 0x000E9394
		public static void TexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, pixels, GL.EntryPoints[498]);
		}

		// Token: 0x0600561F RID: 22047 RVA: 0x000EB1C0 File Offset: 0x000E93C0
		[CLSCompliant(false)]
		public unsafe static void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T8[] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[498]);
			}
		}

		// Token: 0x06005620 RID: 22048 RVA: 0x000EB204 File Offset: 0x000E9404
		[CLSCompliant(false)]
		public unsafe static void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T8[,] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[498]);
			}
		}

		// Token: 0x06005621 RID: 22049 RVA: 0x000EB24C File Offset: 0x000E944C
		[CLSCompliant(false)]
		public unsafe static void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T8[,,] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[498]);
			}
		}

		// Token: 0x06005622 RID: 22050 RVA: 0x000EB294 File Offset: 0x000E9494
		public unsafe static void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] ref T8 pixels) where T8 : struct
		{
			fixed (T8* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[498]);
			}
		}

		// Token: 0x06005623 RID: 22051 RVA: 0x000EB2C4 File Offset: 0x000E94C4
		public static void TexImage2DMultisample(TextureTargetMultisample target, int samples, PixelInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), target, samples, internalformat, width, height, fixedsamplelocations, GL.EntryPoints[499]);
		}

		// Token: 0x06005624 RID: 22052 RVA: 0x000EB2E0 File Offset: 0x000E94E0
		public static void TexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, pixels, GL.EntryPoints[500]);
		}

		// Token: 0x06005625 RID: 22053 RVA: 0x000EB310 File Offset: 0x000E9510
		[CLSCompliant(false)]
		public unsafe static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T9[] pixels) where T9 : struct
		{
			fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[500]);
			}
		}

		// Token: 0x06005626 RID: 22054 RVA: 0x000EB354 File Offset: 0x000E9554
		[CLSCompliant(false)]
		public unsafe static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T9[,] pixels) where T9 : struct
		{
			fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[500]);
			}
		}

		// Token: 0x06005627 RID: 22055 RVA: 0x000EB39C File Offset: 0x000E959C
		[CLSCompliant(false)]
		public unsafe static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T9[,,] pixels) where T9 : struct
		{
			fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[500]);
			}
		}

		// Token: 0x06005628 RID: 22056 RVA: 0x000EB3E8 File Offset: 0x000E95E8
		public unsafe static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] ref T9 pixels) where T9 : struct
		{
			fixed (T9* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[500]);
			}
		}

		// Token: 0x06005629 RID: 22057 RVA: 0x000EB418 File Offset: 0x000E9618
		public static void TexImage3DMultisample(TextureTargetMultisample target, int samples, PixelInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), target, samples, internalformat, width, height, depth, fixedsamplelocations, GL.EntryPoints[501]);
		}

		// Token: 0x0600562A RID: 22058 RVA: 0x000EB440 File Offset: 0x000E9640
		public static void TexParameter(TextureTarget target, TextureParameterName pname, float param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single), target, pname, param, GL.EntryPoints[503]);
		}

		// Token: 0x0600562B RID: 22059 RVA: 0x000EB458 File Offset: 0x000E9658
		[CLSCompliant(false)]
		public unsafe static void TexParameter(TextureTarget target, TextureParameterName pname, float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[504]);
			}
		}

		// Token: 0x0600562C RID: 22060 RVA: 0x000EB490 File Offset: 0x000E9690
		[CLSCompliant(false)]
		public unsafe static void TexParameter(TextureTarget target, TextureParameterName pname, float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[504]);
		}

		// Token: 0x0600562D RID: 22061 RVA: 0x000EB4A8 File Offset: 0x000E96A8
		public static void TexParameter(TextureTarget target, TextureParameterName pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, param, GL.EntryPoints[505]);
		}

		// Token: 0x0600562E RID: 22062 RVA: 0x000EB4C0 File Offset: 0x000E96C0
		[CLSCompliant(false)]
		public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[506]);
			}
		}

		// Token: 0x0600562F RID: 22063 RVA: 0x000EB4F8 File Offset: 0x000E96F8
		[CLSCompliant(false)]
		public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, ref int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[506]);
			}
		}

		// Token: 0x06005630 RID: 22064 RVA: 0x000EB51C File Offset: 0x000E971C
		[CLSCompliant(false)]
		public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[506]);
		}

		// Token: 0x06005631 RID: 22065 RVA: 0x000EB534 File Offset: 0x000E9734
		[CLSCompliant(false)]
		public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, uint[] @params)
		{
			fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[507]);
			}
		}

		// Token: 0x06005632 RID: 22066 RVA: 0x000EB56C File Offset: 0x000E976C
		[CLSCompliant(false)]
		public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, ref uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[507]);
			}
		}

		// Token: 0x06005633 RID: 22067 RVA: 0x000EB590 File Offset: 0x000E9790
		[CLSCompliant(false)]
		public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, uint* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, @params, GL.EntryPoints[507]);
		}

		// Token: 0x06005634 RID: 22068 RVA: 0x000EB5A8 File Offset: 0x000E97A8
		[CLSCompliant(false)]
		public unsafe static void TexParameter(TextureTarget target, TextureParameterName pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[508]);
			}
		}

		// Token: 0x06005635 RID: 22069 RVA: 0x000EB5E0 File Offset: 0x000E97E0
		[CLSCompliant(false)]
		public unsafe static void TexParameter(TextureTarget target, TextureParameterName pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[508]);
		}

		// Token: 0x06005636 RID: 22070 RVA: 0x000EB5F8 File Offset: 0x000E97F8
		public static void TexStorage1D(TextureTarget1d target, int levels, SizedInternalFormat internalformat, int width)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), target, levels, internalformat, width, GL.EntryPoints[509]);
		}

		// Token: 0x06005637 RID: 22071 RVA: 0x000EB610 File Offset: 0x000E9810
		public static void TexStorage2D(TextureTarget2d target, int levels, SizedInternalFormat internalformat, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, levels, internalformat, width, height, GL.EntryPoints[510]);
		}

		// Token: 0x06005638 RID: 22072 RVA: 0x000EB628 File Offset: 0x000E9828
		public static void TexStorage2DMultisample(TextureTargetMultisample2d target, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), target, samples, internalformat, width, height, fixedsamplelocations, GL.EntryPoints[511]);
		}

		// Token: 0x06005639 RID: 22073 RVA: 0x000EB644 File Offset: 0x000E9844
		public static void TexStorage3D(TextureTarget3d target, int levels, SizedInternalFormat internalformat, int width, int height, int depth)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, levels, internalformat, width, height, depth, GL.EntryPoints[512]);
		}

		// Token: 0x0600563A RID: 22074 RVA: 0x000EB660 File Offset: 0x000E9860
		public static void TexStorage3DMultisample(TextureTargetMultisample3d target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), target, samples, internalformat, width, height, depth, fixedsamplelocations, GL.EntryPoints[513]);
		}

		// Token: 0x0600563B RID: 22075 RVA: 0x000EB688 File Offset: 0x000E9888
		public static void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, type, pixels, GL.EntryPoints[514]);
		}

		// Token: 0x0600563C RID: 22076 RVA: 0x000EB6B0 File Offset: 0x000E98B0
		[CLSCompliant(false)]
		public unsafe static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T6[] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, type, ptr, GL.EntryPoints[514]);
			}
		}

		// Token: 0x0600563D RID: 22077 RVA: 0x000EB6F0 File Offset: 0x000E98F0
		[CLSCompliant(false)]
		public unsafe static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T6[,] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, type, ptr, GL.EntryPoints[514]);
			}
		}

		// Token: 0x0600563E RID: 22078 RVA: 0x000EB734 File Offset: 0x000E9934
		[CLSCompliant(false)]
		public unsafe static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T6[,,] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, type, ptr, GL.EntryPoints[514]);
			}
		}

		// Token: 0x0600563F RID: 22079 RVA: 0x000EB778 File Offset: 0x000E9978
		public unsafe static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] ref T6 pixels) where T6 : struct
		{
			fixed (T6* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, type, ptr, GL.EntryPoints[514]);
			}
		}

		// Token: 0x06005640 RID: 22080 RVA: 0x000EB7A4 File Offset: 0x000E99A4
		public static void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, pixels, GL.EntryPoints[515]);
		}

		// Token: 0x06005641 RID: 22081 RVA: 0x000EB7D0 File Offset: 0x000E99D0
		[CLSCompliant(false)]
		public unsafe static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T8[] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[515]);
			}
		}

		// Token: 0x06005642 RID: 22082 RVA: 0x000EB814 File Offset: 0x000E9A14
		[CLSCompliant(false)]
		public unsafe static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T8[,] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[515]);
			}
		}

		// Token: 0x06005643 RID: 22083 RVA: 0x000EB85C File Offset: 0x000E9A5C
		[CLSCompliant(false)]
		public unsafe static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T8[,,] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[515]);
			}
		}

		// Token: 0x06005644 RID: 22084 RVA: 0x000EB8A4 File Offset: 0x000E9AA4
		public unsafe static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T8 pixels) where T8 : struct
		{
			fixed (T8* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[515]);
			}
		}

		// Token: 0x06005645 RID: 22085 RVA: 0x000EB8D4 File Offset: 0x000E9AD4
		public static void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels, GL.EntryPoints[516]);
		}

		// Token: 0x06005646 RID: 22086 RVA: 0x000EB904 File Offset: 0x000E9B04
		[CLSCompliant(false)]
		public unsafe static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[] pixels) where T10 : struct
		{
			fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[516]);
			}
		}

		// Token: 0x06005647 RID: 22087 RVA: 0x000EB94C File Offset: 0x000E9B4C
		[CLSCompliant(false)]
		public unsafe static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[,] pixels) where T10 : struct
		{
			fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[516]);
			}
		}

		// Token: 0x06005648 RID: 22088 RVA: 0x000EB998 File Offset: 0x000E9B98
		[CLSCompliant(false)]
		public unsafe static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[,,] pixels) where T10 : struct
		{
			fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[516]);
			}
		}

		// Token: 0x06005649 RID: 22089 RVA: 0x000EB9E4 File Offset: 0x000E9BE4
		public unsafe static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] ref T10 pixels) where T10 : struct
		{
			fixed (T10* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[516]);
			}
		}

		// Token: 0x0600564A RID: 22090 RVA: 0x000EBA18 File Offset: 0x000E9C18
		[CLSCompliant(false)]
		public static void TextureView(int texture, TextureTarget target, int origtexture, PixelInternalFormat internalformat, int minlevel, int numlevels, int minlayer, int numlayers)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers, GL.EntryPoints[517]);
		}

		// Token: 0x0600564B RID: 22091 RVA: 0x000EBA44 File Offset: 0x000E9C44
		[CLSCompliant(false)]
		public static void TextureView(uint texture, TextureTarget target, uint origtexture, PixelInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers, GL.EntryPoints[517]);
		}

		// Token: 0x0600564C RID: 22092 RVA: 0x000EBA70 File Offset: 0x000E9C70
		[CLSCompliant(false)]
		public static void TransformFeedbackVaryings(int program, int count, string[] varyings, TransformFeedbackMode bufferMode)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(varyings);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, count, intPtr, bufferMode, GL.EntryPoints[518]);
			BindingsBase.FreeStringArrayPtr(intPtr, varyings.Length);
		}

		// Token: 0x0600564D RID: 22093 RVA: 0x000EBAA4 File Offset: 0x000E9CA4
		[CLSCompliant(false)]
		public static void TransformFeedbackVaryings(uint program, int count, string[] varyings, TransformFeedbackMode bufferMode)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(varyings);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, count, intPtr, bufferMode, GL.EntryPoints[518]);
			BindingsBase.FreeStringArrayPtr(intPtr, varyings.Length);
		}

		// Token: 0x0600564E RID: 22094 RVA: 0x000EBAD8 File Offset: 0x000E9CD8
		public static void Uniform1(int location, double x)
		{
			calli(System.Void(System.Int32,System.Double), location, x, GL.EntryPoints[519]);
		}

		// Token: 0x0600564F RID: 22095 RVA: 0x000EBAEC File Offset: 0x000E9CEC
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, ptr, GL.EntryPoints[520]);
			}
		}

		// Token: 0x06005650 RID: 22096 RVA: 0x000EBB24 File Offset: 0x000E9D24
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, ptr, GL.EntryPoints[520]);
			}
		}

		// Token: 0x06005651 RID: 22097 RVA: 0x000EBB48 File Offset: 0x000E9D48
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, value, GL.EntryPoints[520]);
		}

		// Token: 0x06005652 RID: 22098 RVA: 0x000EBB60 File Offset: 0x000E9D60
		public static void Uniform1(int location, float v0)
		{
			calli(System.Void(System.Int32,System.Single), location, v0, GL.EntryPoints[521]);
		}

		// Token: 0x06005653 RID: 22099 RVA: 0x000EBB74 File Offset: 0x000E9D74
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[522]);
			}
		}

		// Token: 0x06005654 RID: 22100 RVA: 0x000EBBAC File Offset: 0x000E9DAC
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[522]);
			}
		}

		// Token: 0x06005655 RID: 22101 RVA: 0x000EBBD0 File Offset: 0x000E9DD0
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, value, GL.EntryPoints[522]);
		}

		// Token: 0x06005656 RID: 22102 RVA: 0x000EBBE8 File Offset: 0x000E9DE8
		public static void Uniform1(int location, int v0)
		{
			calli(System.Void(System.Int32,System.Int32), location, v0, GL.EntryPoints[523]);
		}

		// Token: 0x06005657 RID: 22103 RVA: 0x000EBBFC File Offset: 0x000E9DFC
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[524]);
			}
		}

		// Token: 0x06005658 RID: 22104 RVA: 0x000EBC34 File Offset: 0x000E9E34
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[524]);
			}
		}

		// Token: 0x06005659 RID: 22105 RVA: 0x000EBC58 File Offset: 0x000E9E58
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, int* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, value, GL.EntryPoints[524]);
		}

		// Token: 0x0600565A RID: 22106 RVA: 0x000EBC70 File Offset: 0x000E9E70
		[CLSCompliant(false)]
		public static void Uniform1(int location, uint v0)
		{
			calli(System.Void(System.Int32,System.UInt32), location, v0, GL.EntryPoints[525]);
		}

		// Token: 0x0600565B RID: 22107 RVA: 0x000EBC84 File Offset: 0x000E9E84
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[526]);
			}
		}

		// Token: 0x0600565C RID: 22108 RVA: 0x000EBCBC File Offset: 0x000E9EBC
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[526]);
			}
		}

		// Token: 0x0600565D RID: 22109 RVA: 0x000EBCE0 File Offset: 0x000E9EE0
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, uint* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[526]);
		}

		// Token: 0x0600565E RID: 22110 RVA: 0x000EBCF8 File Offset: 0x000E9EF8
		public static void Uniform2(int location, double x, double y)
		{
			calli(System.Void(System.Int32,System.Double,System.Double), location, x, y, GL.EntryPoints[527]);
		}

		// Token: 0x0600565F RID: 22111 RVA: 0x000EBD10 File Offset: 0x000E9F10
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, ptr, GL.EntryPoints[528]);
			}
		}

		// Token: 0x06005660 RID: 22112 RVA: 0x000EBD48 File Offset: 0x000E9F48
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, ptr, GL.EntryPoints[528]);
			}
		}

		// Token: 0x06005661 RID: 22113 RVA: 0x000EBD6C File Offset: 0x000E9F6C
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, value, GL.EntryPoints[528]);
		}

		// Token: 0x06005662 RID: 22114 RVA: 0x000EBD84 File Offset: 0x000E9F84
		public static void Uniform2(int location, float v0, float v1)
		{
			calli(System.Void(System.Int32,System.Single,System.Single), location, v0, v1, GL.EntryPoints[529]);
		}

		// Token: 0x06005663 RID: 22115 RVA: 0x000EBD9C File Offset: 0x000E9F9C
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[530]);
			}
		}

		// Token: 0x06005664 RID: 22116 RVA: 0x000EBDD4 File Offset: 0x000E9FD4
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[530]);
			}
		}

		// Token: 0x06005665 RID: 22117 RVA: 0x000EBDF8 File Offset: 0x000E9FF8
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, value, GL.EntryPoints[530]);
		}

		// Token: 0x06005666 RID: 22118 RVA: 0x000EBE10 File Offset: 0x000EA010
		public static void Uniform2(int location, int v0, int v1)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), location, v0, v1, GL.EntryPoints[531]);
		}

		// Token: 0x06005667 RID: 22119 RVA: 0x000EBE28 File Offset: 0x000EA028
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[532]);
			}
		}

		// Token: 0x06005668 RID: 22120 RVA: 0x000EBE60 File Offset: 0x000EA060
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, int* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, value, GL.EntryPoints[532]);
		}

		// Token: 0x06005669 RID: 22121 RVA: 0x000EBE78 File Offset: 0x000EA078
		[CLSCompliant(false)]
		public static void Uniform2(int location, uint v0, uint v1)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), location, v0, v1, GL.EntryPoints[533]);
		}

		// Token: 0x0600566A RID: 22122 RVA: 0x000EBE90 File Offset: 0x000EA090
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[534]);
			}
		}

		// Token: 0x0600566B RID: 22123 RVA: 0x000EBEC8 File Offset: 0x000EA0C8
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[534]);
			}
		}

		// Token: 0x0600566C RID: 22124 RVA: 0x000EBEEC File Offset: 0x000EA0EC
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, uint* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[534]);
		}

		// Token: 0x0600566D RID: 22125 RVA: 0x000EBF04 File Offset: 0x000EA104
		public static void Uniform3(int location, double x, double y, double z)
		{
			calli(System.Void(System.Int32,System.Double,System.Double,System.Double), location, x, y, z, GL.EntryPoints[535]);
		}

		// Token: 0x0600566E RID: 22126 RVA: 0x000EBF1C File Offset: 0x000EA11C
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, ptr, GL.EntryPoints[536]);
			}
		}

		// Token: 0x0600566F RID: 22127 RVA: 0x000EBF54 File Offset: 0x000EA154
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, ptr, GL.EntryPoints[536]);
			}
		}

		// Token: 0x06005670 RID: 22128 RVA: 0x000EBF78 File Offset: 0x000EA178
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, value, GL.EntryPoints[536]);
		}

		// Token: 0x06005671 RID: 22129 RVA: 0x000EBF90 File Offset: 0x000EA190
		public static void Uniform3(int location, float v0, float v1, float v2)
		{
			calli(System.Void(System.Int32,System.Single,System.Single,System.Single), location, v0, v1, v2, GL.EntryPoints[537]);
		}

		// Token: 0x06005672 RID: 22130 RVA: 0x000EBFA8 File Offset: 0x000EA1A8
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[538]);
			}
		}

		// Token: 0x06005673 RID: 22131 RVA: 0x000EBFE0 File Offset: 0x000EA1E0
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[538]);
			}
		}

		// Token: 0x06005674 RID: 22132 RVA: 0x000EC004 File Offset: 0x000EA204
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, value, GL.EntryPoints[538]);
		}

		// Token: 0x06005675 RID: 22133 RVA: 0x000EC01C File Offset: 0x000EA21C
		public static void Uniform3(int location, int v0, int v1, int v2)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), location, v0, v1, v2, GL.EntryPoints[539]);
		}

		// Token: 0x06005676 RID: 22134 RVA: 0x000EC034 File Offset: 0x000EA234
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[540]);
			}
		}

		// Token: 0x06005677 RID: 22135 RVA: 0x000EC06C File Offset: 0x000EA26C
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[540]);
			}
		}

		// Token: 0x06005678 RID: 22136 RVA: 0x000EC090 File Offset: 0x000EA290
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, int* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, value, GL.EntryPoints[540]);
		}

		// Token: 0x06005679 RID: 22137 RVA: 0x000EC0A8 File Offset: 0x000EA2A8
		[CLSCompliant(false)]
		public static void Uniform3(int location, uint v0, uint v1, uint v2)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32), location, v0, v1, v2, GL.EntryPoints[541]);
		}

		// Token: 0x0600567A RID: 22138 RVA: 0x000EC0C0 File Offset: 0x000EA2C0
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[542]);
			}
		}

		// Token: 0x0600567B RID: 22139 RVA: 0x000EC0F8 File Offset: 0x000EA2F8
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[542]);
			}
		}

		// Token: 0x0600567C RID: 22140 RVA: 0x000EC11C File Offset: 0x000EA31C
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, uint* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[542]);
		}

		// Token: 0x0600567D RID: 22141 RVA: 0x000EC134 File Offset: 0x000EA334
		public static void Uniform4(int location, double x, double y, double z, double w)
		{
			calli(System.Void(System.Int32,System.Double,System.Double,System.Double,System.Double), location, x, y, z, w, GL.EntryPoints[543]);
		}

		// Token: 0x0600567E RID: 22142 RVA: 0x000EC14C File Offset: 0x000EA34C
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, ptr, GL.EntryPoints[544]);
			}
		}

		// Token: 0x0600567F RID: 22143 RVA: 0x000EC184 File Offset: 0x000EA384
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, ptr, GL.EntryPoints[544]);
			}
		}

		// Token: 0x06005680 RID: 22144 RVA: 0x000EC1A8 File Offset: 0x000EA3A8
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, value, GL.EntryPoints[544]);
		}

		// Token: 0x06005681 RID: 22145 RVA: 0x000EC1C0 File Offset: 0x000EA3C0
		public static void Uniform4(int location, float v0, float v1, float v2, float v3)
		{
			calli(System.Void(System.Int32,System.Single,System.Single,System.Single,System.Single), location, v0, v1, v2, v3, GL.EntryPoints[545]);
		}

		// Token: 0x06005682 RID: 22146 RVA: 0x000EC1D8 File Offset: 0x000EA3D8
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[546]);
			}
		}

		// Token: 0x06005683 RID: 22147 RVA: 0x000EC210 File Offset: 0x000EA410
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[546]);
			}
		}

		// Token: 0x06005684 RID: 22148 RVA: 0x000EC234 File Offset: 0x000EA434
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, value, GL.EntryPoints[546]);
		}

		// Token: 0x06005685 RID: 22149 RVA: 0x000EC24C File Offset: 0x000EA44C
		public static void Uniform4(int location, int v0, int v1, int v2, int v3)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), location, v0, v1, v2, v3, GL.EntryPoints[547]);
		}

		// Token: 0x06005686 RID: 22150 RVA: 0x000EC264 File Offset: 0x000EA464
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[548]);
			}
		}

		// Token: 0x06005687 RID: 22151 RVA: 0x000EC29C File Offset: 0x000EA49C
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[548]);
			}
		}

		// Token: 0x06005688 RID: 22152 RVA: 0x000EC2C0 File Offset: 0x000EA4C0
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, int* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, value, GL.EntryPoints[548]);
		}

		// Token: 0x06005689 RID: 22153 RVA: 0x000EC2D8 File Offset: 0x000EA4D8
		[CLSCompliant(false)]
		public static void Uniform4(int location, uint v0, uint v1, uint v2, uint v3)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), location, v0, v1, v2, v3, GL.EntryPoints[549]);
		}

		// Token: 0x0600568A RID: 22154 RVA: 0x000EC2F0 File Offset: 0x000EA4F0
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[550]);
			}
		}

		// Token: 0x0600568B RID: 22155 RVA: 0x000EC328 File Offset: 0x000EA528
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[550]);
			}
		}

		// Token: 0x0600568C RID: 22156 RVA: 0x000EC34C File Offset: 0x000EA54C
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, uint* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[550]);
		}

		// Token: 0x0600568D RID: 22157 RVA: 0x000EC364 File Offset: 0x000EA564
		[CLSCompliant(false)]
		public static void UniformBlockBinding(int program, int uniformBlockIndex, int uniformBlockBinding)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), program, uniformBlockIndex, uniformBlockBinding, GL.EntryPoints[551]);
		}

		// Token: 0x0600568E RID: 22158 RVA: 0x000EC37C File Offset: 0x000EA57C
		[CLSCompliant(false)]
		public static void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), program, uniformBlockIndex, uniformBlockBinding, GL.EntryPoints[551]);
		}

		// Token: 0x0600568F RID: 22159 RVA: 0x000EC394 File Offset: 0x000EA594
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[554]);
			}
		}

		// Token: 0x06005690 RID: 22160 RVA: 0x000EC3CC File Offset: 0x000EA5CC
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[554]);
			}
		}

		// Token: 0x06005691 RID: 22161 RVA: 0x000EC3F0 File Offset: 0x000EA5F0
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[554]);
		}

		// Token: 0x06005692 RID: 22162 RVA: 0x000EC408 File Offset: 0x000EA608
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[555]);
			}
		}

		// Token: 0x06005693 RID: 22163 RVA: 0x000EC440 File Offset: 0x000EA640
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[555]);
			}
		}

		// Token: 0x06005694 RID: 22164 RVA: 0x000EC464 File Offset: 0x000EA664
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[555]);
		}

		// Token: 0x06005695 RID: 22165 RVA: 0x000EC47C File Offset: 0x000EA67C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[556]);
			}
		}

		// Token: 0x06005696 RID: 22166 RVA: 0x000EC4B4 File Offset: 0x000EA6B4
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[556]);
			}
		}

		// Token: 0x06005697 RID: 22167 RVA: 0x000EC4D8 File Offset: 0x000EA6D8
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[556]);
		}

		// Token: 0x06005698 RID: 22168 RVA: 0x000EC4F0 File Offset: 0x000EA6F0
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[557]);
			}
		}

		// Token: 0x06005699 RID: 22169 RVA: 0x000EC528 File Offset: 0x000EA728
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[557]);
			}
		}

		// Token: 0x0600569A RID: 22170 RVA: 0x000EC54C File Offset: 0x000EA74C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[557]);
		}

		// Token: 0x0600569B RID: 22171 RVA: 0x000EC564 File Offset: 0x000EA764
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[558]);
			}
		}

		// Token: 0x0600569C RID: 22172 RVA: 0x000EC59C File Offset: 0x000EA79C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[558]);
			}
		}

		// Token: 0x0600569D RID: 22173 RVA: 0x000EC5C0 File Offset: 0x000EA7C0
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[558]);
		}

		// Token: 0x0600569E RID: 22174 RVA: 0x000EC5D8 File Offset: 0x000EA7D8
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[559]);
			}
		}

		// Token: 0x0600569F RID: 22175 RVA: 0x000EC610 File Offset: 0x000EA810
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[559]);
			}
		}

		// Token: 0x060056A0 RID: 22176 RVA: 0x000EC634 File Offset: 0x000EA834
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[559]);
		}

		// Token: 0x060056A1 RID: 22177 RVA: 0x000EC64C File Offset: 0x000EA84C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[560]);
			}
		}

		// Token: 0x060056A2 RID: 22178 RVA: 0x000EC684 File Offset: 0x000EA884
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[560]);
			}
		}

		// Token: 0x060056A3 RID: 22179 RVA: 0x000EC6A8 File Offset: 0x000EA8A8
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[560]);
		}

		// Token: 0x060056A4 RID: 22180 RVA: 0x000EC6C0 File Offset: 0x000EA8C0
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[561]);
			}
		}

		// Token: 0x060056A5 RID: 22181 RVA: 0x000EC6F8 File Offset: 0x000EA8F8
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[561]);
			}
		}

		// Token: 0x060056A6 RID: 22182 RVA: 0x000EC71C File Offset: 0x000EA91C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[561]);
		}

		// Token: 0x060056A7 RID: 22183 RVA: 0x000EC734 File Offset: 0x000EA934
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[562]);
			}
		}

		// Token: 0x060056A8 RID: 22184 RVA: 0x000EC76C File Offset: 0x000EA96C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[562]);
			}
		}

		// Token: 0x060056A9 RID: 22185 RVA: 0x000EC790 File Offset: 0x000EA990
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[562]);
		}

		// Token: 0x060056AA RID: 22186 RVA: 0x000EC7A8 File Offset: 0x000EA9A8
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[563]);
			}
		}

		// Token: 0x060056AB RID: 22187 RVA: 0x000EC7E0 File Offset: 0x000EA9E0
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[563]);
			}
		}

		// Token: 0x060056AC RID: 22188 RVA: 0x000EC804 File Offset: 0x000EAA04
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[563]);
		}

		// Token: 0x060056AD RID: 22189 RVA: 0x000EC81C File Offset: 0x000EAA1C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[564]);
			}
		}

		// Token: 0x060056AE RID: 22190 RVA: 0x000EC854 File Offset: 0x000EAA54
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[564]);
			}
		}

		// Token: 0x060056AF RID: 22191 RVA: 0x000EC878 File Offset: 0x000EAA78
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[564]);
		}

		// Token: 0x060056B0 RID: 22192 RVA: 0x000EC890 File Offset: 0x000EAA90
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[565]);
			}
		}

		// Token: 0x060056B1 RID: 22193 RVA: 0x000EC8C8 File Offset: 0x000EAAC8
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[565]);
			}
		}

		// Token: 0x060056B2 RID: 22194 RVA: 0x000EC8EC File Offset: 0x000EAAEC
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[565]);
		}

		// Token: 0x060056B3 RID: 22195 RVA: 0x000EC904 File Offset: 0x000EAB04
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[566]);
			}
		}

		// Token: 0x060056B4 RID: 22196 RVA: 0x000EC93C File Offset: 0x000EAB3C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[566]);
			}
		}

		// Token: 0x060056B5 RID: 22197 RVA: 0x000EC960 File Offset: 0x000EAB60
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[566]);
		}

		// Token: 0x060056B6 RID: 22198 RVA: 0x000EC978 File Offset: 0x000EAB78
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[567]);
			}
		}

		// Token: 0x060056B7 RID: 22199 RVA: 0x000EC9B0 File Offset: 0x000EABB0
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[567]);
			}
		}

		// Token: 0x060056B8 RID: 22200 RVA: 0x000EC9D4 File Offset: 0x000EABD4
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[567]);
		}

		// Token: 0x060056B9 RID: 22201 RVA: 0x000EC9EC File Offset: 0x000EABEC
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[568]);
			}
		}

		// Token: 0x060056BA RID: 22202 RVA: 0x000ECA24 File Offset: 0x000EAC24
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[568]);
			}
		}

		// Token: 0x060056BB RID: 22203 RVA: 0x000ECA48 File Offset: 0x000EAC48
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[568]);
		}

		// Token: 0x060056BC RID: 22204 RVA: 0x000ECA60 File Offset: 0x000EAC60
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[569]);
			}
		}

		// Token: 0x060056BD RID: 22205 RVA: 0x000ECA98 File Offset: 0x000EAC98
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[569]);
			}
		}

		// Token: 0x060056BE RID: 22206 RVA: 0x000ECABC File Offset: 0x000EACBC
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[569]);
		}

		// Token: 0x060056BF RID: 22207 RVA: 0x000ECAD4 File Offset: 0x000EACD4
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[570]);
			}
		}

		// Token: 0x060056C0 RID: 22208 RVA: 0x000ECB0C File Offset: 0x000EAD0C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[570]);
			}
		}

		// Token: 0x060056C1 RID: 22209 RVA: 0x000ECB30 File Offset: 0x000EAD30
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[570]);
		}

		// Token: 0x060056C2 RID: 22210 RVA: 0x000ECB48 File Offset: 0x000EAD48
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[571]);
			}
		}

		// Token: 0x060056C3 RID: 22211 RVA: 0x000ECB80 File Offset: 0x000EAD80
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[571]);
			}
		}

		// Token: 0x060056C4 RID: 22212 RVA: 0x000ECBA4 File Offset: 0x000EADA4
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[571]);
		}

		// Token: 0x060056C5 RID: 22213 RVA: 0x000ECBBC File Offset: 0x000EADBC
		[CLSCompliant(false)]
		public unsafe static void UniformSubroutines(ShaderType shadertype, int count, int[] indices)
		{
			fixed (int* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, count, ptr, GL.EntryPoints[572]);
			}
		}

		// Token: 0x060056C6 RID: 22214 RVA: 0x000ECBF4 File Offset: 0x000EADF4
		[CLSCompliant(false)]
		public unsafe static void UniformSubroutines(ShaderType shadertype, int count, ref int indices)
		{
			fixed (int* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, count, ptr, GL.EntryPoints[572]);
			}
		}

		// Token: 0x060056C7 RID: 22215 RVA: 0x000ECC18 File Offset: 0x000EAE18
		[CLSCompliant(false)]
		public unsafe static void UniformSubroutines(ShaderType shadertype, int count, int* indices)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, count, indices, GL.EntryPoints[572]);
		}

		// Token: 0x060056C8 RID: 22216 RVA: 0x000ECC30 File Offset: 0x000EAE30
		[CLSCompliant(false)]
		public unsafe static void UniformSubroutines(ShaderType shadertype, int count, uint[] indices)
		{
			fixed (uint* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, count, ptr, GL.EntryPoints[572]);
			}
		}

		// Token: 0x060056C9 RID: 22217 RVA: 0x000ECC68 File Offset: 0x000EAE68
		[CLSCompliant(false)]
		public unsafe static void UniformSubroutines(ShaderType shadertype, int count, ref uint indices)
		{
			fixed (uint* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, count, ptr, GL.EntryPoints[572]);
			}
		}

		// Token: 0x060056CA RID: 22218 RVA: 0x000ECC8C File Offset: 0x000EAE8C
		[CLSCompliant(false)]
		public unsafe static void UniformSubroutines(ShaderType shadertype, int count, uint* indices)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, count, indices, GL.EntryPoints[572]);
		}

		// Token: 0x060056CB RID: 22219 RVA: 0x000ECCA4 File Offset: 0x000EAEA4
		public static bool UnmapBuffer(BufferTarget target)
		{
			return calli(System.Byte(System.Int32), target, GL.EntryPoints[573]);
		}

		// Token: 0x060056CC RID: 22220 RVA: 0x000ECCB8 File Offset: 0x000EAEB8
		[CLSCompliant(false)]
		public static void UseProgram(int program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[574]);
		}

		// Token: 0x060056CD RID: 22221 RVA: 0x000ECCCC File Offset: 0x000EAECC
		[CLSCompliant(false)]
		public static void UseProgram(uint program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[574]);
		}

		// Token: 0x060056CE RID: 22222 RVA: 0x000ECCE0 File Offset: 0x000EAEE0
		[CLSCompliant(false)]
		public static void UseProgramStages(int pipeline, ProgramStageMask stages, int program)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32), pipeline, stages, program, GL.EntryPoints[575]);
		}

		// Token: 0x060056CF RID: 22223 RVA: 0x000ECCF8 File Offset: 0x000EAEF8
		[CLSCompliant(false)]
		public static void UseProgramStages(uint pipeline, ProgramStageMask stages, uint program)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32), pipeline, stages, program, GL.EntryPoints[575]);
		}

		// Token: 0x060056D0 RID: 22224 RVA: 0x000ECD10 File Offset: 0x000EAF10
		[CLSCompliant(false)]
		public static void ValidateProgram(int program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[576]);
		}

		// Token: 0x060056D1 RID: 22225 RVA: 0x000ECD24 File Offset: 0x000EAF24
		[CLSCompliant(false)]
		public static void ValidateProgram(uint program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[576]);
		}

		// Token: 0x060056D2 RID: 22226 RVA: 0x000ECD38 File Offset: 0x000EAF38
		[CLSCompliant(false)]
		public static void ValidateProgramPipeline(int pipeline)
		{
			calli(System.Void(System.UInt32), pipeline, GL.EntryPoints[577]);
		}

		// Token: 0x060056D3 RID: 22227 RVA: 0x000ECD4C File Offset: 0x000EAF4C
		[CLSCompliant(false)]
		public static void ValidateProgramPipeline(uint pipeline)
		{
			calli(System.Void(System.UInt32), pipeline, GL.EntryPoints[577]);
		}

		// Token: 0x060056D4 RID: 22228 RVA: 0x000ECD60 File Offset: 0x000EAF60
		[CLSCompliant(false)]
		public static void VertexAttrib1(int index, double x)
		{
			calli(System.Void(System.UInt32,System.Double), index, x, GL.EntryPoints[578]);
		}

		// Token: 0x060056D5 RID: 22229 RVA: 0x000ECD74 File Offset: 0x000EAF74
		[CLSCompliant(false)]
		public static void VertexAttrib1(uint index, double x)
		{
			calli(System.Void(System.UInt32,System.Double), index, x, GL.EntryPoints[578]);
		}

		// Token: 0x060056D6 RID: 22230 RVA: 0x000ECD88 File Offset: 0x000EAF88
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib1(int index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[579]);
		}

		// Token: 0x060056D7 RID: 22231 RVA: 0x000ECD9C File Offset: 0x000EAF9C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib1(uint index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[579]);
		}

		// Token: 0x060056D8 RID: 22232 RVA: 0x000ECDB0 File Offset: 0x000EAFB0
		[CLSCompliant(false)]
		public static void VertexAttrib1(int index, float x)
		{
			calli(System.Void(System.UInt32,System.Single), index, x, GL.EntryPoints[580]);
		}

		// Token: 0x060056D9 RID: 22233 RVA: 0x000ECDC4 File Offset: 0x000EAFC4
		[CLSCompliant(false)]
		public static void VertexAttrib1(uint index, float x)
		{
			calli(System.Void(System.UInt32,System.Single), index, x, GL.EntryPoints[580]);
		}

		// Token: 0x060056DA RID: 22234 RVA: 0x000ECDD8 File Offset: 0x000EAFD8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib1(int index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[581]);
		}

		// Token: 0x060056DB RID: 22235 RVA: 0x000ECDEC File Offset: 0x000EAFEC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib1(uint index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[581]);
		}

		// Token: 0x060056DC RID: 22236 RVA: 0x000ECE00 File Offset: 0x000EB000
		[CLSCompliant(false)]
		public static void VertexAttrib1(int index, short x)
		{
			calli(System.Void(System.UInt32,System.Int16), index, x, GL.EntryPoints[582]);
		}

		// Token: 0x060056DD RID: 22237 RVA: 0x000ECE14 File Offset: 0x000EB014
		[CLSCompliant(false)]
		public static void VertexAttrib1(uint index, short x)
		{
			calli(System.Void(System.UInt32,System.Int16), index, x, GL.EntryPoints[582]);
		}

		// Token: 0x060056DE RID: 22238 RVA: 0x000ECE28 File Offset: 0x000EB028
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib1(int index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[583]);
		}

		// Token: 0x060056DF RID: 22239 RVA: 0x000ECE3C File Offset: 0x000EB03C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib1(uint index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[583]);
		}

		// Token: 0x060056E0 RID: 22240 RVA: 0x000ECE50 File Offset: 0x000EB050
		[CLSCompliant(false)]
		public static void VertexAttrib2(int index, double x, double y)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double), index, x, y, GL.EntryPoints[584]);
		}

		// Token: 0x060056E1 RID: 22241 RVA: 0x000ECE68 File Offset: 0x000EB068
		[CLSCompliant(false)]
		public static void VertexAttrib2(uint index, double x, double y)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double), index, x, y, GL.EntryPoints[584]);
		}

		// Token: 0x060056E2 RID: 22242 RVA: 0x000ECE80 File Offset: 0x000EB080
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[585]);
			}
		}

		// Token: 0x060056E3 RID: 22243 RVA: 0x000ECEB4 File Offset: 0x000EB0B4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[585]);
			}
		}

		// Token: 0x060056E4 RID: 22244 RVA: 0x000ECED8 File Offset: 0x000EB0D8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[585]);
		}

		// Token: 0x060056E5 RID: 22245 RVA: 0x000ECEEC File Offset: 0x000EB0EC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[585]);
			}
		}

		// Token: 0x060056E6 RID: 22246 RVA: 0x000ECF20 File Offset: 0x000EB120
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[585]);
			}
		}

		// Token: 0x060056E7 RID: 22247 RVA: 0x000ECF44 File Offset: 0x000EB144
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[585]);
		}

		// Token: 0x060056E8 RID: 22248 RVA: 0x000ECF58 File Offset: 0x000EB158
		[CLSCompliant(false)]
		public static void VertexAttrib2(int index, float x, float y)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single), index, x, y, GL.EntryPoints[586]);
		}

		// Token: 0x060056E9 RID: 22249 RVA: 0x000ECF70 File Offset: 0x000EB170
		[CLSCompliant(false)]
		public static void VertexAttrib2(uint index, float x, float y)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single), index, x, y, GL.EntryPoints[586]);
		}

		// Token: 0x060056EA RID: 22250 RVA: 0x000ECF88 File Offset: 0x000EB188
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[587]);
			}
		}

		// Token: 0x060056EB RID: 22251 RVA: 0x000ECFBC File Offset: 0x000EB1BC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[587]);
			}
		}

		// Token: 0x060056EC RID: 22252 RVA: 0x000ECFE0 File Offset: 0x000EB1E0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[587]);
		}

		// Token: 0x060056ED RID: 22253 RVA: 0x000ECFF4 File Offset: 0x000EB1F4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[587]);
			}
		}

		// Token: 0x060056EE RID: 22254 RVA: 0x000ED028 File Offset: 0x000EB228
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[587]);
			}
		}

		// Token: 0x060056EF RID: 22255 RVA: 0x000ED04C File Offset: 0x000EB24C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[587]);
		}

		// Token: 0x060056F0 RID: 22256 RVA: 0x000ED060 File Offset: 0x000EB260
		[CLSCompliant(false)]
		public static void VertexAttrib2(int index, short x, short y)
		{
			calli(System.Void(System.UInt32,System.Int16,System.Int16), index, x, y, GL.EntryPoints[588]);
		}

		// Token: 0x060056F1 RID: 22257 RVA: 0x000ED078 File Offset: 0x000EB278
		[CLSCompliant(false)]
		public static void VertexAttrib2(uint index, short x, short y)
		{
			calli(System.Void(System.UInt32,System.Int16,System.Int16), index, x, y, GL.EntryPoints[588]);
		}

		// Token: 0x060056F2 RID: 22258 RVA: 0x000ED090 File Offset: 0x000EB290
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[589]);
			}
		}

		// Token: 0x060056F3 RID: 22259 RVA: 0x000ED0C4 File Offset: 0x000EB2C4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[589]);
			}
		}

		// Token: 0x060056F4 RID: 22260 RVA: 0x000ED0E8 File Offset: 0x000EB2E8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[589]);
		}

		// Token: 0x060056F5 RID: 22261 RVA: 0x000ED0FC File Offset: 0x000EB2FC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[589]);
			}
		}

		// Token: 0x060056F6 RID: 22262 RVA: 0x000ED130 File Offset: 0x000EB330
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[589]);
			}
		}

		// Token: 0x060056F7 RID: 22263 RVA: 0x000ED154 File Offset: 0x000EB354
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[589]);
		}

		// Token: 0x060056F8 RID: 22264 RVA: 0x000ED168 File Offset: 0x000EB368
		[CLSCompliant(false)]
		public static void VertexAttrib3(int index, double x, double y, double z)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double,System.Double), index, x, y, z, GL.EntryPoints[590]);
		}

		// Token: 0x060056F9 RID: 22265 RVA: 0x000ED180 File Offset: 0x000EB380
		[CLSCompliant(false)]
		public static void VertexAttrib3(uint index, double x, double y, double z)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double,System.Double), index, x, y, z, GL.EntryPoints[590]);
		}

		// Token: 0x060056FA RID: 22266 RVA: 0x000ED198 File Offset: 0x000EB398
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[591]);
			}
		}

		// Token: 0x060056FB RID: 22267 RVA: 0x000ED1CC File Offset: 0x000EB3CC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[591]);
			}
		}

		// Token: 0x060056FC RID: 22268 RVA: 0x000ED1F0 File Offset: 0x000EB3F0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[591]);
		}

		// Token: 0x060056FD RID: 22269 RVA: 0x000ED204 File Offset: 0x000EB404
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[591]);
			}
		}

		// Token: 0x060056FE RID: 22270 RVA: 0x000ED238 File Offset: 0x000EB438
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[591]);
			}
		}

		// Token: 0x060056FF RID: 22271 RVA: 0x000ED25C File Offset: 0x000EB45C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[591]);
		}

		// Token: 0x06005700 RID: 22272 RVA: 0x000ED270 File Offset: 0x000EB470
		[CLSCompliant(false)]
		public static void VertexAttrib3(int index, float x, float y, float z)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single,System.Single), index, x, y, z, GL.EntryPoints[592]);
		}

		// Token: 0x06005701 RID: 22273 RVA: 0x000ED288 File Offset: 0x000EB488
		[CLSCompliant(false)]
		public static void VertexAttrib3(uint index, float x, float y, float z)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single,System.Single), index, x, y, z, GL.EntryPoints[592]);
		}

		// Token: 0x06005702 RID: 22274 RVA: 0x000ED2A0 File Offset: 0x000EB4A0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[593]);
			}
		}

		// Token: 0x06005703 RID: 22275 RVA: 0x000ED2D4 File Offset: 0x000EB4D4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[593]);
			}
		}

		// Token: 0x06005704 RID: 22276 RVA: 0x000ED2F8 File Offset: 0x000EB4F8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[593]);
		}

		// Token: 0x06005705 RID: 22277 RVA: 0x000ED30C File Offset: 0x000EB50C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[593]);
			}
		}

		// Token: 0x06005706 RID: 22278 RVA: 0x000ED340 File Offset: 0x000EB540
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[593]);
			}
		}

		// Token: 0x06005707 RID: 22279 RVA: 0x000ED364 File Offset: 0x000EB564
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[593]);
		}

		// Token: 0x06005708 RID: 22280 RVA: 0x000ED378 File Offset: 0x000EB578
		[CLSCompliant(false)]
		public static void VertexAttrib3(int index, short x, short y, short z)
		{
			calli(System.Void(System.UInt32,System.Int16,System.Int16,System.Int16), index, x, y, z, GL.EntryPoints[594]);
		}

		// Token: 0x06005709 RID: 22281 RVA: 0x000ED390 File Offset: 0x000EB590
		[CLSCompliant(false)]
		public static void VertexAttrib3(uint index, short x, short y, short z)
		{
			calli(System.Void(System.UInt32,System.Int16,System.Int16,System.Int16), index, x, y, z, GL.EntryPoints[594]);
		}

		// Token: 0x0600570A RID: 22282 RVA: 0x000ED3A8 File Offset: 0x000EB5A8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[595]);
			}
		}

		// Token: 0x0600570B RID: 22283 RVA: 0x000ED3DC File Offset: 0x000EB5DC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[595]);
			}
		}

		// Token: 0x0600570C RID: 22284 RVA: 0x000ED400 File Offset: 0x000EB600
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[595]);
		}

		// Token: 0x0600570D RID: 22285 RVA: 0x000ED414 File Offset: 0x000EB614
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[595]);
			}
		}

		// Token: 0x0600570E RID: 22286 RVA: 0x000ED448 File Offset: 0x000EB648
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[595]);
			}
		}

		// Token: 0x0600570F RID: 22287 RVA: 0x000ED46C File Offset: 0x000EB66C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[595]);
		}

		// Token: 0x06005710 RID: 22288 RVA: 0x000ED480 File Offset: 0x000EB680
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, sbyte[] v)
		{
			fixed (sbyte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[596]);
			}
		}

		// Token: 0x06005711 RID: 22289 RVA: 0x000ED4B4 File Offset: 0x000EB6B4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref sbyte v)
		{
			fixed (sbyte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[596]);
			}
		}

		// Token: 0x06005712 RID: 22290 RVA: 0x000ED4D8 File Offset: 0x000EB6D8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, sbyte* v)
		{
			calli(System.Void(System.UInt32,System.SByte*), index, v, GL.EntryPoints[596]);
		}

		// Token: 0x06005713 RID: 22291 RVA: 0x000ED4EC File Offset: 0x000EB6EC
		[CLSCompliant(false)]
		public static void VertexAttrib4(int index, double x, double y, double z, double w)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double,System.Double,System.Double), index, x, y, z, w, GL.EntryPoints[597]);
		}

		// Token: 0x06005714 RID: 22292 RVA: 0x000ED504 File Offset: 0x000EB704
		[CLSCompliant(false)]
		public static void VertexAttrib4(uint index, double x, double y, double z, double w)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double,System.Double,System.Double), index, x, y, z, w, GL.EntryPoints[597]);
		}

		// Token: 0x06005715 RID: 22293 RVA: 0x000ED51C File Offset: 0x000EB71C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[598]);
			}
		}

		// Token: 0x06005716 RID: 22294 RVA: 0x000ED550 File Offset: 0x000EB750
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[598]);
			}
		}

		// Token: 0x06005717 RID: 22295 RVA: 0x000ED574 File Offset: 0x000EB774
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[598]);
		}

		// Token: 0x06005718 RID: 22296 RVA: 0x000ED588 File Offset: 0x000EB788
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[598]);
			}
		}

		// Token: 0x06005719 RID: 22297 RVA: 0x000ED5BC File Offset: 0x000EB7BC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[598]);
			}
		}

		// Token: 0x0600571A RID: 22298 RVA: 0x000ED5E0 File Offset: 0x000EB7E0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[598]);
		}

		// Token: 0x0600571B RID: 22299 RVA: 0x000ED5F4 File Offset: 0x000EB7F4
		[CLSCompliant(false)]
		public static void VertexAttrib4(int index, float x, float y, float z, float w)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single), index, x, y, z, w, GL.EntryPoints[599]);
		}

		// Token: 0x0600571C RID: 22300 RVA: 0x000ED60C File Offset: 0x000EB80C
		[CLSCompliant(false)]
		public static void VertexAttrib4(uint index, float x, float y, float z, float w)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single), index, x, y, z, w, GL.EntryPoints[599]);
		}

		// Token: 0x0600571D RID: 22301 RVA: 0x000ED624 File Offset: 0x000EB824
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[600]);
			}
		}

		// Token: 0x0600571E RID: 22302 RVA: 0x000ED658 File Offset: 0x000EB858
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[600]);
			}
		}

		// Token: 0x0600571F RID: 22303 RVA: 0x000ED67C File Offset: 0x000EB87C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[600]);
		}

		// Token: 0x06005720 RID: 22304 RVA: 0x000ED690 File Offset: 0x000EB890
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[600]);
			}
		}

		// Token: 0x06005721 RID: 22305 RVA: 0x000ED6C4 File Offset: 0x000EB8C4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[600]);
			}
		}

		// Token: 0x06005722 RID: 22306 RVA: 0x000ED6E8 File Offset: 0x000EB8E8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[600]);
		}

		// Token: 0x06005723 RID: 22307 RVA: 0x000ED6FC File Offset: 0x000EB8FC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[601]);
			}
		}

		// Token: 0x06005724 RID: 22308 RVA: 0x000ED730 File Offset: 0x000EB930
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[601]);
			}
		}

		// Token: 0x06005725 RID: 22309 RVA: 0x000ED754 File Offset: 0x000EB954
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[601]);
		}

		// Token: 0x06005726 RID: 22310 RVA: 0x000ED768 File Offset: 0x000EB968
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[601]);
			}
		}

		// Token: 0x06005727 RID: 22311 RVA: 0x000ED79C File Offset: 0x000EB99C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[601]);
			}
		}

		// Token: 0x06005728 RID: 22312 RVA: 0x000ED7C0 File Offset: 0x000EB9C0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[601]);
		}

		// Token: 0x06005729 RID: 22313 RVA: 0x000ED7D4 File Offset: 0x000EB9D4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, sbyte[] v)
		{
			fixed (sbyte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[602]);
			}
		}

		// Token: 0x0600572A RID: 22314 RVA: 0x000ED808 File Offset: 0x000EBA08
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, ref sbyte v)
		{
			fixed (sbyte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[602]);
			}
		}

		// Token: 0x0600572B RID: 22315 RVA: 0x000ED82C File Offset: 0x000EBA2C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, sbyte* v)
		{
			calli(System.Void(System.UInt32,System.SByte*), index, v, GL.EntryPoints[602]);
		}

		// Token: 0x0600572C RID: 22316 RVA: 0x000ED840 File Offset: 0x000EBA40
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[603]);
			}
		}

		// Token: 0x0600572D RID: 22317 RVA: 0x000ED874 File Offset: 0x000EBA74
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[603]);
			}
		}

		// Token: 0x0600572E RID: 22318 RVA: 0x000ED898 File Offset: 0x000EBA98
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[603]);
		}

		// Token: 0x0600572F RID: 22319 RVA: 0x000ED8AC File Offset: 0x000EBAAC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[603]);
			}
		}

		// Token: 0x06005730 RID: 22320 RVA: 0x000ED8E0 File Offset: 0x000EBAE0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[603]);
			}
		}

		// Token: 0x06005731 RID: 22321 RVA: 0x000ED904 File Offset: 0x000EBB04
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[603]);
		}

		// Token: 0x06005732 RID: 22322 RVA: 0x000ED918 File Offset: 0x000EBB18
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[604]);
			}
		}

		// Token: 0x06005733 RID: 22323 RVA: 0x000ED94C File Offset: 0x000EBB4C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[604]);
			}
		}

		// Token: 0x06005734 RID: 22324 RVA: 0x000ED970 File Offset: 0x000EBB70
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[604]);
		}

		// Token: 0x06005735 RID: 22325 RVA: 0x000ED984 File Offset: 0x000EBB84
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[604]);
			}
		}

		// Token: 0x06005736 RID: 22326 RVA: 0x000ED9B8 File Offset: 0x000EBBB8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[604]);
			}
		}

		// Token: 0x06005737 RID: 22327 RVA: 0x000ED9DC File Offset: 0x000EBBDC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[604]);
		}

		// Token: 0x06005738 RID: 22328 RVA: 0x000ED9F0 File Offset: 0x000EBBF0
		[CLSCompliant(false)]
		public static void VertexAttrib4N(int index, byte x, byte y, byte z, byte w)
		{
			calli(System.Void(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte), index, x, y, z, w, GL.EntryPoints[605]);
		}

		// Token: 0x06005739 RID: 22329 RVA: 0x000EDA08 File Offset: 0x000EBC08
		[CLSCompliant(false)]
		public static void VertexAttrib4N(uint index, byte x, byte y, byte z, byte w)
		{
			calli(System.Void(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte), index, x, y, z, w, GL.EntryPoints[605]);
		}

		// Token: 0x0600573A RID: 22330 RVA: 0x000EDA20 File Offset: 0x000EBC20
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, byte[] v)
		{
			fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[606]);
			}
		}

		// Token: 0x0600573B RID: 22331 RVA: 0x000EDA54 File Offset: 0x000EBC54
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, ref byte v)
		{
			fixed (byte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[606]);
			}
		}

		// Token: 0x0600573C RID: 22332 RVA: 0x000EDA78 File Offset: 0x000EBC78
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, byte* v)
		{
			calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[606]);
		}

		// Token: 0x0600573D RID: 22333 RVA: 0x000EDA8C File Offset: 0x000EBC8C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, byte[] v)
		{
			fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[606]);
			}
		}

		// Token: 0x0600573E RID: 22334 RVA: 0x000EDAC0 File Offset: 0x000EBCC0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, ref byte v)
		{
			fixed (byte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[606]);
			}
		}

		// Token: 0x0600573F RID: 22335 RVA: 0x000EDAE4 File Offset: 0x000EBCE4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, byte* v)
		{
			calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[606]);
		}

		// Token: 0x06005740 RID: 22336 RVA: 0x000EDAF8 File Offset: 0x000EBCF8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, uint[] v)
		{
			fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[607]);
			}
		}

		// Token: 0x06005741 RID: 22337 RVA: 0x000EDB2C File Offset: 0x000EBD2C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, ref uint v)
		{
			fixed (uint* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[607]);
			}
		}

		// Token: 0x06005742 RID: 22338 RVA: 0x000EDB50 File Offset: 0x000EBD50
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, uint* v)
		{
			calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[607]);
		}

		// Token: 0x06005743 RID: 22339 RVA: 0x000EDB64 File Offset: 0x000EBD64
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, ushort[] v)
		{
			fixed (ushort* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[608]);
			}
		}

		// Token: 0x06005744 RID: 22340 RVA: 0x000EDB98 File Offset: 0x000EBD98
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, ref ushort v)
		{
			fixed (ushort* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[608]);
			}
		}

		// Token: 0x06005745 RID: 22341 RVA: 0x000EDBBC File Offset: 0x000EBDBC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, ushort* v)
		{
			calli(System.Void(System.UInt32,System.UInt16*), index, v, GL.EntryPoints[608]);
		}

		// Token: 0x06005746 RID: 22342 RVA: 0x000EDBD0 File Offset: 0x000EBDD0
		[CLSCompliant(false)]
		public static void VertexAttrib4(int index, short x, short y, short z, short w)
		{
			calli(System.Void(System.UInt32,System.Int16,System.Int16,System.Int16,System.Int16), index, x, y, z, w, GL.EntryPoints[609]);
		}

		// Token: 0x06005747 RID: 22343 RVA: 0x000EDBE8 File Offset: 0x000EBDE8
		[CLSCompliant(false)]
		public static void VertexAttrib4(uint index, short x, short y, short z, short w)
		{
			calli(System.Void(System.UInt32,System.Int16,System.Int16,System.Int16,System.Int16), index, x, y, z, w, GL.EntryPoints[609]);
		}

		// Token: 0x06005748 RID: 22344 RVA: 0x000EDC00 File Offset: 0x000EBE00
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[610]);
			}
		}

		// Token: 0x06005749 RID: 22345 RVA: 0x000EDC34 File Offset: 0x000EBE34
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[610]);
			}
		}

		// Token: 0x0600574A RID: 22346 RVA: 0x000EDC58 File Offset: 0x000EBE58
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[610]);
		}

		// Token: 0x0600574B RID: 22347 RVA: 0x000EDC6C File Offset: 0x000EBE6C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[610]);
			}
		}

		// Token: 0x0600574C RID: 22348 RVA: 0x000EDCA0 File Offset: 0x000EBEA0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[610]);
			}
		}

		// Token: 0x0600574D RID: 22349 RVA: 0x000EDCC4 File Offset: 0x000EBEC4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[610]);
		}

		// Token: 0x0600574E RID: 22350 RVA: 0x000EDCD8 File Offset: 0x000EBED8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, byte[] v)
		{
			fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[611]);
			}
		}

		// Token: 0x0600574F RID: 22351 RVA: 0x000EDD0C File Offset: 0x000EBF0C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, ref byte v)
		{
			fixed (byte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[611]);
			}
		}

		// Token: 0x06005750 RID: 22352 RVA: 0x000EDD30 File Offset: 0x000EBF30
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, byte* v)
		{
			calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[611]);
		}

		// Token: 0x06005751 RID: 22353 RVA: 0x000EDD44 File Offset: 0x000EBF44
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, byte[] v)
		{
			fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[611]);
			}
		}

		// Token: 0x06005752 RID: 22354 RVA: 0x000EDD78 File Offset: 0x000EBF78
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref byte v)
		{
			fixed (byte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[611]);
			}
		}

		// Token: 0x06005753 RID: 22355 RVA: 0x000EDD9C File Offset: 0x000EBF9C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, byte* v)
		{
			calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[611]);
		}

		// Token: 0x06005754 RID: 22356 RVA: 0x000EDDB0 File Offset: 0x000EBFB0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, uint[] v)
		{
			fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[612]);
			}
		}

		// Token: 0x06005755 RID: 22357 RVA: 0x000EDDE4 File Offset: 0x000EBFE4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref uint v)
		{
			fixed (uint* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[612]);
			}
		}

		// Token: 0x06005756 RID: 22358 RVA: 0x000EDE08 File Offset: 0x000EC008
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, uint* v)
		{
			calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[612]);
		}

		// Token: 0x06005757 RID: 22359 RVA: 0x000EDE1C File Offset: 0x000EC01C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ushort[] v)
		{
			fixed (ushort* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[613]);
			}
		}

		// Token: 0x06005758 RID: 22360 RVA: 0x000EDE50 File Offset: 0x000EC050
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref ushort v)
		{
			fixed (ushort* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[613]);
			}
		}

		// Token: 0x06005759 RID: 22361 RVA: 0x000EDE74 File Offset: 0x000EC074
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ushort* v)
		{
			calli(System.Void(System.UInt32,System.UInt16*), index, v, GL.EntryPoints[613]);
		}

		// Token: 0x0600575A RID: 22362 RVA: 0x000EDE88 File Offset: 0x000EC088
		[CLSCompliant(false)]
		public static void VertexAttribBinding(int attribindex, int bindingindex)
		{
			calli(System.Void(System.UInt32,System.UInt32), attribindex, bindingindex, GL.EntryPoints[614]);
		}

		// Token: 0x0600575B RID: 22363 RVA: 0x000EDE9C File Offset: 0x000EC09C
		[CLSCompliant(false)]
		public static void VertexAttribBinding(uint attribindex, uint bindingindex)
		{
			calli(System.Void(System.UInt32,System.UInt32), attribindex, bindingindex, GL.EntryPoints[614]);
		}

		// Token: 0x0600575C RID: 22364 RVA: 0x000EDEB0 File Offset: 0x000EC0B0
		[CLSCompliant(false)]
		public static void VertexAttribDivisor(int index, int divisor)
		{
			calli(System.Void(System.UInt32,System.UInt32), index, divisor, GL.EntryPoints[615]);
		}

		// Token: 0x0600575D RID: 22365 RVA: 0x000EDEC4 File Offset: 0x000EC0C4
		[CLSCompliant(false)]
		public static void VertexAttribDivisor(uint index, uint divisor)
		{
			calli(System.Void(System.UInt32,System.UInt32), index, divisor, GL.EntryPoints[615]);
		}

		// Token: 0x0600575E RID: 22366 RVA: 0x000EDED8 File Offset: 0x000EC0D8
		[CLSCompliant(false)]
		public static void VertexAttribFormat(int attribindex, int size, VertexAttribType type, bool normalized, int relativeoffset)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.UInt32), attribindex, size, type, normalized, relativeoffset, GL.EntryPoints[616]);
		}

		// Token: 0x0600575F RID: 22367 RVA: 0x000EDEF0 File Offset: 0x000EC0F0
		[CLSCompliant(false)]
		public static void VertexAttribFormat(uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.UInt32), attribindex, size, type, normalized, relativeoffset, GL.EntryPoints[616]);
		}

		// Token: 0x06005760 RID: 22368 RVA: 0x000EDF08 File Offset: 0x000EC108
		[CLSCompliant(false)]
		public static void VertexAttribI1(int index, int x)
		{
			calli(System.Void(System.UInt32,System.Int32), index, x, GL.EntryPoints[617]);
		}

		// Token: 0x06005761 RID: 22369 RVA: 0x000EDF1C File Offset: 0x000EC11C
		[CLSCompliant(false)]
		public static void VertexAttribI1(uint index, int x)
		{
			calli(System.Void(System.UInt32,System.Int32), index, x, GL.EntryPoints[617]);
		}

		// Token: 0x06005762 RID: 22370 RVA: 0x000EDF30 File Offset: 0x000EC130
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI1(int index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[618]);
		}

		// Token: 0x06005763 RID: 22371 RVA: 0x000EDF44 File Offset: 0x000EC144
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI1(uint index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[618]);
		}

		// Token: 0x06005764 RID: 22372 RVA: 0x000EDF58 File Offset: 0x000EC158
		[CLSCompliant(false)]
		public static void VertexAttribI1(uint index, uint x)
		{
			calli(System.Void(System.UInt32,System.UInt32), index, x, GL.EntryPoints[619]);
		}

		// Token: 0x06005765 RID: 22373 RVA: 0x000EDF6C File Offset: 0x000EC16C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI1(uint index, uint* v)
		{
			calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[620]);
		}

		// Token: 0x06005766 RID: 22374 RVA: 0x000EDF80 File Offset: 0x000EC180
		[CLSCompliant(false)]
		public static void VertexAttribI2(int index, int x, int y)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), index, x, y, GL.EntryPoints[621]);
		}

		// Token: 0x06005767 RID: 22375 RVA: 0x000EDF98 File Offset: 0x000EC198
		[CLSCompliant(false)]
		public static void VertexAttribI2(uint index, int x, int y)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), index, x, y, GL.EntryPoints[621]);
		}

		// Token: 0x06005768 RID: 22376 RVA: 0x000EDFB0 File Offset: 0x000EC1B0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(int index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[622]);
			}
		}

		// Token: 0x06005769 RID: 22377 RVA: 0x000EDFE4 File Offset: 0x000EC1E4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(int index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[622]);
			}
		}

		// Token: 0x0600576A RID: 22378 RVA: 0x000EE008 File Offset: 0x000EC208
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(int index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[622]);
		}

		// Token: 0x0600576B RID: 22379 RVA: 0x000EE01C File Offset: 0x000EC21C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(uint index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[622]);
			}
		}

		// Token: 0x0600576C RID: 22380 RVA: 0x000EE050 File Offset: 0x000EC250
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(uint index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[622]);
			}
		}

		// Token: 0x0600576D RID: 22381 RVA: 0x000EE074 File Offset: 0x000EC274
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(uint index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[622]);
		}

		// Token: 0x0600576E RID: 22382 RVA: 0x000EE088 File Offset: 0x000EC288
		[CLSCompliant(false)]
		public static void VertexAttribI2(uint index, uint x, uint y)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), index, x, y, GL.EntryPoints[623]);
		}

		// Token: 0x0600576F RID: 22383 RVA: 0x000EE0A0 File Offset: 0x000EC2A0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(uint index, uint[] v)
		{
			fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[624]);
			}
		}

		// Token: 0x06005770 RID: 22384 RVA: 0x000EE0D4 File Offset: 0x000EC2D4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(uint index, ref uint v)
		{
			fixed (uint* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[624]);
			}
		}

		// Token: 0x06005771 RID: 22385 RVA: 0x000EE0F8 File Offset: 0x000EC2F8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(uint index, uint* v)
		{
			calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[624]);
		}

		// Token: 0x06005772 RID: 22386 RVA: 0x000EE10C File Offset: 0x000EC30C
		[CLSCompliant(false)]
		public static void VertexAttribI3(int index, int x, int y, int z)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), index, x, y, z, GL.EntryPoints[625]);
		}

		// Token: 0x06005773 RID: 22387 RVA: 0x000EE124 File Offset: 0x000EC324
		[CLSCompliant(false)]
		public static void VertexAttribI3(uint index, int x, int y, int z)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), index, x, y, z, GL.EntryPoints[625]);
		}

		// Token: 0x06005774 RID: 22388 RVA: 0x000EE13C File Offset: 0x000EC33C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(int index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[626]);
			}
		}

		// Token: 0x06005775 RID: 22389 RVA: 0x000EE170 File Offset: 0x000EC370
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(int index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[626]);
			}
		}

		// Token: 0x06005776 RID: 22390 RVA: 0x000EE194 File Offset: 0x000EC394
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(int index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[626]);
		}

		// Token: 0x06005777 RID: 22391 RVA: 0x000EE1A8 File Offset: 0x000EC3A8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(uint index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[626]);
			}
		}

		// Token: 0x06005778 RID: 22392 RVA: 0x000EE1DC File Offset: 0x000EC3DC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(uint index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[626]);
			}
		}

		// Token: 0x06005779 RID: 22393 RVA: 0x000EE200 File Offset: 0x000EC400
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(uint index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[626]);
		}

		// Token: 0x0600577A RID: 22394 RVA: 0x000EE214 File Offset: 0x000EC414
		[CLSCompliant(false)]
		public static void VertexAttribI3(uint index, uint x, uint y, uint z)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.UInt32), index, x, y, z, GL.EntryPoints[627]);
		}

		// Token: 0x0600577B RID: 22395 RVA: 0x000EE22C File Offset: 0x000EC42C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(uint index, uint[] v)
		{
			fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[628]);
			}
		}

		// Token: 0x0600577C RID: 22396 RVA: 0x000EE260 File Offset: 0x000EC460
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(uint index, ref uint v)
		{
			fixed (uint* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[628]);
			}
		}

		// Token: 0x0600577D RID: 22397 RVA: 0x000EE284 File Offset: 0x000EC484
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(uint index, uint* v)
		{
			calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[628]);
		}

		// Token: 0x0600577E RID: 22398 RVA: 0x000EE298 File Offset: 0x000EC498
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, sbyte[] v)
		{
			fixed (sbyte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[629]);
			}
		}

		// Token: 0x0600577F RID: 22399 RVA: 0x000EE2CC File Offset: 0x000EC4CC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ref sbyte v)
		{
			fixed (sbyte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[629]);
			}
		}

		// Token: 0x06005780 RID: 22400 RVA: 0x000EE2F0 File Offset: 0x000EC4F0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, sbyte* v)
		{
			calli(System.Void(System.UInt32,System.SByte*), index, v, GL.EntryPoints[629]);
		}

		// Token: 0x06005781 RID: 22401 RVA: 0x000EE304 File Offset: 0x000EC504
		[CLSCompliant(false)]
		public static void VertexAttribI4(int index, int x, int y, int z, int w)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), index, x, y, z, w, GL.EntryPoints[630]);
		}

		// Token: 0x06005782 RID: 22402 RVA: 0x000EE31C File Offset: 0x000EC51C
		[CLSCompliant(false)]
		public static void VertexAttribI4(uint index, int x, int y, int z, int w)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), index, x, y, z, w, GL.EntryPoints[630]);
		}

		// Token: 0x06005783 RID: 22403 RVA: 0x000EE334 File Offset: 0x000EC534
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[631]);
			}
		}

		// Token: 0x06005784 RID: 22404 RVA: 0x000EE368 File Offset: 0x000EC568
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[631]);
			}
		}

		// Token: 0x06005785 RID: 22405 RVA: 0x000EE38C File Offset: 0x000EC58C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[631]);
		}

		// Token: 0x06005786 RID: 22406 RVA: 0x000EE3A0 File Offset: 0x000EC5A0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[631]);
			}
		}

		// Token: 0x06005787 RID: 22407 RVA: 0x000EE3D4 File Offset: 0x000EC5D4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[631]);
			}
		}

		// Token: 0x06005788 RID: 22408 RVA: 0x000EE3F8 File Offset: 0x000EC5F8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[631]);
		}

		// Token: 0x06005789 RID: 22409 RVA: 0x000EE40C File Offset: 0x000EC60C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[632]);
			}
		}

		// Token: 0x0600578A RID: 22410 RVA: 0x000EE440 File Offset: 0x000EC640
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[632]);
			}
		}

		// Token: 0x0600578B RID: 22411 RVA: 0x000EE464 File Offset: 0x000EC664
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[632]);
		}

		// Token: 0x0600578C RID: 22412 RVA: 0x000EE478 File Offset: 0x000EC678
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[632]);
			}
		}

		// Token: 0x0600578D RID: 22413 RVA: 0x000EE4AC File Offset: 0x000EC6AC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[632]);
			}
		}

		// Token: 0x0600578E RID: 22414 RVA: 0x000EE4D0 File Offset: 0x000EC6D0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[632]);
		}

		// Token: 0x0600578F RID: 22415 RVA: 0x000EE4E4 File Offset: 0x000EC6E4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, byte[] v)
		{
			fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[633]);
			}
		}

		// Token: 0x06005790 RID: 22416 RVA: 0x000EE518 File Offset: 0x000EC718
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, ref byte v)
		{
			fixed (byte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[633]);
			}
		}

		// Token: 0x06005791 RID: 22417 RVA: 0x000EE53C File Offset: 0x000EC73C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, byte* v)
		{
			calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[633]);
		}

		// Token: 0x06005792 RID: 22418 RVA: 0x000EE550 File Offset: 0x000EC750
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, byte[] v)
		{
			fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[633]);
			}
		}

		// Token: 0x06005793 RID: 22419 RVA: 0x000EE584 File Offset: 0x000EC784
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ref byte v)
		{
			fixed (byte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[633]);
			}
		}

		// Token: 0x06005794 RID: 22420 RVA: 0x000EE5A8 File Offset: 0x000EC7A8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, byte* v)
		{
			calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[633]);
		}

		// Token: 0x06005795 RID: 22421 RVA: 0x000EE5BC File Offset: 0x000EC7BC
		[CLSCompliant(false)]
		public static void VertexAttribI4(uint index, uint x, uint y, uint z, uint w)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), index, x, y, z, w, GL.EntryPoints[634]);
		}

		// Token: 0x06005796 RID: 22422 RVA: 0x000EE5D4 File Offset: 0x000EC7D4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, uint[] v)
		{
			fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[635]);
			}
		}

		// Token: 0x06005797 RID: 22423 RVA: 0x000EE608 File Offset: 0x000EC808
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ref uint v)
		{
			fixed (uint* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[635]);
			}
		}

		// Token: 0x06005798 RID: 22424 RVA: 0x000EE62C File Offset: 0x000EC82C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, uint* v)
		{
			calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[635]);
		}

		// Token: 0x06005799 RID: 22425 RVA: 0x000EE640 File Offset: 0x000EC840
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ushort[] v)
		{
			fixed (ushort* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[636]);
			}
		}

		// Token: 0x0600579A RID: 22426 RVA: 0x000EE674 File Offset: 0x000EC874
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ref ushort v)
		{
			fixed (ushort* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[636]);
			}
		}

		// Token: 0x0600579B RID: 22427 RVA: 0x000EE698 File Offset: 0x000EC898
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ushort* v)
		{
			calli(System.Void(System.UInt32,System.UInt16*), index, v, GL.EntryPoints[636]);
		}

		// Token: 0x0600579C RID: 22428 RVA: 0x000EE6AC File Offset: 0x000EC8AC
		[CLSCompliant(false)]
		public static void VertexAttribIFormat(int attribindex, int size, VertexAttribIntegerType type, int relativeoffset)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32), attribindex, size, type, relativeoffset, GL.EntryPoints[637]);
		}

		// Token: 0x0600579D RID: 22429 RVA: 0x000EE6C4 File Offset: 0x000EC8C4
		[CLSCompliant(false)]
		public static void VertexAttribIFormat(uint attribindex, int size, VertexAttribIntegerType type, uint relativeoffset)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32), attribindex, size, type, relativeoffset, GL.EntryPoints[637]);
		}

		// Token: 0x0600579E RID: 22430 RVA: 0x000EE6DC File Offset: 0x000EC8DC
		[CLSCompliant(false)]
		public static void VertexAttribIPointer(int index, int size, VertexAttribIntegerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[638]);
		}

		// Token: 0x0600579F RID: 22431 RVA: 0x000EE6F4 File Offset: 0x000EC8F4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[638]);
			}
		}

		// Token: 0x060057A0 RID: 22432 RVA: 0x000EE730 File Offset: 0x000EC930
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[638]);
			}
		}

		// Token: 0x060057A1 RID: 22433 RVA: 0x000EE770 File Offset: 0x000EC970
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[638]);
			}
		}

		// Token: 0x060057A2 RID: 22434 RVA: 0x000EE7B0 File Offset: 0x000EC9B0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
		{
			fixed (T4* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[638]);
			}
		}

		// Token: 0x060057A3 RID: 22435 RVA: 0x000EE7D8 File Offset: 0x000EC9D8
		[CLSCompliant(false)]
		public static void VertexAttribIPointer(uint index, int size, VertexAttribIntegerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[638]);
		}

		// Token: 0x060057A4 RID: 22436 RVA: 0x000EE7F0 File Offset: 0x000EC9F0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[638]);
			}
		}

		// Token: 0x060057A5 RID: 22437 RVA: 0x000EE82C File Offset: 0x000ECA2C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[638]);
			}
		}

		// Token: 0x060057A6 RID: 22438 RVA: 0x000EE86C File Offset: 0x000ECA6C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[638]);
			}
		}

		// Token: 0x060057A7 RID: 22439 RVA: 0x000EE8AC File Offset: 0x000ECAAC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
		{
			fixed (T4* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[638]);
			}
		}

		// Token: 0x060057A8 RID: 22440 RVA: 0x000EE8D4 File Offset: 0x000ECAD4
		[CLSCompliant(false)]
		public static void VertexAttribL1(int index, double x)
		{
			calli(System.Void(System.UInt32,System.Double), index, x, GL.EntryPoints[639]);
		}

		// Token: 0x060057A9 RID: 22441 RVA: 0x000EE8E8 File Offset: 0x000ECAE8
		[CLSCompliant(false)]
		public static void VertexAttribL1(uint index, double x)
		{
			calli(System.Void(System.UInt32,System.Double), index, x, GL.EntryPoints[639]);
		}

		// Token: 0x060057AA RID: 22442 RVA: 0x000EE8FC File Offset: 0x000ECAFC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL1(int index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[640]);
		}

		// Token: 0x060057AB RID: 22443 RVA: 0x000EE910 File Offset: 0x000ECB10
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL1(uint index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[640]);
		}

		// Token: 0x060057AC RID: 22444 RVA: 0x000EE924 File Offset: 0x000ECB24
		[CLSCompliant(false)]
		public static void VertexAttribL2(int index, double x, double y)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double), index, x, y, GL.EntryPoints[643]);
		}

		// Token: 0x060057AD RID: 22445 RVA: 0x000EE93C File Offset: 0x000ECB3C
		[CLSCompliant(false)]
		public static void VertexAttribL2(uint index, double x, double y)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double), index, x, y, GL.EntryPoints[643]);
		}

		// Token: 0x060057AE RID: 22446 RVA: 0x000EE954 File Offset: 0x000ECB54
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL2(int index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[644]);
			}
		}

		// Token: 0x060057AF RID: 22447 RVA: 0x000EE988 File Offset: 0x000ECB88
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL2(int index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[644]);
			}
		}

		// Token: 0x060057B0 RID: 22448 RVA: 0x000EE9AC File Offset: 0x000ECBAC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL2(int index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[644]);
		}

		// Token: 0x060057B1 RID: 22449 RVA: 0x000EE9C0 File Offset: 0x000ECBC0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL2(uint index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[644]);
			}
		}

		// Token: 0x060057B2 RID: 22450 RVA: 0x000EE9F4 File Offset: 0x000ECBF4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL2(uint index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[644]);
			}
		}

		// Token: 0x060057B3 RID: 22451 RVA: 0x000EEA18 File Offset: 0x000ECC18
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL2(uint index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[644]);
		}

		// Token: 0x060057B4 RID: 22452 RVA: 0x000EEA2C File Offset: 0x000ECC2C
		[CLSCompliant(false)]
		public static void VertexAttribL3(int index, double x, double y, double z)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double,System.Double), index, x, y, z, GL.EntryPoints[645]);
		}

		// Token: 0x060057B5 RID: 22453 RVA: 0x000EEA44 File Offset: 0x000ECC44
		[CLSCompliant(false)]
		public static void VertexAttribL3(uint index, double x, double y, double z)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double,System.Double), index, x, y, z, GL.EntryPoints[645]);
		}

		// Token: 0x060057B6 RID: 22454 RVA: 0x000EEA5C File Offset: 0x000ECC5C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL3(int index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[646]);
			}
		}

		// Token: 0x060057B7 RID: 22455 RVA: 0x000EEA90 File Offset: 0x000ECC90
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL3(int index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[646]);
			}
		}

		// Token: 0x060057B8 RID: 22456 RVA: 0x000EEAB4 File Offset: 0x000ECCB4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL3(int index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[646]);
		}

		// Token: 0x060057B9 RID: 22457 RVA: 0x000EEAC8 File Offset: 0x000ECCC8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL3(uint index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[646]);
			}
		}

		// Token: 0x060057BA RID: 22458 RVA: 0x000EEAFC File Offset: 0x000ECCFC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL3(uint index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[646]);
			}
		}

		// Token: 0x060057BB RID: 22459 RVA: 0x000EEB20 File Offset: 0x000ECD20
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL3(uint index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[646]);
		}

		// Token: 0x060057BC RID: 22460 RVA: 0x000EEB34 File Offset: 0x000ECD34
		[CLSCompliant(false)]
		public static void VertexAttribL4(int index, double x, double y, double z, double w)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double,System.Double,System.Double), index, x, y, z, w, GL.EntryPoints[647]);
		}

		// Token: 0x060057BD RID: 22461 RVA: 0x000EEB4C File Offset: 0x000ECD4C
		[CLSCompliant(false)]
		public static void VertexAttribL4(uint index, double x, double y, double z, double w)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double,System.Double,System.Double), index, x, y, z, w, GL.EntryPoints[647]);
		}

		// Token: 0x060057BE RID: 22462 RVA: 0x000EEB64 File Offset: 0x000ECD64
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL4(int index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[648]);
			}
		}

		// Token: 0x060057BF RID: 22463 RVA: 0x000EEB98 File Offset: 0x000ECD98
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL4(int index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[648]);
			}
		}

		// Token: 0x060057C0 RID: 22464 RVA: 0x000EEBBC File Offset: 0x000ECDBC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL4(int index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[648]);
		}

		// Token: 0x060057C1 RID: 22465 RVA: 0x000EEBD0 File Offset: 0x000ECDD0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL4(uint index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[648]);
			}
		}

		// Token: 0x060057C2 RID: 22466 RVA: 0x000EEC04 File Offset: 0x000ECE04
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL4(uint index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[648]);
			}
		}

		// Token: 0x060057C3 RID: 22467 RVA: 0x000EEC28 File Offset: 0x000ECE28
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL4(uint index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[648]);
		}

		// Token: 0x060057C4 RID: 22468 RVA: 0x000EEC3C File Offset: 0x000ECE3C
		[CLSCompliant(false)]
		public static void VertexAttribLFormat(int attribindex, int size, VertexAttribDoubleType type, int relativeoffset)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32), attribindex, size, type, relativeoffset, GL.EntryPoints[649]);
		}

		// Token: 0x060057C5 RID: 22469 RVA: 0x000EEC54 File Offset: 0x000ECE54
		[CLSCompliant(false)]
		public static void VertexAttribLFormat(uint attribindex, int size, VertexAttribDoubleType type, uint relativeoffset)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32), attribindex, size, type, relativeoffset, GL.EntryPoints[649]);
		}

		// Token: 0x060057C6 RID: 22470 RVA: 0x000EEC6C File Offset: 0x000ECE6C
		[CLSCompliant(false)]
		public static void VertexAttribLPointer(int index, int size, VertexAttribDoubleType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[650]);
		}

		// Token: 0x060057C7 RID: 22471 RVA: 0x000EEC84 File Offset: 0x000ECE84
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(int index, int size, VertexAttribDoubleType type, int stride, [In] [Out] T4[] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[650]);
			}
		}

		// Token: 0x060057C8 RID: 22472 RVA: 0x000EECC0 File Offset: 0x000ECEC0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(int index, int size, VertexAttribDoubleType type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[650]);
			}
		}

		// Token: 0x060057C9 RID: 22473 RVA: 0x000EED00 File Offset: 0x000ECF00
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(int index, int size, VertexAttribDoubleType type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[650]);
			}
		}

		// Token: 0x060057CA RID: 22474 RVA: 0x000EED40 File Offset: 0x000ECF40
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(int index, int size, VertexAttribDoubleType type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
		{
			fixed (T4* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[650]);
			}
		}

		// Token: 0x060057CB RID: 22475 RVA: 0x000EED68 File Offset: 0x000ECF68
		[CLSCompliant(false)]
		public static void VertexAttribLPointer(uint index, int size, VertexAttribDoubleType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[650]);
		}

		// Token: 0x060057CC RID: 22476 RVA: 0x000EED80 File Offset: 0x000ECF80
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDoubleType type, int stride, [In] [Out] T4[] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[650]);
			}
		}

		// Token: 0x060057CD RID: 22477 RVA: 0x000EEDBC File Offset: 0x000ECFBC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDoubleType type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[650]);
			}
		}

		// Token: 0x060057CE RID: 22478 RVA: 0x000EEDFC File Offset: 0x000ECFFC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDoubleType type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[650]);
			}
		}

		// Token: 0x060057CF RID: 22479 RVA: 0x000EEE3C File Offset: 0x000ED03C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDoubleType type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
		{
			fixed (T4* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[650]);
			}
		}

		// Token: 0x060057D0 RID: 22480 RVA: 0x000EEE64 File Offset: 0x000ED064
		[CLSCompliant(false)]
		public static void VertexAttribP1(int index, PackedPointerType type, bool normalized, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32), index, type, normalized, value, GL.EntryPoints[651]);
		}

		// Token: 0x060057D1 RID: 22481 RVA: 0x000EEE7C File Offset: 0x000ED07C
		[CLSCompliant(false)]
		public static void VertexAttribP1(uint index, PackedPointerType type, bool normalized, uint value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32), index, type, normalized, value, GL.EntryPoints[651]);
		}

		// Token: 0x060057D2 RID: 22482 RVA: 0x000EEE94 File Offset: 0x000ED094
		[CLSCompliant(false)]
		public unsafe static void VertexAttribP1(int index, PackedPointerType type, bool normalized, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32*), index, type, normalized, value, GL.EntryPoints[652]);
		}

		// Token: 0x060057D3 RID: 22483 RVA: 0x000EEEAC File Offset: 0x000ED0AC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribP1(uint index, PackedPointerType type, bool normalized, uint* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32*), index, type, normalized, value, GL.EntryPoints[652]);
		}

		// Token: 0x060057D4 RID: 22484 RVA: 0x000EEEC4 File Offset: 0x000ED0C4
		[CLSCompliant(false)]
		public static void VertexAttribP2(int index, PackedPointerType type, bool normalized, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32), index, type, normalized, value, GL.EntryPoints[653]);
		}

		// Token: 0x060057D5 RID: 22485 RVA: 0x000EEEDC File Offset: 0x000ED0DC
		[CLSCompliant(false)]
		public static void VertexAttribP2(uint index, PackedPointerType type, bool normalized, uint value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32), index, type, normalized, value, GL.EntryPoints[653]);
		}

		// Token: 0x060057D6 RID: 22486 RVA: 0x000EEEF4 File Offset: 0x000ED0F4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribP2(int index, PackedPointerType type, bool normalized, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32*), index, type, normalized, value, GL.EntryPoints[654]);
		}

		// Token: 0x060057D7 RID: 22487 RVA: 0x000EEF0C File Offset: 0x000ED10C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribP2(uint index, PackedPointerType type, bool normalized, uint* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32*), index, type, normalized, value, GL.EntryPoints[654]);
		}

		// Token: 0x060057D8 RID: 22488 RVA: 0x000EEF24 File Offset: 0x000ED124
		[CLSCompliant(false)]
		public static void VertexAttribP3(int index, PackedPointerType type, bool normalized, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32), index, type, normalized, value, GL.EntryPoints[655]);
		}

		// Token: 0x060057D9 RID: 22489 RVA: 0x000EEF3C File Offset: 0x000ED13C
		[CLSCompliant(false)]
		public static void VertexAttribP3(uint index, PackedPointerType type, bool normalized, uint value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32), index, type, normalized, value, GL.EntryPoints[655]);
		}

		// Token: 0x060057DA RID: 22490 RVA: 0x000EEF54 File Offset: 0x000ED154
		[CLSCompliant(false)]
		public unsafe static void VertexAttribP3(int index, PackedPointerType type, bool normalized, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32*), index, type, normalized, value, GL.EntryPoints[656]);
		}

		// Token: 0x060057DB RID: 22491 RVA: 0x000EEF6C File Offset: 0x000ED16C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribP3(uint index, PackedPointerType type, bool normalized, uint* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32*), index, type, normalized, value, GL.EntryPoints[656]);
		}

		// Token: 0x060057DC RID: 22492 RVA: 0x000EEF84 File Offset: 0x000ED184
		[CLSCompliant(false)]
		public static void VertexAttribP4(int index, PackedPointerType type, bool normalized, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32), index, type, normalized, value, GL.EntryPoints[657]);
		}

		// Token: 0x060057DD RID: 22493 RVA: 0x000EEF9C File Offset: 0x000ED19C
		[CLSCompliant(false)]
		public static void VertexAttribP4(uint index, PackedPointerType type, bool normalized, uint value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32), index, type, normalized, value, GL.EntryPoints[657]);
		}

		// Token: 0x060057DE RID: 22494 RVA: 0x000EEFB4 File Offset: 0x000ED1B4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribP4(int index, PackedPointerType type, bool normalized, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32*), index, type, normalized, value, GL.EntryPoints[658]);
		}

		// Token: 0x060057DF RID: 22495 RVA: 0x000EEFCC File Offset: 0x000ED1CC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribP4(uint index, PackedPointerType type, bool normalized, uint* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32*), index, type, normalized, value, GL.EntryPoints[658]);
		}

		// Token: 0x060057E0 RID: 22496 RVA: 0x000EEFE4 File Offset: 0x000ED1E4
		[CLSCompliant(false)]
		public static void VertexAttribPointer(int index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, pointer, GL.EntryPoints[659]);
		}

		// Token: 0x060057E1 RID: 22497 RVA: 0x000EF000 File Offset: 0x000ED200
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[659]);
			}
		}

		// Token: 0x060057E2 RID: 22498 RVA: 0x000EF03C File Offset: 0x000ED23C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[,] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[659]);
			}
		}

		// Token: 0x060057E3 RID: 22499 RVA: 0x000EF07C File Offset: 0x000ED27C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[,,] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[659]);
			}
		}

		// Token: 0x060057E4 RID: 22500 RVA: 0x000EF0C0 File Offset: 0x000ED2C0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] ref T5 pointer) where T5 : struct
		{
			fixed (T5* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[659]);
			}
		}

		// Token: 0x060057E5 RID: 22501 RVA: 0x000EF0E8 File Offset: 0x000ED2E8
		[CLSCompliant(false)]
		public static void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, pointer, GL.EntryPoints[659]);
		}

		// Token: 0x060057E6 RID: 22502 RVA: 0x000EF104 File Offset: 0x000ED304
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[659]);
			}
		}

		// Token: 0x060057E7 RID: 22503 RVA: 0x000EF140 File Offset: 0x000ED340
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[,] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[659]);
			}
		}

		// Token: 0x060057E8 RID: 22504 RVA: 0x000EF180 File Offset: 0x000ED380
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[,,] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[659]);
			}
		}

		// Token: 0x060057E9 RID: 22505 RVA: 0x000EF1C4 File Offset: 0x000ED3C4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] ref T5 pointer) where T5 : struct
		{
			fixed (T5* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[659]);
			}
		}

		// Token: 0x060057EA RID: 22506 RVA: 0x000EF1EC File Offset: 0x000ED3EC
		[CLSCompliant(false)]
		public static void VertexBindingDivisor(int bindingindex, int divisor)
		{
			calli(System.Void(System.UInt32,System.UInt32), bindingindex, divisor, GL.EntryPoints[660]);
		}

		// Token: 0x060057EB RID: 22507 RVA: 0x000EF200 File Offset: 0x000ED400
		[CLSCompliant(false)]
		public static void VertexBindingDivisor(uint bindingindex, uint divisor)
		{
			calli(System.Void(System.UInt32,System.UInt32), bindingindex, divisor, GL.EntryPoints[660]);
		}

		// Token: 0x060057EC RID: 22508 RVA: 0x000EF214 File Offset: 0x000ED414
		[CLSCompliant(false)]
		public static void VertexP2(PackedPointerType type, int value)
		{
			calli(System.Void(System.Int32,System.UInt32), type, value, GL.EntryPoints[661]);
		}

		// Token: 0x060057ED RID: 22509 RVA: 0x000EF228 File Offset: 0x000ED428
		[CLSCompliant(false)]
		public static void VertexP2(PackedPointerType type, uint value)
		{
			calli(System.Void(System.Int32,System.UInt32), type, value, GL.EntryPoints[661]);
		}

		// Token: 0x060057EE RID: 22510 RVA: 0x000EF23C File Offset: 0x000ED43C
		[CLSCompliant(false)]
		public unsafe static void VertexP2(PackedPointerType type, int* value)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, value, GL.EntryPoints[662]);
		}

		// Token: 0x060057EF RID: 22511 RVA: 0x000EF250 File Offset: 0x000ED450
		[CLSCompliant(false)]
		public unsafe static void VertexP2(PackedPointerType type, uint* value)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, value, GL.EntryPoints[662]);
		}

		// Token: 0x060057F0 RID: 22512 RVA: 0x000EF264 File Offset: 0x000ED464
		[CLSCompliant(false)]
		public static void VertexP3(PackedPointerType type, int value)
		{
			calli(System.Void(System.Int32,System.UInt32), type, value, GL.EntryPoints[663]);
		}

		// Token: 0x060057F1 RID: 22513 RVA: 0x000EF278 File Offset: 0x000ED478
		[CLSCompliant(false)]
		public static void VertexP3(PackedPointerType type, uint value)
		{
			calli(System.Void(System.Int32,System.UInt32), type, value, GL.EntryPoints[663]);
		}

		// Token: 0x060057F2 RID: 22514 RVA: 0x000EF28C File Offset: 0x000ED48C
		[CLSCompliant(false)]
		public unsafe static void VertexP3(PackedPointerType type, int* value)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, value, GL.EntryPoints[664]);
		}

		// Token: 0x060057F3 RID: 22515 RVA: 0x000EF2A0 File Offset: 0x000ED4A0
		[CLSCompliant(false)]
		public unsafe static void VertexP3(PackedPointerType type, uint* value)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, value, GL.EntryPoints[664]);
		}

		// Token: 0x060057F4 RID: 22516 RVA: 0x000EF2B4 File Offset: 0x000ED4B4
		[CLSCompliant(false)]
		public static void VertexP4(PackedPointerType type, int value)
		{
			calli(System.Void(System.Int32,System.UInt32), type, value, GL.EntryPoints[665]);
		}

		// Token: 0x060057F5 RID: 22517 RVA: 0x000EF2C8 File Offset: 0x000ED4C8
		[CLSCompliant(false)]
		public static void VertexP4(PackedPointerType type, uint value)
		{
			calli(System.Void(System.Int32,System.UInt32), type, value, GL.EntryPoints[665]);
		}

		// Token: 0x060057F6 RID: 22518 RVA: 0x000EF2DC File Offset: 0x000ED4DC
		[CLSCompliant(false)]
		public unsafe static void VertexP4(PackedPointerType type, int* value)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, value, GL.EntryPoints[666]);
		}

		// Token: 0x060057F7 RID: 22519 RVA: 0x000EF2F0 File Offset: 0x000ED4F0
		[CLSCompliant(false)]
		public unsafe static void VertexP4(PackedPointerType type, uint* value)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, value, GL.EntryPoints[666]);
		}

		// Token: 0x060057F8 RID: 22520 RVA: 0x000EF304 File Offset: 0x000ED504
		public static void Viewport(int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), x, y, width, height, GL.EntryPoints[667]);
		}

		// Token: 0x060057F9 RID: 22521 RVA: 0x000EF31C File Offset: 0x000ED51C
		[CLSCompliant(false)]
		public unsafe static void ViewportArray(int first, int count, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), first, count, ptr, GL.EntryPoints[668]);
			}
		}

		// Token: 0x060057FA RID: 22522 RVA: 0x000EF354 File Offset: 0x000ED554
		[CLSCompliant(false)]
		public unsafe static void ViewportArray(int first, int count, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), first, count, ptr, GL.EntryPoints[668]);
			}
		}

		// Token: 0x060057FB RID: 22523 RVA: 0x000EF378 File Offset: 0x000ED578
		[CLSCompliant(false)]
		public unsafe static void ViewportArray(int first, int count, float* v)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), first, count, v, GL.EntryPoints[668]);
		}

		// Token: 0x060057FC RID: 22524 RVA: 0x000EF390 File Offset: 0x000ED590
		[CLSCompliant(false)]
		public unsafe static void ViewportArray(uint first, int count, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), first, count, ptr, GL.EntryPoints[668]);
			}
		}

		// Token: 0x060057FD RID: 22525 RVA: 0x000EF3C8 File Offset: 0x000ED5C8
		[CLSCompliant(false)]
		public unsafe static void ViewportArray(uint first, int count, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), first, count, ptr, GL.EntryPoints[668]);
			}
		}

		// Token: 0x060057FE RID: 22526 RVA: 0x000EF3EC File Offset: 0x000ED5EC
		[CLSCompliant(false)]
		public unsafe static void ViewportArray(uint first, int count, float* v)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), first, count, v, GL.EntryPoints[668]);
		}

		// Token: 0x060057FF RID: 22527 RVA: 0x000EF404 File Offset: 0x000ED604
		[CLSCompliant(false)]
		public static void ViewportIndexed(int index, float x, float y, float w, float h)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single), index, x, y, w, h, GL.EntryPoints[669]);
		}

		// Token: 0x06005800 RID: 22528 RVA: 0x000EF41C File Offset: 0x000ED61C
		[CLSCompliant(false)]
		public static void ViewportIndexed(uint index, float x, float y, float w, float h)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single), index, x, y, w, h, GL.EntryPoints[669]);
		}

		// Token: 0x06005801 RID: 22529 RVA: 0x000EF434 File Offset: 0x000ED634
		[CLSCompliant(false)]
		public unsafe static void ViewportIndexed(int index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[670]);
			}
		}

		// Token: 0x06005802 RID: 22530 RVA: 0x000EF468 File Offset: 0x000ED668
		[CLSCompliant(false)]
		public unsafe static void ViewportIndexed(int index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[670]);
			}
		}

		// Token: 0x06005803 RID: 22531 RVA: 0x000EF48C File Offset: 0x000ED68C
		[CLSCompliant(false)]
		public unsafe static void ViewportIndexed(int index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[670]);
		}

		// Token: 0x06005804 RID: 22532 RVA: 0x000EF4A0 File Offset: 0x000ED6A0
		[CLSCompliant(false)]
		public unsafe static void ViewportIndexed(uint index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[670]);
			}
		}

		// Token: 0x06005805 RID: 22533 RVA: 0x000EF4D4 File Offset: 0x000ED6D4
		[CLSCompliant(false)]
		public unsafe static void ViewportIndexed(uint index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[670]);
			}
		}

		// Token: 0x06005806 RID: 22534 RVA: 0x000EF4F8 File Offset: 0x000ED6F8
		[CLSCompliant(false)]
		public unsafe static void ViewportIndexed(uint index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[670]);
		}

		// Token: 0x06005807 RID: 22535 RVA: 0x000EF50C File Offset: 0x000ED70C
		[CLSCompliant(false)]
		public static WaitSyncStatus WaitSync(IntPtr sync, WaitSyncFlags flags, long timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[671]);
		}

		// Token: 0x06005808 RID: 22536 RVA: 0x000EF524 File Offset: 0x000ED724
		[CLSCompliant(false)]
		public static WaitSyncStatus WaitSync(IntPtr sync, WaitSyncFlags flags, ulong timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[671]);
		}

		// Token: 0x040055AD RID: 21933
		private const string Library = "opengl32.dll";

		// Token: 0x040055AE RID: 21934
		private static readonly object sync_root = new object();

		// Token: 0x040055AF RID: 21935
		private static IntPtr[] EntryPoints;

		// Token: 0x040055B0 RID: 21936
		private static byte[] EntryPointNames = new byte[]
		{
			103,
			108,
			65,
			99,
			116,
			105,
			118,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			65,
			99,
			116,
			105,
			118,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			0,
			103,
			108,
			65,
			116,
			116,
			97,
			99,
			104,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			67,
			111,
			110,
			100,
			105,
			116,
			105,
			111,
			110,
			97,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			81,
			117,
			101,
			114,
			121,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			81,
			117,
			101,
			114,
			121,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			65,
			116,
			116,
			114,
			105,
			98,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			66,
			97,
			115,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			82,
			97,
			110,
			103,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			66,
			97,
			115,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			82,
			97,
			110,
			103,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			70,
			114,
			97,
			103,
			68,
			97,
			116,
			97,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			70,
			114,
			97,
			103,
			68,
			97,
			116,
			97,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			73,
			109,
			97,
			103,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			73,
			109,
			97,
			103,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			115,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			86,
			101,
			114,
			116,
			101,
			120,
			66,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			86,
			101,
			114,
			116,
			101,
			120,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			67,
			111,
			108,
			111,
			114,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			105,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			105,
			65,
			82,
			66,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			105,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			105,
			65,
			82,
			66,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			105,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			105,
			65,
			82,
			66,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			105,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			105,
			65,
			82,
			66,
			0,
			103,
			108,
			66,
			108,
			105,
			116,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			66,
			117,
			102,
			102,
			101,
			114,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			66,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			0,
			103,
			108,
			66,
			117,
			102,
			102,
			101,
			114,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			67,
			104,
			101,
			99,
			107,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			97,
			116,
			117,
			115,
			0,
			103,
			108,
			67,
			108,
			97,
			109,
			112,
			67,
			111,
			108,
			111,
			114,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			102,
			105,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			117,
			105,
			118,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			67,
			111,
			108,
			111,
			114,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			68,
			101,
			112,
			116,
			104,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			68,
			101,
			112,
			116,
			104,
			102,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			83,
			116,
			101,
			110,
			99,
			105,
			108,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			0,
			103,
			108,
			67,
			108,
			105,
			101,
			110,
			116,
			87,
			97,
			105,
			116,
			83,
			121,
			110,
			99,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			77,
			97,
			115,
			107,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			77,
			97,
			115,
			107,
			105,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			80,
			51,
			117,
			105,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			80,
			51,
			117,
			105,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			80,
			52,
			117,
			105,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			80,
			52,
			117,
			105,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			83,
			117,
			98,
			84,
			97,
			98,
			108,
			101,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			105,
			108,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			105,
			108,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			73,
			110,
			99,
			108,
			117,
			100,
			101,
			65,
			82,
			66,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			70,
			105,
			108,
			116,
			101,
			114,
			49,
			68,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			70,
			105,
			108,
			116,
			101,
			114,
			50,
			68,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			66,
			117,
			102,
			102,
			101,
			114,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			67,
			111,
			108,
			111,
			114,
			83,
			117,
			98,
			84,
			97,
			98,
			108,
			101,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			70,
			105,
			108,
			116,
			101,
			114,
			49,
			68,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			70,
			105,
			108,
			116,
			101,
			114,
			50,
			68,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			73,
			109,
			97,
			103,
			101,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			118,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			83,
			121,
			110,
			99,
			70,
			114,
			111,
			109,
			67,
			76,
			101,
			118,
			101,
			110,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			67,
			117,
			108,
			108,
			70,
			97,
			99,
			101,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			97,
			108,
			108,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			97,
			108,
			108,
			98,
			97,
			99,
			107,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			97,
			108,
			108,
			98,
			97,
			99,
			107,
			75,
			72,
			82,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			111,
			110,
			116,
			114,
			111,
			108,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			111,
			110,
			116,
			114,
			111,
			108,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			111,
			110,
			116,
			114,
			111,
			108,
			75,
			72,
			82,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			73,
			110,
			115,
			101,
			114,
			116,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			73,
			110,
			115,
			101,
			114,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			73,
			110,
			115,
			101,
			114,
			116,
			75,
			72,
			82,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			78,
			97,
			109,
			101,
			100,
			83,
			116,
			114,
			105,
			110,
			103,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			81,
			117,
			101,
			114,
			105,
			101,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			83,
			121,
			110,
			99,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			115,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			70,
			117,
			110,
			99,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			77,
			97,
			115,
			107,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			82,
			97,
			110,
			103,
			101,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			82,
			97,
			110,
			103,
			101,
			65,
			114,
			114,
			97,
			121,
			118,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			82,
			97,
			110,
			103,
			101,
			102,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			82,
			97,
			110,
			103,
			101,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			0,
			103,
			108,
			68,
			101,
			116,
			97,
			99,
			104,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			105,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			65,
			114,
			114,
			97,
			121,
			0,
			103,
			108,
			68,
			105,
			115,
			112,
			97,
			116,
			99,
			104,
			67,
			111,
			109,
			112,
			117,
			116,
			101,
			0,
			103,
			108,
			68,
			105,
			115,
			112,
			97,
			116,
			99,
			104,
			67,
			111,
			109,
			112,
			117,
			116,
			101,
			71,
			114,
			111,
			117,
			112,
			83,
			105,
			122,
			101,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			105,
			115,
			112,
			97,
			116,
			99,
			104,
			67,
			111,
			109,
			112,
			117,
			116,
			101,
			73,
			110,
			100,
			105,
			114,
			101,
			99,
			116,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			73,
			110,
			100,
			105,
			114,
			101,
			99,
			116,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			66,
			97,
			115,
			101,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			66,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			66,
			97,
			115,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			100,
			105,
			114,
			101,
			99,
			116,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			66,
			97,
			115,
			101,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			66,
			97,
			115,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			66,
			97,
			115,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			66,
			97,
			115,
			101,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			82,
			97,
			110,
			103,
			101,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			82,
			97,
			110,
			103,
			101,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			66,
			97,
			115,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			83,
			116,
			114,
			101,
			97,
			109,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			83,
			116,
			114,
			101,
			97,
			109,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			105,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			65,
			114,
			114,
			97,
			121,
			0,
			103,
			108,
			69,
			110,
			100,
			67,
			111,
			110,
			100,
			105,
			116,
			105,
			111,
			110,
			97,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			0,
			103,
			108,
			69,
			110,
			100,
			81,
			117,
			101,
			114,
			121,
			0,
			103,
			108,
			69,
			110,
			100,
			81,
			117,
			101,
			114,
			121,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			0,
			103,
			108,
			69,
			110,
			100,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			70,
			101,
			110,
			99,
			101,
			83,
			121,
			110,
			99,
			0,
			103,
			108,
			70,
			105,
			110,
			105,
			115,
			104,
			0,
			103,
			108,
			70,
			108,
			117,
			115,
			104,
			0,
			103,
			108,
			70,
			108,
			117,
			115,
			104,
			77,
			97,
			112,
			112,
			101,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			82,
			97,
			110,
			103,
			101,
			0,
			103,
			108,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			0,
			103,
			108,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			0,
			103,
			108,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			49,
			68,
			0,
			103,
			108,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			50,
			68,
			0,
			103,
			108,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			51,
			68,
			0,
			103,
			108,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			76,
			97,
			121,
			101,
			114,
			0,
			103,
			108,
			70,
			114,
			111,
			110,
			116,
			70,
			97,
			99,
			101,
			0,
			103,
			108,
			71,
			101,
			110,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			71,
			101,
			110,
			101,
			114,
			97,
			116,
			101,
			77,
			105,
			112,
			109,
			97,
			112,
			0,
			103,
			108,
			71,
			101,
			110,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			71,
			101,
			110,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			115,
			0,
			103,
			108,
			71,
			101,
			110,
			81,
			117,
			101,
			114,
			105,
			101,
			115,
			0,
			103,
			108,
			71,
			101,
			110,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			71,
			101,
			110,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			115,
			0,
			103,
			108,
			71,
			101,
			110,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			0,
			103,
			108,
			71,
			101,
			110,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			115,
			0,
			103,
			108,
			71,
			101,
			110,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			115,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			65,
			116,
			111,
			109,
			105,
			99,
			67,
			111,
			117,
			110,
			116,
			101,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			65,
			116,
			116,
			114,
			105,
			98,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			83,
			117,
			98,
			114,
			111,
			117,
			116,
			105,
			110,
			101,
			78,
			97,
			109,
			101,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			83,
			117,
			98,
			114,
			111,
			117,
			116,
			105,
			110,
			101,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			83,
			117,
			98,
			114,
			111,
			117,
			116,
			105,
			110,
			101,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			78,
			97,
			109,
			101,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			66,
			108,
			111,
			99,
			107,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			66,
			108,
			111,
			99,
			107,
			78,
			97,
			109,
			101,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			78,
			97,
			109,
			101,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			115,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			116,
			116,
			97,
			99,
			104,
			101,
			100,
			83,
			104,
			97,
			100,
			101,
			114,
			115,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			116,
			116,
			114,
			105,
			98,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			0,
			103,
			108,
			71,
			101,
			116,
			66,
			111,
			111,
			108,
			101,
			97,
			110,
			105,
			95,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			66,
			111,
			111,
			108,
			101,
			97,
			110,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			66,
			117,
			102,
			102,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			54,
			52,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			66,
			117,
			102,
			102,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			66,
			117,
			102,
			102,
			101,
			114,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			66,
			117,
			102,
			102,
			101,
			114,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			71,
			101,
			116,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			0,
			103,
			108,
			71,
			101,
			116,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			0,
			103,
			108,
			71,
			101,
			116,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			70,
			105,
			108,
			116,
			101,
			114,
			0,
			103,
			108,
			71,
			101,
			116,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			76,
			111,
			103,
			0,
			103,
			108,
			71,
			101,
			116,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			76,
			111,
			103,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			76,
			111,
			103,
			75,
			72,
			82,
			0,
			103,
			108,
			71,
			101,
			116,
			68,
			111,
			117,
			98,
			108,
			101,
			105,
			95,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			68,
			111,
			117,
			98,
			108,
			101,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			69,
			114,
			114,
			111,
			114,
			0,
			103,
			108,
			71,
			101,
			116,
			70,
			108,
			111,
			97,
			116,
			105,
			95,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			70,
			108,
			111,
			97,
			116,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			70,
			114,
			97,
			103,
			68,
			97,
			116,
			97,
			73,
			110,
			100,
			101,
			120,
			0,
			103,
			108,
			71,
			101,
			116,
			70,
			114,
			97,
			103,
			68,
			97,
			116,
			97,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			0,
			103,
			108,
			71,
			101,
			116,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			65,
			116,
			116,
			97,
			99,
			104,
			109,
			101,
			110,
			116,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			71,
			114,
			97,
			112,
			104,
			105,
			99,
			115,
			82,
			101,
			115,
			101,
			116,
			83,
			116,
			97,
			116,
			117,
			115,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			72,
			105,
			115,
			116,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			71,
			101,
			116,
			72,
			105,
			115,
			116,
			111,
			103,
			114,
			97,
			109,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			72,
			105,
			115,
			116,
			111,
			103,
			114,
			97,
			109,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			73,
			109,
			97,
			103,
			101,
			72,
			97,
			110,
			100,
			108,
			101,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			73,
			110,
			116,
			101,
			103,
			101,
			114,
			54,
			52,
			105,
			95,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			73,
			110,
			116,
			101,
			103,
			101,
			114,
			54,
			52,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			73,
			110,
			116,
			101,
			103,
			101,
			114,
			105,
			95,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			73,
			110,
			116,
			101,
			103,
			101,
			114,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			73,
			110,
			116,
			101,
			114,
			110,
			97,
			108,
			102,
			111,
			114,
			109,
			97,
			116,
			105,
			54,
			52,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			73,
			110,
			116,
			101,
			114,
			110,
			97,
			108,
			102,
			111,
			114,
			109,
			97,
			116,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			77,
			105,
			110,
			109,
			97,
			120,
			0,
			103,
			108,
			71,
			101,
			116,
			77,
			105,
			110,
			109,
			97,
			120,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			77,
			105,
			110,
			109,
			97,
			120,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			77,
			117,
			108,
			116,
			105,
			115,
			97,
			109,
			112,
			108,
			101,
			102,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			78,
			97,
			109,
			101,
			100,
			83,
			116,
			114,
			105,
			110,
			103,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			78,
			97,
			109,
			101,
			100,
			83,
			116,
			114,
			105,
			110,
			103,
			105,
			118,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			70,
			105,
			108,
			116,
			101,
			114,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			72,
			105,
			115,
			116,
			111,
			103,
			114,
			97,
			109,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			77,
			97,
			112,
			100,
			118,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			77,
			97,
			112,
			102,
			118,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			77,
			97,
			112,
			105,
			118,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			77,
			105,
			110,
			109,
			97,
			120,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			80,
			105,
			120,
			101,
			108,
			77,
			97,
			112,
			102,
			118,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			80,
			105,
			120,
			101,
			108,
			77,
			97,
			112,
			117,
			105,
			118,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			80,
			105,
			120,
			101,
			108,
			77,
			97,
			112,
			117,
			115,
			118,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			80,
			111,
			108,
			121,
			103,
			111,
			110,
			83,
			116,
			105,
			112,
			112,
			108,
			101,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			83,
			101,
			112,
			97,
			114,
			97,
			98,
			108,
			101,
			70,
			105,
			108,
			116,
			101,
			114,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			100,
			118,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			102,
			118,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			105,
			118,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			117,
			105,
			118,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			79,
			98,
			106,
			101,
			99,
			116,
			76,
			97,
			98,
			101,
			108,
			0,
			103,
			108,
			71,
			101,
			116,
			79,
			98,
			106,
			101,
			99,
			116,
			76,
			97,
			98,
			101,
			108,
			75,
			72,
			82,
			0,
			103,
			108,
			71,
			101,
			116,
			79,
			98,
			106,
			101,
			99,
			116,
			80,
			116,
			114,
			76,
			97,
			98,
			101,
			108,
			0,
			103,
			108,
			71,
			101,
			116,
			79,
			98,
			106,
			101,
			99,
			116,
			80,
			116,
			114,
			76,
			97,
			98,
			101,
			108,
			75,
			72,
			82,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			118,
			75,
			72,
			82,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			66,
			105,
			110,
			97,
			114,
			121,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			73,
			110,
			102,
			111,
			76,
			111,
			103,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			73,
			110,
			116,
			101,
			114,
			102,
			97,
			99,
			101,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			73,
			110,
			102,
			111,
			76,
			111,
			103,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			82,
			101,
			115,
			111,
			117,
			114,
			99,
			101,
			73,
			110,
			100,
			101,
			120,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			82,
			101,
			115,
			111,
			117,
			114,
			99,
			101,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			82,
			101,
			115,
			111,
			117,
			114,
			99,
			101,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			82,
			101,
			115,
			111,
			117,
			114,
			99,
			101,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			73,
			110,
			100,
			101,
			120,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			82,
			101,
			115,
			111,
			117,
			114,
			99,
			101,
			78,
			97,
			109,
			101,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			83,
			116,
			97,
			103,
			101,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			81,
			117,
			101,
			114,
			121,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			81,
			117,
			101,
			114,
			121,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			81,
			117,
			101,
			114,
			121,
			79,
			98,
			106,
			101,
			99,
			116,
			105,
			54,
			52,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			81,
			117,
			101,
			114,
			121,
			79,
			98,
			106,
			101,
			99,
			116,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			81,
			117,
			101,
			114,
			121,
			79,
			98,
			106,
			101,
			99,
			116,
			117,
			105,
			54,
			52,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			81,
			117,
			101,
			114,
			121,
			79,
			98,
			106,
			101,
			99,
			116,
			117,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			73,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			73,
			117,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			101,
			112,
			97,
			114,
			97,
			98,
			108,
			101,
			70,
			105,
			108,
			116,
			101,
			114,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			104,
			97,
			100,
			101,
			114,
			73,
			110,
			102,
			111,
			76,
			111,
			103,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			104,
			97,
			100,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			104,
			97,
			100,
			101,
			114,
			80,
			114,
			101,
			99,
			105,
			115,
			105,
			111,
			110,
			70,
			111,
			114,
			109,
			97,
			116,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			104,
			97,
			100,
			101,
			114,
			83,
			111,
			117,
			114,
			99,
			101,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			116,
			114,
			105,
			110,
			103,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			116,
			114,
			105,
			110,
			103,
			105,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			117,
			98,
			114,
			111,
			117,
			116,
			105,
			110,
			101,
			73,
			110,
			100,
			101,
			120,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			117,
			98,
			114,
			111,
			117,
			116,
			105,
			110,
			101,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			121,
			110,
			99,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			0,
			103,
			108,
			71,
			101,
			116,
			84,
			101,
			120,
			76,
			101,
			118,
			101,
			108,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			84,
			101,
			120,
			76,
			101,
			118,
			101,
			108,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			84,
			101,
			120,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			84,
			101,
			120,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			73,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			84,
			101,
			120,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			73,
			117,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			84,
			101,
			120,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			72,
			97,
			110,
			100,
			108,
			101,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			72,
			97,
			110,
			100,
			108,
			101,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			86,
			97,
			114,
			121,
			105,
			110,
			103,
			0,
			103,
			108,
			71,
			101,
			116,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			66,
			108,
			111,
			99,
			107,
			73,
			110,
			100,
			101,
			120,
			0,
			103,
			108,
			71,
			101,
			116,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			100,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			102,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			73,
			110,
			100,
			105,
			99,
			101,
			115,
			0,
			103,
			108,
			71,
			101,
			116,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			0,
			103,
			108,
			71,
			101,
			116,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			83,
			117,
			98,
			114,
			111,
			117,
			116,
			105,
			110,
			101,
			117,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			117,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			100,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			102,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			73,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			73,
			117,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			76,
			100,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			76,
			117,
			105,
			54,
			52,
			118,
			65,
			82,
			66,
			0,
			103,
			108,
			71,
			101,
			116,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			118,
			0,
			103,
			108,
			72,
			105,
			110,
			116,
			0,
			103,
			108,
			72,
			105,
			115,
			116,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			73,
			110,
			118,
			97,
			108,
			105,
			100,
			97,
			116,
			101,
			66,
			117,
			102,
			102,
			101,
			114,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			73,
			110,
			118,
			97,
			108,
			105,
			100,
			97,
			116,
			101,
			66,
			117,
			102,
			102,
			101,
			114,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			73,
			110,
			118,
			97,
			108,
			105,
			100,
			97,
			116,
			101,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			73,
			110,
			118,
			97,
			108,
			105,
			100,
			97,
			116,
			101,
			83,
			117,
			98,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			73,
			110,
			118,
			97,
			108,
			105,
			100,
			97,
			116,
			101,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			0,
			103,
			108,
			73,
			110,
			118,
			97,
			108,
			105,
			100,
			97,
			116,
			101,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			0,
			103,
			108,
			73,
			115,
			66,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			73,
			115,
			69,
			110,
			97,
			98,
			108,
			101,
			100,
			0,
			103,
			108,
			73,
			115,
			69,
			110,
			97,
			98,
			108,
			101,
			100,
			105,
			0,
			103,
			108,
			73,
			115,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			73,
			115,
			73,
			109,
			97,
			103,
			101,
			72,
			97,
			110,
			100,
			108,
			101,
			82,
			101,
			115,
			105,
			100,
			101,
			110,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			73,
			115,
			78,
			97,
			109,
			101,
			100,
			83,
			116,
			114,
			105,
			110,
			103,
			65,
			82,
			66,
			0,
			103,
			108,
			73,
			115,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			73,
			115,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			0,
			103,
			108,
			73,
			115,
			81,
			117,
			101,
			114,
			121,
			0,
			103,
			108,
			73,
			115,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			73,
			115,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			0,
			103,
			108,
			73,
			115,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			73,
			115,
			83,
			121,
			110,
			99,
			0,
			103,
			108,
			73,
			115,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			0,
			103,
			108,
			73,
			115,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			72,
			97,
			110,
			100,
			108,
			101,
			82,
			101,
			115,
			105,
			100,
			101,
			110,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			73,
			115,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			73,
			115,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			0,
			103,
			108,
			76,
			105,
			110,
			101,
			87,
			105,
			100,
			116,
			104,
			0,
			103,
			108,
			76,
			105,
			110,
			107,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			76,
			111,
			103,
			105,
			99,
			79,
			112,
			0,
			103,
			108,
			77,
			97,
			107,
			101,
			73,
			109,
			97,
			103,
			101,
			72,
			97,
			110,
			100,
			108,
			101,
			78,
			111,
			110,
			82,
			101,
			115,
			105,
			100,
			101,
			110,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			77,
			97,
			107,
			101,
			73,
			109,
			97,
			103,
			101,
			72,
			97,
			110,
			100,
			108,
			101,
			82,
			101,
			115,
			105,
			100,
			101,
			110,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			77,
			97,
			107,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			72,
			97,
			110,
			100,
			108,
			101,
			78,
			111,
			110,
			82,
			101,
			115,
			105,
			100,
			101,
			110,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			77,
			97,
			107,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			72,
			97,
			110,
			100,
			108,
			101,
			82,
			101,
			115,
			105,
			100,
			101,
			110,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			77,
			97,
			112,
			66,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			77,
			97,
			112,
			66,
			117,
			102,
			102,
			101,
			114,
			82,
			97,
			110,
			103,
			101,
			0,
			103,
			108,
			77,
			101,
			109,
			111,
			114,
			121,
			66,
			97,
			114,
			114,
			105,
			101,
			114,
			0,
			103,
			108,
			77,
			105,
			110,
			109,
			97,
			120,
			0,
			103,
			108,
			77,
			105,
			110,
			83,
			97,
			109,
			112,
			108,
			101,
			83,
			104,
			97,
			100,
			105,
			110,
			103,
			0,
			103,
			108,
			77,
			105,
			110,
			83,
			97,
			109,
			112,
			108,
			101,
			83,
			104,
			97,
			100,
			105,
			110,
			103,
			65,
			82,
			66,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			73,
			110,
			100,
			105,
			114,
			101,
			99,
			116,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			73,
			110,
			100,
			105,
			114,
			101,
			99,
			116,
			67,
			111,
			117,
			110,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			66,
			97,
			115,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			100,
			105,
			114,
			101,
			99,
			116,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			100,
			105,
			114,
			101,
			99,
			116,
			67,
			111,
			117,
			110,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			67,
			111,
			111,
			114,
			100,
			80,
			49,
			117,
			105,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			67,
			111,
			111,
			114,
			100,
			80,
			49,
			117,
			105,
			118,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			67,
			111,
			111,
			114,
			100,
			80,
			50,
			117,
			105,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			67,
			111,
			111,
			114,
			100,
			80,
			50,
			117,
			105,
			118,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			67,
			111,
			111,
			114,
			100,
			80,
			51,
			117,
			105,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			67,
			111,
			111,
			114,
			100,
			80,
			51,
			117,
			105,
			118,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			67,
			111,
			111,
			114,
			100,
			80,
			52,
			117,
			105,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			67,
			111,
			111,
			114,
			100,
			80,
			52,
			117,
			105,
			118,
			0,
			103,
			108,
			78,
			97,
			109,
			101,
			100,
			83,
			116,
			114,
			105,
			110,
			103,
			65,
			82,
			66,
			0,
			103,
			108,
			78,
			111,
			114,
			109,
			97,
			108,
			80,
			51,
			117,
			105,
			0,
			103,
			108,
			78,
			111,
			114,
			109,
			97,
			108,
			80,
			51,
			117,
			105,
			118,
			0,
			103,
			108,
			79,
			98,
			106,
			101,
			99,
			116,
			76,
			97,
			98,
			101,
			108,
			0,
			103,
			108,
			79,
			98,
			106,
			101,
			99,
			116,
			76,
			97,
			98,
			101,
			108,
			75,
			72,
			82,
			0,
			103,
			108,
			79,
			98,
			106,
			101,
			99,
			116,
			80,
			116,
			114,
			76,
			97,
			98,
			101,
			108,
			0,
			103,
			108,
			79,
			98,
			106,
			101,
			99,
			116,
			80,
			116,
			114,
			76,
			97,
			98,
			101,
			108,
			75,
			72,
			82,
			0,
			103,
			108,
			80,
			97,
			116,
			99,
			104,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			80,
			97,
			116,
			99,
			104,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			0,
			103,
			108,
			80,
			97,
			117,
			115,
			101,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			80,
			105,
			120,
			101,
			108,
			83,
			116,
			111,
			114,
			101,
			102,
			0,
			103,
			108,
			80,
			105,
			120,
			101,
			108,
			83,
			116,
			111,
			114,
			101,
			105,
			0,
			103,
			108,
			80,
			111,
			105,
			110,
			116,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			0,
			103,
			108,
			80,
			111,
			105,
			110,
			116,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			80,
			111,
			105,
			110,
			116,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			0,
			103,
			108,
			80,
			111,
			105,
			110,
			116,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			80,
			111,
			105,
			110,
			116,
			83,
			105,
			122,
			101,
			0,
			103,
			108,
			80,
			111,
			108,
			121,
			103,
			111,
			110,
			77,
			111,
			100,
			101,
			0,
			103,
			108,
			80,
			111,
			108,
			121,
			103,
			111,
			110,
			79,
			102,
			102,
			115,
			101,
			116,
			0,
			103,
			108,
			80,
			111,
			112,
			68,
			101,
			98,
			117,
			103,
			71,
			114,
			111,
			117,
			112,
			0,
			103,
			108,
			80,
			111,
			112,
			68,
			101,
			98,
			117,
			103,
			71,
			114,
			111,
			117,
			112,
			75,
			72,
			82,
			0,
			103,
			108,
			80,
			114,
			105,
			109,
			105,
			116,
			105,
			118,
			101,
			82,
			101,
			115,
			116,
			97,
			114,
			116,
			73,
			110,
			100,
			101,
			120,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			66,
			105,
			110,
			97,
			114,
			121,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			100,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			100,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			102,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			102,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			105,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			105,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			117,
			105,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			117,
			105,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			100,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			100,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			102,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			102,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			105,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			105,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			117,
			105,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			117,
			105,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			100,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			100,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			102,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			102,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			105,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			105,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			117,
			105,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			117,
			105,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			100,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			100,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			102,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			102,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			105,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			105,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			117,
			105,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			117,
			105,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			72,
			97,
			110,
			100,
			108,
			101,
			117,
			105,
			54,
			52,
			65,
			82,
			66,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			72,
			97,
			110,
			100,
			108,
			101,
			117,
			105,
			54,
			52,
			118,
			65,
			82,
			66,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			50,
			100,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			50,
			102,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			50,
			120,
			51,
			100,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			50,
			120,
			51,
			102,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			50,
			120,
			52,
			100,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			50,
			120,
			52,
			102,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			51,
			100,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			51,
			102,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			51,
			120,
			50,
			100,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			51,
			120,
			50,
			102,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			51,
			120,
			52,
			100,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			51,
			120,
			52,
			102,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			52,
			100,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			52,
			102,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			52,
			120,
			50,
			100,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			52,
			120,
			50,
			102,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			52,
			120,
			51,
			100,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			52,
			120,
			51,
			102,
			118,
			0,
			103,
			108,
			80,
			114,
			111,
			118,
			111,
			107,
			105,
			110,
			103,
			86,
			101,
			114,
			116,
			101,
			120,
			0,
			103,
			108,
			80,
			117,
			115,
			104,
			68,
			101,
			98,
			117,
			103,
			71,
			114,
			111,
			117,
			112,
			0,
			103,
			108,
			80,
			117,
			115,
			104,
			68,
			101,
			98,
			117,
			103,
			71,
			114,
			111,
			117,
			112,
			75,
			72,
			82,
			0,
			103,
			108,
			81,
			117,
			101,
			114,
			121,
			67,
			111,
			117,
			110,
			116,
			101,
			114,
			0,
			103,
			108,
			82,
			101,
			97,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			82,
			101,
			97,
			100,
			110,
			80,
			105,
			120,
			101,
			108,
			115,
			65,
			82,
			66,
			0,
			103,
			108,
			82,
			101,
			97,
			100,
			80,
			105,
			120,
			101,
			108,
			115,
			0,
			103,
			108,
			82,
			101,
			108,
			101,
			97,
			115,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			67,
			111,
			109,
			112,
			105,
			108,
			101,
			114,
			0,
			103,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			0,
			103,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			77,
			117,
			108,
			116,
			105,
			115,
			97,
			109,
			112,
			108,
			101,
			0,
			103,
			108,
			82,
			101,
			115,
			101,
			116,
			72,
			105,
			115,
			116,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			82,
			101,
			115,
			101,
			116,
			77,
			105,
			110,
			109,
			97,
			120,
			0,
			103,
			108,
			82,
			101,
			115,
			117,
			109,
			101,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			83,
			97,
			109,
			112,
			108,
			101,
			67,
			111,
			118,
			101,
			114,
			97,
			103,
			101,
			0,
			103,
			108,
			83,
			97,
			109,
			112,
			108,
			101,
			77,
			97,
			115,
			107,
			105,
			0,
			103,
			108,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			0,
			103,
			108,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			0,
			103,
			108,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			73,
			105,
			118,
			0,
			103,
			108,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			73,
			117,
			105,
			118,
			0,
			103,
			108,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			83,
			99,
			105,
			115,
			115,
			111,
			114,
			0,
			103,
			108,
			83,
			99,
			105,
			115,
			115,
			111,
			114,
			65,
			114,
			114,
			97,
			121,
			118,
			0,
			103,
			108,
			83,
			99,
			105,
			115,
			115,
			111,
			114,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			0,
			103,
			108,
			83,
			99,
			105,
			115,
			115,
			111,
			114,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			118,
			0,
			103,
			108,
			83,
			101,
			99,
			111,
			110,
			100,
			97,
			114,
			121,
			67,
			111,
			108,
			111,
			114,
			80,
			51,
			117,
			105,
			0,
			103,
			108,
			83,
			101,
			99,
			111,
			110,
			100,
			97,
			114,
			121,
			67,
			111,
			108,
			111,
			114,
			80,
			51,
			117,
			105,
			118,
			0,
			103,
			108,
			83,
			101,
			112,
			97,
			114,
			97,
			98,
			108,
			101,
			70,
			105,
			108,
			116,
			101,
			114,
			50,
			68,
			0,
			103,
			108,
			83,
			104,
			97,
			100,
			101,
			114,
			66,
			105,
			110,
			97,
			114,
			121,
			0,
			103,
			108,
			83,
			104,
			97,
			100,
			101,
			114,
			83,
			111,
			117,
			114,
			99,
			101,
			0,
			103,
			108,
			83,
			104,
			97,
			100,
			101,
			114,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			66,
			108,
			111,
			99,
			107,
			66,
			105,
			110,
			100,
			105,
			110,
			103,
			0,
			103,
			108,
			83,
			116,
			101,
			110,
			99,
			105,
			108,
			70,
			117,
			110,
			99,
			0,
			103,
			108,
			83,
			116,
			101,
			110,
			99,
			105,
			108,
			70,
			117,
			110,
			99,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			0,
			103,
			108,
			83,
			116,
			101,
			110,
			99,
			105,
			108,
			77,
			97,
			115,
			107,
			0,
			103,
			108,
			83,
			116,
			101,
			110,
			99,
			105,
			108,
			77,
			97,
			115,
			107,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			0,
			103,
			108,
			83,
			116,
			101,
			110,
			99,
			105,
			108,
			79,
			112,
			0,
			103,
			108,
			83,
			116,
			101,
			110,
			99,
			105,
			108,
			79,
			112,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			0,
			103,
			108,
			84,
			101,
			120,
			66,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			84,
			101,
			120,
			66,
			117,
			102,
			102,
			101,
			114,
			82,
			97,
			110,
			103,
			101,
			0,
			103,
			108,
			84,
			101,
			120,
			67,
			111,
			111,
			114,
			100,
			80,
			49,
			117,
			105,
			0,
			103,
			108,
			84,
			101,
			120,
			67,
			111,
			111,
			114,
			100,
			80,
			49,
			117,
			105,
			118,
			0,
			103,
			108,
			84,
			101,
			120,
			67,
			111,
			111,
			114,
			100,
			80,
			50,
			117,
			105,
			0,
			103,
			108,
			84,
			101,
			120,
			67,
			111,
			111,
			114,
			100,
			80,
			50,
			117,
			105,
			118,
			0,
			103,
			108,
			84,
			101,
			120,
			67,
			111,
			111,
			114,
			100,
			80,
			51,
			117,
			105,
			0,
			103,
			108,
			84,
			101,
			120,
			67,
			111,
			111,
			114,
			100,
			80,
			51,
			117,
			105,
			118,
			0,
			103,
			108,
			84,
			101,
			120,
			67,
			111,
			111,
			114,
			100,
			80,
			"Not showing all elements because this array is too big (13119 elements)"
		};

		// Token: 0x040055B1 RID: 21937
		private static int[] EntryPointNameOffsets = new int[]
		{
			0,
			22,
			38,
			53,
			78,
			91,
			111,
			136,
			157,
			170,
			187,
			205,
			223,
			242,
			265,
			295,
			313,
			332,
			352,
			374,
			393,
			407,
			422,
			436,
			451,
			475,
			493,
			512,
			532,
			545,
			561,
			578,
			598,
			622,
			647,
			675,
			687,
			700,
			716,
			736,
			757,
			781,
			799,
			812,
			828,
			844,
			869,
			882,
			890,
			908,
			924,
			940,
			956,
			977,
			994,
			1007,
			1020,
			1034,
			1049,
			1065,
			1084,
			1101,
			1113,
			1126,
			1138,
			1151,
			1163,
			1176,
			1192,
			1205,
			1229,
			1253,
			1269,
			1295,
			1318,
			1341,
			1364,
			1390,
			1416,
			1442,
			1464,
			1486,
			1510,
			1535,
			1559,
			1584,
			1604,
			1624,
			1641,
			1667,
			1693,
			1712,
			1729,
			1746,
			1766,
			1786,
			1806,
			1822,
			1837,
			1860,
			1887,
			1898,
			1921,
			1947,
			1973,
			1995,
			2020,
			2045,
			2066,
			2090,
			2114,
			2130,
			2151,
			2174,
			2190,
			2215,
			2231,
			2253,
			2270,
			2285,
			2298,
			2315,
			2342,
			2363,
			2375,
			2387,
			2400,
			2419,
			2433,
			2453,
			2468,
			2478,
			2489,
			2516,
			2534,
			2564,
			2590,
			2603,
			2624,
			2646,
			2680,
			2693,
			2707,
			2722,
			2747,
			2770,
			2794,
			2830,
			2864,
			2910,
			2930,
			2960,
			2984,
			3017,
			3047,
			3086,
			3095,
			3105,
			3131,
			3154,
			3165,
			3183,
			3206,
			3218,
			3227,
			3235,
			3260,
			3284,
			3310,
			3331,
			3354,
			3377,
			3400,
			3426,
			3438,
			3451,
			3468,
			3486,
			3508,
			3521,
			3540,
			3554,
			3568,
			3592,
			3610,
			3643,
			3661,
			3687,
			3718,
			3751,
			3770,
			3796,
			3824,
			3847,
			3869,
			3890,
			3910,
			3926,
			3940,
			3965,
			3988,
			4008,
			4027,
			4043,
			4070,
			4097,
			4121,
			4144,
			4172,
			4200,
			4221,
			4245,
			4269,
			4284,
			4297,
			4308,
			4322,
			4334,
			4353,
			4375,
			4413,
			4441,
			4469,
			4484,
			4510,
			4536,
			4556,
			4574,
			4590,
			4606,
			4620,
			4644,
			4666,
			4678,
			4701,
			4724,
			4743,
			4763,
			4785,
			4805,
			4833,
			4860,
			4879,
			4894,
			4909,
			4924,
			4940,
			4960,
			4981,
			5002,
			5026,
			5051,
			5069,
			5088,
			5107,
			5126,
			5146,
			5163,
			5183,
			5203,
			5226,
			5240,
			5257,
			5276,
			5296,
			5320,
			5335,
			5363,
			5386,
			5412,
			5435,
			5464,
			5498,
			5523,
			5543,
			5563,
			5576,
			5597,
			5616,
			5638,
			5658,
			5687,
			5711,
			5736,
			5762,
			5786,
			5807,
			5826,
			5840,
			5867,
			5885,
			5897,
			5910,
			5931,
			5962,
			5974,
			5988,
			6013,
			6038,
			6058,
			6079,
			6101,
			6121,
			6143,
			6172,
			6202,
			6225,
			6240,
			6255,
			6275,
			6290,
			6311,
			6337,
			6353,
			6373,
			6393,
			6414,
			6436,
			6456,
			6477,
			6504,
			6530,
			6537,
			6549,
			6572,
			6598,
			6622,
			6649,
			6670,
			6694,
			6705,
			6717,
			6730,
			6746,
			6773,
			6792,
			6804,
			6824,
			6834,
			6851,
			6863,
			6874,
			6883,
			6895,
			6924,
			6946,
			6962,
			6974,
			6988,
			6998,
			7030,
			7059,
			7093,
			7124,
			7136,
			7153,
			7169,
			7178,
			7197,
			7219,
			7237,
			7263,
			7297,
			7317,
			7347,
			7375,
			7411,
			7431,
			7452,
			7472,
			7493,
			7513,
			7534,
			7554,
			7575,
			7592,
			7605,
			7619,
			7633,
			7650,
			7667,
			7687,
			7706,
			7724,
			7749,
			7763,
			7777,
			7795,
			7814,
			7832,
			7851,
			7863,
			7877,
			7893,
			7909,
			7928,
			7952,
			7968,
			7988,
			8007,
			8027,
			8046,
			8066,
			8085,
			8105,
			8125,
			8146,
			8165,
			8185,
			8204,
			8224,
			8243,
			8263,
			8283,
			8304,
			8323,
			8343,
			8362,
			8382,
			8401,
			8421,
			8441,
			8462,
			8481,
			8501,
			8520,
			8540,
			8559,
			8579,
			8599,
			8620,
			8650,
			8681,
			8707,
			8733,
			8761,
			8789,
			8817,
			8845,
			8871,
			8897,
			8925,
			8953,
			8981,
			9009,
			9035,
			9061,
			9089,
			9117,
			9145,
			9173,
			9191,
			9208,
			9228,
			9243,
			9256,
			9273,
			9286,
			9310,
			9332,
			9365,
			9382,
			9396,
			9422,
			9439,
			9453,
			9473,
			9494,
			9514,
			9536,
			9559,
			9580,
			9590,
			9606,
			9623,
			9641,
			9662,
			9684,
			9704,
			9719,
			9734,
			9762,
			9776,
			9798,
			9812,
			9834,
			9846,
			9866,
			9878,
			9895,
			9910,
			9926,
			9941,
			9957,
			9972,
			9988,
			10003,
			10019,
			10032,
			10045,
			10069,
			10082,
			10106,
			10129,
			10145,
			10162,
			10178,
			10196,
			10215,
			10232,
			10247,
			10262,
			10288,
			10303,
			10329,
			10345,
			10361,
			10377,
			10391,
			10419,
			10431,
			10444,
			10456,
			10469,
			10481,
			10494,
			10507,
			10521,
			10533,
			10546,
			10558,
			10571,
			10583,
			10596,
			10609,
			10623,
			10635,
			10648,
			10660,
			10673,
			10685,
			10698,
			10711,
			10725,
			10737,
			10750,
			10762,
			10775,
			10787,
			10800,
			10813,
			10827,
			10849,
			10872,
			10896,
			10915,
			10934,
			10955,
			10976,
			10997,
			11018,
			11037,
			11056,
			11077,
			11098,
			11119,
			11140,
			11159,
			11178,
			11199,
			11220,
			11241,
			11262,
			11286,
			11300,
			11313,
			11332,
			11350,
			11376,
			11393,
			11411,
			11428,
			11446,
			11463,
			11481,
			11498,
			11516,
			11533,
			11551,
			11568,
			11586,
			11603,
			11621,
			11638,
			11656,
			11673,
			11691,
			11709,
			11726,
			11744,
			11761,
			11779,
			11797,
			11816,
			11835,
			11854,
			11873,
			11893,
			11913,
			11933,
			11950,
			11968,
			11987,
			12006,
			12025,
			12047,
			12069,
			12090,
			12108,
			12127,
			12146,
			12166,
			12184,
			12203,
			12222,
			12242,
			12260,
			12279,
			12298,
			12318,
			12337,
			12355,
			12374,
			12393,
			12413,
			12432,
			12452,
			12472,
			12494,
			12517,
			12535,
			12554,
			12578,
			12603,
			12621,
			12640,
			12658,
			12677,
			12695,
			12714,
			12736,
			12759,
			12778,
			12798,
			12817,
			12837,
			12856,
			12876,
			12895,
			12915,
			12937,
			12960,
			12973,
			12987,
			13000,
			13014,
			13027,
			13041,
			13052,
			13069,
			13088,
			13108
		};

		// Token: 0x020005F6 RID: 1526
		public static class Arb
		{
			// Token: 0x06005809 RID: 22537 RVA: 0x000EF53C File Offset: 0x000ED73C
			[CLSCompliant(false)]
			public static void BlendEquation(int buf, BlendEquationMode mode)
			{
				calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[31]);
			}

			// Token: 0x0600580A RID: 22538 RVA: 0x000EF550 File Offset: 0x000ED750
			[CLSCompliant(false)]
			public static void BlendEquation(uint buf, BlendEquationMode mode)
			{
				calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[31]);
			}

			// Token: 0x0600580B RID: 22539 RVA: 0x000EF564 File Offset: 0x000ED764
			[CLSCompliant(false)]
			public static void BlendEquationSeparate(int buf, All modeRGB, All modeAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, modeRGB, modeAlpha, GL.EntryPoints[34]);
			}

			// Token: 0x0600580C RID: 22540 RVA: 0x000EF578 File Offset: 0x000ED778
			[CLSCompliant(false)]
			public static void BlendEquationSeparate(uint buf, All modeRGB, All modeAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, modeRGB, modeAlpha, GL.EntryPoints[34]);
			}

			// Token: 0x0600580D RID: 22541 RVA: 0x000EF58C File Offset: 0x000ED78C
			[CLSCompliant(false)]
			public static void BlendFunc(int buf, All src, All dst)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, src, dst, GL.EntryPoints[37]);
			}

			// Token: 0x0600580E RID: 22542 RVA: 0x000EF5A0 File Offset: 0x000ED7A0
			[CLSCompliant(false)]
			public static void BlendFunc(uint buf, All src, All dst)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, src, dst, GL.EntryPoints[37]);
			}

			// Token: 0x0600580F RID: 22543 RVA: 0x000EF5B4 File Offset: 0x000ED7B4
			[CLSCompliant(false)]
			public static void BlendFuncSeparate(int buf, All srcRGB, All dstRGB, All srcAlpha, All dstAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), buf, srcRGB, dstRGB, srcAlpha, dstAlpha, GL.EntryPoints[40]);
			}

			// Token: 0x06005810 RID: 22544 RVA: 0x000EF5CC File Offset: 0x000ED7CC
			[CLSCompliant(false)]
			public static void BlendFuncSeparate(uint buf, All srcRGB, All dstRGB, All srcAlpha, All dstAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), buf, srcRGB, dstRGB, srcAlpha, dstAlpha, GL.EntryPoints[40]);
			}

			// Token: 0x06005811 RID: 22545 RVA: 0x000EF5E4 File Offset: 0x000ED7E4
			[CLSCompliant(false)]
			public unsafe static void CompileShaderInclude(int shader, int count, string[] path, int[] length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(path);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[72]);
					BindingsBase.FreeStringArrayPtr(intPtr, path.Length);
				}
			}

			// Token: 0x06005812 RID: 22546 RVA: 0x000EF628 File Offset: 0x000ED828
			[CLSCompliant(false)]
			public unsafe static void CompileShaderInclude(int shader, int count, string[] path, ref int length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(path);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = &length)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[72]);
					BindingsBase.FreeStringArrayPtr(intPtr, path.Length);
				}
			}

			// Token: 0x06005813 RID: 22547 RVA: 0x000EF65C File Offset: 0x000ED85C
			[CLSCompliant(false)]
			public unsafe static void CompileShaderInclude(int shader, int count, string[] path, int* length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(path);
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr, length, GL.EntryPoints[72]);
				BindingsBase.FreeStringArrayPtr(intPtr, path.Length);
			}

			// Token: 0x06005814 RID: 22548 RVA: 0x000EF68C File Offset: 0x000ED88C
			[CLSCompliant(false)]
			public unsafe static void CompileShaderInclude(uint shader, int count, string[] path, int[] length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(path);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[72]);
					BindingsBase.FreeStringArrayPtr(intPtr, path.Length);
				}
			}

			// Token: 0x06005815 RID: 22549 RVA: 0x000EF6D0 File Offset: 0x000ED8D0
			[CLSCompliant(false)]
			public unsafe static void CompileShaderInclude(uint shader, int count, string[] path, ref int length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(path);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = &length)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[72]);
					BindingsBase.FreeStringArrayPtr(intPtr, path.Length);
				}
			}

			// Token: 0x06005816 RID: 22550 RVA: 0x000EF704 File Offset: 0x000ED904
			[CLSCompliant(false)]
			public unsafe static void CompileShaderInclude(uint shader, int count, string[] path, int* length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(path);
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr, length, GL.EntryPoints[72]);
				BindingsBase.FreeStringArrayPtr(intPtr, path.Length);
			}

			// Token: 0x06005817 RID: 22551 RVA: 0x000EF734 File Offset: 0x000ED934
			[CLSCompliant(false)]
			public unsafe static IntPtr CreateSyncFromCLevent([Out] IntPtr[] context, [Out] IntPtr[] @event, int flags)
			{
				fixed (IntPtr* ptr = ref (context != null && context.Length != 0) ? ref context[0] : ref *null)
				{
					IntPtr* ptr2 = ptr;
					fixed (IntPtr* ptr3 = ref (@event != null && @event.Length != 0) ? ref @event[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr*,System.IntPtr*,System.UInt32), ptr2, ptr3, flags, GL.EntryPoints[99]);
					}
				}
			}

			// Token: 0x06005818 RID: 22552 RVA: 0x000EF77C File Offset: 0x000ED97C
			[CLSCompliant(false)]
			public unsafe static IntPtr CreateSyncFromCLevent([Out] IntPtr[] context, [Out] IntPtr[] @event, uint flags)
			{
				fixed (IntPtr* ptr = ref (context != null && context.Length != 0) ? ref context[0] : ref *null)
				{
					IntPtr* ptr2 = ptr;
					fixed (IntPtr* ptr3 = ref (@event != null && @event.Length != 0) ? ref @event[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr*,System.IntPtr*,System.UInt32), ptr2, ptr3, flags, GL.EntryPoints[99]);
					}
				}
			}

			// Token: 0x06005819 RID: 22553 RVA: 0x000EF7C4 File Offset: 0x000ED9C4
			[CLSCompliant(false)]
			public unsafe static IntPtr CreateSyncFromCLevent(out IntPtr context, out IntPtr @event, int flags)
			{
				fixed (IntPtr* ptr = &context)
				{
					IntPtr* ptr2 = ptr;
					fixed (IntPtr* ptr3 = &@event)
					{
						return calli(System.IntPtr(System.IntPtr*,System.IntPtr*,System.UInt32), ptr2, ptr3, flags, GL.EntryPoints[99]);
					}
				}
			}

			// Token: 0x0600581A RID: 22554 RVA: 0x000EF7E8 File Offset: 0x000ED9E8
			[CLSCompliant(false)]
			public unsafe static IntPtr CreateSyncFromCLevent(out IntPtr context, out IntPtr @event, uint flags)
			{
				fixed (IntPtr* ptr = &context)
				{
					IntPtr* ptr2 = ptr;
					fixed (IntPtr* ptr3 = &@event)
					{
						return calli(System.IntPtr(System.IntPtr*,System.IntPtr*,System.UInt32), ptr2, ptr3, flags, GL.EntryPoints[99]);
					}
				}
			}

			// Token: 0x0600581B RID: 22555 RVA: 0x000EF80C File Offset: 0x000EDA0C
			[CLSCompliant(false)]
			public unsafe static IntPtr CreateSyncFromCLevent([Out] IntPtr* context, [Out] IntPtr* @event, int flags)
			{
				return calli(System.IntPtr(System.IntPtr*,System.IntPtr*,System.UInt32), context, @event, flags, GL.EntryPoints[99]);
			}

			// Token: 0x0600581C RID: 22556 RVA: 0x000EF820 File Offset: 0x000EDA20
			[CLSCompliant(false)]
			public unsafe static IntPtr CreateSyncFromCLevent([Out] IntPtr* context, [Out] IntPtr* @event, uint flags)
			{
				return calli(System.IntPtr(System.IntPtr*,System.IntPtr*,System.UInt32), context, @event, flags, GL.EntryPoints[99]);
			}

			// Token: 0x0600581D RID: 22557 RVA: 0x000EF834 File Offset: 0x000EDA34
			public static void DebugMessageCallback(DebugProcArb callback, IntPtr userParam)
			{
				calli(System.Void(OpenTK.Graphics.OpenGL4.DebugProcArb,System.IntPtr), callback, userParam, GL.EntryPoints[102]);
			}

			// Token: 0x0600581E RID: 22558 RVA: 0x000EF848 File Offset: 0x000EDA48
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcArb callback, [In] [Out] T1[] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL4.DebugProcArb,System.IntPtr), callback, ptr, GL.EntryPoints[102]);
				}
			}

			// Token: 0x0600581F RID: 22559 RVA: 0x000EF87C File Offset: 0x000EDA7C
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcArb callback, [In] [Out] T1[,] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL4.DebugProcArb,System.IntPtr), callback, ptr, GL.EntryPoints[102]);
				}
			}

			// Token: 0x06005820 RID: 22560 RVA: 0x000EF8B4 File Offset: 0x000EDAB4
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcArb callback, [In] [Out] T1[,,] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0, 0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL4.DebugProcArb,System.IntPtr), callback, ptr, GL.EntryPoints[102]);
				}
			}

			// Token: 0x06005821 RID: 22561 RVA: 0x000EF8EC File Offset: 0x000EDAEC
			public unsafe static void DebugMessageCallback<T1>(DebugProcArb callback, [In] [Out] ref T1 userParam) where T1 : struct
			{
				fixed (T1* ptr = &userParam)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL4.DebugProcArb,System.IntPtr), callback, ptr, GL.EntryPoints[102]);
				}
			}

			// Token: 0x06005822 RID: 22562 RVA: 0x000EF90C File Offset: 0x000EDB0C
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, int[] ids, bool enabled)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[105]);
				}
			}

			// Token: 0x06005823 RID: 22563 RVA: 0x000EF948 File Offset: 0x000EDB48
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, ref int ids, bool enabled)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[105]);
				}
			}

			// Token: 0x06005824 RID: 22564 RVA: 0x000EF970 File Offset: 0x000EDB70
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, int* ids, bool enabled)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[105]);
			}

			// Token: 0x06005825 RID: 22565 RVA: 0x000EF988 File Offset: 0x000EDB88
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, uint[] ids, bool enabled)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[105]);
				}
			}

			// Token: 0x06005826 RID: 22566 RVA: 0x000EF9C4 File Offset: 0x000EDBC4
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, ref uint ids, bool enabled)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[105]);
				}
			}

			// Token: 0x06005827 RID: 22567 RVA: 0x000EF9EC File Offset: 0x000EDBEC
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, uint* ids, bool enabled)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[105]);
			}

			// Token: 0x06005828 RID: 22568 RVA: 0x000EFA04 File Offset: 0x000EDC04
			[CLSCompliant(false)]
			public static void DebugMessageInsert(All source, All type, int id, All severity, int length, string buf)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[108]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06005829 RID: 22569 RVA: 0x000EFA34 File Offset: 0x000EDC34
			[CLSCompliant(false)]
			public static void DebugMessageInsert(All source, All type, uint id, All severity, int length, string buf)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[108]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x0600582A RID: 22570 RVA: 0x000EFA64 File Offset: 0x000EDC64
			public static void DeleteNamedString(int namelen, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				calli(System.Void(System.Int32,System.IntPtr), namelen, intPtr, GL.EntryPoints[112]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x0600582B RID: 22571 RVA: 0x000EFA90 File Offset: 0x000EDC90
			[CLSCompliant(false)]
			public static void DispatchComputeGroupSize(int num_groups_x, int num_groups_y, int num_groups_z, int group_size_x, int group_size_y, int group_size_z)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z, GL.EntryPoints[134]);
			}

			// Token: 0x0600582C RID: 22572 RVA: 0x000EFAAC File Offset: 0x000EDCAC
			[CLSCompliant(false)]
			public static void DispatchComputeGroupSize(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z, GL.EntryPoints[134]);
			}

			// Token: 0x0600582D RID: 22573 RVA: 0x000EFAC8 File Offset: 0x000EDCC8
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] All[] sources, [Out] All[] types, [Out] int[] ids, [Out] All[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
			{
				fixed (All* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
				{
					All* ptr2 = ptr;
					fixed (All* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
					{
						All* ptr4 = ptr3;
						fixed (int* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
						{
							int* ptr6 = ptr5;
							fixed (All* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
							{
								All* ptr8 = ptr7;
								fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[210]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x0600582E RID: 22574 RVA: 0x000EFB80 File Offset: 0x000EDD80
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, out All sources, out All types, out int ids, out All severities, out int lengths, [Out] StringBuilder messageLog)
			{
				fixed (All* ptr = &sources)
				{
					All* ptr2 = ptr;
					fixed (All* ptr3 = &types)
					{
						All* ptr4 = ptr3;
						fixed (int* ptr5 = &ids)
						{
							int* ptr6 = ptr5;
							fixed (All* ptr7 = &severities)
							{
								All* ptr8 = ptr7;
								fixed (int* ptr9 = &lengths)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[210]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x0600582F RID: 22575 RVA: 0x000EFBD8 File Offset: 0x000EDDD8
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] All* sources, [Out] All* types, [Out] int* ids, [Out] All* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
				int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[210]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
				Marshal.FreeHGlobal(intPtr);
				return result;
			}

			// Token: 0x06005830 RID: 22576 RVA: 0x000EFC1C File Offset: 0x000EDE1C
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] All[] sources, [Out] All[] types, [Out] uint[] ids, [Out] All[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
			{
				fixed (All* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
				{
					All* ptr2 = ptr;
					fixed (All* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
					{
						All* ptr4 = ptr3;
						fixed (uint* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
						{
							uint* ptr6 = ptr5;
							fixed (All* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
							{
								All* ptr8 = ptr7;
								fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[210]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x06005831 RID: 22577 RVA: 0x000EFCD4 File Offset: 0x000EDED4
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, out All sources, out All types, out uint ids, out All severities, out int lengths, [Out] StringBuilder messageLog)
			{
				fixed (All* ptr = &sources)
				{
					All* ptr2 = ptr;
					fixed (All* ptr3 = &types)
					{
						All* ptr4 = ptr3;
						fixed (uint* ptr5 = &ids)
						{
							uint* ptr6 = ptr5;
							fixed (All* ptr7 = &severities)
							{
								All* ptr8 = ptr7;
								fixed (int* ptr9 = &lengths)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[210]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x06005832 RID: 22578 RVA: 0x000EFD2C File Offset: 0x000EDF2C
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] All* sources, [Out] All* types, [Out] uint* ids, [Out] All* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
				int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[210]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
				Marshal.FreeHGlobal(intPtr);
				return result;
			}

			// Token: 0x06005833 RID: 22579 RVA: 0x000EFD70 File Offset: 0x000EDF70
			public static All GetGraphicsResetStatus()
			{
				return calli(System.Int32(), GL.EntryPoints[221]);
			}

			// Token: 0x06005834 RID: 22580 RVA: 0x000EFD84 File Offset: 0x000EDF84
			[CLSCompliant(false)]
			public static long GetImageHandle(int texture, int level, bool layered, int layer, All format)
			{
				return calli(System.Int64(System.UInt32,System.Int32,System.Boolean,System.Int32,System.Int32), texture, level, layered, layer, format, GL.EntryPoints[225]);
			}

			// Token: 0x06005835 RID: 22581 RVA: 0x000EFD9C File Offset: 0x000EDF9C
			[CLSCompliant(false)]
			public static long GetImageHandle(uint texture, int level, bool layered, int layer, All format)
			{
				return calli(System.Int64(System.UInt32,System.Int32,System.Boolean,System.Int32,System.Int32), texture, level, layered, layer, format, GL.EntryPoints[225]);
			}

			// Token: 0x06005836 RID: 22582 RVA: 0x000EFDB4 File Offset: 0x000EDFB4
			[CLSCompliant(false)]
			public unsafe static void GetNamedString(int namelen, string name, int bufSize, out int stringlen, [Out] StringBuilder @string)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = &stringlen)
				{
					int* ptr2 = ptr;
					IntPtr intPtr3 = Marshal.AllocHGlobal((IntPtr)@string.Capacity);
					calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32*,System.IntPtr), namelen, intPtr2, bufSize, ptr2, intPtr3, GL.EntryPoints[236]);
					BindingsBase.FreeStringPtr(intPtr);
					BindingsBase.MarshalPtrToStringBuilder(intPtr3, @string);
					Marshal.FreeHGlobal(intPtr3);
				}
			}

			// Token: 0x06005837 RID: 22583 RVA: 0x000EFE04 File Offset: 0x000EE004
			[CLSCompliant(false)]
			public unsafe static void GetNamedString(int namelen, string name, int bufSize, [Out] int* stringlen, [Out] StringBuilder @string)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				IntPtr intPtr2 = intPtr;
				IntPtr intPtr3 = Marshal.AllocHGlobal((IntPtr)@string.Capacity);
				calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32*,System.IntPtr), namelen, intPtr2, bufSize, stringlen, intPtr3, GL.EntryPoints[236]);
				BindingsBase.FreeStringPtr(intPtr);
				BindingsBase.MarshalPtrToStringBuilder(intPtr3, @string);
				Marshal.FreeHGlobal(intPtr3);
			}

			// Token: 0x06005838 RID: 22584 RVA: 0x000EFE50 File Offset: 0x000EE050
			[CLSCompliant(false)]
			public unsafe static void GetNamedString(int namelen, string name, All pname, [Out] int[] @params)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32*), namelen, intPtr2, pname, ptr, GL.EntryPoints[237]);
					BindingsBase.FreeStringPtr(intPtr);
				}
			}

			// Token: 0x06005839 RID: 22585 RVA: 0x000EFE94 File Offset: 0x000EE094
			[CLSCompliant(false)]
			public unsafe static void GetNamedString(int namelen, string name, All pname, out int @params)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32*), namelen, intPtr2, pname, ptr, GL.EntryPoints[237]);
					BindingsBase.FreeStringPtr(intPtr);
				}
			}

			// Token: 0x0600583A RID: 22586 RVA: 0x000EFEC8 File Offset: 0x000EE0C8
			[CLSCompliant(false)]
			public unsafe static void GetNamedString(int namelen, string name, All pname, [Out] int* @params)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32*), namelen, intPtr, pname, @params, GL.EntryPoints[237]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x0600583B RID: 22587 RVA: 0x000EFEF8 File Offset: 0x000EE0F8
			public static void GetnColorTable(All target, All format, All type, int bufSize, [Out] IntPtr table)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, table, GL.EntryPoints[238]);
			}

			// Token: 0x0600583C RID: 22588 RVA: 0x000EFF10 File Offset: 0x000EE110
			[CLSCompliant(false)]
			public unsafe static void GetnColorTable<T4>(All target, All format, All type, int bufSize, [In] [Out] T4[] table) where T4 : struct
			{
				fixed (T4* ptr = ref (table != null && table.Length != 0) ? ref table[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, ptr, GL.EntryPoints[238]);
				}
			}

			// Token: 0x0600583D RID: 22589 RVA: 0x000EFF4C File Offset: 0x000EE14C
			[CLSCompliant(false)]
			public unsafe static void GetnColorTable<T4>(All target, All format, All type, int bufSize, [In] [Out] T4[,] table) where T4 : struct
			{
				fixed (T4* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, ptr, GL.EntryPoints[238]);
				}
			}

			// Token: 0x0600583E RID: 22590 RVA: 0x000EFF8C File Offset: 0x000EE18C
			[CLSCompliant(false)]
			public unsafe static void GetnColorTable<T4>(All target, All format, All type, int bufSize, [In] [Out] T4[,,] table) where T4 : struct
			{
				fixed (T4* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, ptr, GL.EntryPoints[238]);
				}
			}

			// Token: 0x0600583F RID: 22591 RVA: 0x000EFFCC File Offset: 0x000EE1CC
			public unsafe static void GetnColorTable<T4>(All target, All format, All type, int bufSize, [In] [Out] ref T4 table) where T4 : struct
			{
				fixed (T4* ptr = &table)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, ptr, GL.EntryPoints[238]);
				}
			}

			// Token: 0x06005840 RID: 22592 RVA: 0x000EFFF4 File Offset: 0x000EE1F4
			public static void GetnCompressedTexImage(All target, int lod, int bufSize, [Out] IntPtr img)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, lod, bufSize, img, GL.EntryPoints[239]);
			}

			// Token: 0x06005841 RID: 22593 RVA: 0x000F000C File Offset: 0x000EE20C
			[CLSCompliant(false)]
			public unsafe static void GetnCompressedTexImage<T3>(All target, int lod, int bufSize, [In] [Out] T3[] img) where T3 : struct
			{
				fixed (T3* ptr = ref (img != null && img.Length != 0) ? ref img[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, lod, bufSize, ptr, GL.EntryPoints[239]);
				}
			}

			// Token: 0x06005842 RID: 22594 RVA: 0x000F0044 File Offset: 0x000EE244
			[CLSCompliant(false)]
			public unsafe static void GetnCompressedTexImage<T3>(All target, int lod, int bufSize, [In] [Out] T3[,] img) where T3 : struct
			{
				fixed (T3* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, lod, bufSize, ptr, GL.EntryPoints[239]);
				}
			}

			// Token: 0x06005843 RID: 22595 RVA: 0x000F0080 File Offset: 0x000EE280
			[CLSCompliant(false)]
			public unsafe static void GetnCompressedTexImage<T3>(All target, int lod, int bufSize, [In] [Out] T3[,,] img) where T3 : struct
			{
				fixed (T3* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, lod, bufSize, ptr, GL.EntryPoints[239]);
				}
			}

			// Token: 0x06005844 RID: 22596 RVA: 0x000F00BC File Offset: 0x000EE2BC
			public unsafe static void GetnCompressedTexImage<T3>(All target, int lod, int bufSize, [In] [Out] ref T3 img) where T3 : struct
			{
				fixed (T3* ptr = &img)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, lod, bufSize, ptr, GL.EntryPoints[239]);
				}
			}

			// Token: 0x06005845 RID: 22597 RVA: 0x000F00E0 File Offset: 0x000EE2E0
			public static void GetnConvolutionFilter(All target, All format, All type, int bufSize, [Out] IntPtr image)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, image, GL.EntryPoints[240]);
			}

			// Token: 0x06005846 RID: 22598 RVA: 0x000F00F8 File Offset: 0x000EE2F8
			[CLSCompliant(false)]
			public unsafe static void GetnConvolutionFilter<T4>(All target, All format, All type, int bufSize, [In] [Out] T4[] image) where T4 : struct
			{
				fixed (T4* ptr = ref (image != null && image.Length != 0) ? ref image[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, ptr, GL.EntryPoints[240]);
				}
			}

			// Token: 0x06005847 RID: 22599 RVA: 0x000F0134 File Offset: 0x000EE334
			[CLSCompliant(false)]
			public unsafe static void GetnConvolutionFilter<T4>(All target, All format, All type, int bufSize, [In] [Out] T4[,] image) where T4 : struct
			{
				fixed (T4* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, ptr, GL.EntryPoints[240]);
				}
			}

			// Token: 0x06005848 RID: 22600 RVA: 0x000F0174 File Offset: 0x000EE374
			[CLSCompliant(false)]
			public unsafe static void GetnConvolutionFilter<T4>(All target, All format, All type, int bufSize, [In] [Out] T4[,,] image) where T4 : struct
			{
				fixed (T4* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, ptr, GL.EntryPoints[240]);
				}
			}

			// Token: 0x06005849 RID: 22601 RVA: 0x000F01B4 File Offset: 0x000EE3B4
			public unsafe static void GetnConvolutionFilter<T4>(All target, All format, All type, int bufSize, [In] [Out] ref T4 image) where T4 : struct
			{
				fixed (T4* ptr = &image)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, ptr, GL.EntryPoints[240]);
				}
			}

			// Token: 0x0600584A RID: 22602 RVA: 0x000F01DC File Offset: 0x000EE3DC
			public static void GetnHistogram(All target, bool reset, All format, All type, int bufSize, [Out] IntPtr values)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, values, GL.EntryPoints[241]);
			}

			// Token: 0x0600584B RID: 22603 RVA: 0x000F01F8 File Offset: 0x000EE3F8
			[CLSCompliant(false)]
			public unsafe static void GetnHistogram<T5>(All target, bool reset, All format, All type, int bufSize, [In] [Out] T5[] values) where T5 : struct
			{
				fixed (T5* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, ptr, GL.EntryPoints[241]);
				}
			}

			// Token: 0x0600584C RID: 22604 RVA: 0x000F0234 File Offset: 0x000EE434
			[CLSCompliant(false)]
			public unsafe static void GetnHistogram<T5>(All target, bool reset, All format, All type, int bufSize, [In] [Out] T5[,] values) where T5 : struct
			{
				fixed (T5* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, ptr, GL.EntryPoints[241]);
				}
			}

			// Token: 0x0600584D RID: 22605 RVA: 0x000F0274 File Offset: 0x000EE474
			[CLSCompliant(false)]
			public unsafe static void GetnHistogram<T5>(All target, bool reset, All format, All type, int bufSize, [In] [Out] T5[,,] values) where T5 : struct
			{
				fixed (T5* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, ptr, GL.EntryPoints[241]);
				}
			}

			// Token: 0x0600584E RID: 22606 RVA: 0x000F02B8 File Offset: 0x000EE4B8
			public unsafe static void GetnHistogram<T5>(All target, bool reset, All format, All type, int bufSize, [In] [Out] ref T5 values) where T5 : struct
			{
				fixed (T5* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, ptr, GL.EntryPoints[241]);
				}
			}

			// Token: 0x0600584F RID: 22607 RVA: 0x000F02E0 File Offset: 0x000EE4E0
			[CLSCompliant(false)]
			public unsafe static void GetnMap(All target, All query, int bufSize, [Out] double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Double*), target, query, bufSize, ptr, GL.EntryPoints[242]);
				}
			}

			// Token: 0x06005850 RID: 22608 RVA: 0x000F0318 File Offset: 0x000EE518
			[CLSCompliant(false)]
			public unsafe static void GetnMap(All target, All query, int bufSize, out double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Double*), target, query, bufSize, ptr, GL.EntryPoints[242]);
				}
			}

			// Token: 0x06005851 RID: 22609 RVA: 0x000F033C File Offset: 0x000EE53C
			[CLSCompliant(false)]
			public unsafe static void GetnMap(All target, All query, int bufSize, [Out] double* v)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Double*), target, query, bufSize, v, GL.EntryPoints[242]);
			}

			// Token: 0x06005852 RID: 22610 RVA: 0x000F0354 File Offset: 0x000EE554
			[CLSCompliant(false)]
			public unsafe static void GetnMap(All target, All query, int bufSize, [Out] float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), target, query, bufSize, ptr, GL.EntryPoints[243]);
				}
			}

			// Token: 0x06005853 RID: 22611 RVA: 0x000F038C File Offset: 0x000EE58C
			[CLSCompliant(false)]
			public unsafe static void GetnMap(All target, All query, int bufSize, out float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), target, query, bufSize, ptr, GL.EntryPoints[243]);
				}
			}

			// Token: 0x06005854 RID: 22612 RVA: 0x000F03B0 File Offset: 0x000EE5B0
			[CLSCompliant(false)]
			public unsafe static void GetnMap(All target, All query, int bufSize, [Out] float* v)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), target, query, bufSize, v, GL.EntryPoints[243]);
			}

			// Token: 0x06005855 RID: 22613 RVA: 0x000F03C8 File Offset: 0x000EE5C8
			[CLSCompliant(false)]
			public unsafe static void GetnMap(All target, All query, int bufSize, [Out] int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, query, bufSize, ptr, GL.EntryPoints[244]);
				}
			}

			// Token: 0x06005856 RID: 22614 RVA: 0x000F0400 File Offset: 0x000EE600
			[CLSCompliant(false)]
			public unsafe static void GetnMap(All target, All query, int bufSize, out int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, query, bufSize, ptr, GL.EntryPoints[244]);
				}
			}

			// Token: 0x06005857 RID: 22615 RVA: 0x000F0424 File Offset: 0x000EE624
			[CLSCompliant(false)]
			public unsafe static void GetnMap(All target, All query, int bufSize, [Out] int* v)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, query, bufSize, v, GL.EntryPoints[244]);
			}

			// Token: 0x06005858 RID: 22616 RVA: 0x000F043C File Offset: 0x000EE63C
			public static void GetnMinmax(All target, bool reset, All format, All type, int bufSize, [Out] IntPtr values)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, values, GL.EntryPoints[245]);
			}

			// Token: 0x06005859 RID: 22617 RVA: 0x000F0458 File Offset: 0x000EE658
			[CLSCompliant(false)]
			public unsafe static void GetnMinmax<T5>(All target, bool reset, All format, All type, int bufSize, [In] [Out] T5[] values) where T5 : struct
			{
				fixed (T5* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, ptr, GL.EntryPoints[245]);
				}
			}

			// Token: 0x0600585A RID: 22618 RVA: 0x000F0494 File Offset: 0x000EE694
			[CLSCompliant(false)]
			public unsafe static void GetnMinmax<T5>(All target, bool reset, All format, All type, int bufSize, [In] [Out] T5[,] values) where T5 : struct
			{
				fixed (T5* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, ptr, GL.EntryPoints[245]);
				}
			}

			// Token: 0x0600585B RID: 22619 RVA: 0x000F04D4 File Offset: 0x000EE6D4
			[CLSCompliant(false)]
			public unsafe static void GetnMinmax<T5>(All target, bool reset, All format, All type, int bufSize, [In] [Out] T5[,,] values) where T5 : struct
			{
				fixed (T5* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, ptr, GL.EntryPoints[245]);
				}
			}

			// Token: 0x0600585C RID: 22620 RVA: 0x000F0518 File Offset: 0x000EE718
			public unsafe static void GetnMinmax<T5>(All target, bool reset, All format, All type, int bufSize, [In] [Out] ref T5 values) where T5 : struct
			{
				fixed (T5* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, ptr, GL.EntryPoints[245]);
				}
			}

			// Token: 0x0600585D RID: 22621 RVA: 0x000F0540 File Offset: 0x000EE740
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(All map, int bufSize, [Out] float[] values)
			{
				fixed (float* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), map, bufSize, ptr, GL.EntryPoints[246]);
				}
			}

			// Token: 0x0600585E RID: 22622 RVA: 0x000F0578 File Offset: 0x000EE778
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(All map, int bufSize, out float values)
			{
				fixed (float* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), map, bufSize, ptr, GL.EntryPoints[246]);
				}
			}

			// Token: 0x0600585F RID: 22623 RVA: 0x000F059C File Offset: 0x000EE79C
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(All map, int bufSize, [Out] float* values)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), map, bufSize, values, GL.EntryPoints[246]);
			}

			// Token: 0x06005860 RID: 22624 RVA: 0x000F05B4 File Offset: 0x000EE7B4
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(All map, int bufSize, [Out] int[] values)
			{
				fixed (int* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, bufSize, ptr, GL.EntryPoints[247]);
				}
			}

			// Token: 0x06005861 RID: 22625 RVA: 0x000F05EC File Offset: 0x000EE7EC
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(All map, int bufSize, out int values)
			{
				fixed (int* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, bufSize, ptr, GL.EntryPoints[247]);
				}
			}

			// Token: 0x06005862 RID: 22626 RVA: 0x000F0610 File Offset: 0x000EE810
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(All map, int bufSize, [Out] int* values)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, bufSize, values, GL.EntryPoints[247]);
			}

			// Token: 0x06005863 RID: 22627 RVA: 0x000F0628 File Offset: 0x000EE828
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(All map, int bufSize, [Out] uint[] values)
			{
				fixed (uint* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, bufSize, ptr, GL.EntryPoints[247]);
				}
			}

			// Token: 0x06005864 RID: 22628 RVA: 0x000F0660 File Offset: 0x000EE860
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(All map, int bufSize, out uint values)
			{
				fixed (uint* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, bufSize, ptr, GL.EntryPoints[247]);
				}
			}

			// Token: 0x06005865 RID: 22629 RVA: 0x000F0684 File Offset: 0x000EE884
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(All map, int bufSize, [Out] uint* values)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, bufSize, values, GL.EntryPoints[247]);
			}

			// Token: 0x06005866 RID: 22630 RVA: 0x000F069C File Offset: 0x000EE89C
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(All map, int bufSize, [Out] short[] values)
			{
				fixed (short* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, bufSize, ptr, GL.EntryPoints[248]);
				}
			}

			// Token: 0x06005867 RID: 22631 RVA: 0x000F06D4 File Offset: 0x000EE8D4
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(All map, int bufSize, out short values)
			{
				fixed (short* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, bufSize, ptr, GL.EntryPoints[248]);
				}
			}

			// Token: 0x06005868 RID: 22632 RVA: 0x000F06F8 File Offset: 0x000EE8F8
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(All map, int bufSize, [Out] short* values)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, bufSize, values, GL.EntryPoints[248]);
			}

			// Token: 0x06005869 RID: 22633 RVA: 0x000F0710 File Offset: 0x000EE910
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(All map, int bufSize, [Out] ushort[] values)
			{
				fixed (ushort* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, bufSize, ptr, GL.EntryPoints[248]);
				}
			}

			// Token: 0x0600586A RID: 22634 RVA: 0x000F0748 File Offset: 0x000EE948
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(All map, int bufSize, out ushort values)
			{
				fixed (ushort* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, bufSize, ptr, GL.EntryPoints[248]);
				}
			}

			// Token: 0x0600586B RID: 22635 RVA: 0x000F076C File Offset: 0x000EE96C
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(All map, int bufSize, [Out] ushort* values)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, bufSize, values, GL.EntryPoints[248]);
			}

			// Token: 0x0600586C RID: 22636 RVA: 0x000F0784 File Offset: 0x000EE984
			[CLSCompliant(false)]
			public static byte GetnPolygonStipple()
			{
				byte result;
				calli(System.Void(System.Int32,System.Byte*), 1, ref result, GL.EntryPoints[249]);
				return result;
			}

			// Token: 0x0600586D RID: 22637 RVA: 0x000F07A8 File Offset: 0x000EE9A8
			[CLSCompliant(false)]
			public unsafe static void GetnPolygonStipple(int bufSize, [Out] byte[] pattern)
			{
				fixed (byte* ptr = ref (pattern != null && pattern.Length != 0) ? ref pattern[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Byte*), bufSize, ptr, GL.EntryPoints[249]);
				}
			}

			// Token: 0x0600586E RID: 22638 RVA: 0x000F07DC File Offset: 0x000EE9DC
			[CLSCompliant(false)]
			public unsafe static void GetnPolygonStipple(int bufSize, out byte pattern)
			{
				fixed (byte* ptr = &pattern)
				{
					calli(System.Void(System.Int32,System.Byte*), bufSize, ptr, GL.EntryPoints[249]);
				}
			}

			// Token: 0x0600586F RID: 22639 RVA: 0x000F0800 File Offset: 0x000EEA00
			[CLSCompliant(false)]
			public unsafe static void GetnPolygonStipple(int bufSize, [Out] byte* pattern)
			{
				calli(System.Void(System.Int32,System.Byte*), bufSize, pattern, GL.EntryPoints[249]);
			}

			// Token: 0x06005870 RID: 22640 RVA: 0x000F0814 File Offset: 0x000EEA14
			public static void GetnSeparableFilter(All target, All format, All type, int rowBufSize, [Out] IntPtr row, int columnBufSize, [Out] IntPtr column, [Out] IntPtr span)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr), target, format, type, rowBufSize, row, columnBufSize, column, span, GL.EntryPoints[250]);
			}

			// Token: 0x06005871 RID: 22641 RVA: 0x000F0840 File Offset: 0x000EEA40
			[CLSCompliant(false)]
			public unsafe static void GetnSeparableFilter<T4, T6, T7>(All target, All format, All type, int rowBufSize, [In] [Out] T4[] row, int columnBufSize, [In] [Out] T6[] column, [In] [Out] T7[] span) where T4 : struct where T6 : struct where T7 : struct
			{
				fixed (T4* ptr = ref (row != null && row.Length != 0) ? ref row[0] : ref *null)
				{
					T4* ptr2 = ptr;
					fixed (T6* ptr3 = ref (column != null && column.Length != 0) ? ref column[0] : ref *null)
					{
						T6* ptr4 = ptr3;
						fixed (T7* ptr5 = ref (span != null && span.Length != 0) ? ref span[0] : ref *null)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr), target, format, type, rowBufSize, ptr2, columnBufSize, ptr4, ptr5, GL.EntryPoints[250]);
						}
					}
				}
			}

			// Token: 0x06005872 RID: 22642 RVA: 0x000F08B0 File Offset: 0x000EEAB0
			[CLSCompliant(false)]
			public unsafe static void GetnSeparableFilter<T4, T6, T7>(All target, All format, All type, int rowBufSize, [In] [Out] T4[,] row, int columnBufSize, [In] [Out] T6[,] column, [In] [Out] T7[,] span) where T4 : struct where T6 : struct where T7 : struct
			{
				fixed (T4* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0] : ref *null)
				{
					T4* ptr2 = ptr;
					fixed (T6* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0] : ref *null)
					{
						T6* ptr4 = ptr3;
						fixed (T7* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0] : ref *null)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr), target, format, type, rowBufSize, ptr2, columnBufSize, ptr4, ptr5, GL.EntryPoints[250]);
						}
					}
				}
			}

			// Token: 0x06005873 RID: 22643 RVA: 0x000F092C File Offset: 0x000EEB2C
			[CLSCompliant(false)]
			public unsafe static void GetnSeparableFilter<T4, T6, T7>(All target, All format, All type, int rowBufSize, [In] [Out] T4[,,] row, int columnBufSize, [In] [Out] T6[,,] column, [In] [Out] T7[,,] span) where T4 : struct where T6 : struct where T7 : struct
			{
				fixed (T4* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0, 0] : ref *null)
				{
					T4* ptr2 = ptr;
					fixed (T6* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
					{
						T6* ptr4 = ptr3;
						fixed (T7* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr), target, format, type, rowBufSize, ptr2, columnBufSize, ptr4, ptr5, GL.EntryPoints[250]);
						}
					}
				}
			}

			// Token: 0x06005874 RID: 22644 RVA: 0x000F09AC File Offset: 0x000EEBAC
			public unsafe static void GetnSeparableFilter<T4, T6, T7>(All target, All format, All type, int rowBufSize, [In] [Out] ref T4 row, int columnBufSize, [In] [Out] ref T6 column, [In] [Out] ref T7 span) where T4 : struct where T6 : struct where T7 : struct
			{
				fixed (T4* ptr = &row)
				{
					T4* ptr2 = ptr;
					fixed (T6* ptr3 = &column)
					{
						T6* ptr4 = ptr3;
						fixed (T7* ptr5 = &span)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr), target, format, type, rowBufSize, ptr2, columnBufSize, ptr4, ptr5, GL.EntryPoints[250]);
						}
					}
				}
			}

			// Token: 0x06005875 RID: 22645 RVA: 0x000F09E0 File Offset: 0x000EEBE0
			public static void GetnTexImage(All target, int level, All format, All type, int bufSize, [Out] IntPtr img)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, bufSize, img, GL.EntryPoints[251]);
			}

			// Token: 0x06005876 RID: 22646 RVA: 0x000F09FC File Offset: 0x000EEBFC
			[CLSCompliant(false)]
			public unsafe static void GetnTexImage<T5>(All target, int level, All format, All type, int bufSize, [In] [Out] T5[] img) where T5 : struct
			{
				fixed (T5* ptr = ref (img != null && img.Length != 0) ? ref img[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, bufSize, ptr, GL.EntryPoints[251]);
				}
			}

			// Token: 0x06005877 RID: 22647 RVA: 0x000F0A38 File Offset: 0x000EEC38
			[CLSCompliant(false)]
			public unsafe static void GetnTexImage<T5>(All target, int level, All format, All type, int bufSize, [In] [Out] T5[,] img) where T5 : struct
			{
				fixed (T5* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, bufSize, ptr, GL.EntryPoints[251]);
				}
			}

			// Token: 0x06005878 RID: 22648 RVA: 0x000F0A78 File Offset: 0x000EEC78
			[CLSCompliant(false)]
			public unsafe static void GetnTexImage<T5>(All target, int level, All format, All type, int bufSize, [In] [Out] T5[,,] img) where T5 : struct
			{
				fixed (T5* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, bufSize, ptr, GL.EntryPoints[251]);
				}
			}

			// Token: 0x06005879 RID: 22649 RVA: 0x000F0ABC File Offset: 0x000EECBC
			public unsafe static void GetnTexImage<T5>(All target, int level, All format, All type, int bufSize, [In] [Out] ref T5 img) where T5 : struct
			{
				fixed (T5* ptr = &img)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, bufSize, ptr, GL.EntryPoints[251]);
				}
			}

			// Token: 0x0600587A RID: 22650 RVA: 0x000F0AE4 File Offset: 0x000EECE4
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, bufSize, ptr, GL.EntryPoints[252]);
				}
			}

			// Token: 0x0600587B RID: 22651 RVA: 0x000F0B1C File Offset: 0x000EED1C
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, bufSize, ptr, GL.EntryPoints[252]);
				}
			}

			// Token: 0x0600587C RID: 22652 RVA: 0x000F0B40 File Offset: 0x000EED40
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, bufSize, @params, GL.EntryPoints[252]);
			}

			// Token: 0x0600587D RID: 22653 RVA: 0x000F0B58 File Offset: 0x000EED58
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, bufSize, ptr, GL.EntryPoints[252]);
				}
			}

			// Token: 0x0600587E RID: 22654 RVA: 0x000F0B90 File Offset: 0x000EED90
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, bufSize, ptr, GL.EntryPoints[252]);
				}
			}

			// Token: 0x0600587F RID: 22655 RVA: 0x000F0BB4 File Offset: 0x000EEDB4
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, bufSize, @params, GL.EntryPoints[252]);
			}

			// Token: 0x06005880 RID: 22656 RVA: 0x000F0BCC File Offset: 0x000EEDCC
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, ptr, GL.EntryPoints[253]);
				}
			}

			// Token: 0x06005881 RID: 22657 RVA: 0x000F0C04 File Offset: 0x000EEE04
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, ptr, GL.EntryPoints[253]);
				}
			}

			// Token: 0x06005882 RID: 22658 RVA: 0x000F0C28 File Offset: 0x000EEE28
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, @params, GL.EntryPoints[253]);
			}

			// Token: 0x06005883 RID: 22659 RVA: 0x000F0C40 File Offset: 0x000EEE40
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, ptr, GL.EntryPoints[253]);
				}
			}

			// Token: 0x06005884 RID: 22660 RVA: 0x000F0C78 File Offset: 0x000EEE78
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, ptr, GL.EntryPoints[253]);
				}
			}

			// Token: 0x06005885 RID: 22661 RVA: 0x000F0C9C File Offset: 0x000EEE9C
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, @params, GL.EntryPoints[253]);
			}

			// Token: 0x06005886 RID: 22662 RVA: 0x000F0CB4 File Offset: 0x000EEEB4
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, ptr, GL.EntryPoints[254]);
				}
			}

			// Token: 0x06005887 RID: 22663 RVA: 0x000F0CEC File Offset: 0x000EEEEC
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, ptr, GL.EntryPoints[254]);
				}
			}

			// Token: 0x06005888 RID: 22664 RVA: 0x000F0D10 File Offset: 0x000EEF10
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, @params, GL.EntryPoints[254]);
			}

			// Token: 0x06005889 RID: 22665 RVA: 0x000F0D28 File Offset: 0x000EEF28
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, ptr, GL.EntryPoints[254]);
				}
			}

			// Token: 0x0600588A RID: 22666 RVA: 0x000F0D60 File Offset: 0x000EEF60
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, ptr, GL.EntryPoints[254]);
				}
			}

			// Token: 0x0600588B RID: 22667 RVA: 0x000F0D84 File Offset: 0x000EEF84
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, @params, GL.EntryPoints[254]);
			}

			// Token: 0x0600588C RID: 22668 RVA: 0x000F0D9C File Offset: 0x000EEF9C
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, bufSize, ptr, GL.EntryPoints[255]);
				}
			}

			// Token: 0x0600588D RID: 22669 RVA: 0x000F0DD4 File Offset: 0x000EEFD4
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, bufSize, ptr, GL.EntryPoints[255]);
				}
			}

			// Token: 0x0600588E RID: 22670 RVA: 0x000F0DF8 File Offset: 0x000EEFF8
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] uint* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, bufSize, @params, GL.EntryPoints[255]);
			}

			// Token: 0x0600588F RID: 22671 RVA: 0x000F0E10 File Offset: 0x000EF010
			[CLSCompliant(false)]
			public static long GetTextureHandle(int texture)
			{
				return calli(System.Int64(System.UInt32), texture, GL.EntryPoints[302]);
			}

			// Token: 0x06005890 RID: 22672 RVA: 0x000F0E24 File Offset: 0x000EF024
			[CLSCompliant(false)]
			public static long GetTextureHandle(uint texture)
			{
				return calli(System.Int64(System.UInt32), texture, GL.EntryPoints[302]);
			}

			// Token: 0x06005891 RID: 22673 RVA: 0x000F0E38 File Offset: 0x000EF038
			[CLSCompliant(false)]
			public static long GetTextureSamplerHandle(int texture, int sampler)
			{
				return calli(System.Int64(System.UInt32,System.UInt32), texture, sampler, GL.EntryPoints[303]);
			}

			// Token: 0x06005892 RID: 22674 RVA: 0x000F0E4C File Offset: 0x000EF04C
			[CLSCompliant(false)]
			public static long GetTextureSamplerHandle(uint texture, uint sampler)
			{
				return calli(System.Int64(System.UInt32,System.UInt32), texture, sampler, GL.EntryPoints[303]);
			}

			// Token: 0x06005893 RID: 22675 RVA: 0x000F0E60 File Offset: 0x000EF060
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(int index, VertexAttribParameterArb pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), index, pname, ptr, GL.EntryPoints[319]);
				}
			}

			// Token: 0x06005894 RID: 22676 RVA: 0x000F0E98 File Offset: 0x000EF098
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(int index, VertexAttribParameterArb pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), index, pname, ptr, GL.EntryPoints[319]);
				}
			}

			// Token: 0x06005895 RID: 22677 RVA: 0x000F0EBC File Offset: 0x000EF0BC
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(int index, VertexAttribParameterArb pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), index, pname, @params, GL.EntryPoints[319]);
			}

			// Token: 0x06005896 RID: 22678 RVA: 0x000F0ED4 File Offset: 0x000EF0D4
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(uint index, VertexAttribParameterArb pname, [Out] ulong[] @params)
			{
				fixed (ulong* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), index, pname, ptr, GL.EntryPoints[319]);
				}
			}

			// Token: 0x06005897 RID: 22679 RVA: 0x000F0F0C File Offset: 0x000EF10C
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(uint index, VertexAttribParameterArb pname, out ulong @params)
			{
				fixed (ulong* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), index, pname, ptr, GL.EntryPoints[319]);
				}
			}

			// Token: 0x06005898 RID: 22680 RVA: 0x000F0F30 File Offset: 0x000EF130
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(uint index, VertexAttribParameterArb pname, [Out] ulong* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), index, pname, @params, GL.EntryPoints[319]);
			}

			// Token: 0x06005899 RID: 22681 RVA: 0x000F0F48 File Offset: 0x000EF148
			[CLSCompliant(false)]
			public static bool IsImageHandleResident(long handle)
			{
				return calli(System.Byte(System.UInt64), handle, GL.EntryPoints[333]);
			}

			// Token: 0x0600589A RID: 22682 RVA: 0x000F0F5C File Offset: 0x000EF15C
			[CLSCompliant(false)]
			public static bool IsImageHandleResident(ulong handle)
			{
				return calli(System.Byte(System.UInt64), handle, GL.EntryPoints[333]);
			}

			// Token: 0x0600589B RID: 22683 RVA: 0x000F0F70 File Offset: 0x000EF170
			public static bool IsNamedString(int namelen, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				bool result = calli(System.Byte(System.Int32,System.IntPtr), namelen, intPtr, GL.EntryPoints[334]);
				BindingsBase.FreeStringPtr(intPtr);
				return result;
			}

			// Token: 0x0600589C RID: 22684 RVA: 0x000F0F9C File Offset: 0x000EF19C
			[CLSCompliant(false)]
			public static bool IsTextureHandleResident(long handle)
			{
				return calli(System.Byte(System.UInt64), handle, GL.EntryPoints[343]);
			}

			// Token: 0x0600589D RID: 22685 RVA: 0x000F0FB0 File Offset: 0x000EF1B0
			[CLSCompliant(false)]
			public static bool IsTextureHandleResident(ulong handle)
			{
				return calli(System.Byte(System.UInt64), handle, GL.EntryPoints[343]);
			}

			// Token: 0x0600589E RID: 22686 RVA: 0x000F0FC4 File Offset: 0x000EF1C4
			[CLSCompliant(false)]
			public static void MakeImageHandleNonResident(long handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[349]);
			}

			// Token: 0x0600589F RID: 22687 RVA: 0x000F0FD8 File Offset: 0x000EF1D8
			[CLSCompliant(false)]
			public static void MakeImageHandleNonResident(ulong handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[349]);
			}

			// Token: 0x060058A0 RID: 22688 RVA: 0x000F0FEC File Offset: 0x000EF1EC
			[CLSCompliant(false)]
			public static void MakeImageHandleResident(long handle, All access)
			{
				calli(System.Void(System.UInt64,System.Int32), handle, access, GL.EntryPoints[350]);
			}

			// Token: 0x060058A1 RID: 22689 RVA: 0x000F1000 File Offset: 0x000EF200
			[CLSCompliant(false)]
			public static void MakeImageHandleResident(ulong handle, All access)
			{
				calli(System.Void(System.UInt64,System.Int32), handle, access, GL.EntryPoints[350]);
			}

			// Token: 0x060058A2 RID: 22690 RVA: 0x000F1014 File Offset: 0x000EF214
			[CLSCompliant(false)]
			public static void MakeTextureHandleNonResident(long handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[351]);
			}

			// Token: 0x060058A3 RID: 22691 RVA: 0x000F1028 File Offset: 0x000EF228
			[CLSCompliant(false)]
			public static void MakeTextureHandleNonResident(ulong handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[351]);
			}

			// Token: 0x060058A4 RID: 22692 RVA: 0x000F103C File Offset: 0x000EF23C
			[CLSCompliant(false)]
			public static void MakeTextureHandleResident(long handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[352]);
			}

			// Token: 0x060058A5 RID: 22693 RVA: 0x000F1050 File Offset: 0x000EF250
			[CLSCompliant(false)]
			public static void MakeTextureHandleResident(ulong handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[352]);
			}

			// Token: 0x060058A6 RID: 22694 RVA: 0x000F1064 File Offset: 0x000EF264
			public static void MinSampleShading(float value)
			{
				calli(System.Void(System.Single), value, GL.EntryPoints[358]);
			}

			// Token: 0x060058A7 RID: 22695 RVA: 0x000F1078 File Offset: 0x000EF278
			public static void MultiDrawArraysIndirectCount(All mode, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32), mode, indirect, drawcount, maxdrawcount, stride, GL.EntryPoints[361]);
			}

			// Token: 0x060058A8 RID: 22696 RVA: 0x000F1090 File Offset: 0x000EF290
			public static void MultiDrawElementsIndirectCount(All mode, All type, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32), mode, type, indirect, drawcount, maxdrawcount, stride, GL.EntryPoints[365]);
			}

			// Token: 0x060058A9 RID: 22697 RVA: 0x000F10AC File Offset: 0x000EF2AC
			public static void NamedString(All type, int namelen, string name, int stringlen, string @string)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				IntPtr intPtr2 = intPtr;
				IntPtr intPtr3 = BindingsBase.MarshalStringToPtr(@string);
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr), type, namelen, intPtr2, stringlen, intPtr3, GL.EntryPoints[374]);
				BindingsBase.FreeStringPtr(intPtr);
				BindingsBase.FreeStringPtr(intPtr3);
			}

			// Token: 0x060058AA RID: 22698 RVA: 0x000F10EC File Offset: 0x000EF2EC
			[CLSCompliant(false)]
			public static void ProgramUniformHandle(int program, int location, long value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64), program, location, value, GL.EntryPoints[430]);
			}

			// Token: 0x060058AB RID: 22699 RVA: 0x000F1104 File Offset: 0x000EF304
			[CLSCompliant(false)]
			public static void ProgramUniformHandle(uint program, int location, ulong value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64), program, location, value, GL.EntryPoints[430]);
			}

			// Token: 0x060058AC RID: 22700 RVA: 0x000F111C File Offset: 0x000EF31C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(int program, int location, int count, long[] values)
			{
				fixed (long* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[431]);
				}
			}

			// Token: 0x060058AD RID: 22701 RVA: 0x000F1154 File Offset: 0x000EF354
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(int program, int location, int count, ref long values)
			{
				fixed (long* ptr = &values)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[431]);
				}
			}

			// Token: 0x060058AE RID: 22702 RVA: 0x000F1178 File Offset: 0x000EF378
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(int program, int location, int count, long* values)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, values, GL.EntryPoints[431]);
			}

			// Token: 0x060058AF RID: 22703 RVA: 0x000F1190 File Offset: 0x000EF390
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(uint program, int location, int count, ulong[] values)
			{
				fixed (ulong* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[431]);
				}
			}

			// Token: 0x060058B0 RID: 22704 RVA: 0x000F11C8 File Offset: 0x000EF3C8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(uint program, int location, int count, ref ulong values)
			{
				fixed (ulong* ptr = &values)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[431]);
				}
			}

			// Token: 0x060058B1 RID: 22705 RVA: 0x000F11EC File Offset: 0x000EF3EC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(uint program, int location, int count, ulong* values)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, values, GL.EntryPoints[431]);
			}

			// Token: 0x060058B2 RID: 22706 RVA: 0x000F1204 File Offset: 0x000EF404
			public static void ReadnPixels(int x, int y, int width, int height, All format, All type, int bufSize, [Out] IntPtr data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, bufSize, data, GL.EntryPoints[455]);
			}

			// Token: 0x060058B3 RID: 22707 RVA: 0x000F1230 File Offset: 0x000EF430
			[CLSCompliant(false)]
			public unsafe static void ReadnPixels<T7>(int x, int y, int width, int height, All format, All type, int bufSize, [In] [Out] T7[] data) where T7 : struct
			{
				fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, bufSize, ptr, GL.EntryPoints[455]);
				}
			}

			// Token: 0x060058B4 RID: 22708 RVA: 0x000F1270 File Offset: 0x000EF470
			[CLSCompliant(false)]
			public unsafe static void ReadnPixels<T7>(int x, int y, int width, int height, All format, All type, int bufSize, [In] [Out] T7[,] data) where T7 : struct
			{
				fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, bufSize, ptr, GL.EntryPoints[455]);
				}
			}

			// Token: 0x060058B5 RID: 22709 RVA: 0x000F12B4 File Offset: 0x000EF4B4
			[CLSCompliant(false)]
			public unsafe static void ReadnPixels<T7>(int x, int y, int width, int height, All format, All type, int bufSize, [In] [Out] T7[,,] data) where T7 : struct
			{
				fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, bufSize, ptr, GL.EntryPoints[455]);
				}
			}

			// Token: 0x060058B6 RID: 22710 RVA: 0x000F12FC File Offset: 0x000EF4FC
			public unsafe static void ReadnPixels<T7>(int x, int y, int width, int height, All format, All type, int bufSize, [In] [Out] ref T7 data) where T7 : struct
			{
				fixed (T7* ptr = &data)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, bufSize, ptr, GL.EntryPoints[455]);
				}
			}

			// Token: 0x060058B7 RID: 22711 RVA: 0x000F1328 File Offset: 0x000EF528
			public static void TexPageCommitment(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool resident)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), target, level, xoffset, yoffset, zoffset, width, height, depth, resident, GL.EntryPoints[502]);
			}

			// Token: 0x060058B8 RID: 22712 RVA: 0x000F1354 File Offset: 0x000EF554
			[CLSCompliant(false)]
			public static void UniformHandle(int location, long value)
			{
				calli(System.Void(System.Int32,System.UInt64), location, value, GL.EntryPoints[552]);
			}

			// Token: 0x060058B9 RID: 22713 RVA: 0x000F1368 File Offset: 0x000EF568
			[CLSCompliant(false)]
			public static void UniformHandle(int location, ulong value)
			{
				calli(System.Void(System.Int32,System.UInt64), location, value, GL.EntryPoints[552]);
			}

			// Token: 0x060058BA RID: 22714 RVA: 0x000F137C File Offset: 0x000EF57C
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[553]);
				}
			}

			// Token: 0x060058BB RID: 22715 RVA: 0x000F13B4 File Offset: 0x000EF5B4
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[553]);
				}
			}

			// Token: 0x060058BC RID: 22716 RVA: 0x000F13D8 File Offset: 0x000EF5D8
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, long* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, value, GL.EntryPoints[553]);
			}

			// Token: 0x060058BD RID: 22717 RVA: 0x000F13F0 File Offset: 0x000EF5F0
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, ulong[] value)
			{
				fixed (ulong* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[553]);
				}
			}

			// Token: 0x060058BE RID: 22718 RVA: 0x000F1428 File Offset: 0x000EF628
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, ref ulong value)
			{
				fixed (ulong* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[553]);
				}
			}

			// Token: 0x060058BF RID: 22719 RVA: 0x000F144C File Offset: 0x000EF64C
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, ulong* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, value, GL.EntryPoints[553]);
			}

			// Token: 0x060058C0 RID: 22720 RVA: 0x000F1464 File Offset: 0x000EF664
			[CLSCompliant(false)]
			public static void VertexAttribL1(int index, long x)
			{
				calli(System.Void(System.UInt32,System.UInt64), index, x, GL.EntryPoints[641]);
			}

			// Token: 0x060058C1 RID: 22721 RVA: 0x000F1478 File Offset: 0x000EF678
			[CLSCompliant(false)]
			public static void VertexAttribL1(uint index, ulong x)
			{
				calli(System.Void(System.UInt32,System.UInt64), index, x, GL.EntryPoints[641]);
			}

			// Token: 0x060058C2 RID: 22722 RVA: 0x000F148C File Offset: 0x000EF68C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL1(int index, long[] v)
			{
				fixed (long* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt64*), index, ptr, GL.EntryPoints[642]);
				}
			}

			// Token: 0x060058C3 RID: 22723 RVA: 0x000F14C0 File Offset: 0x000EF6C0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL1(int index, long* v)
			{
				calli(System.Void(System.UInt32,System.UInt64*), index, v, GL.EntryPoints[642]);
			}

			// Token: 0x060058C4 RID: 22724 RVA: 0x000F14D4 File Offset: 0x000EF6D4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL1(uint index, ulong[] v)
			{
				fixed (ulong* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt64*), index, ptr, GL.EntryPoints[642]);
				}
			}

			// Token: 0x060058C5 RID: 22725 RVA: 0x000F1508 File Offset: 0x000EF708
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL1(uint index, ulong* v)
			{
				calli(System.Void(System.UInt32,System.UInt64*), index, v, GL.EntryPoints[642]);
			}
		}

		// Token: 0x020005F7 RID: 1527
		public static class Khr
		{
			// Token: 0x060058C6 RID: 22726 RVA: 0x000F151C File Offset: 0x000EF71C
			public static void DebugMessageCallback(DebugProcKhr callback, IntPtr userParam)
			{
				calli(System.Void(OpenTK.Graphics.OpenGL4.DebugProcKhr,System.IntPtr), callback, userParam, GL.EntryPoints[103]);
			}

			// Token: 0x060058C7 RID: 22727 RVA: 0x000F1530 File Offset: 0x000EF730
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcKhr callback, [In] [Out] T1[] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL4.DebugProcKhr,System.IntPtr), callback, ptr, GL.EntryPoints[103]);
				}
			}

			// Token: 0x060058C8 RID: 22728 RVA: 0x000F1564 File Offset: 0x000EF764
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcKhr callback, [In] [Out] T1[,] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL4.DebugProcKhr,System.IntPtr), callback, ptr, GL.EntryPoints[103]);
				}
			}

			// Token: 0x060058C9 RID: 22729 RVA: 0x000F159C File Offset: 0x000EF79C
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcKhr callback, [In] [Out] T1[,,] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0, 0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL4.DebugProcKhr,System.IntPtr), callback, ptr, GL.EntryPoints[103]);
				}
			}

			// Token: 0x060058CA RID: 22730 RVA: 0x000F15D4 File Offset: 0x000EF7D4
			public unsafe static void DebugMessageCallback<T1>(DebugProcKhr callback, [In] [Out] ref T1 userParam) where T1 : struct
			{
				fixed (T1* ptr = &userParam)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL4.DebugProcKhr,System.IntPtr), callback, ptr, GL.EntryPoints[103]);
				}
			}

			// Token: 0x060058CB RID: 22731 RVA: 0x000F15F4 File Offset: 0x000EF7F4
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, int[] ids, bool enabled)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[106]);
				}
			}

			// Token: 0x060058CC RID: 22732 RVA: 0x000F1630 File Offset: 0x000EF830
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, ref int ids, bool enabled)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[106]);
				}
			}

			// Token: 0x060058CD RID: 22733 RVA: 0x000F1658 File Offset: 0x000EF858
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, int* ids, bool enabled)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[106]);
			}

			// Token: 0x060058CE RID: 22734 RVA: 0x000F1670 File Offset: 0x000EF870
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, uint[] ids, bool enabled)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[106]);
				}
			}

			// Token: 0x060058CF RID: 22735 RVA: 0x000F16AC File Offset: 0x000EF8AC
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, ref uint ids, bool enabled)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[106]);
				}
			}

			// Token: 0x060058D0 RID: 22736 RVA: 0x000F16D4 File Offset: 0x000EF8D4
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, uint* ids, bool enabled)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[106]);
			}

			// Token: 0x060058D1 RID: 22737 RVA: 0x000F16EC File Offset: 0x000EF8EC
			[CLSCompliant(false)]
			public static void DebugMessageInsert(All source, All type, int id, All severity, int length, string buf)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[109]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x060058D2 RID: 22738 RVA: 0x000F171C File Offset: 0x000EF91C
			[CLSCompliant(false)]
			public static void DebugMessageInsert(All source, All type, uint id, All severity, int length, string buf)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[109]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x060058D3 RID: 22739 RVA: 0x000F174C File Offset: 0x000EF94C
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] All[] sources, [Out] All[] types, [Out] int[] ids, [Out] All[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
			{
				fixed (All* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
				{
					All* ptr2 = ptr;
					fixed (All* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
					{
						All* ptr4 = ptr3;
						fixed (int* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
						{
							int* ptr6 = ptr5;
							fixed (All* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
							{
								All* ptr8 = ptr7;
								fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[211]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x060058D4 RID: 22740 RVA: 0x000F1804 File Offset: 0x000EFA04
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, out All sources, out All types, out int ids, out All severities, out int lengths, [Out] StringBuilder messageLog)
			{
				fixed (All* ptr = &sources)
				{
					All* ptr2 = ptr;
					fixed (All* ptr3 = &types)
					{
						All* ptr4 = ptr3;
						fixed (int* ptr5 = &ids)
						{
							int* ptr6 = ptr5;
							fixed (All* ptr7 = &severities)
							{
								All* ptr8 = ptr7;
								fixed (int* ptr9 = &lengths)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[211]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x060058D5 RID: 22741 RVA: 0x000F185C File Offset: 0x000EFA5C
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] All* sources, [Out] All* types, [Out] int* ids, [Out] All* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
				int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[211]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
				Marshal.FreeHGlobal(intPtr);
				return result;
			}

			// Token: 0x060058D6 RID: 22742 RVA: 0x000F18A0 File Offset: 0x000EFAA0
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] All[] sources, [Out] All[] types, [Out] uint[] ids, [Out] All[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
			{
				fixed (All* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
				{
					All* ptr2 = ptr;
					fixed (All* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
					{
						All* ptr4 = ptr3;
						fixed (uint* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
						{
							uint* ptr6 = ptr5;
							fixed (All* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
							{
								All* ptr8 = ptr7;
								fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[211]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x060058D7 RID: 22743 RVA: 0x000F1958 File Offset: 0x000EFB58
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, out All sources, out All types, out uint ids, out All severities, out int lengths, [Out] StringBuilder messageLog)
			{
				fixed (All* ptr = &sources)
				{
					All* ptr2 = ptr;
					fixed (All* ptr3 = &types)
					{
						All* ptr4 = ptr3;
						fixed (uint* ptr5 = &ids)
						{
							uint* ptr6 = ptr5;
							fixed (All* ptr7 = &severities)
							{
								All* ptr8 = ptr7;
								fixed (int* ptr9 = &lengths)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[211]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x060058D8 RID: 22744 RVA: 0x000F19B0 File Offset: 0x000EFBB0
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] All* sources, [Out] All* types, [Out] uint* ids, [Out] All* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
				int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[211]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
				Marshal.FreeHGlobal(intPtr);
				return result;
			}

			// Token: 0x060058D9 RID: 22745 RVA: 0x000F19F4 File Offset: 0x000EFBF4
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(All identifier, int name, int bufSize, [Out] int[] length, [Out] StringBuilder label)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[257]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060058DA RID: 22746 RVA: 0x000F1A48 File Offset: 0x000EFC48
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(All identifier, int name, int bufSize, out int length, [Out] StringBuilder label)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[257]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060058DB RID: 22747 RVA: 0x000F1A88 File Offset: 0x000EFC88
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(All identifier, int name, int bufSize, [Out] int* length, [Out] StringBuilder label)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, length, intPtr, GL.EntryPoints[257]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x060058DC RID: 22748 RVA: 0x000F1AC8 File Offset: 0x000EFCC8
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(All identifier, uint name, int bufSize, [Out] int[] length, [Out] StringBuilder label)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[257]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060058DD RID: 22749 RVA: 0x000F1B1C File Offset: 0x000EFD1C
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(All identifier, uint name, int bufSize, out int length, [Out] StringBuilder label)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[257]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060058DE RID: 22750 RVA: 0x000F1B5C File Offset: 0x000EFD5C
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(All identifier, uint name, int bufSize, [Out] int* length, [Out] StringBuilder label)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, length, intPtr, GL.EntryPoints[257]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x060058DF RID: 22751 RVA: 0x000F1B9C File Offset: 0x000EFD9C
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label)
			{
				fixed (int* ptr2 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, ptr3, intPtr, GL.EntryPoints[259]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060058E0 RID: 22752 RVA: 0x000F1BEC File Offset: 0x000EFDEC
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, out int length, [Out] StringBuilder label)
			{
				fixed (int* ptr2 = &length)
				{
					int* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, ptr3, intPtr, GL.EntryPoints[259]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060058E1 RID: 22753 RVA: 0x000F1C2C File Offset: 0x000EFE2C
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [Out] int* length, [Out] StringBuilder label)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, length, intPtr, GL.EntryPoints[259]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x060058E2 RID: 22754 RVA: 0x000F1C68 File Offset: 0x000EFE68
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[259]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x060058E3 RID: 22755 RVA: 0x000F1CCC File Offset: 0x000EFECC
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = &length)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[259]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x060058E4 RID: 22756 RVA: 0x000F1D20 File Offset: 0x000EFF20
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[259]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060058E5 RID: 22757 RVA: 0x000F1D70 File Offset: 0x000EFF70
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[259]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x060058E6 RID: 22758 RVA: 0x000F1DD8 File Offset: 0x000EFFD8
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = &length)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[259]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x060058E7 RID: 22759 RVA: 0x000F1E30 File Offset: 0x000F0030
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[259]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060058E8 RID: 22760 RVA: 0x000F1E84 File Offset: 0x000F0084
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[259]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x060058E9 RID: 22761 RVA: 0x000F1EF0 File Offset: 0x000F00F0
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = &length)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[259]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x060058EA RID: 22762 RVA: 0x000F1F48 File Offset: 0x000F0148
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[259]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060058EB RID: 22763 RVA: 0x000F1F9C File Offset: 0x000F019C
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = &ptr)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[259]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x060058EC RID: 22764 RVA: 0x000F1FF0 File Offset: 0x000F01F0
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = &ptr)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = &length)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[259]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x060058ED RID: 22765 RVA: 0x000F2030 File Offset: 0x000F0230
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = &ptr)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[259]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060058EE RID: 22766 RVA: 0x000F2070 File Offset: 0x000F0270
			public static void GetPointer(All pname, [Out] IntPtr @params)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, @params, GL.EntryPoints[261]);
			}

			// Token: 0x060058EF RID: 22767 RVA: 0x000F2084 File Offset: 0x000F0284
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T1>(All pname, [In] [Out] T1[] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[261]);
				}
			}

			// Token: 0x060058F0 RID: 22768 RVA: 0x000F20B8 File Offset: 0x000F02B8
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T1>(All pname, [In] [Out] T1[,] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[261]);
				}
			}

			// Token: 0x060058F1 RID: 22769 RVA: 0x000F20F0 File Offset: 0x000F02F0
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T1>(All pname, [In] [Out] T1[,,] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[261]);
				}
			}

			// Token: 0x060058F2 RID: 22770 RVA: 0x000F212C File Offset: 0x000F032C
			public unsafe static void GetPointer<T1>(All pname, [In] [Out] ref T1 @params) where T1 : struct
			{
				fixed (T1* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[261]);
				}
			}

			// Token: 0x060058F3 RID: 22771 RVA: 0x000F2150 File Offset: 0x000F0350
			[CLSCompliant(false)]
			public static void ObjectLabel(All identifier, int name, int length, string label)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), identifier, name, length, intPtr, GL.EntryPoints[378]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x060058F4 RID: 22772 RVA: 0x000F2180 File Offset: 0x000F0380
			[CLSCompliant(false)]
			public static void ObjectLabel(All identifier, uint name, int length, string label)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), identifier, name, length, intPtr, GL.EntryPoints[378]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x060058F5 RID: 22773 RVA: 0x000F21B0 File Offset: 0x000F03B0
			public static void ObjectPtrLabel(IntPtr ptr, int length, string label)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr, length, intPtr, GL.EntryPoints[380]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x060058F6 RID: 22774 RVA: 0x000F21E0 File Offset: 0x000F03E0
			[CLSCompliant(false)]
			public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[] ptr, int length, string label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
					calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[380]);
					BindingsBase.FreeStringPtr(intPtr);
				}
			}

			// Token: 0x060058F7 RID: 22775 RVA: 0x000F2224 File Offset: 0x000F0424
			[CLSCompliant(false)]
			public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int length, string label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
					calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[380]);
					BindingsBase.FreeStringPtr(intPtr);
				}
			}

			// Token: 0x060058F8 RID: 22776 RVA: 0x000F226C File Offset: 0x000F046C
			[CLSCompliant(false)]
			public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int length, string label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
					calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[380]);
					BindingsBase.FreeStringPtr(intPtr);
				}
			}

			// Token: 0x060058F9 RID: 22777 RVA: 0x000F22B4 File Offset: 0x000F04B4
			public unsafe static void ObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int length, string label) where T0 : struct
			{
				fixed (T0* ptr2 = &ptr)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
					calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[380]);
					BindingsBase.FreeStringPtr(intPtr);
				}
			}

			// Token: 0x060058FA RID: 22778 RVA: 0x000F22E4 File Offset: 0x000F04E4
			public static void PopDebugGroup()
			{
				calli(System.Void(), GL.EntryPoints[394]);
			}

			// Token: 0x060058FB RID: 22779 RVA: 0x000F22F8 File Offset: 0x000F04F8
			[CLSCompliant(false)]
			public static void PushDebugGroup(All source, int id, int length, string message)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(message);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), source, id, length, intPtr, GL.EntryPoints[452]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x060058FC RID: 22780 RVA: 0x000F2328 File Offset: 0x000F0528
			[CLSCompliant(false)]
			public static void PushDebugGroup(All source, uint id, int length, string message)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(message);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), source, id, length, intPtr, GL.EntryPoints[452]);
				BindingsBase.FreeStringPtr(intPtr);
			}
		}
	}
}
