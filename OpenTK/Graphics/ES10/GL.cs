using System;
using System.Runtime.InteropServices;
using System.Security;

namespace OpenTK.Graphics.ES10
{
	// Token: 0x020004D1 RID: 1233
	public sealed class GL
	{
		// Token: 0x0600308D RID: 12429 RVA: 0x00082BAC File Offset: 0x00080DAC
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glActiveTexture")]
		public static void ActiveTexture(All texture)
		{
			GL.Core.ActiveTexture(texture);
		}

		// Token: 0x0600308E RID: 12430 RVA: 0x00082BB4 File Offset: 0x00080DB4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glAlphaFunc")]
		public static void AlphaFunc(All func, float @ref)
		{
			GL.Core.AlphaFunc(func, @ref);
		}

		// Token: 0x0600308F RID: 12431 RVA: 0x00082BC0 File Offset: 0x00080DC0
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glAlphaFuncx")]
		public static void AlphaFuncx(All func, int @ref)
		{
			GL.Core.AlphaFuncx(func, @ref);
		}

		// Token: 0x06003090 RID: 12432 RVA: 0x00082BCC File Offset: 0x00080DCC
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glBindTexture")]
		public static void BindTexture(All target, int texture)
		{
			GL.Core.BindTexture(target, (uint)texture);
		}

		// Token: 0x06003091 RID: 12433 RVA: 0x00082BD8 File Offset: 0x00080DD8
		[CLSCompliant(false)]
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glBindTexture")]
		public static void BindTexture(All target, uint texture)
		{
			GL.Core.BindTexture(target, texture);
		}

		// Token: 0x06003092 RID: 12434 RVA: 0x00082BE4 File Offset: 0x00080DE4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glBlendFunc")]
		public static void BlendFunc(All sfactor, All dfactor)
		{
			GL.Core.BlendFunc(sfactor, dfactor);
		}

		// Token: 0x06003093 RID: 12435 RVA: 0x00082BF0 File Offset: 0x00080DF0
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glClear")]
		public static void Clear(int mask)
		{
			GL.Core.Clear((uint)mask);
		}

		// Token: 0x06003094 RID: 12436 RVA: 0x00082BF8 File Offset: 0x00080DF8
		[CLSCompliant(false)]
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glClear")]
		public static void Clear(uint mask)
		{
			GL.Core.Clear(mask);
		}

		// Token: 0x06003095 RID: 12437 RVA: 0x00082C00 File Offset: 0x00080E00
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glClearColor")]
		public static void ClearColor(float red, float green, float blue, float alpha)
		{
			GL.Core.ClearColor(red, green, blue, alpha);
		}

		// Token: 0x06003096 RID: 12438 RVA: 0x00082C10 File Offset: 0x00080E10
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glClearColorx")]
		public static void ClearColorx(int red, int green, int blue, int alpha)
		{
			GL.Core.ClearColorx(red, green, blue, alpha);
		}

		// Token: 0x06003097 RID: 12439 RVA: 0x00082C1C File Offset: 0x00080E1C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glClearDepthf")]
		public static void ClearDepth(float depth)
		{
			GL.Core.ClearDepthf(depth);
		}

		// Token: 0x06003098 RID: 12440 RVA: 0x00082C28 File Offset: 0x00080E28
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glClearDepthx")]
		public static void ClearDepthx(int depth)
		{
			GL.Core.ClearDepthx(depth);
		}

		// Token: 0x06003099 RID: 12441 RVA: 0x00082C30 File Offset: 0x00080E30
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glClearStencil")]
		public static void ClearStencil(int s)
		{
			GL.Core.ClearStencil(s);
		}

		// Token: 0x0600309A RID: 12442 RVA: 0x00082C38 File Offset: 0x00080E38
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glClientActiveTexture")]
		public static void ClientActiveTexture(All texture)
		{
			GL.Core.ClientActiveTexture(texture);
		}

		// Token: 0x0600309B RID: 12443 RVA: 0x00082C40 File Offset: 0x00080E40
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glColor4f")]
		public static void Color4(float red, float green, float blue, float alpha)
		{
			GL.Core.Color4f(red, green, blue, alpha);
		}

		// Token: 0x0600309C RID: 12444 RVA: 0x00082C50 File Offset: 0x00080E50
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glColor4x")]
		public static void Color4x(int red, int green, int blue, int alpha)
		{
			GL.Core.Color4x(red, green, blue, alpha);
		}

		// Token: 0x0600309D RID: 12445 RVA: 0x00082C5C File Offset: 0x00080E5C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glColorMask")]
		public static void ColorMask(bool red, bool green, bool blue, bool alpha)
		{
			GL.Core.ColorMask(red, green, blue, alpha);
		}

		// Token: 0x0600309E RID: 12446 RVA: 0x00082C68 File Offset: 0x00080E68
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glColorPointer")]
		public static void ColorPointer(int size, All type, int stride, IntPtr pointer)
		{
			GL.Core.ColorPointer(size, type, stride, pointer);
		}

		// Token: 0x0600309F RID: 12447 RVA: 0x00082C74 File Offset: 0x00080E74
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glColorPointer")]
		public static void ColorPointer<T3>(int size, All type, int stride, [In] [Out] T3[] pointer) where T3 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				GL.Core.ColorPointer(size, type, stride, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x060030A0 RID: 12448 RVA: 0x00082CB4 File Offset: 0x00080EB4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glColorPointer")]
		public static void ColorPointer<T3>(int size, All type, int stride, [In] [Out] T3[,] pointer) where T3 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				GL.Core.ColorPointer(size, type, stride, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x060030A1 RID: 12449 RVA: 0x00082CF4 File Offset: 0x00080EF4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glColorPointer")]
		public static void ColorPointer<T3>(int size, All type, int stride, [In] [Out] T3[,,] pointer) where T3 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				GL.Core.ColorPointer(size, type, stride, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x060030A2 RID: 12450 RVA: 0x00082D34 File Offset: 0x00080F34
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glColorPointer")]
		public static void ColorPointer<T3>(int size, All type, int stride, [In] [Out] ref T3 pointer) where T3 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				GL.Core.ColorPointer(size, type, stride, gchandle.AddrOfPinnedObject());
				pointer = (T3)((object)gchandle.Target);
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x060030A3 RID: 12451 RVA: 0x00082D90 File Offset: 0x00080F90
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
		public static void CompressedTexImage2D(All target, int level, All internalformat, int width, int height, int border, int imageSize, IntPtr data)
		{
			GL.Core.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
		}

		// Token: 0x060030A4 RID: 12452 RVA: 0x00082DA4 File Offset: 0x00080FA4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
		public static void CompressedTexImage2D<T7>(All target, int level, All internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[] data) where T7 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(data, GCHandleType.Pinned);
			try
			{
				GL.Core.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x060030A5 RID: 12453 RVA: 0x00082DEC File Offset: 0x00080FEC
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
		public static void CompressedTexImage2D<T7>(All target, int level, All internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[,] data) where T7 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(data, GCHandleType.Pinned);
			try
			{
				GL.Core.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x060030A6 RID: 12454 RVA: 0x00082E34 File Offset: 0x00081034
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
		public static void CompressedTexImage2D<T7>(All target, int level, All internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[,,] data) where T7 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(data, GCHandleType.Pinned);
			try
			{
				GL.Core.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x060030A7 RID: 12455 RVA: 0x00082E7C File Offset: 0x0008107C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glCompressedTexImage2D")]
		public static void CompressedTexImage2D<T7>(All target, int level, All internalformat, int width, int height, int border, int imageSize, [In] [Out] ref T7 data) where T7 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(data, GCHandleType.Pinned);
			try
			{
				GL.Core.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gchandle.AddrOfPinnedObject());
				data = (T7)((object)gchandle.Target);
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x060030A8 RID: 12456 RVA: 0x00082EE0 File Offset: 0x000810E0
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
		public static void CompressedTexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, IntPtr data)
		{
			GL.Core.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
		}

		// Token: 0x060030A9 RID: 12457 RVA: 0x00082F00 File Offset: 0x00081100
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
		public static void CompressedTexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, [In] [Out] T8[] data) where T8 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(data, GCHandleType.Pinned);
			try
			{
				GL.Core.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x060030AA RID: 12458 RVA: 0x00082F48 File Offset: 0x00081148
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
		public static void CompressedTexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, [In] [Out] T8[,] data) where T8 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(data, GCHandleType.Pinned);
			try
			{
				GL.Core.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x060030AB RID: 12459 RVA: 0x00082F90 File Offset: 0x00081190
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
		public static void CompressedTexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, [In] [Out] T8[,,] data) where T8 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(data, GCHandleType.Pinned);
			try
			{
				GL.Core.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x060030AC RID: 12460 RVA: 0x00082FD8 File Offset: 0x000811D8
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glCompressedTexSubImage2D")]
		public static void CompressedTexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, [In] [Out] ref T8 data) where T8 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(data, GCHandleType.Pinned);
			try
			{
				GL.Core.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gchandle.AddrOfPinnedObject());
				data = (T8)((object)gchandle.Target);
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x060030AD RID: 12461 RVA: 0x00083040 File Offset: 0x00081240
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glCopyTexImage2D")]
		public static void CopyTexImage2D(All target, int level, All internalformat, int x, int y, int width, int height, int border)
		{
			GL.Core.CopyTexImage2D(target, level, internalformat, x, y, width, height, border);
		}

		// Token: 0x060030AE RID: 12462 RVA: 0x00083054 File Offset: 0x00081254
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glCopyTexSubImage2D")]
		public static void CopyTexSubImage2D(All target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
		{
			GL.Core.CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
		}

		// Token: 0x060030AF RID: 12463 RVA: 0x00083068 File Offset: 0x00081268
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glCullFace")]
		public static void CullFace(All mode)
		{
			GL.Core.CullFace(mode);
		}

		// Token: 0x060030B0 RID: 12464 RVA: 0x00083070 File Offset: 0x00081270
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDeleteTextures")]
		public unsafe static void DeleteTextures(int n, int[] textures)
		{
			fixed (int* ptr = textures)
			{
				GL.Core.DeleteTextures(n, (uint*)ptr);
			}
		}

		// Token: 0x060030B1 RID: 12465 RVA: 0x000830A0 File Offset: 0x000812A0
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDeleteTextures")]
		public unsafe static void DeleteTextures(int n, ref int textures)
		{
			fixed (int* ptr = &textures)
			{
				GL.Core.DeleteTextures(n, (uint*)ptr);
			}
		}

		// Token: 0x060030B2 RID: 12466 RVA: 0x000830BC File Offset: 0x000812BC
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDeleteTextures")]
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, int* textures)
		{
			GL.Core.DeleteTextures(n, (uint*)textures);
		}

		// Token: 0x060030B3 RID: 12467 RVA: 0x000830C8 File Offset: 0x000812C8
		[CLSCompliant(false)]
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDeleteTextures")]
		public unsafe static void DeleteTextures(int n, uint[] textures)
		{
			fixed (uint* ptr = textures)
			{
				GL.Core.DeleteTextures(n, ptr);
			}
		}

		// Token: 0x060030B4 RID: 12468 RVA: 0x000830F8 File Offset: 0x000812F8
		[CLSCompliant(false)]
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDeleteTextures")]
		public unsafe static void DeleteTextures(int n, ref uint textures)
		{
			fixed (uint* ptr = &textures)
			{
				GL.Core.DeleteTextures(n, ptr);
			}
		}

		// Token: 0x060030B5 RID: 12469 RVA: 0x00083114 File Offset: 0x00081314
		[CLSCompliant(false)]
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDeleteTextures")]
		public unsafe static void DeleteTextures(int n, uint* textures)
		{
			GL.Core.DeleteTextures(n, textures);
		}

		// Token: 0x060030B6 RID: 12470 RVA: 0x00083120 File Offset: 0x00081320
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDepthFunc")]
		public static void DepthFunc(All func)
		{
			GL.Core.DepthFunc(func);
		}

		// Token: 0x060030B7 RID: 12471 RVA: 0x00083128 File Offset: 0x00081328
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDepthMask")]
		public static void DepthMask(bool flag)
		{
			GL.Core.DepthMask(flag);
		}

		// Token: 0x060030B8 RID: 12472 RVA: 0x00083130 File Offset: 0x00081330
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDepthRangef")]
		public static void DepthRange(float zNear, float zFar)
		{
			GL.Core.DepthRangef(zNear, zFar);
		}

		// Token: 0x060030B9 RID: 12473 RVA: 0x0008313C File Offset: 0x0008133C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDepthRangex")]
		public static void DepthRangex(int zNear, int zFar)
		{
			GL.Core.DepthRangex(zNear, zFar);
		}

		// Token: 0x060030BA RID: 12474 RVA: 0x00083148 File Offset: 0x00081348
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDisable")]
		public static void Disable(All cap)
		{
			GL.Core.Disable(cap);
		}

		// Token: 0x060030BB RID: 12475 RVA: 0x00083150 File Offset: 0x00081350
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDisableClientState")]
		public static void DisableClientState(All array)
		{
			GL.Core.DisableClientState(array);
		}

		// Token: 0x060030BC RID: 12476 RVA: 0x00083158 File Offset: 0x00081358
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDrawArrays")]
		public static void DrawArrays(All mode, int first, int count)
		{
			GL.Core.DrawArrays(mode, first, count);
		}

		// Token: 0x060030BD RID: 12477 RVA: 0x00083164 File Offset: 0x00081364
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDrawElements")]
		public static void DrawElements(All mode, int count, All type, IntPtr indices)
		{
			GL.Core.DrawElements(mode, count, type, indices);
		}

		// Token: 0x060030BE RID: 12478 RVA: 0x00083170 File Offset: 0x00081370
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDrawElements")]
		public static void DrawElements<T3>(All mode, int count, All type, [In] [Out] T3[] indices) where T3 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try
			{
				GL.Core.DrawElements(mode, count, type, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x060030BF RID: 12479 RVA: 0x000831B0 File Offset: 0x000813B0
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDrawElements")]
		public static void DrawElements<T3>(All mode, int count, All type, [In] [Out] T3[,] indices) where T3 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try
			{
				GL.Core.DrawElements(mode, count, type, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x060030C0 RID: 12480 RVA: 0x000831F0 File Offset: 0x000813F0
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDrawElements")]
		public static void DrawElements<T3>(All mode, int count, All type, [In] [Out] T3[,,] indices) where T3 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try
			{
				GL.Core.DrawElements(mode, count, type, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x060030C1 RID: 12481 RVA: 0x00083230 File Offset: 0x00081430
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glDrawElements")]
		public static void DrawElements<T3>(All mode, int count, All type, [In] [Out] ref T3 indices) where T3 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try
			{
				GL.Core.DrawElements(mode, count, type, gchandle.AddrOfPinnedObject());
				indices = (T3)((object)gchandle.Target);
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x060030C2 RID: 12482 RVA: 0x0008328C File Offset: 0x0008148C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glEnable")]
		public static void Enable(All cap)
		{
			GL.Core.Enable(cap);
		}

		// Token: 0x060030C3 RID: 12483 RVA: 0x00083294 File Offset: 0x00081494
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glEnableClientState")]
		public static void EnableClientState(All array)
		{
			GL.Core.EnableClientState(array);
		}

		// Token: 0x060030C4 RID: 12484 RVA: 0x0008329C File Offset: 0x0008149C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glFinish")]
		public static void Finish()
		{
			GL.Core.Finish();
		}

		// Token: 0x060030C5 RID: 12485 RVA: 0x000832A4 File Offset: 0x000814A4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glFlush")]
		public static void Flush()
		{
			GL.Core.Flush();
		}

		// Token: 0x060030C6 RID: 12486 RVA: 0x000832AC File Offset: 0x000814AC
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glFogf")]
		public static void Fog(All pname, float param)
		{
			GL.Core.Fogf(pname, param);
		}

		// Token: 0x060030C7 RID: 12487 RVA: 0x000832B8 File Offset: 0x000814B8
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glFogfv")]
		public unsafe static void Fog(All pname, float[] @params)
		{
			fixed (float* ptr = @params)
			{
				GL.Core.Fogfv(pname, ptr);
			}
		}

		// Token: 0x060030C8 RID: 12488 RVA: 0x000832E8 File Offset: 0x000814E8
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glFogfv")]
		[CLSCompliant(false)]
		public unsafe static void Fog(All pname, float* @params)
		{
			GL.Core.Fogfv(pname, @params);
		}

		// Token: 0x060030C9 RID: 12489 RVA: 0x000832F4 File Offset: 0x000814F4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glFogx")]
		public static void Fogx(All pname, int param)
		{
			GL.Core.Fogx(pname, param);
		}

		// Token: 0x060030CA RID: 12490 RVA: 0x00083300 File Offset: 0x00081500
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glFogxv")]
		public unsafe static void Fogx(All pname, int[] @params)
		{
			fixed (int* ptr = @params)
			{
				GL.Core.Fogxv(pname, ptr);
			}
		}

		// Token: 0x060030CB RID: 12491 RVA: 0x00083330 File Offset: 0x00081530
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glFogxv")]
		[CLSCompliant(false)]
		public unsafe static void Fogx(All pname, int* @params)
		{
			GL.Core.Fogxv(pname, @params);
		}

		// Token: 0x060030CC RID: 12492 RVA: 0x0008333C File Offset: 0x0008153C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glFrontFace")]
		public static void FrontFace(All mode)
		{
			GL.Core.FrontFace(mode);
		}

		// Token: 0x060030CD RID: 12493 RVA: 0x00083344 File Offset: 0x00081544
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glFrustumf")]
		public static void Frustum(float left, float right, float bottom, float top, float zNear, float zFar)
		{
			GL.Core.Frustumf(left, right, bottom, top, zNear, zFar);
		}

		// Token: 0x060030CE RID: 12494 RVA: 0x0008335C File Offset: 0x0008155C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glFrustumx")]
		public static void Frustumx(int left, int right, int bottom, int top, int zNear, int zFar)
		{
			GL.Core.Frustumx(left, right, bottom, top, zNear, zFar);
		}

		// Token: 0x060030CF RID: 12495 RVA: 0x0008336C File Offset: 0x0008156C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glGenTextures")]
		public unsafe static void GenTextures(int n, int[] textures)
		{
			fixed (int* ptr = textures)
			{
				GL.Core.GenTextures(n, (uint*)ptr);
			}
		}

		// Token: 0x060030D0 RID: 12496 RVA: 0x0008339C File Offset: 0x0008159C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glGenTextures")]
		public unsafe static void GenTextures(int n, ref int textures)
		{
			fixed (int* ptr = &textures)
			{
				GL.Core.GenTextures(n, (uint*)ptr);
			}
		}

		// Token: 0x060030D1 RID: 12497 RVA: 0x000833B8 File Offset: 0x000815B8
		[CLSCompliant(false)]
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glGenTextures")]
		public unsafe static void GenTextures(int n, int* textures)
		{
			GL.Core.GenTextures(n, (uint*)textures);
		}

		// Token: 0x060030D2 RID: 12498 RVA: 0x000833C4 File Offset: 0x000815C4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glGenTextures")]
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, uint[] textures)
		{
			fixed (uint* ptr = textures)
			{
				GL.Core.GenTextures(n, ptr);
			}
		}

		// Token: 0x060030D3 RID: 12499 RVA: 0x000833F4 File Offset: 0x000815F4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glGenTextures")]
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, ref uint textures)
		{
			fixed (uint* ptr = &textures)
			{
				GL.Core.GenTextures(n, ptr);
			}
		}

		// Token: 0x060030D4 RID: 12500 RVA: 0x00083410 File Offset: 0x00081610
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glGenTextures")]
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, uint* textures)
		{
			GL.Core.GenTextures(n, textures);
		}

		// Token: 0x060030D5 RID: 12501 RVA: 0x0008341C File Offset: 0x0008161C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glGetError")]
		public static All GetError()
		{
			return GL.Core.GetError();
		}

		// Token: 0x060030D6 RID: 12502 RVA: 0x00083424 File Offset: 0x00081624
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glGetIntegerv")]
		public unsafe static void GetInteger(All pname, int[] @params)
		{
			fixed (int* ptr = @params)
			{
				GL.Core.GetIntegerv(pname, ptr);
			}
		}

		// Token: 0x060030D7 RID: 12503 RVA: 0x00083454 File Offset: 0x00081654
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glGetIntegerv")]
		public unsafe static void GetInteger(All pname, ref int @params)
		{
			fixed (int* ptr = &@params)
			{
				GL.Core.GetIntegerv(pname, ptr);
			}
		}

		// Token: 0x060030D8 RID: 12504 RVA: 0x00083470 File Offset: 0x00081670
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glGetIntegerv")]
		[CLSCompliant(false)]
		public unsafe static void GetInteger(All pname, int* @params)
		{
			GL.Core.GetIntegerv(pname, @params);
		}

		// Token: 0x060030D9 RID: 12505 RVA: 0x0008347C File Offset: 0x0008167C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glGetString")]
		[CLSCompliant(false)]
		public unsafe static string GetString(All name)
		{
			return new string((sbyte*)((void*)GL.Core.GetString(name)));
		}

		// Token: 0x060030DA RID: 12506 RVA: 0x00083490 File Offset: 0x00081690
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glHint")]
		public static void Hint(All target, All mode)
		{
			GL.Core.Hint(target, mode);
		}

		// Token: 0x060030DB RID: 12507 RVA: 0x0008349C File Offset: 0x0008169C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLightf")]
		public static void Light(All light, All pname, float param)
		{
			GL.Core.Lightf(light, pname, param);
		}

		// Token: 0x060030DC RID: 12508 RVA: 0x000834A8 File Offset: 0x000816A8
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLightfv")]
		public unsafe static void Light(All light, All pname, float[] @params)
		{
			fixed (float* ptr = @params)
			{
				GL.Core.Lightfv(light, pname, ptr);
			}
		}

		// Token: 0x060030DD RID: 12509 RVA: 0x000834D8 File Offset: 0x000816D8
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLightfv")]
		[CLSCompliant(false)]
		public unsafe static void Light(All light, All pname, float* @params)
		{
			GL.Core.Lightfv(light, pname, @params);
		}

		// Token: 0x060030DE RID: 12510 RVA: 0x000834E4 File Offset: 0x000816E4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLightModelf")]
		public static void LightModel(All pname, float param)
		{
			GL.Core.LightModelf(pname, param);
		}

		// Token: 0x060030DF RID: 12511 RVA: 0x000834F0 File Offset: 0x000816F0
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLightModelfv")]
		public unsafe static void LightModel(All pname, float[] @params)
		{
			fixed (float* ptr = @params)
			{
				GL.Core.LightModelfv(pname, ptr);
			}
		}

		// Token: 0x060030E0 RID: 12512 RVA: 0x00083520 File Offset: 0x00081720
		[CLSCompliant(false)]
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLightModelfv")]
		public unsafe static void LightModel(All pname, float* @params)
		{
			GL.Core.LightModelfv(pname, @params);
		}

		// Token: 0x060030E1 RID: 12513 RVA: 0x0008352C File Offset: 0x0008172C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLightModelx")]
		public static void LightModelx(All pname, int param)
		{
			GL.Core.LightModelx(pname, param);
		}

		// Token: 0x060030E2 RID: 12514 RVA: 0x00083538 File Offset: 0x00081738
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLightModelxv")]
		public unsafe static void LightModelx(All pname, int[] @params)
		{
			fixed (int* ptr = @params)
			{
				GL.Core.LightModelxv(pname, ptr);
			}
		}

		// Token: 0x060030E3 RID: 12515 RVA: 0x00083568 File Offset: 0x00081768
		[CLSCompliant(false)]
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLightModelxv")]
		public unsafe static void LightModelx(All pname, int* @params)
		{
			GL.Core.LightModelxv(pname, @params);
		}

		// Token: 0x060030E4 RID: 12516 RVA: 0x00083574 File Offset: 0x00081774
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLightx")]
		public static void Lightx(All light, All pname, int param)
		{
			GL.Core.Lightx(light, pname, param);
		}

		// Token: 0x060030E5 RID: 12517 RVA: 0x00083580 File Offset: 0x00081780
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLightxv")]
		public unsafe static void Lightx(All light, All pname, int[] @params)
		{
			fixed (int* ptr = @params)
			{
				GL.Core.Lightxv(light, pname, ptr);
			}
		}

		// Token: 0x060030E6 RID: 12518 RVA: 0x000835B0 File Offset: 0x000817B0
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLightxv")]
		[CLSCompliant(false)]
		public unsafe static void Lightx(All light, All pname, int* @params)
		{
			GL.Core.Lightxv(light, pname, @params);
		}

		// Token: 0x060030E7 RID: 12519 RVA: 0x000835BC File Offset: 0x000817BC
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLineWidth")]
		public static void LineWidth(float width)
		{
			GL.Core.LineWidth(width);
		}

		// Token: 0x060030E8 RID: 12520 RVA: 0x000835C8 File Offset: 0x000817C8
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLineWidthx")]
		public static void LineWidthx(int width)
		{
			GL.Core.LineWidthx(width);
		}

		// Token: 0x060030E9 RID: 12521 RVA: 0x000835D0 File Offset: 0x000817D0
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLoadIdentity")]
		public static void LoadIdentity()
		{
			GL.Core.LoadIdentity();
		}

		// Token: 0x060030EA RID: 12522 RVA: 0x000835D8 File Offset: 0x000817D8
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLoadMatrixf")]
		public unsafe static void LoadMatrix(float[] m)
		{
			fixed (float* ptr = m)
			{
				GL.Core.LoadMatrixf(ptr);
			}
		}

		// Token: 0x060030EB RID: 12523 RVA: 0x00083608 File Offset: 0x00081808
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLoadMatrixf")]
		public unsafe static void LoadMatrix(ref float m)
		{
			fixed (float* ptr = &m)
			{
				GL.Core.LoadMatrixf(ptr);
			}
		}

		// Token: 0x060030EC RID: 12524 RVA: 0x00083624 File Offset: 0x00081824
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLoadMatrixf")]
		[CLSCompliant(false)]
		public unsafe static void LoadMatrix(float* m)
		{
			GL.Core.LoadMatrixf(m);
		}

		// Token: 0x060030ED RID: 12525 RVA: 0x0008362C File Offset: 0x0008182C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLoadMatrixx")]
		public unsafe static void LoadMatrixx(int[] m)
		{
			fixed (int* ptr = m)
			{
				GL.Core.LoadMatrixx(ptr);
			}
		}

		// Token: 0x060030EE RID: 12526 RVA: 0x0008365C File Offset: 0x0008185C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLoadMatrixx")]
		public unsafe static void LoadMatrixx(ref int m)
		{
			fixed (int* ptr = &m)
			{
				GL.Core.LoadMatrixx(ptr);
			}
		}

		// Token: 0x060030EF RID: 12527 RVA: 0x00083678 File Offset: 0x00081878
		[CLSCompliant(false)]
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLoadMatrixx")]
		public unsafe static void LoadMatrixx(int* m)
		{
			GL.Core.LoadMatrixx(m);
		}

		// Token: 0x060030F0 RID: 12528 RVA: 0x00083680 File Offset: 0x00081880
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glLogicOp")]
		public static void LogicOp(All opcode)
		{
			GL.Core.LogicOp(opcode);
		}

		// Token: 0x060030F1 RID: 12529 RVA: 0x00083688 File Offset: 0x00081888
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glMaterialf")]
		public static void Material(All face, All pname, float param)
		{
			GL.Core.Materialf(face, pname, param);
		}

		// Token: 0x060030F2 RID: 12530 RVA: 0x00083694 File Offset: 0x00081894
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glMaterialfv")]
		public unsafe static void Material(All face, All pname, float[] @params)
		{
			fixed (float* ptr = @params)
			{
				GL.Core.Materialfv(face, pname, ptr);
			}
		}

		// Token: 0x060030F3 RID: 12531 RVA: 0x000836C4 File Offset: 0x000818C4
		[CLSCompliant(false)]
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glMaterialfv")]
		public unsafe static void Material(All face, All pname, float* @params)
		{
			GL.Core.Materialfv(face, pname, @params);
		}

		// Token: 0x060030F4 RID: 12532 RVA: 0x000836D0 File Offset: 0x000818D0
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glMaterialx")]
		public static void Materialx(All face, All pname, int param)
		{
			GL.Core.Materialx(face, pname, param);
		}

		// Token: 0x060030F5 RID: 12533 RVA: 0x000836DC File Offset: 0x000818DC
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glMaterialxv")]
		public unsafe static void Materialx(All face, All pname, int[] @params)
		{
			fixed (int* ptr = @params)
			{
				GL.Core.Materialxv(face, pname, ptr);
			}
		}

		// Token: 0x060030F6 RID: 12534 RVA: 0x0008370C File Offset: 0x0008190C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glMaterialxv")]
		[CLSCompliant(false)]
		public unsafe static void Materialx(All face, All pname, int* @params)
		{
			GL.Core.Materialxv(face, pname, @params);
		}

		// Token: 0x060030F7 RID: 12535 RVA: 0x00083718 File Offset: 0x00081918
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glMatrixMode")]
		public static void MatrixMode(All mode)
		{
			GL.Core.MatrixMode(mode);
		}

		// Token: 0x060030F8 RID: 12536 RVA: 0x00083720 File Offset: 0x00081920
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glMultiTexCoord4f")]
		public static void MultiTexCoord4(All target, float s, float t, float r, float q)
		{
			GL.Core.MultiTexCoord4f(target, s, t, r, q);
		}

		// Token: 0x060030F9 RID: 12537 RVA: 0x00083734 File Offset: 0x00081934
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glMultiTexCoord4x")]
		public static void MultiTexCoord4x(All target, int s, int t, int r, int q)
		{
			GL.Core.MultiTexCoord4x(target, s, t, r, q);
		}

		// Token: 0x060030FA RID: 12538 RVA: 0x00083744 File Offset: 0x00081944
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glMultMatrixf")]
		public unsafe static void MultMatrix(float[] m)
		{
			fixed (float* ptr = m)
			{
				GL.Core.MultMatrixf(ptr);
			}
		}

		// Token: 0x060030FB RID: 12539 RVA: 0x00083774 File Offset: 0x00081974
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glMultMatrixf")]
		public unsafe static void MultMatrix(ref float m)
		{
			fixed (float* ptr = &m)
			{
				GL.Core.MultMatrixf(ptr);
			}
		}

		// Token: 0x060030FC RID: 12540 RVA: 0x00083790 File Offset: 0x00081990
		[CLSCompliant(false)]
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glMultMatrixf")]
		public unsafe static void MultMatrix(float* m)
		{
			GL.Core.MultMatrixf(m);
		}

		// Token: 0x060030FD RID: 12541 RVA: 0x00083798 File Offset: 0x00081998
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glMultMatrixx")]
		public unsafe static void MultMatrixx(int[] m)
		{
			fixed (int* ptr = m)
			{
				GL.Core.MultMatrixx(ptr);
			}
		}

		// Token: 0x060030FE RID: 12542 RVA: 0x000837C8 File Offset: 0x000819C8
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glMultMatrixx")]
		public unsafe static void MultMatrixx(ref int m)
		{
			fixed (int* ptr = &m)
			{
				GL.Core.MultMatrixx(ptr);
			}
		}

		// Token: 0x060030FF RID: 12543 RVA: 0x000837E4 File Offset: 0x000819E4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glMultMatrixx")]
		[CLSCompliant(false)]
		public unsafe static void MultMatrixx(int* m)
		{
			GL.Core.MultMatrixx(m);
		}

		// Token: 0x06003100 RID: 12544 RVA: 0x000837EC File Offset: 0x000819EC
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glNormal3f")]
		public static void Normal3(float nx, float ny, float nz)
		{
			GL.Core.Normal3f(nx, ny, nz);
		}

		// Token: 0x06003101 RID: 12545 RVA: 0x000837FC File Offset: 0x000819FC
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glNormal3x")]
		public static void Normal3x(int nx, int ny, int nz)
		{
			GL.Core.Normal3x(nx, ny, nz);
		}

		// Token: 0x06003102 RID: 12546 RVA: 0x00083808 File Offset: 0x00081A08
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glNormalPointer")]
		public static void NormalPointer(All type, int stride, IntPtr pointer)
		{
			GL.Core.NormalPointer(type, stride, pointer);
		}

		// Token: 0x06003103 RID: 12547 RVA: 0x00083814 File Offset: 0x00081A14
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glNormalPointer")]
		public static void NormalPointer<T2>(All type, int stride, [In] [Out] T2[] pointer) where T2 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				GL.Core.NormalPointer(type, stride, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003104 RID: 12548 RVA: 0x00083854 File Offset: 0x00081A54
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glNormalPointer")]
		public static void NormalPointer<T2>(All type, int stride, [In] [Out] T2[,] pointer) where T2 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				GL.Core.NormalPointer(type, stride, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003105 RID: 12549 RVA: 0x00083894 File Offset: 0x00081A94
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glNormalPointer")]
		public static void NormalPointer<T2>(All type, int stride, [In] [Out] T2[,,] pointer) where T2 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				GL.Core.NormalPointer(type, stride, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003106 RID: 12550 RVA: 0x000838D4 File Offset: 0x00081AD4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glNormalPointer")]
		public static void NormalPointer<T2>(All type, int stride, [In] [Out] ref T2 pointer) where T2 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				GL.Core.NormalPointer(type, stride, gchandle.AddrOfPinnedObject());
				pointer = (T2)((object)gchandle.Target);
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003107 RID: 12551 RVA: 0x00083930 File Offset: 0x00081B30
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glOrthof")]
		public static void Ortho(float left, float right, float bottom, float top, float zNear, float zFar)
		{
			GL.Core.Orthof(left, right, bottom, top, zNear, zFar);
		}

		// Token: 0x06003108 RID: 12552 RVA: 0x00083948 File Offset: 0x00081B48
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glOrthox")]
		public static void Orthox(int left, int right, int bottom, int top, int zNear, int zFar)
		{
			GL.Core.Orthox(left, right, bottom, top, zNear, zFar);
		}

		// Token: 0x06003109 RID: 12553 RVA: 0x00083958 File Offset: 0x00081B58
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glPixelStorei")]
		public static void PixelStore(All pname, int param)
		{
			GL.Core.PixelStorei(pname, param);
		}

		// Token: 0x0600310A RID: 12554 RVA: 0x00083964 File Offset: 0x00081B64
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glPointSize")]
		public static void PointSize(float size)
		{
			GL.Core.PointSize(size);
		}

		// Token: 0x0600310B RID: 12555 RVA: 0x00083970 File Offset: 0x00081B70
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glPointSizex")]
		public static void PointSizex(int size)
		{
			GL.Core.PointSizex(size);
		}

		// Token: 0x0600310C RID: 12556 RVA: 0x00083978 File Offset: 0x00081B78
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glPolygonOffset")]
		public static void PolygonOffset(float factor, float units)
		{
			GL.Core.PolygonOffset(factor, units);
		}

		// Token: 0x0600310D RID: 12557 RVA: 0x00083984 File Offset: 0x00081B84
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glPolygonOffsetx")]
		public static void PolygonOffsetx(int factor, int units)
		{
			GL.Core.PolygonOffsetx(factor, units);
		}

		// Token: 0x0600310E RID: 12558 RVA: 0x00083990 File Offset: 0x00081B90
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glPopMatrix")]
		public static void PopMatrix()
		{
			GL.Core.PopMatrix();
		}

		// Token: 0x0600310F RID: 12559 RVA: 0x00083998 File Offset: 0x00081B98
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glPushMatrix")]
		public static void PushMatrix()
		{
			GL.Core.PushMatrix();
		}

		// Token: 0x06003110 RID: 12560 RVA: 0x000839A0 File Offset: 0x00081BA0
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glReadPixels")]
		public static void ReadPixels(int x, int y, int width, int height, All format, All type, IntPtr pixels)
		{
			GL.Core.ReadPixels(x, y, width, height, format, type, pixels);
		}

		// Token: 0x06003111 RID: 12561 RVA: 0x000839B4 File Offset: 0x00081BB4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glReadPixels")]
		public static void ReadPixels<T6>(int x, int y, int width, int height, All format, All type, [In] [Out] T6[] pixels) where T6 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try
			{
				GL.Core.ReadPixels(x, y, width, height, format, type, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003112 RID: 12562 RVA: 0x000839F8 File Offset: 0x00081BF8
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glReadPixels")]
		public static void ReadPixels<T6>(int x, int y, int width, int height, All format, All type, [In] [Out] T6[,] pixels) where T6 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try
			{
				GL.Core.ReadPixels(x, y, width, height, format, type, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003113 RID: 12563 RVA: 0x00083A3C File Offset: 0x00081C3C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glReadPixels")]
		public static void ReadPixels<T6>(int x, int y, int width, int height, All format, All type, [In] [Out] T6[,,] pixels) where T6 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try
			{
				GL.Core.ReadPixels(x, y, width, height, format, type, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003114 RID: 12564 RVA: 0x00083A80 File Offset: 0x00081C80
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glReadPixels")]
		public static void ReadPixels<T6>(int x, int y, int width, int height, All format, All type, [In] [Out] ref T6 pixels) where T6 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try
			{
				GL.Core.ReadPixels(x, y, width, height, format, type, gchandle.AddrOfPinnedObject());
				pixels = (T6)((object)gchandle.Target);
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003115 RID: 12565 RVA: 0x00083AE4 File Offset: 0x00081CE4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glRotatef")]
		public static void Rotate(float angle, float x, float y, float z)
		{
			GL.Core.Rotatef(angle, x, y, z);
		}

		// Token: 0x06003116 RID: 12566 RVA: 0x00083AF4 File Offset: 0x00081CF4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glRotatex")]
		public static void Rotatex(int angle, int x, int y, int z)
		{
			GL.Core.Rotatex(angle, x, y, z);
		}

		// Token: 0x06003117 RID: 12567 RVA: 0x00083B00 File Offset: 0x00081D00
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glSampleCoverage")]
		public static void SampleCoverage(float value, bool invert)
		{
			GL.Core.SampleCoverage(value, invert);
		}

		// Token: 0x06003118 RID: 12568 RVA: 0x00083B0C File Offset: 0x00081D0C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glSampleCoveragex")]
		public static void SampleCoveragex(int value, bool invert)
		{
			GL.Core.SampleCoveragex(value, invert);
		}

		// Token: 0x06003119 RID: 12569 RVA: 0x00083B18 File Offset: 0x00081D18
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glScalef")]
		public static void Scale(float x, float y, float z)
		{
			GL.Core.Scalef(x, y, z);
		}

		// Token: 0x0600311A RID: 12570 RVA: 0x00083B28 File Offset: 0x00081D28
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glScalex")]
		public static void Scalex(int x, int y, int z)
		{
			GL.Core.Scalex(x, y, z);
		}

		// Token: 0x0600311B RID: 12571 RVA: 0x00083B34 File Offset: 0x00081D34
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glScissor")]
		public static void Scissor(int x, int y, int width, int height)
		{
			GL.Core.Scissor(x, y, width, height);
		}

		// Token: 0x0600311C RID: 12572 RVA: 0x00083B40 File Offset: 0x00081D40
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glShadeModel")]
		public static void ShadeModel(All mode)
		{
			GL.Core.ShadeModel(mode);
		}

		// Token: 0x0600311D RID: 12573 RVA: 0x00083B48 File Offset: 0x00081D48
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glStencilFunc")]
		public static void StencilFunc(All func, int @ref, int mask)
		{
			GL.Core.StencilFunc(func, @ref, (uint)mask);
		}

		// Token: 0x0600311E RID: 12574 RVA: 0x00083B54 File Offset: 0x00081D54
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glStencilFunc")]
		[CLSCompliant(false)]
		public static void StencilFunc(All func, int @ref, uint mask)
		{
			GL.Core.StencilFunc(func, @ref, mask);
		}

		// Token: 0x0600311F RID: 12575 RVA: 0x00083B60 File Offset: 0x00081D60
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glStencilMask")]
		public static void StencilMask(int mask)
		{
			GL.Core.StencilMask((uint)mask);
		}

		// Token: 0x06003120 RID: 12576 RVA: 0x00083B68 File Offset: 0x00081D68
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glStencilMask")]
		[CLSCompliant(false)]
		public static void StencilMask(uint mask)
		{
			GL.Core.StencilMask(mask);
		}

		// Token: 0x06003121 RID: 12577 RVA: 0x00083B70 File Offset: 0x00081D70
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glStencilOp")]
		public static void StencilOp(All fail, All zfail, All zpass)
		{
			GL.Core.StencilOp(fail, zfail, zpass);
		}

		// Token: 0x06003122 RID: 12578 RVA: 0x00083B7C File Offset: 0x00081D7C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
		public static void TexCoordPointer(int size, All type, int stride, IntPtr pointer)
		{
			GL.Core.TexCoordPointer(size, type, stride, pointer);
		}

		// Token: 0x06003123 RID: 12579 RVA: 0x00083B88 File Offset: 0x00081D88
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
		public static void TexCoordPointer<T3>(int size, All type, int stride, [In] [Out] T3[] pointer) where T3 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				GL.Core.TexCoordPointer(size, type, stride, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003124 RID: 12580 RVA: 0x00083BC8 File Offset: 0x00081DC8
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
		public static void TexCoordPointer<T3>(int size, All type, int stride, [In] [Out] T3[,] pointer) where T3 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				GL.Core.TexCoordPointer(size, type, stride, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003125 RID: 12581 RVA: 0x00083C08 File Offset: 0x00081E08
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
		public static void TexCoordPointer<T3>(int size, All type, int stride, [In] [Out] T3[,,] pointer) where T3 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				GL.Core.TexCoordPointer(size, type, stride, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003126 RID: 12582 RVA: 0x00083C48 File Offset: 0x00081E48
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexCoordPointer")]
		public static void TexCoordPointer<T3>(int size, All type, int stride, [In] [Out] ref T3 pointer) where T3 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				GL.Core.TexCoordPointer(size, type, stride, gchandle.AddrOfPinnedObject());
				pointer = (T3)((object)gchandle.Target);
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003127 RID: 12583 RVA: 0x00083CA4 File Offset: 0x00081EA4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexEnvf")]
		public static void TexEnv(All target, All pname, float param)
		{
			GL.Core.TexEnvf(target, pname, param);
		}

		// Token: 0x06003128 RID: 12584 RVA: 0x00083CB0 File Offset: 0x00081EB0
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexEnvfv")]
		public unsafe static void TexEnv(All target, All pname, float[] @params)
		{
			fixed (float* ptr = @params)
			{
				GL.Core.TexEnvfv(target, pname, ptr);
			}
		}

		// Token: 0x06003129 RID: 12585 RVA: 0x00083CE0 File Offset: 0x00081EE0
		[CLSCompliant(false)]
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexEnvfv")]
		public unsafe static void TexEnv(All target, All pname, float* @params)
		{
			GL.Core.TexEnvfv(target, pname, @params);
		}

		// Token: 0x0600312A RID: 12586 RVA: 0x00083CEC File Offset: 0x00081EEC
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexEnvx")]
		public static void TexEnvx(All target, All pname, int param)
		{
			GL.Core.TexEnvx(target, pname, param);
		}

		// Token: 0x0600312B RID: 12587 RVA: 0x00083CF8 File Offset: 0x00081EF8
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexEnvxv")]
		public unsafe static void TexEnvx(All target, All pname, int[] @params)
		{
			fixed (int* ptr = @params)
			{
				GL.Core.TexEnvxv(target, pname, ptr);
			}
		}

		// Token: 0x0600312C RID: 12588 RVA: 0x00083D28 File Offset: 0x00081F28
		[CLSCompliant(false)]
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexEnvxv")]
		public unsafe static void TexEnvx(All target, All pname, int* @params)
		{
			GL.Core.TexEnvxv(target, pname, @params);
		}

		// Token: 0x0600312D RID: 12589 RVA: 0x00083D34 File Offset: 0x00081F34
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexImage2D")]
		public static void TexImage2D(All target, int level, int internalformat, int width, int height, int border, All format, All type, IntPtr pixels)
		{
			GL.Core.TexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
		}

		// Token: 0x0600312E RID: 12590 RVA: 0x00083D54 File Offset: 0x00081F54
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexImage2D")]
		public static void TexImage2D<T8>(All target, int level, int internalformat, int width, int height, int border, All format, All type, [In] [Out] T8[] pixels) where T8 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try
			{
				GL.Core.TexImage2D(target, level, internalformat, width, height, border, format, type, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x0600312F RID: 12591 RVA: 0x00083D9C File Offset: 0x00081F9C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexImage2D")]
		public static void TexImage2D<T8>(All target, int level, int internalformat, int width, int height, int border, All format, All type, [In] [Out] T8[,] pixels) where T8 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try
			{
				GL.Core.TexImage2D(target, level, internalformat, width, height, border, format, type, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003130 RID: 12592 RVA: 0x00083DE4 File Offset: 0x00081FE4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexImage2D")]
		public static void TexImage2D<T8>(All target, int level, int internalformat, int width, int height, int border, All format, All type, [In] [Out] T8[,,] pixels) where T8 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try
			{
				GL.Core.TexImage2D(target, level, internalformat, width, height, border, format, type, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003131 RID: 12593 RVA: 0x00083E2C File Offset: 0x0008202C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexImage2D")]
		public static void TexImage2D<T8>(All target, int level, int internalformat, int width, int height, int border, All format, All type, [In] [Out] ref T8 pixels) where T8 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try
			{
				GL.Core.TexImage2D(target, level, internalformat, width, height, border, format, type, gchandle.AddrOfPinnedObject());
				pixels = (T8)((object)gchandle.Target);
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003132 RID: 12594 RVA: 0x00083E94 File Offset: 0x00082094
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexParameterf")]
		public static void TexParameter(All target, All pname, float param)
		{
			GL.Core.TexParameterf(target, pname, param);
		}

		// Token: 0x06003133 RID: 12595 RVA: 0x00083EA0 File Offset: 0x000820A0
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexParameterx")]
		public static void TexParameterx(All target, All pname, int param)
		{
			GL.Core.TexParameterx(target, pname, param);
		}

		// Token: 0x06003134 RID: 12596 RVA: 0x00083EAC File Offset: 0x000820AC
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
		public static void TexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, IntPtr pixels)
		{
			GL.Core.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
		}

		// Token: 0x06003135 RID: 12597 RVA: 0x00083ECC File Offset: 0x000820CC
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
		public static void TexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, [In] [Out] T8[] pixels) where T8 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try
			{
				GL.Core.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003136 RID: 12598 RVA: 0x00083F14 File Offset: 0x00082114
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
		public static void TexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, [In] [Out] T8[,] pixels) where T8 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try
			{
				GL.Core.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003137 RID: 12599 RVA: 0x00083F5C File Offset: 0x0008215C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
		public static void TexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, [In] [Out] T8[,,] pixels) where T8 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try
			{
				GL.Core.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003138 RID: 12600 RVA: 0x00083FA4 File Offset: 0x000821A4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTexSubImage2D")]
		public static void TexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, [In] [Out] ref T8 pixels) where T8 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try
			{
				GL.Core.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gchandle.AddrOfPinnedObject());
				pixels = (T8)((object)gchandle.Target);
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003139 RID: 12601 RVA: 0x0008400C File Offset: 0x0008220C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTranslatef")]
		public static void Translate(float x, float y, float z)
		{
			GL.Core.Translatef(x, y, z);
		}

		// Token: 0x0600313A RID: 12602 RVA: 0x0008401C File Offset: 0x0008221C
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glTranslatex")]
		public static void Translatex(int x, int y, int z)
		{
			GL.Core.Translatex(x, y, z);
		}

		// Token: 0x0600313B RID: 12603 RVA: 0x00084028 File Offset: 0x00082228
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glVertexPointer")]
		public static void VertexPointer(int size, All type, int stride, IntPtr pointer)
		{
			GL.Core.VertexPointer(size, type, stride, pointer);
		}

		// Token: 0x0600313C RID: 12604 RVA: 0x00084034 File Offset: 0x00082234
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glVertexPointer")]
		public static void VertexPointer<T3>(int size, All type, int stride, [In] [Out] T3[] pointer) where T3 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				GL.Core.VertexPointer(size, type, stride, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x0600313D RID: 12605 RVA: 0x00084074 File Offset: 0x00082274
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glVertexPointer")]
		public static void VertexPointer<T3>(int size, All type, int stride, [In] [Out] T3[,] pointer) where T3 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				GL.Core.VertexPointer(size, type, stride, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x0600313E RID: 12606 RVA: 0x000840B4 File Offset: 0x000822B4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glVertexPointer")]
		public static void VertexPointer<T3>(int size, All type, int stride, [In] [Out] T3[,,] pointer) where T3 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				GL.Core.VertexPointer(size, type, stride, gchandle.AddrOfPinnedObject());
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x0600313F RID: 12607 RVA: 0x000840F4 File Offset: 0x000822F4
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glVertexPointer")]
		public static void VertexPointer<T3>(int size, All type, int stride, [In] [Out] ref T3 pointer) where T3 : struct
		{
			GCHandle gchandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				GL.Core.VertexPointer(size, type, stride, gchandle.AddrOfPinnedObject());
				pointer = (T3)((object)gchandle.Target);
			}
			finally
			{
				gchandle.Free();
			}
		}

		// Token: 0x06003140 RID: 12608 RVA: 0x00084150 File Offset: 0x00082350
		[AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "glViewport")]
		public static void Viewport(int x, int y, int width, int height)
		{
			GL.Core.Viewport(x, y, width, height);
		}

		// Token: 0x04004ADC RID: 19164
		private const string Library = "libGLES.dll";

		// Token: 0x020004D2 RID: 1234
		internal static class Core
		{
			// Token: 0x06003142 RID: 12610
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glActiveTexture", ExactSpelling = true)]
			internal static extern void ActiveTexture(All texture);

			// Token: 0x06003143 RID: 12611
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glAlphaFunc", ExactSpelling = true)]
			internal static extern void AlphaFunc(All func, float @ref);

			// Token: 0x06003144 RID: 12612
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glAlphaFuncx", ExactSpelling = true)]
			internal static extern void AlphaFuncx(All func, int @ref);

			// Token: 0x06003145 RID: 12613
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glBindTexture", ExactSpelling = true)]
			internal static extern void BindTexture(All target, uint texture);

			// Token: 0x06003146 RID: 12614
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glBlendFunc", ExactSpelling = true)]
			internal static extern void BlendFunc(All sfactor, All dfactor);

			// Token: 0x06003147 RID: 12615
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glClear", ExactSpelling = true)]
			internal static extern void Clear(uint mask);

			// Token: 0x06003148 RID: 12616
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glClearColor", ExactSpelling = true)]
			internal static extern void ClearColor(float red, float green, float blue, float alpha);

			// Token: 0x06003149 RID: 12617
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glClearColorx", ExactSpelling = true)]
			internal static extern void ClearColorx(int red, int green, int blue, int alpha);

			// Token: 0x0600314A RID: 12618
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glClearDepthf", ExactSpelling = true)]
			internal static extern void ClearDepthf(float depth);

			// Token: 0x0600314B RID: 12619
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glClearDepthx", ExactSpelling = true)]
			internal static extern void ClearDepthx(int depth);

			// Token: 0x0600314C RID: 12620
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glClearStencil", ExactSpelling = true)]
			internal static extern void ClearStencil(int s);

			// Token: 0x0600314D RID: 12621
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glClientActiveTexture", ExactSpelling = true)]
			internal static extern void ClientActiveTexture(All texture);

			// Token: 0x0600314E RID: 12622
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glColor4f", ExactSpelling = true)]
			internal static extern void Color4f(float red, float green, float blue, float alpha);

			// Token: 0x0600314F RID: 12623
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glColor4x", ExactSpelling = true)]
			internal static extern void Color4x(int red, int green, int blue, int alpha);

			// Token: 0x06003150 RID: 12624
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glColorMask", ExactSpelling = true)]
			internal static extern void ColorMask(bool red, bool green, bool blue, bool alpha);

			// Token: 0x06003151 RID: 12625
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glColorPointer", ExactSpelling = true)]
			internal static extern void ColorPointer(int size, All type, int stride, IntPtr pointer);

			// Token: 0x06003152 RID: 12626
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glCompressedTexImage2D", ExactSpelling = true)]
			internal static extern void CompressedTexImage2D(All target, int level, All internalformat, int width, int height, int border, int imageSize, IntPtr data);

			// Token: 0x06003153 RID: 12627
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glCompressedTexSubImage2D", ExactSpelling = true)]
			internal static extern void CompressedTexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, IntPtr data);

			// Token: 0x06003154 RID: 12628
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glCopyTexImage2D", ExactSpelling = true)]
			internal static extern void CopyTexImage2D(All target, int level, All internalformat, int x, int y, int width, int height, int border);

			// Token: 0x06003155 RID: 12629
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glCopyTexSubImage2D", ExactSpelling = true)]
			internal static extern void CopyTexSubImage2D(All target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

			// Token: 0x06003156 RID: 12630
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glCullFace", ExactSpelling = true)]
			internal static extern void CullFace(All mode);

			// Token: 0x06003157 RID: 12631
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glDeleteTextures", ExactSpelling = true)]
			internal unsafe static extern void DeleteTextures(int n, uint* textures);

			// Token: 0x06003158 RID: 12632
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glDepthFunc", ExactSpelling = true)]
			internal static extern void DepthFunc(All func);

			// Token: 0x06003159 RID: 12633
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glDepthMask", ExactSpelling = true)]
			internal static extern void DepthMask(bool flag);

			// Token: 0x0600315A RID: 12634
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glDepthRangef", ExactSpelling = true)]
			internal static extern void DepthRangef(float zNear, float zFar);

			// Token: 0x0600315B RID: 12635
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glDepthRangex", ExactSpelling = true)]
			internal static extern void DepthRangex(int zNear, int zFar);

			// Token: 0x0600315C RID: 12636
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glDisable", ExactSpelling = true)]
			internal static extern void Disable(All cap);

			// Token: 0x0600315D RID: 12637
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glDisableClientState", ExactSpelling = true)]
			internal static extern void DisableClientState(All array);

			// Token: 0x0600315E RID: 12638
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glDrawArrays", ExactSpelling = true)]
			internal static extern void DrawArrays(All mode, int first, int count);

			// Token: 0x0600315F RID: 12639
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glDrawElements", ExactSpelling = true)]
			internal static extern void DrawElements(All mode, int count, All type, IntPtr indices);

			// Token: 0x06003160 RID: 12640
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glEnable", ExactSpelling = true)]
			internal static extern void Enable(All cap);

			// Token: 0x06003161 RID: 12641
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glEnableClientState", ExactSpelling = true)]
			internal static extern void EnableClientState(All array);

			// Token: 0x06003162 RID: 12642
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glFinish", ExactSpelling = true)]
			internal static extern void Finish();

			// Token: 0x06003163 RID: 12643
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glFlush", ExactSpelling = true)]
			internal static extern void Flush();

			// Token: 0x06003164 RID: 12644
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glFogf", ExactSpelling = true)]
			internal static extern void Fogf(All pname, float param);

			// Token: 0x06003165 RID: 12645
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glFogfv", ExactSpelling = true)]
			internal unsafe static extern void Fogfv(All pname, float* @params);

			// Token: 0x06003166 RID: 12646
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glFogx", ExactSpelling = true)]
			internal static extern void Fogx(All pname, int param);

			// Token: 0x06003167 RID: 12647
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glFogxv", ExactSpelling = true)]
			internal unsafe static extern void Fogxv(All pname, int* @params);

			// Token: 0x06003168 RID: 12648
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glFrontFace", ExactSpelling = true)]
			internal static extern void FrontFace(All mode);

			// Token: 0x06003169 RID: 12649
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glFrustumf", ExactSpelling = true)]
			internal static extern void Frustumf(float left, float right, float bottom, float top, float zNear, float zFar);

			// Token: 0x0600316A RID: 12650
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glFrustumx", ExactSpelling = true)]
			internal static extern void Frustumx(int left, int right, int bottom, int top, int zNear, int zFar);

			// Token: 0x0600316B RID: 12651
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glGenTextures", ExactSpelling = true)]
			internal unsafe static extern void GenTextures(int n, uint* textures);

			// Token: 0x0600316C RID: 12652
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glGetError", ExactSpelling = true)]
			internal static extern All GetError();

			// Token: 0x0600316D RID: 12653
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glGetIntegerv", ExactSpelling = true)]
			internal unsafe static extern void GetIntegerv(All pname, int* @params);

			// Token: 0x0600316E RID: 12654
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glGetString", ExactSpelling = true)]
			internal static extern IntPtr GetString(All name);

			// Token: 0x0600316F RID: 12655
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glHint", ExactSpelling = true)]
			internal static extern void Hint(All target, All mode);

			// Token: 0x06003170 RID: 12656
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glLightf", ExactSpelling = true)]
			internal static extern void Lightf(All light, All pname, float param);

			// Token: 0x06003171 RID: 12657
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glLightfv", ExactSpelling = true)]
			internal unsafe static extern void Lightfv(All light, All pname, float* @params);

			// Token: 0x06003172 RID: 12658
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glLightModelf", ExactSpelling = true)]
			internal static extern void LightModelf(All pname, float param);

			// Token: 0x06003173 RID: 12659
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glLightModelfv", ExactSpelling = true)]
			internal unsafe static extern void LightModelfv(All pname, float* @params);

			// Token: 0x06003174 RID: 12660
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glLightModelx", ExactSpelling = true)]
			internal static extern void LightModelx(All pname, int param);

			// Token: 0x06003175 RID: 12661
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glLightModelxv", ExactSpelling = true)]
			internal unsafe static extern void LightModelxv(All pname, int* @params);

			// Token: 0x06003176 RID: 12662
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glLightx", ExactSpelling = true)]
			internal static extern void Lightx(All light, All pname, int param);

			// Token: 0x06003177 RID: 12663
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glLightxv", ExactSpelling = true)]
			internal unsafe static extern void Lightxv(All light, All pname, int* @params);

			// Token: 0x06003178 RID: 12664
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glLineWidth", ExactSpelling = true)]
			internal static extern void LineWidth(float width);

			// Token: 0x06003179 RID: 12665
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glLineWidthx", ExactSpelling = true)]
			internal static extern void LineWidthx(int width);

			// Token: 0x0600317A RID: 12666
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glLoadIdentity", ExactSpelling = true)]
			internal static extern void LoadIdentity();

			// Token: 0x0600317B RID: 12667
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glLoadMatrixf", ExactSpelling = true)]
			internal unsafe static extern void LoadMatrixf(float* m);

			// Token: 0x0600317C RID: 12668
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glLoadMatrixx", ExactSpelling = true)]
			internal unsafe static extern void LoadMatrixx(int* m);

			// Token: 0x0600317D RID: 12669
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glLogicOp", ExactSpelling = true)]
			internal static extern void LogicOp(All opcode);

			// Token: 0x0600317E RID: 12670
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glMaterialf", ExactSpelling = true)]
			internal static extern void Materialf(All face, All pname, float param);

			// Token: 0x0600317F RID: 12671
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glMaterialfv", ExactSpelling = true)]
			internal unsafe static extern void Materialfv(All face, All pname, float* @params);

			// Token: 0x06003180 RID: 12672
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glMaterialx", ExactSpelling = true)]
			internal static extern void Materialx(All face, All pname, int param);

			// Token: 0x06003181 RID: 12673
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glMaterialxv", ExactSpelling = true)]
			internal unsafe static extern void Materialxv(All face, All pname, int* @params);

			// Token: 0x06003182 RID: 12674
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glMatrixMode", ExactSpelling = true)]
			internal static extern void MatrixMode(All mode);

			// Token: 0x06003183 RID: 12675
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glMultiTexCoord4f", ExactSpelling = true)]
			internal static extern void MultiTexCoord4f(All target, float s, float t, float r, float q);

			// Token: 0x06003184 RID: 12676
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glMultiTexCoord4x", ExactSpelling = true)]
			internal static extern void MultiTexCoord4x(All target, int s, int t, int r, int q);

			// Token: 0x06003185 RID: 12677
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glMultMatrixf", ExactSpelling = true)]
			internal unsafe static extern void MultMatrixf(float* m);

			// Token: 0x06003186 RID: 12678
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glMultMatrixx", ExactSpelling = true)]
			internal unsafe static extern void MultMatrixx(int* m);

			// Token: 0x06003187 RID: 12679
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glNormal3f", ExactSpelling = true)]
			internal static extern void Normal3f(float nx, float ny, float nz);

			// Token: 0x06003188 RID: 12680
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glNormal3x", ExactSpelling = true)]
			internal static extern void Normal3x(int nx, int ny, int nz);

			// Token: 0x06003189 RID: 12681
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glNormalPointer", ExactSpelling = true)]
			internal static extern void NormalPointer(All type, int stride, IntPtr pointer);

			// Token: 0x0600318A RID: 12682
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glOrthof", ExactSpelling = true)]
			internal static extern void Orthof(float left, float right, float bottom, float top, float zNear, float zFar);

			// Token: 0x0600318B RID: 12683
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glOrthox", ExactSpelling = true)]
			internal static extern void Orthox(int left, int right, int bottom, int top, int zNear, int zFar);

			// Token: 0x0600318C RID: 12684
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glPixelStorei", ExactSpelling = true)]
			internal static extern void PixelStorei(All pname, int param);

			// Token: 0x0600318D RID: 12685
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glPointSize", ExactSpelling = true)]
			internal static extern void PointSize(float size);

			// Token: 0x0600318E RID: 12686
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glPointSizex", ExactSpelling = true)]
			internal static extern void PointSizex(int size);

			// Token: 0x0600318F RID: 12687
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glPolygonOffset", ExactSpelling = true)]
			internal static extern void PolygonOffset(float factor, float units);

			// Token: 0x06003190 RID: 12688
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glPolygonOffsetx", ExactSpelling = true)]
			internal static extern void PolygonOffsetx(int factor, int units);

			// Token: 0x06003191 RID: 12689
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glPopMatrix", ExactSpelling = true)]
			internal static extern void PopMatrix();

			// Token: 0x06003192 RID: 12690
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glPushMatrix", ExactSpelling = true)]
			internal static extern void PushMatrix();

			// Token: 0x06003193 RID: 12691
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glReadPixels", ExactSpelling = true)]
			internal static extern void ReadPixels(int x, int y, int width, int height, All format, All type, IntPtr pixels);

			// Token: 0x06003194 RID: 12692
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glRotatef", ExactSpelling = true)]
			internal static extern void Rotatef(float angle, float x, float y, float z);

			// Token: 0x06003195 RID: 12693
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glRotatex", ExactSpelling = true)]
			internal static extern void Rotatex(int angle, int x, int y, int z);

			// Token: 0x06003196 RID: 12694
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glSampleCoverage", ExactSpelling = true)]
			internal static extern void SampleCoverage(float value, bool invert);

			// Token: 0x06003197 RID: 12695
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glSampleCoveragex", ExactSpelling = true)]
			internal static extern void SampleCoveragex(int value, bool invert);

			// Token: 0x06003198 RID: 12696
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glScalef", ExactSpelling = true)]
			internal static extern void Scalef(float x, float y, float z);

			// Token: 0x06003199 RID: 12697
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glScalex", ExactSpelling = true)]
			internal static extern void Scalex(int x, int y, int z);

			// Token: 0x0600319A RID: 12698
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glScissor", ExactSpelling = true)]
			internal static extern void Scissor(int x, int y, int width, int height);

			// Token: 0x0600319B RID: 12699
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glShadeModel", ExactSpelling = true)]
			internal static extern void ShadeModel(All mode);

			// Token: 0x0600319C RID: 12700
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glStencilFunc", ExactSpelling = true)]
			internal static extern void StencilFunc(All func, int @ref, uint mask);

			// Token: 0x0600319D RID: 12701
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glStencilMask", ExactSpelling = true)]
			internal static extern void StencilMask(uint mask);

			// Token: 0x0600319E RID: 12702
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glStencilOp", ExactSpelling = true)]
			internal static extern void StencilOp(All fail, All zfail, All zpass);

			// Token: 0x0600319F RID: 12703
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glTexCoordPointer", ExactSpelling = true)]
			internal static extern void TexCoordPointer(int size, All type, int stride, IntPtr pointer);

			// Token: 0x060031A0 RID: 12704
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glTexEnvf", ExactSpelling = true)]
			internal static extern void TexEnvf(All target, All pname, float param);

			// Token: 0x060031A1 RID: 12705
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glTexEnvfv", ExactSpelling = true)]
			internal unsafe static extern void TexEnvfv(All target, All pname, float* @params);

			// Token: 0x060031A2 RID: 12706
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glTexEnvx", ExactSpelling = true)]
			internal static extern void TexEnvx(All target, All pname, int param);

			// Token: 0x060031A3 RID: 12707
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glTexEnvxv", ExactSpelling = true)]
			internal unsafe static extern void TexEnvxv(All target, All pname, int* @params);

			// Token: 0x060031A4 RID: 12708
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glTexImage2D", ExactSpelling = true)]
			internal static extern void TexImage2D(All target, int level, int internalformat, int width, int height, int border, All format, All type, IntPtr pixels);

			// Token: 0x060031A5 RID: 12709
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glTexParameterf", ExactSpelling = true)]
			internal static extern void TexParameterf(All target, All pname, float param);

			// Token: 0x060031A6 RID: 12710
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glTexParameterx", ExactSpelling = true)]
			internal static extern void TexParameterx(All target, All pname, int param);

			// Token: 0x060031A7 RID: 12711
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glTexSubImage2D", ExactSpelling = true)]
			internal static extern void TexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, IntPtr pixels);

			// Token: 0x060031A8 RID: 12712
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glTranslatef", ExactSpelling = true)]
			internal static extern void Translatef(float x, float y, float z);

			// Token: 0x060031A9 RID: 12713
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glTranslatex", ExactSpelling = true)]
			internal static extern void Translatex(int x, int y, int z);

			// Token: 0x060031AA RID: 12714
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glVertexPointer", ExactSpelling = true)]
			internal static extern void VertexPointer(int size, All type, int stride, IntPtr pointer);

			// Token: 0x060031AB RID: 12715
			[SuppressUnmanagedCodeSecurity]
			[DllImport("libGLES.dll", EntryPoint = "glViewport", ExactSpelling = true)]
			internal static extern void Viewport(int x, int y, int width, int height);
		}
	}
}
