using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Text;

namespace OpenTK.Graphics.OpenGL
{
	// Token: 0x020004B5 RID: 1205
	public sealed class GL : GraphicsBindingsBase
	{
		// Token: 0x06000C52 RID: 3154 RVA: 0x00028408 File Offset: 0x00026608
		static GL()
		{
			GL.EntryPoints = new IntPtr[GL.EntryPointNameOffsets.Length];
		}

		// Token: 0x06000C53 RID: 3155 RVA: 0x00028464 File Offset: 0x00026664
		public static void Accum(AccumOp op, float value)
		{
			calli(System.Void(System.Int32,System.Single), op, value, GL.EntryPoints[0]);
		}

		// Token: 0x06000C54 RID: 3156 RVA: 0x00028474 File Offset: 0x00026674
		[CLSCompliant(false)]
		public static void ActiveShaderProgram(int pipeline, int program)
		{
			calli(System.Void(System.UInt32,System.UInt32), pipeline, program, GL.EntryPoints[3]);
		}

		// Token: 0x06000C55 RID: 3157 RVA: 0x00028484 File Offset: 0x00026684
		[CLSCompliant(false)]
		public static void ActiveShaderProgram(uint pipeline, uint program)
		{
			calli(System.Void(System.UInt32,System.UInt32), pipeline, program, GL.EntryPoints[3]);
		}

		// Token: 0x06000C56 RID: 3158 RVA: 0x00028494 File Offset: 0x00026694
		public static void ActiveTexture(TextureUnit texture)
		{
			calli(System.Void(System.Int32), texture, GL.EntryPoints[6]);
		}

		// Token: 0x06000C57 RID: 3159 RVA: 0x000284A4 File Offset: 0x000266A4
		public static void AlphaFunc(AlphaFunction func, float @ref)
		{
			calli(System.Void(System.Int32,System.Single), func, @ref, GL.EntryPoints[12]);
		}

		// Token: 0x06000C58 RID: 3160 RVA: 0x000284B8 File Offset: 0x000266B8
		[CLSCompliant(false)]
		public unsafe static bool AreTexturesResident(int n, int[] textures, [Out] bool[] residences)
		{
			fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (bool* ptr3 = ref (residences != null && residences.Length != 0) ? ref residences[0] : ref *null)
				{
					return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, ptr2, ptr3, GL.EntryPoints[16]);
				}
			}
		}

		// Token: 0x06000C59 RID: 3161 RVA: 0x00028500 File Offset: 0x00026700
		[CLSCompliant(false)]
		public unsafe static bool AreTexturesResident(int n, ref int textures, out bool residences)
		{
			fixed (int* ptr = &textures)
			{
				int* ptr2 = ptr;
				fixed (bool* ptr3 = &residences)
				{
					return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, ptr2, ptr3, GL.EntryPoints[16]);
				}
			}
		}

		// Token: 0x06000C5A RID: 3162 RVA: 0x00028524 File Offset: 0x00026724
		[CLSCompliant(false)]
		public unsafe static bool AreTexturesResident(int n, int* textures, [Out] bool* residences)
		{
			return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, textures, residences, GL.EntryPoints[16]);
		}

		// Token: 0x06000C5B RID: 3163 RVA: 0x00028538 File Offset: 0x00026738
		[CLSCompliant(false)]
		public unsafe static bool AreTexturesResident(int n, uint[] textures, [Out] bool[] residences)
		{
			fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (bool* ptr3 = ref (residences != null && residences.Length != 0) ? ref residences[0] : ref *null)
				{
					return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, ptr2, ptr3, GL.EntryPoints[16]);
				}
			}
		}

		// Token: 0x06000C5C RID: 3164 RVA: 0x00028580 File Offset: 0x00026780
		[CLSCompliant(false)]
		public unsafe static bool AreTexturesResident(int n, ref uint textures, out bool residences)
		{
			fixed (uint* ptr = &textures)
			{
				uint* ptr2 = ptr;
				fixed (bool* ptr3 = &residences)
				{
					return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, ptr2, ptr3, GL.EntryPoints[16]);
				}
			}
		}

		// Token: 0x06000C5D RID: 3165 RVA: 0x000285A4 File Offset: 0x000267A4
		[CLSCompliant(false)]
		public unsafe static bool AreTexturesResident(int n, uint* textures, [Out] bool* residences)
		{
			return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, textures, residences, GL.EntryPoints[16]);
		}

		// Token: 0x06000C5E RID: 3166 RVA: 0x000285B8 File Offset: 0x000267B8
		public static void ArrayElement(int i)
		{
			calli(System.Void(System.Int32), i, GL.EntryPoints[18]);
		}

		// Token: 0x06000C5F RID: 3167 RVA: 0x000285C8 File Offset: 0x000267C8
		[CLSCompliant(false)]
		public static void AttachShader(int program, int shader)
		{
			calli(System.Void(System.UInt32,System.UInt32), program, shader, GL.EntryPoints[23]);
		}

		// Token: 0x06000C60 RID: 3168 RVA: 0x000285DC File Offset: 0x000267DC
		[CLSCompliant(false)]
		public static void AttachShader(uint program, uint shader)
		{
			calli(System.Void(System.UInt32,System.UInt32), program, shader, GL.EntryPoints[23]);
		}

		// Token: 0x06000C61 RID: 3169 RVA: 0x000285F0 File Offset: 0x000267F0
		[Obsolete("Use PrimitiveType overload instead")]
		public static void Begin(BeginMode mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[24]);
		}

		// Token: 0x06000C62 RID: 3170 RVA: 0x00028600 File Offset: 0x00026800
		public static void Begin(PrimitiveType mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[24]);
		}

		// Token: 0x06000C63 RID: 3171 RVA: 0x00028610 File Offset: 0x00026810
		[CLSCompliant(false)]
		public static void BeginConditionalRender(int id, ConditionalRenderType mode)
		{
			calli(System.Void(System.UInt32,System.Int32), id, mode, GL.EntryPoints[25]);
		}

		// Token: 0x06000C64 RID: 3172 RVA: 0x00028624 File Offset: 0x00026824
		[CLSCompliant(false)]
		public static void BeginConditionalRender(uint id, ConditionalRenderType mode)
		{
			calli(System.Void(System.UInt32,System.Int32), id, mode, GL.EntryPoints[25]);
		}

		// Token: 0x06000C65 RID: 3173 RVA: 0x00028638 File Offset: 0x00026838
		[CLSCompliant(false)]
		public static void BeginQuery(QueryTarget target, int id)
		{
			calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[32]);
		}

		// Token: 0x06000C66 RID: 3174 RVA: 0x0002864C File Offset: 0x0002684C
		[CLSCompliant(false)]
		public static void BeginQuery(QueryTarget target, uint id)
		{
			calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[32]);
		}

		// Token: 0x06000C67 RID: 3175 RVA: 0x00028660 File Offset: 0x00026860
		[CLSCompliant(false)]
		public static void BeginQueryIndexed(QueryTarget target, int index, int id)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, id, GL.EntryPoints[34]);
		}

		// Token: 0x06000C68 RID: 3176 RVA: 0x00028674 File Offset: 0x00026874
		[CLSCompliant(false)]
		public static void BeginQueryIndexed(QueryTarget target, uint index, uint id)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, id, GL.EntryPoints[34]);
		}

		// Token: 0x06000C69 RID: 3177 RVA: 0x00028688 File Offset: 0x00026888
		[Obsolete("Use TransformFeedbackPrimitiveType overload instead")]
		public static void BeginTransformFeedback(BeginFeedbackMode primitiveMode)
		{
			calli(System.Void(System.Int32), primitiveMode, GL.EntryPoints[35]);
		}

		// Token: 0x06000C6A RID: 3178 RVA: 0x00028698 File Offset: 0x00026898
		public static void BeginTransformFeedback(TransformFeedbackPrimitiveType primitiveMode)
		{
			calli(System.Void(System.Int32), primitiveMode, GL.EntryPoints[35]);
		}

		// Token: 0x06000C6B RID: 3179 RVA: 0x000286A8 File Offset: 0x000268A8
		[CLSCompliant(false)]
		public static void BindAttribLocation(int program, int index, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			calli(System.Void(System.UInt32,System.UInt32,System.IntPtr), program, index, intPtr, GL.EntryPoints[40]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06000C6C RID: 3180 RVA: 0x000286D4 File Offset: 0x000268D4
		[CLSCompliant(false)]
		public static void BindAttribLocation(uint program, uint index, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			calli(System.Void(System.UInt32,System.UInt32,System.IntPtr), program, index, intPtr, GL.EntryPoints[40]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06000C6D RID: 3181 RVA: 0x00028700 File Offset: 0x00026900
		[CLSCompliant(false)]
		public static void BindBuffer(BufferTarget target, int buffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, buffer, GL.EntryPoints[42]);
		}

		// Token: 0x06000C6E RID: 3182 RVA: 0x00028714 File Offset: 0x00026914
		[CLSCompliant(false)]
		public static void BindBuffer(BufferTarget target, uint buffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, buffer, GL.EntryPoints[42]);
		}

		// Token: 0x06000C6F RID: 3183 RVA: 0x00028728 File Offset: 0x00026928
		[CLSCompliant(false)]
		public static void BindBufferBase(BufferRangeTarget target, int index, int buffer)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, buffer, GL.EntryPoints[44]);
		}

		// Token: 0x06000C70 RID: 3184 RVA: 0x0002873C File Offset: 0x0002693C
		[CLSCompliant(false)]
		public static void BindBufferBase(BufferRangeTarget target, uint index, uint buffer)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, buffer, GL.EntryPoints[44]);
		}

		// Token: 0x06000C71 RID: 3185 RVA: 0x00028750 File Offset: 0x00026950
		[CLSCompliant(false)]
		[Obsolete("Use BufferRangeTarget overload instead")]
		public static void BindBufferBase(BufferTarget target, int index, int buffer)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, buffer, GL.EntryPoints[44]);
		}

		// Token: 0x06000C72 RID: 3186 RVA: 0x00028764 File Offset: 0x00026964
		[Obsolete("Use BufferRangeTarget overload instead")]
		[CLSCompliant(false)]
		public static void BindBufferBase(BufferTarget target, uint index, uint buffer)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, buffer, GL.EntryPoints[44]);
		}

		// Token: 0x06000C73 RID: 3187 RVA: 0x00028778 File Offset: 0x00026978
		[CLSCompliant(false)]
		public static void BindBufferRange(BufferRangeTarget target, int index, int buffer, IntPtr offset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr), target, index, buffer, offset, size, GL.EntryPoints[49]);
		}

		// Token: 0x06000C74 RID: 3188 RVA: 0x00028790 File Offset: 0x00026990
		[CLSCompliant(false)]
		public static void BindBufferRange(BufferRangeTarget target, uint index, uint buffer, IntPtr offset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr), target, index, buffer, offset, size, GL.EntryPoints[49]);
		}

		// Token: 0x06000C75 RID: 3189 RVA: 0x000287A8 File Offset: 0x000269A8
		[CLSCompliant(false)]
		[Obsolete("Use BufferRangeTarget overload instead")]
		public static void BindBufferRange(BufferTarget target, int index, int buffer, IntPtr offset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr), target, index, buffer, offset, size, GL.EntryPoints[49]);
		}

		// Token: 0x06000C76 RID: 3190 RVA: 0x000287C0 File Offset: 0x000269C0
		[Obsolete("Use BufferRangeTarget overload instead")]
		[CLSCompliant(false)]
		public static void BindBufferRange(BufferTarget target, uint index, uint buffer, IntPtr offset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr), target, index, buffer, offset, size, GL.EntryPoints[49]);
		}

		// Token: 0x06000C77 RID: 3191 RVA: 0x000287D8 File Offset: 0x000269D8
		[CLSCompliant(false)]
		public unsafe static void BindBuffersBase(BufferRangeTarget target, int first, int count, int[] buffers)
		{
			fixed (int* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, first, count, ptr, GL.EntryPoints[52]);
			}
		}

		// Token: 0x06000C78 RID: 3192 RVA: 0x0002880C File Offset: 0x00026A0C
		[CLSCompliant(false)]
		public unsafe static void BindBuffersBase(BufferRangeTarget target, int first, int count, ref int buffers)
		{
			fixed (int* ptr = &buffers)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, first, count, ptr, GL.EntryPoints[52]);
			}
		}

		// Token: 0x06000C79 RID: 3193 RVA: 0x00028830 File Offset: 0x00026A30
		[CLSCompliant(false)]
		public unsafe static void BindBuffersBase(BufferRangeTarget target, int first, int count, int* buffers)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, first, count, buffers, GL.EntryPoints[52]);
		}

		// Token: 0x06000C7A RID: 3194 RVA: 0x00028844 File Offset: 0x00026A44
		[CLSCompliant(false)]
		public unsafe static void BindBuffersBase(BufferRangeTarget target, uint first, int count, uint[] buffers)
		{
			fixed (uint* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, first, count, ptr, GL.EntryPoints[52]);
			}
		}

		// Token: 0x06000C7B RID: 3195 RVA: 0x00028878 File Offset: 0x00026A78
		[CLSCompliant(false)]
		public unsafe static void BindBuffersBase(BufferRangeTarget target, uint first, int count, ref uint buffers)
		{
			fixed (uint* ptr = &buffers)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, first, count, ptr, GL.EntryPoints[52]);
			}
		}

		// Token: 0x06000C7C RID: 3196 RVA: 0x0002889C File Offset: 0x00026A9C
		[CLSCompliant(false)]
		public unsafe static void BindBuffersBase(BufferRangeTarget target, uint first, int count, uint* buffers)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, first, count, buffers, GL.EntryPoints[52]);
		}

		// Token: 0x06000C7D RID: 3197 RVA: 0x000288B0 File Offset: 0x00026AB0
		[CLSCompliant(false)]
		public unsafe static void BindBuffersRange(BufferRangeTarget target, int first, int count, int[] buffers, IntPtr[] offsets, IntPtr[] sizes)
		{
			fixed (int* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (IntPtr* ptr3 = ref (offsets != null && offsets.Length != 0) ? ref offsets[0] : ref *null)
				{
					IntPtr* ptr4 = ptr3;
					fixed (IntPtr* ptr5 = ref (sizes != null && sizes.Length != 0) ? ref sizes[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.IntPtr*), target, first, count, ptr2, ptr4, ptr5, GL.EntryPoints[53]);
					}
				}
			}
		}

		// Token: 0x06000C7E RID: 3198 RVA: 0x00028918 File Offset: 0x00026B18
		[CLSCompliant(false)]
		public unsafe static void BindBuffersRange(BufferRangeTarget target, int first, int count, ref int buffers, ref IntPtr offsets, ref IntPtr sizes)
		{
			fixed (int* ptr = &buffers)
			{
				int* ptr2 = ptr;
				fixed (IntPtr* ptr3 = &offsets)
				{
					IntPtr* ptr4 = ptr3;
					fixed (IntPtr* ptr5 = &sizes)
					{
						calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.IntPtr*), target, first, count, ptr2, ptr4, ptr5, GL.EntryPoints[53]);
					}
				}
			}
		}

		// Token: 0x06000C7F RID: 3199 RVA: 0x00028944 File Offset: 0x00026B44
		[CLSCompliant(false)]
		public unsafe static void BindBuffersRange(BufferRangeTarget target, int first, int count, int* buffers, IntPtr* offsets, IntPtr* sizes)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.IntPtr*), target, first, count, buffers, offsets, sizes, GL.EntryPoints[53]);
		}

		// Token: 0x06000C80 RID: 3200 RVA: 0x0002895C File Offset: 0x00026B5C
		[CLSCompliant(false)]
		public unsafe static void BindBuffersRange(BufferRangeTarget target, uint first, int count, uint[] buffers, IntPtr[] offsets, IntPtr[] sizes)
		{
			fixed (uint* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (IntPtr* ptr3 = ref (offsets != null && offsets.Length != 0) ? ref offsets[0] : ref *null)
				{
					IntPtr* ptr4 = ptr3;
					fixed (IntPtr* ptr5 = ref (sizes != null && sizes.Length != 0) ? ref sizes[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.IntPtr*), target, first, count, ptr2, ptr4, ptr5, GL.EntryPoints[53]);
					}
				}
			}
		}

		// Token: 0x06000C81 RID: 3201 RVA: 0x000289C4 File Offset: 0x00026BC4
		[CLSCompliant(false)]
		public unsafe static void BindBuffersRange(BufferRangeTarget target, uint first, int count, ref uint buffers, ref IntPtr offsets, ref IntPtr sizes)
		{
			fixed (uint* ptr = &buffers)
			{
				uint* ptr2 = ptr;
				fixed (IntPtr* ptr3 = &offsets)
				{
					IntPtr* ptr4 = ptr3;
					fixed (IntPtr* ptr5 = &sizes)
					{
						calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.IntPtr*), target, first, count, ptr2, ptr4, ptr5, GL.EntryPoints[53]);
					}
				}
			}
		}

		// Token: 0x06000C82 RID: 3202 RVA: 0x000289F0 File Offset: 0x00026BF0
		[CLSCompliant(false)]
		public unsafe static void BindBuffersRange(BufferRangeTarget target, uint first, int count, uint* buffers, IntPtr* offsets, IntPtr* sizes)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.IntPtr*), target, first, count, buffers, offsets, sizes, GL.EntryPoints[53]);
		}

		// Token: 0x06000C83 RID: 3203 RVA: 0x00028A08 File Offset: 0x00026C08
		[CLSCompliant(false)]
		public static void BindFragDataLocation(int program, int color, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			calli(System.Void(System.UInt32,System.UInt32,System.IntPtr), program, color, intPtr, GL.EntryPoints[54]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06000C84 RID: 3204 RVA: 0x00028A34 File Offset: 0x00026C34
		[CLSCompliant(false)]
		public static void BindFragDataLocation(uint program, uint color, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			calli(System.Void(System.UInt32,System.UInt32,System.IntPtr), program, color, intPtr, GL.EntryPoints[54]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06000C85 RID: 3205 RVA: 0x00028A60 File Offset: 0x00026C60
		[CLSCompliant(false)]
		public static void BindFragDataLocationIndexed(int program, int colorNumber, int index, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr), program, colorNumber, index, intPtr, GL.EntryPoints[56]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06000C86 RID: 3206 RVA: 0x00028A8C File Offset: 0x00026C8C
		[CLSCompliant(false)]
		public static void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr), program, colorNumber, index, intPtr, GL.EntryPoints[56]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06000C87 RID: 3207 RVA: 0x00028AB8 File Offset: 0x00026CB8
		[CLSCompliant(false)]
		public static void BindFramebuffer(FramebufferTarget target, int framebuffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, framebuffer, GL.EntryPoints[58]);
		}

		// Token: 0x06000C88 RID: 3208 RVA: 0x00028ACC File Offset: 0x00026CCC
		[CLSCompliant(false)]
		public static void BindFramebuffer(FramebufferTarget target, uint framebuffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, framebuffer, GL.EntryPoints[58]);
		}

		// Token: 0x06000C89 RID: 3209 RVA: 0x00028AE0 File Offset: 0x00026CE0
		[CLSCompliant(false)]
		public static void BindImageTexture(int unit, int texture, int level, bool layered, int layer, TextureAccess access, SizedInternalFormat format)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32), unit, texture, level, layered, layer, access, format, GL.EntryPoints[60]);
		}

		// Token: 0x06000C8A RID: 3210 RVA: 0x00028B04 File Offset: 0x00026D04
		[CLSCompliant(false)]
		public static void BindImageTexture(uint unit, uint texture, int level, bool layered, int layer, TextureAccess access, SizedInternalFormat format)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32), unit, texture, level, layered, layer, access, format, GL.EntryPoints[60]);
		}

		// Token: 0x06000C8B RID: 3211 RVA: 0x00028B28 File Offset: 0x00026D28
		[CLSCompliant(false)]
		public unsafe static void BindImageTextures(int first, int count, int[] textures)
		{
			fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[62]);
			}
		}

		// Token: 0x06000C8C RID: 3212 RVA: 0x00028B5C File Offset: 0x00026D5C
		[CLSCompliant(false)]
		public unsafe static void BindImageTextures(int first, int count, ref int textures)
		{
			fixed (int* ptr = &textures)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[62]);
			}
		}

		// Token: 0x06000C8D RID: 3213 RVA: 0x00028B7C File Offset: 0x00026D7C
		[CLSCompliant(false)]
		public unsafe static void BindImageTextures(int first, int count, int* textures)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, textures, GL.EntryPoints[62]);
		}

		// Token: 0x06000C8E RID: 3214 RVA: 0x00028B90 File Offset: 0x00026D90
		[CLSCompliant(false)]
		public unsafe static void BindImageTextures(uint first, int count, uint[] textures)
		{
			fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[62]);
			}
		}

		// Token: 0x06000C8F RID: 3215 RVA: 0x00028BC4 File Offset: 0x00026DC4
		[CLSCompliant(false)]
		public unsafe static void BindImageTextures(uint first, int count, ref uint textures)
		{
			fixed (uint* ptr = &textures)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[62]);
			}
		}

		// Token: 0x06000C90 RID: 3216 RVA: 0x00028BE4 File Offset: 0x00026DE4
		[CLSCompliant(false)]
		public unsafe static void BindImageTextures(uint first, int count, uint* textures)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, textures, GL.EntryPoints[62]);
		}

		// Token: 0x06000C91 RID: 3217 RVA: 0x00028BF8 File Offset: 0x00026DF8
		[CLSCompliant(false)]
		public static void BindProgramPipeline(int pipeline)
		{
			calli(System.Void(System.UInt32), pipeline, GL.EntryPoints[69]);
		}

		// Token: 0x06000C92 RID: 3218 RVA: 0x00028C08 File Offset: 0x00026E08
		[CLSCompliant(false)]
		public static void BindProgramPipeline(uint pipeline)
		{
			calli(System.Void(System.UInt32), pipeline, GL.EntryPoints[69]);
		}

		// Token: 0x06000C93 RID: 3219 RVA: 0x00028C18 File Offset: 0x00026E18
		[CLSCompliant(false)]
		public static void BindRenderbuffer(RenderbufferTarget target, int renderbuffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, renderbuffer, GL.EntryPoints[71]);
		}

		// Token: 0x06000C94 RID: 3220 RVA: 0x00028C2C File Offset: 0x00026E2C
		[CLSCompliant(false)]
		public static void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, renderbuffer, GL.EntryPoints[71]);
		}

		// Token: 0x06000C95 RID: 3221 RVA: 0x00028C40 File Offset: 0x00026E40
		[CLSCompliant(false)]
		public static void BindSampler(int unit, int sampler)
		{
			calli(System.Void(System.UInt32,System.UInt32), unit, sampler, GL.EntryPoints[73]);
		}

		// Token: 0x06000C96 RID: 3222 RVA: 0x00028C54 File Offset: 0x00026E54
		[CLSCompliant(false)]
		public static void BindSampler(uint unit, uint sampler)
		{
			calli(System.Void(System.UInt32,System.UInt32), unit, sampler, GL.EntryPoints[73]);
		}

		// Token: 0x06000C97 RID: 3223 RVA: 0x00028C68 File Offset: 0x00026E68
		[CLSCompliant(false)]
		public unsafe static void BindSamplers(int first, int count, int[] samplers)
		{
			fixed (int* ptr = ref (samplers != null && samplers.Length != 0) ? ref samplers[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[74]);
			}
		}

		// Token: 0x06000C98 RID: 3224 RVA: 0x00028C9C File Offset: 0x00026E9C
		[CLSCompliant(false)]
		public unsafe static void BindSamplers(int first, int count, ref int samplers)
		{
			fixed (int* ptr = &samplers)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[74]);
			}
		}

		// Token: 0x06000C99 RID: 3225 RVA: 0x00028CBC File Offset: 0x00026EBC
		[CLSCompliant(false)]
		public unsafe static void BindSamplers(int first, int count, int* samplers)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, samplers, GL.EntryPoints[74]);
		}

		// Token: 0x06000C9A RID: 3226 RVA: 0x00028CD0 File Offset: 0x00026ED0
		[CLSCompliant(false)]
		public unsafe static void BindSamplers(uint first, int count, uint[] samplers)
		{
			fixed (uint* ptr = ref (samplers != null && samplers.Length != 0) ? ref samplers[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[74]);
			}
		}

		// Token: 0x06000C9B RID: 3227 RVA: 0x00028D04 File Offset: 0x00026F04
		[CLSCompliant(false)]
		public unsafe static void BindSamplers(uint first, int count, ref uint samplers)
		{
			fixed (uint* ptr = &samplers)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[74]);
			}
		}

		// Token: 0x06000C9C RID: 3228 RVA: 0x00028D24 File Offset: 0x00026F24
		[CLSCompliant(false)]
		public unsafe static void BindSamplers(uint first, int count, uint* samplers)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, samplers, GL.EntryPoints[74]);
		}

		// Token: 0x06000C9D RID: 3229 RVA: 0x00028D38 File Offset: 0x00026F38
		[CLSCompliant(false)]
		public static void BindTexture(TextureTarget target, int texture)
		{
			calli(System.Void(System.Int32,System.UInt32), target, texture, GL.EntryPoints[76]);
		}

		// Token: 0x06000C9E RID: 3230 RVA: 0x00028D4C File Offset: 0x00026F4C
		[CLSCompliant(false)]
		public static void BindTexture(TextureTarget target, uint texture)
		{
			calli(System.Void(System.Int32,System.UInt32), target, texture, GL.EntryPoints[76]);
		}

		// Token: 0x06000C9F RID: 3231 RVA: 0x00028D60 File Offset: 0x00026F60
		[CLSCompliant(false)]
		public unsafe static void BindTextures(int first, int count, int[] textures)
		{
			fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[78]);
			}
		}

		// Token: 0x06000CA0 RID: 3232 RVA: 0x00028D94 File Offset: 0x00026F94
		[CLSCompliant(false)]
		public unsafe static void BindTextures(int first, int count, ref int textures)
		{
			fixed (int* ptr = &textures)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[78]);
			}
		}

		// Token: 0x06000CA1 RID: 3233 RVA: 0x00028DB4 File Offset: 0x00026FB4
		[CLSCompliant(false)]
		public unsafe static void BindTextures(int first, int count, int* textures)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, textures, GL.EntryPoints[78]);
		}

		// Token: 0x06000CA2 RID: 3234 RVA: 0x00028DC8 File Offset: 0x00026FC8
		[CLSCompliant(false)]
		public unsafe static void BindTextures(uint first, int count, uint[] textures)
		{
			fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[78]);
			}
		}

		// Token: 0x06000CA3 RID: 3235 RVA: 0x00028DFC File Offset: 0x00026FFC
		[CLSCompliant(false)]
		public unsafe static void BindTextures(uint first, int count, ref uint textures)
		{
			fixed (uint* ptr = &textures)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, ptr, GL.EntryPoints[78]);
			}
		}

		// Token: 0x06000CA4 RID: 3236 RVA: 0x00028E1C File Offset: 0x0002701C
		[CLSCompliant(false)]
		public unsafe static void BindTextures(uint first, int count, uint* textures)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), first, count, textures, GL.EntryPoints[78]);
		}

		// Token: 0x06000CA5 RID: 3237 RVA: 0x00028E30 File Offset: 0x00027030
		[CLSCompliant(false)]
		public static void BindTransformFeedback(TransformFeedbackTarget target, int id)
		{
			calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[80]);
		}

		// Token: 0x06000CA6 RID: 3238 RVA: 0x00028E44 File Offset: 0x00027044
		[CLSCompliant(false)]
		public static void BindTransformFeedback(TransformFeedbackTarget target, uint id)
		{
			calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[80]);
		}

		// Token: 0x06000CA7 RID: 3239 RVA: 0x00028E58 File Offset: 0x00027058
		[CLSCompliant(false)]
		public static void BindVertexArray(int array)
		{
			calli(System.Void(System.UInt32), array, GL.EntryPoints[82]);
		}

		// Token: 0x06000CA8 RID: 3240 RVA: 0x00028E68 File Offset: 0x00027068
		[CLSCompliant(false)]
		public static void BindVertexArray(uint array)
		{
			calli(System.Void(System.UInt32), array, GL.EntryPoints[82]);
		}

		// Token: 0x06000CA9 RID: 3241 RVA: 0x00028E78 File Offset: 0x00027078
		[CLSCompliant(false)]
		public static void BindVertexBuffer(int bindingindex, int buffer, IntPtr offset, int stride)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.Int32), bindingindex, buffer, offset, stride, GL.EntryPoints[84]);
		}

		// Token: 0x06000CAA RID: 3242 RVA: 0x00028E8C File Offset: 0x0002708C
		[CLSCompliant(false)]
		public static void BindVertexBuffer(uint bindingindex, uint buffer, IntPtr offset, int stride)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.Int32), bindingindex, buffer, offset, stride, GL.EntryPoints[84]);
		}

		// Token: 0x06000CAB RID: 3243 RVA: 0x00028EA0 File Offset: 0x000270A0
		[CLSCompliant(false)]
		public unsafe static void BindVertexBuffers(int first, int count, int[] buffers, IntPtr[] offsets, int[] strides)
		{
			fixed (int* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (IntPtr* ptr3 = ref (offsets != null && offsets.Length != 0) ? ref offsets[0] : ref *null)
				{
					IntPtr* ptr4 = ptr3;
					fixed (int* ptr5 = ref (strides != null && strides.Length != 0) ? ref strides[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.Int32*), first, count, ptr2, ptr4, ptr5, GL.EntryPoints[85]);
					}
				}
			}
		}

		// Token: 0x06000CAC RID: 3244 RVA: 0x00028F04 File Offset: 0x00027104
		[CLSCompliant(false)]
		public unsafe static void BindVertexBuffers(int first, int count, ref int buffers, ref IntPtr offsets, ref int strides)
		{
			fixed (int* ptr = &buffers)
			{
				int* ptr2 = ptr;
				fixed (IntPtr* ptr3 = &offsets)
				{
					IntPtr* ptr4 = ptr3;
					fixed (int* ptr5 = &strides)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.Int32*), first, count, ptr2, ptr4, ptr5, GL.EntryPoints[85]);
					}
				}
			}
		}

		// Token: 0x06000CAD RID: 3245 RVA: 0x00028F30 File Offset: 0x00027130
		[CLSCompliant(false)]
		public unsafe static void BindVertexBuffers(int first, int count, int* buffers, IntPtr* offsets, int* strides)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.Int32*), first, count, buffers, offsets, strides, GL.EntryPoints[85]);
		}

		// Token: 0x06000CAE RID: 3246 RVA: 0x00028F48 File Offset: 0x00027148
		[CLSCompliant(false)]
		public unsafe static void BindVertexBuffers(uint first, int count, uint[] buffers, IntPtr[] offsets, int[] strides)
		{
			fixed (uint* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (IntPtr* ptr3 = ref (offsets != null && offsets.Length != 0) ? ref offsets[0] : ref *null)
				{
					IntPtr* ptr4 = ptr3;
					fixed (int* ptr5 = ref (strides != null && strides.Length != 0) ? ref strides[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.Int32*), first, count, ptr2, ptr4, ptr5, GL.EntryPoints[85]);
					}
				}
			}
		}

		// Token: 0x06000CAF RID: 3247 RVA: 0x00028FAC File Offset: 0x000271AC
		[CLSCompliant(false)]
		public unsafe static void BindVertexBuffers(uint first, int count, ref uint buffers, ref IntPtr offsets, ref int strides)
		{
			fixed (uint* ptr = &buffers)
			{
				uint* ptr2 = ptr;
				fixed (IntPtr* ptr3 = &offsets)
				{
					IntPtr* ptr4 = ptr3;
					fixed (int* ptr5 = &strides)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.Int32*), first, count, ptr2, ptr4, ptr5, GL.EntryPoints[85]);
					}
				}
			}
		}

		// Token: 0x06000CB0 RID: 3248 RVA: 0x00028FD8 File Offset: 0x000271D8
		[CLSCompliant(false)]
		public unsafe static void BindVertexBuffers(uint first, int count, uint* buffers, IntPtr* offsets, int* strides)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.IntPtr*,System.Int32*), first, count, buffers, offsets, strides, GL.EntryPoints[85]);
		}

		// Token: 0x06000CB1 RID: 3249 RVA: 0x00028FF0 File Offset: 0x000271F0
		[CLSCompliant(false)]
		public unsafe static void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap)
		{
			fixed (byte* ptr = ref (bitmap != null && bitmap.Length != 0) ? ref bitmap[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Byte*), width, height, xorig, yorig, xmove, ymove, ptr, GL.EntryPoints[100]);
			}
		}

		// Token: 0x06000CB2 RID: 3250 RVA: 0x0002902C File Offset: 0x0002722C
		[CLSCompliant(false)]
		public unsafe static void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, ref byte bitmap)
		{
			fixed (byte* ptr = &bitmap)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Byte*), width, height, xorig, yorig, xmove, ymove, ptr, GL.EntryPoints[100]);
			}
		}

		// Token: 0x06000CB3 RID: 3251 RVA: 0x00029054 File Offset: 0x00027254
		[CLSCompliant(false)]
		public unsafe static void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte* bitmap)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Byte*), width, height, xorig, yorig, xmove, ymove, bitmap, GL.EntryPoints[100]);
		}

		// Token: 0x06000CB4 RID: 3252 RVA: 0x00029078 File Offset: 0x00027278
		public static void BlendColor(float red, float green, float blue, float alpha)
		{
			calli(System.Void(System.Single,System.Single,System.Single,System.Single), red, green, blue, alpha, GL.EntryPoints[103]);
		}

		// Token: 0x06000CB5 RID: 3253 RVA: 0x0002908C File Offset: 0x0002728C
		[Obsolete("Use BlendEquationMode overload instead")]
		public static void BlendEquation(ArbDrawBuffersBlend mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[106]);
		}

		// Token: 0x06000CB6 RID: 3254 RVA: 0x0002909C File Offset: 0x0002729C
		public static void BlendEquation(BlendEquationMode mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[106]);
		}

		// Token: 0x06000CB7 RID: 3255 RVA: 0x000290AC File Offset: 0x000272AC
		[Obsolete("Use ArbDrawBuffersBlend overload instead")]
		public static void BlendEquation(Version40 mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[106]);
		}

		// Token: 0x06000CB8 RID: 3256 RVA: 0x000290BC File Offset: 0x000272BC
		[Obsolete("Use BlendEquationMode overload instead")]
		[CLSCompliant(false)]
		public static void BlendEquation(int buf, ArbDrawBuffersBlend mode)
		{
			calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[108]);
		}

		// Token: 0x06000CB9 RID: 3257 RVA: 0x000290D0 File Offset: 0x000272D0
		[CLSCompliant(false)]
		public static void BlendEquation(int buf, BlendEquationMode mode)
		{
			calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[108]);
		}

		// Token: 0x06000CBA RID: 3258 RVA: 0x000290E4 File Offset: 0x000272E4
		[CLSCompliant(false)]
		[Obsolete("Use ArbDrawBuffersBlend overload instead")]
		public static void BlendEquation(int buf, Version40 mode)
		{
			calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[108]);
		}

		// Token: 0x06000CBB RID: 3259 RVA: 0x000290F8 File Offset: 0x000272F8
		[Obsolete("Use BlendEquationMode overload instead")]
		[CLSCompliant(false)]
		public static void BlendEquation(uint buf, ArbDrawBuffersBlend mode)
		{
			calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[108]);
		}

		// Token: 0x06000CBC RID: 3260 RVA: 0x0002910C File Offset: 0x0002730C
		[CLSCompliant(false)]
		public static void BlendEquation(uint buf, BlendEquationMode mode)
		{
			calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[108]);
		}

		// Token: 0x06000CBD RID: 3261 RVA: 0x00029120 File Offset: 0x00027320
		[CLSCompliant(false)]
		[Obsolete("Use ArbDrawBuffersBlend overload instead")]
		public static void BlendEquation(uint buf, Version40 mode)
		{
			calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[108]);
		}

		// Token: 0x06000CBE RID: 3262 RVA: 0x00029134 File Offset: 0x00027334
		public static void BlendEquationSeparate(BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
		{
			calli(System.Void(System.Int32,System.Int32), modeRGB, modeAlpha, GL.EntryPoints[111]);
		}

		// Token: 0x06000CBF RID: 3263 RVA: 0x00029148 File Offset: 0x00027348
		[CLSCompliant(false)]
		public static void BlendEquationSeparate(int buf, BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, modeRGB, modeAlpha, GL.EntryPoints[113]);
		}

		// Token: 0x06000CC0 RID: 3264 RVA: 0x0002915C File Offset: 0x0002735C
		[CLSCompliant(false)]
		public static void BlendEquationSeparate(uint buf, BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, modeRGB, modeAlpha, GL.EntryPoints[113]);
		}

		// Token: 0x06000CC1 RID: 3265 RVA: 0x00029170 File Offset: 0x00027370
		public static void BlendFunc(BlendingFactorSrc sfactor, BlendingFactorDest dfactor)
		{
			calli(System.Void(System.Int32,System.Int32), sfactor, dfactor, GL.EntryPoints[116]);
		}

		// Token: 0x06000CC2 RID: 3266 RVA: 0x00029184 File Offset: 0x00027384
		[Obsolete("Use ArbDrawBuffersBlend overload instead")]
		public static void BlendFunc(BlendingFactorSrc sfactor, Version40 dfactor)
		{
			calli(System.Void(System.Int32,System.Int32), sfactor, dfactor, GL.EntryPoints[116]);
		}

		// Token: 0x06000CC3 RID: 3267 RVA: 0x00029198 File Offset: 0x00027398
		[CLSCompliant(false)]
		[Obsolete("Use BlendingFactorSrc overload instead")]
		public static void BlendFunc(int buf, ArbDrawBuffersBlend src, ArbDrawBuffersBlend dst)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, src, dst, GL.EntryPoints[117]);
		}

		// Token: 0x06000CC4 RID: 3268 RVA: 0x000291AC File Offset: 0x000273AC
		[CLSCompliant(false)]
		public static void BlendFunc(int buf, BlendingFactorSrc src, BlendingFactorDest dst)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, src, dst, GL.EntryPoints[117]);
		}

		// Token: 0x06000CC5 RID: 3269 RVA: 0x000291C0 File Offset: 0x000273C0
		[Obsolete("Use ArbDrawBuffersBlend overload instead")]
		[CLSCompliant(false)]
		public static void BlendFunc(int buf, Version40 src, Version40 dst)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, src, dst, GL.EntryPoints[117]);
		}

		// Token: 0x06000CC6 RID: 3270 RVA: 0x000291D4 File Offset: 0x000273D4
		[Obsolete("Use BlendingFactorSrc overload instead")]
		[CLSCompliant(false)]
		public static void BlendFunc(uint buf, ArbDrawBuffersBlend src, ArbDrawBuffersBlend dst)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, src, dst, GL.EntryPoints[117]);
		}

		// Token: 0x06000CC7 RID: 3271 RVA: 0x000291E8 File Offset: 0x000273E8
		[CLSCompliant(false)]
		public static void BlendFunc(uint buf, BlendingFactorSrc src, BlendingFactorDest dst)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, src, dst, GL.EntryPoints[117]);
		}

		// Token: 0x06000CC8 RID: 3272 RVA: 0x000291FC File Offset: 0x000273FC
		[Obsolete("Use ArbDrawBuffersBlend overload instead")]
		[CLSCompliant(false)]
		public static void BlendFunc(uint buf, Version40 src, Version40 dst)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, src, dst, GL.EntryPoints[117]);
		}

		// Token: 0x06000CC9 RID: 3273 RVA: 0x00029210 File Offset: 0x00027410
		[Obsolete("Use BlendingFactorSrc overload instead")]
		public static void BlendFuncSeparate(ArbDrawBuffersBlend sfactorRGB, ArbDrawBuffersBlend dfactorRGB, ArbDrawBuffersBlend sfactorAlpha, ArbDrawBuffersBlend dfactorAlpha)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha, GL.EntryPoints[120]);
		}

		// Token: 0x06000CCA RID: 3274 RVA: 0x00029224 File Offset: 0x00027424
		public static void BlendFuncSeparate(BlendingFactorSrc sfactorRGB, BlendingFactorDest dfactorRGB, BlendingFactorSrc sfactorAlpha, BlendingFactorDest dfactorAlpha)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha, GL.EntryPoints[120]);
		}

		// Token: 0x06000CCB RID: 3275 RVA: 0x00029238 File Offset: 0x00027438
		[Obsolete("Use BlendingFactorSrc overload instead")]
		[CLSCompliant(false)]
		public static void BlendFuncSeparate(int buf, ArbDrawBuffersBlend srcRGB, ArbDrawBuffersBlend dstRGB, ArbDrawBuffersBlend srcAlpha, ArbDrawBuffersBlend dstAlpha)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), buf, srcRGB, dstRGB, srcAlpha, dstAlpha, GL.EntryPoints[122]);
		}

		// Token: 0x06000CCC RID: 3276 RVA: 0x00029250 File Offset: 0x00027450
		[CLSCompliant(false)]
		public static void BlendFuncSeparate(int buf, BlendingFactorSrc srcRGB, BlendingFactorDest dstRGB, BlendingFactorSrc srcAlpha, BlendingFactorDest dstAlpha)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), buf, srcRGB, dstRGB, srcAlpha, dstAlpha, GL.EntryPoints[122]);
		}

		// Token: 0x06000CCD RID: 3277 RVA: 0x00029268 File Offset: 0x00027468
		[Obsolete("Use BlendingFactorSrc overload instead")]
		[CLSCompliant(false)]
		public static void BlendFuncSeparate(int buf, Version40 srcRGB, Version40 dstRGB, Version40 srcAlpha, Version40 dstAlpha)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), buf, srcRGB, dstRGB, srcAlpha, dstAlpha, GL.EntryPoints[122]);
		}

		// Token: 0x06000CCE RID: 3278 RVA: 0x00029280 File Offset: 0x00027480
		[Obsolete("Use BlendingFactorSrc overload instead")]
		[CLSCompliant(false)]
		public static void BlendFuncSeparate(uint buf, ArbDrawBuffersBlend srcRGB, ArbDrawBuffersBlend dstRGB, ArbDrawBuffersBlend srcAlpha, ArbDrawBuffersBlend dstAlpha)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), buf, srcRGB, dstRGB, srcAlpha, dstAlpha, GL.EntryPoints[122]);
		}

		// Token: 0x06000CCF RID: 3279 RVA: 0x00029298 File Offset: 0x00027498
		[CLSCompliant(false)]
		public static void BlendFuncSeparate(uint buf, BlendingFactorSrc srcRGB, BlendingFactorDest dstRGB, BlendingFactorSrc srcAlpha, BlendingFactorDest dstAlpha)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), buf, srcRGB, dstRGB, srcAlpha, dstAlpha, GL.EntryPoints[122]);
		}

		// Token: 0x06000CD0 RID: 3280 RVA: 0x000292B0 File Offset: 0x000274B0
		[CLSCompliant(false)]
		[Obsolete("Use BlendingFactorSrc overload instead")]
		public static void BlendFuncSeparate(uint buf, Version40 srcRGB, Version40 dstRGB, Version40 srcAlpha, Version40 dstAlpha)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), buf, srcRGB, dstRGB, srcAlpha, dstAlpha, GL.EntryPoints[122]);
		}

		// Token: 0x06000CD1 RID: 3281 RVA: 0x000292C8 File Offset: 0x000274C8
		public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter, GL.EntryPoints[127]);
		}

		// Token: 0x06000CD2 RID: 3282 RVA: 0x000292F4 File Offset: 0x000274F4
		public static void BufferData(BufferTarget target, IntPtr size, IntPtr data, BufferUsageHint usage)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, data, usage, GL.EntryPoints[130]);
		}

		// Token: 0x06000CD3 RID: 3283 RVA: 0x0002930C File Offset: 0x0002750C
		[CLSCompliant(false)]
		public unsafe static void BufferData<T2>(BufferTarget target, IntPtr size, [In] [Out] T2[] data, BufferUsageHint usage) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[130]);
			}
		}

		// Token: 0x06000CD4 RID: 3284 RVA: 0x00029344 File Offset: 0x00027544
		[CLSCompliant(false)]
		public unsafe static void BufferData<T2>(BufferTarget target, IntPtr size, [In] [Out] T2[,] data, BufferUsageHint usage) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[130]);
			}
		}

		// Token: 0x06000CD5 RID: 3285 RVA: 0x00029380 File Offset: 0x00027580
		[CLSCompliant(false)]
		public unsafe static void BufferData<T2>(BufferTarget target, IntPtr size, [In] [Out] T2[,,] data, BufferUsageHint usage) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[130]);
			}
		}

		// Token: 0x06000CD6 RID: 3286 RVA: 0x000293BC File Offset: 0x000275BC
		public unsafe static void BufferData<T2>(BufferTarget target, IntPtr size, [In] [Out] ref T2 data, BufferUsageHint usage) where T2 : struct
		{
			fixed (T2* ptr = &data)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[130]);
			}
		}

		// Token: 0x06000CD7 RID: 3287 RVA: 0x000293E0 File Offset: 0x000275E0
		public static void BufferStorage(BufferTarget target, IntPtr size, IntPtr data, BufferStorageFlags flags)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, data, flags, GL.EntryPoints[133]);
		}

		// Token: 0x06000CD8 RID: 3288 RVA: 0x000293F8 File Offset: 0x000275F8
		[CLSCompliant(false)]
		public unsafe static void BufferStorage<T2>(BufferTarget target, IntPtr size, [In] [Out] T2[] data, BufferStorageFlags flags) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, flags, GL.EntryPoints[133]);
			}
		}

		// Token: 0x06000CD9 RID: 3289 RVA: 0x00029430 File Offset: 0x00027630
		[CLSCompliant(false)]
		public unsafe static void BufferStorage<T2>(BufferTarget target, IntPtr size, [In] [Out] T2[,] data, BufferStorageFlags flags) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, flags, GL.EntryPoints[133]);
			}
		}

		// Token: 0x06000CDA RID: 3290 RVA: 0x0002946C File Offset: 0x0002766C
		[CLSCompliant(false)]
		public unsafe static void BufferStorage<T2>(BufferTarget target, IntPtr size, [In] [Out] T2[,,] data, BufferStorageFlags flags) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, flags, GL.EntryPoints[133]);
			}
		}

		// Token: 0x06000CDB RID: 3291 RVA: 0x000294A8 File Offset: 0x000276A8
		public unsafe static void BufferStorage<T2>(BufferTarget target, IntPtr size, [In] [Out] ref T2 data, BufferStorageFlags flags) where T2 : struct
		{
			fixed (T2* ptr = &data)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, flags, GL.EntryPoints[133]);
			}
		}

		// Token: 0x06000CDC RID: 3292 RVA: 0x000294CC File Offset: 0x000276CC
		public static void BufferSubData(BufferTarget target, IntPtr offset, IntPtr size, IntPtr data)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, data, GL.EntryPoints[134]);
		}

		// Token: 0x06000CDD RID: 3293 RVA: 0x000294E4 File Offset: 0x000276E4
		[CLSCompliant(false)]
		public unsafe static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] T3[] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[134]);
			}
		}

		// Token: 0x06000CDE RID: 3294 RVA: 0x0002951C File Offset: 0x0002771C
		[CLSCompliant(false)]
		public unsafe static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] T3[,] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[134]);
			}
		}

		// Token: 0x06000CDF RID: 3295 RVA: 0x00029558 File Offset: 0x00027758
		[CLSCompliant(false)]
		public unsafe static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] T3[,,] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[134]);
			}
		}

		// Token: 0x06000CE0 RID: 3296 RVA: 0x00029594 File Offset: 0x00027794
		public unsafe static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] ref T3 data) where T3 : struct
		{
			fixed (T3* ptr = &data)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[134]);
			}
		}

		// Token: 0x06000CE1 RID: 3297 RVA: 0x000295B8 File Offset: 0x000277B8
		[CLSCompliant(false)]
		public static void CallList(int list)
		{
			calli(System.Void(System.UInt32), list, GL.EntryPoints[136]);
		}

		// Token: 0x06000CE2 RID: 3298 RVA: 0x000295CC File Offset: 0x000277CC
		[CLSCompliant(false)]
		public static void CallList(uint list)
		{
			calli(System.Void(System.UInt32), list, GL.EntryPoints[136]);
		}

		// Token: 0x06000CE3 RID: 3299 RVA: 0x000295E0 File Offset: 0x000277E0
		public static void CallLists(int n, ListNameType type, IntPtr lists)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr), n, type, lists, GL.EntryPoints[137]);
		}

		// Token: 0x06000CE4 RID: 3300 RVA: 0x000295F8 File Offset: 0x000277F8
		[CLSCompliant(false)]
		public unsafe static void CallLists<T2>(int n, ListNameType type, [In] [Out] T2[] lists) where T2 : struct
		{
			fixed (T2* ptr = ref (lists != null && lists.Length != 0) ? ref lists[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), n, type, ptr, GL.EntryPoints[137]);
			}
		}

		// Token: 0x06000CE5 RID: 3301 RVA: 0x00029630 File Offset: 0x00027830
		[CLSCompliant(false)]
		public unsafe static void CallLists<T2>(int n, ListNameType type, [In] [Out] T2[,] lists) where T2 : struct
		{
			fixed (T2* ptr = ref (lists != null && lists.Length != 0) ? ref lists[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), n, type, ptr, GL.EntryPoints[137]);
			}
		}

		// Token: 0x06000CE6 RID: 3302 RVA: 0x0002966C File Offset: 0x0002786C
		[CLSCompliant(false)]
		public unsafe static void CallLists<T2>(int n, ListNameType type, [In] [Out] T2[,,] lists) where T2 : struct
		{
			fixed (T2* ptr = ref (lists != null && lists.Length != 0) ? ref lists[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), n, type, ptr, GL.EntryPoints[137]);
			}
		}

		// Token: 0x06000CE7 RID: 3303 RVA: 0x000296A8 File Offset: 0x000278A8
		public unsafe static void CallLists<T2>(int n, ListNameType type, [In] [Out] ref T2 lists) where T2 : struct
		{
			fixed (T2* ptr = &lists)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), n, type, ptr, GL.EntryPoints[137]);
			}
		}

		// Token: 0x06000CE8 RID: 3304 RVA: 0x000296CC File Offset: 0x000278CC
		public static FramebufferErrorCode CheckFramebufferStatus(FramebufferTarget target)
		{
			return calli(System.Int32(System.Int32), target, GL.EntryPoints[138]);
		}

		// Token: 0x06000CE9 RID: 3305 RVA: 0x000296E0 File Offset: 0x000278E0
		public static void ClampColor(ClampColorTarget target, ClampColorMode clamp)
		{
			calli(System.Void(System.Int32,System.Int32), target, clamp, GL.EntryPoints[141]);
		}

		// Token: 0x06000CEA RID: 3306 RVA: 0x000296F4 File Offset: 0x000278F4
		public static void Clear(ClearBufferMask mask)
		{
			calli(System.Void(System.Int32), mask, GL.EntryPoints[143]);
		}

		// Token: 0x06000CEB RID: 3307 RVA: 0x00029708 File Offset: 0x00027908
		public static void ClearAccum(float red, float green, float blue, float alpha)
		{
			calli(System.Void(System.Single,System.Single,System.Single,System.Single), red, green, blue, alpha, GL.EntryPoints[144]);
		}

		// Token: 0x06000CEC RID: 3308 RVA: 0x00029720 File Offset: 0x00027920
		public static void ClearBufferData(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, format, type, data, GL.EntryPoints[146]);
		}

		// Token: 0x06000CED RID: 3309 RVA: 0x00029738 File Offset: 0x00027938
		[CLSCompliant(false)]
		public unsafe static void ClearBufferData<T4>(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, [In] [Out] T4[] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, format, type, ptr, GL.EntryPoints[146]);
			}
		}

		// Token: 0x06000CEE RID: 3310 RVA: 0x00029774 File Offset: 0x00027974
		[CLSCompliant(false)]
		public unsafe static void ClearBufferData<T4>(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, [In] [Out] T4[,] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, format, type, ptr, GL.EntryPoints[146]);
			}
		}

		// Token: 0x06000CEF RID: 3311 RVA: 0x000297B4 File Offset: 0x000279B4
		[CLSCompliant(false)]
		public unsafe static void ClearBufferData<T4>(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, [In] [Out] T4[,,] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, format, type, ptr, GL.EntryPoints[146]);
			}
		}

		// Token: 0x06000CF0 RID: 3312 RVA: 0x000297F4 File Offset: 0x000279F4
		public unsafe static void ClearBufferData<T4>(BufferTarget target, PixelInternalFormat internalformat, PixelFormat format, All type, [In] [Out] ref T4 data) where T4 : struct
		{
			fixed (T4* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, format, type, ptr, GL.EntryPoints[146]);
			}
		}

		// Token: 0x06000CF1 RID: 3313 RVA: 0x0002981C File Offset: 0x00027A1C
		[Obsolete("Use ClearBufferCombined overload instead")]
		public static void ClearBuffer(ClearBuffer buffer, int drawbuffer, float depth, int stencil)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single,System.Int32), buffer, drawbuffer, depth, stencil, GL.EntryPoints[147]);
		}

		// Token: 0x06000CF2 RID: 3314 RVA: 0x00029834 File Offset: 0x00027A34
		public static void ClearBuffer(ClearBufferCombined buffer, int drawbuffer, float depth, int stencil)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single,System.Int32), buffer, drawbuffer, depth, stencil, GL.EntryPoints[147]);
		}

		// Token: 0x06000CF3 RID: 3315 RVA: 0x0002984C File Offset: 0x00027A4C
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), buffer, drawbuffer, ptr, GL.EntryPoints[148]);
			}
		}

		// Token: 0x06000CF4 RID: 3316 RVA: 0x00029884 File Offset: 0x00027A84
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), buffer, drawbuffer, ptr, GL.EntryPoints[148]);
			}
		}

		// Token: 0x06000CF5 RID: 3317 RVA: 0x000298A8 File Offset: 0x00027AA8
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), buffer, drawbuffer, value, GL.EntryPoints[148]);
		}

		// Token: 0x06000CF6 RID: 3318 RVA: 0x000298C0 File Offset: 0x00027AC0
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), buffer, drawbuffer, ptr, GL.EntryPoints[149]);
			}
		}

		// Token: 0x06000CF7 RID: 3319 RVA: 0x000298F8 File Offset: 0x00027AF8
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), buffer, drawbuffer, ptr, GL.EntryPoints[149]);
			}
		}

		// Token: 0x06000CF8 RID: 3320 RVA: 0x0002991C File Offset: 0x00027B1C
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, int* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), buffer, drawbuffer, value, GL.EntryPoints[149]);
		}

		// Token: 0x06000CF9 RID: 3321 RVA: 0x00029934 File Offset: 0x00027B34
		public static void ClearBufferSubData(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), target, internalformat, offset, size, format, type, data, GL.EntryPoints[150]);
		}

		// Token: 0x06000CFA RID: 3322 RVA: 0x0002995C File Offset: 0x00027B5C
		[CLSCompliant(false)]
		public unsafe static void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, [In] [Out] T6[] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), target, internalformat, offset, size, format, type, ptr, GL.EntryPoints[150]);
			}
		}

		// Token: 0x06000CFB RID: 3323 RVA: 0x0002999C File Offset: 0x00027B9C
		[CLSCompliant(false)]
		public unsafe static void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, [In] [Out] T6[,] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), target, internalformat, offset, size, format, type, ptr, GL.EntryPoints[150]);
			}
		}

		// Token: 0x06000CFC RID: 3324 RVA: 0x000299E0 File Offset: 0x00027BE0
		[CLSCompliant(false)]
		public unsafe static void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, [In] [Out] T6[,,] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), target, internalformat, offset, size, format, type, ptr, GL.EntryPoints[150]);
			}
		}

		// Token: 0x06000CFD RID: 3325 RVA: 0x00029A24 File Offset: 0x00027C24
		public unsafe static void ClearBufferSubData<T6>(BufferTarget target, PixelInternalFormat internalformat, IntPtr offset, IntPtr size, PixelFormat format, All type, [In] [Out] ref T6 data) where T6 : struct
		{
			fixed (T6* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), target, internalformat, offset, size, format, type, ptr, GL.EntryPoints[150]);
			}
		}

		// Token: 0x06000CFE RID: 3326 RVA: 0x00029A50 File Offset: 0x00027C50
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), buffer, drawbuffer, ptr, GL.EntryPoints[151]);
			}
		}

		// Token: 0x06000CFF RID: 3327 RVA: 0x00029A88 File Offset: 0x00027C88
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), buffer, drawbuffer, ptr, GL.EntryPoints[151]);
			}
		}

		// Token: 0x06000D00 RID: 3328 RVA: 0x00029AAC File Offset: 0x00027CAC
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, uint* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), buffer, drawbuffer, value, GL.EntryPoints[151]);
		}

		// Token: 0x06000D01 RID: 3329 RVA: 0x00029AC4 File Offset: 0x00027CC4
		public static void ClearColor(float red, float green, float blue, float alpha)
		{
			calli(System.Void(System.Single,System.Single,System.Single,System.Single), red, green, blue, alpha, GL.EntryPoints[152]);
		}

		// Token: 0x06000D02 RID: 3330 RVA: 0x00029ADC File Offset: 0x00027CDC
		public static void ClearDepth(double depth)
		{
			calli(System.Void(System.Double), depth, GL.EntryPoints[156]);
		}

		// Token: 0x06000D03 RID: 3331 RVA: 0x00029AF0 File Offset: 0x00027CF0
		public static void ClearDepth(float d)
		{
			calli(System.Void(System.Single), d, GL.EntryPoints[158]);
		}

		// Token: 0x06000D04 RID: 3332 RVA: 0x00029B04 File Offset: 0x00027D04
		public static void ClearIndex(float c)
		{
			calli(System.Void(System.Single), c, GL.EntryPoints[161]);
		}

		// Token: 0x06000D05 RID: 3333 RVA: 0x00029B18 File Offset: 0x00027D18
		public static void ClearStencil(int s)
		{
			calli(System.Void(System.Int32), s, GL.EntryPoints[164]);
		}

		// Token: 0x06000D06 RID: 3334 RVA: 0x00029B2C File Offset: 0x00027D2C
		[CLSCompliant(false)]
		public static void ClearTexImage(int texture, int level, PixelFormat format, PixelType type, IntPtr data)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, data, GL.EntryPoints[165]);
		}

		// Token: 0x06000D07 RID: 3335 RVA: 0x00029B44 File Offset: 0x00027D44
		[CLSCompliant(false)]
		public unsafe static void ClearTexImage<T4>(int texture, int level, PixelFormat format, PixelType type, [In] [Out] T4[] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, ptr, GL.EntryPoints[165]);
			}
		}

		// Token: 0x06000D08 RID: 3336 RVA: 0x00029B80 File Offset: 0x00027D80
		[CLSCompliant(false)]
		public unsafe static void ClearTexImage<T4>(int texture, int level, PixelFormat format, PixelType type, [In] [Out] T4[,] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, ptr, GL.EntryPoints[165]);
			}
		}

		// Token: 0x06000D09 RID: 3337 RVA: 0x00029BC0 File Offset: 0x00027DC0
		[CLSCompliant(false)]
		public unsafe static void ClearTexImage<T4>(int texture, int level, PixelFormat format, PixelType type, [In] [Out] T4[,,] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, ptr, GL.EntryPoints[165]);
			}
		}

		// Token: 0x06000D0A RID: 3338 RVA: 0x00029C00 File Offset: 0x00027E00
		[CLSCompliant(false)]
		public unsafe static void ClearTexImage<T4>(int texture, int level, PixelFormat format, PixelType type, [In] [Out] ref T4 data) where T4 : struct
		{
			fixed (T4* ptr = &data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, ptr, GL.EntryPoints[165]);
			}
		}

		// Token: 0x06000D0B RID: 3339 RVA: 0x00029C28 File Offset: 0x00027E28
		[CLSCompliant(false)]
		public static void ClearTexImage(uint texture, int level, PixelFormat format, PixelType type, IntPtr data)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, data, GL.EntryPoints[165]);
		}

		// Token: 0x06000D0C RID: 3340 RVA: 0x00029C40 File Offset: 0x00027E40
		[CLSCompliant(false)]
		public unsafe static void ClearTexImage<T4>(uint texture, int level, PixelFormat format, PixelType type, [In] [Out] T4[] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, ptr, GL.EntryPoints[165]);
			}
		}

		// Token: 0x06000D0D RID: 3341 RVA: 0x00029C7C File Offset: 0x00027E7C
		[CLSCompliant(false)]
		public unsafe static void ClearTexImage<T4>(uint texture, int level, PixelFormat format, PixelType type, [In] [Out] T4[,] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, ptr, GL.EntryPoints[165]);
			}
		}

		// Token: 0x06000D0E RID: 3342 RVA: 0x00029CBC File Offset: 0x00027EBC
		[CLSCompliant(false)]
		public unsafe static void ClearTexImage<T4>(uint texture, int level, PixelFormat format, PixelType type, [In] [Out] T4[,,] data) where T4 : struct
		{
			fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, ptr, GL.EntryPoints[165]);
			}
		}

		// Token: 0x06000D0F RID: 3343 RVA: 0x00029CFC File Offset: 0x00027EFC
		[CLSCompliant(false)]
		public unsafe static void ClearTexImage<T4>(uint texture, int level, PixelFormat format, PixelType type, [In] [Out] ref T4 data) where T4 : struct
		{
			fixed (T4* ptr = &data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, format, type, ptr, GL.EntryPoints[165]);
			}
		}

		// Token: 0x06000D10 RID: 3344 RVA: 0x00029D24 File Offset: 0x00027F24
		[CLSCompliant(false)]
		public static void ClearTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data, GL.EntryPoints[166]);
		}

		// Token: 0x06000D11 RID: 3345 RVA: 0x00029D54 File Offset: 0x00027F54
		[CLSCompliant(false)]
		public unsafe static void ClearTexSubImage<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[166]);
			}
		}

		// Token: 0x06000D12 RID: 3346 RVA: 0x00029D9C File Offset: 0x00027F9C
		[CLSCompliant(false)]
		public unsafe static void ClearTexSubImage<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[,] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[166]);
			}
		}

		// Token: 0x06000D13 RID: 3347 RVA: 0x00029DE8 File Offset: 0x00027FE8
		[CLSCompliant(false)]
		public unsafe static void ClearTexSubImage<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[,,] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[166]);
			}
		}

		// Token: 0x06000D14 RID: 3348 RVA: 0x00029E34 File Offset: 0x00028034
		[CLSCompliant(false)]
		public unsafe static void ClearTexSubImage<T10>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] ref T10 data) where T10 : struct
		{
			fixed (T10* ptr = &data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[166]);
			}
		}

		// Token: 0x06000D15 RID: 3349 RVA: 0x00029E68 File Offset: 0x00028068
		[CLSCompliant(false)]
		public static void ClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data, GL.EntryPoints[166]);
		}

		// Token: 0x06000D16 RID: 3350 RVA: 0x00029E98 File Offset: 0x00028098
		[CLSCompliant(false)]
		public unsafe static void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[166]);
			}
		}

		// Token: 0x06000D17 RID: 3351 RVA: 0x00029EE0 File Offset: 0x000280E0
		[CLSCompliant(false)]
		public unsafe static void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[,] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[166]);
			}
		}

		// Token: 0x06000D18 RID: 3352 RVA: 0x00029F2C File Offset: 0x0002812C
		[CLSCompliant(false)]
		public unsafe static void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[,,] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[166]);
			}
		}

		// Token: 0x06000D19 RID: 3353 RVA: 0x00029F78 File Offset: 0x00028178
		[CLSCompliant(false)]
		public unsafe static void ClearTexSubImage<T10>(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] ref T10 data) where T10 : struct
		{
			fixed (T10* ptr = &data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[166]);
			}
		}

		// Token: 0x06000D1A RID: 3354 RVA: 0x00029FAC File Offset: 0x000281AC
		public static void ClientActiveTexture(TextureUnit texture)
		{
			calli(System.Void(System.Int32), texture, GL.EntryPoints[167]);
		}

		// Token: 0x06000D1B RID: 3355 RVA: 0x00029FC0 File Offset: 0x000281C0
		[CLSCompliant(false)]
		public static WaitSyncStatus ClientWaitSync(IntPtr sync, ClientWaitSyncFlags flags, long timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[171]);
		}

		// Token: 0x06000D1C RID: 3356 RVA: 0x00029FD8 File Offset: 0x000281D8
		[CLSCompliant(false)]
		public static WaitSyncStatus ClientWaitSync(IntPtr sync, ClientWaitSyncFlags flags, ulong timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[171]);
		}

		// Token: 0x06000D1D RID: 3357 RVA: 0x00029FF0 File Offset: 0x000281F0
		[CLSCompliant(false)]
		[Obsolete("Use ClientWaitSyncFlags overload instead")]
		public static WaitSyncStatus ClientWaitSync(IntPtr sync, int flags, long timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[171]);
		}

		// Token: 0x06000D1E RID: 3358 RVA: 0x0002A008 File Offset: 0x00028208
		[Obsolete("Use ClientWaitSyncFlags overload instead")]
		[CLSCompliant(false)]
		public static WaitSyncStatus ClientWaitSync(IntPtr sync, int flags, ulong timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[171]);
		}

		// Token: 0x06000D1F RID: 3359 RVA: 0x0002A020 File Offset: 0x00028220
		[Obsolete("Use ClientWaitSyncFlags overload instead")]
		[CLSCompliant(false)]
		public static WaitSyncStatus ClientWaitSync(IntPtr sync, uint flags, ulong timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[171]);
		}

		// Token: 0x06000D20 RID: 3360 RVA: 0x0002A038 File Offset: 0x00028238
		[CLSCompliant(false)]
		public unsafe static void ClipPlane(ClipPlaneName plane, double[] equation)
		{
			fixed (double* ptr = ref (equation != null && equation.Length != 0) ? ref equation[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Double*), plane, ptr, GL.EntryPoints[172]);
			}
		}

		// Token: 0x06000D21 RID: 3361 RVA: 0x0002A06C File Offset: 0x0002826C
		[CLSCompliant(false)]
		public unsafe static void ClipPlane(ClipPlaneName plane, ref double equation)
		{
			fixed (double* ptr = &equation)
			{
				calli(System.Void(System.Int32,System.Double*), plane, ptr, GL.EntryPoints[172]);
			}
		}

		// Token: 0x06000D22 RID: 3362 RVA: 0x0002A090 File Offset: 0x00028290
		[CLSCompliant(false)]
		public unsafe static void ClipPlane(ClipPlaneName plane, double* equation)
		{
			calli(System.Void(System.Int32,System.Double*), plane, equation, GL.EntryPoints[172]);
		}

		// Token: 0x06000D23 RID: 3363 RVA: 0x0002A0A4 File Offset: 0x000282A4
		[CLSCompliant(false)]
		public static void Color3(sbyte red, sbyte green, sbyte blue)
		{
			calli(System.Void(System.SByte,System.SByte,System.SByte), red, green, blue, GL.EntryPoints[175]);
		}

		// Token: 0x06000D24 RID: 3364 RVA: 0x0002A0BC File Offset: 0x000282BC
		[CLSCompliant(false)]
		public unsafe static void Color3(sbyte[] v)
		{
			fixed (sbyte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.SByte*), ptr, GL.EntryPoints[176]);
			}
		}

		// Token: 0x06000D25 RID: 3365 RVA: 0x0002A0F0 File Offset: 0x000282F0
		[CLSCompliant(false)]
		public unsafe static void Color3(ref sbyte v)
		{
			fixed (sbyte* ptr = &v)
			{
				calli(System.Void(System.SByte*), ptr, GL.EntryPoints[176]);
			}
		}

		// Token: 0x06000D26 RID: 3366 RVA: 0x0002A114 File Offset: 0x00028314
		[CLSCompliant(false)]
		public unsafe static void Color3(sbyte* v)
		{
			calli(System.Void(System.SByte*), v, GL.EntryPoints[176]);
		}

		// Token: 0x06000D27 RID: 3367 RVA: 0x0002A128 File Offset: 0x00028328
		public static void Color3(double red, double green, double blue)
		{
			calli(System.Void(System.Double,System.Double,System.Double), red, green, blue, GL.EntryPoints[177]);
		}

		// Token: 0x06000D28 RID: 3368 RVA: 0x0002A140 File Offset: 0x00028340
		[CLSCompliant(false)]
		public unsafe static void Color3(double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[178]);
			}
		}

		// Token: 0x06000D29 RID: 3369 RVA: 0x0002A174 File Offset: 0x00028374
		[CLSCompliant(false)]
		public unsafe static void Color3(ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[178]);
			}
		}

		// Token: 0x06000D2A RID: 3370 RVA: 0x0002A198 File Offset: 0x00028398
		[CLSCompliant(false)]
		public unsafe static void Color3(double* v)
		{
			calli(System.Void(System.Double*), v, GL.EntryPoints[178]);
		}

		// Token: 0x06000D2B RID: 3371 RVA: 0x0002A1AC File Offset: 0x000283AC
		public static void Color3(float red, float green, float blue)
		{
			calli(System.Void(System.Single,System.Single,System.Single), red, green, blue, GL.EntryPoints[179]);
		}

		// Token: 0x06000D2C RID: 3372 RVA: 0x0002A1C4 File Offset: 0x000283C4
		[CLSCompliant(false)]
		public unsafe static void Color3(float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[180]);
			}
		}

		// Token: 0x06000D2D RID: 3373 RVA: 0x0002A1F8 File Offset: 0x000283F8
		[CLSCompliant(false)]
		public unsafe static void Color3(ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[180]);
			}
		}

		// Token: 0x06000D2E RID: 3374 RVA: 0x0002A21C File Offset: 0x0002841C
		[CLSCompliant(false)]
		public unsafe static void Color3(float* v)
		{
			calli(System.Void(System.Single*), v, GL.EntryPoints[180]);
		}

		// Token: 0x06000D2F RID: 3375 RVA: 0x0002A230 File Offset: 0x00028430
		public static void Color3(int red, int green, int blue)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), red, green, blue, GL.EntryPoints[185]);
		}

		// Token: 0x06000D30 RID: 3376 RVA: 0x0002A248 File Offset: 0x00028448
		[CLSCompliant(false)]
		public unsafe static void Color3(int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[186]);
			}
		}

		// Token: 0x06000D31 RID: 3377 RVA: 0x0002A27C File Offset: 0x0002847C
		[CLSCompliant(false)]
		public unsafe static void Color3(ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[186]);
			}
		}

		// Token: 0x06000D32 RID: 3378 RVA: 0x0002A2A0 File Offset: 0x000284A0
		[CLSCompliant(false)]
		public unsafe static void Color3(int* v)
		{
			calli(System.Void(System.Int32*), v, GL.EntryPoints[186]);
		}

		// Token: 0x06000D33 RID: 3379 RVA: 0x0002A2B4 File Offset: 0x000284B4
		public static void Color3(short red, short green, short blue)
		{
			calli(System.Void(System.Int16,System.Int16,System.Int16), red, green, blue, GL.EntryPoints[187]);
		}

		// Token: 0x06000D34 RID: 3380 RVA: 0x0002A2CC File Offset: 0x000284CC
		[CLSCompliant(false)]
		public unsafe static void Color3(short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[188]);
			}
		}

		// Token: 0x06000D35 RID: 3381 RVA: 0x0002A300 File Offset: 0x00028500
		[CLSCompliant(false)]
		public unsafe static void Color3(ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[188]);
			}
		}

		// Token: 0x06000D36 RID: 3382 RVA: 0x0002A324 File Offset: 0x00028524
		[CLSCompliant(false)]
		public unsafe static void Color3(short* v)
		{
			calli(System.Void(System.Int16*), v, GL.EntryPoints[188]);
		}

		// Token: 0x06000D37 RID: 3383 RVA: 0x0002A338 File Offset: 0x00028538
		public static void Color3(byte red, byte green, byte blue)
		{
			calli(System.Void(System.Byte,System.Byte,System.Byte), red, green, blue, GL.EntryPoints[189]);
		}

		// Token: 0x06000D38 RID: 3384 RVA: 0x0002A350 File Offset: 0x00028550
		[CLSCompliant(false)]
		public unsafe static void Color3(byte[] v)
		{
			fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Byte*), ptr, GL.EntryPoints[190]);
			}
		}

		// Token: 0x06000D39 RID: 3385 RVA: 0x0002A384 File Offset: 0x00028584
		[CLSCompliant(false)]
		public unsafe static void Color3(ref byte v)
		{
			fixed (byte* ptr = &v)
			{
				calli(System.Void(System.Byte*), ptr, GL.EntryPoints[190]);
			}
		}

		// Token: 0x06000D3A RID: 3386 RVA: 0x0002A3A8 File Offset: 0x000285A8
		[CLSCompliant(false)]
		public unsafe static void Color3(byte* v)
		{
			calli(System.Void(System.Byte*), v, GL.EntryPoints[190]);
		}

		// Token: 0x06000D3B RID: 3387 RVA: 0x0002A3BC File Offset: 0x000285BC
		[CLSCompliant(false)]
		public static void Color3(uint red, uint green, uint blue)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), red, green, blue, GL.EntryPoints[191]);
		}

		// Token: 0x06000D3C RID: 3388 RVA: 0x0002A3D4 File Offset: 0x000285D4
		[CLSCompliant(false)]
		public unsafe static void Color3(uint[] v)
		{
			fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[192]);
			}
		}

		// Token: 0x06000D3D RID: 3389 RVA: 0x0002A408 File Offset: 0x00028608
		[CLSCompliant(false)]
		public unsafe static void Color3(ref uint v)
		{
			fixed (uint* ptr = &v)
			{
				calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[192]);
			}
		}

		// Token: 0x06000D3E RID: 3390 RVA: 0x0002A42C File Offset: 0x0002862C
		[CLSCompliant(false)]
		public unsafe static void Color3(uint* v)
		{
			calli(System.Void(System.UInt32*), v, GL.EntryPoints[192]);
		}

		// Token: 0x06000D3F RID: 3391 RVA: 0x0002A440 File Offset: 0x00028640
		[CLSCompliant(false)]
		public static void Color3(ushort red, ushort green, ushort blue)
		{
			calli(System.Void(System.UInt16,System.UInt16,System.UInt16), red, green, blue, GL.EntryPoints[193]);
		}

		// Token: 0x06000D40 RID: 3392 RVA: 0x0002A458 File Offset: 0x00028658
		[CLSCompliant(false)]
		public unsafe static void Color3(ushort[] v)
		{
			fixed (ushort* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt16*), ptr, GL.EntryPoints[194]);
			}
		}

		// Token: 0x06000D41 RID: 3393 RVA: 0x0002A48C File Offset: 0x0002868C
		[CLSCompliant(false)]
		public unsafe static void Color3(ref ushort v)
		{
			fixed (ushort* ptr = &v)
			{
				calli(System.Void(System.UInt16*), ptr, GL.EntryPoints[194]);
			}
		}

		// Token: 0x06000D42 RID: 3394 RVA: 0x0002A4B0 File Offset: 0x000286B0
		[CLSCompliant(false)]
		public unsafe static void Color3(ushort* v)
		{
			calli(System.Void(System.UInt16*), v, GL.EntryPoints[194]);
		}

		// Token: 0x06000D43 RID: 3395 RVA: 0x0002A4C4 File Offset: 0x000286C4
		[CLSCompliant(false)]
		public static void Color4(sbyte red, sbyte green, sbyte blue, sbyte alpha)
		{
			calli(System.Void(System.SByte,System.SByte,System.SByte,System.SByte), red, green, blue, alpha, GL.EntryPoints[197]);
		}

		// Token: 0x06000D44 RID: 3396 RVA: 0x0002A4DC File Offset: 0x000286DC
		[CLSCompliant(false)]
		public unsafe static void Color4(sbyte[] v)
		{
			fixed (sbyte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.SByte*), ptr, GL.EntryPoints[198]);
			}
		}

		// Token: 0x06000D45 RID: 3397 RVA: 0x0002A510 File Offset: 0x00028710
		[CLSCompliant(false)]
		public unsafe static void Color4(ref sbyte v)
		{
			fixed (sbyte* ptr = &v)
			{
				calli(System.Void(System.SByte*), ptr, GL.EntryPoints[198]);
			}
		}

		// Token: 0x06000D46 RID: 3398 RVA: 0x0002A534 File Offset: 0x00028734
		[CLSCompliant(false)]
		public unsafe static void Color4(sbyte* v)
		{
			calli(System.Void(System.SByte*), v, GL.EntryPoints[198]);
		}

		// Token: 0x06000D47 RID: 3399 RVA: 0x0002A548 File Offset: 0x00028748
		public static void Color4(double red, double green, double blue, double alpha)
		{
			calli(System.Void(System.Double,System.Double,System.Double,System.Double), red, green, blue, alpha, GL.EntryPoints[199]);
		}

		// Token: 0x06000D48 RID: 3400 RVA: 0x0002A560 File Offset: 0x00028760
		[CLSCompliant(false)]
		public unsafe static void Color4(double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[200]);
			}
		}

		// Token: 0x06000D49 RID: 3401 RVA: 0x0002A594 File Offset: 0x00028794
		[CLSCompliant(false)]
		public unsafe static void Color4(ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[200]);
			}
		}

		// Token: 0x06000D4A RID: 3402 RVA: 0x0002A5B8 File Offset: 0x000287B8
		[CLSCompliant(false)]
		public unsafe static void Color4(double* v)
		{
			calli(System.Void(System.Double*), v, GL.EntryPoints[200]);
		}

		// Token: 0x06000D4B RID: 3403 RVA: 0x0002A5CC File Offset: 0x000287CC
		public static void Color4(float red, float green, float blue, float alpha)
		{
			calli(System.Void(System.Single,System.Single,System.Single,System.Single), red, green, blue, alpha, GL.EntryPoints[201]);
		}

		// Token: 0x06000D4C RID: 3404 RVA: 0x0002A5E4 File Offset: 0x000287E4
		[CLSCompliant(false)]
		public unsafe static void Color4(float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[204]);
			}
		}

		// Token: 0x06000D4D RID: 3405 RVA: 0x0002A618 File Offset: 0x00028818
		[CLSCompliant(false)]
		public unsafe static void Color4(ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[204]);
			}
		}

		// Token: 0x06000D4E RID: 3406 RVA: 0x0002A63C File Offset: 0x0002883C
		[CLSCompliant(false)]
		public unsafe static void Color4(float* v)
		{
			calli(System.Void(System.Single*), v, GL.EntryPoints[204]);
		}

		// Token: 0x06000D4F RID: 3407 RVA: 0x0002A650 File Offset: 0x00028850
		public static void Color4(int red, int green, int blue, int alpha)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), red, green, blue, alpha, GL.EntryPoints[207]);
		}

		// Token: 0x06000D50 RID: 3408 RVA: 0x0002A668 File Offset: 0x00028868
		[CLSCompliant(false)]
		public unsafe static void Color4(int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[208]);
			}
		}

		// Token: 0x06000D51 RID: 3409 RVA: 0x0002A69C File Offset: 0x0002889C
		[CLSCompliant(false)]
		public unsafe static void Color4(ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[208]);
			}
		}

		// Token: 0x06000D52 RID: 3410 RVA: 0x0002A6C0 File Offset: 0x000288C0
		[CLSCompliant(false)]
		public unsafe static void Color4(int* v)
		{
			calli(System.Void(System.Int32*), v, GL.EntryPoints[208]);
		}

		// Token: 0x06000D53 RID: 3411 RVA: 0x0002A6D4 File Offset: 0x000288D4
		public static void Color4(short red, short green, short blue, short alpha)
		{
			calli(System.Void(System.Int16,System.Int16,System.Int16,System.Int16), red, green, blue, alpha, GL.EntryPoints[209]);
		}

		// Token: 0x06000D54 RID: 3412 RVA: 0x0002A6EC File Offset: 0x000288EC
		[CLSCompliant(false)]
		public unsafe static void Color4(short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[210]);
			}
		}

		// Token: 0x06000D55 RID: 3413 RVA: 0x0002A720 File Offset: 0x00028920
		[CLSCompliant(false)]
		public unsafe static void Color4(ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[210]);
			}
		}

		// Token: 0x06000D56 RID: 3414 RVA: 0x0002A744 File Offset: 0x00028944
		[CLSCompliant(false)]
		public unsafe static void Color4(short* v)
		{
			calli(System.Void(System.Int16*), v, GL.EntryPoints[210]);
		}

		// Token: 0x06000D57 RID: 3415 RVA: 0x0002A758 File Offset: 0x00028958
		public static void Color4(byte red, byte green, byte blue, byte alpha)
		{
			calli(System.Void(System.Byte,System.Byte,System.Byte,System.Byte), red, green, blue, alpha, GL.EntryPoints[211]);
		}

		// Token: 0x06000D58 RID: 3416 RVA: 0x0002A770 File Offset: 0x00028970
		[CLSCompliant(false)]
		public unsafe static void Color4(byte[] v)
		{
			fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Byte*), ptr, GL.EntryPoints[212]);
			}
		}

		// Token: 0x06000D59 RID: 3417 RVA: 0x0002A7A4 File Offset: 0x000289A4
		[CLSCompliant(false)]
		public unsafe static void Color4(ref byte v)
		{
			fixed (byte* ptr = &v)
			{
				calli(System.Void(System.Byte*), ptr, GL.EntryPoints[212]);
			}
		}

		// Token: 0x06000D5A RID: 3418 RVA: 0x0002A7C8 File Offset: 0x000289C8
		[CLSCompliant(false)]
		public unsafe static void Color4(byte* v)
		{
			calli(System.Void(System.Byte*), v, GL.EntryPoints[212]);
		}

		// Token: 0x06000D5B RID: 3419 RVA: 0x0002A7DC File Offset: 0x000289DC
		[CLSCompliant(false)]
		public static void Color4(uint red, uint green, uint blue, uint alpha)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.UInt32), red, green, blue, alpha, GL.EntryPoints[217]);
		}

		// Token: 0x06000D5C RID: 3420 RVA: 0x0002A7F4 File Offset: 0x000289F4
		[CLSCompliant(false)]
		public unsafe static void Color4(uint[] v)
		{
			fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[218]);
			}
		}

		// Token: 0x06000D5D RID: 3421 RVA: 0x0002A828 File Offset: 0x00028A28
		[CLSCompliant(false)]
		public unsafe static void Color4(ref uint v)
		{
			fixed (uint* ptr = &v)
			{
				calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[218]);
			}
		}

		// Token: 0x06000D5E RID: 3422 RVA: 0x0002A84C File Offset: 0x00028A4C
		[CLSCompliant(false)]
		public unsafe static void Color4(uint* v)
		{
			calli(System.Void(System.UInt32*), v, GL.EntryPoints[218]);
		}

		// Token: 0x06000D5F RID: 3423 RVA: 0x0002A860 File Offset: 0x00028A60
		[CLSCompliant(false)]
		public static void Color4(ushort red, ushort green, ushort blue, ushort alpha)
		{
			calli(System.Void(System.UInt16,System.UInt16,System.UInt16,System.UInt16), red, green, blue, alpha, GL.EntryPoints[219]);
		}

		// Token: 0x06000D60 RID: 3424 RVA: 0x0002A878 File Offset: 0x00028A78
		[CLSCompliant(false)]
		public unsafe static void Color4(ushort[] v)
		{
			fixed (ushort* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt16*), ptr, GL.EntryPoints[220]);
			}
		}

		// Token: 0x06000D61 RID: 3425 RVA: 0x0002A8AC File Offset: 0x00028AAC
		[CLSCompliant(false)]
		public unsafe static void Color4(ref ushort v)
		{
			fixed (ushort* ptr = &v)
			{
				calli(System.Void(System.UInt16*), ptr, GL.EntryPoints[220]);
			}
		}

		// Token: 0x06000D62 RID: 3426 RVA: 0x0002A8D0 File Offset: 0x00028AD0
		[CLSCompliant(false)]
		public unsafe static void Color4(ushort* v)
		{
			calli(System.Void(System.UInt16*), v, GL.EntryPoints[220]);
		}

		// Token: 0x06000D63 RID: 3427 RVA: 0x0002A8E4 File Offset: 0x00028AE4
		public static void ColorMask(bool red, bool green, bool blue, bool alpha)
		{
			calli(System.Void(System.Boolean,System.Boolean,System.Boolean,System.Boolean), red, green, blue, alpha, GL.EntryPoints[227]);
		}

		// Token: 0x06000D64 RID: 3428 RVA: 0x0002A8FC File Offset: 0x00028AFC
		[CLSCompliant(false)]
		public static void ColorMask(int index, bool r, bool g, bool b, bool a)
		{
			calli(System.Void(System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean), index, r, g, b, a, GL.EntryPoints[228]);
		}

		// Token: 0x06000D65 RID: 3429 RVA: 0x0002A914 File Offset: 0x00028B14
		[CLSCompliant(false)]
		public static void ColorMask(uint index, bool r, bool g, bool b, bool a)
		{
			calli(System.Void(System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean), index, r, g, b, a, GL.EntryPoints[228]);
		}

		// Token: 0x06000D66 RID: 3430 RVA: 0x0002A92C File Offset: 0x00028B2C
		public static void ColorMaterial(MaterialFace face, ColorMaterialParameter mode)
		{
			calli(System.Void(System.Int32,System.Int32), face, mode, GL.EntryPoints[230]);
		}

		// Token: 0x06000D67 RID: 3431 RVA: 0x0002A940 File Offset: 0x00028B40
		[CLSCompliant(false)]
		public static void ColorP3(PackedPointerType type, int color)
		{
			calli(System.Void(System.Int32,System.UInt32), type, color, GL.EntryPoints[231]);
		}

		// Token: 0x06000D68 RID: 3432 RVA: 0x0002A954 File Offset: 0x00028B54
		[CLSCompliant(false)]
		public static void ColorP3(PackedPointerType type, uint color)
		{
			calli(System.Void(System.Int32,System.UInt32), type, color, GL.EntryPoints[231]);
		}

		// Token: 0x06000D69 RID: 3433 RVA: 0x0002A968 File Offset: 0x00028B68
		[CLSCompliant(false)]
		public unsafe static void ColorP3(PackedPointerType type, int* color)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, color, GL.EntryPoints[232]);
		}

		// Token: 0x06000D6A RID: 3434 RVA: 0x0002A97C File Offset: 0x00028B7C
		[CLSCompliant(false)]
		public unsafe static void ColorP3(PackedPointerType type, uint* color)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, color, GL.EntryPoints[232]);
		}

		// Token: 0x06000D6B RID: 3435 RVA: 0x0002A990 File Offset: 0x00028B90
		[CLSCompliant(false)]
		public static void ColorP4(PackedPointerType type, int color)
		{
			calli(System.Void(System.Int32,System.UInt32), type, color, GL.EntryPoints[233]);
		}

		// Token: 0x06000D6C RID: 3436 RVA: 0x0002A9A4 File Offset: 0x00028BA4
		[CLSCompliant(false)]
		public static void ColorP4(PackedPointerType type, uint color)
		{
			calli(System.Void(System.Int32,System.UInt32), type, color, GL.EntryPoints[233]);
		}

		// Token: 0x06000D6D RID: 3437 RVA: 0x0002A9B8 File Offset: 0x00028BB8
		[CLSCompliant(false)]
		public unsafe static void ColorP4(PackedPointerType type, int* color)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, color, GL.EntryPoints[234]);
		}

		// Token: 0x06000D6E RID: 3438 RVA: 0x0002A9CC File Offset: 0x00028BCC
		[CLSCompliant(false)]
		public unsafe static void ColorP4(PackedPointerType type, uint* color)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, color, GL.EntryPoints[234]);
		}

		// Token: 0x06000D6F RID: 3439 RVA: 0x0002A9E0 File Offset: 0x00028BE0
		public static void ColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, pointer, GL.EntryPoints[235]);
		}

		// Token: 0x06000D70 RID: 3440 RVA: 0x0002A9F8 File Offset: 0x00028BF8
		[CLSCompliant(false)]
		public unsafe static void ColorPointer<T3>(int size, ColorPointerType type, int stride, [In] [Out] T3[] pointer) where T3 : struct
		{
			fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[235]);
			}
		}

		// Token: 0x06000D71 RID: 3441 RVA: 0x0002AA30 File Offset: 0x00028C30
		[CLSCompliant(false)]
		public unsafe static void ColorPointer<T3>(int size, ColorPointerType type, int stride, [In] [Out] T3[,] pointer) where T3 : struct
		{
			fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[235]);
			}
		}

		// Token: 0x06000D72 RID: 3442 RVA: 0x0002AA6C File Offset: 0x00028C6C
		[CLSCompliant(false)]
		public unsafe static void ColorPointer<T3>(int size, ColorPointerType type, int stride, [In] [Out] T3[,,] pointer) where T3 : struct
		{
			fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[235]);
			}
		}

		// Token: 0x06000D73 RID: 3443 RVA: 0x0002AAA8 File Offset: 0x00028CA8
		public unsafe static void ColorPointer<T3>(int size, ColorPointerType type, int stride, [In] [Out] ref T3 pointer) where T3 : struct
		{
			fixed (T3* ptr = &pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[235]);
			}
		}

		// Token: 0x06000D74 RID: 3444 RVA: 0x0002AACC File Offset: 0x00028CCC
		public static void ColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, start, count, format, type, data, GL.EntryPoints[239]);
		}

		// Token: 0x06000D75 RID: 3445 RVA: 0x0002AAE8 File Offset: 0x00028CE8
		[CLSCompliant(false)]
		public unsafe static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In] [Out] T5[] data) where T5 : struct
		{
			fixed (T5* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, start, count, format, type, ptr, GL.EntryPoints[239]);
			}
		}

		// Token: 0x06000D76 RID: 3446 RVA: 0x0002AB24 File Offset: 0x00028D24
		[CLSCompliant(false)]
		public unsafe static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In] [Out] T5[,] data) where T5 : struct
		{
			fixed (T5* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, start, count, format, type, ptr, GL.EntryPoints[239]);
			}
		}

		// Token: 0x06000D77 RID: 3447 RVA: 0x0002AB64 File Offset: 0x00028D64
		[CLSCompliant(false)]
		public unsafe static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In] [Out] T5[,,] data) where T5 : struct
		{
			fixed (T5* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, start, count, format, type, ptr, GL.EntryPoints[239]);
			}
		}

		// Token: 0x06000D78 RID: 3448 RVA: 0x0002ABA8 File Offset: 0x00028DA8
		public unsafe static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In] [Out] ref T5 data) where T5 : struct
		{
			fixed (T5* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, start, count, format, type, ptr, GL.EntryPoints[239]);
			}
		}

		// Token: 0x06000D79 RID: 3449 RVA: 0x0002ABD0 File Offset: 0x00028DD0
		public static void ColorTable(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, table, GL.EntryPoints[241]);
		}

		// Token: 0x06000D7A RID: 3450 RVA: 0x0002ABEC File Offset: 0x00028DEC
		[CLSCompliant(false)]
		public unsafe static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[] table) where T5 : struct
		{
			fixed (T5* ptr = ref (table != null && table.Length != 0) ? ref table[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[241]);
			}
		}

		// Token: 0x06000D7B RID: 3451 RVA: 0x0002AC28 File Offset: 0x00028E28
		[CLSCompliant(false)]
		public unsafe static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,] table) where T5 : struct
		{
			fixed (T5* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[241]);
			}
		}

		// Token: 0x06000D7C RID: 3452 RVA: 0x0002AC68 File Offset: 0x00028E68
		[CLSCompliant(false)]
		public unsafe static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,,] table) where T5 : struct
		{
			fixed (T5* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[241]);
			}
		}

		// Token: 0x06000D7D RID: 3453 RVA: 0x0002ACAC File Offset: 0x00028EAC
		public unsafe static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] ref T5 table) where T5 : struct
		{
			fixed (T5* ptr = &table)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[241]);
			}
		}

		// Token: 0x06000D7E RID: 3454 RVA: 0x0002ACD4 File Offset: 0x00028ED4
		[CLSCompliant(false)]
		public unsafe static void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[243]);
			}
		}

		// Token: 0x06000D7F RID: 3455 RVA: 0x0002AD0C File Offset: 0x00028F0C
		[CLSCompliant(false)]
		public unsafe static void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, ref float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[243]);
			}
		}

		// Token: 0x06000D80 RID: 3456 RVA: 0x0002AD30 File Offset: 0x00028F30
		[CLSCompliant(false)]
		public unsafe static void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[243]);
		}

		// Token: 0x06000D81 RID: 3457 RVA: 0x0002AD48 File Offset: 0x00028F48
		[CLSCompliant(false)]
		public unsafe static void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[245]);
			}
		}

		// Token: 0x06000D82 RID: 3458 RVA: 0x0002AD80 File Offset: 0x00028F80
		[CLSCompliant(false)]
		public unsafe static void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, ref int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[245]);
			}
		}

		// Token: 0x06000D83 RID: 3459 RVA: 0x0002ADA4 File Offset: 0x00028FA4
		[CLSCompliant(false)]
		public unsafe static void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[245]);
		}

		// Token: 0x06000D84 RID: 3460 RVA: 0x0002ADBC File Offset: 0x00028FBC
		[CLSCompliant(false)]
		public static void CompileShader(int shader)
		{
			calli(System.Void(System.UInt32), shader, GL.EntryPoints[255]);
		}

		// Token: 0x06000D85 RID: 3461 RVA: 0x0002ADD0 File Offset: 0x00028FD0
		[CLSCompliant(false)]
		public static void CompileShader(uint shader)
		{
			calli(System.Void(System.UInt32), shader, GL.EntryPoints[255]);
		}

		// Token: 0x06000D86 RID: 3462 RVA: 0x0002ADE4 File Offset: 0x00028FE4
		public static void CompressedTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, imageSize, data, GL.EntryPoints[264]);
		}

		// Token: 0x06000D87 RID: 3463 RVA: 0x0002AE0C File Offset: 0x0002900C
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In] [Out] T6[] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[264]);
			}
		}

		// Token: 0x06000D88 RID: 3464 RVA: 0x0002AE4C File Offset: 0x0002904C
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In] [Out] T6[,] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[264]);
			}
		}

		// Token: 0x06000D89 RID: 3465 RVA: 0x0002AE90 File Offset: 0x00029090
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In] [Out] T6[,,] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[264]);
			}
		}

		// Token: 0x06000D8A RID: 3466 RVA: 0x0002AED4 File Offset: 0x000290D4
		public unsafe static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In] [Out] ref T6 data) where T6 : struct
		{
			fixed (T6* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[264]);
			}
		}

		// Token: 0x06000D8B RID: 3467 RVA: 0x0002AF00 File Offset: 0x00029100
		public static void CompressedTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, data, GL.EntryPoints[266]);
		}

		// Token: 0x06000D8C RID: 3468 RVA: 0x0002AF2C File Offset: 0x0002912C
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[] data) where T7 : struct
		{
			fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[266]);
			}
		}

		// Token: 0x06000D8D RID: 3469 RVA: 0x0002AF6C File Offset: 0x0002916C
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[,] data) where T7 : struct
		{
			fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[266]);
			}
		}

		// Token: 0x06000D8E RID: 3470 RVA: 0x0002AFB0 File Offset: 0x000291B0
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[,,] data) where T7 : struct
		{
			fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[266]);
			}
		}

		// Token: 0x06000D8F RID: 3471 RVA: 0x0002AFF8 File Offset: 0x000291F8
		public unsafe static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In] [Out] ref T7 data) where T7 : struct
		{
			fixed (T7* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[266]);
			}
		}

		// Token: 0x06000D90 RID: 3472 RVA: 0x0002B024 File Offset: 0x00029224
		public static void CompressedTexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, data, GL.EntryPoints[268]);
		}

		// Token: 0x06000D91 RID: 3473 RVA: 0x0002B050 File Offset: 0x00029250
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[268]);
			}
		}

		// Token: 0x06000D92 RID: 3474 RVA: 0x0002B094 File Offset: 0x00029294
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[,] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[268]);
			}
		}

		// Token: 0x06000D93 RID: 3475 RVA: 0x0002B0DC File Offset: 0x000292DC
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[,,] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[268]);
			}
		}

		// Token: 0x06000D94 RID: 3476 RVA: 0x0002B124 File Offset: 0x00029324
		public unsafe static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] ref T8 data) where T8 : struct
		{
			fixed (T8* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[268]);
			}
		}

		// Token: 0x06000D95 RID: 3477 RVA: 0x0002B154 File Offset: 0x00029354
		public static void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, imageSize, data, GL.EntryPoints[270]);
		}

		// Token: 0x06000D96 RID: 3478 RVA: 0x0002B17C File Offset: 0x0002937C
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T6[] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[270]);
			}
		}

		// Token: 0x06000D97 RID: 3479 RVA: 0x0002B1BC File Offset: 0x000293BC
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T6[,] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[270]);
			}
		}

		// Token: 0x06000D98 RID: 3480 RVA: 0x0002B200 File Offset: 0x00029400
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T6[,,] data) where T6 : struct
		{
			fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[270]);
			}
		}

		// Token: 0x06000D99 RID: 3481 RVA: 0x0002B244 File Offset: 0x00029444
		public unsafe static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] ref T6 data) where T6 : struct
		{
			fixed (T6* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[270]);
			}
		}

		// Token: 0x06000D9A RID: 3482 RVA: 0x0002B270 File Offset: 0x00029470
		public static void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, data, GL.EntryPoints[272]);
		}

		// Token: 0x06000D9B RID: 3483 RVA: 0x0002B29C File Offset: 0x0002949C
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T8[] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[272]);
			}
		}

		// Token: 0x06000D9C RID: 3484 RVA: 0x0002B2E0 File Offset: 0x000294E0
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T8[,] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[272]);
			}
		}

		// Token: 0x06000D9D RID: 3485 RVA: 0x0002B328 File Offset: 0x00029528
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T8[,,] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[272]);
			}
		}

		// Token: 0x06000D9E RID: 3486 RVA: 0x0002B370 File Offset: 0x00029570
		public unsafe static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] ref T8 data) where T8 : struct
		{
			fixed (T8* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[272]);
			}
		}

		// Token: 0x06000D9F RID: 3487 RVA: 0x0002B3A0 File Offset: 0x000295A0
		public static void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data, GL.EntryPoints[274]);
		}

		// Token: 0x06000DA0 RID: 3488 RVA: 0x0002B3D0 File Offset: 0x000295D0
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T10[] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[274]);
			}
		}

		// Token: 0x06000DA1 RID: 3489 RVA: 0x0002B418 File Offset: 0x00029618
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T10[,] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[274]);
			}
		}

		// Token: 0x06000DA2 RID: 3490 RVA: 0x0002B464 File Offset: 0x00029664
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T10[,,] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[274]);
			}
		}

		// Token: 0x06000DA3 RID: 3491 RVA: 0x0002B4B0 File Offset: 0x000296B0
		public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] ref T10 data) where T10 : struct
		{
			fixed (T10* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[274]);
			}
		}

		// Token: 0x06000DA4 RID: 3492 RVA: 0x0002B4E4 File Offset: 0x000296E4
		public static void ConvolutionFilter1D(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, image, GL.EntryPoints[282]);
		}

		// Token: 0x06000DA5 RID: 3493 RVA: 0x0002B500 File Offset: 0x00029700
		[CLSCompliant(false)]
		public unsafe static void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[] image) where T5 : struct
		{
			fixed (T5* ptr = ref (image != null && image.Length != 0) ? ref image[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[282]);
			}
		}

		// Token: 0x06000DA6 RID: 3494 RVA: 0x0002B53C File Offset: 0x0002973C
		[CLSCompliant(false)]
		public unsafe static void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,] image) where T5 : struct
		{
			fixed (T5* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[282]);
			}
		}

		// Token: 0x06000DA7 RID: 3495 RVA: 0x0002B57C File Offset: 0x0002977C
		[CLSCompliant(false)]
		public unsafe static void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,,] image) where T5 : struct
		{
			fixed (T5* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[282]);
			}
		}

		// Token: 0x06000DA8 RID: 3496 RVA: 0x0002B5C0 File Offset: 0x000297C0
		public unsafe static void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] ref T5 image) where T5 : struct
		{
			fixed (T5* ptr = &image)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[282]);
			}
		}

		// Token: 0x06000DA9 RID: 3497 RVA: 0x0002B5E8 File Offset: 0x000297E8
		public static void ConvolutionFilter2D(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, image, GL.EntryPoints[284]);
		}

		// Token: 0x06000DAA RID: 3498 RVA: 0x0002B610 File Offset: 0x00029810
		[CLSCompliant(false)]
		public unsafe static void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[] image) where T6 : struct
		{
			fixed (T6* ptr = ref (image != null && image.Length != 0) ? ref image[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, ptr, GL.EntryPoints[284]);
			}
		}

		// Token: 0x06000DAB RID: 3499 RVA: 0x0002B650 File Offset: 0x00029850
		[CLSCompliant(false)]
		public unsafe static void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,] image) where T6 : struct
		{
			fixed (T6* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, ptr, GL.EntryPoints[284]);
			}
		}

		// Token: 0x06000DAC RID: 3500 RVA: 0x0002B694 File Offset: 0x00029894
		[CLSCompliant(false)]
		public unsafe static void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,,] image) where T6 : struct
		{
			fixed (T6* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, ptr, GL.EntryPoints[284]);
			}
		}

		// Token: 0x06000DAD RID: 3501 RVA: 0x0002B6D8 File Offset: 0x000298D8
		public unsafe static void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T6 image) where T6 : struct
		{
			fixed (T6* ptr = &image)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, ptr, GL.EntryPoints[284]);
			}
		}

		// Token: 0x06000DAE RID: 3502 RVA: 0x0002B704 File Offset: 0x00029904
		public static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, float @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single), target, pname, @params, GL.EntryPoints[286]);
		}

		// Token: 0x06000DAF RID: 3503 RVA: 0x0002B71C File Offset: 0x0002991C
		[CLSCompliant(false)]
		public unsafe static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[288]);
			}
		}

		// Token: 0x06000DB0 RID: 3504 RVA: 0x0002B754 File Offset: 0x00029954
		[CLSCompliant(false)]
		public unsafe static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[288]);
		}

		// Token: 0x06000DB1 RID: 3505 RVA: 0x0002B76C File Offset: 0x0002996C
		public static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, int @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, @params, GL.EntryPoints[290]);
		}

		// Token: 0x06000DB2 RID: 3506 RVA: 0x0002B784 File Offset: 0x00029984
		[CLSCompliant(false)]
		public unsafe static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[292]);
			}
		}

		// Token: 0x06000DB3 RID: 3507 RVA: 0x0002B7BC File Offset: 0x000299BC
		[CLSCompliant(false)]
		public unsafe static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[292]);
		}

		// Token: 0x06000DB4 RID: 3508 RVA: 0x0002B7D4 File Offset: 0x000299D4
		public static void CopyBufferSubData(BufferTarget readTarget, BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), readTarget, writeTarget, readOffset, writeOffset, size, GL.EntryPoints[296]);
		}

		// Token: 0x06000DB5 RID: 3509 RVA: 0x0002B7EC File Offset: 0x000299EC
		public static void CopyColorSubTable(ColorTableTarget target, int start, int x, int y, int width)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, start, x, y, width, GL.EntryPoints[297]);
		}

		// Token: 0x06000DB6 RID: 3510 RVA: 0x0002B804 File Offset: 0x00029A04
		public static void CopyColorTable(ColorTableTarget target, PixelInternalFormat internalformat, int x, int y, int width)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, x, y, width, GL.EntryPoints[299]);
		}

		// Token: 0x06000DB7 RID: 3511 RVA: 0x0002B81C File Offset: 0x00029A1C
		public static void CopyConvolutionFilter1D(ConvolutionTarget target, PixelInternalFormat internalformat, int x, int y, int width)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, x, y, width, GL.EntryPoints[301]);
		}

		// Token: 0x06000DB8 RID: 3512 RVA: 0x0002B834 File Offset: 0x00029A34
		public static void CopyConvolutionFilter2D(ConvolutionTarget target, PixelInternalFormat internalformat, int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, x, y, width, height, GL.EntryPoints[303]);
		}

		// Token: 0x06000DB9 RID: 3513 RVA: 0x0002B850 File Offset: 0x00029A50
		[CLSCompliant(false)]
		public static void CopyImageSubData(int srcName, ImageTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, ImageTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, GL.EntryPoints[305]);
		}

		// Token: 0x06000DBA RID: 3514 RVA: 0x0002B888 File Offset: 0x00029A88
		[CLSCompliant(false)]
		public static void CopyImageSubData(uint srcName, ImageTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, ImageTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, GL.EntryPoints[305]);
		}

		// Token: 0x06000DBB RID: 3515 RVA: 0x0002B8C0 File Offset: 0x00029AC0
		public static void CopyPixels(int x, int y, int width, int height, PixelCopyType type)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), x, y, width, height, type, GL.EntryPoints[313]);
		}

		// Token: 0x06000DBC RID: 3516 RVA: 0x0002B8D8 File Offset: 0x00029AD8
		public static void CopyTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int border)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, internalformat, x, y, width, border, GL.EntryPoints[314]);
		}

		// Token: 0x06000DBD RID: 3517 RVA: 0x0002B900 File Offset: 0x00029B00
		public static void CopyTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int height, int border)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, internalformat, x, y, width, height, border, GL.EntryPoints[316]);
		}

		// Token: 0x06000DBE RID: 3518 RVA: 0x0002B92C File Offset: 0x00029B2C
		public static void CopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, xoffset, x, y, width, GL.EntryPoints[318]);
		}

		// Token: 0x06000DBF RID: 3519 RVA: 0x0002B948 File Offset: 0x00029B48
		public static void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, xoffset, yoffset, x, y, width, height, GL.EntryPoints[320]);
		}

		// Token: 0x06000DC0 RID: 3520 RVA: 0x0002B974 File Offset: 0x00029B74
		public static void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, xoffset, yoffset, zoffset, x, y, width, height, GL.EntryPoints[322]);
		}

		// Token: 0x06000DC1 RID: 3521 RVA: 0x0002B9A0 File Offset: 0x00029BA0
		public static int CreateProgram()
		{
			return calli(System.Int32(), GL.EntryPoints[334]);
		}

		// Token: 0x06000DC2 RID: 3522 RVA: 0x0002B9B4 File Offset: 0x00029BB4
		public static int CreateShader(ShaderType type)
		{
			return calli(System.Int32(System.Int32), type, GL.EntryPoints[336]);
		}

		// Token: 0x06000DC3 RID: 3523 RVA: 0x0002B9C8 File Offset: 0x00029BC8
		public static int CreateShaderProgram(ShaderType type, int count, string[] strings)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(strings);
			int result = calli(System.Int32(System.Int32,System.Int32,System.IntPtr), type, count, intPtr, GL.EntryPoints[339]);
			BindingsBase.FreeStringArrayPtr(intPtr, strings.Length);
			return result;
		}

		// Token: 0x06000DC4 RID: 3524 RVA: 0x0002B9F8 File Offset: 0x00029BF8
		public static void CullFace(CullFaceMode mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[342]);
		}

		// Token: 0x06000DC5 RID: 3525 RVA: 0x0002BA0C File Offset: 0x00029C0C
		public static void DebugMessageCallback(DebugProc callback, IntPtr userParam)
		{
			calli(System.Void(OpenTK.Graphics.OpenGL.DebugProc,System.IntPtr), callback, userParam, GL.EntryPoints[346]);
		}

		// Token: 0x06000DC6 RID: 3526 RVA: 0x0002BA20 File Offset: 0x00029C20
		[CLSCompliant(false)]
		public unsafe static void DebugMessageCallback<T1>(DebugProc callback, [In] [Out] T1[] userParam) where T1 : struct
		{
			fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0] : ref *null)
			{
				calli(System.Void(OpenTK.Graphics.OpenGL.DebugProc,System.IntPtr), callback, ptr, GL.EntryPoints[346]);
			}
		}

		// Token: 0x06000DC7 RID: 3527 RVA: 0x0002BA54 File Offset: 0x00029C54
		[CLSCompliant(false)]
		public unsafe static void DebugMessageCallback<T1>(DebugProc callback, [In] [Out] T1[,] userParam) where T1 : struct
		{
			fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0] : ref *null)
			{
				calli(System.Void(OpenTK.Graphics.OpenGL.DebugProc,System.IntPtr), callback, ptr, GL.EntryPoints[346]);
			}
		}

		// Token: 0x06000DC8 RID: 3528 RVA: 0x0002BA8C File Offset: 0x00029C8C
		[CLSCompliant(false)]
		public unsafe static void DebugMessageCallback<T1>(DebugProc callback, [In] [Out] T1[,,] userParam) where T1 : struct
		{
			fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0, 0] : ref *null)
			{
				calli(System.Void(OpenTK.Graphics.OpenGL.DebugProc,System.IntPtr), callback, ptr, GL.EntryPoints[346]);
			}
		}

		// Token: 0x06000DC9 RID: 3529 RVA: 0x0002BAC8 File Offset: 0x00029CC8
		public unsafe static void DebugMessageCallback<T1>(DebugProc callback, [In] [Out] ref T1 userParam) where T1 : struct
		{
			fixed (T1* ptr = &userParam)
			{
				calli(System.Void(OpenTK.Graphics.OpenGL.DebugProc,System.IntPtr), callback, ptr, GL.EntryPoints[346]);
			}
		}

		// Token: 0x06000DCA RID: 3530 RVA: 0x0002BAEC File Offset: 0x00029CEC
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, int[] ids, bool enabled)
		{
			fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[350]);
			}
		}

		// Token: 0x06000DCB RID: 3531 RVA: 0x0002BB28 File Offset: 0x00029D28
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, ref int ids, bool enabled)
		{
			fixed (int* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[350]);
			}
		}

		// Token: 0x06000DCC RID: 3532 RVA: 0x0002BB50 File Offset: 0x00029D50
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, int* ids, bool enabled)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[350]);
		}

		// Token: 0x06000DCD RID: 3533 RVA: 0x0002BB6C File Offset: 0x00029D6C
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, uint[] ids, bool enabled)
		{
			fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[350]);
			}
		}

		// Token: 0x06000DCE RID: 3534 RVA: 0x0002BBA8 File Offset: 0x00029DA8
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, ref uint ids, bool enabled)
		{
			fixed (uint* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[350]);
			}
		}

		// Token: 0x06000DCF RID: 3535 RVA: 0x0002BBD0 File Offset: 0x00029DD0
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, uint* ids, bool enabled)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[350]);
		}

		// Token: 0x06000DD0 RID: 3536 RVA: 0x0002BBEC File Offset: 0x00029DEC
		[CLSCompliant(false)]
		public static void DebugMessageInsert(DebugSourceExternal source, DebugType type, int id, DebugSeverity severity, int length, string buf)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[354]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06000DD1 RID: 3537 RVA: 0x0002BC20 File Offset: 0x00029E20
		[CLSCompliant(false)]
		public static void DebugMessageInsert(DebugSourceExternal source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[354]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06000DD2 RID: 3538 RVA: 0x0002BC54 File Offset: 0x00029E54
		[CLSCompliant(false)]
		public static void DeleteBuffer(int buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref buffers, GL.EntryPoints[362]);
		}

		// Token: 0x06000DD3 RID: 3539 RVA: 0x0002BC6C File Offset: 0x00029E6C
		[CLSCompliant(false)]
		public static void DeleteBuffer(uint buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref buffers, GL.EntryPoints[362]);
		}

		// Token: 0x06000DD4 RID: 3540 RVA: 0x0002BC84 File Offset: 0x00029E84
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, int[] buffers)
		{
			fixed (int* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[362]);
			}
		}

		// Token: 0x06000DD5 RID: 3541 RVA: 0x0002BCB8 File Offset: 0x00029EB8
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, ref int buffers)
		{
			fixed (int* ptr = &buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[362]);
			}
		}

		// Token: 0x06000DD6 RID: 3542 RVA: 0x0002BCDC File Offset: 0x00029EDC
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, int* buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, buffers, GL.EntryPoints[362]);
		}

		// Token: 0x06000DD7 RID: 3543 RVA: 0x0002BCF0 File Offset: 0x00029EF0
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, uint[] buffers)
		{
			fixed (uint* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[362]);
			}
		}

		// Token: 0x06000DD8 RID: 3544 RVA: 0x0002BD24 File Offset: 0x00029F24
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, ref uint buffers)
		{
			fixed (uint* ptr = &buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[362]);
			}
		}

		// Token: 0x06000DD9 RID: 3545 RVA: 0x0002BD48 File Offset: 0x00029F48
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, uint* buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, buffers, GL.EntryPoints[362]);
		}

		// Token: 0x06000DDA RID: 3546 RVA: 0x0002BD5C File Offset: 0x00029F5C
		[CLSCompliant(false)]
		public static void DeleteFramebuffer(int framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref framebuffers, GL.EntryPoints[367]);
		}

		// Token: 0x06000DDB RID: 3547 RVA: 0x0002BD74 File Offset: 0x00029F74
		[CLSCompliant(false)]
		public static void DeleteFramebuffer(uint framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref framebuffers, GL.EntryPoints[367]);
		}

		// Token: 0x06000DDC RID: 3548 RVA: 0x0002BD8C File Offset: 0x00029F8C
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, int[] framebuffers)
		{
			fixed (int* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[367]);
			}
		}

		// Token: 0x06000DDD RID: 3549 RVA: 0x0002BDC0 File Offset: 0x00029FC0
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, ref int framebuffers)
		{
			fixed (int* ptr = &framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[367]);
			}
		}

		// Token: 0x06000DDE RID: 3550 RVA: 0x0002BDE4 File Offset: 0x00029FE4
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, int* framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, framebuffers, GL.EntryPoints[367]);
		}

		// Token: 0x06000DDF RID: 3551 RVA: 0x0002BDF8 File Offset: 0x00029FF8
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, uint[] framebuffers)
		{
			fixed (uint* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[367]);
			}
		}

		// Token: 0x06000DE0 RID: 3552 RVA: 0x0002BE2C File Offset: 0x0002A02C
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, ref uint framebuffers)
		{
			fixed (uint* ptr = &framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[367]);
			}
		}

		// Token: 0x06000DE1 RID: 3553 RVA: 0x0002BE50 File Offset: 0x0002A050
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, uint* framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, framebuffers, GL.EntryPoints[367]);
		}

		// Token: 0x06000DE2 RID: 3554 RVA: 0x0002BE64 File Offset: 0x0002A064
		[CLSCompliant(false)]
		public static void DeleteLists(int list, int range)
		{
			calli(System.Void(System.UInt32,System.Int32), list, range, GL.EntryPoints[369]);
		}

		// Token: 0x06000DE3 RID: 3555 RVA: 0x0002BE78 File Offset: 0x0002A078
		[CLSCompliant(false)]
		public static void DeleteLists(uint list, int range)
		{
			calli(System.Void(System.UInt32,System.Int32), list, range, GL.EntryPoints[369]);
		}

		// Token: 0x06000DE4 RID: 3556 RVA: 0x0002BE8C File Offset: 0x0002A08C
		[CLSCompliant(false)]
		public static void DeleteProgram(int program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[377]);
		}

		// Token: 0x06000DE5 RID: 3557 RVA: 0x0002BEA0 File Offset: 0x0002A0A0
		[CLSCompliant(false)]
		public static void DeleteProgram(uint program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[377]);
		}

		// Token: 0x06000DE6 RID: 3558 RVA: 0x0002BEB4 File Offset: 0x0002A0B4
		[CLSCompliant(false)]
		public static void DeleteProgramPipeline(int pipelines)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref pipelines, GL.EntryPoints[378]);
		}

		// Token: 0x06000DE7 RID: 3559 RVA: 0x0002BECC File Offset: 0x0002A0CC
		[CLSCompliant(false)]
		public static void DeleteProgramPipeline(uint pipelines)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref pipelines, GL.EntryPoints[378]);
		}

		// Token: 0x06000DE8 RID: 3560 RVA: 0x0002BEE4 File Offset: 0x0002A0E4
		[CLSCompliant(false)]
		public unsafe static void DeleteProgramPipelines(int n, int[] pipelines)
		{
			fixed (int* ptr = ref (pipelines != null && pipelines.Length != 0) ? ref pipelines[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[378]);
			}
		}

		// Token: 0x06000DE9 RID: 3561 RVA: 0x0002BF18 File Offset: 0x0002A118
		[CLSCompliant(false)]
		public unsafe static void DeleteProgramPipelines(int n, ref int pipelines)
		{
			fixed (int* ptr = &pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[378]);
			}
		}

		// Token: 0x06000DEA RID: 3562 RVA: 0x0002BF3C File Offset: 0x0002A13C
		[CLSCompliant(false)]
		public unsafe static void DeleteProgramPipelines(int n, int* pipelines)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, pipelines, GL.EntryPoints[378]);
		}

		// Token: 0x06000DEB RID: 3563 RVA: 0x0002BF50 File Offset: 0x0002A150
		[CLSCompliant(false)]
		public unsafe static void DeleteProgramPipelines(int n, uint[] pipelines)
		{
			fixed (uint* ptr = ref (pipelines != null && pipelines.Length != 0) ? ref pipelines[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[378]);
			}
		}

		// Token: 0x06000DEC RID: 3564 RVA: 0x0002BF84 File Offset: 0x0002A184
		[CLSCompliant(false)]
		public unsafe static void DeleteProgramPipelines(int n, ref uint pipelines)
		{
			fixed (uint* ptr = &pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[378]);
			}
		}

		// Token: 0x06000DED RID: 3565 RVA: 0x0002BFA8 File Offset: 0x0002A1A8
		[CLSCompliant(false)]
		public unsafe static void DeleteProgramPipelines(int n, uint* pipelines)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, pipelines, GL.EntryPoints[378]);
		}

		// Token: 0x06000DEE RID: 3566 RVA: 0x0002BFBC File Offset: 0x0002A1BC
		[CLSCompliant(false)]
		public static void DeleteQuery(int ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[382]);
		}

		// Token: 0x06000DEF RID: 3567 RVA: 0x0002BFD4 File Offset: 0x0002A1D4
		[CLSCompliant(false)]
		public static void DeleteQuery(uint ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[382]);
		}

		// Token: 0x06000DF0 RID: 3568 RVA: 0x0002BFEC File Offset: 0x0002A1EC
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, int[] ids)
		{
			fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[382]);
			}
		}

		// Token: 0x06000DF1 RID: 3569 RVA: 0x0002C020 File Offset: 0x0002A220
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, ref int ids)
		{
			fixed (int* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[382]);
			}
		}

		// Token: 0x06000DF2 RID: 3570 RVA: 0x0002C044 File Offset: 0x0002A244
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, int* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[382]);
		}

		// Token: 0x06000DF3 RID: 3571 RVA: 0x0002C058 File Offset: 0x0002A258
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, uint[] ids)
		{
			fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[382]);
			}
		}

		// Token: 0x06000DF4 RID: 3572 RVA: 0x0002C08C File Offset: 0x0002A28C
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, ref uint ids)
		{
			fixed (uint* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[382]);
			}
		}

		// Token: 0x06000DF5 RID: 3573 RVA: 0x0002C0B0 File Offset: 0x0002A2B0
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, uint* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[382]);
		}

		// Token: 0x06000DF6 RID: 3574 RVA: 0x0002C0C4 File Offset: 0x0002A2C4
		[CLSCompliant(false)]
		public static void DeleteRenderbuffer(int renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref renderbuffers, GL.EntryPoints[384]);
		}

		// Token: 0x06000DF7 RID: 3575 RVA: 0x0002C0DC File Offset: 0x0002A2DC
		[CLSCompliant(false)]
		public static void DeleteRenderbuffer(uint renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref renderbuffers, GL.EntryPoints[384]);
		}

		// Token: 0x06000DF8 RID: 3576 RVA: 0x0002C0F4 File Offset: 0x0002A2F4
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, int[] renderbuffers)
		{
			fixed (int* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[384]);
			}
		}

		// Token: 0x06000DF9 RID: 3577 RVA: 0x0002C128 File Offset: 0x0002A328
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, ref int renderbuffers)
		{
			fixed (int* ptr = &renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[384]);
			}
		}

		// Token: 0x06000DFA RID: 3578 RVA: 0x0002C14C File Offset: 0x0002A34C
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, int* renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, renderbuffers, GL.EntryPoints[384]);
		}

		// Token: 0x06000DFB RID: 3579 RVA: 0x0002C160 File Offset: 0x0002A360
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, uint[] renderbuffers)
		{
			fixed (uint* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[384]);
			}
		}

		// Token: 0x06000DFC RID: 3580 RVA: 0x0002C194 File Offset: 0x0002A394
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, ref uint renderbuffers)
		{
			fixed (uint* ptr = &renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[384]);
			}
		}

		// Token: 0x06000DFD RID: 3581 RVA: 0x0002C1B8 File Offset: 0x0002A3B8
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, uint* renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, renderbuffers, GL.EntryPoints[384]);
		}

		// Token: 0x06000DFE RID: 3582 RVA: 0x0002C1CC File Offset: 0x0002A3CC
		[CLSCompliant(false)]
		public static void DeleteSampler(int samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref samplers, GL.EntryPoints[386]);
		}

		// Token: 0x06000DFF RID: 3583 RVA: 0x0002C1E4 File Offset: 0x0002A3E4
		[CLSCompliant(false)]
		public static void DeleteSampler(uint samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref samplers, GL.EntryPoints[386]);
		}

		// Token: 0x06000E00 RID: 3584 RVA: 0x0002C1FC File Offset: 0x0002A3FC
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, int[] samplers)
		{
			fixed (int* ptr = ref (samplers != null && samplers.Length != 0) ? ref samplers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[386]);
			}
		}

		// Token: 0x06000E01 RID: 3585 RVA: 0x0002C230 File Offset: 0x0002A430
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, ref int samplers)
		{
			fixed (int* ptr = &samplers)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[386]);
			}
		}

		// Token: 0x06000E02 RID: 3586 RVA: 0x0002C254 File Offset: 0x0002A454
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, int* samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), count, samplers, GL.EntryPoints[386]);
		}

		// Token: 0x06000E03 RID: 3587 RVA: 0x0002C268 File Offset: 0x0002A468
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, uint[] samplers)
		{
			fixed (uint* ptr = ref (samplers != null && samplers.Length != 0) ? ref samplers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[386]);
			}
		}

		// Token: 0x06000E04 RID: 3588 RVA: 0x0002C29C File Offset: 0x0002A49C
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, ref uint samplers)
		{
			fixed (uint* ptr = &samplers)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[386]);
			}
		}

		// Token: 0x06000E05 RID: 3589 RVA: 0x0002C2C0 File Offset: 0x0002A4C0
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, uint* samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), count, samplers, GL.EntryPoints[386]);
		}

		// Token: 0x06000E06 RID: 3590 RVA: 0x0002C2D4 File Offset: 0x0002A4D4
		[CLSCompliant(false)]
		public static void DeleteShader(int shader)
		{
			calli(System.Void(System.UInt32), shader, GL.EntryPoints[387]);
		}

		// Token: 0x06000E07 RID: 3591 RVA: 0x0002C2E8 File Offset: 0x0002A4E8
		[CLSCompliant(false)]
		public static void DeleteShader(uint shader)
		{
			calli(System.Void(System.UInt32), shader, GL.EntryPoints[387]);
		}

		// Token: 0x06000E08 RID: 3592 RVA: 0x0002C2FC File Offset: 0x0002A4FC
		public static void DeleteSync(IntPtr sync)
		{
			calli(System.Void(System.IntPtr), sync, GL.EntryPoints[388]);
		}

		// Token: 0x06000E09 RID: 3593 RVA: 0x0002C310 File Offset: 0x0002A510
		[CLSCompliant(false)]
		public static void DeleteTexture(int textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref textures, GL.EntryPoints[389]);
		}

		// Token: 0x06000E0A RID: 3594 RVA: 0x0002C328 File Offset: 0x0002A528
		[CLSCompliant(false)]
		public static void DeleteTexture(uint textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref textures, GL.EntryPoints[389]);
		}

		// Token: 0x06000E0B RID: 3595 RVA: 0x0002C340 File Offset: 0x0002A540
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, int[] textures)
		{
			fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[389]);
			}
		}

		// Token: 0x06000E0C RID: 3596 RVA: 0x0002C374 File Offset: 0x0002A574
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, ref int textures)
		{
			fixed (int* ptr = &textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[389]);
			}
		}

		// Token: 0x06000E0D RID: 3597 RVA: 0x0002C398 File Offset: 0x0002A598
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, int* textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, textures, GL.EntryPoints[389]);
		}

		// Token: 0x06000E0E RID: 3598 RVA: 0x0002C3AC File Offset: 0x0002A5AC
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, uint[] textures)
		{
			fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[389]);
			}
		}

		// Token: 0x06000E0F RID: 3599 RVA: 0x0002C3E0 File Offset: 0x0002A5E0
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, ref uint textures)
		{
			fixed (uint* ptr = &textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[389]);
			}
		}

		// Token: 0x06000E10 RID: 3600 RVA: 0x0002C404 File Offset: 0x0002A604
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, uint* textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, textures, GL.EntryPoints[389]);
		}

		// Token: 0x06000E11 RID: 3601 RVA: 0x0002C418 File Offset: 0x0002A618
		[CLSCompliant(false)]
		public static void DeleteTransformFeedback(int ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[391]);
		}

		// Token: 0x06000E12 RID: 3602 RVA: 0x0002C430 File Offset: 0x0002A630
		[CLSCompliant(false)]
		public static void DeleteTransformFeedback(uint ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[391]);
		}

		// Token: 0x06000E13 RID: 3603 RVA: 0x0002C448 File Offset: 0x0002A648
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, int[] ids)
		{
			fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[391]);
			}
		}

		// Token: 0x06000E14 RID: 3604 RVA: 0x0002C47C File Offset: 0x0002A67C
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, ref int ids)
		{
			fixed (int* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[391]);
			}
		}

		// Token: 0x06000E15 RID: 3605 RVA: 0x0002C4A0 File Offset: 0x0002A6A0
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, int* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[391]);
		}

		// Token: 0x06000E16 RID: 3606 RVA: 0x0002C4B4 File Offset: 0x0002A6B4
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, uint[] ids)
		{
			fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[391]);
			}
		}

		// Token: 0x06000E17 RID: 3607 RVA: 0x0002C4E8 File Offset: 0x0002A6E8
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, ref uint ids)
		{
			fixed (uint* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[391]);
			}
		}

		// Token: 0x06000E18 RID: 3608 RVA: 0x0002C50C File Offset: 0x0002A70C
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, uint* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[391]);
		}

		// Token: 0x06000E19 RID: 3609 RVA: 0x0002C520 File Offset: 0x0002A720
		[CLSCompliant(false)]
		public static void DeleteVertexArray(int arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref arrays, GL.EntryPoints[393]);
		}

		// Token: 0x06000E1A RID: 3610 RVA: 0x0002C538 File Offset: 0x0002A738
		[CLSCompliant(false)]
		public static void DeleteVertexArray(uint arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref arrays, GL.EntryPoints[393]);
		}

		// Token: 0x06000E1B RID: 3611 RVA: 0x0002C550 File Offset: 0x0002A750
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, int[] arrays)
		{
			fixed (int* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[393]);
			}
		}

		// Token: 0x06000E1C RID: 3612 RVA: 0x0002C584 File Offset: 0x0002A784
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, ref int arrays)
		{
			fixed (int* ptr = &arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[393]);
			}
		}

		// Token: 0x06000E1D RID: 3613 RVA: 0x0002C5A8 File Offset: 0x0002A7A8
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, int* arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[393]);
		}

		// Token: 0x06000E1E RID: 3614 RVA: 0x0002C5BC File Offset: 0x0002A7BC
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, uint[] arrays)
		{
			fixed (uint* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[393]);
			}
		}

		// Token: 0x06000E1F RID: 3615 RVA: 0x0002C5F0 File Offset: 0x0002A7F0
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, ref uint arrays)
		{
			fixed (uint* ptr = &arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[393]);
			}
		}

		// Token: 0x06000E20 RID: 3616 RVA: 0x0002C614 File Offset: 0x0002A814
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, uint* arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[393]);
		}

		// Token: 0x06000E21 RID: 3617 RVA: 0x0002C628 File Offset: 0x0002A828
		public static void DepthFunc(DepthFunction func)
		{
			calli(System.Void(System.Int32), func, GL.EntryPoints[398]);
		}

		// Token: 0x06000E22 RID: 3618 RVA: 0x0002C63C File Offset: 0x0002A83C
		public static void DepthMask(bool flag)
		{
			calli(System.Void(System.Boolean), flag, GL.EntryPoints[399]);
		}

		// Token: 0x06000E23 RID: 3619 RVA: 0x0002C650 File Offset: 0x0002A850
		public static void DepthRange(double near, double far)
		{
			calli(System.Void(System.Double,System.Double), near, far, GL.EntryPoints[400]);
		}

		// Token: 0x06000E24 RID: 3620 RVA: 0x0002C664 File Offset: 0x0002A864
		[CLSCompliant(false)]
		public unsafe static void DepthRangeArray(int first, int count, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), first, count, ptr, GL.EntryPoints[401]);
			}
		}

		// Token: 0x06000E25 RID: 3621 RVA: 0x0002C69C File Offset: 0x0002A89C
		[CLSCompliant(false)]
		public unsafe static void DepthRangeArray(int first, int count, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), first, count, ptr, GL.EntryPoints[401]);
			}
		}

		// Token: 0x06000E26 RID: 3622 RVA: 0x0002C6C0 File Offset: 0x0002A8C0
		[CLSCompliant(false)]
		public unsafe static void DepthRangeArray(int first, int count, double* v)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double*), first, count, v, GL.EntryPoints[401]);
		}

		// Token: 0x06000E27 RID: 3623 RVA: 0x0002C6D8 File Offset: 0x0002A8D8
		[CLSCompliant(false)]
		public unsafe static void DepthRangeArray(uint first, int count, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), first, count, ptr, GL.EntryPoints[401]);
			}
		}

		// Token: 0x06000E28 RID: 3624 RVA: 0x0002C710 File Offset: 0x0002A910
		[CLSCompliant(false)]
		public unsafe static void DepthRangeArray(uint first, int count, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), first, count, ptr, GL.EntryPoints[401]);
			}
		}

		// Token: 0x06000E29 RID: 3625 RVA: 0x0002C734 File Offset: 0x0002A934
		[CLSCompliant(false)]
		public unsafe static void DepthRangeArray(uint first, int count, double* v)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double*), first, count, v, GL.EntryPoints[401]);
		}

		// Token: 0x06000E2A RID: 3626 RVA: 0x0002C74C File Offset: 0x0002A94C
		public static void DepthRange(float n, float f)
		{
			calli(System.Void(System.Single,System.Single), n, f, GL.EntryPoints[403]);
		}

		// Token: 0x06000E2B RID: 3627 RVA: 0x0002C760 File Offset: 0x0002A960
		[CLSCompliant(false)]
		public static void DepthRangeIndexed(int index, double n, double f)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double), index, n, f, GL.EntryPoints[405]);
		}

		// Token: 0x06000E2C RID: 3628 RVA: 0x0002C778 File Offset: 0x0002A978
		[CLSCompliant(false)]
		public static void DepthRangeIndexed(uint index, double n, double f)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double), index, n, f, GL.EntryPoints[405]);
		}

		// Token: 0x06000E2D RID: 3629 RVA: 0x0002C790 File Offset: 0x0002A990
		[CLSCompliant(false)]
		public static void DetachShader(int program, int shader)
		{
			calli(System.Void(System.UInt32,System.UInt32), program, shader, GL.EntryPoints[408]);
		}

		// Token: 0x06000E2E RID: 3630 RVA: 0x0002C7A4 File Offset: 0x0002A9A4
		[CLSCompliant(false)]
		public static void DetachShader(uint program, uint shader)
		{
			calli(System.Void(System.UInt32,System.UInt32), program, shader, GL.EntryPoints[408]);
		}

		// Token: 0x06000E2F RID: 3631 RVA: 0x0002C7B8 File Offset: 0x0002A9B8
		public static void Disable(EnableCap cap)
		{
			calli(System.Void(System.Int32), cap, GL.EntryPoints[410]);
		}

		// Token: 0x06000E30 RID: 3632 RVA: 0x0002C7CC File Offset: 0x0002A9CC
		public static void DisableClientState(ArrayCap array)
		{
			calli(System.Void(System.Int32), array, GL.EntryPoints[411]);
		}

		// Token: 0x06000E31 RID: 3633 RVA: 0x0002C7E0 File Offset: 0x0002A9E0
		[CLSCompliant(false)]
		public static void Disable(IndexedEnableCap target, int index)
		{
			calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[414]);
		}

		// Token: 0x06000E32 RID: 3634 RVA: 0x0002C7F4 File Offset: 0x0002A9F4
		[CLSCompliant(false)]
		public static void Disable(IndexedEnableCap target, uint index)
		{
			calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[414]);
		}

		// Token: 0x06000E33 RID: 3635 RVA: 0x0002C808 File Offset: 0x0002AA08
		[CLSCompliant(false)]
		public static void DisableVertexAttribArray(int index)
		{
			calli(System.Void(System.UInt32), index, GL.EntryPoints[420]);
		}

		// Token: 0x06000E34 RID: 3636 RVA: 0x0002C81C File Offset: 0x0002AA1C
		[CLSCompliant(false)]
		public static void DisableVertexAttribArray(uint index)
		{
			calli(System.Void(System.UInt32), index, GL.EntryPoints[420]);
		}

		// Token: 0x06000E35 RID: 3637 RVA: 0x0002C830 File Offset: 0x0002AA30
		[CLSCompliant(false)]
		public static void DispatchCompute(int num_groups_x, int num_groups_y, int num_groups_z)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), num_groups_x, num_groups_y, num_groups_z, GL.EntryPoints[422]);
		}

		// Token: 0x06000E36 RID: 3638 RVA: 0x0002C848 File Offset: 0x0002AA48
		[CLSCompliant(false)]
		public static void DispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), num_groups_x, num_groups_y, num_groups_z, GL.EntryPoints[422]);
		}

		// Token: 0x06000E37 RID: 3639 RVA: 0x0002C860 File Offset: 0x0002AA60
		public static void DispatchComputeIndirect(IntPtr indirect)
		{
			calli(System.Void(System.IntPtr), indirect, GL.EntryPoints[424]);
		}

		// Token: 0x06000E38 RID: 3640 RVA: 0x0002C874 File Offset: 0x0002AA74
		[Obsolete("Use PrimitiveType overload instead")]
		public static void DrawArrays(BeginMode mode, int first, int count)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), mode, first, count, GL.EntryPoints[425]);
		}

		// Token: 0x06000E39 RID: 3641 RVA: 0x0002C88C File Offset: 0x0002AA8C
		public static void DrawArrays(PrimitiveType mode, int first, int count)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), mode, first, count, GL.EntryPoints[425]);
		}

		// Token: 0x06000E3A RID: 3642 RVA: 0x0002C8A4 File Offset: 0x0002AAA4
		[Obsolete("Use PrimitiveType overload instead")]
		public static void DrawArraysIndirect(ArbDrawIndirect mode, IntPtr indirect)
		{
			calli(System.Void(System.Int32,System.IntPtr), mode, indirect, GL.EntryPoints[427]);
		}

		// Token: 0x06000E3B RID: 3643 RVA: 0x0002C8B8 File Offset: 0x0002AAB8
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawArraysIndirect<T1>(ArbDrawIndirect mode, [In] [Out] T1[] indirect) where T1 : struct
		{
			fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), mode, ptr, GL.EntryPoints[427]);
			}
		}

		// Token: 0x06000E3C RID: 3644 RVA: 0x0002C8EC File Offset: 0x0002AAEC
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawArraysIndirect<T1>(ArbDrawIndirect mode, [In] [Out] T1[,] indirect) where T1 : struct
		{
			fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), mode, ptr, GL.EntryPoints[427]);
			}
		}

		// Token: 0x06000E3D RID: 3645 RVA: 0x0002C924 File Offset: 0x0002AB24
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawArraysIndirect<T1>(ArbDrawIndirect mode, [In] [Out] T1[,,] indirect) where T1 : struct
		{
			fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), mode, ptr, GL.EntryPoints[427]);
			}
		}

		// Token: 0x06000E3E RID: 3646 RVA: 0x0002C960 File Offset: 0x0002AB60
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawArraysIndirect<T1>(ArbDrawIndirect mode, [In] [Out] ref T1 indirect) where T1 : struct
		{
			fixed (T1* ptr = &indirect)
			{
				calli(System.Void(System.Int32,System.IntPtr), mode, ptr, GL.EntryPoints[427]);
			}
		}

		// Token: 0x06000E3F RID: 3647 RVA: 0x0002C984 File Offset: 0x0002AB84
		public static void DrawArraysIndirect(PrimitiveType mode, IntPtr indirect)
		{
			calli(System.Void(System.Int32,System.IntPtr), mode, indirect, GL.EntryPoints[427]);
		}

		// Token: 0x06000E40 RID: 3648 RVA: 0x0002C998 File Offset: 0x0002AB98
		[CLSCompliant(false)]
		public unsafe static void DrawArraysIndirect<T1>(PrimitiveType mode, [In] [Out] T1[] indirect) where T1 : struct
		{
			fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), mode, ptr, GL.EntryPoints[427]);
			}
		}

		// Token: 0x06000E41 RID: 3649 RVA: 0x0002C9CC File Offset: 0x0002ABCC
		[CLSCompliant(false)]
		public unsafe static void DrawArraysIndirect<T1>(PrimitiveType mode, [In] [Out] T1[,] indirect) where T1 : struct
		{
			fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), mode, ptr, GL.EntryPoints[427]);
			}
		}

		// Token: 0x06000E42 RID: 3650 RVA: 0x0002CA04 File Offset: 0x0002AC04
		[CLSCompliant(false)]
		public unsafe static void DrawArraysIndirect<T1>(PrimitiveType mode, [In] [Out] T1[,,] indirect) where T1 : struct
		{
			fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), mode, ptr, GL.EntryPoints[427]);
			}
		}

		// Token: 0x06000E43 RID: 3651 RVA: 0x0002CA40 File Offset: 0x0002AC40
		public unsafe static void DrawArraysIndirect<T1>(PrimitiveType mode, [In] [Out] ref T1 indirect) where T1 : struct
		{
			fixed (T1* ptr = &indirect)
			{
				calli(System.Void(System.Int32,System.IntPtr), mode, ptr, GL.EntryPoints[427]);
			}
		}

		// Token: 0x06000E44 RID: 3652 RVA: 0x0002CA64 File Offset: 0x0002AC64
		[Obsolete("Use PrimitiveType overload instead")]
		public static void DrawArraysInstanced(BeginMode mode, int first, int count, int instancecount)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, first, count, instancecount, GL.EntryPoints[428]);
		}

		// Token: 0x06000E45 RID: 3653 RVA: 0x0002CA7C File Offset: 0x0002AC7C
		public static void DrawArraysInstanced(PrimitiveType mode, int first, int count, int instancecount)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, first, count, instancecount, GL.EntryPoints[428]);
		}

		// Token: 0x06000E46 RID: 3654 RVA: 0x0002CA94 File Offset: 0x0002AC94
		[CLSCompliant(false)]
		public static void DrawArraysInstancedBaseInstance(PrimitiveType mode, int first, int count, int instancecount, int baseinstance)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32), mode, first, count, instancecount, baseinstance, GL.EntryPoints[430]);
		}

		// Token: 0x06000E47 RID: 3655 RVA: 0x0002CAAC File Offset: 0x0002ACAC
		[CLSCompliant(false)]
		public static void DrawArraysInstancedBaseInstance(PrimitiveType mode, int first, int count, int instancecount, uint baseinstance)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32), mode, first, count, instancecount, baseinstance, GL.EntryPoints[430]);
		}

		// Token: 0x06000E48 RID: 3656 RVA: 0x0002CAC4 File Offset: 0x0002ACC4
		public static void DrawBuffer(DrawBufferMode mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[432]);
		}

		// Token: 0x06000E49 RID: 3657 RVA: 0x0002CAD8 File Offset: 0x0002ACD8
		[CLSCompliant(false)]
		public unsafe static void DrawBuffers(int n, DrawBuffersEnum[] bufs)
		{
			fixed (DrawBuffersEnum* ptr = ref (bufs != null && bufs.Length != 0) ? ref bufs[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[433]);
			}
		}

		// Token: 0x06000E4A RID: 3658 RVA: 0x0002CB0C File Offset: 0x0002AD0C
		[CLSCompliant(false)]
		public unsafe static void DrawBuffers(int n, ref DrawBuffersEnum bufs)
		{
			fixed (DrawBuffersEnum* ptr = &bufs)
			{
				calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[433]);
			}
		}

		// Token: 0x06000E4B RID: 3659 RVA: 0x0002CB30 File Offset: 0x0002AD30
		[CLSCompliant(false)]
		public unsafe static void DrawBuffers(int n, DrawBuffersEnum* bufs)
		{
			calli(System.Void(System.Int32,System.Int32*), n, bufs, GL.EntryPoints[433]);
		}

		// Token: 0x06000E4C RID: 3660 RVA: 0x0002CB44 File Offset: 0x0002AD44
		public static void DrawElements(BeginMode mode, int count, DrawElementsType type, int indices)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, indices, GL.EntryPoints[438]);
		}

		// Token: 0x06000E4D RID: 3661 RVA: 0x0002CB5C File Offset: 0x0002AD5C
		[Obsolete("Use PrimitiveType overload instead")]
		public static void DrawElements(BeginMode mode, int count, DrawElementsType type, IntPtr indices)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, indices, GL.EntryPoints[438]);
		}

		// Token: 0x06000E4E RID: 3662 RVA: 0x0002CB74 File Offset: 0x0002AD74
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElements<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[] indices) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[438]);
			}
		}

		// Token: 0x06000E4F RID: 3663 RVA: 0x0002CBAC File Offset: 0x0002ADAC
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElements<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[,] indices) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[438]);
			}
		}

		// Token: 0x06000E50 RID: 3664 RVA: 0x0002CBE8 File Offset: 0x0002ADE8
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElements<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[438]);
			}
		}

		// Token: 0x06000E51 RID: 3665 RVA: 0x0002CC24 File Offset: 0x0002AE24
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElements<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] ref T3 indices) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[438]);
			}
		}

		// Token: 0x06000E52 RID: 3666 RVA: 0x0002CC48 File Offset: 0x0002AE48
		public static void DrawElements(PrimitiveType mode, int count, DrawElementsType type, int indices)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, indices, GL.EntryPoints[438]);
		}

		// Token: 0x06000E53 RID: 3667 RVA: 0x0002CC60 File Offset: 0x0002AE60
		public static void DrawElements(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, indices, GL.EntryPoints[438]);
		}

		// Token: 0x06000E54 RID: 3668 RVA: 0x0002CC78 File Offset: 0x0002AE78
		[CLSCompliant(false)]
		public unsafe static void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[438]);
			}
		}

		// Token: 0x06000E55 RID: 3669 RVA: 0x0002CCB0 File Offset: 0x0002AEB0
		[CLSCompliant(false)]
		public unsafe static void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[438]);
			}
		}

		// Token: 0x06000E56 RID: 3670 RVA: 0x0002CCEC File Offset: 0x0002AEEC
		[CLSCompliant(false)]
		public unsafe static void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[438]);
			}
		}

		// Token: 0x06000E57 RID: 3671 RVA: 0x0002CD28 File Offset: 0x0002AF28
		public unsafe static void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[438]);
			}
		}

		// Token: 0x06000E58 RID: 3672 RVA: 0x0002CD4C File Offset: 0x0002AF4C
		[Obsolete("Use PrimitiveType overload instead")]
		public static void DrawElementsBaseVertex(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int basevertex)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, basevertex, GL.EntryPoints[439]);
		}

		// Token: 0x06000E59 RID: 3673 RVA: 0x0002CD64 File Offset: 0x0002AF64
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElementsBaseVertex<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, basevertex, GL.EntryPoints[439]);
			}
		}

		// Token: 0x06000E5A RID: 3674 RVA: 0x0002CD9C File Offset: 0x0002AF9C
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElementsBaseVertex<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, basevertex, GL.EntryPoints[439]);
			}
		}

		// Token: 0x06000E5B RID: 3675 RVA: 0x0002CDD8 File Offset: 0x0002AFD8
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElementsBaseVertex<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, basevertex, GL.EntryPoints[439]);
			}
		}

		// Token: 0x06000E5C RID: 3676 RVA: 0x0002CE18 File Offset: 0x0002B018
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElementsBaseVertex<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, basevertex, GL.EntryPoints[439]);
			}
		}

		// Token: 0x06000E5D RID: 3677 RVA: 0x0002CE40 File Offset: 0x0002B040
		public static void DrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int basevertex)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, basevertex, GL.EntryPoints[439]);
		}

		// Token: 0x06000E5E RID: 3678 RVA: 0x0002CE58 File Offset: 0x0002B058
		[CLSCompliant(false)]
		public unsafe static void DrawElementsBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, basevertex, GL.EntryPoints[439]);
			}
		}

		// Token: 0x06000E5F RID: 3679 RVA: 0x0002CE90 File Offset: 0x0002B090
		[CLSCompliant(false)]
		public unsafe static void DrawElementsBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, basevertex, GL.EntryPoints[439]);
			}
		}

		// Token: 0x06000E60 RID: 3680 RVA: 0x0002CECC File Offset: 0x0002B0CC
		[CLSCompliant(false)]
		public unsafe static void DrawElementsBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, basevertex, GL.EntryPoints[439]);
			}
		}

		// Token: 0x06000E61 RID: 3681 RVA: 0x0002CF0C File Offset: 0x0002B10C
		public unsafe static void DrawElementsBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, basevertex, GL.EntryPoints[439]);
			}
		}

		// Token: 0x06000E62 RID: 3682 RVA: 0x0002CF34 File Offset: 0x0002B134
		[Obsolete("Use PrimitiveType overload instead")]
		public static void DrawElementsIndirect(ArbDrawIndirect mode, ArbDrawIndirect type, IntPtr indirect)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr), mode, type, indirect, GL.EntryPoints[440]);
		}

		// Token: 0x06000E63 RID: 3683 RVA: 0x0002CF4C File Offset: 0x0002B14C
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElementsIndirect<T2>(ArbDrawIndirect mode, ArbDrawIndirect type, [In] [Out] T2[] indirect) where T2 : struct
		{
			fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), mode, type, ptr, GL.EntryPoints[440]);
			}
		}

		// Token: 0x06000E64 RID: 3684 RVA: 0x0002CF84 File Offset: 0x0002B184
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawElementsIndirect<T2>(ArbDrawIndirect mode, ArbDrawIndirect type, [In] [Out] T2[,] indirect) where T2 : struct
		{
			fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), mode, type, ptr, GL.EntryPoints[440]);
			}
		}

		// Token: 0x06000E65 RID: 3685 RVA: 0x0002CFC0 File Offset: 0x0002B1C0
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElementsIndirect<T2>(ArbDrawIndirect mode, ArbDrawIndirect type, [In] [Out] T2[,,] indirect) where T2 : struct
		{
			fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), mode, type, ptr, GL.EntryPoints[440]);
			}
		}

		// Token: 0x06000E66 RID: 3686 RVA: 0x0002CFFC File Offset: 0x0002B1FC
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElementsIndirect<T2>(ArbDrawIndirect mode, ArbDrawIndirect type, [In] [Out] ref T2 indirect) where T2 : struct
		{
			fixed (T2* ptr = &indirect)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), mode, type, ptr, GL.EntryPoints[440]);
			}
		}

		// Token: 0x06000E67 RID: 3687 RVA: 0x0002D020 File Offset: 0x0002B220
		public static void DrawElementsIndirect(PrimitiveType mode, All type, IntPtr indirect)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr), mode, type, indirect, GL.EntryPoints[440]);
		}

		// Token: 0x06000E68 RID: 3688 RVA: 0x0002D038 File Offset: 0x0002B238
		[CLSCompliant(false)]
		public unsafe static void DrawElementsIndirect<T2>(PrimitiveType mode, All type, [In] [Out] T2[] indirect) where T2 : struct
		{
			fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), mode, type, ptr, GL.EntryPoints[440]);
			}
		}

		// Token: 0x06000E69 RID: 3689 RVA: 0x0002D070 File Offset: 0x0002B270
		[CLSCompliant(false)]
		public unsafe static void DrawElementsIndirect<T2>(PrimitiveType mode, All type, [In] [Out] T2[,] indirect) where T2 : struct
		{
			fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), mode, type, ptr, GL.EntryPoints[440]);
			}
		}

		// Token: 0x06000E6A RID: 3690 RVA: 0x0002D0AC File Offset: 0x0002B2AC
		[CLSCompliant(false)]
		public unsafe static void DrawElementsIndirect<T2>(PrimitiveType mode, All type, [In] [Out] T2[,,] indirect) where T2 : struct
		{
			fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), mode, type, ptr, GL.EntryPoints[440]);
			}
		}

		// Token: 0x06000E6B RID: 3691 RVA: 0x0002D0E8 File Offset: 0x0002B2E8
		public unsafe static void DrawElementsIndirect<T2>(PrimitiveType mode, All type, [In] [Out] ref T2 indirect) where T2 : struct
		{
			fixed (T2* ptr = &indirect)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), mode, type, ptr, GL.EntryPoints[440]);
			}
		}

		// Token: 0x06000E6C RID: 3692 RVA: 0x0002D10C File Offset: 0x0002B30C
		[Obsolete("Use PrimitiveType overload instead")]
		public static void DrawElementsInstanced(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int instancecount)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, instancecount, GL.EntryPoints[441]);
		}

		// Token: 0x06000E6D RID: 3693 RVA: 0x0002D124 File Offset: 0x0002B324
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[441]);
			}
		}

		// Token: 0x06000E6E RID: 3694 RVA: 0x0002D15C File Offset: 0x0002B35C
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[441]);
			}
		}

		// Token: 0x06000E6F RID: 3695 RVA: 0x0002D198 File Offset: 0x0002B398
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[441]);
			}
		}

		// Token: 0x06000E70 RID: 3696 RVA: 0x0002D1D8 File Offset: 0x0002B3D8
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[441]);
			}
		}

		// Token: 0x06000E71 RID: 3697 RVA: 0x0002D200 File Offset: 0x0002B400
		public static void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, instancecount, GL.EntryPoints[441]);
		}

		// Token: 0x06000E72 RID: 3698 RVA: 0x0002D218 File Offset: 0x0002B418
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[441]);
			}
		}

		// Token: 0x06000E73 RID: 3699 RVA: 0x0002D250 File Offset: 0x0002B450
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[441]);
			}
		}

		// Token: 0x06000E74 RID: 3700 RVA: 0x0002D28C File Offset: 0x0002B48C
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[441]);
			}
		}

		// Token: 0x06000E75 RID: 3701 RVA: 0x0002D2CC File Offset: 0x0002B4CC
		public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[441]);
			}
		}

		// Token: 0x06000E76 RID: 3702 RVA: 0x0002D2F4 File Offset: 0x0002B4F4
		[CLSCompliant(false)]
		public static void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int baseinstance)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, indices, instancecount, baseinstance, GL.EntryPoints[443]);
		}

		// Token: 0x06000E77 RID: 3703 RVA: 0x0002D310 File Offset: 0x0002B510
		[CLSCompliant(false)]
		public static void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, uint baseinstance)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, indices, instancecount, baseinstance, GL.EntryPoints[443]);
		}

		// Token: 0x06000E78 RID: 3704 RVA: 0x0002D32C File Offset: 0x0002B52C
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int instancecount, int baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, baseinstance, GL.EntryPoints[443]);
			}
		}

		// Token: 0x06000E79 RID: 3705 RVA: 0x0002D368 File Offset: 0x0002B568
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int instancecount, uint baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, baseinstance, GL.EntryPoints[443]);
			}
		}

		// Token: 0x06000E7A RID: 3706 RVA: 0x0002D3A4 File Offset: 0x0002B5A4
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int instancecount, int baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, baseinstance, GL.EntryPoints[443]);
			}
		}

		// Token: 0x06000E7B RID: 3707 RVA: 0x0002D3E4 File Offset: 0x0002B5E4
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int instancecount, uint baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, baseinstance, GL.EntryPoints[443]);
			}
		}

		// Token: 0x06000E7C RID: 3708 RVA: 0x0002D424 File Offset: 0x0002B624
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int instancecount, int baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, baseinstance, GL.EntryPoints[443]);
			}
		}

		// Token: 0x06000E7D RID: 3709 RVA: 0x0002D464 File Offset: 0x0002B664
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int instancecount, uint baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, baseinstance, GL.EntryPoints[443]);
			}
		}

		// Token: 0x06000E7E RID: 3710 RVA: 0x0002D4A4 File Offset: 0x0002B6A4
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int instancecount, int baseinstance) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, baseinstance, GL.EntryPoints[443]);
			}
		}

		// Token: 0x06000E7F RID: 3711 RVA: 0x0002D4CC File Offset: 0x0002B6CC
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int instancecount, uint baseinstance) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, baseinstance, GL.EntryPoints[443]);
			}
		}

		// Token: 0x06000E80 RID: 3712 RVA: 0x0002D4F4 File Offset: 0x0002B6F4
		[Obsolete("Use PrimitiveType overload instead")]
		public static void DrawElementsInstancedBaseVertex(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, indices, instancecount, basevertex, GL.EntryPoints[444]);
		}

		// Token: 0x06000E81 RID: 3713 RVA: 0x0002D510 File Offset: 0x0002B710
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElementsInstancedBaseVertex<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int instancecount, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, instancecount, basevertex, GL.EntryPoints[444]);
			}
		}

		// Token: 0x06000E82 RID: 3714 RVA: 0x0002D54C File Offset: 0x0002B74C
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElementsInstancedBaseVertex<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int instancecount, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, instancecount, basevertex, GL.EntryPoints[444]);
			}
		}

		// Token: 0x06000E83 RID: 3715 RVA: 0x0002D58C File Offset: 0x0002B78C
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertex<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int instancecount, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, instancecount, basevertex, GL.EntryPoints[444]);
			}
		}

		// Token: 0x06000E84 RID: 3716 RVA: 0x0002D5CC File Offset: 0x0002B7CC
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawElementsInstancedBaseVertex<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int instancecount, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, instancecount, basevertex, GL.EntryPoints[444]);
			}
		}

		// Token: 0x06000E85 RID: 3717 RVA: 0x0002D5F4 File Offset: 0x0002B7F4
		public static void DrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, indices, instancecount, basevertex, GL.EntryPoints[444]);
		}

		// Token: 0x06000E86 RID: 3718 RVA: 0x0002D610 File Offset: 0x0002B810
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int instancecount, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, instancecount, basevertex, GL.EntryPoints[444]);
			}
		}

		// Token: 0x06000E87 RID: 3719 RVA: 0x0002D64C File Offset: 0x0002B84C
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int instancecount, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, instancecount, basevertex, GL.EntryPoints[444]);
			}
		}

		// Token: 0x06000E88 RID: 3720 RVA: 0x0002D68C File Offset: 0x0002B88C
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int instancecount, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, instancecount, basevertex, GL.EntryPoints[444]);
			}
		}

		// Token: 0x06000E89 RID: 3721 RVA: 0x0002D6CC File Offset: 0x0002B8CC
		public unsafe static void DrawElementsInstancedBaseVertex<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int instancecount, int basevertex) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, instancecount, basevertex, GL.EntryPoints[444]);
			}
		}

		// Token: 0x06000E8A RID: 3722 RVA: 0x0002D6F4 File Offset: 0x0002B8F4
		[CLSCompliant(false)]
		public static void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex, int baseinstance)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, indices, instancecount, basevertex, baseinstance, GL.EntryPoints[445]);
		}

		// Token: 0x06000E8B RID: 3723 RVA: 0x0002D71C File Offset: 0x0002B91C
		[CLSCompliant(false)]
		public static void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex, uint baseinstance)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, indices, instancecount, basevertex, baseinstance, GL.EntryPoints[445]);
		}

		// Token: 0x06000E8C RID: 3724 RVA: 0x0002D744 File Offset: 0x0002B944
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int instancecount, int basevertex, int baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, basevertex, baseinstance, GL.EntryPoints[445]);
			}
		}

		// Token: 0x06000E8D RID: 3725 RVA: 0x0002D780 File Offset: 0x0002B980
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int instancecount, int basevertex, uint baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, basevertex, baseinstance, GL.EntryPoints[445]);
			}
		}

		// Token: 0x06000E8E RID: 3726 RVA: 0x0002D7BC File Offset: 0x0002B9BC
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int instancecount, int basevertex, int baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, basevertex, baseinstance, GL.EntryPoints[445]);
			}
		}

		// Token: 0x06000E8F RID: 3727 RVA: 0x0002D7FC File Offset: 0x0002B9FC
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int instancecount, int basevertex, uint baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, basevertex, baseinstance, GL.EntryPoints[445]);
			}
		}

		// Token: 0x06000E90 RID: 3728 RVA: 0x0002D83C File Offset: 0x0002BA3C
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int instancecount, int basevertex, int baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, basevertex, baseinstance, GL.EntryPoints[445]);
			}
		}

		// Token: 0x06000E91 RID: 3729 RVA: 0x0002D880 File Offset: 0x0002BA80
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int instancecount, int basevertex, uint baseinstance) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, basevertex, baseinstance, GL.EntryPoints[445]);
			}
		}

		// Token: 0x06000E92 RID: 3730 RVA: 0x0002D8C4 File Offset: 0x0002BAC4
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int instancecount, int basevertex, int baseinstance) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, basevertex, baseinstance, GL.EntryPoints[445]);
			}
		}

		// Token: 0x06000E93 RID: 3731 RVA: 0x0002D8F0 File Offset: 0x0002BAF0
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstancedBaseVertexBaseInstance<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int instancecount, int basevertex, uint baseinstance) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32), mode, count, type, ptr, instancecount, basevertex, baseinstance, GL.EntryPoints[445]);
			}
		}

		// Token: 0x06000E94 RID: 3732 RVA: 0x0002D91C File Offset: 0x0002BB1C
		public static void DrawPixels(int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), width, height, format, type, pixels, GL.EntryPoints[448]);
		}

		// Token: 0x06000E95 RID: 3733 RVA: 0x0002D934 File Offset: 0x0002BB34
		[CLSCompliant(false)]
		public unsafe static void DrawPixels<T4>(int width, int height, PixelFormat format, PixelType type, [In] [Out] T4[] pixels) where T4 : struct
		{
			fixed (T4* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), width, height, format, type, ptr, GL.EntryPoints[448]);
			}
		}

		// Token: 0x06000E96 RID: 3734 RVA: 0x0002D970 File Offset: 0x0002BB70
		[CLSCompliant(false)]
		public unsafe static void DrawPixels<T4>(int width, int height, PixelFormat format, PixelType type, [In] [Out] T4[,] pixels) where T4 : struct
		{
			fixed (T4* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), width, height, format, type, ptr, GL.EntryPoints[448]);
			}
		}

		// Token: 0x06000E97 RID: 3735 RVA: 0x0002D9B0 File Offset: 0x0002BBB0
		[CLSCompliant(false)]
		public unsafe static void DrawPixels<T4>(int width, int height, PixelFormat format, PixelType type, [In] [Out] T4[,,] pixels) where T4 : struct
		{
			fixed (T4* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), width, height, format, type, ptr, GL.EntryPoints[448]);
			}
		}

		// Token: 0x06000E98 RID: 3736 RVA: 0x0002D9F0 File Offset: 0x0002BBF0
		public unsafe static void DrawPixels<T4>(int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T4 pixels) where T4 : struct
		{
			fixed (T4* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), width, height, format, type, ptr, GL.EntryPoints[448]);
			}
		}

		// Token: 0x06000E99 RID: 3737 RVA: 0x0002DA18 File Offset: 0x0002BC18
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public static void DrawRangeElements(BeginMode mode, int start, int end, int count, DrawElementsType type, IntPtr indices)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, indices, GL.EntryPoints[451]);
		}

		// Token: 0x06000E9A RID: 3738 RVA: 0x0002DA34 File Offset: 0x0002BC34
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawRangeElements<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[451]);
			}
		}

		// Token: 0x06000E9B RID: 3739 RVA: 0x0002DA70 File Offset: 0x0002BC70
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawRangeElements<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[451]);
			}
		}

		// Token: 0x06000E9C RID: 3740 RVA: 0x0002DAB0 File Offset: 0x0002BCB0
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawRangeElements<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[451]);
			}
		}

		// Token: 0x06000E9D RID: 3741 RVA: 0x0002DAF4 File Offset: 0x0002BCF4
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In] [Out] ref T5 indices) where T5 : struct
		{
			fixed (T5* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[451]);
			}
		}

		// Token: 0x06000E9E RID: 3742 RVA: 0x0002DB1C File Offset: 0x0002BD1C
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public static void DrawRangeElements(BeginMode mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, indices, GL.EntryPoints[451]);
		}

		// Token: 0x06000E9F RID: 3743 RVA: 0x0002DB38 File Offset: 0x0002BD38
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawRangeElements<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[451]);
			}
		}

		// Token: 0x06000EA0 RID: 3744 RVA: 0x0002DB74 File Offset: 0x0002BD74
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawRangeElements<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[451]);
			}
		}

		// Token: 0x06000EA1 RID: 3745 RVA: 0x0002DBB4 File Offset: 0x0002BDB4
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawRangeElements<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[451]);
			}
		}

		// Token: 0x06000EA2 RID: 3746 RVA: 0x0002DBF8 File Offset: 0x0002BDF8
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawRangeElements<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] ref T5 indices) where T5 : struct
		{
			fixed (T5* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[451]);
			}
		}

		// Token: 0x06000EA3 RID: 3747 RVA: 0x0002DC20 File Offset: 0x0002BE20
		[CLSCompliant(false)]
		public static void DrawRangeElements(PrimitiveType mode, int start, int end, int count, DrawElementsType type, IntPtr indices)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, indices, GL.EntryPoints[451]);
		}

		// Token: 0x06000EA4 RID: 3748 RVA: 0x0002DC3C File Offset: 0x0002BE3C
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[451]);
			}
		}

		// Token: 0x06000EA5 RID: 3749 RVA: 0x0002DC78 File Offset: 0x0002BE78
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[451]);
			}
		}

		// Token: 0x06000EA6 RID: 3750 RVA: 0x0002DCB8 File Offset: 0x0002BEB8
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[451]);
			}
		}

		// Token: 0x06000EA7 RID: 3751 RVA: 0x0002DCFC File Offset: 0x0002BEFC
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] ref T5 indices) where T5 : struct
		{
			fixed (T5* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[451]);
			}
		}

		// Token: 0x06000EA8 RID: 3752 RVA: 0x0002DD24 File Offset: 0x0002BF24
		[CLSCompliant(false)]
		public static void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, indices, GL.EntryPoints[451]);
		}

		// Token: 0x06000EA9 RID: 3753 RVA: 0x0002DD40 File Offset: 0x0002BF40
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[451]);
			}
		}

		// Token: 0x06000EAA RID: 3754 RVA: 0x0002DD7C File Offset: 0x0002BF7C
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[451]);
			}
		}

		// Token: 0x06000EAB RID: 3755 RVA: 0x0002DDBC File Offset: 0x0002BFBC
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[451]);
			}
		}

		// Token: 0x06000EAC RID: 3756 RVA: 0x0002DE00 File Offset: 0x0002C000
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] ref T5 indices) where T5 : struct
		{
			fixed (T5* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[451]);
			}
		}

		// Token: 0x06000EAD RID: 3757 RVA: 0x0002DE28 File Offset: 0x0002C028
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public static void DrawRangeElementsBaseVertex(BeginMode mode, int start, int end, int count, DrawElementsType type, IntPtr indices, int basevertex)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, indices, basevertex, GL.EntryPoints[452]);
		}

		// Token: 0x06000EAE RID: 3758 RVA: 0x0002DE50 File Offset: 0x0002C050
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06000EAF RID: 3759 RVA: 0x0002DE90 File Offset: 0x0002C090
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06000EB0 RID: 3760 RVA: 0x0002DED4 File Offset: 0x0002C0D4
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,,] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06000EB1 RID: 3761 RVA: 0x0002DF18 File Offset: 0x0002C118
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In] [Out] ref T5 indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06000EB2 RID: 3762 RVA: 0x0002DF44 File Offset: 0x0002C144
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public static void DrawRangeElementsBaseVertex(BeginMode mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices, int basevertex)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, indices, basevertex, GL.EntryPoints[452]);
		}

		// Token: 0x06000EB3 RID: 3763 RVA: 0x0002DF6C File Offset: 0x0002C16C
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06000EB4 RID: 3764 RVA: 0x0002DFAC File Offset: 0x0002C1AC
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06000EB5 RID: 3765 RVA: 0x0002DFF0 File Offset: 0x0002C1F0
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,,] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06000EB6 RID: 3766 RVA: 0x0002E034 File Offset: 0x0002C234
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] ref T5 indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06000EB7 RID: 3767 RVA: 0x0002E060 File Offset: 0x0002C260
		[CLSCompliant(false)]
		public static void DrawRangeElementsBaseVertex(PrimitiveType mode, int start, int end, int count, DrawElementsType type, IntPtr indices, int basevertex)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, indices, basevertex, GL.EntryPoints[452]);
		}

		// Token: 0x06000EB8 RID: 3768 RVA: 0x0002E088 File Offset: 0x0002C288
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06000EB9 RID: 3769 RVA: 0x0002E0C8 File Offset: 0x0002C2C8
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06000EBA RID: 3770 RVA: 0x0002E10C File Offset: 0x0002C30C
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,,] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06000EBB RID: 3771 RVA: 0x0002E150 File Offset: 0x0002C350
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] ref T5 indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06000EBC RID: 3772 RVA: 0x0002E17C File Offset: 0x0002C37C
		[CLSCompliant(false)]
		public static void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices, int basevertex)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, indices, basevertex, GL.EntryPoints[452]);
		}

		// Token: 0x06000EBD RID: 3773 RVA: 0x0002E1A4 File Offset: 0x0002C3A4
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06000EBE RID: 3774 RVA: 0x0002E1E4 File Offset: 0x0002C3E4
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06000EBF RID: 3775 RVA: 0x0002E228 File Offset: 0x0002C428
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,,] indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06000EC0 RID: 3776 RVA: 0x0002E26C File Offset: 0x0002C46C
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElementsBaseVertex<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] ref T5 indices, int basevertex) where T5 : struct
		{
			fixed (T5* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, start, end, count, type, ptr, basevertex, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06000EC1 RID: 3777 RVA: 0x0002E298 File Offset: 0x0002C498
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public static void DrawTransformFeedback(BeginMode mode, int id)
		{
			calli(System.Void(System.Int32,System.UInt32), mode, id, GL.EntryPoints[455]);
		}

		// Token: 0x06000EC2 RID: 3778 RVA: 0x0002E2AC File Offset: 0x0002C4AC
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public static void DrawTransformFeedback(BeginMode mode, uint id)
		{
			calli(System.Void(System.Int32,System.UInt32), mode, id, GL.EntryPoints[455]);
		}

		// Token: 0x06000EC3 RID: 3779 RVA: 0x0002E2C0 File Offset: 0x0002C4C0
		[CLSCompliant(false)]
		public static void DrawTransformFeedback(PrimitiveType mode, int id)
		{
			calli(System.Void(System.Int32,System.UInt32), mode, id, GL.EntryPoints[455]);
		}

		// Token: 0x06000EC4 RID: 3780 RVA: 0x0002E2D4 File Offset: 0x0002C4D4
		[CLSCompliant(false)]
		public static void DrawTransformFeedback(PrimitiveType mode, uint id)
		{
			calli(System.Void(System.Int32,System.UInt32), mode, id, GL.EntryPoints[455]);
		}

		// Token: 0x06000EC5 RID: 3781 RVA: 0x0002E2E8 File Offset: 0x0002C4E8
		[CLSCompliant(false)]
		public static void DrawTransformFeedbackInstanced(PrimitiveType mode, int id, int instancecount)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32), mode, id, instancecount, GL.EntryPoints[456]);
		}

		// Token: 0x06000EC6 RID: 3782 RVA: 0x0002E300 File Offset: 0x0002C500
		[CLSCompliant(false)]
		public static void DrawTransformFeedbackInstanced(PrimitiveType mode, uint id, int instancecount)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32), mode, id, instancecount, GL.EntryPoints[456]);
		}

		// Token: 0x06000EC7 RID: 3783 RVA: 0x0002E318 File Offset: 0x0002C518
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public static void DrawTransformFeedbackStream(BeginMode mode, int id, int stream)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), mode, id, stream, GL.EntryPoints[458]);
		}

		// Token: 0x06000EC8 RID: 3784 RVA: 0x0002E330 File Offset: 0x0002C530
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public static void DrawTransformFeedbackStream(BeginMode mode, uint id, uint stream)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), mode, id, stream, GL.EntryPoints[458]);
		}

		// Token: 0x06000EC9 RID: 3785 RVA: 0x0002E348 File Offset: 0x0002C548
		[CLSCompliant(false)]
		public static void DrawTransformFeedbackStream(PrimitiveType mode, int id, int stream)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), mode, id, stream, GL.EntryPoints[458]);
		}

		// Token: 0x06000ECA RID: 3786 RVA: 0x0002E360 File Offset: 0x0002C560
		[CLSCompliant(false)]
		public static void DrawTransformFeedbackStream(PrimitiveType mode, uint id, uint stream)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), mode, id, stream, GL.EntryPoints[458]);
		}

		// Token: 0x06000ECB RID: 3787 RVA: 0x0002E378 File Offset: 0x0002C578
		[CLSCompliant(false)]
		public static void DrawTransformFeedbackStreamInstanced(PrimitiveType mode, int id, int stream, int instancecount)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32), mode, id, stream, instancecount, GL.EntryPoints[459]);
		}

		// Token: 0x06000ECC RID: 3788 RVA: 0x0002E390 File Offset: 0x0002C590
		[CLSCompliant(false)]
		public static void DrawTransformFeedbackStreamInstanced(PrimitiveType mode, uint id, uint stream, int instancecount)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32), mode, id, stream, instancecount, GL.EntryPoints[459]);
		}

		// Token: 0x06000ECD RID: 3789 RVA: 0x0002E3A8 File Offset: 0x0002C5A8
		public static void EdgeFlag(bool flag)
		{
			calli(System.Void(System.Boolean), flag, GL.EntryPoints[460]);
		}

		// Token: 0x06000ECE RID: 3790 RVA: 0x0002E3BC File Offset: 0x0002C5BC
		public static void EdgeFlagPointer(int stride, IntPtr pointer)
		{
			calli(System.Void(System.Int32,System.IntPtr), stride, pointer, GL.EntryPoints[462]);
		}

		// Token: 0x06000ECF RID: 3791 RVA: 0x0002E3D0 File Offset: 0x0002C5D0
		[CLSCompliant(false)]
		public unsafe static void EdgeFlagPointer<T1>(int stride, [In] [Out] T1[] pointer) where T1 : struct
		{
			fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), stride, ptr, GL.EntryPoints[462]);
			}
		}

		// Token: 0x06000ED0 RID: 3792 RVA: 0x0002E404 File Offset: 0x0002C604
		[CLSCompliant(false)]
		public unsafe static void EdgeFlagPointer<T1>(int stride, [In] [Out] T1[,] pointer) where T1 : struct
		{
			fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), stride, ptr, GL.EntryPoints[462]);
			}
		}

		// Token: 0x06000ED1 RID: 3793 RVA: 0x0002E43C File Offset: 0x0002C63C
		[CLSCompliant(false)]
		public unsafe static void EdgeFlagPointer<T1>(int stride, [In] [Out] T1[,,] pointer) where T1 : struct
		{
			fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), stride, ptr, GL.EntryPoints[462]);
			}
		}

		// Token: 0x06000ED2 RID: 3794 RVA: 0x0002E478 File Offset: 0x0002C678
		public unsafe static void EdgeFlagPointer<T1>(int stride, [In] [Out] ref T1 pointer) where T1 : struct
		{
			fixed (T1* ptr = &pointer)
			{
				calli(System.Void(System.Int32,System.IntPtr), stride, ptr, GL.EntryPoints[462]);
			}
		}

		// Token: 0x06000ED3 RID: 3795 RVA: 0x0002E49C File Offset: 0x0002C69C
		[CLSCompliant(false)]
		[Obsolete("Use ref overload instead")]
		public unsafe static void EdgeFlag(bool[] flag)
		{
			fixed (bool* ptr = ref (flag != null && flag.Length != 0) ? ref flag[0] : ref *null)
			{
				calli(System.Void(System.Boolean*), ptr, GL.EntryPoints[465]);
			}
		}

		// Token: 0x06000ED4 RID: 3796 RVA: 0x0002E4D0 File Offset: 0x0002C6D0
		[CLSCompliant(false)]
		[Obsolete("Use ref overload instead")]
		public unsafe static void EdgeFlag(bool* flag)
		{
			calli(System.Void(System.Boolean*), flag, GL.EntryPoints[465]);
		}

		// Token: 0x06000ED5 RID: 3797 RVA: 0x0002E4E4 File Offset: 0x0002C6E4
		public static void Enable(EnableCap cap)
		{
			calli(System.Void(System.Int32), cap, GL.EntryPoints[468]);
		}

		// Token: 0x06000ED6 RID: 3798 RVA: 0x0002E4F8 File Offset: 0x0002C6F8
		public static void EnableClientState(ArrayCap array)
		{
			calli(System.Void(System.Int32), array, GL.EntryPoints[469]);
		}

		// Token: 0x06000ED7 RID: 3799 RVA: 0x0002E50C File Offset: 0x0002C70C
		[CLSCompliant(false)]
		public static void Enable(IndexedEnableCap target, int index)
		{
			calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[472]);
		}

		// Token: 0x06000ED8 RID: 3800 RVA: 0x0002E520 File Offset: 0x0002C720
		[CLSCompliant(false)]
		public static void Enable(IndexedEnableCap target, uint index)
		{
			calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[472]);
		}

		// Token: 0x06000ED9 RID: 3801 RVA: 0x0002E534 File Offset: 0x0002C734
		[CLSCompliant(false)]
		public static void EnableVertexAttribArray(int index)
		{
			calli(System.Void(System.UInt32), index, GL.EntryPoints[478]);
		}

		// Token: 0x06000EDA RID: 3802 RVA: 0x0002E548 File Offset: 0x0002C748
		[CLSCompliant(false)]
		public static void EnableVertexAttribArray(uint index)
		{
			calli(System.Void(System.UInt32), index, GL.EntryPoints[478]);
		}

		// Token: 0x06000EDB RID: 3803 RVA: 0x0002E55C File Offset: 0x0002C75C
		public static void End()
		{
			calli(System.Void(), GL.EntryPoints[480]);
		}

		// Token: 0x06000EDC RID: 3804 RVA: 0x0002E570 File Offset: 0x0002C770
		public static void EndConditionalRender()
		{
			calli(System.Void(), GL.EntryPoints[481]);
		}

		// Token: 0x06000EDD RID: 3805 RVA: 0x0002E584 File Offset: 0x0002C784
		public static void EndList()
		{
			calli(System.Void(), GL.EntryPoints[485]);
		}

		// Token: 0x06000EDE RID: 3806 RVA: 0x0002E598 File Offset: 0x0002C798
		public static void EndQuery(QueryTarget target)
		{
			calli(System.Void(System.Int32), target, GL.EntryPoints[489]);
		}

		// Token: 0x06000EDF RID: 3807 RVA: 0x0002E5AC File Offset: 0x0002C7AC
		[CLSCompliant(false)]
		public static void EndQueryIndexed(QueryTarget target, int index)
		{
			calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[491]);
		}

		// Token: 0x06000EE0 RID: 3808 RVA: 0x0002E5C0 File Offset: 0x0002C7C0
		[CLSCompliant(false)]
		public static void EndQueryIndexed(QueryTarget target, uint index)
		{
			calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[491]);
		}

		// Token: 0x06000EE1 RID: 3809 RVA: 0x0002E5D4 File Offset: 0x0002C7D4
		public static void EndTransformFeedback()
		{
			calli(System.Void(), GL.EntryPoints[492]);
		}

		// Token: 0x06000EE2 RID: 3810 RVA: 0x0002E5E8 File Offset: 0x0002C7E8
		public static void EvalCoord1(double u)
		{
			calli(System.Void(System.Double), u, GL.EntryPoints[497]);
		}

		// Token: 0x06000EE3 RID: 3811 RVA: 0x0002E5FC File Offset: 0x0002C7FC
		[CLSCompliant(false)]
		public unsafe static void EvalCoord1(double* u)
		{
			calli(System.Void(System.Double*), u, GL.EntryPoints[498]);
		}

		// Token: 0x06000EE4 RID: 3812 RVA: 0x0002E610 File Offset: 0x0002C810
		public static void EvalCoord1(float u)
		{
			calli(System.Void(System.Single), u, GL.EntryPoints[499]);
		}

		// Token: 0x06000EE5 RID: 3813 RVA: 0x0002E624 File Offset: 0x0002C824
		[CLSCompliant(false)]
		public unsafe static void EvalCoord1(float* u)
		{
			calli(System.Void(System.Single*), u, GL.EntryPoints[500]);
		}

		// Token: 0x06000EE6 RID: 3814 RVA: 0x0002E638 File Offset: 0x0002C838
		public static void EvalCoord2(double u, double v)
		{
			calli(System.Void(System.Double,System.Double), u, v, GL.EntryPoints[503]);
		}

		// Token: 0x06000EE7 RID: 3815 RVA: 0x0002E64C File Offset: 0x0002C84C
		[CLSCompliant(false)]
		public unsafe static void EvalCoord2(double[] u)
		{
			fixed (double* ptr = ref (u != null && u.Length != 0) ? ref u[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[504]);
			}
		}

		// Token: 0x06000EE8 RID: 3816 RVA: 0x0002E680 File Offset: 0x0002C880
		[CLSCompliant(false)]
		public unsafe static void EvalCoord2(ref double u)
		{
			fixed (double* ptr = &u)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[504]);
			}
		}

		// Token: 0x06000EE9 RID: 3817 RVA: 0x0002E6A4 File Offset: 0x0002C8A4
		[CLSCompliant(false)]
		public unsafe static void EvalCoord2(double* u)
		{
			calli(System.Void(System.Double*), u, GL.EntryPoints[504]);
		}

		// Token: 0x06000EEA RID: 3818 RVA: 0x0002E6B8 File Offset: 0x0002C8B8
		public static void EvalCoord2(float u, float v)
		{
			calli(System.Void(System.Single,System.Single), u, v, GL.EntryPoints[505]);
		}

		// Token: 0x06000EEB RID: 3819 RVA: 0x0002E6CC File Offset: 0x0002C8CC
		[CLSCompliant(false)]
		public unsafe static void EvalCoord2(float[] u)
		{
			fixed (float* ptr = ref (u != null && u.Length != 0) ? ref u[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[506]);
			}
		}

		// Token: 0x06000EEC RID: 3820 RVA: 0x0002E700 File Offset: 0x0002C900
		[CLSCompliant(false)]
		public unsafe static void EvalCoord2(ref float u)
		{
			fixed (float* ptr = &u)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[506]);
			}
		}

		// Token: 0x06000EED RID: 3821 RVA: 0x0002E724 File Offset: 0x0002C924
		[CLSCompliant(false)]
		public unsafe static void EvalCoord2(float* u)
		{
			calli(System.Void(System.Single*), u, GL.EntryPoints[506]);
		}

		// Token: 0x06000EEE RID: 3822 RVA: 0x0002E738 File Offset: 0x0002C938
		public static void EvalMesh1(MeshMode1 mode, int i1, int i2)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), mode, i1, i2, GL.EntryPoints[510]);
		}

		// Token: 0x06000EEF RID: 3823 RVA: 0x0002E750 File Offset: 0x0002C950
		public static void EvalMesh2(MeshMode2 mode, int i1, int i2, int j1, int j2)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), mode, i1, i2, j1, j2, GL.EntryPoints[511]);
		}

		// Token: 0x06000EF0 RID: 3824 RVA: 0x0002E768 File Offset: 0x0002C968
		public static void EvalPoint1(int i)
		{
			calli(System.Void(System.Int32), i, GL.EntryPoints[512]);
		}

		// Token: 0x06000EF1 RID: 3825 RVA: 0x0002E77C File Offset: 0x0002C97C
		public static void EvalPoint2(int i, int j)
		{
			calli(System.Void(System.Int32,System.Int32), i, j, GL.EntryPoints[513]);
		}

		// Token: 0x06000EF2 RID: 3826 RVA: 0x0002E790 File Offset: 0x0002C990
		[CLSCompliant(false)]
		public unsafe static void FeedbackBuffer(int size, FeedbackType type, [Out] float[] buffer)
		{
			fixed (float* ptr = ref (buffer != null && buffer.Length != 0) ? ref buffer[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), size, type, ptr, GL.EntryPoints[516]);
			}
		}

		// Token: 0x06000EF3 RID: 3827 RVA: 0x0002E7C8 File Offset: 0x0002C9C8
		[CLSCompliant(false)]
		public unsafe static void FeedbackBuffer(int size, FeedbackType type, out float buffer)
		{
			fixed (float* ptr = &buffer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), size, type, ptr, GL.EntryPoints[516]);
			}
		}

		// Token: 0x06000EF4 RID: 3828 RVA: 0x0002E7EC File Offset: 0x0002C9EC
		[CLSCompliant(false)]
		public unsafe static void FeedbackBuffer(int size, FeedbackType type, [Out] float* buffer)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), size, type, buffer, GL.EntryPoints[516]);
		}

		// Token: 0x06000EF5 RID: 3829 RVA: 0x0002E804 File Offset: 0x0002CA04
		[Obsolete("Use uint overload instead")]
		public static IntPtr FenceSync(ArbSync condition, int flags)
		{
			return calli(System.IntPtr(System.Int32,System.Int32), condition, flags, GL.EntryPoints[518]);
		}

		// Token: 0x06000EF6 RID: 3830 RVA: 0x0002E818 File Offset: 0x0002CA18
		[Obsolete("Use SyncCondition overload instead")]
		public static IntPtr FenceSync(ArbSync condition, uint flags)
		{
			return calli(System.IntPtr(System.Int32,System.Int32), condition, flags, GL.EntryPoints[518]);
		}

		// Token: 0x06000EF7 RID: 3831 RVA: 0x0002E82C File Offset: 0x0002CA2C
		public static IntPtr FenceSync(SyncCondition condition, WaitSyncFlags flags)
		{
			return calli(System.IntPtr(System.Int32,System.Int32), condition, flags, GL.EntryPoints[518]);
		}

		// Token: 0x06000EF8 RID: 3832 RVA: 0x0002E840 File Offset: 0x0002CA40
		public static void Finish()
		{
			calli(System.Void(), GL.EntryPoints[520]);
		}

		// Token: 0x06000EF9 RID: 3833 RVA: 0x0002E854 File Offset: 0x0002CA54
		public static void Flush()
		{
			calli(System.Void(), GL.EntryPoints[526]);
		}

		// Token: 0x06000EFA RID: 3834 RVA: 0x0002E868 File Offset: 0x0002CA68
		public static void FlushMappedBufferRange(BufferTarget target, IntPtr offset, IntPtr length)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.IntPtr), target, offset, length, GL.EntryPoints[527]);
		}

		// Token: 0x06000EFB RID: 3835 RVA: 0x0002E880 File Offset: 0x0002CA80
		public static void FogCoord(double coord)
		{
			calli(System.Void(System.Double), coord, GL.EntryPoints[535]);
		}

		// Token: 0x06000EFC RID: 3836 RVA: 0x0002E894 File Offset: 0x0002CA94
		[CLSCompliant(false)]
		public unsafe static void FogCoord(double* coord)
		{
			calli(System.Void(System.Double*), coord, GL.EntryPoints[537]);
		}

		// Token: 0x06000EFD RID: 3837 RVA: 0x0002E8A8 File Offset: 0x0002CAA8
		public static void FogCoord(float coord)
		{
			calli(System.Void(System.Single), coord, GL.EntryPoints[539]);
		}

		// Token: 0x06000EFE RID: 3838 RVA: 0x0002E8BC File Offset: 0x0002CABC
		[CLSCompliant(false)]
		public unsafe static void FogCoord(float* coord)
		{
			calli(System.Void(System.Single*), coord, GL.EntryPoints[542]);
		}

		// Token: 0x06000EFF RID: 3839 RVA: 0x0002E8D0 File Offset: 0x0002CAD0
		public static void FogCoordPointer(FogPointerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, pointer, GL.EntryPoints[546]);
		}

		// Token: 0x06000F00 RID: 3840 RVA: 0x0002E8E8 File Offset: 0x0002CAE8
		[CLSCompliant(false)]
		public unsafe static void FogCoordPointer<T2>(FogPointerType type, int stride, [In] [Out] T2[] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[546]);
			}
		}

		// Token: 0x06000F01 RID: 3841 RVA: 0x0002E920 File Offset: 0x0002CB20
		[CLSCompliant(false)]
		public unsafe static void FogCoordPointer<T2>(FogPointerType type, int stride, [In] [Out] T2[,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[546]);
			}
		}

		// Token: 0x06000F02 RID: 3842 RVA: 0x0002E95C File Offset: 0x0002CB5C
		[CLSCompliant(false)]
		public unsafe static void FogCoordPointer<T2>(FogPointerType type, int stride, [In] [Out] T2[,,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[546]);
			}
		}

		// Token: 0x06000F03 RID: 3843 RVA: 0x0002E998 File Offset: 0x0002CB98
		public unsafe static void FogCoordPointer<T2>(FogPointerType type, int stride, [In] [Out] ref T2 pointer) where T2 : struct
		{
			fixed (T2* ptr = &pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[546]);
			}
		}

		// Token: 0x06000F04 RID: 3844 RVA: 0x0002E9BC File Offset: 0x0002CBBC
		public static void Fog(FogParameter pname, float param)
		{
			calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[549]);
		}

		// Token: 0x06000F05 RID: 3845 RVA: 0x0002E9D0 File Offset: 0x0002CBD0
		[CLSCompliant(false)]
		public unsafe static void Fog(FogParameter pname, float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[551]);
			}
		}

		// Token: 0x06000F06 RID: 3846 RVA: 0x0002EA04 File Offset: 0x0002CC04
		[CLSCompliant(false)]
		public unsafe static void Fog(FogParameter pname, float* @params)
		{
			calli(System.Void(System.Int32,System.Single*), pname, @params, GL.EntryPoints[551]);
		}

		// Token: 0x06000F07 RID: 3847 RVA: 0x0002EA18 File Offset: 0x0002CC18
		public static void Fog(FogParameter pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[552]);
		}

		// Token: 0x06000F08 RID: 3848 RVA: 0x0002EA2C File Offset: 0x0002CC2C
		[CLSCompliant(false)]
		public unsafe static void Fog(FogParameter pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[553]);
			}
		}

		// Token: 0x06000F09 RID: 3849 RVA: 0x0002EA60 File Offset: 0x0002CC60
		[CLSCompliant(false)]
		public unsafe static void Fog(FogParameter pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32*), pname, @params, GL.EntryPoints[553]);
		}

		// Token: 0x06000F0A RID: 3850 RVA: 0x0002EA74 File Offset: 0x0002CC74
		public static void FramebufferParameter(FramebufferTarget target, FramebufferDefaultParameter pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, param, GL.EntryPoints[571]);
		}

		// Token: 0x06000F0B RID: 3851 RVA: 0x0002EA8C File Offset: 0x0002CC8C
		[CLSCompliant(false)]
		public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, int renderbuffer)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), target, attachment, renderbuffertarget, renderbuffer, GL.EntryPoints[573]);
		}

		// Token: 0x06000F0C RID: 3852 RVA: 0x0002EAA4 File Offset: 0x0002CCA4
		[CLSCompliant(false)]
		public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), target, attachment, renderbuffertarget, renderbuffer, GL.EntryPoints[573]);
		}

		// Token: 0x06000F0D RID: 3853 RVA: 0x0002EABC File Offset: 0x0002CCBC
		[CLSCompliant(false)]
		public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, texture, level, GL.EntryPoints[575]);
		}

		// Token: 0x06000F0E RID: 3854 RVA: 0x0002EAD4 File Offset: 0x0002CCD4
		[CLSCompliant(false)]
		public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, texture, level, GL.EntryPoints[575]);
		}

		// Token: 0x06000F0F RID: 3855 RVA: 0x0002EAEC File Offset: 0x0002CCEC
		[CLSCompliant(false)]
		public static void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, textarget, texture, level, GL.EntryPoints[576]);
		}

		// Token: 0x06000F10 RID: 3856 RVA: 0x0002EB04 File Offset: 0x0002CD04
		[CLSCompliant(false)]
		public static void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, textarget, texture, level, GL.EntryPoints[576]);
		}

		// Token: 0x06000F11 RID: 3857 RVA: 0x0002EB1C File Offset: 0x0002CD1C
		[CLSCompliant(false)]
		public static void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, textarget, texture, level, GL.EntryPoints[578]);
		}

		// Token: 0x06000F12 RID: 3858 RVA: 0x0002EB34 File Offset: 0x0002CD34
		[CLSCompliant(false)]
		public static void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, textarget, texture, level, GL.EntryPoints[578]);
		}

		// Token: 0x06000F13 RID: 3859 RVA: 0x0002EB4C File Offset: 0x0002CD4C
		[CLSCompliant(false)]
		public static void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level, int zoffset)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, textarget, texture, level, zoffset, GL.EntryPoints[580]);
		}

		// Token: 0x06000F14 RID: 3860 RVA: 0x0002EB68 File Offset: 0x0002CD68
		[CLSCompliant(false)]
		public static void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, textarget, texture, level, zoffset, GL.EntryPoints[580]);
		}

		// Token: 0x06000F15 RID: 3861 RVA: 0x0002EB84 File Offset: 0x0002CD84
		[CLSCompliant(false)]
		public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level, int layer)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, texture, level, layer, GL.EntryPoints[586]);
		}

		// Token: 0x06000F16 RID: 3862 RVA: 0x0002EB9C File Offset: 0x0002CD9C
		[CLSCompliant(false)]
		public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, texture, level, layer, GL.EntryPoints[586]);
		}

		// Token: 0x06000F17 RID: 3863 RVA: 0x0002EBB4 File Offset: 0x0002CDB4
		public static void FrontFace(FrontFaceDirection mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[592]);
		}

		// Token: 0x06000F18 RID: 3864 RVA: 0x0002EBC8 File Offset: 0x0002CDC8
		public static void Frustum(double left, double right, double bottom, double top, double zNear, double zFar)
		{
			calli(System.Void(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double), left, right, bottom, top, zNear, zFar, GL.EntryPoints[593]);
		}

		// Token: 0x06000F19 RID: 3865 RVA: 0x0002EBE4 File Offset: 0x0002CDE4
		[CLSCompliant(false)]
		public static int GenBuffer()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[597]);
			return result;
		}

		// Token: 0x06000F1A RID: 3866 RVA: 0x0002EC08 File Offset: 0x0002CE08
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, [Out] int[] buffers)
		{
			fixed (int* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[597]);
			}
		}

		// Token: 0x06000F1B RID: 3867 RVA: 0x0002EC3C File Offset: 0x0002CE3C
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, out int buffers)
		{
			fixed (int* ptr = &buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[597]);
			}
		}

		// Token: 0x06000F1C RID: 3868 RVA: 0x0002EC60 File Offset: 0x0002CE60
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, [Out] int* buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, buffers, GL.EntryPoints[597]);
		}

		// Token: 0x06000F1D RID: 3869 RVA: 0x0002EC74 File Offset: 0x0002CE74
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, [Out] uint[] buffers)
		{
			fixed (uint* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[597]);
			}
		}

		// Token: 0x06000F1E RID: 3870 RVA: 0x0002ECA8 File Offset: 0x0002CEA8
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, out uint buffers)
		{
			fixed (uint* ptr = &buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[597]);
			}
		}

		// Token: 0x06000F1F RID: 3871 RVA: 0x0002ECCC File Offset: 0x0002CECC
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, [Out] uint* buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, buffers, GL.EntryPoints[597]);
		}

		// Token: 0x06000F20 RID: 3872 RVA: 0x0002ECE0 File Offset: 0x0002CEE0
		public static void GenerateMipmap(GenerateMipmapTarget target)
		{
			calli(System.Void(System.Int32), target, GL.EntryPoints[599]);
		}

		// Token: 0x06000F21 RID: 3873 RVA: 0x0002ECF4 File Offset: 0x0002CEF4
		[CLSCompliant(false)]
		public static int GenFramebuffer()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[606]);
			return result;
		}

		// Token: 0x06000F22 RID: 3874 RVA: 0x0002ED18 File Offset: 0x0002CF18
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, [Out] int[] framebuffers)
		{
			fixed (int* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[606]);
			}
		}

		// Token: 0x06000F23 RID: 3875 RVA: 0x0002ED4C File Offset: 0x0002CF4C
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, out int framebuffers)
		{
			fixed (int* ptr = &framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[606]);
			}
		}

		// Token: 0x06000F24 RID: 3876 RVA: 0x0002ED70 File Offset: 0x0002CF70
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, [Out] int* framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, framebuffers, GL.EntryPoints[606]);
		}

		// Token: 0x06000F25 RID: 3877 RVA: 0x0002ED84 File Offset: 0x0002CF84
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, [Out] uint[] framebuffers)
		{
			fixed (uint* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[606]);
			}
		}

		// Token: 0x06000F26 RID: 3878 RVA: 0x0002EDB8 File Offset: 0x0002CFB8
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, out uint framebuffers)
		{
			fixed (uint* ptr = &framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[606]);
			}
		}

		// Token: 0x06000F27 RID: 3879 RVA: 0x0002EDDC File Offset: 0x0002CFDC
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, [Out] uint* framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, framebuffers, GL.EntryPoints[606]);
		}

		// Token: 0x06000F28 RID: 3880 RVA: 0x0002EDF0 File Offset: 0x0002CFF0
		public static int GenLists(int range)
		{
			return calli(System.Int32(System.Int32), range, GL.EntryPoints[608]);
		}

		// Token: 0x06000F29 RID: 3881 RVA: 0x0002EE04 File Offset: 0x0002D004
		[CLSCompliant(false)]
		public static int GenProgramPipeline()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[613]);
			return result;
		}

		// Token: 0x06000F2A RID: 3882 RVA: 0x0002EE28 File Offset: 0x0002D028
		[CLSCompliant(false)]
		public unsafe static void GenProgramPipelines(int n, [Out] int[] pipelines)
		{
			fixed (int* ptr = ref (pipelines != null && pipelines.Length != 0) ? ref pipelines[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[613]);
			}
		}

		// Token: 0x06000F2B RID: 3883 RVA: 0x0002EE5C File Offset: 0x0002D05C
		[CLSCompliant(false)]
		public unsafe static void GenProgramPipelines(int n, out int pipelines)
		{
			fixed (int* ptr = &pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[613]);
			}
		}

		// Token: 0x06000F2C RID: 3884 RVA: 0x0002EE80 File Offset: 0x0002D080
		[CLSCompliant(false)]
		public unsafe static void GenProgramPipelines(int n, [Out] int* pipelines)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, pipelines, GL.EntryPoints[613]);
		}

		// Token: 0x06000F2D RID: 3885 RVA: 0x0002EE94 File Offset: 0x0002D094
		[CLSCompliant(false)]
		public unsafe static void GenProgramPipelines(int n, [Out] uint[] pipelines)
		{
			fixed (uint* ptr = ref (pipelines != null && pipelines.Length != 0) ? ref pipelines[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[613]);
			}
		}

		// Token: 0x06000F2E RID: 3886 RVA: 0x0002EEC8 File Offset: 0x0002D0C8
		[CLSCompliant(false)]
		public unsafe static void GenProgramPipelines(int n, out uint pipelines)
		{
			fixed (uint* ptr = &pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[613]);
			}
		}

		// Token: 0x06000F2F RID: 3887 RVA: 0x0002EEEC File Offset: 0x0002D0EC
		[CLSCompliant(false)]
		public unsafe static void GenProgramPipelines(int n, [Out] uint* pipelines)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, pipelines, GL.EntryPoints[613]);
		}

		// Token: 0x06000F30 RID: 3888 RVA: 0x0002EF00 File Offset: 0x0002D100
		[CLSCompliant(false)]
		public static int GenQuery()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[617]);
			return result;
		}

		// Token: 0x06000F31 RID: 3889 RVA: 0x0002EF24 File Offset: 0x0002D124
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, [Out] int[] ids)
		{
			fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[617]);
			}
		}

		// Token: 0x06000F32 RID: 3890 RVA: 0x0002EF58 File Offset: 0x0002D158
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, out int ids)
		{
			fixed (int* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[617]);
			}
		}

		// Token: 0x06000F33 RID: 3891 RVA: 0x0002EF7C File Offset: 0x0002D17C
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, [Out] int* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[617]);
		}

		// Token: 0x06000F34 RID: 3892 RVA: 0x0002EF90 File Offset: 0x0002D190
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, [Out] uint[] ids)
		{
			fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[617]);
			}
		}

		// Token: 0x06000F35 RID: 3893 RVA: 0x0002EFC4 File Offset: 0x0002D1C4
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, out uint ids)
		{
			fixed (uint* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[617]);
			}
		}

		// Token: 0x06000F36 RID: 3894 RVA: 0x0002EFE8 File Offset: 0x0002D1E8
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, [Out] uint* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[617]);
		}

		// Token: 0x06000F37 RID: 3895 RVA: 0x0002EFFC File Offset: 0x0002D1FC
		[CLSCompliant(false)]
		public static int GenRenderbuffer()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[619]);
			return result;
		}

		// Token: 0x06000F38 RID: 3896 RVA: 0x0002F020 File Offset: 0x0002D220
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, [Out] int[] renderbuffers)
		{
			fixed (int* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[619]);
			}
		}

		// Token: 0x06000F39 RID: 3897 RVA: 0x0002F054 File Offset: 0x0002D254
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, out int renderbuffers)
		{
			fixed (int* ptr = &renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[619]);
			}
		}

		// Token: 0x06000F3A RID: 3898 RVA: 0x0002F078 File Offset: 0x0002D278
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, [Out] int* renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, renderbuffers, GL.EntryPoints[619]);
		}

		// Token: 0x06000F3B RID: 3899 RVA: 0x0002F08C File Offset: 0x0002D28C
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, [Out] uint[] renderbuffers)
		{
			fixed (uint* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[619]);
			}
		}

		// Token: 0x06000F3C RID: 3900 RVA: 0x0002F0C0 File Offset: 0x0002D2C0
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, out uint renderbuffers)
		{
			fixed (uint* ptr = &renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[619]);
			}
		}

		// Token: 0x06000F3D RID: 3901 RVA: 0x0002F0E4 File Offset: 0x0002D2E4
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, [Out] uint* renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, renderbuffers, GL.EntryPoints[619]);
		}

		// Token: 0x06000F3E RID: 3902 RVA: 0x0002F0F8 File Offset: 0x0002D2F8
		[CLSCompliant(false)]
		public static int GenSampler()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[621]);
			return result;
		}

		// Token: 0x06000F3F RID: 3903 RVA: 0x0002F11C File Offset: 0x0002D31C
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, [Out] int[] samplers)
		{
			fixed (int* ptr = ref (samplers != null && samplers.Length != 0) ? ref samplers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[621]);
			}
		}

		// Token: 0x06000F40 RID: 3904 RVA: 0x0002F150 File Offset: 0x0002D350
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, out int samplers)
		{
			fixed (int* ptr = &samplers)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[621]);
			}
		}

		// Token: 0x06000F41 RID: 3905 RVA: 0x0002F174 File Offset: 0x0002D374
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, [Out] int* samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), count, samplers, GL.EntryPoints[621]);
		}

		// Token: 0x06000F42 RID: 3906 RVA: 0x0002F188 File Offset: 0x0002D388
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, [Out] uint[] samplers)
		{
			fixed (uint* ptr = ref (samplers != null && samplers.Length != 0) ? ref samplers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[621]);
			}
		}

		// Token: 0x06000F43 RID: 3907 RVA: 0x0002F1BC File Offset: 0x0002D3BC
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, out uint samplers)
		{
			fixed (uint* ptr = &samplers)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[621]);
			}
		}

		// Token: 0x06000F44 RID: 3908 RVA: 0x0002F1E0 File Offset: 0x0002D3E0
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, [Out] uint* samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), count, samplers, GL.EntryPoints[621]);
		}

		// Token: 0x06000F45 RID: 3909 RVA: 0x0002F1F4 File Offset: 0x0002D3F4
		[CLSCompliant(false)]
		public static int GenTexture()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[623]);
			return result;
		}

		// Token: 0x06000F46 RID: 3910 RVA: 0x0002F218 File Offset: 0x0002D418
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, [Out] int[] textures)
		{
			fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[623]);
			}
		}

		// Token: 0x06000F47 RID: 3911 RVA: 0x0002F24C File Offset: 0x0002D44C
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, out int textures)
		{
			fixed (int* ptr = &textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[623]);
			}
		}

		// Token: 0x06000F48 RID: 3912 RVA: 0x0002F270 File Offset: 0x0002D470
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, [Out] int* textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, textures, GL.EntryPoints[623]);
		}

		// Token: 0x06000F49 RID: 3913 RVA: 0x0002F284 File Offset: 0x0002D484
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, [Out] uint[] textures)
		{
			fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[623]);
			}
		}

		// Token: 0x06000F4A RID: 3914 RVA: 0x0002F2B8 File Offset: 0x0002D4B8
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, out uint textures)
		{
			fixed (uint* ptr = &textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[623]);
			}
		}

		// Token: 0x06000F4B RID: 3915 RVA: 0x0002F2DC File Offset: 0x0002D4DC
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, [Out] uint* textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, textures, GL.EntryPoints[623]);
		}

		// Token: 0x06000F4C RID: 3916 RVA: 0x0002F2F0 File Offset: 0x0002D4F0
		[CLSCompliant(false)]
		public static int GenTransformFeedback()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[625]);
			return result;
		}

		// Token: 0x06000F4D RID: 3917 RVA: 0x0002F314 File Offset: 0x0002D514
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, [Out] int[] ids)
		{
			fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[625]);
			}
		}

		// Token: 0x06000F4E RID: 3918 RVA: 0x0002F348 File Offset: 0x0002D548
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, out int ids)
		{
			fixed (int* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[625]);
			}
		}

		// Token: 0x06000F4F RID: 3919 RVA: 0x0002F36C File Offset: 0x0002D56C
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, [Out] int* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[625]);
		}

		// Token: 0x06000F50 RID: 3920 RVA: 0x0002F380 File Offset: 0x0002D580
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, [Out] uint[] ids)
		{
			fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[625]);
			}
		}

		// Token: 0x06000F51 RID: 3921 RVA: 0x0002F3B4 File Offset: 0x0002D5B4
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, out uint ids)
		{
			fixed (uint* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[625]);
			}
		}

		// Token: 0x06000F52 RID: 3922 RVA: 0x0002F3D8 File Offset: 0x0002D5D8
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, [Out] uint* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[625]);
		}

		// Token: 0x06000F53 RID: 3923 RVA: 0x0002F3EC File Offset: 0x0002D5EC
		[CLSCompliant(false)]
		public static int GenVertexArray()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[627]);
			return result;
		}

		// Token: 0x06000F54 RID: 3924 RVA: 0x0002F410 File Offset: 0x0002D610
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, [Out] int[] arrays)
		{
			fixed (int* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[627]);
			}
		}

		// Token: 0x06000F55 RID: 3925 RVA: 0x0002F444 File Offset: 0x0002D644
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, out int arrays)
		{
			fixed (int* ptr = &arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[627]);
			}
		}

		// Token: 0x06000F56 RID: 3926 RVA: 0x0002F468 File Offset: 0x0002D668
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, [Out] int* arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[627]);
		}

		// Token: 0x06000F57 RID: 3927 RVA: 0x0002F47C File Offset: 0x0002D67C
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, [Out] uint[] arrays)
		{
			fixed (uint* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[627]);
			}
		}

		// Token: 0x06000F58 RID: 3928 RVA: 0x0002F4B0 File Offset: 0x0002D6B0
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, out uint arrays)
		{
			fixed (uint* ptr = &arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[627]);
			}
		}

		// Token: 0x06000F59 RID: 3929 RVA: 0x0002F4D4 File Offset: 0x0002D6D4
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, [Out] uint* arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[627]);
		}

		// Token: 0x06000F5A RID: 3930 RVA: 0x0002F4E8 File Offset: 0x0002D6E8
		[CLSCompliant(false)]
		public unsafe static void GetActiveAtomicCounterBuffer(int program, int bufferIndex, AtomicCounterBufferParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, bufferIndex, pname, ptr, GL.EntryPoints[630]);
			}
		}

		// Token: 0x06000F5B RID: 3931 RVA: 0x0002F520 File Offset: 0x0002D720
		[CLSCompliant(false)]
		public unsafe static void GetActiveAtomicCounterBuffer(int program, int bufferIndex, AtomicCounterBufferParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, bufferIndex, pname, ptr, GL.EntryPoints[630]);
			}
		}

		// Token: 0x06000F5C RID: 3932 RVA: 0x0002F544 File Offset: 0x0002D744
		[CLSCompliant(false)]
		public unsafe static void GetActiveAtomicCounterBuffer(int program, int bufferIndex, AtomicCounterBufferParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, bufferIndex, pname, @params, GL.EntryPoints[630]);
		}

		// Token: 0x06000F5D RID: 3933 RVA: 0x0002F55C File Offset: 0x0002D75C
		[CLSCompliant(false)]
		public unsafe static void GetActiveAtomicCounterBuffer(uint program, uint bufferIndex, AtomicCounterBufferParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, bufferIndex, pname, ptr, GL.EntryPoints[630]);
			}
		}

		// Token: 0x06000F5E RID: 3934 RVA: 0x0002F594 File Offset: 0x0002D794
		[CLSCompliant(false)]
		public unsafe static void GetActiveAtomicCounterBuffer(uint program, uint bufferIndex, AtomicCounterBufferParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, bufferIndex, pname, ptr, GL.EntryPoints[630]);
			}
		}

		// Token: 0x06000F5F RID: 3935 RVA: 0x0002F5B8 File Offset: 0x0002D7B8
		[CLSCompliant(false)]
		public unsafe static void GetActiveAtomicCounterBuffer(uint program, uint bufferIndex, AtomicCounterBufferParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, bufferIndex, pname, @params, GL.EntryPoints[630]);
		}

		// Token: 0x06000F60 RID: 3936 RVA: 0x0002F5D0 File Offset: 0x0002D7D0
		[CLSCompliant(false)]
		public unsafe static void GetActiveAttrib(int program, int index, int bufSize, out int length, out int size, out ActiveAttribType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (ActiveAttribType* ptr5 = &type)
					{
						ActiveAttribType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[631]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x06000F61 RID: 3937 RVA: 0x0002F61C File Offset: 0x0002D81C
		[CLSCompliant(false)]
		public unsafe static void GetActiveAttrib(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[631]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06000F62 RID: 3938 RVA: 0x0002F660 File Offset: 0x0002D860
		[CLSCompliant(false)]
		public unsafe static void GetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, out ActiveAttribType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (ActiveAttribType* ptr5 = &type)
					{
						ActiveAttribType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[631]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x06000F63 RID: 3939 RVA: 0x0002F6AC File Offset: 0x0002D8AC
		[CLSCompliant(false)]
		public unsafe static void GetActiveAttrib(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[631]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06000F64 RID: 3940 RVA: 0x0002F6F0 File Offset: 0x0002D8F0
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineName(int program, ShaderType shadertype, int index, int bufsize, out int length, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, shadertype, index, bufsize, ptr2, intPtr, GL.EntryPoints[633]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06000F65 RID: 3941 RVA: 0x0002F734 File Offset: 0x0002D934
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineName(int program, ShaderType shadertype, int index, int bufsize, [Out] int* length, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, shadertype, index, bufsize, length, intPtr, GL.EntryPoints[633]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06000F66 RID: 3942 RVA: 0x0002F774 File Offset: 0x0002D974
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineName(uint program, ShaderType shadertype, uint index, int bufsize, out int length, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, shadertype, index, bufsize, ptr2, intPtr, GL.EntryPoints[633]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06000F67 RID: 3943 RVA: 0x0002F7B8 File Offset: 0x0002D9B8
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineName(uint program, ShaderType shadertype, uint index, int bufsize, [Out] int* length, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, shadertype, index, bufsize, length, intPtr, GL.EntryPoints[633]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06000F68 RID: 3944 RVA: 0x0002F7F8 File Offset: 0x0002D9F8
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniform(int program, ShaderType shadertype, int index, ActiveSubroutineUniformParameter pname, [Out] int[] values)
		{
			fixed (int* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, shadertype, index, pname, ptr, GL.EntryPoints[634]);
			}
		}

		// Token: 0x06000F69 RID: 3945 RVA: 0x0002F834 File Offset: 0x0002DA34
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniform(int program, ShaderType shadertype, int index, ActiveSubroutineUniformParameter pname, out int values)
		{
			fixed (int* ptr = &values)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, shadertype, index, pname, ptr, GL.EntryPoints[634]);
			}
		}

		// Token: 0x06000F6A RID: 3946 RVA: 0x0002F85C File Offset: 0x0002DA5C
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniform(int program, ShaderType shadertype, int index, ActiveSubroutineUniformParameter pname, [Out] int* values)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, shadertype, index, pname, values, GL.EntryPoints[634]);
		}

		// Token: 0x06000F6B RID: 3947 RVA: 0x0002F874 File Offset: 0x0002DA74
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniform(uint program, ShaderType shadertype, uint index, ActiveSubroutineUniformParameter pname, [Out] int[] values)
		{
			fixed (int* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, shadertype, index, pname, ptr, GL.EntryPoints[634]);
			}
		}

		// Token: 0x06000F6C RID: 3948 RVA: 0x0002F8B0 File Offset: 0x0002DAB0
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniform(uint program, ShaderType shadertype, uint index, ActiveSubroutineUniformParameter pname, out int values)
		{
			fixed (int* ptr = &values)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, shadertype, index, pname, ptr, GL.EntryPoints[634]);
			}
		}

		// Token: 0x06000F6D RID: 3949 RVA: 0x0002F8D8 File Offset: 0x0002DAD8
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniform(uint program, ShaderType shadertype, uint index, ActiveSubroutineUniformParameter pname, [Out] int* values)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, shadertype, index, pname, values, GL.EntryPoints[634]);
		}

		// Token: 0x06000F6E RID: 3950 RVA: 0x0002F8F0 File Offset: 0x0002DAF0
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniformName(int program, ShaderType shadertype, int index, int bufsize, out int length, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, shadertype, index, bufsize, ptr2, intPtr, GL.EntryPoints[635]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06000F6F RID: 3951 RVA: 0x0002F934 File Offset: 0x0002DB34
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniformName(int program, ShaderType shadertype, int index, int bufsize, [Out] int* length, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, shadertype, index, bufsize, length, intPtr, GL.EntryPoints[635]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06000F70 RID: 3952 RVA: 0x0002F974 File Offset: 0x0002DB74
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniformName(uint program, ShaderType shadertype, uint index, int bufsize, out int length, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, shadertype, index, bufsize, ptr2, intPtr, GL.EntryPoints[635]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06000F71 RID: 3953 RVA: 0x0002F9B8 File Offset: 0x0002DBB8
		[CLSCompliant(false)]
		public unsafe static void GetActiveSubroutineUniformName(uint program, ShaderType shadertype, uint index, int bufsize, [Out] int* length, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, shadertype, index, bufsize, length, intPtr, GL.EntryPoints[635]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06000F72 RID: 3954 RVA: 0x0002F9F8 File Offset: 0x0002DBF8
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniform(int program, int index, int bufSize, out int length, out int size, out ActiveUniformType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (ActiveUniformType* ptr5 = &type)
					{
						ActiveUniformType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[636]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x06000F73 RID: 3955 RVA: 0x0002FA44 File Offset: 0x0002DC44
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniform(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveUniformType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[636]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06000F74 RID: 3956 RVA: 0x0002FA88 File Offset: 0x0002DC88
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, out ActiveUniformType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (ActiveUniformType* ptr5 = &type)
					{
						ActiveUniformType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[636]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x06000F75 RID: 3957 RVA: 0x0002FAD4 File Offset: 0x0002DCD4
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniform(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveUniformType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[636]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06000F76 RID: 3958 RVA: 0x0002FB18 File Offset: 0x0002DD18
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(int program, int uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, ptr, GL.EntryPoints[638]);
			}
		}

		// Token: 0x06000F77 RID: 3959 RVA: 0x0002FB50 File Offset: 0x0002DD50
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(int program, int uniformBlockIndex, ActiveUniformBlockParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, ptr, GL.EntryPoints[638]);
			}
		}

		// Token: 0x06000F78 RID: 3960 RVA: 0x0002FB74 File Offset: 0x0002DD74
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(int program, int uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, @params, GL.EntryPoints[638]);
		}

		// Token: 0x06000F79 RID: 3961 RVA: 0x0002FB8C File Offset: 0x0002DD8C
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(uint program, uint uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, ptr, GL.EntryPoints[638]);
			}
		}

		// Token: 0x06000F7A RID: 3962 RVA: 0x0002FBC4 File Offset: 0x0002DDC4
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(uint program, uint uniformBlockIndex, ActiveUniformBlockParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, ptr, GL.EntryPoints[638]);
			}
		}

		// Token: 0x06000F7B RID: 3963 RVA: 0x0002FBE8 File Offset: 0x0002DDE8
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(uint program, uint uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, @params, GL.EntryPoints[638]);
		}

		// Token: 0x06000F7C RID: 3964 RVA: 0x0002FC00 File Offset: 0x0002DE00
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlockName(int program, int uniformBlockIndex, int bufSize, out int length, [Out] StringBuilder uniformBlockName)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformBlockName.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformBlockIndex, bufSize, ptr2, intPtr, GL.EntryPoints[639]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformBlockName);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06000F7D RID: 3965 RVA: 0x0002FC40 File Offset: 0x0002DE40
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlockName(int program, int uniformBlockIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformBlockName)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformBlockName.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformBlockIndex, bufSize, length, intPtr, GL.EntryPoints[639]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformBlockName);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06000F7E RID: 3966 RVA: 0x0002FC80 File Offset: 0x0002DE80
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, out int length, [Out] StringBuilder uniformBlockName)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformBlockName.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformBlockIndex, bufSize, ptr2, intPtr, GL.EntryPoints[639]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformBlockName);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06000F7F RID: 3967 RVA: 0x0002FCC0 File Offset: 0x0002DEC0
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformBlockName)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformBlockName.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformBlockIndex, bufSize, length, intPtr, GL.EntryPoints[639]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformBlockName);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06000F80 RID: 3968 RVA: 0x0002FD00 File Offset: 0x0002DF00
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformName(int program, int uniformIndex, int bufSize, out int length, [Out] StringBuilder uniformName)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformName.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformIndex, bufSize, ptr2, intPtr, GL.EntryPoints[640]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformName);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06000F81 RID: 3969 RVA: 0x0002FD40 File Offset: 0x0002DF40
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformName(int program, int uniformIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformName)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformName.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformIndex, bufSize, length, intPtr, GL.EntryPoints[640]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformName);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06000F82 RID: 3970 RVA: 0x0002FD80 File Offset: 0x0002DF80
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, out int length, [Out] StringBuilder uniformName)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformName.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformIndex, bufSize, ptr2, intPtr, GL.EntryPoints[640]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformName);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06000F83 RID: 3971 RVA: 0x0002FDC0 File Offset: 0x0002DFC0
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformName)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformName.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformIndex, bufSize, length, intPtr, GL.EntryPoints[640]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformName);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06000F84 RID: 3972 RVA: 0x0002FE00 File Offset: 0x0002E000
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(int program, int uniformCount, int[] uniformIndices, ActiveUniformParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (uniformIndices != null && uniformIndices.Length != 0) ? ref uniformIndices[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, ptr2, pname, ptr3, GL.EntryPoints[641]);
				}
			}
		}

		// Token: 0x06000F85 RID: 3973 RVA: 0x0002FE50 File Offset: 0x0002E050
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(int program, int uniformCount, ref int uniformIndices, ActiveUniformParameter pname, out int @params)
		{
			fixed (int* ptr = &uniformIndices)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, ptr2, pname, ptr3, GL.EntryPoints[641]);
				}
			}
		}

		// Token: 0x06000F86 RID: 3974 RVA: 0x0002FE7C File Offset: 0x0002E07C
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(int program, int uniformCount, int* uniformIndices, ActiveUniformParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, uniformIndices, pname, @params, GL.EntryPoints[641]);
		}

		// Token: 0x06000F87 RID: 3975 RVA: 0x0002FE94 File Offset: 0x0002E094
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(uint program, int uniformCount, uint[] uniformIndices, ActiveUniformParameter pname, [Out] int[] @params)
		{
			fixed (uint* ptr = ref (uniformIndices != null && uniformIndices.Length != 0) ? ref uniformIndices[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (int* ptr3 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, ptr2, pname, ptr3, GL.EntryPoints[641]);
				}
			}
		}

		// Token: 0x06000F88 RID: 3976 RVA: 0x0002FEE4 File Offset: 0x0002E0E4
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(uint program, int uniformCount, ref uint uniformIndices, ActiveUniformParameter pname, out int @params)
		{
			fixed (uint* ptr = &uniformIndices)
			{
				uint* ptr2 = ptr;
				fixed (int* ptr3 = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, ptr2, pname, ptr3, GL.EntryPoints[641]);
				}
			}
		}

		// Token: 0x06000F89 RID: 3977 RVA: 0x0002FF10 File Offset: 0x0002E110
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(uint program, int uniformCount, uint* uniformIndices, ActiveUniformParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, uniformIndices, pname, @params, GL.EntryPoints[641]);
		}

		// Token: 0x06000F8A RID: 3978 RVA: 0x0002FF28 File Offset: 0x0002E128
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(int program, int maxCount, out int count, [Out] int[] shaders)
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, ptr2, ptr3, GL.EntryPoints[646]);
				}
			}
		}

		// Token: 0x06000F8B RID: 3979 RVA: 0x0002FF64 File Offset: 0x0002E164
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(int program, int maxCount, out int count, out int shaders)
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &shaders)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, ptr2, ptr3, GL.EntryPoints[646]);
				}
			}
		}

		// Token: 0x06000F8C RID: 3980 RVA: 0x0002FF8C File Offset: 0x0002E18C
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(int program, int maxCount, [Out] int* count, [Out] int* shaders)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, count, shaders, GL.EntryPoints[646]);
		}

		// Token: 0x06000F8D RID: 3981 RVA: 0x0002FFA4 File Offset: 0x0002E1A4
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(uint program, int maxCount, out int count, [Out] uint[] shaders)
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (uint* ptr3 = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, ptr2, ptr3, GL.EntryPoints[646]);
				}
			}
		}

		// Token: 0x06000F8E RID: 3982 RVA: 0x0002FFE0 File Offset: 0x0002E1E0
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(uint program, int maxCount, out int count, out uint shaders)
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (uint* ptr3 = &shaders)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, ptr2, ptr3, GL.EntryPoints[646]);
				}
			}
		}

		// Token: 0x06000F8F RID: 3983 RVA: 0x00030008 File Offset: 0x0002E208
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(uint program, int maxCount, [Out] int* count, [Out] uint* shaders)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, count, shaders, GL.EntryPoints[646]);
		}

		// Token: 0x06000F90 RID: 3984 RVA: 0x00030020 File Offset: 0x0002E220
		[CLSCompliant(false)]
		public static int GetAttribLocation(int program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[647]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06000F91 RID: 3985 RVA: 0x0003004C File Offset: 0x0002E24C
		[CLSCompliant(false)]
		public static int GetAttribLocation(uint program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[647]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06000F92 RID: 3986 RVA: 0x00030078 File Offset: 0x0002E278
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetIndexedPName target, int index, [Out] bool[] data)
		{
			fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, ptr, GL.EntryPoints[649]);
			}
		}

		// Token: 0x06000F93 RID: 3987 RVA: 0x000300B0 File Offset: 0x0002E2B0
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetIndexedPName target, int index, out bool data)
		{
			fixed (bool* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, ptr, GL.EntryPoints[649]);
			}
		}

		// Token: 0x06000F94 RID: 3988 RVA: 0x000300D4 File Offset: 0x0002E2D4
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetIndexedPName target, int index, [Out] bool* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, data, GL.EntryPoints[649]);
		}

		// Token: 0x06000F95 RID: 3989 RVA: 0x000300EC File Offset: 0x0002E2EC
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetIndexedPName target, uint index, [Out] bool[] data)
		{
			fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, ptr, GL.EntryPoints[649]);
			}
		}

		// Token: 0x06000F96 RID: 3990 RVA: 0x00030124 File Offset: 0x0002E324
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetIndexedPName target, uint index, out bool data)
		{
			fixed (bool* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, ptr, GL.EntryPoints[649]);
			}
		}

		// Token: 0x06000F97 RID: 3991 RVA: 0x00030148 File Offset: 0x0002E348
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetIndexedPName target, uint index, [Out] bool* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, data, GL.EntryPoints[649]);
		}

		// Token: 0x06000F98 RID: 3992 RVA: 0x00030160 File Offset: 0x0002E360
		[CLSCompliant(false)]
		public static bool GetBoolean(GetPName pname)
		{
			bool result;
			calli(System.Void(System.Int32,System.Boolean*), pname, ref result, GL.EntryPoints[651]);
			return result;
		}

		// Token: 0x06000F99 RID: 3993 RVA: 0x00030184 File Offset: 0x0002E384
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetPName pname, [Out] bool[] data)
		{
			fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Boolean*), pname, ptr, GL.EntryPoints[651]);
			}
		}

		// Token: 0x06000F9A RID: 3994 RVA: 0x000301B8 File Offset: 0x0002E3B8
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetPName pname, out bool data)
		{
			fixed (bool* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Boolean*), pname, ptr, GL.EntryPoints[651]);
			}
		}

		// Token: 0x06000F9B RID: 3995 RVA: 0x000301DC File Offset: 0x0002E3DC
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetPName pname, [Out] bool* data)
		{
			calli(System.Void(System.Int32,System.Boolean*), pname, data, GL.EntryPoints[651]);
		}

		// Token: 0x06000F9C RID: 3996 RVA: 0x000301F0 File Offset: 0x0002E3F0
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] long[] @params)
		{
			fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int64*), target, pname, ptr, GL.EntryPoints[652]);
			}
		}

		// Token: 0x06000F9D RID: 3997 RVA: 0x00030228 File Offset: 0x0002E428
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, out long @params)
		{
			fixed (long* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int64*), target, pname, ptr, GL.EntryPoints[652]);
			}
		}

		// Token: 0x06000F9E RID: 3998 RVA: 0x0003024C File Offset: 0x0002E44C
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] long* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int64*), target, pname, @params, GL.EntryPoints[652]);
		}

		// Token: 0x06000F9F RID: 3999 RVA: 0x00030264 File Offset: 0x0002E464
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[653]);
			}
		}

		// Token: 0x06000FA0 RID: 4000 RVA: 0x0003029C File Offset: 0x0002E49C
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[653]);
			}
		}

		// Token: 0x06000FA1 RID: 4001 RVA: 0x000302C0 File Offset: 0x0002E4C0
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[653]);
		}

		// Token: 0x06000FA2 RID: 4002 RVA: 0x000302D8 File Offset: 0x0002E4D8
		public static void GetBufferPointer(BufferTarget target, BufferPointer pname, [Out] IntPtr @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, @params, GL.EntryPoints[656]);
		}

		// Token: 0x06000FA3 RID: 4003 RVA: 0x000302F0 File Offset: 0x0002E4F0
		[CLSCompliant(false)]
		public unsafe static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In] [Out] T2[] @params) where T2 : struct
		{
			fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[656]);
			}
		}

		// Token: 0x06000FA4 RID: 4004 RVA: 0x00030328 File Offset: 0x0002E528
		[CLSCompliant(false)]
		public unsafe static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In] [Out] T2[,] @params) where T2 : struct
		{
			fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[656]);
			}
		}

		// Token: 0x06000FA5 RID: 4005 RVA: 0x00030364 File Offset: 0x0002E564
		[CLSCompliant(false)]
		public unsafe static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In] [Out] T2[,,] @params) where T2 : struct
		{
			fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[656]);
			}
		}

		// Token: 0x06000FA6 RID: 4006 RVA: 0x000303A0 File Offset: 0x0002E5A0
		public unsafe static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In] [Out] ref T2 @params) where T2 : struct
		{
			fixed (T2* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[656]);
			}
		}

		// Token: 0x06000FA7 RID: 4007 RVA: 0x000303C4 File Offset: 0x0002E5C4
		public static void GetBufferSubData(BufferTarget target, IntPtr offset, IntPtr size, [Out] IntPtr data)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, data, GL.EntryPoints[658]);
		}

		// Token: 0x06000FA8 RID: 4008 RVA: 0x000303DC File Offset: 0x0002E5DC
		[CLSCompliant(false)]
		public unsafe static void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] T3[] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[658]);
			}
		}

		// Token: 0x06000FA9 RID: 4009 RVA: 0x00030414 File Offset: 0x0002E614
		[CLSCompliant(false)]
		public unsafe static void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] T3[,] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[658]);
			}
		}

		// Token: 0x06000FAA RID: 4010 RVA: 0x00030450 File Offset: 0x0002E650
		[CLSCompliant(false)]
		public unsafe static void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] T3[,,] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[658]);
			}
		}

		// Token: 0x06000FAB RID: 4011 RVA: 0x0003048C File Offset: 0x0002E68C
		public unsafe static void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] ref T3 data) where T3 : struct
		{
			fixed (T3* ptr = &data)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[658]);
			}
		}

		// Token: 0x06000FAC RID: 4012 RVA: 0x000304B0 File Offset: 0x0002E6B0
		[CLSCompliant(false)]
		public unsafe static void GetClipPlane(ClipPlaneName plane, [Out] double[] equation)
		{
			fixed (double* ptr = ref (equation != null && equation.Length != 0) ? ref equation[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Double*), plane, ptr, GL.EntryPoints[660]);
			}
		}

		// Token: 0x06000FAD RID: 4013 RVA: 0x000304E4 File Offset: 0x0002E6E4
		[CLSCompliant(false)]
		public unsafe static void GetClipPlane(ClipPlaneName plane, out double equation)
		{
			fixed (double* ptr = &equation)
			{
				calli(System.Void(System.Int32,System.Double*), plane, ptr, GL.EntryPoints[660]);
			}
		}

		// Token: 0x06000FAE RID: 4014 RVA: 0x00030508 File Offset: 0x0002E708
		[CLSCompliant(false)]
		public unsafe static void GetClipPlane(ClipPlaneName plane, [Out] double* equation)
		{
			calli(System.Void(System.Int32,System.Double*), plane, equation, GL.EntryPoints[660]);
		}

		// Token: 0x06000FAF RID: 4015 RVA: 0x0003051C File Offset: 0x0002E71C
		public static void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, [Out] IntPtr table)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, table, GL.EntryPoints[663]);
		}

		// Token: 0x06000FB0 RID: 4016 RVA: 0x00030534 File Offset: 0x0002E734
		[CLSCompliant(false)]
		public unsafe static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[] table) where T3 : struct
		{
			fixed (T3* ptr = ref (table != null && table.Length != 0) ? ref table[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[663]);
			}
		}

		// Token: 0x06000FB1 RID: 4017 RVA: 0x0003056C File Offset: 0x0002E76C
		[CLSCompliant(false)]
		public unsafe static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[,] table) where T3 : struct
		{
			fixed (T3* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[663]);
			}
		}

		// Token: 0x06000FB2 RID: 4018 RVA: 0x000305A8 File Offset: 0x0002E7A8
		[CLSCompliant(false)]
		public unsafe static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[,,] table) where T3 : struct
		{
			fixed (T3* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[663]);
			}
		}

		// Token: 0x06000FB3 RID: 4019 RVA: 0x000305E4 File Offset: 0x0002E7E4
		public unsafe static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In] [Out] ref T3 table) where T3 : struct
		{
			fixed (T3* ptr = &table)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[663]);
			}
		}

		// Token: 0x06000FB4 RID: 4020 RVA: 0x00030608 File Offset: 0x0002E808
		[CLSCompliant(false)]
		public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[665]);
			}
		}

		// Token: 0x06000FB5 RID: 4021 RVA: 0x00030640 File Offset: 0x0002E840
		[CLSCompliant(false)]
		public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[665]);
			}
		}

		// Token: 0x06000FB6 RID: 4022 RVA: 0x00030664 File Offset: 0x0002E864
		[CLSCompliant(false)]
		public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[665]);
		}

		// Token: 0x06000FB7 RID: 4023 RVA: 0x0003067C File Offset: 0x0002E87C
		[CLSCompliant(false)]
		public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[668]);
			}
		}

		// Token: 0x06000FB8 RID: 4024 RVA: 0x000306B4 File Offset: 0x0002E8B4
		[CLSCompliant(false)]
		public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[668]);
			}
		}

		// Token: 0x06000FB9 RID: 4025 RVA: 0x000306D8 File Offset: 0x0002E8D8
		[CLSCompliant(false)]
		public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[668]);
		}

		// Token: 0x06000FBA RID: 4026 RVA: 0x000306F0 File Offset: 0x0002E8F0
		public static void GetCompressedTexImage(TextureTarget target, int level, [Out] IntPtr img)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, level, img, GL.EntryPoints[678]);
		}

		// Token: 0x06000FBB RID: 4027 RVA: 0x00030708 File Offset: 0x0002E908
		[CLSCompliant(false)]
		public unsafe static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In] [Out] T2[] img) where T2 : struct
		{
			fixed (T2* ptr = ref (img != null && img.Length != 0) ? ref img[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, level, ptr, GL.EntryPoints[678]);
			}
		}

		// Token: 0x06000FBC RID: 4028 RVA: 0x00030740 File Offset: 0x0002E940
		[CLSCompliant(false)]
		public unsafe static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In] [Out] T2[,] img) where T2 : struct
		{
			fixed (T2* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, level, ptr, GL.EntryPoints[678]);
			}
		}

		// Token: 0x06000FBD RID: 4029 RVA: 0x0003077C File Offset: 0x0002E97C
		[CLSCompliant(false)]
		public unsafe static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In] [Out] T2[,,] img) where T2 : struct
		{
			fixed (T2* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, level, ptr, GL.EntryPoints[678]);
			}
		}

		// Token: 0x06000FBE RID: 4030 RVA: 0x000307B8 File Offset: 0x0002E9B8
		public unsafe static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In] [Out] ref T2 img) where T2 : struct
		{
			fixed (T2* ptr = &img)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, level, ptr, GL.EntryPoints[678]);
			}
		}

		// Token: 0x06000FBF RID: 4031 RVA: 0x000307DC File Offset: 0x0002E9DC
		public static void GetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, [Out] IntPtr image)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, image, GL.EntryPoints[681]);
		}

		// Token: 0x06000FC0 RID: 4032 RVA: 0x000307F4 File Offset: 0x0002E9F4
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, [In] [Out] T3[] image) where T3 : struct
		{
			fixed (T3* ptr = ref (image != null && image.Length != 0) ? ref image[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[681]);
			}
		}

		// Token: 0x06000FC1 RID: 4033 RVA: 0x0003082C File Offset: 0x0002EA2C
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, [In] [Out] T3[,] image) where T3 : struct
		{
			fixed (T3* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[681]);
			}
		}

		// Token: 0x06000FC2 RID: 4034 RVA: 0x00030868 File Offset: 0x0002EA68
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, [In] [Out] T3[,,] image) where T3 : struct
		{
			fixed (T3* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[681]);
			}
		}

		// Token: 0x06000FC3 RID: 4035 RVA: 0x000308A4 File Offset: 0x0002EAA4
		public unsafe static void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, [In] [Out] ref T3 image) where T3 : struct
		{
			fixed (T3* ptr = &image)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[681]);
			}
		}

		// Token: 0x06000FC4 RID: 4036 RVA: 0x000308C8 File Offset: 0x0002EAC8
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[683]);
			}
		}

		// Token: 0x06000FC5 RID: 4037 RVA: 0x00030900 File Offset: 0x0002EB00
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[683]);
			}
		}

		// Token: 0x06000FC6 RID: 4038 RVA: 0x00030924 File Offset: 0x0002EB24
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[683]);
		}

		// Token: 0x06000FC7 RID: 4039 RVA: 0x0003093C File Offset: 0x0002EB3C
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[685]);
			}
		}

		// Token: 0x06000FC8 RID: 4040 RVA: 0x00030974 File Offset: 0x0002EB74
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[685]);
			}
		}

		// Token: 0x06000FC9 RID: 4041 RVA: 0x00030998 File Offset: 0x0002EB98
		[CLSCompliant(false)]
		public unsafe static void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[685]);
		}

		// Token: 0x06000FCA RID: 4042 RVA: 0x000309B0 File Offset: 0x0002EBB0
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] DebugSource[] sources, [Out] DebugType[] types, [Out] int[] ids, [Out] DebugSeverity[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
		{
			fixed (DebugSource* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
			{
				DebugSource* ptr2 = ptr;
				fixed (DebugType* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
				{
					DebugType* ptr4 = ptr3;
					fixed (int* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
					{
						int* ptr6 = ptr5;
						fixed (DebugSeverity* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
						{
							DebugSeverity* ptr8 = ptr7;
							fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
							{
								int* ptr10 = ptr9;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[688]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}
		}

		// Token: 0x06000FCB RID: 4043 RVA: 0x00030A68 File Offset: 0x0002EC68
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(int count, int bufSize, out DebugSource sources, out DebugType types, out int ids, out DebugSeverity severities, out int lengths, [Out] StringBuilder messageLog)
		{
			fixed (DebugSource* ptr = &sources)
			{
				DebugSource* ptr2 = ptr;
				fixed (DebugType* ptr3 = &types)
				{
					DebugType* ptr4 = ptr3;
					fixed (int* ptr5 = &ids)
					{
						int* ptr6 = ptr5;
						fixed (DebugSeverity* ptr7 = &severities)
						{
							DebugSeverity* ptr8 = ptr7;
							fixed (int* ptr9 = &lengths)
							{
								int* ptr10 = ptr9;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[688]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}
		}

		// Token: 0x06000FCC RID: 4044 RVA: 0x00030AC0 File Offset: 0x0002ECC0
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] DebugSource* sources, [Out] DebugType* types, [Out] int* ids, [Out] DebugSeverity* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[688]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
			Marshal.FreeHGlobal(intPtr);
			return result;
		}

		// Token: 0x06000FCD RID: 4045 RVA: 0x00030B04 File Offset: 0x0002ED04
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] DebugSource[] sources, [Out] DebugType[] types, [Out] uint[] ids, [Out] DebugSeverity[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
		{
			fixed (DebugSource* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
			{
				DebugSource* ptr2 = ptr;
				fixed (DebugType* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
				{
					DebugType* ptr4 = ptr3;
					fixed (uint* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
					{
						uint* ptr6 = ptr5;
						fixed (DebugSeverity* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
						{
							DebugSeverity* ptr8 = ptr7;
							fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
							{
								int* ptr10 = ptr9;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[688]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}
		}

		// Token: 0x06000FCE RID: 4046 RVA: 0x00030BBC File Offset: 0x0002EDBC
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(uint count, int bufSize, out DebugSource sources, out DebugType types, out uint ids, out DebugSeverity severities, out int lengths, [Out] StringBuilder messageLog)
		{
			fixed (DebugSource* ptr = &sources)
			{
				DebugSource* ptr2 = ptr;
				fixed (DebugType* ptr3 = &types)
				{
					DebugType* ptr4 = ptr3;
					fixed (uint* ptr5 = &ids)
					{
						uint* ptr6 = ptr5;
						fixed (DebugSeverity* ptr7 = &severities)
						{
							DebugSeverity* ptr8 = ptr7;
							fixed (int* ptr9 = &lengths)
							{
								int* ptr10 = ptr9;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[688]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}
		}

		// Token: 0x06000FCF RID: 4047 RVA: 0x00030C14 File Offset: 0x0002EE14
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] DebugSource* sources, [Out] DebugType* types, [Out] uint* ids, [Out] DebugSeverity* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[688]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
			Marshal.FreeHGlobal(intPtr);
			return result;
		}

		// Token: 0x06000FD0 RID: 4048 RVA: 0x00030C58 File Offset: 0x0002EE58
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetIndexedPName target, int index, [Out] double[] data)
		{
			fixed (double* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[693]);
			}
		}

		// Token: 0x06000FD1 RID: 4049 RVA: 0x00030C90 File Offset: 0x0002EE90
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetIndexedPName target, int index, out double data)
		{
			fixed (double* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[693]);
			}
		}

		// Token: 0x06000FD2 RID: 4050 RVA: 0x00030CB4 File Offset: 0x0002EEB4
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetIndexedPName target, int index, [Out] double* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, data, GL.EntryPoints[693]);
		}

		// Token: 0x06000FD3 RID: 4051 RVA: 0x00030CCC File Offset: 0x0002EECC
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetIndexedPName target, uint index, [Out] double[] data)
		{
			fixed (double* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[693]);
			}
		}

		// Token: 0x06000FD4 RID: 4052 RVA: 0x00030D04 File Offset: 0x0002EF04
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetIndexedPName target, uint index, out double data)
		{
			fixed (double* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[693]);
			}
		}

		// Token: 0x06000FD5 RID: 4053 RVA: 0x00030D28 File Offset: 0x0002EF28
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetIndexedPName target, uint index, [Out] double* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, data, GL.EntryPoints[693]);
		}

		// Token: 0x06000FD6 RID: 4054 RVA: 0x00030D40 File Offset: 0x0002EF40
		[CLSCompliant(false)]
		public static double GetDouble(GetPName pname)
		{
			double result;
			calli(System.Void(System.Int32,System.Double*), pname, ref result, GL.EntryPoints[696]);
			return result;
		}

		// Token: 0x06000FD7 RID: 4055 RVA: 0x00030D64 File Offset: 0x0002EF64
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetPName pname, [Out] double[] data)
		{
			fixed (double* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Double*), pname, ptr, GL.EntryPoints[696]);
			}
		}

		// Token: 0x06000FD8 RID: 4056 RVA: 0x00030D98 File Offset: 0x0002EF98
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetPName pname, out double data)
		{
			fixed (double* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Double*), pname, ptr, GL.EntryPoints[696]);
			}
		}

		// Token: 0x06000FD9 RID: 4057 RVA: 0x00030DBC File Offset: 0x0002EFBC
		[CLSCompliant(false)]
		public unsafe static void GetDouble(GetPName pname, [Out] double* data)
		{
			calli(System.Void(System.Int32,System.Double*), pname, data, GL.EntryPoints[696]);
		}

		// Token: 0x06000FDA RID: 4058 RVA: 0x00030DD0 File Offset: 0x0002EFD0
		public static ErrorCode GetError()
		{
			return calli(System.Int32(), GL.EntryPoints[697]);
		}

		// Token: 0x06000FDB RID: 4059 RVA: 0x00030DE4 File Offset: 0x0002EFE4
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetIndexedPName target, int index, [Out] float[] data)
		{
			fixed (float* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[703]);
			}
		}

		// Token: 0x06000FDC RID: 4060 RVA: 0x00030E1C File Offset: 0x0002F01C
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetIndexedPName target, int index, out float data)
		{
			fixed (float* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[703]);
			}
		}

		// Token: 0x06000FDD RID: 4061 RVA: 0x00030E40 File Offset: 0x0002F040
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetIndexedPName target, int index, [Out] float* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, data, GL.EntryPoints[703]);
		}

		// Token: 0x06000FDE RID: 4062 RVA: 0x00030E58 File Offset: 0x0002F058
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetIndexedPName target, uint index, [Out] float[] data)
		{
			fixed (float* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[703]);
			}
		}

		// Token: 0x06000FDF RID: 4063 RVA: 0x00030E90 File Offset: 0x0002F090
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetIndexedPName target, uint index, out float data)
		{
			fixed (float* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[703]);
			}
		}

		// Token: 0x06000FE0 RID: 4064 RVA: 0x00030EB4 File Offset: 0x0002F0B4
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetIndexedPName target, uint index, [Out] float* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, data, GL.EntryPoints[703]);
		}

		// Token: 0x06000FE1 RID: 4065 RVA: 0x00030ECC File Offset: 0x0002F0CC
		[CLSCompliant(false)]
		public static float GetFloat(GetPName pname)
		{
			float result;
			calli(System.Void(System.Int32,System.Single*), pname, ref result, GL.EntryPoints[706]);
			return result;
		}

		// Token: 0x06000FE2 RID: 4066 RVA: 0x00030EF0 File Offset: 0x0002F0F0
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetPName pname, [Out] float[] data)
		{
			fixed (float* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[706]);
			}
		}

		// Token: 0x06000FE3 RID: 4067 RVA: 0x00030F24 File Offset: 0x0002F124
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetPName pname, out float data)
		{
			fixed (float* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[706]);
			}
		}

		// Token: 0x06000FE4 RID: 4068 RVA: 0x00030F48 File Offset: 0x0002F148
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetPName pname, [Out] float* data)
		{
			calli(System.Void(System.Int32,System.Single*), pname, data, GL.EntryPoints[706]);
		}

		// Token: 0x06000FE5 RID: 4069 RVA: 0x00030F5C File Offset: 0x0002F15C
		[CLSCompliant(false)]
		public static int GetFragDataIndex(int program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[708]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06000FE6 RID: 4070 RVA: 0x00030F88 File Offset: 0x0002F188
		[CLSCompliant(false)]
		public static int GetFragDataIndex(uint program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[708]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06000FE7 RID: 4071 RVA: 0x00030FB4 File Offset: 0x0002F1B4
		[CLSCompliant(false)]
		public static int GetFragDataLocation(int program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[709]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06000FE8 RID: 4072 RVA: 0x00030FE0 File Offset: 0x0002F1E0
		[CLSCompliant(false)]
		public static int GetFragDataLocation(uint program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[709]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06000FE9 RID: 4073 RVA: 0x0003100C File Offset: 0x0002F20C
		[CLSCompliant(false)]
		public unsafe static void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, attachment, pname, ptr, GL.EntryPoints[715]);
			}
		}

		// Token: 0x06000FEA RID: 4074 RVA: 0x00031044 File Offset: 0x0002F244
		[CLSCompliant(false)]
		public unsafe static void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, attachment, pname, ptr, GL.EntryPoints[715]);
			}
		}

		// Token: 0x06000FEB RID: 4075 RVA: 0x00031068 File Offset: 0x0002F268
		[CLSCompliant(false)]
		public unsafe static void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, attachment, pname, @params, GL.EntryPoints[715]);
		}

		// Token: 0x06000FEC RID: 4076 RVA: 0x00031080 File Offset: 0x0002F280
		[CLSCompliant(false)]
		public unsafe static void GetFramebufferParameter(FramebufferTarget target, FramebufferDefaultParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[717]);
			}
		}

		// Token: 0x06000FED RID: 4077 RVA: 0x000310B8 File Offset: 0x0002F2B8
		[CLSCompliant(false)]
		public unsafe static void GetFramebufferParameter(FramebufferTarget target, FramebufferDefaultParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[717]);
			}
		}

		// Token: 0x06000FEE RID: 4078 RVA: 0x000310DC File Offset: 0x0002F2DC
		[CLSCompliant(false)]
		public unsafe static void GetFramebufferParameter(FramebufferTarget target, FramebufferDefaultParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[717]);
		}

		// Token: 0x06000FEF RID: 4079 RVA: 0x000310F4 File Offset: 0x0002F2F4
		public static void GetHistogram(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values)
		{
			calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, values, GL.EntryPoints[721]);
		}

		// Token: 0x06000FF0 RID: 4080 RVA: 0x0003110C File Offset: 0x0002F30C
		[CLSCompliant(false)]
		public unsafe static void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[] values) where T4 : struct
		{
			fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[721]);
			}
		}

		// Token: 0x06000FF1 RID: 4081 RVA: 0x00031148 File Offset: 0x0002F348
		[CLSCompliant(false)]
		public unsafe static void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[,] values) where T4 : struct
		{
			fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[721]);
			}
		}

		// Token: 0x06000FF2 RID: 4082 RVA: 0x00031188 File Offset: 0x0002F388
		[CLSCompliant(false)]
		public unsafe static void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[,,] values) where T4 : struct
		{
			fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[721]);
			}
		}

		// Token: 0x06000FF3 RID: 4083 RVA: 0x000311C8 File Offset: 0x0002F3C8
		public unsafe static void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [In] [Out] ref T4 values) where T4 : struct
		{
			fixed (T4* ptr = &values)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[721]);
			}
		}

		// Token: 0x06000FF4 RID: 4084 RVA: 0x000311F0 File Offset: 0x0002F3F0
		[CLSCompliant(false)]
		public unsafe static void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[723]);
			}
		}

		// Token: 0x06000FF5 RID: 4085 RVA: 0x00031228 File Offset: 0x0002F428
		[CLSCompliant(false)]
		public unsafe static void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[723]);
			}
		}

		// Token: 0x06000FF6 RID: 4086 RVA: 0x0003124C File Offset: 0x0002F44C
		[CLSCompliant(false)]
		public unsafe static void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[723]);
		}

		// Token: 0x06000FF7 RID: 4087 RVA: 0x00031264 File Offset: 0x0002F464
		[CLSCompliant(false)]
		public unsafe static void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[725]);
			}
		}

		// Token: 0x06000FF8 RID: 4088 RVA: 0x0003129C File Offset: 0x0002F49C
		[CLSCompliant(false)]
		public unsafe static void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[725]);
			}
		}

		// Token: 0x06000FF9 RID: 4089 RVA: 0x000312C0 File Offset: 0x0002F4C0
		[CLSCompliant(false)]
		public unsafe static void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[725]);
		}

		// Token: 0x06000FFA RID: 4090 RVA: 0x000312D8 File Offset: 0x0002F4D8
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, int index, [Out] long[] data)
		{
			fixed (long* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[734]);
			}
		}

		// Token: 0x06000FFB RID: 4091 RVA: 0x00031310 File Offset: 0x0002F510
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, int index, out long data)
		{
			fixed (long* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[734]);
			}
		}

		// Token: 0x06000FFC RID: 4092 RVA: 0x00031334 File Offset: 0x0002F534
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, int index, [Out] long* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, data, GL.EntryPoints[734]);
		}

		// Token: 0x06000FFD RID: 4093 RVA: 0x0003134C File Offset: 0x0002F54C
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, uint index, [Out] long[] data)
		{
			fixed (long* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[734]);
			}
		}

		// Token: 0x06000FFE RID: 4094 RVA: 0x00031384 File Offset: 0x0002F584
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, uint index, out long data)
		{
			fixed (long* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[734]);
			}
		}

		// Token: 0x06000FFF RID: 4095 RVA: 0x000313A8 File Offset: 0x0002F5A8
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, uint index, [Out] long* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, data, GL.EntryPoints[734]);
		}

		// Token: 0x06001000 RID: 4096 RVA: 0x000313C0 File Offset: 0x0002F5C0
		[Obsolete("Use GetIndexedPName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(Version32 target, int index, [Out] long[] data)
		{
			fixed (long* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[734]);
			}
		}

		// Token: 0x06001001 RID: 4097 RVA: 0x000313F8 File Offset: 0x0002F5F8
		[CLSCompliant(false)]
		[Obsolete("Use GetIndexedPName overload instead")]
		public unsafe static void GetInteger64(Version32 target, int index, out long data)
		{
			fixed (long* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[734]);
			}
		}

		// Token: 0x06001002 RID: 4098 RVA: 0x0003141C File Offset: 0x0002F61C
		[CLSCompliant(false)]
		[Obsolete("Use GetIndexedPName overload instead")]
		public unsafe static void GetInteger64(Version32 target, int index, [Out] long* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, data, GL.EntryPoints[734]);
		}

		// Token: 0x06001003 RID: 4099 RVA: 0x00031434 File Offset: 0x0002F634
		[Obsolete("Use GetIndexedPName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(Version32 target, uint index, [Out] long[] data)
		{
			fixed (long* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[734]);
			}
		}

		// Token: 0x06001004 RID: 4100 RVA: 0x0003146C File Offset: 0x0002F66C
		[CLSCompliant(false)]
		[Obsolete("Use GetIndexedPName overload instead")]
		public unsafe static void GetInteger64(Version32 target, uint index, out long data)
		{
			fixed (long* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[734]);
			}
		}

		// Token: 0x06001005 RID: 4101 RVA: 0x00031490 File Offset: 0x0002F690
		[Obsolete("Use GetIndexedPName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(Version32 target, uint index, [Out] long* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, data, GL.EntryPoints[734]);
		}

		// Token: 0x06001006 RID: 4102 RVA: 0x000314A8 File Offset: 0x0002F6A8
		[Obsolete("Use GetPName overload instead")]
		[CLSCompliant(false)]
		public static long GetInteger64(ArbSync pname)
		{
			long result;
			calli(System.Void(System.Int32,System.Int64*), pname, ref result, GL.EntryPoints[735]);
			return result;
		}

		// Token: 0x06001007 RID: 4103 RVA: 0x000314CC File Offset: 0x0002F6CC
		[CLSCompliant(false)]
		public static long GetInteger64(GetPName pname)
		{
			long result;
			calli(System.Void(System.Int32,System.Int64*), pname, ref result, GL.EntryPoints[735]);
			return result;
		}

		// Token: 0x06001008 RID: 4104 RVA: 0x000314F0 File Offset: 0x0002F6F0
		[CLSCompliant(false)]
		[Obsolete("Use GetPName overload instead")]
		public unsafe static void GetInteger64(ArbSync pname, [Out] long[] data)
		{
			fixed (long* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int64*), pname, ptr, GL.EntryPoints[735]);
			}
		}

		// Token: 0x06001009 RID: 4105 RVA: 0x00031524 File Offset: 0x0002F724
		[Obsolete("Use GetPName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(ArbSync pname, out long data)
		{
			fixed (long* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int64*), pname, ptr, GL.EntryPoints[735]);
			}
		}

		// Token: 0x0600100A RID: 4106 RVA: 0x00031548 File Offset: 0x0002F748
		[CLSCompliant(false)]
		[Obsolete("Use GetPName overload instead")]
		public unsafe static void GetInteger64(ArbSync pname, [Out] long* data)
		{
			calli(System.Void(System.Int32,System.Int64*), pname, data, GL.EntryPoints[735]);
		}

		// Token: 0x0600100B RID: 4107 RVA: 0x0003155C File Offset: 0x0002F75C
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetPName pname, [Out] long[] data)
		{
			fixed (long* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int64*), pname, ptr, GL.EntryPoints[735]);
			}
		}

		// Token: 0x0600100C RID: 4108 RVA: 0x00031590 File Offset: 0x0002F790
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetPName pname, out long data)
		{
			fixed (long* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int64*), pname, ptr, GL.EntryPoints[735]);
			}
		}

		// Token: 0x0600100D RID: 4109 RVA: 0x000315B4 File Offset: 0x0002F7B4
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetPName pname, [Out] long* data)
		{
			calli(System.Void(System.Int32,System.Int64*), pname, data, GL.EntryPoints[735]);
		}

		// Token: 0x0600100E RID: 4110 RVA: 0x000315C8 File Offset: 0x0002F7C8
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, int index, [Out] int[] data)
		{
			fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[736]);
			}
		}

		// Token: 0x0600100F RID: 4111 RVA: 0x00031600 File Offset: 0x0002F800
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, int index, out int data)
		{
			fixed (int* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[736]);
			}
		}

		// Token: 0x06001010 RID: 4112 RVA: 0x00031624 File Offset: 0x0002F824
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, int index, [Out] int* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, data, GL.EntryPoints[736]);
		}

		// Token: 0x06001011 RID: 4113 RVA: 0x0003163C File Offset: 0x0002F83C
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, uint index, [Out] int[] data)
		{
			fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[736]);
			}
		}

		// Token: 0x06001012 RID: 4114 RVA: 0x00031674 File Offset: 0x0002F874
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, uint index, out int data)
		{
			fixed (int* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[736]);
			}
		}

		// Token: 0x06001013 RID: 4115 RVA: 0x00031698 File Offset: 0x0002F898
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, uint index, [Out] int* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, data, GL.EntryPoints[736]);
		}

		// Token: 0x06001014 RID: 4116 RVA: 0x000316B0 File Offset: 0x0002F8B0
		[CLSCompliant(false)]
		public static int GetInteger(GetPName pname)
		{
			int result;
			calli(System.Void(System.Int32,System.Int32*), pname, ref result, GL.EntryPoints[740]);
			return result;
		}

		// Token: 0x06001015 RID: 4117 RVA: 0x000316D4 File Offset: 0x0002F8D4
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetPName pname, [Out] int[] data)
		{
			fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[740]);
			}
		}

		// Token: 0x06001016 RID: 4118 RVA: 0x00031708 File Offset: 0x0002F908
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetPName pname, out int data)
		{
			fixed (int* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[740]);
			}
		}

		// Token: 0x06001017 RID: 4119 RVA: 0x0003172C File Offset: 0x0002F92C
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetPName pname, [Out] int* data)
		{
			calli(System.Void(System.Int32,System.Int32*), pname, data, GL.EntryPoints[740]);
		}

		// Token: 0x06001018 RID: 4120 RVA: 0x00031740 File Offset: 0x0002F940
		[CLSCompliant(false)]
		public unsafe static void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, [Out] long[] @params)
		{
			fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int64*), target, internalformat, pname, bufSize, ptr, GL.EntryPoints[741]);
			}
		}

		// Token: 0x06001019 RID: 4121 RVA: 0x0003177C File Offset: 0x0002F97C
		[CLSCompliant(false)]
		public unsafe static void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, out long @params)
		{
			fixed (long* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int64*), target, internalformat, pname, bufSize, ptr, GL.EntryPoints[741]);
			}
		}

		// Token: 0x0600101A RID: 4122 RVA: 0x000317A4 File Offset: 0x0002F9A4
		[CLSCompliant(false)]
		public unsafe static void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, [Out] long* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int64*), target, internalformat, pname, bufSize, @params, GL.EntryPoints[741]);
		}

		// Token: 0x0600101B RID: 4123 RVA: 0x000317BC File Offset: 0x0002F9BC
		[CLSCompliant(false)]
		public unsafe static void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), target, internalformat, pname, bufSize, ptr, GL.EntryPoints[742]);
			}
		}

		// Token: 0x0600101C RID: 4124 RVA: 0x000317F8 File Offset: 0x0002F9F8
		[CLSCompliant(false)]
		public unsafe static void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), target, internalformat, pname, bufSize, ptr, GL.EntryPoints[742]);
			}
		}

		// Token: 0x0600101D RID: 4125 RVA: 0x00031820 File Offset: 0x0002FA20
		[CLSCompliant(false)]
		public unsafe static void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), target, internalformat, pname, bufSize, @params, GL.EntryPoints[742]);
		}

		// Token: 0x0600101E RID: 4126 RVA: 0x00031838 File Offset: 0x0002FA38
		[CLSCompliant(false)]
		public unsafe static void GetLight(LightName light, LightParameter pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), light, pname, ptr, GL.EntryPoints[746]);
			}
		}

		// Token: 0x0600101F RID: 4127 RVA: 0x00031870 File Offset: 0x0002FA70
		[CLSCompliant(false)]
		public unsafe static void GetLight(LightName light, LightParameter pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), light, pname, ptr, GL.EntryPoints[746]);
			}
		}

		// Token: 0x06001020 RID: 4128 RVA: 0x00031894 File Offset: 0x0002FA94
		[CLSCompliant(false)]
		public unsafe static void GetLight(LightName light, LightParameter pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), light, pname, @params, GL.EntryPoints[746]);
		}

		// Token: 0x06001021 RID: 4129 RVA: 0x000318AC File Offset: 0x0002FAAC
		[CLSCompliant(false)]
		public unsafe static void GetLight(LightName light, LightParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), light, pname, ptr, GL.EntryPoints[747]);
			}
		}

		// Token: 0x06001022 RID: 4130 RVA: 0x000318E4 File Offset: 0x0002FAE4
		[CLSCompliant(false)]
		public unsafe static void GetLight(LightName light, LightParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), light, pname, ptr, GL.EntryPoints[747]);
			}
		}

		// Token: 0x06001023 RID: 4131 RVA: 0x00031908 File Offset: 0x0002FB08
		[CLSCompliant(false)]
		public unsafe static void GetLight(LightName light, LightParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), light, pname, @params, GL.EntryPoints[747]);
		}

		// Token: 0x06001024 RID: 4132 RVA: 0x00031920 File Offset: 0x0002FB20
		[CLSCompliant(false)]
		public unsafe static void GetMap(MapTarget target, GetMapQuery query, [Out] double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), target, query, ptr, GL.EntryPoints[758]);
			}
		}

		// Token: 0x06001025 RID: 4133 RVA: 0x00031958 File Offset: 0x0002FB58
		[CLSCompliant(false)]
		public unsafe static void GetMap(MapTarget target, GetMapQuery query, out double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), target, query, ptr, GL.EntryPoints[758]);
			}
		}

		// Token: 0x06001026 RID: 4134 RVA: 0x0003197C File Offset: 0x0002FB7C
		[CLSCompliant(false)]
		public unsafe static void GetMap(MapTarget target, GetMapQuery query, [Out] double* v)
		{
			calli(System.Void(System.Int32,System.Int32,System.Double*), target, query, v, GL.EntryPoints[758]);
		}

		// Token: 0x06001027 RID: 4135 RVA: 0x00031994 File Offset: 0x0002FB94
		[CLSCompliant(false)]
		public unsafe static void GetMap(MapTarget target, GetMapQuery query, [Out] float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, query, ptr, GL.EntryPoints[759]);
			}
		}

		// Token: 0x06001028 RID: 4136 RVA: 0x000319CC File Offset: 0x0002FBCC
		[CLSCompliant(false)]
		public unsafe static void GetMap(MapTarget target, GetMapQuery query, out float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, query, ptr, GL.EntryPoints[759]);
			}
		}

		// Token: 0x06001029 RID: 4137 RVA: 0x000319F0 File Offset: 0x0002FBF0
		[CLSCompliant(false)]
		public unsafe static void GetMap(MapTarget target, GetMapQuery query, [Out] float* v)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, query, v, GL.EntryPoints[759]);
		}

		// Token: 0x0600102A RID: 4138 RVA: 0x00031A08 File Offset: 0x0002FC08
		[CLSCompliant(false)]
		public unsafe static void GetMap(MapTarget target, GetMapQuery query, [Out] int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, query, ptr, GL.EntryPoints[760]);
			}
		}

		// Token: 0x0600102B RID: 4139 RVA: 0x00031A40 File Offset: 0x0002FC40
		[CLSCompliant(false)]
		public unsafe static void GetMap(MapTarget target, GetMapQuery query, out int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, query, ptr, GL.EntryPoints[760]);
			}
		}

		// Token: 0x0600102C RID: 4140 RVA: 0x00031A64 File Offset: 0x0002FC64
		[CLSCompliant(false)]
		public unsafe static void GetMap(MapTarget target, GetMapQuery query, [Out] int* v)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, query, v, GL.EntryPoints[760]);
		}

		// Token: 0x0600102D RID: 4141 RVA: 0x00031A7C File Offset: 0x0002FC7C
		[CLSCompliant(false)]
		public unsafe static void GetMaterial(MaterialFace face, MaterialParameter pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), face, pname, ptr, GL.EntryPoints[764]);
			}
		}

		// Token: 0x0600102E RID: 4142 RVA: 0x00031AB4 File Offset: 0x0002FCB4
		[CLSCompliant(false)]
		public unsafe static void GetMaterial(MaterialFace face, MaterialParameter pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), face, pname, ptr, GL.EntryPoints[764]);
			}
		}

		// Token: 0x0600102F RID: 4143 RVA: 0x00031AD8 File Offset: 0x0002FCD8
		[CLSCompliant(false)]
		public unsafe static void GetMaterial(MaterialFace face, MaterialParameter pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), face, pname, @params, GL.EntryPoints[764]);
		}

		// Token: 0x06001030 RID: 4144 RVA: 0x00031AF0 File Offset: 0x0002FCF0
		[CLSCompliant(false)]
		public unsafe static void GetMaterial(MaterialFace face, MaterialParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), face, pname, ptr, GL.EntryPoints[765]);
			}
		}

		// Token: 0x06001031 RID: 4145 RVA: 0x00031B28 File Offset: 0x0002FD28
		[CLSCompliant(false)]
		public unsafe static void GetMaterial(MaterialFace face, MaterialParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), face, pname, ptr, GL.EntryPoints[765]);
			}
		}

		// Token: 0x06001032 RID: 4146 RVA: 0x00031B4C File Offset: 0x0002FD4C
		[CLSCompliant(false)]
		public unsafe static void GetMaterial(MaterialFace face, MaterialParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), face, pname, @params, GL.EntryPoints[765]);
		}

		// Token: 0x06001033 RID: 4147 RVA: 0x00031B64 File Offset: 0x0002FD64
		public static void GetMinmax(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values)
		{
			calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, values, GL.EntryPoints[768]);
		}

		// Token: 0x06001034 RID: 4148 RVA: 0x00031B7C File Offset: 0x0002FD7C
		[CLSCompliant(false)]
		public unsafe static void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[] values) where T4 : struct
		{
			fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[768]);
			}
		}

		// Token: 0x06001035 RID: 4149 RVA: 0x00031BB8 File Offset: 0x0002FDB8
		[CLSCompliant(false)]
		public unsafe static void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[,] values) where T4 : struct
		{
			fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[768]);
			}
		}

		// Token: 0x06001036 RID: 4150 RVA: 0x00031BF8 File Offset: 0x0002FDF8
		[CLSCompliant(false)]
		public unsafe static void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[,,] values) where T4 : struct
		{
			fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[768]);
			}
		}

		// Token: 0x06001037 RID: 4151 RVA: 0x00031C38 File Offset: 0x0002FE38
		public unsafe static void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [In] [Out] ref T4 values) where T4 : struct
		{
			fixed (T4* ptr = &values)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[768]);
			}
		}

		// Token: 0x06001038 RID: 4152 RVA: 0x00031C60 File Offset: 0x0002FE60
		[CLSCompliant(false)]
		public unsafe static void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[770]);
			}
		}

		// Token: 0x06001039 RID: 4153 RVA: 0x00031C98 File Offset: 0x0002FE98
		[CLSCompliant(false)]
		public unsafe static void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[770]);
			}
		}

		// Token: 0x0600103A RID: 4154 RVA: 0x00031CBC File Offset: 0x0002FEBC
		[CLSCompliant(false)]
		public unsafe static void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[770]);
		}

		// Token: 0x0600103B RID: 4155 RVA: 0x00031CD4 File Offset: 0x0002FED4
		[CLSCompliant(false)]
		public unsafe static void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[772]);
			}
		}

		// Token: 0x0600103C RID: 4156 RVA: 0x00031D0C File Offset: 0x0002FF0C
		[CLSCompliant(false)]
		public unsafe static void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[772]);
			}
		}

		// Token: 0x0600103D RID: 4157 RVA: 0x00031D30 File Offset: 0x0002FF30
		[CLSCompliant(false)]
		public unsafe static void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[772]);
		}

		// Token: 0x0600103E RID: 4158 RVA: 0x00031D48 File Offset: 0x0002FF48
		[CLSCompliant(false)]
		public unsafe static void GetMultisample(GetMultisamplePName pname, int index, [Out] float[] val)
		{
			fixed (float* ptr = ref (val != null && val.Length != 0) ? ref val[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[774]);
			}
		}

		// Token: 0x0600103F RID: 4159 RVA: 0x00031D80 File Offset: 0x0002FF80
		[CLSCompliant(false)]
		public unsafe static void GetMultisample(GetMultisamplePName pname, int index, out float val)
		{
			fixed (float* ptr = &val)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[774]);
			}
		}

		// Token: 0x06001040 RID: 4160 RVA: 0x00031DA4 File Offset: 0x0002FFA4
		[CLSCompliant(false)]
		public unsafe static void GetMultisample(GetMultisamplePName pname, int index, [Out] float* val)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, val, GL.EntryPoints[774]);
		}

		// Token: 0x06001041 RID: 4161 RVA: 0x00031DBC File Offset: 0x0002FFBC
		[CLSCompliant(false)]
		public unsafe static void GetMultisample(GetMultisamplePName pname, uint index, [Out] float[] val)
		{
			fixed (float* ptr = ref (val != null && val.Length != 0) ? ref val[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[774]);
			}
		}

		// Token: 0x06001042 RID: 4162 RVA: 0x00031DF4 File Offset: 0x0002FFF4
		[CLSCompliant(false)]
		public unsafe static void GetMultisample(GetMultisamplePName pname, uint index, out float val)
		{
			fixed (float* ptr = &val)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[774]);
			}
		}

		// Token: 0x06001043 RID: 4163 RVA: 0x00031E18 File Offset: 0x00030018
		[CLSCompliant(false)]
		public unsafe static void GetMultisample(GetMultisamplePName pname, uint index, [Out] float* val)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, val, GL.EntryPoints[774]);
		}

		// Token: 0x06001044 RID: 4164 RVA: 0x00031E30 File Offset: 0x00030030
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, int name, int bufSize, [Out] int[] length, [Out] StringBuilder label)
		{
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[824]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06001045 RID: 4165 RVA: 0x00031E84 File Offset: 0x00030084
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, int name, int bufSize, out int length, [Out] StringBuilder label)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[824]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06001046 RID: 4166 RVA: 0x00031EC4 File Offset: 0x000300C4
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, int name, int bufSize, [Out] int* length, [Out] StringBuilder label)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, length, intPtr, GL.EntryPoints[824]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06001047 RID: 4167 RVA: 0x00031F04 File Offset: 0x00030104
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, uint name, int bufSize, [Out] int[] length, [Out] StringBuilder label)
		{
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[824]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06001048 RID: 4168 RVA: 0x00031F58 File Offset: 0x00030158
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, uint name, int bufSize, out int length, [Out] StringBuilder label)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[824]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06001049 RID: 4169 RVA: 0x00031F98 File Offset: 0x00030198
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, uint name, int bufSize, [Out] int* length, [Out] StringBuilder label)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, length, intPtr, GL.EntryPoints[824]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x0600104A RID: 4170 RVA: 0x00031FD8 File Offset: 0x000301D8
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label)
		{
			fixed (int* ptr2 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, ptr3, intPtr, GL.EntryPoints[830]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600104B RID: 4171 RVA: 0x00032028 File Offset: 0x00030228
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, out int length, [Out] StringBuilder label)
		{
			fixed (int* ptr2 = &length)
			{
				int* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, ptr3, intPtr, GL.EntryPoints[830]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600104C RID: 4172 RVA: 0x00032068 File Offset: 0x00030268
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [Out] int* length, [Out] StringBuilder label)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
			calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, length, intPtr, GL.EntryPoints[830]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x0600104D RID: 4173 RVA: 0x000320A4 File Offset: 0x000302A4
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[830]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x0600104E RID: 4174 RVA: 0x00032108 File Offset: 0x00030308
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = &length)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[830]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x0600104F RID: 4175 RVA: 0x0003215C File Offset: 0x0003035C
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[830]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06001050 RID: 4176 RVA: 0x000321AC File Offset: 0x000303AC
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[830]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x06001051 RID: 4177 RVA: 0x00032214 File Offset: 0x00030414
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = &length)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[830]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x06001052 RID: 4178 RVA: 0x0003226C File Offset: 0x0003046C
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[830]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06001053 RID: 4179 RVA: 0x000322C0 File Offset: 0x000304C0
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[830]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x06001054 RID: 4180 RVA: 0x0003232C File Offset: 0x0003052C
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = &length)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[830]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x06001055 RID: 4181 RVA: 0x00032384 File Offset: 0x00030584
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[830]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06001056 RID: 4182 RVA: 0x000323D8 File Offset: 0x000305D8
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = &ptr)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[830]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x06001057 RID: 4183 RVA: 0x0003242C File Offset: 0x0003062C
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = &ptr)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = &length)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[830]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x06001058 RID: 4184 RVA: 0x0003246C File Offset: 0x0003066C
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = &ptr)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[830]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06001059 RID: 4185 RVA: 0x000324AC File Offset: 0x000306AC
		[CLSCompliant(false)]
		public static float GetPixelMap(PixelMap map)
		{
			float result;
			calli(System.Void(System.Int32,System.Single*), map, ref result, GL.EntryPoints[857]);
			return result;
		}

		// Token: 0x0600105A RID: 4186 RVA: 0x000324D0 File Offset: 0x000306D0
		[CLSCompliant(false)]
		public unsafe static void GetPixelMap(PixelMap map, [Out] float[] values)
		{
			fixed (float* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Single*), map, ptr, GL.EntryPoints[857]);
			}
		}

		// Token: 0x0600105B RID: 4187 RVA: 0x00032504 File Offset: 0x00030704
		[CLSCompliant(false)]
		public unsafe static void GetPixelMap(PixelMap map, out float values)
		{
			fixed (float* ptr = &values)
			{
				calli(System.Void(System.Int32,System.Single*), map, ptr, GL.EntryPoints[857]);
			}
		}

		// Token: 0x0600105C RID: 4188 RVA: 0x00032528 File Offset: 0x00030728
		[CLSCompliant(false)]
		public unsafe static void GetPixelMap(PixelMap map, [Out] float* values)
		{
			calli(System.Void(System.Int32,System.Single*), map, values, GL.EntryPoints[857]);
		}

		// Token: 0x0600105D RID: 4189 RVA: 0x0003253C File Offset: 0x0003073C
		[CLSCompliant(false)]
		public unsafe static void GetPixelMap(PixelMap map, [Out] int[] values)
		{
			fixed (int* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), map, ptr, GL.EntryPoints[858]);
			}
		}

		// Token: 0x0600105E RID: 4190 RVA: 0x00032570 File Offset: 0x00030770
		[CLSCompliant(false)]
		public unsafe static void GetPixelMap(PixelMap map, out int values)
		{
			fixed (int* ptr = &values)
			{
				calli(System.Void(System.Int32,System.UInt32*), map, ptr, GL.EntryPoints[858]);
			}
		}

		// Token: 0x0600105F RID: 4191 RVA: 0x00032594 File Offset: 0x00030794
		[CLSCompliant(false)]
		public unsafe static void GetPixelMap(PixelMap map, [Out] int* values)
		{
			calli(System.Void(System.Int32,System.UInt32*), map, values, GL.EntryPoints[858]);
		}

		// Token: 0x06001060 RID: 4192 RVA: 0x000325A8 File Offset: 0x000307A8
		[CLSCompliant(false)]
		public unsafe static void GetPixelMap(PixelMap map, [Out] uint[] values)
		{
			fixed (uint* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), map, ptr, GL.EntryPoints[858]);
			}
		}

		// Token: 0x06001061 RID: 4193 RVA: 0x000325DC File Offset: 0x000307DC
		[CLSCompliant(false)]
		public unsafe static void GetPixelMap(PixelMap map, out uint values)
		{
			fixed (uint* ptr = &values)
			{
				calli(System.Void(System.Int32,System.UInt32*), map, ptr, GL.EntryPoints[858]);
			}
		}

		// Token: 0x06001062 RID: 4194 RVA: 0x00032600 File Offset: 0x00030800
		[CLSCompliant(false)]
		public unsafe static void GetPixelMap(PixelMap map, [Out] uint* values)
		{
			calli(System.Void(System.Int32,System.UInt32*), map, values, GL.EntryPoints[858]);
		}

		// Token: 0x06001063 RID: 4195 RVA: 0x00032614 File Offset: 0x00030814
		[CLSCompliant(false)]
		public unsafe static void GetPixelMap(PixelMap map, [Out] short[] values)
		{
			fixed (short* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt16*), map, ptr, GL.EntryPoints[859]);
			}
		}

		// Token: 0x06001064 RID: 4196 RVA: 0x00032648 File Offset: 0x00030848
		[CLSCompliant(false)]
		public unsafe static void GetPixelMap(PixelMap map, out short values)
		{
			fixed (short* ptr = &values)
			{
				calli(System.Void(System.Int32,System.UInt16*), map, ptr, GL.EntryPoints[859]);
			}
		}

		// Token: 0x06001065 RID: 4197 RVA: 0x0003266C File Offset: 0x0003086C
		[CLSCompliant(false)]
		public unsafe static void GetPixelMap(PixelMap map, [Out] short* values)
		{
			calli(System.Void(System.Int32,System.UInt16*), map, values, GL.EntryPoints[859]);
		}

		// Token: 0x06001066 RID: 4198 RVA: 0x00032680 File Offset: 0x00030880
		[CLSCompliant(false)]
		public unsafe static void GetPixelMap(PixelMap map, [Out] ushort[] values)
		{
			fixed (ushort* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt16*), map, ptr, GL.EntryPoints[859]);
			}
		}

		// Token: 0x06001067 RID: 4199 RVA: 0x000326B4 File Offset: 0x000308B4
		[CLSCompliant(false)]
		public unsafe static void GetPixelMap(PixelMap map, out ushort values)
		{
			fixed (ushort* ptr = &values)
			{
				calli(System.Void(System.Int32,System.UInt16*), map, ptr, GL.EntryPoints[859]);
			}
		}

		// Token: 0x06001068 RID: 4200 RVA: 0x000326D8 File Offset: 0x000308D8
		[CLSCompliant(false)]
		public unsafe static void GetPixelMap(PixelMap map, [Out] ushort* values)
		{
			calli(System.Void(System.Int32,System.UInt16*), map, values, GL.EntryPoints[859]);
		}

		// Token: 0x06001069 RID: 4201 RVA: 0x000326EC File Offset: 0x000308EC
		[CLSCompliant(false)]
		public unsafe static void GetPixelMapx(OesFixedPoint map, int size, [Out] int[] values)
		{
			fixed (int* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), map, size, ptr, GL.EntryPoints[860]);
			}
		}

		// Token: 0x0600106A RID: 4202 RVA: 0x00032724 File Offset: 0x00030924
		[CLSCompliant(false)]
		public unsafe static void GetPixelMapx(OesFixedPoint map, int size, out int values)
		{
			fixed (int* ptr = &values)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), map, size, ptr, GL.EntryPoints[860]);
			}
		}

		// Token: 0x0600106B RID: 4203 RVA: 0x00032748 File Offset: 0x00030948
		[CLSCompliant(false)]
		public unsafe static void GetPixelMapx(OesFixedPoint map, int size, [Out] int* values)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), map, size, values, GL.EntryPoints[860]);
		}

		// Token: 0x0600106C RID: 4204 RVA: 0x00032760 File Offset: 0x00030960
		public static void GetPointer(GetPointervPName pname, [Out] IntPtr @params)
		{
			calli(System.Void(System.Int32,System.IntPtr), pname, @params, GL.EntryPoints[867]);
		}

		// Token: 0x0600106D RID: 4205 RVA: 0x00032774 File Offset: 0x00030974
		[CLSCompliant(false)]
		public unsafe static void GetPointer<T1>(GetPointervPName pname, [In] [Out] T1[] @params) where T1 : struct
		{
			fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[867]);
			}
		}

		// Token: 0x0600106E RID: 4206 RVA: 0x000327A8 File Offset: 0x000309A8
		[CLSCompliant(false)]
		public unsafe static void GetPointer<T1>(GetPointervPName pname, [In] [Out] T1[,] @params) where T1 : struct
		{
			fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[867]);
			}
		}

		// Token: 0x0600106F RID: 4207 RVA: 0x000327E0 File Offset: 0x000309E0
		[CLSCompliant(false)]
		public unsafe static void GetPointer<T1>(GetPointervPName pname, [In] [Out] T1[,,] @params) where T1 : struct
		{
			fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[867]);
			}
		}

		// Token: 0x06001070 RID: 4208 RVA: 0x0003281C File Offset: 0x00030A1C
		public unsafe static void GetPointer<T1>(GetPointervPName pname, [In] [Out] ref T1 @params) where T1 : struct
		{
			fixed (T1* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[867]);
			}
		}

		// Token: 0x06001071 RID: 4209 RVA: 0x00032840 File Offset: 0x00030A40
		[CLSCompliant(false)]
		public static byte GetPolygonStipple()
		{
			byte result;
			calli(System.Void(System.Byte*), ref result, GL.EntryPoints[870]);
			return result;
		}

		// Token: 0x06001072 RID: 4210 RVA: 0x00032860 File Offset: 0x00030A60
		[CLSCompliant(false)]
		public unsafe static void GetPolygonStipple([Out] byte[] mask)
		{
			fixed (byte* ptr = ref (mask != null && mask.Length != 0) ? ref mask[0] : ref *null)
			{
				calli(System.Void(System.Byte*), ptr, GL.EntryPoints[870]);
			}
		}

		// Token: 0x06001073 RID: 4211 RVA: 0x00032894 File Offset: 0x00030A94
		[CLSCompliant(false)]
		public unsafe static void GetPolygonStipple(out byte mask)
		{
			fixed (byte* ptr = &mask)
			{
				calli(System.Void(System.Byte*), ptr, GL.EntryPoints[870]);
			}
		}

		// Token: 0x06001074 RID: 4212 RVA: 0x000328B8 File Offset: 0x00030AB8
		[CLSCompliant(false)]
		public unsafe static void GetPolygonStipple([Out] byte* mask)
		{
			calli(System.Void(System.Byte*), mask, GL.EntryPoints[870]);
		}

		// Token: 0x06001075 RID: 4213 RVA: 0x000328CC File Offset: 0x00030ACC
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary(int program, int bufSize, out int length, out BinaryFormat binaryFormat, [Out] IntPtr binary)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr3, binary, GL.EntryPoints[871]);
				}
			}
		}

		// Token: 0x06001076 RID: 4214 RVA: 0x000328F8 File Offset: 0x00030AF8
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, out int length, out BinaryFormat binaryFormat, [In] [Out] T4[] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					BinaryFormat* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[871]);
					}
				}
			}
		}

		// Token: 0x06001077 RID: 4215 RVA: 0x00032938 File Offset: 0x00030B38
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, out int length, out BinaryFormat binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					BinaryFormat* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[871]);
					}
				}
			}
		}

		// Token: 0x06001078 RID: 4216 RVA: 0x0003297C File Offset: 0x00030B7C
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, out int length, out BinaryFormat binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					BinaryFormat* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[871]);
					}
				}
			}
		}

		// Token: 0x06001079 RID: 4217 RVA: 0x000329C4 File Offset: 0x00030BC4
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, out int length, out BinaryFormat binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					BinaryFormat* ptr4 = ptr3;
					fixed (T4* ptr5 = &binary)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[871]);
					}
				}
			}
		}

		// Token: 0x0600107A RID: 4218 RVA: 0x000329F0 File Offset: 0x00030BF0
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary(int program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [Out] IntPtr binary)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, binary, GL.EntryPoints[871]);
		}

		// Token: 0x0600107B RID: 4219 RVA: 0x00032A08 File Offset: 0x00030C08
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In] [Out] T4[] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[871]);
			}
		}

		// Token: 0x0600107C RID: 4220 RVA: 0x00032A44 File Offset: 0x00030C44
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[871]);
			}
		}

		// Token: 0x0600107D RID: 4221 RVA: 0x00032A84 File Offset: 0x00030C84
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[871]);
			}
		}

		// Token: 0x0600107E RID: 4222 RVA: 0x00032AC4 File Offset: 0x00030CC4
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
		{
			fixed (T4* ptr = &binary)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[871]);
			}
		}

		// Token: 0x0600107F RID: 4223 RVA: 0x00032AEC File Offset: 0x00030CEC
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary(uint program, int bufSize, out int length, out BinaryFormat binaryFormat, [Out] IntPtr binary)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr3, binary, GL.EntryPoints[871]);
				}
			}
		}

		// Token: 0x06001080 RID: 4224 RVA: 0x00032B18 File Offset: 0x00030D18
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, out int length, out BinaryFormat binaryFormat, [In] [Out] T4[] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					BinaryFormat* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[871]);
					}
				}
			}
		}

		// Token: 0x06001081 RID: 4225 RVA: 0x00032B58 File Offset: 0x00030D58
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, out int length, out BinaryFormat binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					BinaryFormat* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[871]);
					}
				}
			}
		}

		// Token: 0x06001082 RID: 4226 RVA: 0x00032B9C File Offset: 0x00030D9C
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, out int length, out BinaryFormat binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					BinaryFormat* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[871]);
					}
				}
			}
		}

		// Token: 0x06001083 RID: 4227 RVA: 0x00032BE4 File Offset: 0x00030DE4
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, out int length, out BinaryFormat binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (BinaryFormat* ptr3 = &binaryFormat)
				{
					BinaryFormat* ptr4 = ptr3;
					fixed (T4* ptr5 = &binary)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[871]);
					}
				}
			}
		}

		// Token: 0x06001084 RID: 4228 RVA: 0x00032C10 File Offset: 0x00030E10
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [Out] IntPtr binary)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, binary, GL.EntryPoints[871]);
		}

		// Token: 0x06001085 RID: 4229 RVA: 0x00032C28 File Offset: 0x00030E28
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In] [Out] T4[] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[871]);
			}
		}

		// Token: 0x06001086 RID: 4230 RVA: 0x00032C64 File Offset: 0x00030E64
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[871]);
			}
		}

		// Token: 0x06001087 RID: 4231 RVA: 0x00032CA4 File Offset: 0x00030EA4
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[871]);
			}
		}

		// Token: 0x06001088 RID: 4232 RVA: 0x00032CE4 File Offset: 0x00030EE4
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
		{
			fixed (T4* ptr = &binary)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[871]);
			}
		}

		// Token: 0x06001089 RID: 4233 RVA: 0x00032D0C File Offset: 0x00030F0C
		[CLSCompliant(false)]
		public unsafe static void GetProgramInfoLog(int program, int bufSize, out int length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, bufSize, ptr2, intPtr, GL.EntryPoints[876]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600108A RID: 4234 RVA: 0x00032D4C File Offset: 0x00030F4C
		[CLSCompliant(false)]
		public unsafe static void GetProgramInfoLog(int program, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, bufSize, length, intPtr, GL.EntryPoints[876]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x0600108B RID: 4235 RVA: 0x00032D88 File Offset: 0x00030F88
		[CLSCompliant(false)]
		public unsafe static void GetProgramInfoLog(uint program, int bufSize, out int length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, bufSize, ptr2, intPtr, GL.EntryPoints[876]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600108C RID: 4236 RVA: 0x00032DC8 File Offset: 0x00030FC8
		[CLSCompliant(false)]
		public unsafe static void GetProgramInfoLog(uint program, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, bufSize, length, intPtr, GL.EntryPoints[876]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x0600108D RID: 4237 RVA: 0x00032E04 File Offset: 0x00031004
		[CLSCompliant(false)]
		public unsafe static void GetProgramInterface(int program, ProgramInterface programInterface, ProgramInterfaceParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, programInterface, pname, ptr, GL.EntryPoints[877]);
			}
		}

		// Token: 0x0600108E RID: 4238 RVA: 0x00032E3C File Offset: 0x0003103C
		[CLSCompliant(false)]
		public unsafe static void GetProgramInterface(int program, ProgramInterface programInterface, ProgramInterfaceParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, programInterface, pname, ptr, GL.EntryPoints[877]);
			}
		}

		// Token: 0x0600108F RID: 4239 RVA: 0x00032E60 File Offset: 0x00031060
		[CLSCompliant(false)]
		public unsafe static void GetProgramInterface(int program, ProgramInterface programInterface, ProgramInterfaceParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, programInterface, pname, @params, GL.EntryPoints[877]);
		}

		// Token: 0x06001090 RID: 4240 RVA: 0x00032E78 File Offset: 0x00031078
		[CLSCompliant(false)]
		public unsafe static void GetProgramInterface(uint program, ProgramInterface programInterface, ProgramInterfaceParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, programInterface, pname, ptr, GL.EntryPoints[877]);
			}
		}

		// Token: 0x06001091 RID: 4241 RVA: 0x00032EB0 File Offset: 0x000310B0
		[CLSCompliant(false)]
		public unsafe static void GetProgramInterface(uint program, ProgramInterface programInterface, ProgramInterfaceParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, programInterface, pname, ptr, GL.EntryPoints[877]);
			}
		}

		// Token: 0x06001092 RID: 4242 RVA: 0x00032ED4 File Offset: 0x000310D4
		[CLSCompliant(false)]
		public unsafe static void GetProgramInterface(uint program, ProgramInterface programInterface, ProgramInterfaceParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, programInterface, pname, @params, GL.EntryPoints[877]);
		}

		// Token: 0x06001093 RID: 4243 RVA: 0x00032EEC File Offset: 0x000310EC
		[CLSCompliant(false)]
		public unsafe static void GetProgram(int program, GetProgramParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[878]);
			}
		}

		// Token: 0x06001094 RID: 4244 RVA: 0x00032F24 File Offset: 0x00031124
		[CLSCompliant(false)]
		public unsafe static void GetProgram(int program, GetProgramParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[878]);
			}
		}

		// Token: 0x06001095 RID: 4245 RVA: 0x00032F48 File Offset: 0x00031148
		[CLSCompliant(false)]
		public unsafe static void GetProgram(int program, GetProgramParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, @params, GL.EntryPoints[878]);
		}

		// Token: 0x06001096 RID: 4246 RVA: 0x00032F60 File Offset: 0x00031160
		[CLSCompliant(false)]
		[Obsolete("Use GetProgramParameterName overload instead")]
		public unsafe static void GetProgram(int program, ProgramParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[878]);
			}
		}

		// Token: 0x06001097 RID: 4247 RVA: 0x00032F98 File Offset: 0x00031198
		[Obsolete("Use GetProgramParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgram(int program, ProgramParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[878]);
			}
		}

		// Token: 0x06001098 RID: 4248 RVA: 0x00032FBC File Offset: 0x000311BC
		[CLSCompliant(false)]
		[Obsolete("Use GetProgramParameterName overload instead")]
		public unsafe static void GetProgram(int program, ProgramParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, @params, GL.EntryPoints[878]);
		}

		// Token: 0x06001099 RID: 4249 RVA: 0x00032FD4 File Offset: 0x000311D4
		[CLSCompliant(false)]
		public unsafe static void GetProgram(uint program, GetProgramParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[878]);
			}
		}

		// Token: 0x0600109A RID: 4250 RVA: 0x0003300C File Offset: 0x0003120C
		[CLSCompliant(false)]
		public unsafe static void GetProgram(uint program, GetProgramParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[878]);
			}
		}

		// Token: 0x0600109B RID: 4251 RVA: 0x00033030 File Offset: 0x00031230
		[CLSCompliant(false)]
		public unsafe static void GetProgram(uint program, GetProgramParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, @params, GL.EntryPoints[878]);
		}

		// Token: 0x0600109C RID: 4252 RVA: 0x00033048 File Offset: 0x00031248
		[Obsolete("Use GetProgramParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgram(uint program, ProgramParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[878]);
			}
		}

		// Token: 0x0600109D RID: 4253 RVA: 0x00033080 File Offset: 0x00031280
		[CLSCompliant(false)]
		[Obsolete("Use GetProgramParameterName overload instead")]
		public unsafe static void GetProgram(uint program, ProgramParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[878]);
			}
		}

		// Token: 0x0600109E RID: 4254 RVA: 0x000330A4 File Offset: 0x000312A4
		[Obsolete("Use GetProgramParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgram(uint program, ProgramParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, @params, GL.EntryPoints[878]);
		}

		// Token: 0x0600109F RID: 4255 RVA: 0x000330BC File Offset: 0x000312BC
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetProgramPipelineInfoLog(int pipeline, int bufSize, [Out] int[] length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, ptr2, intPtr, GL.EntryPoints[889]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060010A0 RID: 4256 RVA: 0x0003310C File Offset: 0x0003130C
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipelineInfoLog(int pipeline, int bufSize, out int length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, ptr2, intPtr, GL.EntryPoints[889]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060010A1 RID: 4257 RVA: 0x0003314C File Offset: 0x0003134C
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipelineInfoLog(int pipeline, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, length, intPtr, GL.EntryPoints[889]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060010A2 RID: 4258 RVA: 0x00033188 File Offset: 0x00031388
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [Out] int[] length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, ptr2, intPtr, GL.EntryPoints[889]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060010A3 RID: 4259 RVA: 0x000331D8 File Offset: 0x000313D8
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, out int length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, ptr2, intPtr, GL.EntryPoints[889]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060010A4 RID: 4260 RVA: 0x00033218 File Offset: 0x00031418
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, length, intPtr, GL.EntryPoints[889]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060010A5 RID: 4261 RVA: 0x00033254 File Offset: 0x00031454
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipeline(int pipeline, ProgramPipelineParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, ptr, GL.EntryPoints[891]);
			}
		}

		// Token: 0x060010A6 RID: 4262 RVA: 0x0003328C File Offset: 0x0003148C
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipeline(int pipeline, ProgramPipelineParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, ptr, GL.EntryPoints[891]);
			}
		}

		// Token: 0x060010A7 RID: 4263 RVA: 0x000332B0 File Offset: 0x000314B0
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipeline(int pipeline, ProgramPipelineParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, @params, GL.EntryPoints[891]);
		}

		// Token: 0x060010A8 RID: 4264 RVA: 0x000332C8 File Offset: 0x000314C8
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipeline(uint pipeline, ProgramPipelineParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, ptr, GL.EntryPoints[891]);
			}
		}

		// Token: 0x060010A9 RID: 4265 RVA: 0x00033300 File Offset: 0x00031500
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipeline(uint pipeline, ProgramPipelineParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, ptr, GL.EntryPoints[891]);
			}
		}

		// Token: 0x060010AA RID: 4266 RVA: 0x00033324 File Offset: 0x00031524
		[CLSCompliant(false)]
		public unsafe static void GetProgramPipeline(uint pipeline, ProgramPipelineParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, @params, GL.EntryPoints[891]);
		}

		// Token: 0x060010AB RID: 4267 RVA: 0x0003333C File Offset: 0x0003153C
		[CLSCompliant(false)]
		public static int GetProgramResourceIndex(int program, ProgramInterface programInterface, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, programInterface, intPtr, GL.EntryPoints[893]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060010AC RID: 4268 RVA: 0x0003336C File Offset: 0x0003156C
		[CLSCompliant(false)]
		public static int GetProgramResourceIndex(uint program, ProgramInterface programInterface, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, programInterface, intPtr, GL.EntryPoints[893]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060010AD RID: 4269 RVA: 0x0003339C File Offset: 0x0003159C
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetProgramResource(int program, ProgramInterface programInterface, int index, int propCount, ProgramProperty[] props, int bufSize, [Out] int[] length, [Out] int[] @params)
		{
			fixed (ProgramProperty* ptr = ref (props != null && props.Length != 0) ? ref props[0] : ref *null)
			{
				ProgramProperty* ptr2 = ptr;
				fixed (int* ptr3 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr4 = ptr3;
					fixed (int* ptr5 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32*), program, programInterface, index, propCount, ptr2, bufSize, ptr4, ptr5, GL.EntryPoints[894]);
					}
				}
			}
		}

		// Token: 0x060010AE RID: 4270 RVA: 0x0003340C File Offset: 0x0003160C
		[CLSCompliant(false)]
		public unsafe static void GetProgramResource(int program, ProgramInterface programInterface, int index, int propCount, ProgramProperty[] props, int bufSize, out int length, [Out] int[] @params)
		{
			fixed (ProgramProperty* ptr = ref (props != null && props.Length != 0) ? ref props[0] : ref *null)
			{
				ProgramProperty* ptr2 = ptr;
				fixed (int* ptr3 = &length)
				{
					int* ptr4 = ptr3;
					fixed (int* ptr5 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32*), program, programInterface, index, propCount, ptr2, bufSize, ptr4, ptr5, GL.EntryPoints[894]);
					}
				}
			}
		}

		// Token: 0x060010AF RID: 4271 RVA: 0x00033468 File Offset: 0x00031668
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgramResource(int program, ProgramInterface programInterface, int index, int propCount, ref ProgramProperty props, int bufSize, out int length, out int @params)
		{
			fixed (ProgramProperty* ptr = &props)
			{
				ProgramProperty* ptr2 = ptr;
				fixed (int* ptr3 = &length)
				{
					int* ptr4 = ptr3;
					fixed (int* ptr5 = &@params)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32*), program, programInterface, index, propCount, ptr2, bufSize, ptr4, ptr5, GL.EntryPoints[894]);
					}
				}
			}
		}

		// Token: 0x060010B0 RID: 4272 RVA: 0x0003349C File Offset: 0x0003169C
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgramResource(int program, ProgramInterface programInterface, int index, int propCount, ProgramProperty* props, int bufSize, [Out] int* length, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32*), program, programInterface, index, propCount, props, bufSize, length, @params, GL.EntryPoints[894]);
		}

		// Token: 0x060010B1 RID: 4273 RVA: 0x000334C8 File Offset: 0x000316C8
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgramResource(uint program, ProgramInterface programInterface, uint index, int propCount, ProgramProperty[] props, int bufSize, [Out] int[] length, [Out] int[] @params)
		{
			fixed (ProgramProperty* ptr = ref (props != null && props.Length != 0) ? ref props[0] : ref *null)
			{
				ProgramProperty* ptr2 = ptr;
				fixed (int* ptr3 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr4 = ptr3;
					fixed (int* ptr5 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32*), program, programInterface, index, propCount, ptr2, bufSize, ptr4, ptr5, GL.EntryPoints[894]);
					}
				}
			}
		}

		// Token: 0x060010B2 RID: 4274 RVA: 0x00033538 File Offset: 0x00031738
		[CLSCompliant(false)]
		public unsafe static void GetProgramResource(uint program, ProgramInterface programInterface, uint index, int propCount, ProgramProperty[] props, int bufSize, out int length, [Out] int[] @params)
		{
			fixed (ProgramProperty* ptr = ref (props != null && props.Length != 0) ? ref props[0] : ref *null)
			{
				ProgramProperty* ptr2 = ptr;
				fixed (int* ptr3 = &length)
				{
					int* ptr4 = ptr3;
					fixed (int* ptr5 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32*), program, programInterface, index, propCount, ptr2, bufSize, ptr4, ptr5, GL.EntryPoints[894]);
					}
				}
			}
		}

		// Token: 0x060010B3 RID: 4275 RVA: 0x00033594 File Offset: 0x00031794
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgramResource(uint program, ProgramInterface programInterface, uint index, int propCount, ref ProgramProperty props, int bufSize, out int length, out int @params)
		{
			fixed (ProgramProperty* ptr = &props)
			{
				ProgramProperty* ptr2 = ptr;
				fixed (int* ptr3 = &length)
				{
					int* ptr4 = ptr3;
					fixed (int* ptr5 = &@params)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32*), program, programInterface, index, propCount, ptr2, bufSize, ptr4, ptr5, GL.EntryPoints[894]);
					}
				}
			}
		}

		// Token: 0x060010B4 RID: 4276 RVA: 0x000335C8 File Offset: 0x000317C8
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgramResource(uint program, ProgramInterface programInterface, uint index, int propCount, ProgramProperty* props, int bufSize, [Out] int* length, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32*), program, programInterface, index, propCount, props, bufSize, length, @params, GL.EntryPoints[894]);
		}

		// Token: 0x060010B5 RID: 4277 RVA: 0x000335F4 File Offset: 0x000317F4
		[CLSCompliant(false)]
		public static int GetProgramResourceLocation(int program, ProgramInterface programInterface, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, programInterface, intPtr, GL.EntryPoints[895]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060010B6 RID: 4278 RVA: 0x00033624 File Offset: 0x00031824
		[CLSCompliant(false)]
		public static int GetProgramResourceLocation(uint program, ProgramInterface programInterface, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, programInterface, intPtr, GL.EntryPoints[895]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060010B7 RID: 4279 RVA: 0x00033654 File Offset: 0x00031854
		[CLSCompliant(false)]
		public static int GetProgramResourceLocationIndex(int program, ProgramInterface programInterface, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, programInterface, intPtr, GL.EntryPoints[896]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060010B8 RID: 4280 RVA: 0x00033684 File Offset: 0x00031884
		[CLSCompliant(false)]
		public static int GetProgramResourceLocationIndex(uint program, ProgramInterface programInterface, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, programInterface, intPtr, GL.EntryPoints[896]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060010B9 RID: 4281 RVA: 0x000336B4 File Offset: 0x000318B4
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgramResourceName(int program, ProgramInterface programInterface, int index, int bufSize, [Out] int[] length, [Out] StringBuilder name)
		{
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, programInterface, index, bufSize, ptr2, intPtr, GL.EntryPoints[897]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060010BA RID: 4282 RVA: 0x0003370C File Offset: 0x0003190C
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetProgramResourceName(int program, ProgramInterface programInterface, int index, int bufSize, out int length, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, programInterface, index, bufSize, ptr2, intPtr, GL.EntryPoints[897]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060010BB RID: 4283 RVA: 0x00033750 File Offset: 0x00031950
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetProgramResourceName(int program, ProgramInterface programInterface, int index, int bufSize, [Out] int* length, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, programInterface, index, bufSize, length, intPtr, GL.EntryPoints[897]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060010BC RID: 4284 RVA: 0x00033790 File Offset: 0x00031990
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgramResourceName(uint program, ProgramInterface programInterface, uint index, int bufSize, [Out] int[] length, [Out] StringBuilder name)
		{
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, programInterface, index, bufSize, ptr2, intPtr, GL.EntryPoints[897]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060010BD RID: 4285 RVA: 0x000337E8 File Offset: 0x000319E8
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgramResourceName(uint program, ProgramInterface programInterface, uint index, int bufSize, out int length, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, programInterface, index, bufSize, ptr2, intPtr, GL.EntryPoints[897]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060010BE RID: 4286 RVA: 0x0003382C File Offset: 0x00031A2C
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgramResourceName(uint program, ProgramInterface programInterface, uint index, int bufSize, [Out] int* length, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, programInterface, index, bufSize, length, intPtr, GL.EntryPoints[897]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060010BF RID: 4287 RVA: 0x0003386C File Offset: 0x00031A6C
		[CLSCompliant(false)]
		public unsafe static void GetProgramStage(int program, ShaderType shadertype, ProgramStageParameter pname, out int values)
		{
			fixed (int* ptr = &values)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, shadertype, pname, ptr, GL.EntryPoints[898]);
			}
		}

		// Token: 0x060010C0 RID: 4288 RVA: 0x00033890 File Offset: 0x00031A90
		[CLSCompliant(false)]
		public unsafe static void GetProgramStage(int program, ShaderType shadertype, ProgramStageParameter pname, [Out] int* values)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, shadertype, pname, values, GL.EntryPoints[898]);
		}

		// Token: 0x060010C1 RID: 4289 RVA: 0x000338A8 File Offset: 0x00031AA8
		[CLSCompliant(false)]
		public unsafe static void GetProgramStage(uint program, ShaderType shadertype, ProgramStageParameter pname, out int values)
		{
			fixed (int* ptr = &values)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, shadertype, pname, ptr, GL.EntryPoints[898]);
			}
		}

		// Token: 0x060010C2 RID: 4290 RVA: 0x000338CC File Offset: 0x00031ACC
		[CLSCompliant(false)]
		public unsafe static void GetProgramStage(uint program, ShaderType shadertype, ProgramStageParameter pname, [Out] int* values)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, shadertype, pname, values, GL.EntryPoints[898]);
		}

		// Token: 0x060010C3 RID: 4291 RVA: 0x000338E4 File Offset: 0x00031AE4
		[CLSCompliant(false)]
		public unsafe static void GetQueryIndexed(QueryTarget target, int index, GetQueryParam pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, ptr, GL.EntryPoints[902]);
			}
		}

		// Token: 0x060010C4 RID: 4292 RVA: 0x0003391C File Offset: 0x00031B1C
		[CLSCompliant(false)]
		public unsafe static void GetQueryIndexed(QueryTarget target, int index, GetQueryParam pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, ptr, GL.EntryPoints[902]);
			}
		}

		// Token: 0x060010C5 RID: 4293 RVA: 0x00033940 File Offset: 0x00031B40
		[CLSCompliant(false)]
		public unsafe static void GetQueryIndexed(QueryTarget target, int index, GetQueryParam pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, @params, GL.EntryPoints[902]);
		}

		// Token: 0x060010C6 RID: 4294 RVA: 0x00033958 File Offset: 0x00031B58
		[CLSCompliant(false)]
		public unsafe static void GetQueryIndexed(QueryTarget target, uint index, GetQueryParam pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, ptr, GL.EntryPoints[902]);
			}
		}

		// Token: 0x060010C7 RID: 4295 RVA: 0x00033990 File Offset: 0x00031B90
		[CLSCompliant(false)]
		public unsafe static void GetQueryIndexed(QueryTarget target, uint index, GetQueryParam pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, ptr, GL.EntryPoints[902]);
			}
		}

		// Token: 0x060010C8 RID: 4296 RVA: 0x000339B4 File Offset: 0x00031BB4
		[CLSCompliant(false)]
		public unsafe static void GetQueryIndexed(QueryTarget target, uint index, GetQueryParam pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, @params, GL.EntryPoints[902]);
		}

		// Token: 0x060010C9 RID: 4297 RVA: 0x000339CC File Offset: 0x00031BCC
		[CLSCompliant(false)]
		public unsafe static void GetQuery(QueryTarget target, GetQueryParam pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[903]);
			}
		}

		// Token: 0x060010CA RID: 4298 RVA: 0x00033A04 File Offset: 0x00031C04
		[CLSCompliant(false)]
		public unsafe static void GetQuery(QueryTarget target, GetQueryParam pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[903]);
			}
		}

		// Token: 0x060010CB RID: 4299 RVA: 0x00033A28 File Offset: 0x00031C28
		[CLSCompliant(false)]
		public unsafe static void GetQuery(QueryTarget target, GetQueryParam pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[903]);
		}

		// Token: 0x060010CC RID: 4300 RVA: 0x00033A40 File Offset: 0x00031C40
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, [Out] long[] @params)
		{
			fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[905]);
			}
		}

		// Token: 0x060010CD RID: 4301 RVA: 0x00033A78 File Offset: 0x00031C78
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, out long @params)
		{
			fixed (long* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[905]);
			}
		}

		// Token: 0x060010CE RID: 4302 RVA: 0x00033A9C File Offset: 0x00031C9C
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, [Out] long* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, @params, GL.EntryPoints[905]);
		}

		// Token: 0x060010CF RID: 4303 RVA: 0x00033AB4 File Offset: 0x00031CB4
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] long[] @params)
		{
			fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[905]);
			}
		}

		// Token: 0x060010D0 RID: 4304 RVA: 0x00033AEC File Offset: 0x00031CEC
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, out long @params)
		{
			fixed (long* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[905]);
			}
		}

		// Token: 0x060010D1 RID: 4305 RVA: 0x00033B10 File Offset: 0x00031D10
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] long* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, @params, GL.EntryPoints[905]);
		}

		// Token: 0x060010D2 RID: 4306 RVA: 0x00033B28 File Offset: 0x00031D28
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[907]);
			}
		}

		// Token: 0x060010D3 RID: 4307 RVA: 0x00033B60 File Offset: 0x00031D60
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[907]);
			}
		}

		// Token: 0x060010D4 RID: 4308 RVA: 0x00033B84 File Offset: 0x00031D84
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, @params, GL.EntryPoints[907]);
		}

		// Token: 0x060010D5 RID: 4309 RVA: 0x00033B9C File Offset: 0x00031D9C
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[907]);
			}
		}

		// Token: 0x060010D6 RID: 4310 RVA: 0x00033BD4 File Offset: 0x00031DD4
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[907]);
			}
		}

		// Token: 0x060010D7 RID: 4311 RVA: 0x00033BF8 File Offset: 0x00031DF8
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, @params, GL.EntryPoints[907]);
		}

		// Token: 0x060010D8 RID: 4312 RVA: 0x00033C10 File Offset: 0x00031E10
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] ulong[] @params)
		{
			fixed (ulong* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, ptr, GL.EntryPoints[909]);
			}
		}

		// Token: 0x060010D9 RID: 4313 RVA: 0x00033C48 File Offset: 0x00031E48
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, out ulong @params)
		{
			fixed (ulong* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, ptr, GL.EntryPoints[909]);
			}
		}

		// Token: 0x060010DA RID: 4314 RVA: 0x00033C6C File Offset: 0x00031E6C
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] ulong* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, @params, GL.EntryPoints[909]);
		}

		// Token: 0x060010DB RID: 4315 RVA: 0x00033C84 File Offset: 0x00031E84
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] uint[] @params)
		{
			fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[911]);
			}
		}

		// Token: 0x060010DC RID: 4316 RVA: 0x00033CBC File Offset: 0x00031EBC
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[911]);
			}
		}

		// Token: 0x060010DD RID: 4317 RVA: 0x00033CE0 File Offset: 0x00031EE0
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] uint* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, @params, GL.EntryPoints[911]);
		}

		// Token: 0x060010DE RID: 4318 RVA: 0x00033CF8 File Offset: 0x00031EF8
		[CLSCompliant(false)]
		public unsafe static void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[913]);
			}
		}

		// Token: 0x060010DF RID: 4319 RVA: 0x00033D30 File Offset: 0x00031F30
		[CLSCompliant(false)]
		public unsafe static void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[913]);
			}
		}

		// Token: 0x060010E0 RID: 4320 RVA: 0x00033D54 File Offset: 0x00031F54
		[CLSCompliant(false)]
		public unsafe static void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[913]);
		}

		// Token: 0x060010E1 RID: 4321 RVA: 0x00033D6C File Offset: 0x00031F6C
		[Obsolete("Use SamplerParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameter pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[915]);
			}
		}

		// Token: 0x060010E2 RID: 4322 RVA: 0x00033DA4 File Offset: 0x00031FA4
		[Obsolete("Use SamplerParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameter pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[915]);
			}
		}

		// Token: 0x060010E3 RID: 4323 RVA: 0x00033DC8 File Offset: 0x00031FC8
		[Obsolete("Use SamplerParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameter pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, @params, GL.EntryPoints[915]);
		}

		// Token: 0x060010E4 RID: 4324 RVA: 0x00033DE0 File Offset: 0x00031FE0
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[915]);
			}
		}

		// Token: 0x060010E5 RID: 4325 RVA: 0x00033E18 File Offset: 0x00032018
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[915]);
			}
		}

		// Token: 0x060010E6 RID: 4326 RVA: 0x00033E3C File Offset: 0x0003203C
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, @params, GL.EntryPoints[915]);
		}

		// Token: 0x060010E7 RID: 4327 RVA: 0x00033E54 File Offset: 0x00032054
		[Obsolete("Use SamplerParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameter pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[915]);
			}
		}

		// Token: 0x060010E8 RID: 4328 RVA: 0x00033E8C File Offset: 0x0003208C
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameter pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[915]);
			}
		}

		// Token: 0x060010E9 RID: 4329 RVA: 0x00033EB0 File Offset: 0x000320B0
		[Obsolete("Use SamplerParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameter pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, @params, GL.EntryPoints[915]);
		}

		// Token: 0x060010EA RID: 4330 RVA: 0x00033EC8 File Offset: 0x000320C8
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[915]);
			}
		}

		// Token: 0x060010EB RID: 4331 RVA: 0x00033F00 File Offset: 0x00032100
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[915]);
			}
		}

		// Token: 0x060010EC RID: 4332 RVA: 0x00033F24 File Offset: 0x00032124
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, @params, GL.EntryPoints[915]);
		}

		// Token: 0x060010ED RID: 4333 RVA: 0x00033F3C File Offset: 0x0003213C
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(int sampler, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[916]);
			}
		}

		// Token: 0x060010EE RID: 4334 RVA: 0x00033F74 File Offset: 0x00032174
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(int sampler, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[916]);
			}
		}

		// Token: 0x060010EF RID: 4335 RVA: 0x00033F98 File Offset: 0x00032198
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(int sampler, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[916]);
		}

		// Token: 0x060010F0 RID: 4336 RVA: 0x00033FB0 File Offset: 0x000321B0
		[CLSCompliant(false)]
		[Obsolete("Use All overload instead")]
		public unsafe static void GetSamplerParameterI(int sampler, ArbSamplerObjects pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[916]);
			}
		}

		// Token: 0x060010F1 RID: 4337 RVA: 0x00033FE8 File Offset: 0x000321E8
		[Obsolete("Use All overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(int sampler, ArbSamplerObjects pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[916]);
			}
		}

		// Token: 0x060010F2 RID: 4338 RVA: 0x0003400C File Offset: 0x0003220C
		[CLSCompliant(false)]
		[Obsolete("Use All overload instead")]
		public unsafe static void GetSamplerParameterI(int sampler, ArbSamplerObjects pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[916]);
		}

		// Token: 0x060010F3 RID: 4339 RVA: 0x00034024 File Offset: 0x00032224
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[916]);
			}
		}

		// Token: 0x060010F4 RID: 4340 RVA: 0x0003405C File Offset: 0x0003225C
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[916]);
			}
		}

		// Token: 0x060010F5 RID: 4341 RVA: 0x00034080 File Offset: 0x00032280
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[916]);
		}

		// Token: 0x060010F6 RID: 4342 RVA: 0x00034098 File Offset: 0x00032298
		[Obsolete("Use All overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, ArbSamplerObjects pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[916]);
			}
		}

		// Token: 0x060010F7 RID: 4343 RVA: 0x000340D0 File Offset: 0x000322D0
		[Obsolete("Use All overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, ArbSamplerObjects pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[916]);
			}
		}

		// Token: 0x060010F8 RID: 4344 RVA: 0x000340F4 File Offset: 0x000322F4
		[Obsolete("Use All overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, ArbSamplerObjects pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[916]);
		}

		// Token: 0x060010F9 RID: 4345 RVA: 0x0003410C File Offset: 0x0003230C
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, All pname, [Out] uint[] @params)
		{
			fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, ptr, GL.EntryPoints[917]);
			}
		}

		// Token: 0x060010FA RID: 4346 RVA: 0x00034144 File Offset: 0x00032344
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, All pname, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, ptr, GL.EntryPoints[917]);
			}
		}

		// Token: 0x060010FB RID: 4347 RVA: 0x00034168 File Offset: 0x00032368
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, All pname, [Out] uint* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, @params, GL.EntryPoints[917]);
		}

		// Token: 0x060010FC RID: 4348 RVA: 0x00034180 File Offset: 0x00032380
		[CLSCompliant(false)]
		[Obsolete("Use All overload instead")]
		public unsafe static void GetSamplerParameterI(uint sampler, ArbSamplerObjects pname, [Out] uint[] @params)
		{
			fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, ptr, GL.EntryPoints[917]);
			}
		}

		// Token: 0x060010FD RID: 4349 RVA: 0x000341B8 File Offset: 0x000323B8
		[Obsolete("Use All overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, ArbSamplerObjects pname, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, ptr, GL.EntryPoints[917]);
			}
		}

		// Token: 0x060010FE RID: 4350 RVA: 0x000341DC File Offset: 0x000323DC
		[Obsolete("Use All overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameterI(uint sampler, ArbSamplerObjects pname, [Out] uint* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, @params, GL.EntryPoints[917]);
		}

		// Token: 0x060010FF RID: 4351 RVA: 0x000341F4 File Offset: 0x000323F4
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[918]);
			}
		}

		// Token: 0x06001100 RID: 4352 RVA: 0x0003422C File Offset: 0x0003242C
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[918]);
			}
		}

		// Token: 0x06001101 RID: 4353 RVA: 0x00034250 File Offset: 0x00032450
		[Obsolete("Use SamplerParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[918]);
		}

		// Token: 0x06001102 RID: 4354 RVA: 0x00034268 File Offset: 0x00032468
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[918]);
			}
		}

		// Token: 0x06001103 RID: 4355 RVA: 0x000342A0 File Offset: 0x000324A0
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[918]);
			}
		}

		// Token: 0x06001104 RID: 4356 RVA: 0x000342C4 File Offset: 0x000324C4
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[918]);
		}

		// Token: 0x06001105 RID: 4357 RVA: 0x000342DC File Offset: 0x000324DC
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[918]);
			}
		}

		// Token: 0x06001106 RID: 4358 RVA: 0x00034314 File Offset: 0x00032514
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[918]);
			}
		}

		// Token: 0x06001107 RID: 4359 RVA: 0x00034338 File Offset: 0x00032538
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[918]);
		}

		// Token: 0x06001108 RID: 4360 RVA: 0x00034350 File Offset: 0x00032550
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[918]);
			}
		}

		// Token: 0x06001109 RID: 4361 RVA: 0x00034388 File Offset: 0x00032588
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[918]);
			}
		}

		// Token: 0x0600110A RID: 4362 RVA: 0x000343AC File Offset: 0x000325AC
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[918]);
		}

		// Token: 0x0600110B RID: 4363 RVA: 0x000343C4 File Offset: 0x000325C4
		public static void GetSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [Out] IntPtr span)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, column, span, GL.EntryPoints[919]);
		}

		// Token: 0x0600110C RID: 4364 RVA: 0x000343E0 File Offset: 0x000325E0
		[CLSCompliant(false)]
		public unsafe static void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[] row, [In] [Out] T4[] column, [In] [Out] T5[] span) where T3 : struct where T4 : struct where T5 : struct
		{
			fixed (T3* ptr = ref (row != null && row.Length != 0) ? ref row[0] : ref *null)
			{
				T3* ptr2 = ptr;
				fixed (T4* ptr3 = ref (column != null && column.Length != 0) ? ref column[0] : ref *null)
				{
					T4* ptr4 = ptr3;
					fixed (T5* ptr5 = ref (span != null && span.Length != 0) ? ref span[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[919]);
					}
				}
			}
		}

		// Token: 0x0600110D RID: 4365 RVA: 0x00034448 File Offset: 0x00032648
		[CLSCompliant(false)]
		public unsafe static void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[,] row, [In] [Out] T4[,] column, [In] [Out] T5[,] span) where T3 : struct where T4 : struct where T5 : struct
		{
			fixed (T3* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0] : ref *null)
			{
				T3* ptr2 = ptr;
				fixed (T4* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0] : ref *null)
				{
					T4* ptr4 = ptr3;
					fixed (T5* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[919]);
					}
				}
			}
		}

		// Token: 0x0600110E RID: 4366 RVA: 0x000344BC File Offset: 0x000326BC
		[CLSCompliant(false)]
		public unsafe static void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[,,] row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
		{
			fixed (T3* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0, 0] : ref *null)
			{
				T3* ptr2 = ptr;
				fixed (T4* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
				{
					T4* ptr4 = ptr3;
					fixed (T5* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[919]);
					}
				}
			}
		}

		// Token: 0x0600110F RID: 4367 RVA: 0x00034534 File Offset: 0x00032734
		public unsafe static void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [In] [Out] ref T3 row, [In] [Out] ref T4 column, [In] [Out] ref T5 span) where T3 : struct where T4 : struct where T5 : struct
		{
			fixed (T3* ptr = &row)
			{
				T3* ptr2 = ptr;
				fixed (T4* ptr3 = &column)
				{
					T4* ptr4 = ptr3;
					fixed (T5* ptr5 = &span)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[919]);
					}
				}
			}
		}

		// Token: 0x06001110 RID: 4368 RVA: 0x00034564 File Offset: 0x00032764
		[CLSCompliant(false)]
		public unsafe static void GetShaderInfoLog(int shader, int bufSize, out int length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, ptr2, intPtr, GL.EntryPoints[921]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06001111 RID: 4369 RVA: 0x000345A4 File Offset: 0x000327A4
		[CLSCompliant(false)]
		public unsafe static void GetShaderInfoLog(int shader, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, length, intPtr, GL.EntryPoints[921]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06001112 RID: 4370 RVA: 0x000345E0 File Offset: 0x000327E0
		[CLSCompliant(false)]
		public unsafe static void GetShaderInfoLog(uint shader, int bufSize, out int length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, ptr2, intPtr, GL.EntryPoints[921]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06001113 RID: 4371 RVA: 0x00034620 File Offset: 0x00032820
		[CLSCompliant(false)]
		public unsafe static void GetShaderInfoLog(uint shader, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, length, intPtr, GL.EntryPoints[921]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06001114 RID: 4372 RVA: 0x0003465C File Offset: 0x0003285C
		[CLSCompliant(false)]
		public unsafe static void GetShader(int shader, ShaderParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, ptr, GL.EntryPoints[922]);
			}
		}

		// Token: 0x06001115 RID: 4373 RVA: 0x00034694 File Offset: 0x00032894
		[CLSCompliant(false)]
		public unsafe static void GetShader(int shader, ShaderParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, ptr, GL.EntryPoints[922]);
			}
		}

		// Token: 0x06001116 RID: 4374 RVA: 0x000346B8 File Offset: 0x000328B8
		[CLSCompliant(false)]
		public unsafe static void GetShader(int shader, ShaderParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, @params, GL.EntryPoints[922]);
		}

		// Token: 0x06001117 RID: 4375 RVA: 0x000346D0 File Offset: 0x000328D0
		[CLSCompliant(false)]
		public unsafe static void GetShader(uint shader, ShaderParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, ptr, GL.EntryPoints[922]);
			}
		}

		// Token: 0x06001118 RID: 4376 RVA: 0x00034708 File Offset: 0x00032908
		[CLSCompliant(false)]
		public unsafe static void GetShader(uint shader, ShaderParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, ptr, GL.EntryPoints[922]);
			}
		}

		// Token: 0x06001119 RID: 4377 RVA: 0x0003472C File Offset: 0x0003292C
		[CLSCompliant(false)]
		public unsafe static void GetShader(uint shader, ShaderParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, @params, GL.EntryPoints[922]);
		}

		// Token: 0x0600111A RID: 4378 RVA: 0x00034744 File Offset: 0x00032944
		[CLSCompliant(false)]
		public unsafe static void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecision precisiontype, [Out] int[] range, [Out] int[] precision)
		{
			fixed (int* ptr = ref (range != null && range.Length != 0) ? ref range[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (precision != null && precision.Length != 0) ? ref precision[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32*), shadertype, precisiontype, ptr2, ptr3, GL.EntryPoints[923]);
				}
			}
		}

		// Token: 0x0600111B RID: 4379 RVA: 0x00034790 File Offset: 0x00032990
		[CLSCompliant(false)]
		public unsafe static void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecision precisiontype, out int range, out int precision)
		{
			fixed (int* ptr = &range)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &precision)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32*), shadertype, precisiontype, ptr2, ptr3, GL.EntryPoints[923]);
				}
			}
		}

		// Token: 0x0600111C RID: 4380 RVA: 0x000347B8 File Offset: 0x000329B8
		[CLSCompliant(false)]
		public unsafe static void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecision precisiontype, [Out] int* range, [Out] int* precision)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32*), shadertype, precisiontype, range, precision, GL.EntryPoints[923]);
		}

		// Token: 0x0600111D RID: 4381 RVA: 0x000347D0 File Offset: 0x000329D0
		[CLSCompliant(false)]
		public unsafe static void GetShaderSource(int shader, int bufSize, out int length, [Out] StringBuilder source)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, ptr2, intPtr, GL.EntryPoints[924]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600111E RID: 4382 RVA: 0x00034810 File Offset: 0x00032A10
		[CLSCompliant(false)]
		public unsafe static void GetShaderSource(int shader, int bufSize, [Out] int* length, [Out] StringBuilder source)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, length, intPtr, GL.EntryPoints[924]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x0600111F RID: 4383 RVA: 0x0003484C File Offset: 0x00032A4C
		[CLSCompliant(false)]
		public unsafe static void GetShaderSource(uint shader, int bufSize, out int length, [Out] StringBuilder source)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, ptr2, intPtr, GL.EntryPoints[924]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06001120 RID: 4384 RVA: 0x0003488C File Offset: 0x00032A8C
		[CLSCompliant(false)]
		public unsafe static void GetShaderSource(uint shader, int bufSize, [Out] int* length, [Out] StringBuilder source)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, length, intPtr, GL.EntryPoints[924]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06001121 RID: 4385 RVA: 0x000348C8 File Offset: 0x00032AC8
		public unsafe static string GetString(StringName name)
		{
			return new string((sbyte*)((void*)calli(System.IntPtr(System.Int32), name, GL.EntryPoints[927])));
		}

		// Token: 0x06001122 RID: 4386 RVA: 0x000348E8 File Offset: 0x00032AE8
		[Obsolete("Use StringNameIndexed overload instead")]
		[CLSCompliant(false)]
		public unsafe static string GetString(StringName name, int index)
		{
			return new string((sbyte*)((void*)calli(System.IntPtr(System.Int32,System.UInt32), name, index, GL.EntryPoints[928])));
		}

		// Token: 0x06001123 RID: 4387 RVA: 0x00034908 File Offset: 0x00032B08
		[CLSCompliant(false)]
		[Obsolete("Use StringNameIndexed overload instead")]
		public unsafe static string GetString(StringName name, uint index)
		{
			return new string((sbyte*)((void*)calli(System.IntPtr(System.Int32,System.UInt32), name, index, GL.EntryPoints[928])));
		}

		// Token: 0x06001124 RID: 4388 RVA: 0x00034928 File Offset: 0x00032B28
		[CLSCompliant(false)]
		public unsafe static string GetString(StringNameIndexed name, int index)
		{
			return new string((sbyte*)((void*)calli(System.IntPtr(System.Int32,System.UInt32), name, index, GL.EntryPoints[928])));
		}

		// Token: 0x06001125 RID: 4389 RVA: 0x00034948 File Offset: 0x00032B48
		[CLSCompliant(false)]
		public unsafe static string GetString(StringNameIndexed name, uint index)
		{
			return new string((sbyte*)((void*)calli(System.IntPtr(System.Int32,System.UInt32), name, index, GL.EntryPoints[928])));
		}

		// Token: 0x06001126 RID: 4390 RVA: 0x00034968 File Offset: 0x00032B68
		[CLSCompliant(false)]
		public static int GetSubroutineIndex(int program, ShaderType shadertype, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, shadertype, intPtr, GL.EntryPoints[929]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06001127 RID: 4391 RVA: 0x00034998 File Offset: 0x00032B98
		[CLSCompliant(false)]
		public static int GetSubroutineIndex(uint program, ShaderType shadertype, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, shadertype, intPtr, GL.EntryPoints[929]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06001128 RID: 4392 RVA: 0x000349C8 File Offset: 0x00032BC8
		[CLSCompliant(false)]
		public static int GetSubroutineUniformLocation(int program, ShaderType shadertype, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, shadertype, intPtr, GL.EntryPoints[930]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06001129 RID: 4393 RVA: 0x000349F8 File Offset: 0x00032BF8
		[CLSCompliant(false)]
		public static int GetSubroutineUniformLocation(uint program, ShaderType shadertype, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.IntPtr), program, shadertype, intPtr, GL.EntryPoints[930]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x0600112A RID: 4394 RVA: 0x00034A28 File Offset: 0x00032C28
		[CLSCompliant(false)]
		[Obsolete("Use SyncParameterName overload instead")]
		public unsafe static void GetSync(IntPtr sync, ArbSync pname, int bufSize, out int length, [Out] int[] values)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, ptr2, ptr3, GL.EntryPoints[931]);
				}
			}
		}

		// Token: 0x0600112B RID: 4395 RVA: 0x00034A68 File Offset: 0x00032C68
		[Obsolete("Use SyncParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSync(IntPtr sync, ArbSync pname, int bufSize, out int length, out int values)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &values)
				{
					calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, ptr2, ptr3, GL.EntryPoints[931]);
				}
			}
		}

		// Token: 0x0600112C RID: 4396 RVA: 0x00034A94 File Offset: 0x00032C94
		[Obsolete("Use SyncParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSync(IntPtr sync, ArbSync pname, int bufSize, [Out] int* length, [Out] int* values)
		{
			calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, length, values, GL.EntryPoints[931]);
		}

		// Token: 0x0600112D RID: 4397 RVA: 0x00034AAC File Offset: 0x00032CAC
		[CLSCompliant(false)]
		public unsafe static void GetSync(IntPtr sync, SyncParameterName pname, int bufSize, out int length, [Out] int[] values)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, ptr2, ptr3, GL.EntryPoints[931]);
				}
			}
		}

		// Token: 0x0600112E RID: 4398 RVA: 0x00034AEC File Offset: 0x00032CEC
		[CLSCompliant(false)]
		public unsafe static void GetSync(IntPtr sync, SyncParameterName pname, int bufSize, out int length, out int values)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &values)
				{
					calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, ptr2, ptr3, GL.EntryPoints[931]);
				}
			}
		}

		// Token: 0x0600112F RID: 4399 RVA: 0x00034B18 File Offset: 0x00032D18
		[CLSCompliant(false)]
		public unsafe static void GetSync(IntPtr sync, SyncParameterName pname, int bufSize, [Out] int* length, [Out] int* values)
		{
			calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, length, values, GL.EntryPoints[931]);
		}

		// Token: 0x06001130 RID: 4400 RVA: 0x00034B30 File Offset: 0x00032D30
		[CLSCompliant(false)]
		public unsafe static void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[934]);
			}
		}

		// Token: 0x06001131 RID: 4401 RVA: 0x00034B68 File Offset: 0x00032D68
		[CLSCompliant(false)]
		public unsafe static void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[934]);
			}
		}

		// Token: 0x06001132 RID: 4402 RVA: 0x00034B8C File Offset: 0x00032D8C
		[CLSCompliant(false)]
		public unsafe static void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[934]);
		}

		// Token: 0x06001133 RID: 4403 RVA: 0x00034BA4 File Offset: 0x00032DA4
		[CLSCompliant(false)]
		public unsafe static void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[935]);
			}
		}

		// Token: 0x06001134 RID: 4404 RVA: 0x00034BDC File Offset: 0x00032DDC
		[CLSCompliant(false)]
		public unsafe static void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[935]);
			}
		}

		// Token: 0x06001135 RID: 4405 RVA: 0x00034C00 File Offset: 0x00032E00
		[CLSCompliant(false)]
		public unsafe static void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[935]);
		}

		// Token: 0x06001136 RID: 4406 RVA: 0x00034C18 File Offset: 0x00032E18
		[CLSCompliant(false)]
		public unsafe static void GetTexGen(TextureCoordName coord, TextureGenParameter pname, [Out] double[] @params)
		{
			fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), coord, pname, ptr, GL.EntryPoints[938]);
			}
		}

		// Token: 0x06001137 RID: 4407 RVA: 0x00034C50 File Offset: 0x00032E50
		[CLSCompliant(false)]
		public unsafe static void GetTexGen(TextureCoordName coord, TextureGenParameter pname, out double @params)
		{
			fixed (double* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), coord, pname, ptr, GL.EntryPoints[938]);
			}
		}

		// Token: 0x06001138 RID: 4408 RVA: 0x00034C74 File Offset: 0x00032E74
		[CLSCompliant(false)]
		public unsafe static void GetTexGen(TextureCoordName coord, TextureGenParameter pname, [Out] double* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Double*), coord, pname, @params, GL.EntryPoints[938]);
		}

		// Token: 0x06001139 RID: 4409 RVA: 0x00034C8C File Offset: 0x00032E8C
		[CLSCompliant(false)]
		public unsafe static void GetTexGen(TextureCoordName coord, TextureGenParameter pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), coord, pname, ptr, GL.EntryPoints[939]);
			}
		}

		// Token: 0x0600113A RID: 4410 RVA: 0x00034CC4 File Offset: 0x00032EC4
		[CLSCompliant(false)]
		public unsafe static void GetTexGen(TextureCoordName coord, TextureGenParameter pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), coord, pname, ptr, GL.EntryPoints[939]);
			}
		}

		// Token: 0x0600113B RID: 4411 RVA: 0x00034CE8 File Offset: 0x00032EE8
		[CLSCompliant(false)]
		public unsafe static void GetTexGen(TextureCoordName coord, TextureGenParameter pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), coord, pname, @params, GL.EntryPoints[939]);
		}

		// Token: 0x0600113C RID: 4412 RVA: 0x00034D00 File Offset: 0x00032F00
		[CLSCompliant(false)]
		public unsafe static void GetTexGen(TextureCoordName coord, TextureGenParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), coord, pname, ptr, GL.EntryPoints[940]);
			}
		}

		// Token: 0x0600113D RID: 4413 RVA: 0x00034D38 File Offset: 0x00032F38
		[CLSCompliant(false)]
		public unsafe static void GetTexGen(TextureCoordName coord, TextureGenParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), coord, pname, ptr, GL.EntryPoints[940]);
			}
		}

		// Token: 0x0600113E RID: 4414 RVA: 0x00034D5C File Offset: 0x00032F5C
		[CLSCompliant(false)]
		public unsafe static void GetTexGen(TextureCoordName coord, TextureGenParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), coord, pname, @params, GL.EntryPoints[940]);
		}

		// Token: 0x0600113F RID: 4415 RVA: 0x00034D74 File Offset: 0x00032F74
		public static void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, [Out] IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, pixels, GL.EntryPoints[942]);
		}

		// Token: 0x06001140 RID: 4416 RVA: 0x00034D8C File Offset: 0x00032F8C
		[CLSCompliant(false)]
		public unsafe static void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] T4[] pixels) where T4 : struct
		{
			fixed (T4* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, ptr, GL.EntryPoints[942]);
			}
		}

		// Token: 0x06001141 RID: 4417 RVA: 0x00034DC8 File Offset: 0x00032FC8
		[CLSCompliant(false)]
		public unsafe static void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] T4[,] pixels) where T4 : struct
		{
			fixed (T4* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, ptr, GL.EntryPoints[942]);
			}
		}

		// Token: 0x06001142 RID: 4418 RVA: 0x00034E08 File Offset: 0x00033008
		[CLSCompliant(false)]
		public unsafe static void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] T4[,,] pixels) where T4 : struct
		{
			fixed (T4* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, ptr, GL.EntryPoints[942]);
			}
		}

		// Token: 0x06001143 RID: 4419 RVA: 0x00034E48 File Offset: 0x00033048
		public unsafe static void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] ref T4 pixels) where T4 : struct
		{
			fixed (T4* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, ptr, GL.EntryPoints[942]);
			}
		}

		// Token: 0x06001144 RID: 4420 RVA: 0x00034E70 File Offset: 0x00033070
		[CLSCompliant(false)]
		public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), target, level, pname, ptr, GL.EntryPoints[943]);
			}
		}

		// Token: 0x06001145 RID: 4421 RVA: 0x00034EA8 File Offset: 0x000330A8
		[CLSCompliant(false)]
		public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), target, level, pname, ptr, GL.EntryPoints[943]);
			}
		}

		// Token: 0x06001146 RID: 4422 RVA: 0x00034ECC File Offset: 0x000330CC
		[CLSCompliant(false)]
		public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), target, level, pname, @params, GL.EntryPoints[943]);
		}

		// Token: 0x06001147 RID: 4423 RVA: 0x00034EE4 File Offset: 0x000330E4
		[CLSCompliant(false)]
		public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, level, pname, ptr, GL.EntryPoints[944]);
			}
		}

		// Token: 0x06001148 RID: 4424 RVA: 0x00034F1C File Offset: 0x0003311C
		[CLSCompliant(false)]
		public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, level, pname, ptr, GL.EntryPoints[944]);
			}
		}

		// Token: 0x06001149 RID: 4425 RVA: 0x00034F40 File Offset: 0x00033140
		[CLSCompliant(false)]
		public unsafe static void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, level, pname, @params, GL.EntryPoints[944]);
		}

		// Token: 0x0600114A RID: 4426 RVA: 0x00034F58 File Offset: 0x00033158
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[946]);
			}
		}

		// Token: 0x0600114B RID: 4427 RVA: 0x00034F90 File Offset: 0x00033190
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[946]);
			}
		}

		// Token: 0x0600114C RID: 4428 RVA: 0x00034FB4 File Offset: 0x000331B4
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[946]);
		}

		// Token: 0x0600114D RID: 4429 RVA: 0x00034FCC File Offset: 0x000331CC
		[CLSCompliant(false)]
		public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[947]);
			}
		}

		// Token: 0x0600114E RID: 4430 RVA: 0x00035004 File Offset: 0x00033204
		[CLSCompliant(false)]
		public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[947]);
			}
		}

		// Token: 0x0600114F RID: 4431 RVA: 0x00035028 File Offset: 0x00033228
		[CLSCompliant(false)]
		public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[947]);
		}

		// Token: 0x06001150 RID: 4432 RVA: 0x00035040 File Offset: 0x00033240
		[CLSCompliant(false)]
		public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] uint[] @params)
		{
			fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[949]);
			}
		}

		// Token: 0x06001151 RID: 4433 RVA: 0x00035078 File Offset: 0x00033278
		[CLSCompliant(false)]
		public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[949]);
			}
		}

		// Token: 0x06001152 RID: 4434 RVA: 0x0003509C File Offset: 0x0003329C
		[CLSCompliant(false)]
		public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] uint* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, @params, GL.EntryPoints[949]);
		}

		// Token: 0x06001153 RID: 4435 RVA: 0x000350B4 File Offset: 0x000332B4
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[951]);
			}
		}

		// Token: 0x06001154 RID: 4436 RVA: 0x000350EC File Offset: 0x000332EC
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[951]);
			}
		}

		// Token: 0x06001155 RID: 4437 RVA: 0x00035110 File Offset: 0x00033310
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[951]);
		}

		// Token: 0x06001156 RID: 4438 RVA: 0x00035128 File Offset: 0x00033328
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(int program, int index, int bufSize, out int length, out int size, out ActiveAttribType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (ActiveAttribType* ptr5 = &type)
					{
						ActiveAttribType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[966]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x06001157 RID: 4439 RVA: 0x00035174 File Offset: 0x00033374
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(int program, int index, int bufSize, out int length, out int size, out TransformFeedbackType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (TransformFeedbackType* ptr5 = &type)
					{
						TransformFeedbackType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[966]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x06001158 RID: 4440 RVA: 0x000351C0 File Offset: 0x000333C0
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[966]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06001159 RID: 4441 RVA: 0x00035204 File Offset: 0x00033404
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] TransformFeedbackType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[966]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x0600115A RID: 4442 RVA: 0x00035248 File Offset: 0x00033448
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, out int size, out ActiveAttribType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (ActiveAttribType* ptr5 = &type)
					{
						ActiveAttribType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[966]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x0600115B RID: 4443 RVA: 0x00035294 File Offset: 0x00033494
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, out int size, out TransformFeedbackType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (TransformFeedbackType* ptr5 = &type)
					{
						TransformFeedbackType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[966]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x0600115C RID: 4444 RVA: 0x000352E0 File Offset: 0x000334E0
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[966]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x0600115D RID: 4445 RVA: 0x00035324 File Offset: 0x00033524
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] TransformFeedbackType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[966]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x0600115E RID: 4446 RVA: 0x00035368 File Offset: 0x00033568
		[CLSCompliant(false)]
		public static int GetUniformBlockIndex(int program, string uniformBlockName)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(uniformBlockName);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[969]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x0600115F RID: 4447 RVA: 0x00035394 File Offset: 0x00033594
		[CLSCompliant(false)]
		public static int GetUniformBlockIndex(uint program, string uniformBlockName)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(uniformBlockName);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[969]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06001160 RID: 4448 RVA: 0x000353C0 File Offset: 0x000335C0
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, [Out] double[] @params)
		{
			fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), program, location, ptr, GL.EntryPoints[971]);
			}
		}

		// Token: 0x06001161 RID: 4449 RVA: 0x000353F8 File Offset: 0x000335F8
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, out double @params)
		{
			fixed (double* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), program, location, ptr, GL.EntryPoints[971]);
			}
		}

		// Token: 0x06001162 RID: 4450 RVA: 0x0003541C File Offset: 0x0003361C
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, [Out] double* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double*), program, location, @params, GL.EntryPoints[971]);
		}

		// Token: 0x06001163 RID: 4451 RVA: 0x00035434 File Offset: 0x00033634
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] double[] @params)
		{
			fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), program, location, ptr, GL.EntryPoints[971]);
			}
		}

		// Token: 0x06001164 RID: 4452 RVA: 0x0003546C File Offset: 0x0003366C
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, out double @params)
		{
			fixed (double* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), program, location, ptr, GL.EntryPoints[971]);
			}
		}

		// Token: 0x06001165 RID: 4453 RVA: 0x00035490 File Offset: 0x00033690
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] double* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double*), program, location, @params, GL.EntryPoints[971]);
		}

		// Token: 0x06001166 RID: 4454 RVA: 0x000354A8 File Offset: 0x000336A8
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, ptr, GL.EntryPoints[972]);
			}
		}

		// Token: 0x06001167 RID: 4455 RVA: 0x000354E0 File Offset: 0x000336E0
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, ptr, GL.EntryPoints[972]);
			}
		}

		// Token: 0x06001168 RID: 4456 RVA: 0x00035504 File Offset: 0x00033704
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, @params, GL.EntryPoints[972]);
		}

		// Token: 0x06001169 RID: 4457 RVA: 0x0003551C File Offset: 0x0003371C
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, ptr, GL.EntryPoints[972]);
			}
		}

		// Token: 0x0600116A RID: 4458 RVA: 0x00035554 File Offset: 0x00033754
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, ptr, GL.EntryPoints[972]);
			}
		}

		// Token: 0x0600116B RID: 4459 RVA: 0x00035578 File Offset: 0x00033778
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, @params, GL.EntryPoints[972]);
		}

		// Token: 0x0600116C RID: 4460 RVA: 0x00035590 File Offset: 0x00033790
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(int program, int uniformCount, string[] uniformNames, [Out] int[] uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = ref (uniformIndices != null && uniformIndices.Length != 0) ? ref uniformIndices[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr2, ptr, GL.EntryPoints[975]);
				BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
			}
		}

		// Token: 0x0600116D RID: 4461 RVA: 0x000355D8 File Offset: 0x000337D8
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(int program, int uniformCount, string[] uniformNames, out int uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = &uniformIndices)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr2, ptr, GL.EntryPoints[975]);
				BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
			}
		}

		// Token: 0x0600116E RID: 4462 RVA: 0x0003560C File Offset: 0x0003380C
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(int program, int uniformCount, string[] uniformNames, [Out] int* uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr, uniformIndices, GL.EntryPoints[975]);
			BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
		}

		// Token: 0x0600116F RID: 4463 RVA: 0x00035640 File Offset: 0x00033840
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, [Out] uint[] uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			IntPtr intPtr2 = intPtr;
			fixed (uint* ptr = ref (uniformIndices != null && uniformIndices.Length != 0) ? ref uniformIndices[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr2, ptr, GL.EntryPoints[975]);
				BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
			}
		}

		// Token: 0x06001170 RID: 4464 RVA: 0x00035688 File Offset: 0x00033888
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, out uint uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			IntPtr intPtr2 = intPtr;
			fixed (uint* ptr = &uniformIndices)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr2, ptr, GL.EntryPoints[975]);
				BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
			}
		}

		// Token: 0x06001171 RID: 4465 RVA: 0x000356BC File Offset: 0x000338BC
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, [Out] uint* uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr, uniformIndices, GL.EntryPoints[975]);
			BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
		}

		// Token: 0x06001172 RID: 4466 RVA: 0x000356F0 File Offset: 0x000338F0
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, ptr, GL.EntryPoints[976]);
			}
		}

		// Token: 0x06001173 RID: 4467 RVA: 0x00035728 File Offset: 0x00033928
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, ptr, GL.EntryPoints[976]);
			}
		}

		// Token: 0x06001174 RID: 4468 RVA: 0x0003574C File Offset: 0x0003394C
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, @params, GL.EntryPoints[976]);
		}

		// Token: 0x06001175 RID: 4469 RVA: 0x00035764 File Offset: 0x00033964
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, ptr, GL.EntryPoints[976]);
			}
		}

		// Token: 0x06001176 RID: 4470 RVA: 0x0003579C File Offset: 0x0003399C
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, ptr, GL.EntryPoints[976]);
			}
		}

		// Token: 0x06001177 RID: 4471 RVA: 0x000357C0 File Offset: 0x000339C0
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, @params, GL.EntryPoints[976]);
		}

		// Token: 0x06001178 RID: 4472 RVA: 0x000357D8 File Offset: 0x000339D8
		[CLSCompliant(false)]
		public static int GetUniformLocation(int program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[978]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06001179 RID: 4473 RVA: 0x00035804 File Offset: 0x00033A04
		[CLSCompliant(false)]
		public static int GetUniformLocation(uint program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[978]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x0600117A RID: 4474 RVA: 0x00035830 File Offset: 0x00033A30
		[CLSCompliant(false)]
		public unsafe static void GetUniformSubroutine(ShaderType shadertype, int location, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, location, ptr, GL.EntryPoints[981]);
			}
		}

		// Token: 0x0600117B RID: 4475 RVA: 0x00035854 File Offset: 0x00033A54
		[CLSCompliant(false)]
		public unsafe static void GetUniformSubroutine(ShaderType shadertype, int location, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, location, @params, GL.EntryPoints[981]);
		}

		// Token: 0x0600117C RID: 4476 RVA: 0x0003586C File Offset: 0x00033A6C
		[CLSCompliant(false)]
		public unsafe static void GetUniformSubroutine(ShaderType shadertype, int location, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, location, ptr, GL.EntryPoints[981]);
			}
		}

		// Token: 0x0600117D RID: 4477 RVA: 0x00035890 File Offset: 0x00033A90
		[CLSCompliant(false)]
		public unsafe static void GetUniformSubroutine(ShaderType shadertype, int location, [Out] uint* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, location, @params, GL.EntryPoints[981]);
		}

		// Token: 0x0600117E RID: 4478 RVA: 0x000358A8 File Offset: 0x00033AA8
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] uint[] @params)
		{
			fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), program, location, ptr, GL.EntryPoints[983]);
			}
		}

		// Token: 0x0600117F RID: 4479 RVA: 0x000358E0 File Offset: 0x00033AE0
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), program, location, ptr, GL.EntryPoints[983]);
			}
		}

		// Token: 0x06001180 RID: 4480 RVA: 0x00035904 File Offset: 0x00033B04
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] uint* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), program, location, @params, GL.EntryPoints[983]);
		}

		// Token: 0x06001181 RID: 4481 RVA: 0x0003591C File Offset: 0x00033B1C
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] double[] @params)
		{
			fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[998]);
			}
		}

		// Token: 0x06001182 RID: 4482 RVA: 0x00035954 File Offset: 0x00033B54
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, out double @params)
		{
			fixed (double* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[998]);
			}
		}

		// Token: 0x06001183 RID: 4483 RVA: 0x00035978 File Offset: 0x00033B78
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] double* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, @params, GL.EntryPoints[998]);
		}

		// Token: 0x06001184 RID: 4484 RVA: 0x00035990 File Offset: 0x00033B90
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] double[] @params)
		{
			fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[998]);
			}
		}

		// Token: 0x06001185 RID: 4485 RVA: 0x000359C8 File Offset: 0x00033BC8
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, out double @params)
		{
			fixed (double* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[998]);
			}
		}

		// Token: 0x06001186 RID: 4486 RVA: 0x000359EC File Offset: 0x00033BEC
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] double* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, @params, GL.EntryPoints[998]);
		}

		// Token: 0x06001187 RID: 4487 RVA: 0x00035A04 File Offset: 0x00033C04
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[1001]);
			}
		}

		// Token: 0x06001188 RID: 4488 RVA: 0x00035A3C File Offset: 0x00033C3C
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[1001]);
			}
		}

		// Token: 0x06001189 RID: 4489 RVA: 0x00035A60 File Offset: 0x00033C60
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, @params, GL.EntryPoints[1001]);
		}

		// Token: 0x0600118A RID: 4490 RVA: 0x00035A78 File Offset: 0x00033C78
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[1001]);
			}
		}

		// Token: 0x0600118B RID: 4491 RVA: 0x00035AB0 File Offset: 0x00033CB0
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[1001]);
			}
		}

		// Token: 0x0600118C RID: 4492 RVA: 0x00035AD4 File Offset: 0x00033CD4
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, @params, GL.EntryPoints[1001]);
		}

		// Token: 0x0600118D RID: 4493 RVA: 0x00035AEC File Offset: 0x00033CEC
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(int index, VertexAttribParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[1004]);
			}
		}

		// Token: 0x0600118E RID: 4494 RVA: 0x00035B10 File Offset: 0x00033D10
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(int index, VertexAttribParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[1004]);
		}

		// Token: 0x0600118F RID: 4495 RVA: 0x00035B28 File Offset: 0x00033D28
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(uint index, VertexAttribParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[1004]);
			}
		}

		// Token: 0x06001190 RID: 4496 RVA: 0x00035B4C File Offset: 0x00033D4C
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(uint index, VertexAttribParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[1004]);
		}

		// Token: 0x06001191 RID: 4497 RVA: 0x00035B64 File Offset: 0x00033D64
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(uint index, VertexAttribParameter pname, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), index, pname, ptr, GL.EntryPoints[1006]);
			}
		}

		// Token: 0x06001192 RID: 4498 RVA: 0x00035B88 File Offset: 0x00033D88
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(uint index, VertexAttribParameter pname, [Out] uint* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), index, pname, @params, GL.EntryPoints[1006]);
		}

		// Token: 0x06001193 RID: 4499 RVA: 0x00035BA0 File Offset: 0x00033DA0
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[1008]);
			}
		}

		// Token: 0x06001194 RID: 4500 RVA: 0x00035BD8 File Offset: 0x00033DD8
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[1008]);
			}
		}

		// Token: 0x06001195 RID: 4501 RVA: 0x00035BFC File Offset: 0x00033DFC
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[1008]);
		}

		// Token: 0x06001196 RID: 4502 RVA: 0x00035C14 File Offset: 0x00033E14
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[1008]);
			}
		}

		// Token: 0x06001197 RID: 4503 RVA: 0x00035C4C File Offset: 0x00033E4C
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[1008]);
			}
		}

		// Token: 0x06001198 RID: 4504 RVA: 0x00035C70 File Offset: 0x00033E70
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[1008]);
		}

		// Token: 0x06001199 RID: 4505 RVA: 0x00035C88 File Offset: 0x00033E88
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribL(int index, VertexAttribParameter pname, [Out] double[] @params)
		{
			fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[1011]);
			}
		}

		// Token: 0x0600119A RID: 4506 RVA: 0x00035CC0 File Offset: 0x00033EC0
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribL(int index, VertexAttribParameter pname, out double @params)
		{
			fixed (double* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[1011]);
			}
		}

		// Token: 0x0600119B RID: 4507 RVA: 0x00035CE4 File Offset: 0x00033EE4
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribL(int index, VertexAttribParameter pname, [Out] double* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, @params, GL.EntryPoints[1011]);
		}

		// Token: 0x0600119C RID: 4508 RVA: 0x00035CFC File Offset: 0x00033EFC
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribL(uint index, VertexAttribParameter pname, [Out] double[] @params)
		{
			fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[1011]);
			}
		}

		// Token: 0x0600119D RID: 4509 RVA: 0x00035D34 File Offset: 0x00033F34
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribL(uint index, VertexAttribParameter pname, out double @params)
		{
			fixed (double* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[1011]);
			}
		}

		// Token: 0x0600119E RID: 4510 RVA: 0x00035D58 File Offset: 0x00033F58
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribL(uint index, VertexAttribParameter pname, [Out] double* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, @params, GL.EntryPoints[1011]);
		}

		// Token: 0x0600119F RID: 4511 RVA: 0x00035D70 File Offset: 0x00033F70
		[CLSCompliant(false)]
		public static void GetVertexAttribPointer(int index, VertexAttribPointerParameter pname, [Out] IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, pointer, GL.EntryPoints[1016]);
		}

		// Token: 0x060011A0 RID: 4512 RVA: 0x00035D88 File Offset: 0x00033F88
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In] [Out] T2[] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1016]);
			}
		}

		// Token: 0x060011A1 RID: 4513 RVA: 0x00035DC0 File Offset: 0x00033FC0
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In] [Out] T2[,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1016]);
			}
		}

		// Token: 0x060011A2 RID: 4514 RVA: 0x00035DFC File Offset: 0x00033FFC
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In] [Out] T2[,,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1016]);
			}
		}

		// Token: 0x060011A3 RID: 4515 RVA: 0x00035E38 File Offset: 0x00034038
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In] [Out] ref T2 pointer) where T2 : struct
		{
			fixed (T2* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1016]);
			}
		}

		// Token: 0x060011A4 RID: 4516 RVA: 0x00035E5C File Offset: 0x0003405C
		[CLSCompliant(false)]
		public static void GetVertexAttribPointer(uint index, VertexAttribPointerParameter pname, [Out] IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, pointer, GL.EntryPoints[1016]);
		}

		// Token: 0x060011A5 RID: 4517 RVA: 0x00035E74 File Offset: 0x00034074
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In] [Out] T2[] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1016]);
			}
		}

		// Token: 0x060011A6 RID: 4518 RVA: 0x00035EAC File Offset: 0x000340AC
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In] [Out] T2[,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1016]);
			}
		}

		// Token: 0x060011A7 RID: 4519 RVA: 0x00035EE8 File Offset: 0x000340E8
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In] [Out] T2[,,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1016]);
			}
		}

		// Token: 0x060011A8 RID: 4520 RVA: 0x00035F24 File Offset: 0x00034124
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In] [Out] ref T2 pointer) where T2 : struct
		{
			fixed (T2* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1016]);
			}
		}

		// Token: 0x060011A9 RID: 4521 RVA: 0x00035F48 File Offset: 0x00034148
		public static void Hint(HintTarget target, HintMode mode)
		{
			calli(System.Void(System.Int32,System.Int32), target, mode, GL.EntryPoints[1035]);
		}

		// Token: 0x060011AA RID: 4522 RVA: 0x00035F5C File Offset: 0x0003415C
		public static void Histogram(HistogramTarget target, int width, PixelInternalFormat internalformat, bool sink)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Boolean), target, width, internalformat, sink, GL.EntryPoints[1037]);
		}

		// Token: 0x060011AB RID: 4523 RVA: 0x00035F74 File Offset: 0x00034174
		public static void Index(double c)
		{
			calli(System.Void(System.Double), c, GL.EntryPoints[1045]);
		}

		// Token: 0x060011AC RID: 4524 RVA: 0x00035F88 File Offset: 0x00034188
		[CLSCompliant(false)]
		public unsafe static void Index(double* c)
		{
			calli(System.Void(System.Double*), c, GL.EntryPoints[1046]);
		}

		// Token: 0x060011AD RID: 4525 RVA: 0x00035F9C File Offset: 0x0003419C
		public static void Index(float c)
		{
			calli(System.Void(System.Single), c, GL.EntryPoints[1047]);
		}

		// Token: 0x060011AE RID: 4526 RVA: 0x00035FB0 File Offset: 0x000341B0
		[CLSCompliant(false)]
		public unsafe static void Index(float* c)
		{
			calli(System.Void(System.Single*), c, GL.EntryPoints[1050]);
		}

		// Token: 0x060011AF RID: 4527 RVA: 0x00035FC4 File Offset: 0x000341C4
		public static void Index(int c)
		{
			calli(System.Void(System.Int32), c, GL.EntryPoints[1051]);
		}

		// Token: 0x060011B0 RID: 4528 RVA: 0x00035FD8 File Offset: 0x000341D8
		[CLSCompliant(false)]
		public unsafe static void Index(int* c)
		{
			calli(System.Void(System.Int32*), c, GL.EntryPoints[1052]);
		}

		// Token: 0x060011B1 RID: 4529 RVA: 0x00035FEC File Offset: 0x000341EC
		[CLSCompliant(false)]
		public static void IndexMask(int mask)
		{
			calli(System.Void(System.UInt32), mask, GL.EntryPoints[1053]);
		}

		// Token: 0x060011B2 RID: 4530 RVA: 0x00036000 File Offset: 0x00034200
		[CLSCompliant(false)]
		public static void IndexMask(uint mask)
		{
			calli(System.Void(System.UInt32), mask, GL.EntryPoints[1053]);
		}

		// Token: 0x060011B3 RID: 4531 RVA: 0x00036014 File Offset: 0x00034214
		public static void IndexPointer(IndexPointerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, pointer, GL.EntryPoints[1055]);
		}

		// Token: 0x060011B4 RID: 4532 RVA: 0x0003602C File Offset: 0x0003422C
		[CLSCompliant(false)]
		public unsafe static void IndexPointer<T2>(IndexPointerType type, int stride, [In] [Out] T2[] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[1055]);
			}
		}

		// Token: 0x060011B5 RID: 4533 RVA: 0x00036064 File Offset: 0x00034264
		[CLSCompliant(false)]
		public unsafe static void IndexPointer<T2>(IndexPointerType type, int stride, [In] [Out] T2[,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[1055]);
			}
		}

		// Token: 0x060011B6 RID: 4534 RVA: 0x000360A0 File Offset: 0x000342A0
		[CLSCompliant(false)]
		public unsafe static void IndexPointer<T2>(IndexPointerType type, int stride, [In] [Out] T2[,,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[1055]);
			}
		}

		// Token: 0x060011B7 RID: 4535 RVA: 0x000360DC File Offset: 0x000342DC
		public unsafe static void IndexPointer<T2>(IndexPointerType type, int stride, [In] [Out] ref T2 pointer) where T2 : struct
		{
			fixed (T2* ptr = &pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[1055]);
			}
		}

		// Token: 0x060011B8 RID: 4536 RVA: 0x00036100 File Offset: 0x00034300
		public static void Index(short c)
		{
			calli(System.Void(System.Int16), c, GL.EntryPoints[1058]);
		}

		// Token: 0x060011B9 RID: 4537 RVA: 0x00036114 File Offset: 0x00034314
		[CLSCompliant(false)]
		public unsafe static void Index(short* c)
		{
			calli(System.Void(System.Int16*), c, GL.EntryPoints[1059]);
		}

		// Token: 0x060011BA RID: 4538 RVA: 0x00036128 File Offset: 0x00034328
		public static void Index(byte c)
		{
			calli(System.Void(System.Byte), c, GL.EntryPoints[1060]);
		}

		// Token: 0x060011BB RID: 4539 RVA: 0x0003613C File Offset: 0x0003433C
		[CLSCompliant(false)]
		public unsafe static void Index(byte* c)
		{
			calli(System.Void(System.Byte*), c, GL.EntryPoints[1061]);
		}

		// Token: 0x060011BC RID: 4540 RVA: 0x00036150 File Offset: 0x00034350
		public static void InitNames()
		{
			calli(System.Void(), GL.EntryPoints[1064]);
		}

		// Token: 0x060011BD RID: 4541 RVA: 0x00036164 File Offset: 0x00034364
		public static void InterleavedArrays(InterleavedArrayFormat format, int stride, IntPtr pointer)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr), format, stride, pointer, GL.EntryPoints[1068]);
		}

		// Token: 0x060011BE RID: 4542 RVA: 0x0003617C File Offset: 0x0003437C
		[CLSCompliant(false)]
		public unsafe static void InterleavedArrays<T2>(InterleavedArrayFormat format, int stride, [In] [Out] T2[] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), format, stride, ptr, GL.EntryPoints[1068]);
			}
		}

		// Token: 0x060011BF RID: 4543 RVA: 0x000361B4 File Offset: 0x000343B4
		[CLSCompliant(false)]
		public unsafe static void InterleavedArrays<T2>(InterleavedArrayFormat format, int stride, [In] [Out] T2[,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), format, stride, ptr, GL.EntryPoints[1068]);
			}
		}

		// Token: 0x060011C0 RID: 4544 RVA: 0x000361F0 File Offset: 0x000343F0
		[CLSCompliant(false)]
		public unsafe static void InterleavedArrays<T2>(InterleavedArrayFormat format, int stride, [In] [Out] T2[,,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), format, stride, ptr, GL.EntryPoints[1068]);
			}
		}

		// Token: 0x060011C1 RID: 4545 RVA: 0x0003622C File Offset: 0x0003442C
		public unsafe static void InterleavedArrays<T2>(InterleavedArrayFormat format, int stride, [In] [Out] ref T2 pointer) where T2 : struct
		{
			fixed (T2* ptr = &pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), format, stride, ptr, GL.EntryPoints[1068]);
			}
		}

		// Token: 0x060011C2 RID: 4546 RVA: 0x00036250 File Offset: 0x00034450
		[CLSCompliant(false)]
		public static void InvalidateBufferData(int buffer)
		{
			calli(System.Void(System.UInt32), buffer, GL.EntryPoints[1070]);
		}

		// Token: 0x060011C3 RID: 4547 RVA: 0x00036264 File Offset: 0x00034464
		[CLSCompliant(false)]
		public static void InvalidateBufferData(uint buffer)
		{
			calli(System.Void(System.UInt32), buffer, GL.EntryPoints[1070]);
		}

		// Token: 0x060011C4 RID: 4548 RVA: 0x00036278 File Offset: 0x00034478
		[CLSCompliant(false)]
		public static void InvalidateBufferSubData(int buffer, IntPtr offset, IntPtr length)
		{
			calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr), buffer, offset, length, GL.EntryPoints[1071]);
		}

		// Token: 0x060011C5 RID: 4549 RVA: 0x00036290 File Offset: 0x00034490
		[CLSCompliant(false)]
		public static void InvalidateBufferSubData(uint buffer, IntPtr offset, IntPtr length)
		{
			calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr), buffer, offset, length, GL.EntryPoints[1071]);
		}

		// Token: 0x060011C6 RID: 4550 RVA: 0x000362A8 File Offset: 0x000344A8
		[CLSCompliant(false)]
		public unsafe static void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, FramebufferAttachment[] attachments)
		{
			fixed (FramebufferAttachment* ptr = ref (attachments != null && attachments.Length != 0) ? ref attachments[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, numAttachments, ptr, GL.EntryPoints[1072]);
			}
		}

		// Token: 0x060011C7 RID: 4551 RVA: 0x000362E0 File Offset: 0x000344E0
		[CLSCompliant(false)]
		public unsafe static void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, ref FramebufferAttachment attachments)
		{
			fixed (FramebufferAttachment* ptr = &attachments)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, numAttachments, ptr, GL.EntryPoints[1072]);
			}
		}

		// Token: 0x060011C8 RID: 4552 RVA: 0x00036304 File Offset: 0x00034504
		[CLSCompliant(false)]
		public unsafe static void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, FramebufferAttachment* attachments)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, numAttachments, attachments, GL.EntryPoints[1072]);
		}

		// Token: 0x060011C9 RID: 4553 RVA: 0x0003631C File Offset: 0x0003451C
		[CLSCompliant(false)]
		public unsafe static void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, FramebufferAttachment[] attachments, int x, int y, int width, int height)
		{
			fixed (FramebufferAttachment* ptr = ref (attachments != null && attachments.Length != 0) ? ref attachments[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32,System.Int32), target, numAttachments, ptr, x, y, width, height, GL.EntryPoints[1073]);
			}
		}

		// Token: 0x060011CA RID: 4554 RVA: 0x00036358 File Offset: 0x00034558
		[CLSCompliant(false)]
		public unsafe static void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, ref FramebufferAttachment attachments, int x, int y, int width, int height)
		{
			fixed (FramebufferAttachment* ptr = &attachments)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32,System.Int32), target, numAttachments, ptr, x, y, width, height, GL.EntryPoints[1073]);
			}
		}

		// Token: 0x060011CB RID: 4555 RVA: 0x00036384 File Offset: 0x00034584
		[CLSCompliant(false)]
		public unsafe static void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, FramebufferAttachment* attachments, int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32,System.Int32), target, numAttachments, attachments, x, y, width, height, GL.EntryPoints[1073]);
		}

		// Token: 0x060011CC RID: 4556 RVA: 0x000363AC File Offset: 0x000345AC
		[CLSCompliant(false)]
		public static void InvalidateTexImage(int texture, int level)
		{
			calli(System.Void(System.UInt32,System.Int32), texture, level, GL.EntryPoints[1074]);
		}

		// Token: 0x060011CD RID: 4557 RVA: 0x000363C0 File Offset: 0x000345C0
		[CLSCompliant(false)]
		public static void InvalidateTexImage(uint texture, int level)
		{
			calli(System.Void(System.UInt32,System.Int32), texture, level, GL.EntryPoints[1074]);
		}

		// Token: 0x060011CE RID: 4558 RVA: 0x000363D4 File Offset: 0x000345D4
		[CLSCompliant(false)]
		public static void InvalidateTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, level, xoffset, yoffset, zoffset, width, height, depth, GL.EntryPoints[1075]);
		}

		// Token: 0x060011CF RID: 4559 RVA: 0x00036400 File Offset: 0x00034600
		[CLSCompliant(false)]
		public static void InvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, level, xoffset, yoffset, zoffset, width, height, depth, GL.EntryPoints[1075]);
		}

		// Token: 0x060011D0 RID: 4560 RVA: 0x0003642C File Offset: 0x0003462C
		[CLSCompliant(false)]
		public static bool IsBuffer(int buffer)
		{
			return calli(System.Byte(System.UInt32), buffer, GL.EntryPoints[1077]);
		}

		// Token: 0x060011D1 RID: 4561 RVA: 0x00036440 File Offset: 0x00034640
		[CLSCompliant(false)]
		public static bool IsBuffer(uint buffer)
		{
			return calli(System.Byte(System.UInt32), buffer, GL.EntryPoints[1077]);
		}

		// Token: 0x060011D2 RID: 4562 RVA: 0x00036454 File Offset: 0x00034654
		public static bool IsEnabled(EnableCap cap)
		{
			return calli(System.Byte(System.Int32), cap, GL.EntryPoints[1080]);
		}

		// Token: 0x060011D3 RID: 4563 RVA: 0x00036468 File Offset: 0x00034668
		[CLSCompliant(false)]
		public static bool IsEnabled(IndexedEnableCap target, int index)
		{
			return calli(System.Byte(System.Int32,System.UInt32), target, index, GL.EntryPoints[1081]);
		}

		// Token: 0x060011D4 RID: 4564 RVA: 0x0003647C File Offset: 0x0003467C
		[CLSCompliant(false)]
		public static bool IsEnabled(IndexedEnableCap target, uint index)
		{
			return calli(System.Byte(System.Int32,System.UInt32), target, index, GL.EntryPoints[1081]);
		}

		// Token: 0x060011D5 RID: 4565 RVA: 0x00036490 File Offset: 0x00034690
		[CLSCompliant(false)]
		public static bool IsFramebuffer(int framebuffer)
		{
			return calli(System.Byte(System.UInt32), framebuffer, GL.EntryPoints[1085]);
		}

		// Token: 0x060011D6 RID: 4566 RVA: 0x000364A4 File Offset: 0x000346A4
		[CLSCompliant(false)]
		public static bool IsFramebuffer(uint framebuffer)
		{
			return calli(System.Byte(System.UInt32), framebuffer, GL.EntryPoints[1085]);
		}

		// Token: 0x060011D7 RID: 4567 RVA: 0x000364B8 File Offset: 0x000346B8
		[CLSCompliant(false)]
		public static bool IsList(int list)
		{
			return calli(System.Byte(System.UInt32), list, GL.EntryPoints[1089]);
		}

		// Token: 0x060011D8 RID: 4568 RVA: 0x000364CC File Offset: 0x000346CC
		[CLSCompliant(false)]
		public static bool IsList(uint list)
		{
			return calli(System.Byte(System.UInt32), list, GL.EntryPoints[1089]);
		}

		// Token: 0x060011D9 RID: 4569 RVA: 0x000364E0 File Offset: 0x000346E0
		[CLSCompliant(false)]
		public static bool IsProgram(int program)
		{
			return calli(System.Byte(System.UInt32), program, GL.EntryPoints[1098]);
		}

		// Token: 0x060011DA RID: 4570 RVA: 0x000364F4 File Offset: 0x000346F4
		[CLSCompliant(false)]
		public static bool IsProgram(uint program)
		{
			return calli(System.Byte(System.UInt32), program, GL.EntryPoints[1098]);
		}

		// Token: 0x060011DB RID: 4571 RVA: 0x00036508 File Offset: 0x00034708
		[CLSCompliant(false)]
		public static bool IsProgramPipeline(int pipeline)
		{
			return calli(System.Byte(System.UInt32), pipeline, GL.EntryPoints[1101]);
		}

		// Token: 0x060011DC RID: 4572 RVA: 0x0003651C File Offset: 0x0003471C
		[CLSCompliant(false)]
		public static bool IsProgramPipeline(uint pipeline)
		{
			return calli(System.Byte(System.UInt32), pipeline, GL.EntryPoints[1101]);
		}

		// Token: 0x060011DD RID: 4573 RVA: 0x00036530 File Offset: 0x00034730
		[CLSCompliant(false)]
		public static bool IsQuery(int id)
		{
			return calli(System.Byte(System.UInt32), id, GL.EntryPoints[1103]);
		}

		// Token: 0x060011DE RID: 4574 RVA: 0x00036544 File Offset: 0x00034744
		[CLSCompliant(false)]
		public static bool IsQuery(uint id)
		{
			return calli(System.Byte(System.UInt32), id, GL.EntryPoints[1103]);
		}

		// Token: 0x060011DF RID: 4575 RVA: 0x00036558 File Offset: 0x00034758
		[CLSCompliant(false)]
		public static bool IsRenderbuffer(int renderbuffer)
		{
			return calli(System.Byte(System.UInt32), renderbuffer, GL.EntryPoints[1105]);
		}

		// Token: 0x060011E0 RID: 4576 RVA: 0x0003656C File Offset: 0x0003476C
		[CLSCompliant(false)]
		public static bool IsRenderbuffer(uint renderbuffer)
		{
			return calli(System.Byte(System.UInt32), renderbuffer, GL.EntryPoints[1105]);
		}

		// Token: 0x060011E1 RID: 4577 RVA: 0x00036580 File Offset: 0x00034780
		[CLSCompliant(false)]
		public static bool IsSampler(int sampler)
		{
			return calli(System.Byte(System.UInt32), sampler, GL.EntryPoints[1107]);
		}

		// Token: 0x060011E2 RID: 4578 RVA: 0x00036594 File Offset: 0x00034794
		[CLSCompliant(false)]
		public static bool IsSampler(uint sampler)
		{
			return calli(System.Byte(System.UInt32), sampler, GL.EntryPoints[1107]);
		}

		// Token: 0x060011E3 RID: 4579 RVA: 0x000365A8 File Offset: 0x000347A8
		[CLSCompliant(false)]
		public static bool IsShader(int shader)
		{
			return calli(System.Byte(System.UInt32), shader, GL.EntryPoints[1108]);
		}

		// Token: 0x060011E4 RID: 4580 RVA: 0x000365BC File Offset: 0x000347BC
		[CLSCompliant(false)]
		public static bool IsShader(uint shader)
		{
			return calli(System.Byte(System.UInt32), shader, GL.EntryPoints[1108]);
		}

		// Token: 0x060011E5 RID: 4581 RVA: 0x000365D0 File Offset: 0x000347D0
		public static bool IsSync(IntPtr sync)
		{
			return calli(System.Byte(System.IntPtr), sync, GL.EntryPoints[1109]);
		}

		// Token: 0x060011E6 RID: 4582 RVA: 0x000365E4 File Offset: 0x000347E4
		[CLSCompliant(false)]
		public static bool IsTexture(int texture)
		{
			return calli(System.Byte(System.UInt32), texture, GL.EntryPoints[1110]);
		}

		// Token: 0x060011E7 RID: 4583 RVA: 0x000365F8 File Offset: 0x000347F8
		[CLSCompliant(false)]
		public static bool IsTexture(uint texture)
		{
			return calli(System.Byte(System.UInt32), texture, GL.EntryPoints[1110]);
		}

		// Token: 0x060011E8 RID: 4584 RVA: 0x0003660C File Offset: 0x0003480C
		[CLSCompliant(false)]
		public static bool IsTransformFeedback(int id)
		{
			return calli(System.Byte(System.UInt32), id, GL.EntryPoints[1114]);
		}

		// Token: 0x060011E9 RID: 4585 RVA: 0x00036620 File Offset: 0x00034820
		[CLSCompliant(false)]
		public static bool IsTransformFeedback(uint id)
		{
			return calli(System.Byte(System.UInt32), id, GL.EntryPoints[1114]);
		}

		// Token: 0x060011EA RID: 4586 RVA: 0x00036634 File Offset: 0x00034834
		[CLSCompliant(false)]
		public static bool IsVertexArray(int array)
		{
			return calli(System.Byte(System.UInt32), array, GL.EntryPoints[1117]);
		}

		// Token: 0x060011EB RID: 4587 RVA: 0x00036648 File Offset: 0x00034848
		[CLSCompliant(false)]
		public static bool IsVertexArray(uint array)
		{
			return calli(System.Byte(System.UInt32), array, GL.EntryPoints[1117]);
		}

		// Token: 0x060011EC RID: 4588 RVA: 0x0003665C File Offset: 0x0003485C
		public static void Light(LightName light, LightParameter pname, float param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single), light, pname, param, GL.EntryPoints[1122]);
		}

		// Token: 0x060011ED RID: 4589 RVA: 0x00036674 File Offset: 0x00034874
		[CLSCompliant(false)]
		public unsafe static void Light(LightName light, LightParameter pname, float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), light, pname, ptr, GL.EntryPoints[1123]);
			}
		}

		// Token: 0x060011EE RID: 4590 RVA: 0x000366AC File Offset: 0x000348AC
		[CLSCompliant(false)]
		public unsafe static void Light(LightName light, LightParameter pname, float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), light, pname, @params, GL.EntryPoints[1123]);
		}

		// Token: 0x060011EF RID: 4591 RVA: 0x000366C4 File Offset: 0x000348C4
		public static void Light(LightName light, LightParameter pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), light, pname, param, GL.EntryPoints[1124]);
		}

		// Token: 0x060011F0 RID: 4592 RVA: 0x000366DC File Offset: 0x000348DC
		[CLSCompliant(false)]
		public unsafe static void Light(LightName light, LightParameter pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), light, pname, ptr, GL.EntryPoints[1125]);
			}
		}

		// Token: 0x060011F1 RID: 4593 RVA: 0x00036714 File Offset: 0x00034914
		[CLSCompliant(false)]
		public unsafe static void Light(LightName light, LightParameter pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), light, pname, @params, GL.EntryPoints[1125]);
		}

		// Token: 0x060011F2 RID: 4594 RVA: 0x0003672C File Offset: 0x0003492C
		public static void LightModel(LightModelParameter pname, float param)
		{
			calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[1126]);
		}

		// Token: 0x060011F3 RID: 4595 RVA: 0x00036740 File Offset: 0x00034940
		[CLSCompliant(false)]
		public unsafe static void LightModel(LightModelParameter pname, float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[1127]);
			}
		}

		// Token: 0x060011F4 RID: 4596 RVA: 0x00036774 File Offset: 0x00034974
		[CLSCompliant(false)]
		public unsafe static void LightModel(LightModelParameter pname, float* @params)
		{
			calli(System.Void(System.Int32,System.Single*), pname, @params, GL.EntryPoints[1127]);
		}

		// Token: 0x060011F5 RID: 4597 RVA: 0x00036788 File Offset: 0x00034988
		public static void LightModel(LightModelParameter pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[1128]);
		}

		// Token: 0x060011F6 RID: 4598 RVA: 0x0003679C File Offset: 0x0003499C
		[CLSCompliant(false)]
		public unsafe static void LightModel(LightModelParameter pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[1129]);
			}
		}

		// Token: 0x060011F7 RID: 4599 RVA: 0x000367D0 File Offset: 0x000349D0
		[CLSCompliant(false)]
		public unsafe static void LightModel(LightModelParameter pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32*), pname, @params, GL.EntryPoints[1129]);
		}

		// Token: 0x060011F8 RID: 4600 RVA: 0x000367E4 File Offset: 0x000349E4
		[CLSCompliant(false)]
		public static void LineStipple(int factor, short pattern)
		{
			calli(System.Void(System.Int32,System.UInt16), factor, pattern, GL.EntryPoints[1134]);
		}

		// Token: 0x060011F9 RID: 4601 RVA: 0x000367F8 File Offset: 0x000349F8
		[CLSCompliant(false)]
		public static void LineStipple(int factor, ushort pattern)
		{
			calli(System.Void(System.Int32,System.UInt16), factor, pattern, GL.EntryPoints[1134]);
		}

		// Token: 0x060011FA RID: 4602 RVA: 0x0003680C File Offset: 0x00034A0C
		public static void LineWidth(float width)
		{
			calli(System.Void(System.Single), width, GL.EntryPoints[1135]);
		}

		// Token: 0x060011FB RID: 4603 RVA: 0x00036820 File Offset: 0x00034A20
		[CLSCompliant(false)]
		public static void LinkProgram(int program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[1137]);
		}

		// Token: 0x060011FC RID: 4604 RVA: 0x00036834 File Offset: 0x00034A34
		[CLSCompliant(false)]
		public static void LinkProgram(uint program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[1137]);
		}

		// Token: 0x060011FD RID: 4605 RVA: 0x00036848 File Offset: 0x00034A48
		[CLSCompliant(false)]
		public static void ListBase(int @base)
		{
			calli(System.Void(System.UInt32), @base, GL.EntryPoints[1139]);
		}

		// Token: 0x060011FE RID: 4606 RVA: 0x0003685C File Offset: 0x00034A5C
		[CLSCompliant(false)]
		public static void ListBase(uint @base)
		{
			calli(System.Void(System.UInt32), @base, GL.EntryPoints[1139]);
		}

		// Token: 0x060011FF RID: 4607 RVA: 0x00036870 File Offset: 0x00034A70
		public static void LoadIdentity()
		{
			calli(System.Void(), GL.EntryPoints[1144]);
		}

		// Token: 0x06001200 RID: 4608 RVA: 0x00036884 File Offset: 0x00034A84
		[CLSCompliant(false)]
		public unsafe static void LoadMatrix(double[] m)
		{
			fixed (double* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1146]);
			}
		}

		// Token: 0x06001201 RID: 4609 RVA: 0x000368B8 File Offset: 0x00034AB8
		[CLSCompliant(false)]
		public unsafe static void LoadMatrix(ref double m)
		{
			fixed (double* ptr = &m)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1146]);
			}
		}

		// Token: 0x06001202 RID: 4610 RVA: 0x000368DC File Offset: 0x00034ADC
		[CLSCompliant(false)]
		public unsafe static void LoadMatrix(double* m)
		{
			calli(System.Void(System.Double*), m, GL.EntryPoints[1146]);
		}

		// Token: 0x06001203 RID: 4611 RVA: 0x000368F0 File Offset: 0x00034AF0
		[CLSCompliant(false)]
		public unsafe static void LoadMatrix(float[] m)
		{
			fixed (float* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1147]);
			}
		}

		// Token: 0x06001204 RID: 4612 RVA: 0x00036924 File Offset: 0x00034B24
		[CLSCompliant(false)]
		public unsafe static void LoadMatrix(ref float m)
		{
			fixed (float* ptr = &m)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1147]);
			}
		}

		// Token: 0x06001205 RID: 4613 RVA: 0x00036948 File Offset: 0x00034B48
		[CLSCompliant(false)]
		public unsafe static void LoadMatrix(float* m)
		{
			calli(System.Void(System.Single*), m, GL.EntryPoints[1147]);
		}

		// Token: 0x06001206 RID: 4614 RVA: 0x0003695C File Offset: 0x00034B5C
		[CLSCompliant(false)]
		public static void LoadName(int name)
		{
			calli(System.Void(System.UInt32), name, GL.EntryPoints[1149]);
		}

		// Token: 0x06001207 RID: 4615 RVA: 0x00036970 File Offset: 0x00034B70
		[CLSCompliant(false)]
		public static void LoadName(uint name)
		{
			calli(System.Void(System.UInt32), name, GL.EntryPoints[1149]);
		}

		// Token: 0x06001208 RID: 4616 RVA: 0x00036984 File Offset: 0x00034B84
		[CLSCompliant(false)]
		public unsafe static void LoadTransposeMatrix(double[] m)
		{
			fixed (double* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1151]);
			}
		}

		// Token: 0x06001209 RID: 4617 RVA: 0x000369B8 File Offset: 0x00034BB8
		[CLSCompliant(false)]
		public unsafe static void LoadTransposeMatrix(ref double m)
		{
			fixed (double* ptr = &m)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1151]);
			}
		}

		// Token: 0x0600120A RID: 4618 RVA: 0x000369DC File Offset: 0x00034BDC
		[CLSCompliant(false)]
		public unsafe static void LoadTransposeMatrix(double* m)
		{
			calli(System.Void(System.Double*), m, GL.EntryPoints[1151]);
		}

		// Token: 0x0600120B RID: 4619 RVA: 0x000369F0 File Offset: 0x00034BF0
		[CLSCompliant(false)]
		public unsafe static void LoadTransposeMatrix(float[] m)
		{
			fixed (float* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1153]);
			}
		}

		// Token: 0x0600120C RID: 4620 RVA: 0x00036A24 File Offset: 0x00034C24
		[CLSCompliant(false)]
		public unsafe static void LoadTransposeMatrix(ref float m)
		{
			fixed (float* ptr = &m)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1153]);
			}
		}

		// Token: 0x0600120D RID: 4621 RVA: 0x00036A48 File Offset: 0x00034C48
		[CLSCompliant(false)]
		public unsafe static void LoadTransposeMatrix(float* m)
		{
			calli(System.Void(System.Single*), m, GL.EntryPoints[1153]);
		}

		// Token: 0x0600120E RID: 4622 RVA: 0x00036A5C File Offset: 0x00034C5C
		public static void LogicOp(LogicOp opcode)
		{
			calli(System.Void(System.Int32), opcode, GL.EntryPoints[1157]);
		}

		// Token: 0x0600120F RID: 4623 RVA: 0x00036A70 File Offset: 0x00034C70
		[CLSCompliant(false)]
		public unsafe static void Map1(MapTarget target, double u1, double u2, int stride, int order, double[] points)
		{
			fixed (double* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), target, u1, u2, stride, order, ptr, GL.EntryPoints[1170]);
			}
		}

		// Token: 0x06001210 RID: 4624 RVA: 0x00036AAC File Offset: 0x00034CAC
		[CLSCompliant(false)]
		public unsafe static void Map1(MapTarget target, double u1, double u2, int stride, int order, ref double points)
		{
			fixed (double* ptr = &points)
			{
				calli(System.Void(System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), target, u1, u2, stride, order, ptr, GL.EntryPoints[1170]);
			}
		}

		// Token: 0x06001211 RID: 4625 RVA: 0x00036AD4 File Offset: 0x00034CD4
		[CLSCompliant(false)]
		public unsafe static void Map1(MapTarget target, double u1, double u2, int stride, int order, double* points)
		{
			calli(System.Void(System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), target, u1, u2, stride, order, points, GL.EntryPoints[1170]);
		}

		// Token: 0x06001212 RID: 4626 RVA: 0x00036AF0 File Offset: 0x00034CF0
		[CLSCompliant(false)]
		public unsafe static void Map1(MapTarget target, float u1, float u2, int stride, int order, float[] points)
		{
			fixed (float* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), target, u1, u2, stride, order, ptr, GL.EntryPoints[1171]);
			}
		}

		// Token: 0x06001213 RID: 4627 RVA: 0x00036B2C File Offset: 0x00034D2C
		[CLSCompliant(false)]
		public unsafe static void Map1(MapTarget target, float u1, float u2, int stride, int order, ref float points)
		{
			fixed (float* ptr = &points)
			{
				calli(System.Void(System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), target, u1, u2, stride, order, ptr, GL.EntryPoints[1171]);
			}
		}

		// Token: 0x06001214 RID: 4628 RVA: 0x00036B54 File Offset: 0x00034D54
		[CLSCompliant(false)]
		public unsafe static void Map1(MapTarget target, float u1, float u2, int stride, int order, float* points)
		{
			calli(System.Void(System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), target, u1, u2, stride, order, points, GL.EntryPoints[1171]);
		}

		// Token: 0x06001215 RID: 4629 RVA: 0x00036B70 File Offset: 0x00034D70
		[CLSCompliant(false)]
		public unsafe static void Map2(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points)
		{
			fixed (double* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, ptr, GL.EntryPoints[1173]);
			}
		}

		// Token: 0x06001216 RID: 4630 RVA: 0x00036BB4 File Offset: 0x00034DB4
		[CLSCompliant(false)]
		public unsafe static void Map2(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref double points)
		{
			fixed (double* ptr = &points)
			{
				calli(System.Void(System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, ptr, GL.EntryPoints[1173]);
			}
		}

		// Token: 0x06001217 RID: 4631 RVA: 0x00036BE4 File Offset: 0x00034DE4
		[CLSCompliant(false)]
		public unsafe static void Map2(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points)
		{
			calli(System.Void(System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points, GL.EntryPoints[1173]);
		}

		// Token: 0x06001218 RID: 4632 RVA: 0x00036C14 File Offset: 0x00034E14
		[CLSCompliant(false)]
		public unsafe static void Map2(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points)
		{
			fixed (float* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, ptr, GL.EntryPoints[1174]);
			}
		}

		// Token: 0x06001219 RID: 4633 RVA: 0x00036C58 File Offset: 0x00034E58
		[CLSCompliant(false)]
		public unsafe static void Map2(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref float points)
		{
			fixed (float* ptr = &points)
			{
				calli(System.Void(System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, ptr, GL.EntryPoints[1174]);
			}
		}

		// Token: 0x0600121A RID: 4634 RVA: 0x00036C88 File Offset: 0x00034E88
		[CLSCompliant(false)]
		public unsafe static void Map2(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points)
		{
			calli(System.Void(System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points, GL.EntryPoints[1174]);
		}

		// Token: 0x0600121B RID: 4635 RVA: 0x00036CB8 File Offset: 0x00034EB8
		public static IntPtr MapBuffer(BufferTarget target, BufferAccess access)
		{
			return calli(System.IntPtr(System.Int32,System.Int32), target, access, GL.EntryPoints[1176]);
		}

		// Token: 0x0600121C RID: 4636 RVA: 0x00036CCC File Offset: 0x00034ECC
		public static IntPtr MapBufferRange(BufferTarget target, IntPtr offset, IntPtr length, BufferAccessMask access)
		{
			return calli(System.IntPtr(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, offset, length, access, GL.EntryPoints[1178]);
		}

		// Token: 0x0600121D RID: 4637 RVA: 0x00036CE4 File Offset: 0x00034EE4
		public static void MapGrid1(int un, double u1, double u2)
		{
			calli(System.Void(System.Int32,System.Double,System.Double), un, u1, u2, GL.EntryPoints[1180]);
		}

		// Token: 0x0600121E RID: 4638 RVA: 0x00036CFC File Offset: 0x00034EFC
		public static void MapGrid1(int un, float u1, float u2)
		{
			calli(System.Void(System.Int32,System.Single,System.Single), un, u1, u2, GL.EntryPoints[1181]);
		}

		// Token: 0x0600121F RID: 4639 RVA: 0x00036D14 File Offset: 0x00034F14
		public static void MapGrid2(int un, double u1, double u2, int vn, double v1, double v2)
		{
			calli(System.Void(System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double), un, u1, u2, vn, v1, v2, GL.EntryPoints[1183]);
		}

		// Token: 0x06001220 RID: 4640 RVA: 0x00036D30 File Offset: 0x00034F30
		public static void MapGrid2(int un, float u1, float u2, int vn, float v1, float v2)
		{
			calli(System.Void(System.Int32,System.Single,System.Single,System.Int32,System.Single,System.Single), un, u1, u2, vn, v1, v2, GL.EntryPoints[1184]);
		}

		// Token: 0x06001221 RID: 4641 RVA: 0x00036D4C File Offset: 0x00034F4C
		public static void Material(MaterialFace face, MaterialParameter pname, float param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single), face, pname, param, GL.EntryPoints[1196]);
		}

		// Token: 0x06001222 RID: 4642 RVA: 0x00036D64 File Offset: 0x00034F64
		[CLSCompliant(false)]
		public unsafe static void Material(MaterialFace face, MaterialParameter pname, float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), face, pname, ptr, GL.EntryPoints[1197]);
			}
		}

		// Token: 0x06001223 RID: 4643 RVA: 0x00036D9C File Offset: 0x00034F9C
		[CLSCompliant(false)]
		public unsafe static void Material(MaterialFace face, MaterialParameter pname, float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), face, pname, @params, GL.EntryPoints[1197]);
		}

		// Token: 0x06001224 RID: 4644 RVA: 0x00036DB4 File Offset: 0x00034FB4
		public static void Material(MaterialFace face, MaterialParameter pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), face, pname, param, GL.EntryPoints[1198]);
		}

		// Token: 0x06001225 RID: 4645 RVA: 0x00036DCC File Offset: 0x00034FCC
		[CLSCompliant(false)]
		public unsafe static void Material(MaterialFace face, MaterialParameter pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), face, pname, ptr, GL.EntryPoints[1199]);
			}
		}

		// Token: 0x06001226 RID: 4646 RVA: 0x00036E04 File Offset: 0x00035004
		[CLSCompliant(false)]
		public unsafe static void Material(MaterialFace face, MaterialParameter pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), face, pname, @params, GL.EntryPoints[1199]);
		}

		// Token: 0x06001227 RID: 4647 RVA: 0x00036E1C File Offset: 0x0003501C
		public static void MatrixMode(MatrixMode mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[1212]);
		}

		// Token: 0x06001228 RID: 4648 RVA: 0x00036E30 File Offset: 0x00035030
		public static void MemoryBarrier(MemoryBarrierFlags barriers)
		{
			calli(System.Void(System.Int32), barriers, GL.EntryPoints[1226]);
		}

		// Token: 0x06001229 RID: 4649 RVA: 0x00036E44 File Offset: 0x00035044
		public static void Minmax(MinmaxTarget target, PixelInternalFormat internalformat, bool sink)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean), target, internalformat, sink, GL.EntryPoints[1228]);
		}

		// Token: 0x0600122A RID: 4650 RVA: 0x00036E5C File Offset: 0x0003505C
		public static void MinSampleShading(float value)
		{
			calli(System.Void(System.Single), value, GL.EntryPoints[1230]);
		}

		// Token: 0x0600122B RID: 4651 RVA: 0x00036E70 File Offset: 0x00035070
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawArrays(BeginMode mode, int[] first, int[] count, int drawcount)
		{
			fixed (int* ptr = ref (first != null && first.Length != 0) ? ref first[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, drawcount, GL.EntryPoints[1232]);
				}
			}
		}

		// Token: 0x0600122C RID: 4652 RVA: 0x00036EBC File Offset: 0x000350BC
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawArrays(BeginMode mode, ref int first, ref int count, int drawcount)
		{
			fixed (int* ptr = &first)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &count)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, drawcount, GL.EntryPoints[1232]);
				}
			}
		}

		// Token: 0x0600122D RID: 4653 RVA: 0x00036EE4 File Offset: 0x000350E4
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void MultiDrawArrays(BeginMode mode, int* first, int* count, int drawcount)
		{
			calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, first, count, drawcount, GL.EntryPoints[1232]);
		}

		// Token: 0x0600122E RID: 4654 RVA: 0x00036EFC File Offset: 0x000350FC
		[CLSCompliant(false)]
		public unsafe static void MultiDrawArrays(PrimitiveType mode, int[] first, int[] count, int drawcount)
		{
			fixed (int* ptr = ref (first != null && first.Length != 0) ? ref first[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, drawcount, GL.EntryPoints[1232]);
				}
			}
		}

		// Token: 0x0600122F RID: 4655 RVA: 0x00036F48 File Offset: 0x00035148
		[CLSCompliant(false)]
		public unsafe static void MultiDrawArrays(PrimitiveType mode, ref int first, ref int count, int drawcount)
		{
			fixed (int* ptr = &first)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &count)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, drawcount, GL.EntryPoints[1232]);
				}
			}
		}

		// Token: 0x06001230 RID: 4656 RVA: 0x00036F70 File Offset: 0x00035170
		[CLSCompliant(false)]
		public unsafe static void MultiDrawArrays(PrimitiveType mode, int* first, int* count, int drawcount)
		{
			calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, first, count, drawcount, GL.EntryPoints[1232]);
		}

		// Token: 0x06001231 RID: 4657 RVA: 0x00036F88 File Offset: 0x00035188
		public static void MultiDrawArraysIndirect(PrimitiveType mode, IntPtr indirect, int drawcount, int stride)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32), mode, indirect, drawcount, stride, GL.EntryPoints[1234]);
		}

		// Token: 0x06001232 RID: 4658 RVA: 0x00036FA0 File Offset: 0x000351A0
		[CLSCompliant(false)]
		public unsafe static void MultiDrawArraysIndirect<T1>(PrimitiveType mode, [In] [Out] T1[] indirect, int drawcount, int stride) where T1 : struct
		{
			fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32), mode, ptr, drawcount, stride, GL.EntryPoints[1234]);
			}
		}

		// Token: 0x06001233 RID: 4659 RVA: 0x00036FD8 File Offset: 0x000351D8
		[CLSCompliant(false)]
		public unsafe static void MultiDrawArraysIndirect<T1>(PrimitiveType mode, [In] [Out] T1[,] indirect, int drawcount, int stride) where T1 : struct
		{
			fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32), mode, ptr, drawcount, stride, GL.EntryPoints[1234]);
			}
		}

		// Token: 0x06001234 RID: 4660 RVA: 0x00037014 File Offset: 0x00035214
		[CLSCompliant(false)]
		public unsafe static void MultiDrawArraysIndirect<T1>(PrimitiveType mode, [In] [Out] T1[,,] indirect, int drawcount, int stride) where T1 : struct
		{
			fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32), mode, ptr, drawcount, stride, GL.EntryPoints[1234]);
			}
		}

		// Token: 0x06001235 RID: 4661 RVA: 0x00037050 File Offset: 0x00035250
		public unsafe static void MultiDrawArraysIndirect<T1>(PrimitiveType mode, [In] [Out] ref T1 indirect, int drawcount, int stride) where T1 : struct
		{
			fixed (T1* ptr = &indirect)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32), mode, ptr, drawcount, stride, GL.EntryPoints[1234]);
			}
		}

		// Token: 0x06001236 RID: 4662 RVA: 0x00037074 File Offset: 0x00035274
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements(BeginMode mode, int[] count, DrawElementsType type, IntPtr indices, int drawcount)
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr, type, indices, drawcount, GL.EntryPoints[1239]);
			}
		}

		// Token: 0x06001237 RID: 4663 RVA: 0x000370AC File Offset: 0x000352AC
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void MultiDrawElements<T3>(BeginMode mode, int[] count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[1239]);
				}
			}
		}

		// Token: 0x06001238 RID: 4664 RVA: 0x000370FC File Offset: 0x000352FC
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void MultiDrawElements<T3>(BeginMode mode, int[] count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[1239]);
				}
			}
		}

		// Token: 0x06001239 RID: 4665 RVA: 0x00037150 File Offset: 0x00035350
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void MultiDrawElements<T3>(BeginMode mode, int[] count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[1239]);
				}
			}
		}

		// Token: 0x0600123A RID: 4666 RVA: 0x000371A4 File Offset: 0x000353A4
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void MultiDrawElements<T3>(BeginMode mode, int[] count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &indices)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[1239]);
				}
			}
		}

		// Token: 0x0600123B RID: 4667 RVA: 0x000371E0 File Offset: 0x000353E0
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements(BeginMode mode, ref int count, DrawElementsType type, IntPtr indices, int drawcount)
		{
			fixed (int* ptr = &count)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr, type, indices, drawcount, GL.EntryPoints[1239]);
			}
		}

		// Token: 0x0600123C RID: 4668 RVA: 0x00037208 File Offset: 0x00035408
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(BeginMode mode, ref int count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[1239]);
				}
			}
		}

		// Token: 0x0600123D RID: 4669 RVA: 0x00037244 File Offset: 0x00035444
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(BeginMode mode, ref int count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[1239]);
				}
			}
		}

		// Token: 0x0600123E RID: 4670 RVA: 0x00037284 File Offset: 0x00035484
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(BeginMode mode, ref int count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[1239]);
				}
			}
		}

		// Token: 0x0600123F RID: 4671 RVA: 0x000372C4 File Offset: 0x000354C4
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(BeginMode mode, ref int count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &indices)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[1239]);
				}
			}
		}

		// Token: 0x06001240 RID: 4672 RVA: 0x000372F0 File Offset: 0x000354F0
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void MultiDrawElements(BeginMode mode, int* count, DrawElementsType type, IntPtr indices, int drawcount)
		{
			calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, drawcount, GL.EntryPoints[1239]);
		}

		// Token: 0x06001241 RID: 4673 RVA: 0x00037308 File Offset: 0x00035508
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(BeginMode mode, int* count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, drawcount, GL.EntryPoints[1239]);
			}
		}

		// Token: 0x06001242 RID: 4674 RVA: 0x00037340 File Offset: 0x00035540
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void MultiDrawElements<T3>(BeginMode mode, int* count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, drawcount, GL.EntryPoints[1239]);
			}
		}

		// Token: 0x06001243 RID: 4675 RVA: 0x0003737C File Offset: 0x0003557C
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void MultiDrawElements<T3>(BeginMode mode, int* count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, drawcount, GL.EntryPoints[1239]);
			}
		}

		// Token: 0x06001244 RID: 4676 RVA: 0x000373BC File Offset: 0x000355BC
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void MultiDrawElements<T3>(BeginMode mode, int* count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, drawcount, GL.EntryPoints[1239]);
			}
		}

		// Token: 0x06001245 RID: 4677 RVA: 0x000373E4 File Offset: 0x000355E4
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements(PrimitiveType mode, int[] count, DrawElementsType type, IntPtr indices, int drawcount)
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr, type, indices, drawcount, GL.EntryPoints[1239]);
			}
		}

		// Token: 0x06001246 RID: 4678 RVA: 0x0003741C File Offset: 0x0003561C
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[1239]);
				}
			}
		}

		// Token: 0x06001247 RID: 4679 RVA: 0x0003746C File Offset: 0x0003566C
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[1239]);
				}
			}
		}

		// Token: 0x06001248 RID: 4680 RVA: 0x000374C0 File Offset: 0x000356C0
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[1239]);
				}
			}
		}

		// Token: 0x06001249 RID: 4681 RVA: 0x00037514 File Offset: 0x00035714
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &indices)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[1239]);
				}
			}
		}

		// Token: 0x0600124A RID: 4682 RVA: 0x00037550 File Offset: 0x00035750
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements(PrimitiveType mode, ref int count, DrawElementsType type, IntPtr indices, int drawcount)
		{
			fixed (int* ptr = &count)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr, type, indices, drawcount, GL.EntryPoints[1239]);
			}
		}

		// Token: 0x0600124B RID: 4683 RVA: 0x00037578 File Offset: 0x00035778
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[1239]);
				}
			}
		}

		// Token: 0x0600124C RID: 4684 RVA: 0x000375B4 File Offset: 0x000357B4
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[1239]);
				}
			}
		}

		// Token: 0x0600124D RID: 4685 RVA: 0x000375F4 File Offset: 0x000357F4
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[1239]);
				}
			}
		}

		// Token: 0x0600124E RID: 4686 RVA: 0x00037634 File Offset: 0x00035834
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &indices)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, drawcount, GL.EntryPoints[1239]);
				}
			}
		}

		// Token: 0x0600124F RID: 4687 RVA: 0x00037660 File Offset: 0x00035860
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements(PrimitiveType mode, int* count, DrawElementsType type, IntPtr indices, int drawcount)
		{
			calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, drawcount, GL.EntryPoints[1239]);
		}

		// Token: 0x06001250 RID: 4688 RVA: 0x00037678 File Offset: 0x00035878
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, drawcount, GL.EntryPoints[1239]);
			}
		}

		// Token: 0x06001251 RID: 4689 RVA: 0x000376B0 File Offset: 0x000358B0
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, drawcount, GL.EntryPoints[1239]);
			}
		}

		// Token: 0x06001252 RID: 4690 RVA: 0x000376EC File Offset: 0x000358EC
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, drawcount, GL.EntryPoints[1239]);
			}
		}

		// Token: 0x06001253 RID: 4691 RVA: 0x0003772C File Offset: 0x0003592C
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, drawcount, GL.EntryPoints[1239]);
			}
		}

		// Token: 0x06001254 RID: 4692 RVA: 0x00037754 File Offset: 0x00035954
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex(BeginMode mode, int[] count, DrawElementsType type, IntPtr indices, int drawcount, int[] basevertex)
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (basevertex != null && basevertex.Length != 0) ? ref basevertex[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, indices, drawcount, ptr3, GL.EntryPoints[1240]);
				}
			}
		}

		// Token: 0x06001255 RID: 4693 RVA: 0x000377A8 File Offset: 0x000359A8
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(BeginMode mode, int[] count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount, int[] basevertex) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = ref (basevertex != null && basevertex.Length != 0) ? ref basevertex[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[1240]);
					}
				}
			}
		}

		// Token: 0x06001256 RID: 4694 RVA: 0x00037810 File Offset: 0x00035A10
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(BeginMode mode, int[] count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount, int[] basevertex) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = ref (basevertex != null && basevertex.Length != 0) ? ref basevertex[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[1240]);
					}
				}
			}
		}

		// Token: 0x06001257 RID: 4695 RVA: 0x0003787C File Offset: 0x00035A7C
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(BeginMode mode, int[] count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount, int[] basevertex) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = ref (basevertex != null && basevertex.Length != 0) ? ref basevertex[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[1240]);
					}
				}
			}
		}

		// Token: 0x06001258 RID: 4696 RVA: 0x000378E8 File Offset: 0x00035AE8
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(BeginMode mode, int[] count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount, int[] basevertex) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &indices)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = ref (basevertex != null && basevertex.Length != 0) ? ref basevertex[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[1240]);
					}
				}
			}
		}

		// Token: 0x06001259 RID: 4697 RVA: 0x0003793C File Offset: 0x00035B3C
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex(BeginMode mode, ref int count, DrawElementsType type, IntPtr indices, int drawcount, ref int basevertex)
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &basevertex)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, indices, drawcount, ptr3, GL.EntryPoints[1240]);
				}
			}
		}

		// Token: 0x0600125A RID: 4698 RVA: 0x00037968 File Offset: 0x00035B68
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(BeginMode mode, ref int count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount, ref int basevertex) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = &basevertex)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[1240]);
					}
				}
			}
		}

		// Token: 0x0600125B RID: 4699 RVA: 0x000379A8 File Offset: 0x00035BA8
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(BeginMode mode, ref int count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount, ref int basevertex) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = &basevertex)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[1240]);
					}
				}
			}
		}

		// Token: 0x0600125C RID: 4700 RVA: 0x000379EC File Offset: 0x00035BEC
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(BeginMode mode, ref int count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount, ref int basevertex) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = &basevertex)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[1240]);
					}
				}
			}
		}

		// Token: 0x0600125D RID: 4701 RVA: 0x00037A34 File Offset: 0x00035C34
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(BeginMode mode, ref int count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount, ref int basevertex) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &indices)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = &basevertex)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[1240]);
					}
				}
			}
		}

		// Token: 0x0600125E RID: 4702 RVA: 0x00037A64 File Offset: 0x00035C64
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex(BeginMode mode, int* count, DrawElementsType type, IntPtr indices, int drawcount, int* basevertex)
		{
			calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, count, type, indices, drawcount, basevertex, GL.EntryPoints[1240]);
		}

		// Token: 0x0600125F RID: 4703 RVA: 0x00037A80 File Offset: 0x00035C80
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(BeginMode mode, int* count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount, int* basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, count, type, ptr, drawcount, basevertex, GL.EntryPoints[1240]);
			}
		}

		// Token: 0x06001260 RID: 4704 RVA: 0x00037ABC File Offset: 0x00035CBC
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(BeginMode mode, int* count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount, int* basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, count, type, ptr, drawcount, basevertex, GL.EntryPoints[1240]);
			}
		}

		// Token: 0x06001261 RID: 4705 RVA: 0x00037AFC File Offset: 0x00035CFC
		[CLSCompliant(false)]
		[Obsolete("Use PrimitiveType overload instead")]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(BeginMode mode, int* count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount, int* basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, count, type, ptr, drawcount, basevertex, GL.EntryPoints[1240]);
			}
		}

		// Token: 0x06001262 RID: 4706 RVA: 0x00037B3C File Offset: 0x00035D3C
		[Obsolete("Use PrimitiveType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(BeginMode mode, int* count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount, int* basevertex) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, count, type, ptr, drawcount, basevertex, GL.EntryPoints[1240]);
			}
		}

		// Token: 0x06001263 RID: 4707 RVA: 0x00037B64 File Offset: 0x00035D64
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex(PrimitiveType mode, int[] count, DrawElementsType type, IntPtr indices, int drawcount, int[] basevertex)
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (basevertex != null && basevertex.Length != 0) ? ref basevertex[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, indices, drawcount, ptr3, GL.EntryPoints[1240]);
				}
			}
		}

		// Token: 0x06001264 RID: 4708 RVA: 0x00037BB8 File Offset: 0x00035DB8
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount, int[] basevertex) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = ref (basevertex != null && basevertex.Length != 0) ? ref basevertex[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[1240]);
					}
				}
			}
		}

		// Token: 0x06001265 RID: 4709 RVA: 0x00037C20 File Offset: 0x00035E20
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount, int[] basevertex) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = ref (basevertex != null && basevertex.Length != 0) ? ref basevertex[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[1240]);
					}
				}
			}
		}

		// Token: 0x06001266 RID: 4710 RVA: 0x00037C8C File Offset: 0x00035E8C
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount, int[] basevertex) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = ref (basevertex != null && basevertex.Length != 0) ? ref basevertex[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[1240]);
					}
				}
			}
		}

		// Token: 0x06001267 RID: 4711 RVA: 0x00037CF8 File Offset: 0x00035EF8
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount, int[] basevertex) where T3 : struct
		{
			fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &indices)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = ref (basevertex != null && basevertex.Length != 0) ? ref basevertex[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[1240]);
					}
				}
			}
		}

		// Token: 0x06001268 RID: 4712 RVA: 0x00037D4C File Offset: 0x00035F4C
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex(PrimitiveType mode, ref int count, DrawElementsType type, IntPtr indices, int drawcount, ref int basevertex)
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &basevertex)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, indices, drawcount, ptr3, GL.EntryPoints[1240]);
				}
			}
		}

		// Token: 0x06001269 RID: 4713 RVA: 0x00037D78 File Offset: 0x00035F78
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount, ref int basevertex) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = &basevertex)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[1240]);
					}
				}
			}
		}

		// Token: 0x0600126A RID: 4714 RVA: 0x00037DB8 File Offset: 0x00035FB8
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount, ref int basevertex) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = &basevertex)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[1240]);
					}
				}
			}
		}

		// Token: 0x0600126B RID: 4715 RVA: 0x00037DFC File Offset: 0x00035FFC
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount, ref int basevertex) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = &basevertex)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[1240]);
					}
				}
			}
		}

		// Token: 0x0600126C RID: 4716 RVA: 0x00037E44 File Offset: 0x00036044
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount, ref int basevertex) where T3 : struct
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &indices)
				{
					T3* ptr4 = ptr3;
					fixed (int* ptr5 = &basevertex)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, ptr2, type, ptr4, drawcount, ptr5, GL.EntryPoints[1240]);
					}
				}
			}
		}

		// Token: 0x0600126D RID: 4717 RVA: 0x00037E74 File Offset: 0x00036074
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex(PrimitiveType mode, int* count, DrawElementsType type, IntPtr indices, int drawcount, int* basevertex)
		{
			calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, count, type, indices, drawcount, basevertex, GL.EntryPoints[1240]);
		}

		// Token: 0x0600126E RID: 4718 RVA: 0x00037E90 File Offset: 0x00036090
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[] indices, int drawcount, int* basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, count, type, ptr, drawcount, basevertex, GL.EntryPoints[1240]);
			}
		}

		// Token: 0x0600126F RID: 4719 RVA: 0x00037ECC File Offset: 0x000360CC
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[,] indices, int drawcount, int* basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, count, type, ptr, drawcount, basevertex, GL.EntryPoints[1240]);
			}
		}

		// Token: 0x06001270 RID: 4720 RVA: 0x00037F0C File Offset: 0x0003610C
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[,,] indices, int drawcount, int* basevertex) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, count, type, ptr, drawcount, basevertex, GL.EntryPoints[1240]);
			}
		}

		// Token: 0x06001271 RID: 4721 RVA: 0x00037F4C File Offset: 0x0003614C
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsBaseVertex<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] ref T3 indices, int drawcount, int* basevertex) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32*), mode, count, type, ptr, drawcount, basevertex, GL.EntryPoints[1240]);
			}
		}

		// Token: 0x06001272 RID: 4722 RVA: 0x00037F74 File Offset: 0x00036174
		public static void MultiDrawElementsIndirect(All mode, All type, IntPtr indirect, int drawcount, int stride)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, type, indirect, drawcount, stride, GL.EntryPoints[1242]);
		}

		// Token: 0x06001273 RID: 4723 RVA: 0x00037F8C File Offset: 0x0003618C
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsIndirect<T2>(All mode, All type, [In] [Out] T2[] indirect, int drawcount, int stride) where T2 : struct
		{
			fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, type, ptr, drawcount, stride, GL.EntryPoints[1242]);
			}
		}

		// Token: 0x06001274 RID: 4724 RVA: 0x00037FC4 File Offset: 0x000361C4
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsIndirect<T2>(All mode, All type, [In] [Out] T2[,] indirect, int drawcount, int stride) where T2 : struct
		{
			fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, type, ptr, drawcount, stride, GL.EntryPoints[1242]);
			}
		}

		// Token: 0x06001275 RID: 4725 RVA: 0x00038000 File Offset: 0x00036200
		[CLSCompliant(false)]
		public unsafe static void MultiDrawElementsIndirect<T2>(All mode, All type, [In] [Out] T2[,,] indirect, int drawcount, int stride) where T2 : struct
		{
			fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, type, ptr, drawcount, stride, GL.EntryPoints[1242]);
			}
		}

		// Token: 0x06001276 RID: 4726 RVA: 0x00038040 File Offset: 0x00036240
		public unsafe static void MultiDrawElementsIndirect<T2>(All mode, All type, [In] [Out] ref T2 indirect, int drawcount, int stride) where T2 : struct
		{
			fixed (T2* ptr = &indirect)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, type, ptr, drawcount, stride, GL.EntryPoints[1242]);
			}
		}

		// Token: 0x06001277 RID: 4727 RVA: 0x00038068 File Offset: 0x00036268
		public static void MultiTexCoord1(TextureUnit target, double s)
		{
			calli(System.Void(System.Int32,System.Double), target, s, GL.EntryPoints[1252]);
		}

		// Token: 0x06001278 RID: 4728 RVA: 0x0003807C File Offset: 0x0003627C
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord1(TextureUnit target, double* v)
		{
			calli(System.Void(System.Int32,System.Double*), target, v, GL.EntryPoints[1254]);
		}

		// Token: 0x06001279 RID: 4729 RVA: 0x00038090 File Offset: 0x00036290
		public static void MultiTexCoord1(TextureUnit target, float s)
		{
			calli(System.Void(System.Int32,System.Single), target, s, GL.EntryPoints[1256]);
		}

		// Token: 0x0600127A RID: 4730 RVA: 0x000380A4 File Offset: 0x000362A4
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord1(TextureUnit target, float* v)
		{
			calli(System.Void(System.Int32,System.Single*), target, v, GL.EntryPoints[1258]);
		}

		// Token: 0x0600127B RID: 4731 RVA: 0x000380B8 File Offset: 0x000362B8
		public static void MultiTexCoord1(TextureUnit target, int s)
		{
			calli(System.Void(System.Int32,System.Int32), target, s, GL.EntryPoints[1262]);
		}

		// Token: 0x0600127C RID: 4732 RVA: 0x000380CC File Offset: 0x000362CC
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord1(TextureUnit target, int* v)
		{
			calli(System.Void(System.Int32,System.Int32*), target, v, GL.EntryPoints[1264]);
		}

		// Token: 0x0600127D RID: 4733 RVA: 0x000380E0 File Offset: 0x000362E0
		public static void MultiTexCoord1(TextureUnit target, short s)
		{
			calli(System.Void(System.Int32,System.Int16), target, s, GL.EntryPoints[1266]);
		}

		// Token: 0x0600127E RID: 4734 RVA: 0x000380F4 File Offset: 0x000362F4
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord1(TextureUnit target, short* v)
		{
			calli(System.Void(System.Int32,System.Int16*), target, v, GL.EntryPoints[1268]);
		}

		// Token: 0x0600127F RID: 4735 RVA: 0x00038108 File Offset: 0x00036308
		public static void MultiTexCoord2(TextureUnit target, double s, double t)
		{
			calli(System.Void(System.Int32,System.Double,System.Double), target, s, t, GL.EntryPoints[1274]);
		}

		// Token: 0x06001280 RID: 4736 RVA: 0x00038120 File Offset: 0x00036320
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord2(TextureUnit target, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Double*), target, ptr, GL.EntryPoints[1276]);
			}
		}

		// Token: 0x06001281 RID: 4737 RVA: 0x00038154 File Offset: 0x00036354
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord2(TextureUnit target, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Int32,System.Double*), target, ptr, GL.EntryPoints[1276]);
			}
		}

		// Token: 0x06001282 RID: 4738 RVA: 0x00038178 File Offset: 0x00036378
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord2(TextureUnit target, double* v)
		{
			calli(System.Void(System.Int32,System.Double*), target, v, GL.EntryPoints[1276]);
		}

		// Token: 0x06001283 RID: 4739 RVA: 0x0003818C File Offset: 0x0003638C
		public static void MultiTexCoord2(TextureUnit target, float s, float t)
		{
			calli(System.Void(System.Int32,System.Single,System.Single), target, s, t, GL.EntryPoints[1278]);
		}

		// Token: 0x06001284 RID: 4740 RVA: 0x000381A4 File Offset: 0x000363A4
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord2(TextureUnit target, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Single*), target, ptr, GL.EntryPoints[1280]);
			}
		}

		// Token: 0x06001285 RID: 4741 RVA: 0x000381D8 File Offset: 0x000363D8
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord2(TextureUnit target, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Int32,System.Single*), target, ptr, GL.EntryPoints[1280]);
			}
		}

		// Token: 0x06001286 RID: 4742 RVA: 0x000381FC File Offset: 0x000363FC
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord2(TextureUnit target, float* v)
		{
			calli(System.Void(System.Int32,System.Single*), target, v, GL.EntryPoints[1280]);
		}

		// Token: 0x06001287 RID: 4743 RVA: 0x00038210 File Offset: 0x00036410
		public static void MultiTexCoord2(TextureUnit target, int s, int t)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), target, s, t, GL.EntryPoints[1284]);
		}

		// Token: 0x06001288 RID: 4744 RVA: 0x00038228 File Offset: 0x00036428
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord2(TextureUnit target, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*), target, ptr, GL.EntryPoints[1286]);
			}
		}

		// Token: 0x06001289 RID: 4745 RVA: 0x0003825C File Offset: 0x0003645C
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord2(TextureUnit target, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32,System.Int32*), target, ptr, GL.EntryPoints[1286]);
			}
		}

		// Token: 0x0600128A RID: 4746 RVA: 0x00038280 File Offset: 0x00036480
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord2(TextureUnit target, int* v)
		{
			calli(System.Void(System.Int32,System.Int32*), target, v, GL.EntryPoints[1286]);
		}

		// Token: 0x0600128B RID: 4747 RVA: 0x00038294 File Offset: 0x00036494
		public static void MultiTexCoord2(TextureUnit target, short s, short t)
		{
			calli(System.Void(System.Int32,System.Int16,System.Int16), target, s, t, GL.EntryPoints[1288]);
		}

		// Token: 0x0600128C RID: 4748 RVA: 0x000382AC File Offset: 0x000364AC
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord2(TextureUnit target, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int16*), target, ptr, GL.EntryPoints[1290]);
			}
		}

		// Token: 0x0600128D RID: 4749 RVA: 0x000382E0 File Offset: 0x000364E0
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord2(TextureUnit target, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int32,System.Int16*), target, ptr, GL.EntryPoints[1290]);
			}
		}

		// Token: 0x0600128E RID: 4750 RVA: 0x00038304 File Offset: 0x00036504
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord2(TextureUnit target, short* v)
		{
			calli(System.Void(System.Int32,System.Int16*), target, v, GL.EntryPoints[1290]);
		}

		// Token: 0x0600128F RID: 4751 RVA: 0x00038318 File Offset: 0x00036518
		public static void MultiTexCoord3(TextureUnit target, double s, double t, double r)
		{
			calli(System.Void(System.Int32,System.Double,System.Double,System.Double), target, s, t, r, GL.EntryPoints[1296]);
		}

		// Token: 0x06001290 RID: 4752 RVA: 0x00038330 File Offset: 0x00036530
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord3(TextureUnit target, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Double*), target, ptr, GL.EntryPoints[1298]);
			}
		}

		// Token: 0x06001291 RID: 4753 RVA: 0x00038364 File Offset: 0x00036564
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord3(TextureUnit target, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Int32,System.Double*), target, ptr, GL.EntryPoints[1298]);
			}
		}

		// Token: 0x06001292 RID: 4754 RVA: 0x00038388 File Offset: 0x00036588
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord3(TextureUnit target, double* v)
		{
			calli(System.Void(System.Int32,System.Double*), target, v, GL.EntryPoints[1298]);
		}

		// Token: 0x06001293 RID: 4755 RVA: 0x0003839C File Offset: 0x0003659C
		public static void MultiTexCoord3(TextureUnit target, float s, float t, float r)
		{
			calli(System.Void(System.Int32,System.Single,System.Single,System.Single), target, s, t, r, GL.EntryPoints[1300]);
		}

		// Token: 0x06001294 RID: 4756 RVA: 0x000383B4 File Offset: 0x000365B4
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord3(TextureUnit target, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Single*), target, ptr, GL.EntryPoints[1302]);
			}
		}

		// Token: 0x06001295 RID: 4757 RVA: 0x000383E8 File Offset: 0x000365E8
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord3(TextureUnit target, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Int32,System.Single*), target, ptr, GL.EntryPoints[1302]);
			}
		}

		// Token: 0x06001296 RID: 4758 RVA: 0x0003840C File Offset: 0x0003660C
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord3(TextureUnit target, float* v)
		{
			calli(System.Void(System.Int32,System.Single*), target, v, GL.EntryPoints[1302]);
		}

		// Token: 0x06001297 RID: 4759 RVA: 0x00038420 File Offset: 0x00036620
		public static void MultiTexCoord3(TextureUnit target, int s, int t, int r)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), target, s, t, r, GL.EntryPoints[1306]);
		}

		// Token: 0x06001298 RID: 4760 RVA: 0x00038438 File Offset: 0x00036638
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord3(TextureUnit target, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*), target, ptr, GL.EntryPoints[1308]);
			}
		}

		// Token: 0x06001299 RID: 4761 RVA: 0x0003846C File Offset: 0x0003666C
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord3(TextureUnit target, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32,System.Int32*), target, ptr, GL.EntryPoints[1308]);
			}
		}

		// Token: 0x0600129A RID: 4762 RVA: 0x00038490 File Offset: 0x00036690
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord3(TextureUnit target, int* v)
		{
			calli(System.Void(System.Int32,System.Int32*), target, v, GL.EntryPoints[1308]);
		}

		// Token: 0x0600129B RID: 4763 RVA: 0x000384A4 File Offset: 0x000366A4
		public static void MultiTexCoord3(TextureUnit target, short s, short t, short r)
		{
			calli(System.Void(System.Int32,System.Int16,System.Int16,System.Int16), target, s, t, r, GL.EntryPoints[1310]);
		}

		// Token: 0x0600129C RID: 4764 RVA: 0x000384BC File Offset: 0x000366BC
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord3(TextureUnit target, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int16*), target, ptr, GL.EntryPoints[1312]);
			}
		}

		// Token: 0x0600129D RID: 4765 RVA: 0x000384F0 File Offset: 0x000366F0
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord3(TextureUnit target, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int32,System.Int16*), target, ptr, GL.EntryPoints[1312]);
			}
		}

		// Token: 0x0600129E RID: 4766 RVA: 0x00038514 File Offset: 0x00036714
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord3(TextureUnit target, short* v)
		{
			calli(System.Void(System.Int32,System.Int16*), target, v, GL.EntryPoints[1312]);
		}

		// Token: 0x0600129F RID: 4767 RVA: 0x00038528 File Offset: 0x00036728
		public static void MultiTexCoord4(TextureUnit target, double s, double t, double r, double q)
		{
			calli(System.Void(System.Int32,System.Double,System.Double,System.Double,System.Double), target, s, t, r, q, GL.EntryPoints[1318]);
		}

		// Token: 0x060012A0 RID: 4768 RVA: 0x00038540 File Offset: 0x00036740
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord4(TextureUnit target, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Double*), target, ptr, GL.EntryPoints[1320]);
			}
		}

		// Token: 0x060012A1 RID: 4769 RVA: 0x00038574 File Offset: 0x00036774
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord4(TextureUnit target, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Int32,System.Double*), target, ptr, GL.EntryPoints[1320]);
			}
		}

		// Token: 0x060012A2 RID: 4770 RVA: 0x00038598 File Offset: 0x00036798
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord4(TextureUnit target, double* v)
		{
			calli(System.Void(System.Int32,System.Double*), target, v, GL.EntryPoints[1320]);
		}

		// Token: 0x060012A3 RID: 4771 RVA: 0x000385AC File Offset: 0x000367AC
		public static void MultiTexCoord4(TextureUnit target, float s, float t, float r, float q)
		{
			calli(System.Void(System.Int32,System.Single,System.Single,System.Single,System.Single), target, s, t, r, q, GL.EntryPoints[1322]);
		}

		// Token: 0x060012A4 RID: 4772 RVA: 0x000385C4 File Offset: 0x000367C4
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord4(TextureUnit target, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Single*), target, ptr, GL.EntryPoints[1324]);
			}
		}

		// Token: 0x060012A5 RID: 4773 RVA: 0x000385F8 File Offset: 0x000367F8
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord4(TextureUnit target, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Int32,System.Single*), target, ptr, GL.EntryPoints[1324]);
			}
		}

		// Token: 0x060012A6 RID: 4774 RVA: 0x0003861C File Offset: 0x0003681C
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord4(TextureUnit target, float* v)
		{
			calli(System.Void(System.Int32,System.Single*), target, v, GL.EntryPoints[1324]);
		}

		// Token: 0x060012A7 RID: 4775 RVA: 0x00038630 File Offset: 0x00036830
		public static void MultiTexCoord4(TextureUnit target, int s, int t, int r, int q)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, s, t, r, q, GL.EntryPoints[1328]);
		}

		// Token: 0x060012A8 RID: 4776 RVA: 0x00038648 File Offset: 0x00036848
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord4(TextureUnit target, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*), target, ptr, GL.EntryPoints[1330]);
			}
		}

		// Token: 0x060012A9 RID: 4777 RVA: 0x0003867C File Offset: 0x0003687C
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord4(TextureUnit target, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32,System.Int32*), target, ptr, GL.EntryPoints[1330]);
			}
		}

		// Token: 0x060012AA RID: 4778 RVA: 0x000386A0 File Offset: 0x000368A0
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord4(TextureUnit target, int* v)
		{
			calli(System.Void(System.Int32,System.Int32*), target, v, GL.EntryPoints[1330]);
		}

		// Token: 0x060012AB RID: 4779 RVA: 0x000386B4 File Offset: 0x000368B4
		public static void MultiTexCoord4(TextureUnit target, short s, short t, short r, short q)
		{
			calli(System.Void(System.Int32,System.Int16,System.Int16,System.Int16,System.Int16), target, s, t, r, q, GL.EntryPoints[1332]);
		}

		// Token: 0x060012AC RID: 4780 RVA: 0x000386CC File Offset: 0x000368CC
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord4(TextureUnit target, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int16*), target, ptr, GL.EntryPoints[1334]);
			}
		}

		// Token: 0x060012AD RID: 4781 RVA: 0x00038700 File Offset: 0x00036900
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord4(TextureUnit target, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int32,System.Int16*), target, ptr, GL.EntryPoints[1334]);
			}
		}

		// Token: 0x060012AE RID: 4782 RVA: 0x00038724 File Offset: 0x00036924
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoord4(TextureUnit target, short* v)
		{
			calli(System.Void(System.Int32,System.Int16*), target, v, GL.EntryPoints[1334]);
		}

		// Token: 0x060012AF RID: 4783 RVA: 0x00038738 File Offset: 0x00036938
		[CLSCompliant(false)]
		public static void MultiTexCoordP1(TextureUnit texture, PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), texture, type, coords, GL.EntryPoints[1338]);
		}

		// Token: 0x060012B0 RID: 4784 RVA: 0x00038750 File Offset: 0x00036950
		[CLSCompliant(false)]
		public static void MultiTexCoordP1(TextureUnit texture, PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), texture, type, coords, GL.EntryPoints[1338]);
		}

		// Token: 0x060012B1 RID: 4785 RVA: 0x00038768 File Offset: 0x00036968
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoordP1(TextureUnit texture, PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), texture, type, coords, GL.EntryPoints[1339]);
		}

		// Token: 0x060012B2 RID: 4786 RVA: 0x00038780 File Offset: 0x00036980
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoordP1(TextureUnit texture, PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), texture, type, coords, GL.EntryPoints[1339]);
		}

		// Token: 0x060012B3 RID: 4787 RVA: 0x00038798 File Offset: 0x00036998
		[CLSCompliant(false)]
		public static void MultiTexCoordP2(TextureUnit texture, PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), texture, type, coords, GL.EntryPoints[1340]);
		}

		// Token: 0x060012B4 RID: 4788 RVA: 0x000387B0 File Offset: 0x000369B0
		[CLSCompliant(false)]
		public static void MultiTexCoordP2(TextureUnit texture, PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), texture, type, coords, GL.EntryPoints[1340]);
		}

		// Token: 0x060012B5 RID: 4789 RVA: 0x000387C8 File Offset: 0x000369C8
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoordP2(TextureUnit texture, PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), texture, type, coords, GL.EntryPoints[1341]);
		}

		// Token: 0x060012B6 RID: 4790 RVA: 0x000387E0 File Offset: 0x000369E0
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoordP2(TextureUnit texture, PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), texture, type, coords, GL.EntryPoints[1341]);
		}

		// Token: 0x060012B7 RID: 4791 RVA: 0x000387F8 File Offset: 0x000369F8
		[CLSCompliant(false)]
		public static void MultiTexCoordP3(TextureUnit texture, PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), texture, type, coords, GL.EntryPoints[1342]);
		}

		// Token: 0x060012B8 RID: 4792 RVA: 0x00038810 File Offset: 0x00036A10
		[CLSCompliant(false)]
		public static void MultiTexCoordP3(TextureUnit texture, PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), texture, type, coords, GL.EntryPoints[1342]);
		}

		// Token: 0x060012B9 RID: 4793 RVA: 0x00038828 File Offset: 0x00036A28
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoordP3(TextureUnit texture, PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), texture, type, coords, GL.EntryPoints[1343]);
		}

		// Token: 0x060012BA RID: 4794 RVA: 0x00038840 File Offset: 0x00036A40
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoordP3(TextureUnit texture, PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), texture, type, coords, GL.EntryPoints[1343]);
		}

		// Token: 0x060012BB RID: 4795 RVA: 0x00038858 File Offset: 0x00036A58
		[CLSCompliant(false)]
		public static void MultiTexCoordP4(TextureUnit texture, PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), texture, type, coords, GL.EntryPoints[1344]);
		}

		// Token: 0x060012BC RID: 4796 RVA: 0x00038870 File Offset: 0x00036A70
		[CLSCompliant(false)]
		public static void MultiTexCoordP4(TextureUnit texture, PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), texture, type, coords, GL.EntryPoints[1344]);
		}

		// Token: 0x060012BD RID: 4797 RVA: 0x00038888 File Offset: 0x00036A88
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoordP4(TextureUnit texture, PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), texture, type, coords, GL.EntryPoints[1345]);
		}

		// Token: 0x060012BE RID: 4798 RVA: 0x000388A0 File Offset: 0x00036AA0
		[CLSCompliant(false)]
		public unsafe static void MultiTexCoordP4(TextureUnit texture, PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), texture, type, coords, GL.EntryPoints[1345]);
		}

		// Token: 0x060012BF RID: 4799 RVA: 0x000388B8 File Offset: 0x00036AB8
		[CLSCompliant(false)]
		public unsafe static void MultMatrix(double[] m)
		{
			fixed (double* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1370]);
			}
		}

		// Token: 0x060012C0 RID: 4800 RVA: 0x000388EC File Offset: 0x00036AEC
		[CLSCompliant(false)]
		public unsafe static void MultMatrix(ref double m)
		{
			fixed (double* ptr = &m)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1370]);
			}
		}

		// Token: 0x060012C1 RID: 4801 RVA: 0x00038910 File Offset: 0x00036B10
		[CLSCompliant(false)]
		public unsafe static void MultMatrix(double* m)
		{
			calli(System.Void(System.Double*), m, GL.EntryPoints[1370]);
		}

		// Token: 0x060012C2 RID: 4802 RVA: 0x00038924 File Offset: 0x00036B24
		[CLSCompliant(false)]
		public unsafe static void MultMatrix(float[] m)
		{
			fixed (float* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1371]);
			}
		}

		// Token: 0x060012C3 RID: 4803 RVA: 0x00038958 File Offset: 0x00036B58
		[CLSCompliant(false)]
		public unsafe static void MultMatrix(ref float m)
		{
			fixed (float* ptr = &m)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1371]);
			}
		}

		// Token: 0x060012C4 RID: 4804 RVA: 0x0003897C File Offset: 0x00036B7C
		[CLSCompliant(false)]
		public unsafe static void MultMatrix(float* m)
		{
			calli(System.Void(System.Single*), m, GL.EntryPoints[1371]);
		}

		// Token: 0x060012C5 RID: 4805 RVA: 0x00038990 File Offset: 0x00036B90
		[CLSCompliant(false)]
		public unsafe static void MultTransposeMatrix(double[] m)
		{
			fixed (double* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1373]);
			}
		}

		// Token: 0x060012C6 RID: 4806 RVA: 0x000389C4 File Offset: 0x00036BC4
		[CLSCompliant(false)]
		public unsafe static void MultTransposeMatrix(ref double m)
		{
			fixed (double* ptr = &m)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1373]);
			}
		}

		// Token: 0x060012C7 RID: 4807 RVA: 0x000389E8 File Offset: 0x00036BE8
		[CLSCompliant(false)]
		public unsafe static void MultTransposeMatrix(double* m)
		{
			calli(System.Void(System.Double*), m, GL.EntryPoints[1373]);
		}

		// Token: 0x060012C8 RID: 4808 RVA: 0x000389FC File Offset: 0x00036BFC
		[CLSCompliant(false)]
		public unsafe static void MultTransposeMatrix(float[] m)
		{
			fixed (float* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1375]);
			}
		}

		// Token: 0x060012C9 RID: 4809 RVA: 0x00038A30 File Offset: 0x00036C30
		[CLSCompliant(false)]
		public unsafe static void MultTransposeMatrix(ref float m)
		{
			fixed (float* ptr = &m)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1375]);
			}
		}

		// Token: 0x060012CA RID: 4810 RVA: 0x00038A54 File Offset: 0x00036C54
		[CLSCompliant(false)]
		public unsafe static void MultTransposeMatrix(float* m)
		{
			calli(System.Void(System.Single*), m, GL.EntryPoints[1375]);
		}

		// Token: 0x060012CB RID: 4811 RVA: 0x00038A68 File Offset: 0x00036C68
		[CLSCompliant(false)]
		public static void NewList(int list, ListMode mode)
		{
			calli(System.Void(System.UInt32,System.Int32), list, mode, GL.EntryPoints[1406]);
		}

		// Token: 0x060012CC RID: 4812 RVA: 0x00038A7C File Offset: 0x00036C7C
		[CLSCompliant(false)]
		public static void NewList(uint list, ListMode mode)
		{
			calli(System.Void(System.UInt32,System.Int32), list, mode, GL.EntryPoints[1406]);
		}

		// Token: 0x060012CD RID: 4813 RVA: 0x00038A90 File Offset: 0x00036C90
		[CLSCompliant(false)]
		public static void Normal3(byte nx, byte ny, byte nz)
		{
			calli(System.Void(System.SByte,System.SByte,System.SByte), nx, ny, nz, GL.EntryPoints[1408]);
		}

		// Token: 0x060012CE RID: 4814 RVA: 0x00038AA8 File Offset: 0x00036CA8
		[CLSCompliant(false)]
		public static void Normal3(sbyte nx, sbyte ny, sbyte nz)
		{
			calli(System.Void(System.SByte,System.SByte,System.SByte), nx, ny, nz, GL.EntryPoints[1408]);
		}

		// Token: 0x060012CF RID: 4815 RVA: 0x00038AC0 File Offset: 0x00036CC0
		[CLSCompliant(false)]
		public unsafe static void Normal3(byte[] v)
		{
			fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1409]);
			}
		}

		// Token: 0x060012D0 RID: 4816 RVA: 0x00038AF4 File Offset: 0x00036CF4
		[CLSCompliant(false)]
		public unsafe static void Normal3(ref byte v)
		{
			fixed (byte* ptr = &v)
			{
				calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1409]);
			}
		}

		// Token: 0x060012D1 RID: 4817 RVA: 0x00038B18 File Offset: 0x00036D18
		[CLSCompliant(false)]
		public unsafe static void Normal3(byte* v)
		{
			calli(System.Void(System.SByte*), v, GL.EntryPoints[1409]);
		}

		// Token: 0x060012D2 RID: 4818 RVA: 0x00038B2C File Offset: 0x00036D2C
		[CLSCompliant(false)]
		public unsafe static void Normal3(sbyte[] v)
		{
			fixed (sbyte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1409]);
			}
		}

		// Token: 0x060012D3 RID: 4819 RVA: 0x00038B60 File Offset: 0x00036D60
		[CLSCompliant(false)]
		public unsafe static void Normal3(ref sbyte v)
		{
			fixed (sbyte* ptr = &v)
			{
				calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1409]);
			}
		}

		// Token: 0x060012D4 RID: 4820 RVA: 0x00038B84 File Offset: 0x00036D84
		[CLSCompliant(false)]
		public unsafe static void Normal3(sbyte* v)
		{
			calli(System.Void(System.SByte*), v, GL.EntryPoints[1409]);
		}

		// Token: 0x060012D5 RID: 4821 RVA: 0x00038B98 File Offset: 0x00036D98
		public static void Normal3(double nx, double ny, double nz)
		{
			calli(System.Void(System.Double,System.Double,System.Double), nx, ny, nz, GL.EntryPoints[1410]);
		}

		// Token: 0x060012D6 RID: 4822 RVA: 0x00038BB0 File Offset: 0x00036DB0
		[CLSCompliant(false)]
		public unsafe static void Normal3(double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1411]);
			}
		}

		// Token: 0x060012D7 RID: 4823 RVA: 0x00038BE4 File Offset: 0x00036DE4
		[CLSCompliant(false)]
		public unsafe static void Normal3(ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1411]);
			}
		}

		// Token: 0x060012D8 RID: 4824 RVA: 0x00038C08 File Offset: 0x00036E08
		[CLSCompliant(false)]
		public unsafe static void Normal3(double* v)
		{
			calli(System.Void(System.Double*), v, GL.EntryPoints[1411]);
		}

		// Token: 0x060012D9 RID: 4825 RVA: 0x00038C1C File Offset: 0x00036E1C
		public static void Normal3(float nx, float ny, float nz)
		{
			calli(System.Void(System.Single,System.Single,System.Single), nx, ny, nz, GL.EntryPoints[1412]);
		}

		// Token: 0x060012DA RID: 4826 RVA: 0x00038C34 File Offset: 0x00036E34
		[CLSCompliant(false)]
		public unsafe static void Normal3(float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1413]);
			}
		}

		// Token: 0x060012DB RID: 4827 RVA: 0x00038C68 File Offset: 0x00036E68
		[CLSCompliant(false)]
		public unsafe static void Normal3(ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1413]);
			}
		}

		// Token: 0x060012DC RID: 4828 RVA: 0x00038C8C File Offset: 0x00036E8C
		[CLSCompliant(false)]
		public unsafe static void Normal3(float* v)
		{
			calli(System.Void(System.Single*), v, GL.EntryPoints[1413]);
		}

		// Token: 0x060012DD RID: 4829 RVA: 0x00038CA0 File Offset: 0x00036EA0
		public static void Normal3(int nx, int ny, int nz)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), nx, ny, nz, GL.EntryPoints[1418]);
		}

		// Token: 0x060012DE RID: 4830 RVA: 0x00038CB8 File Offset: 0x00036EB8
		[CLSCompliant(false)]
		public unsafe static void Normal3(int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1419]);
			}
		}

		// Token: 0x060012DF RID: 4831 RVA: 0x00038CEC File Offset: 0x00036EEC
		[CLSCompliant(false)]
		public unsafe static void Normal3(ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1419]);
			}
		}

		// Token: 0x060012E0 RID: 4832 RVA: 0x00038D10 File Offset: 0x00036F10
		[CLSCompliant(false)]
		public unsafe static void Normal3(int* v)
		{
			calli(System.Void(System.Int32*), v, GL.EntryPoints[1419]);
		}

		// Token: 0x060012E1 RID: 4833 RVA: 0x00038D24 File Offset: 0x00036F24
		public static void Normal3(short nx, short ny, short nz)
		{
			calli(System.Void(System.Int16,System.Int16,System.Int16), nx, ny, nz, GL.EntryPoints[1420]);
		}

		// Token: 0x060012E2 RID: 4834 RVA: 0x00038D3C File Offset: 0x00036F3C
		[CLSCompliant(false)]
		public unsafe static void Normal3(short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1421]);
			}
		}

		// Token: 0x060012E3 RID: 4835 RVA: 0x00038D70 File Offset: 0x00036F70
		[CLSCompliant(false)]
		public unsafe static void Normal3(ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1421]);
			}
		}

		// Token: 0x060012E4 RID: 4836 RVA: 0x00038D94 File Offset: 0x00036F94
		[CLSCompliant(false)]
		public unsafe static void Normal3(short* v)
		{
			calli(System.Void(System.Int16*), v, GL.EntryPoints[1421]);
		}

		// Token: 0x060012E5 RID: 4837 RVA: 0x00038DA8 File Offset: 0x00036FA8
		[CLSCompliant(false)]
		public static void NormalP3(PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[1425]);
		}

		// Token: 0x060012E6 RID: 4838 RVA: 0x00038DBC File Offset: 0x00036FBC
		[CLSCompliant(false)]
		public static void NormalP3(PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[1425]);
		}

		// Token: 0x060012E7 RID: 4839 RVA: 0x00038DD0 File Offset: 0x00036FD0
		[CLSCompliant(false)]
		public unsafe static void NormalP3(PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[1426]);
		}

		// Token: 0x060012E8 RID: 4840 RVA: 0x00038DE4 File Offset: 0x00036FE4
		[CLSCompliant(false)]
		public unsafe static void NormalP3(PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[1426]);
		}

		// Token: 0x060012E9 RID: 4841 RVA: 0x00038DF8 File Offset: 0x00036FF8
		public static void NormalPointer(NormalPointerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, pointer, GL.EntryPoints[1427]);
		}

		// Token: 0x060012EA RID: 4842 RVA: 0x00038E10 File Offset: 0x00037010
		[CLSCompliant(false)]
		public unsafe static void NormalPointer<T2>(NormalPointerType type, int stride, [In] [Out] T2[] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[1427]);
			}
		}

		// Token: 0x060012EB RID: 4843 RVA: 0x00038E48 File Offset: 0x00037048
		[CLSCompliant(false)]
		public unsafe static void NormalPointer<T2>(NormalPointerType type, int stride, [In] [Out] T2[,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[1427]);
			}
		}

		// Token: 0x060012EC RID: 4844 RVA: 0x00038E84 File Offset: 0x00037084
		[CLSCompliant(false)]
		public unsafe static void NormalPointer<T2>(NormalPointerType type, int stride, [In] [Out] T2[,,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[1427]);
			}
		}

		// Token: 0x060012ED RID: 4845 RVA: 0x00038EC0 File Offset: 0x000370C0
		public unsafe static void NormalPointer<T2>(NormalPointerType type, int stride, [In] [Out] ref T2 pointer) where T2 : struct
		{
			fixed (T2* ptr = &pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[1427]);
			}
		}

		// Token: 0x060012EE RID: 4846 RVA: 0x00038EE4 File Offset: 0x000370E4
		[CLSCompliant(false)]
		public static void ObjectLabel(ObjectLabelIdentifier identifier, int name, int length, string label)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), identifier, name, length, intPtr, GL.EntryPoints[1441]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x060012EF RID: 4847 RVA: 0x00038F14 File Offset: 0x00037114
		[CLSCompliant(false)]
		public static void ObjectLabel(ObjectLabelIdentifier identifier, uint name, int length, string label)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), identifier, name, length, intPtr, GL.EntryPoints[1441]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x060012F0 RID: 4848 RVA: 0x00038F44 File Offset: 0x00037144
		public static void ObjectPtrLabel(IntPtr ptr, int length, string label)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
			calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr, length, intPtr, GL.EntryPoints[1443]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x060012F1 RID: 4849 RVA: 0x00038F74 File Offset: 0x00037174
		[CLSCompliant(false)]
		public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[] ptr, int length, string label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[1443]);
				BindingsBase.FreeStringPtr(intPtr);
			}
		}

		// Token: 0x060012F2 RID: 4850 RVA: 0x00038FB8 File Offset: 0x000371B8
		[CLSCompliant(false)]
		public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int length, string label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[1443]);
				BindingsBase.FreeStringPtr(intPtr);
			}
		}

		// Token: 0x060012F3 RID: 4851 RVA: 0x00039000 File Offset: 0x00037200
		[CLSCompliant(false)]
		public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int length, string label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[1443]);
				BindingsBase.FreeStringPtr(intPtr);
			}
		}

		// Token: 0x060012F4 RID: 4852 RVA: 0x00039048 File Offset: 0x00037248
		public unsafe static void ObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int length, string label) where T0 : struct
		{
			fixed (T0* ptr2 = &ptr)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[1443]);
				BindingsBase.FreeStringPtr(intPtr);
			}
		}

		// Token: 0x060012F5 RID: 4853 RVA: 0x00039078 File Offset: 0x00037278
		public static void Ortho(double left, double right, double bottom, double top, double zNear, double zFar)
		{
			calli(System.Void(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double), left, right, bottom, top, zNear, zFar, GL.EntryPoints[1447]);
		}

		// Token: 0x060012F6 RID: 4854 RVA: 0x00039094 File Offset: 0x00037294
		public static void PassThrough(float token)
		{
			calli(System.Void(System.Single), token, GL.EntryPoints[1451]);
		}

		// Token: 0x060012F7 RID: 4855 RVA: 0x000390A8 File Offset: 0x000372A8
		[CLSCompliant(false)]
		public unsafe static void PatchParameter(PatchParameterFloat pname, float[] values)
		{
			fixed (float* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[1453]);
			}
		}

		// Token: 0x060012F8 RID: 4856 RVA: 0x000390DC File Offset: 0x000372DC
		[CLSCompliant(false)]
		public unsafe static void PatchParameter(PatchParameterFloat pname, ref float values)
		{
			fixed (float* ptr = &values)
			{
				calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[1453]);
			}
		}

		// Token: 0x060012F9 RID: 4857 RVA: 0x00039100 File Offset: 0x00037300
		[CLSCompliant(false)]
		public unsafe static void PatchParameter(PatchParameterFloat pname, float* values)
		{
			calli(System.Void(System.Int32,System.Single*), pname, values, GL.EntryPoints[1453]);
		}

		// Token: 0x060012FA RID: 4858 RVA: 0x00039114 File Offset: 0x00037314
		public static void PatchParameter(PatchParameterInt pname, int value)
		{
			calli(System.Void(System.Int32,System.Int32), pname, value, GL.EntryPoints[1454]);
		}

		// Token: 0x060012FB RID: 4859 RVA: 0x00039128 File Offset: 0x00037328
		public static void PauseTransformFeedback()
		{
			calli(System.Void(), GL.EntryPoints[1473]);
		}

		// Token: 0x060012FC RID: 4860 RVA: 0x0003913C File Offset: 0x0003733C
		[CLSCompliant(false)]
		public unsafe static void PixelMap(PixelMap map, int mapsize, float[] values)
		{
			fixed (float* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), map, mapsize, ptr, GL.EntryPoints[1476]);
			}
		}

		// Token: 0x060012FD RID: 4861 RVA: 0x00039174 File Offset: 0x00037374
		[CLSCompliant(false)]
		public unsafe static void PixelMap(PixelMap map, int mapsize, ref float values)
		{
			fixed (float* ptr = &values)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), map, mapsize, ptr, GL.EntryPoints[1476]);
			}
		}

		// Token: 0x060012FE RID: 4862 RVA: 0x00039198 File Offset: 0x00037398
		[CLSCompliant(false)]
		public unsafe static void PixelMap(PixelMap map, int mapsize, float* values)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), map, mapsize, values, GL.EntryPoints[1476]);
		}

		// Token: 0x060012FF RID: 4863 RVA: 0x000391B0 File Offset: 0x000373B0
		[CLSCompliant(false)]
		public unsafe static void PixelMap(PixelMap map, int mapsize, int[] values)
		{
			fixed (int* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, mapsize, ptr, GL.EntryPoints[1477]);
			}
		}

		// Token: 0x06001300 RID: 4864 RVA: 0x000391E8 File Offset: 0x000373E8
		[CLSCompliant(false)]
		public unsafe static void PixelMap(PixelMap map, int mapsize, ref int values)
		{
			fixed (int* ptr = &values)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, mapsize, ptr, GL.EntryPoints[1477]);
			}
		}

		// Token: 0x06001301 RID: 4865 RVA: 0x0003920C File Offset: 0x0003740C
		[CLSCompliant(false)]
		public unsafe static void PixelMap(PixelMap map, int mapsize, int* values)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, mapsize, values, GL.EntryPoints[1477]);
		}

		// Token: 0x06001302 RID: 4866 RVA: 0x00039224 File Offset: 0x00037424
		[CLSCompliant(false)]
		public unsafe static void PixelMap(PixelMap map, int mapsize, uint[] values)
		{
			fixed (uint* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, mapsize, ptr, GL.EntryPoints[1477]);
			}
		}

		// Token: 0x06001303 RID: 4867 RVA: 0x0003925C File Offset: 0x0003745C
		[CLSCompliant(false)]
		public unsafe static void PixelMap(PixelMap map, int mapsize, ref uint values)
		{
			fixed (uint* ptr = &values)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, mapsize, ptr, GL.EntryPoints[1477]);
			}
		}

		// Token: 0x06001304 RID: 4868 RVA: 0x00039280 File Offset: 0x00037480
		[CLSCompliant(false)]
		public unsafe static void PixelMap(PixelMap map, int mapsize, uint* values)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, mapsize, values, GL.EntryPoints[1477]);
		}

		// Token: 0x06001305 RID: 4869 RVA: 0x00039298 File Offset: 0x00037498
		[CLSCompliant(false)]
		public unsafe static void PixelMap(PixelMap map, int mapsize, short[] values)
		{
			fixed (short* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, mapsize, ptr, GL.EntryPoints[1478]);
			}
		}

		// Token: 0x06001306 RID: 4870 RVA: 0x000392D0 File Offset: 0x000374D0
		[CLSCompliant(false)]
		public unsafe static void PixelMap(PixelMap map, int mapsize, ref short values)
		{
			fixed (short* ptr = &values)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, mapsize, ptr, GL.EntryPoints[1478]);
			}
		}

		// Token: 0x06001307 RID: 4871 RVA: 0x000392F4 File Offset: 0x000374F4
		[CLSCompliant(false)]
		public unsafe static void PixelMap(PixelMap map, int mapsize, short* values)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, mapsize, values, GL.EntryPoints[1478]);
		}

		// Token: 0x06001308 RID: 4872 RVA: 0x0003930C File Offset: 0x0003750C
		[CLSCompliant(false)]
		public unsafe static void PixelMap(PixelMap map, int mapsize, ushort[] values)
		{
			fixed (ushort* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, mapsize, ptr, GL.EntryPoints[1478]);
			}
		}

		// Token: 0x06001309 RID: 4873 RVA: 0x00039344 File Offset: 0x00037544
		[CLSCompliant(false)]
		public unsafe static void PixelMap(PixelMap map, int mapsize, ref ushort values)
		{
			fixed (ushort* ptr = &values)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, mapsize, ptr, GL.EntryPoints[1478]);
			}
		}

		// Token: 0x0600130A RID: 4874 RVA: 0x00039368 File Offset: 0x00037568
		[CLSCompliant(false)]
		public unsafe static void PixelMap(PixelMap map, int mapsize, ushort* values)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, mapsize, values, GL.EntryPoints[1478]);
		}

		// Token: 0x0600130B RID: 4875 RVA: 0x00039380 File Offset: 0x00037580
		[CLSCompliant(false)]
		public unsafe static void PixelMapx(OesFixedPoint map, int size, int[] values)
		{
			fixed (int* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), map, size, ptr, GL.EntryPoints[1479]);
			}
		}

		// Token: 0x0600130C RID: 4876 RVA: 0x000393B8 File Offset: 0x000375B8
		[CLSCompliant(false)]
		public unsafe static void PixelMapx(OesFixedPoint map, int size, ref int values)
		{
			fixed (int* ptr = &values)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), map, size, ptr, GL.EntryPoints[1479]);
			}
		}

		// Token: 0x0600130D RID: 4877 RVA: 0x000393DC File Offset: 0x000375DC
		[CLSCompliant(false)]
		public unsafe static void PixelMapx(OesFixedPoint map, int size, int* values)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), map, size, values, GL.EntryPoints[1479]);
		}

		// Token: 0x0600130E RID: 4878 RVA: 0x000393F4 File Offset: 0x000375F4
		public static void PixelStore(PixelStoreParameter pname, float param)
		{
			calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[1480]);
		}

		// Token: 0x0600130F RID: 4879 RVA: 0x00039408 File Offset: 0x00037608
		public static void PixelStore(PixelStoreParameter pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[1481]);
		}

		// Token: 0x06001310 RID: 4880 RVA: 0x0003941C File Offset: 0x0003761C
		public static void PixelStorex(OesFixedPoint pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[1482]);
		}

		// Token: 0x06001311 RID: 4881 RVA: 0x00039430 File Offset: 0x00037630
		public static void PixelTransfer(PixelTransferParameter pname, float param)
		{
			calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[1488]);
		}

		// Token: 0x06001312 RID: 4882 RVA: 0x00039444 File Offset: 0x00037644
		public static void PixelTransfer(PixelTransferParameter pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[1489]);
		}

		// Token: 0x06001313 RID: 4883 RVA: 0x00039458 File Offset: 0x00037658
		public static void PixelZoom(float xfactor, float yfactor)
		{
			calli(System.Void(System.Single,System.Single), xfactor, yfactor, GL.EntryPoints[1495]);
		}

		// Token: 0x06001314 RID: 4884 RVA: 0x0003946C File Offset: 0x0003766C
		public static void PointParameter(PointParameterName pname, float param)
		{
			calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[1500]);
		}

		// Token: 0x06001315 RID: 4885 RVA: 0x00039480 File Offset: 0x00037680
		[CLSCompliant(false)]
		public unsafe static void PointParameter(PointParameterName pname, float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[1504]);
			}
		}

		// Token: 0x06001316 RID: 4886 RVA: 0x000394B4 File Offset: 0x000376B4
		[CLSCompliant(false)]
		public unsafe static void PointParameter(PointParameterName pname, float* @params)
		{
			calli(System.Void(System.Int32,System.Single*), pname, @params, GL.EntryPoints[1504]);
		}

		// Token: 0x06001317 RID: 4887 RVA: 0x000394C8 File Offset: 0x000376C8
		public static void PointParameter(PointParameterName pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[1508]);
		}

		// Token: 0x06001318 RID: 4888 RVA: 0x000394DC File Offset: 0x000376DC
		[CLSCompliant(false)]
		public unsafe static void PointParameter(PointParameterName pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[1510]);
			}
		}

		// Token: 0x06001319 RID: 4889 RVA: 0x00039510 File Offset: 0x00037710
		[CLSCompliant(false)]
		public unsafe static void PointParameter(PointParameterName pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32*), pname, @params, GL.EntryPoints[1510]);
		}

		// Token: 0x0600131A RID: 4890 RVA: 0x00039524 File Offset: 0x00037724
		public static void PointSize(float size)
		{
			calli(System.Void(System.Single), size, GL.EntryPoints[1514]);
		}

		// Token: 0x0600131B RID: 4891 RVA: 0x00039538 File Offset: 0x00037738
		public static void PolygonMode(MaterialFace face, PolygonMode mode)
		{
			calli(System.Void(System.Int32,System.Int32), face, mode, GL.EntryPoints[1518]);
		}

		// Token: 0x0600131C RID: 4892 RVA: 0x0003954C File Offset: 0x0003774C
		public static void PolygonOffset(float factor, float units)
		{
			calli(System.Void(System.Single,System.Single), factor, units, GL.EntryPoints[1519]);
		}

		// Token: 0x0600131D RID: 4893 RVA: 0x00039560 File Offset: 0x00037760
		[CLSCompliant(false)]
		public unsafe static void PolygonStipple(byte[] mask)
		{
			fixed (byte* ptr = ref (mask != null && mask.Length != 0) ? ref mask[0] : ref *null)
			{
				calli(System.Void(System.Byte*), ptr, GL.EntryPoints[1522]);
			}
		}

		// Token: 0x0600131E RID: 4894 RVA: 0x00039594 File Offset: 0x00037794
		[CLSCompliant(false)]
		public unsafe static void PolygonStipple(ref byte mask)
		{
			fixed (byte* ptr = &mask)
			{
				calli(System.Void(System.Byte*), ptr, GL.EntryPoints[1522]);
			}
		}

		// Token: 0x0600131F RID: 4895 RVA: 0x000395B8 File Offset: 0x000377B8
		[CLSCompliant(false)]
		public unsafe static void PolygonStipple(byte* mask)
		{
			calli(System.Void(System.Byte*), mask, GL.EntryPoints[1522]);
		}

		// Token: 0x06001320 RID: 4896 RVA: 0x000395CC File Offset: 0x000377CC
		public static void PopAttrib()
		{
			calli(System.Void(), GL.EntryPoints[1523]);
		}

		// Token: 0x06001321 RID: 4897 RVA: 0x000395E0 File Offset: 0x000377E0
		public static void PopClientAttrib()
		{
			calli(System.Void(), GL.EntryPoints[1524]);
		}

		// Token: 0x06001322 RID: 4898 RVA: 0x000395F4 File Offset: 0x000377F4
		public static void PopDebugGroup()
		{
			calli(System.Void(), GL.EntryPoints[1525]);
		}

		// Token: 0x06001323 RID: 4899 RVA: 0x00039608 File Offset: 0x00037808
		public static void PopMatrix()
		{
			calli(System.Void(), GL.EntryPoints[1528]);
		}

		// Token: 0x06001324 RID: 4900 RVA: 0x0003961C File Offset: 0x0003781C
		public static void PopName()
		{
			calli(System.Void(), GL.EntryPoints[1529]);
		}

		// Token: 0x06001325 RID: 4901 RVA: 0x00039630 File Offset: 0x00037830
		[CLSCompliant(false)]
		public static void PrimitiveRestartIndex(int index)
		{
			calli(System.Void(System.UInt32), index, GL.EntryPoints[1532]);
		}

		// Token: 0x06001326 RID: 4902 RVA: 0x00039644 File Offset: 0x00037844
		[CLSCompliant(false)]
		public static void PrimitiveRestartIndex(uint index)
		{
			calli(System.Void(System.UInt32), index, GL.EntryPoints[1532]);
		}

		// Token: 0x06001327 RID: 4903 RVA: 0x00039658 File Offset: 0x00037858
		[CLSCompliant(false)]
		public unsafe static void PrioritizeTextures(int n, int[] textures, float[] priorities)
		{
			fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (float* ptr3 = ref (priorities != null && priorities.Length != 0) ? ref priorities[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Single*), n, ptr2, ptr3, GL.EntryPoints[1535]);
				}
			}
		}

		// Token: 0x06001328 RID: 4904 RVA: 0x000396A4 File Offset: 0x000378A4
		[CLSCompliant(false)]
		public unsafe static void PrioritizeTextures(int n, ref int textures, ref float priorities)
		{
			fixed (int* ptr = &textures)
			{
				int* ptr2 = ptr;
				fixed (float* ptr3 = &priorities)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Single*), n, ptr2, ptr3, GL.EntryPoints[1535]);
				}
			}
		}

		// Token: 0x06001329 RID: 4905 RVA: 0x000396CC File Offset: 0x000378CC
		[CLSCompliant(false)]
		public unsafe static void PrioritizeTextures(int n, int* textures, float* priorities)
		{
			calli(System.Void(System.Int32,System.UInt32*,System.Single*), n, textures, priorities, GL.EntryPoints[1535]);
		}

		// Token: 0x0600132A RID: 4906 RVA: 0x000396E4 File Offset: 0x000378E4
		[CLSCompliant(false)]
		public unsafe static void PrioritizeTextures(int n, uint[] textures, float[] priorities)
		{
			fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (float* ptr3 = ref (priorities != null && priorities.Length != 0) ? ref priorities[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Single*), n, ptr2, ptr3, GL.EntryPoints[1535]);
				}
			}
		}

		// Token: 0x0600132B RID: 4907 RVA: 0x00039730 File Offset: 0x00037930
		[CLSCompliant(false)]
		public unsafe static void PrioritizeTextures(int n, ref uint textures, ref float priorities)
		{
			fixed (uint* ptr = &textures)
			{
				uint* ptr2 = ptr;
				fixed (float* ptr3 = &priorities)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Single*), n, ptr2, ptr3, GL.EntryPoints[1535]);
				}
			}
		}

		// Token: 0x0600132C RID: 4908 RVA: 0x00039758 File Offset: 0x00037958
		[CLSCompliant(false)]
		public unsafe static void PrioritizeTextures(int n, uint* textures, float* priorities)
		{
			calli(System.Void(System.Int32,System.UInt32*,System.Single*), n, textures, priorities, GL.EntryPoints[1535]);
		}

		// Token: 0x0600132D RID: 4909 RVA: 0x00039770 File Offset: 0x00037970
		[CLSCompliant(false)]
		public static void ProgramBinary(int program, BinaryFormat binaryFormat, IntPtr binary, int length)
		{
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, binary, length, GL.EntryPoints[1538]);
		}

		// Token: 0x0600132E RID: 4910 RVA: 0x00039788 File Offset: 0x00037988
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, [In] [Out] T2[] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[1538]);
			}
		}

		// Token: 0x0600132F RID: 4911 RVA: 0x000397C0 File Offset: 0x000379C0
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, [In] [Out] T2[,] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[1538]);
			}
		}

		// Token: 0x06001330 RID: 4912 RVA: 0x000397FC File Offset: 0x000379FC
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, [In] [Out] T2[,,] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[1538]);
			}
		}

		// Token: 0x06001331 RID: 4913 RVA: 0x00039838 File Offset: 0x00037A38
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, [In] [Out] ref T2 binary, int length) where T2 : struct
		{
			fixed (T2* ptr = &binary)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[1538]);
			}
		}

		// Token: 0x06001332 RID: 4914 RVA: 0x0003985C File Offset: 0x00037A5C
		[CLSCompliant(false)]
		public static void ProgramBinary(uint program, BinaryFormat binaryFormat, IntPtr binary, int length)
		{
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, binary, length, GL.EntryPoints[1538]);
		}

		// Token: 0x06001333 RID: 4915 RVA: 0x00039874 File Offset: 0x00037A74
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, [In] [Out] T2[] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[1538]);
			}
		}

		// Token: 0x06001334 RID: 4916 RVA: 0x000398AC File Offset: 0x00037AAC
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, [In] [Out] T2[,] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[1538]);
			}
		}

		// Token: 0x06001335 RID: 4917 RVA: 0x000398E8 File Offset: 0x00037AE8
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, [In] [Out] T2[,,] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[1538]);
			}
		}

		// Token: 0x06001336 RID: 4918 RVA: 0x00039924 File Offset: 0x00037B24
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, [In] [Out] ref T2 binary, int length) where T2 : struct
		{
			fixed (T2* ptr = &binary)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[1538]);
			}
		}

		// Token: 0x06001337 RID: 4919 RVA: 0x00039948 File Offset: 0x00037B48
		[CLSCompliant(false)]
		[Obsolete("Use ProgramParameterName overload instead")]
		public static void ProgramParameter(int program, AssemblyProgramParameterArb pname, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[1572]);
		}

		// Token: 0x06001338 RID: 4920 RVA: 0x00039960 File Offset: 0x00037B60
		[CLSCompliant(false)]
		public static void ProgramParameter(int program, ProgramParameterName pname, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[1572]);
		}

		// Token: 0x06001339 RID: 4921 RVA: 0x00039978 File Offset: 0x00037B78
		[CLSCompliant(false)]
		[Obsolete("Use ProgramParameterName overload instead")]
		public static void ProgramParameter(int program, Version32 pname, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[1572]);
		}

		// Token: 0x0600133A RID: 4922 RVA: 0x00039990 File Offset: 0x00037B90
		[Obsolete("Use ProgramParameterName overload instead")]
		[CLSCompliant(false)]
		public static void ProgramParameter(uint program, AssemblyProgramParameterArb pname, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[1572]);
		}

		// Token: 0x0600133B RID: 4923 RVA: 0x000399A8 File Offset: 0x00037BA8
		[CLSCompliant(false)]
		public static void ProgramParameter(uint program, ProgramParameterName pname, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[1572]);
		}

		// Token: 0x0600133C RID: 4924 RVA: 0x000399C0 File Offset: 0x00037BC0
		[CLSCompliant(false)]
		[Obsolete("Use ProgramParameterName overload instead")]
		public static void ProgramParameter(uint program, Version32 pname, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[1572]);
		}

		// Token: 0x0600133D RID: 4925 RVA: 0x000399D8 File Offset: 0x00037BD8
		[CLSCompliant(false)]
		public static void ProgramUniform1(int program, int location, double v0)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double), program, location, v0, GL.EntryPoints[1579]);
		}

		// Token: 0x0600133E RID: 4926 RVA: 0x000399F0 File Offset: 0x00037BF0
		[CLSCompliant(false)]
		public static void ProgramUniform1(uint program, int location, double v0)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double), program, location, v0, GL.EntryPoints[1579]);
		}

		// Token: 0x0600133F RID: 4927 RVA: 0x00039A08 File Offset: 0x00037C08
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(int program, int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1581]);
			}
		}

		// Token: 0x06001340 RID: 4928 RVA: 0x00039A2C File Offset: 0x00037C2C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(int program, int location, int count, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[1581]);
		}

		// Token: 0x06001341 RID: 4929 RVA: 0x00039A44 File Offset: 0x00037C44
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(uint program, int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1581]);
			}
		}

		// Token: 0x06001342 RID: 4930 RVA: 0x00039A68 File Offset: 0x00037C68
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(uint program, int location, int count, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[1581]);
		}

		// Token: 0x06001343 RID: 4931 RVA: 0x00039A80 File Offset: 0x00037C80
		[CLSCompliant(false)]
		public static void ProgramUniform1(int program, int location, float v0)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single), program, location, v0, GL.EntryPoints[1583]);
		}

		// Token: 0x06001344 RID: 4932 RVA: 0x00039A98 File Offset: 0x00037C98
		[CLSCompliant(false)]
		public static void ProgramUniform1(uint program, int location, float v0)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single), program, location, v0, GL.EntryPoints[1583]);
		}

		// Token: 0x06001345 RID: 4933 RVA: 0x00039AB0 File Offset: 0x00037CB0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(int program, int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1585]);
			}
		}

		// Token: 0x06001346 RID: 4934 RVA: 0x00039AD4 File Offset: 0x00037CD4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(int program, int location, int count, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[1585]);
		}

		// Token: 0x06001347 RID: 4935 RVA: 0x00039AEC File Offset: 0x00037CEC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(uint program, int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1585]);
			}
		}

		// Token: 0x06001348 RID: 4936 RVA: 0x00039B10 File Offset: 0x00037D10
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(uint program, int location, int count, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[1585]);
		}

		// Token: 0x06001349 RID: 4937 RVA: 0x00039B28 File Offset: 0x00037D28
		[CLSCompliant(false)]
		public static void ProgramUniform1(int program, int location, int v0)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), program, location, v0, GL.EntryPoints[1587]);
		}

		// Token: 0x0600134A RID: 4938 RVA: 0x00039B40 File Offset: 0x00037D40
		[CLSCompliant(false)]
		public static void ProgramUniform1(uint program, int location, int v0)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), program, location, v0, GL.EntryPoints[1587]);
		}

		// Token: 0x0600134B RID: 4939 RVA: 0x00039B58 File Offset: 0x00037D58
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(int program, int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1591]);
			}
		}

		// Token: 0x0600134C RID: 4940 RVA: 0x00039B7C File Offset: 0x00037D7C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(int program, int location, int count, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[1591]);
		}

		// Token: 0x0600134D RID: 4941 RVA: 0x00039B94 File Offset: 0x00037D94
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(uint program, int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1591]);
			}
		}

		// Token: 0x0600134E RID: 4942 RVA: 0x00039BB8 File Offset: 0x00037DB8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(uint program, int location, int count, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[1591]);
		}

		// Token: 0x0600134F RID: 4943 RVA: 0x00039BD0 File Offset: 0x00037DD0
		[CLSCompliant(false)]
		public static void ProgramUniform1(uint program, int location, uint v0)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32), program, location, v0, GL.EntryPoints[1593]);
		}

		// Token: 0x06001350 RID: 4944 RVA: 0x00039BE8 File Offset: 0x00037DE8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(uint program, int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[1597]);
			}
		}

		// Token: 0x06001351 RID: 4945 RVA: 0x00039C0C File Offset: 0x00037E0C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform1(uint program, int location, int count, uint* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, value, GL.EntryPoints[1597]);
		}

		// Token: 0x06001352 RID: 4946 RVA: 0x00039C24 File Offset: 0x00037E24
		[CLSCompliant(false)]
		public static void ProgramUniform2(int program, int location, double v0, double v1)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double), program, location, v0, v1, GL.EntryPoints[1599]);
		}

		// Token: 0x06001353 RID: 4947 RVA: 0x00039C3C File Offset: 0x00037E3C
		[CLSCompliant(false)]
		public static void ProgramUniform2(uint program, int location, double v0, double v1)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double), program, location, v0, v1, GL.EntryPoints[1599]);
		}

		// Token: 0x06001354 RID: 4948 RVA: 0x00039C54 File Offset: 0x00037E54
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(int program, int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1601]);
			}
		}

		// Token: 0x06001355 RID: 4949 RVA: 0x00039C8C File Offset: 0x00037E8C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(int program, int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1601]);
			}
		}

		// Token: 0x06001356 RID: 4950 RVA: 0x00039CB0 File Offset: 0x00037EB0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(int program, int location, int count, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[1601]);
		}

		// Token: 0x06001357 RID: 4951 RVA: 0x00039CC8 File Offset: 0x00037EC8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1601]);
			}
		}

		// Token: 0x06001358 RID: 4952 RVA: 0x00039D00 File Offset: 0x00037F00
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1601]);
			}
		}

		// Token: 0x06001359 RID: 4953 RVA: 0x00039D24 File Offset: 0x00037F24
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[1601]);
		}

		// Token: 0x0600135A RID: 4954 RVA: 0x00039D3C File Offset: 0x00037F3C
		[CLSCompliant(false)]
		public static void ProgramUniform2(int program, int location, float v0, float v1)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single), program, location, v0, v1, GL.EntryPoints[1603]);
		}

		// Token: 0x0600135B RID: 4955 RVA: 0x00039D54 File Offset: 0x00037F54
		[CLSCompliant(false)]
		public static void ProgramUniform2(uint program, int location, float v0, float v1)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single), program, location, v0, v1, GL.EntryPoints[1603]);
		}

		// Token: 0x0600135C RID: 4956 RVA: 0x00039D6C File Offset: 0x00037F6C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(int program, int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1605]);
			}
		}

		// Token: 0x0600135D RID: 4957 RVA: 0x00039DA4 File Offset: 0x00037FA4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(int program, int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1605]);
			}
		}

		// Token: 0x0600135E RID: 4958 RVA: 0x00039DC8 File Offset: 0x00037FC8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(int program, int location, int count, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[1605]);
		}

		// Token: 0x0600135F RID: 4959 RVA: 0x00039DE0 File Offset: 0x00037FE0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1605]);
			}
		}

		// Token: 0x06001360 RID: 4960 RVA: 0x00039E18 File Offset: 0x00038018
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1605]);
			}
		}

		// Token: 0x06001361 RID: 4961 RVA: 0x00039E3C File Offset: 0x0003803C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[1605]);
		}

		// Token: 0x06001362 RID: 4962 RVA: 0x00039E54 File Offset: 0x00038054
		[CLSCompliant(false)]
		public static void ProgramUniform2(int program, int location, int v0, int v1)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, GL.EntryPoints[1607]);
		}

		// Token: 0x06001363 RID: 4963 RVA: 0x00039E6C File Offset: 0x0003806C
		[CLSCompliant(false)]
		public static void ProgramUniform2(uint program, int location, int v0, int v1)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, GL.EntryPoints[1607]);
		}

		// Token: 0x06001364 RID: 4964 RVA: 0x00039E84 File Offset: 0x00038084
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(int program, int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1611]);
			}
		}

		// Token: 0x06001365 RID: 4965 RVA: 0x00039EBC File Offset: 0x000380BC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(int program, int location, int count, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[1611]);
		}

		// Token: 0x06001366 RID: 4966 RVA: 0x00039ED4 File Offset: 0x000380D4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1611]);
			}
		}

		// Token: 0x06001367 RID: 4967 RVA: 0x00039F0C File Offset: 0x0003810C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[1611]);
		}

		// Token: 0x06001368 RID: 4968 RVA: 0x00039F24 File Offset: 0x00038124
		[CLSCompliant(false)]
		public static void ProgramUniform2(uint program, int location, uint v0, uint v1)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32), program, location, v0, v1, GL.EntryPoints[1613]);
		}

		// Token: 0x06001369 RID: 4969 RVA: 0x00039F3C File Offset: 0x0003813C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[1617]);
			}
		}

		// Token: 0x0600136A RID: 4970 RVA: 0x00039F74 File Offset: 0x00038174
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[1617]);
			}
		}

		// Token: 0x0600136B RID: 4971 RVA: 0x00039F98 File Offset: 0x00038198
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform2(uint program, int location, int count, uint* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, value, GL.EntryPoints[1617]);
		}

		// Token: 0x0600136C RID: 4972 RVA: 0x00039FB0 File Offset: 0x000381B0
		[CLSCompliant(false)]
		public static void ProgramUniform3(int program, int location, double v0, double v1, double v2)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double,System.Double), program, location, v0, v1, v2, GL.EntryPoints[1619]);
		}

		// Token: 0x0600136D RID: 4973 RVA: 0x00039FC8 File Offset: 0x000381C8
		[CLSCompliant(false)]
		public static void ProgramUniform3(uint program, int location, double v0, double v1, double v2)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double,System.Double), program, location, v0, v1, v2, GL.EntryPoints[1619]);
		}

		// Token: 0x0600136E RID: 4974 RVA: 0x00039FE0 File Offset: 0x000381E0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1621]);
			}
		}

		// Token: 0x0600136F RID: 4975 RVA: 0x0003A018 File Offset: 0x00038218
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1621]);
			}
		}

		// Token: 0x06001370 RID: 4976 RVA: 0x0003A03C File Offset: 0x0003823C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[1621]);
		}

		// Token: 0x06001371 RID: 4977 RVA: 0x0003A054 File Offset: 0x00038254
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1621]);
			}
		}

		// Token: 0x06001372 RID: 4978 RVA: 0x0003A08C File Offset: 0x0003828C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1621]);
			}
		}

		// Token: 0x06001373 RID: 4979 RVA: 0x0003A0B0 File Offset: 0x000382B0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[1621]);
		}

		// Token: 0x06001374 RID: 4980 RVA: 0x0003A0C8 File Offset: 0x000382C8
		[CLSCompliant(false)]
		public static void ProgramUniform3(int program, int location, float v0, float v1, float v2)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single,System.Single), program, location, v0, v1, v2, GL.EntryPoints[1623]);
		}

		// Token: 0x06001375 RID: 4981 RVA: 0x0003A0E0 File Offset: 0x000382E0
		[CLSCompliant(false)]
		public static void ProgramUniform3(uint program, int location, float v0, float v1, float v2)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single,System.Single), program, location, v0, v1, v2, GL.EntryPoints[1623]);
		}

		// Token: 0x06001376 RID: 4982 RVA: 0x0003A0F8 File Offset: 0x000382F8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1625]);
			}
		}

		// Token: 0x06001377 RID: 4983 RVA: 0x0003A130 File Offset: 0x00038330
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1625]);
			}
		}

		// Token: 0x06001378 RID: 4984 RVA: 0x0003A154 File Offset: 0x00038354
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[1625]);
		}

		// Token: 0x06001379 RID: 4985 RVA: 0x0003A16C File Offset: 0x0003836C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1625]);
			}
		}

		// Token: 0x0600137A RID: 4986 RVA: 0x0003A1A4 File Offset: 0x000383A4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1625]);
			}
		}

		// Token: 0x0600137B RID: 4987 RVA: 0x0003A1C8 File Offset: 0x000383C8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[1625]);
		}

		// Token: 0x0600137C RID: 4988 RVA: 0x0003A1E0 File Offset: 0x000383E0
		[CLSCompliant(false)]
		public static void ProgramUniform3(int program, int location, int v0, int v1, int v2)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, v2, GL.EntryPoints[1627]);
		}

		// Token: 0x0600137D RID: 4989 RVA: 0x0003A1F8 File Offset: 0x000383F8
		[CLSCompliant(false)]
		public static void ProgramUniform3(uint program, int location, int v0, int v1, int v2)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, v2, GL.EntryPoints[1627]);
		}

		// Token: 0x0600137E RID: 4990 RVA: 0x0003A210 File Offset: 0x00038410
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1631]);
			}
		}

		// Token: 0x0600137F RID: 4991 RVA: 0x0003A248 File Offset: 0x00038448
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1631]);
			}
		}

		// Token: 0x06001380 RID: 4992 RVA: 0x0003A26C File Offset: 0x0003846C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(int program, int location, int count, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[1631]);
		}

		// Token: 0x06001381 RID: 4993 RVA: 0x0003A284 File Offset: 0x00038484
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1631]);
			}
		}

		// Token: 0x06001382 RID: 4994 RVA: 0x0003A2BC File Offset: 0x000384BC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1631]);
			}
		}

		// Token: 0x06001383 RID: 4995 RVA: 0x0003A2E0 File Offset: 0x000384E0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[1631]);
		}

		// Token: 0x06001384 RID: 4996 RVA: 0x0003A2F8 File Offset: 0x000384F8
		[CLSCompliant(false)]
		public static void ProgramUniform3(uint program, int location, uint v0, uint v1, uint v2)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32), program, location, v0, v1, v2, GL.EntryPoints[1633]);
		}

		// Token: 0x06001385 RID: 4997 RVA: 0x0003A310 File Offset: 0x00038510
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[1637]);
			}
		}

		// Token: 0x06001386 RID: 4998 RVA: 0x0003A348 File Offset: 0x00038548
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[1637]);
			}
		}

		// Token: 0x06001387 RID: 4999 RVA: 0x0003A36C File Offset: 0x0003856C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform3(uint program, int location, int count, uint* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, value, GL.EntryPoints[1637]);
		}

		// Token: 0x06001388 RID: 5000 RVA: 0x0003A384 File Offset: 0x00038584
		[CLSCompliant(false)]
		public static void ProgramUniform4(int program, int location, double v0, double v1, double v2, double v3)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double,System.Double,System.Double), program, location, v0, v1, v2, v3, GL.EntryPoints[1639]);
		}

		// Token: 0x06001389 RID: 5001 RVA: 0x0003A3A0 File Offset: 0x000385A0
		[CLSCompliant(false)]
		public static void ProgramUniform4(uint program, int location, double v0, double v1, double v2, double v3)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double,System.Double,System.Double), program, location, v0, v1, v2, v3, GL.EntryPoints[1639]);
		}

		// Token: 0x0600138A RID: 5002 RVA: 0x0003A3BC File Offset: 0x000385BC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1641]);
			}
		}

		// Token: 0x0600138B RID: 5003 RVA: 0x0003A3F4 File Offset: 0x000385F4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1641]);
			}
		}

		// Token: 0x0600138C RID: 5004 RVA: 0x0003A418 File Offset: 0x00038618
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[1641]);
		}

		// Token: 0x0600138D RID: 5005 RVA: 0x0003A430 File Offset: 0x00038630
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1641]);
			}
		}

		// Token: 0x0600138E RID: 5006 RVA: 0x0003A468 File Offset: 0x00038668
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1641]);
			}
		}

		// Token: 0x0600138F RID: 5007 RVA: 0x0003A48C File Offset: 0x0003868C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[1641]);
		}

		// Token: 0x06001390 RID: 5008 RVA: 0x0003A4A4 File Offset: 0x000386A4
		[CLSCompliant(false)]
		public static void ProgramUniform4(int program, int location, float v0, float v1, float v2, float v3)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single,System.Single,System.Single), program, location, v0, v1, v2, v3, GL.EntryPoints[1643]);
		}

		// Token: 0x06001391 RID: 5009 RVA: 0x0003A4C0 File Offset: 0x000386C0
		[CLSCompliant(false)]
		public static void ProgramUniform4(uint program, int location, float v0, float v1, float v2, float v3)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single,System.Single,System.Single), program, location, v0, v1, v2, v3, GL.EntryPoints[1643]);
		}

		// Token: 0x06001392 RID: 5010 RVA: 0x0003A4DC File Offset: 0x000386DC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1645]);
			}
		}

		// Token: 0x06001393 RID: 5011 RVA: 0x0003A514 File Offset: 0x00038714
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1645]);
			}
		}

		// Token: 0x06001394 RID: 5012 RVA: 0x0003A538 File Offset: 0x00038738
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[1645]);
		}

		// Token: 0x06001395 RID: 5013 RVA: 0x0003A550 File Offset: 0x00038750
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1645]);
			}
		}

		// Token: 0x06001396 RID: 5014 RVA: 0x0003A588 File Offset: 0x00038788
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1645]);
			}
		}

		// Token: 0x06001397 RID: 5015 RVA: 0x0003A5AC File Offset: 0x000387AC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[1645]);
		}

		// Token: 0x06001398 RID: 5016 RVA: 0x0003A5C4 File Offset: 0x000387C4
		[CLSCompliant(false)]
		public static void ProgramUniform4(int program, int location, int v0, int v1, int v2, int v3)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, v2, v3, GL.EntryPoints[1647]);
		}

		// Token: 0x06001399 RID: 5017 RVA: 0x0003A5E0 File Offset: 0x000387E0
		[CLSCompliant(false)]
		public static void ProgramUniform4(uint program, int location, int v0, int v1, int v2, int v3)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, v2, v3, GL.EntryPoints[1647]);
		}

		// Token: 0x0600139A RID: 5018 RVA: 0x0003A5FC File Offset: 0x000387FC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1651]);
			}
		}

		// Token: 0x0600139B RID: 5019 RVA: 0x0003A634 File Offset: 0x00038834
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1651]);
			}
		}

		// Token: 0x0600139C RID: 5020 RVA: 0x0003A658 File Offset: 0x00038858
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(int program, int location, int count, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[1651]);
		}

		// Token: 0x0600139D RID: 5021 RVA: 0x0003A670 File Offset: 0x00038870
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1651]);
			}
		}

		// Token: 0x0600139E RID: 5022 RVA: 0x0003A6A8 File Offset: 0x000388A8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1651]);
			}
		}

		// Token: 0x0600139F RID: 5023 RVA: 0x0003A6CC File Offset: 0x000388CC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[1651]);
		}

		// Token: 0x060013A0 RID: 5024 RVA: 0x0003A6E4 File Offset: 0x000388E4
		[CLSCompliant(false)]
		public static void ProgramUniform4(uint program, int location, uint v0, uint v1, uint v2, uint v3)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), program, location, v0, v1, v2, v3, GL.EntryPoints[1653]);
		}

		// Token: 0x060013A1 RID: 5025 RVA: 0x0003A700 File Offset: 0x00038900
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[1657]);
			}
		}

		// Token: 0x060013A2 RID: 5026 RVA: 0x0003A738 File Offset: 0x00038938
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[1657]);
			}
		}

		// Token: 0x060013A3 RID: 5027 RVA: 0x0003A75C File Offset: 0x0003895C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniform4(uint program, int location, int count, uint* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, value, GL.EntryPoints[1657]);
		}

		// Token: 0x060013A4 RID: 5028 RVA: 0x0003A774 File Offset: 0x00038974
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1663]);
			}
		}

		// Token: 0x060013A5 RID: 5029 RVA: 0x0003A7B0 File Offset: 0x000389B0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1663]);
			}
		}

		// Token: 0x060013A6 RID: 5030 RVA: 0x0003A7D8 File Offset: 0x000389D8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1663]);
		}

		// Token: 0x060013A7 RID: 5031 RVA: 0x0003A7F0 File Offset: 0x000389F0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1663]);
			}
		}

		// Token: 0x060013A8 RID: 5032 RVA: 0x0003A82C File Offset: 0x00038A2C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1663]);
			}
		}

		// Token: 0x060013A9 RID: 5033 RVA: 0x0003A854 File Offset: 0x00038A54
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1663]);
		}

		// Token: 0x060013AA RID: 5034 RVA: 0x0003A86C File Offset: 0x00038A6C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1665]);
			}
		}

		// Token: 0x060013AB RID: 5035 RVA: 0x0003A8A8 File Offset: 0x00038AA8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1665]);
			}
		}

		// Token: 0x060013AC RID: 5036 RVA: 0x0003A8D0 File Offset: 0x00038AD0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1665]);
		}

		// Token: 0x060013AD RID: 5037 RVA: 0x0003A8E8 File Offset: 0x00038AE8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1665]);
			}
		}

		// Token: 0x060013AE RID: 5038 RVA: 0x0003A924 File Offset: 0x00038B24
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1665]);
			}
		}

		// Token: 0x060013AF RID: 5039 RVA: 0x0003A94C File Offset: 0x00038B4C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1665]);
		}

		// Token: 0x060013B0 RID: 5040 RVA: 0x0003A964 File Offset: 0x00038B64
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1667]);
			}
		}

		// Token: 0x060013B1 RID: 5041 RVA: 0x0003A9A0 File Offset: 0x00038BA0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1667]);
			}
		}

		// Token: 0x060013B2 RID: 5042 RVA: 0x0003A9C8 File Offset: 0x00038BC8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1667]);
		}

		// Token: 0x060013B3 RID: 5043 RVA: 0x0003A9E0 File Offset: 0x00038BE0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1667]);
			}
		}

		// Token: 0x060013B4 RID: 5044 RVA: 0x0003AA1C File Offset: 0x00038C1C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1667]);
			}
		}

		// Token: 0x060013B5 RID: 5045 RVA: 0x0003AA44 File Offset: 0x00038C44
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1667]);
		}

		// Token: 0x060013B6 RID: 5046 RVA: 0x0003AA5C File Offset: 0x00038C5C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1669]);
			}
		}

		// Token: 0x060013B7 RID: 5047 RVA: 0x0003AA98 File Offset: 0x00038C98
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1669]);
			}
		}

		// Token: 0x060013B8 RID: 5048 RVA: 0x0003AAC0 File Offset: 0x00038CC0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1669]);
		}

		// Token: 0x060013B9 RID: 5049 RVA: 0x0003AAD8 File Offset: 0x00038CD8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1669]);
			}
		}

		// Token: 0x060013BA RID: 5050 RVA: 0x0003AB14 File Offset: 0x00038D14
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1669]);
			}
		}

		// Token: 0x060013BB RID: 5051 RVA: 0x0003AB3C File Offset: 0x00038D3C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1669]);
		}

		// Token: 0x060013BC RID: 5052 RVA: 0x0003AB54 File Offset: 0x00038D54
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1671]);
			}
		}

		// Token: 0x060013BD RID: 5053 RVA: 0x0003AB90 File Offset: 0x00038D90
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1671]);
			}
		}

		// Token: 0x060013BE RID: 5054 RVA: 0x0003ABB8 File Offset: 0x00038DB8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1671]);
		}

		// Token: 0x060013BF RID: 5055 RVA: 0x0003ABD0 File Offset: 0x00038DD0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1671]);
			}
		}

		// Token: 0x060013C0 RID: 5056 RVA: 0x0003AC0C File Offset: 0x00038E0C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1671]);
			}
		}

		// Token: 0x060013C1 RID: 5057 RVA: 0x0003AC34 File Offset: 0x00038E34
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1671]);
		}

		// Token: 0x060013C2 RID: 5058 RVA: 0x0003AC4C File Offset: 0x00038E4C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1673]);
			}
		}

		// Token: 0x060013C3 RID: 5059 RVA: 0x0003AC88 File Offset: 0x00038E88
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1673]);
			}
		}

		// Token: 0x060013C4 RID: 5060 RVA: 0x0003ACB0 File Offset: 0x00038EB0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1673]);
		}

		// Token: 0x060013C5 RID: 5061 RVA: 0x0003ACC8 File Offset: 0x00038EC8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1673]);
			}
		}

		// Token: 0x060013C6 RID: 5062 RVA: 0x0003AD04 File Offset: 0x00038F04
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1673]);
			}
		}

		// Token: 0x060013C7 RID: 5063 RVA: 0x0003AD2C File Offset: 0x00038F2C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1673]);
		}

		// Token: 0x060013C8 RID: 5064 RVA: 0x0003AD44 File Offset: 0x00038F44
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1675]);
			}
		}

		// Token: 0x060013C9 RID: 5065 RVA: 0x0003AD80 File Offset: 0x00038F80
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1675]);
			}
		}

		// Token: 0x060013CA RID: 5066 RVA: 0x0003ADA8 File Offset: 0x00038FA8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1675]);
		}

		// Token: 0x060013CB RID: 5067 RVA: 0x0003ADC0 File Offset: 0x00038FC0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1675]);
			}
		}

		// Token: 0x060013CC RID: 5068 RVA: 0x0003ADFC File Offset: 0x00038FFC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1675]);
			}
		}

		// Token: 0x060013CD RID: 5069 RVA: 0x0003AE24 File Offset: 0x00039024
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1675]);
		}

		// Token: 0x060013CE RID: 5070 RVA: 0x0003AE3C File Offset: 0x0003903C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1677]);
			}
		}

		// Token: 0x060013CF RID: 5071 RVA: 0x0003AE78 File Offset: 0x00039078
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1677]);
			}
		}

		// Token: 0x060013D0 RID: 5072 RVA: 0x0003AEA0 File Offset: 0x000390A0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1677]);
		}

		// Token: 0x060013D1 RID: 5073 RVA: 0x0003AEB8 File Offset: 0x000390B8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1677]);
			}
		}

		// Token: 0x060013D2 RID: 5074 RVA: 0x0003AEF4 File Offset: 0x000390F4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1677]);
			}
		}

		// Token: 0x060013D3 RID: 5075 RVA: 0x0003AF1C File Offset: 0x0003911C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1677]);
		}

		// Token: 0x060013D4 RID: 5076 RVA: 0x0003AF34 File Offset: 0x00039134
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1679]);
			}
		}

		// Token: 0x060013D5 RID: 5077 RVA: 0x0003AF70 File Offset: 0x00039170
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1679]);
			}
		}

		// Token: 0x060013D6 RID: 5078 RVA: 0x0003AF98 File Offset: 0x00039198
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1679]);
		}

		// Token: 0x060013D7 RID: 5079 RVA: 0x0003AFB0 File Offset: 0x000391B0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1679]);
			}
		}

		// Token: 0x060013D8 RID: 5080 RVA: 0x0003AFEC File Offset: 0x000391EC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1679]);
			}
		}

		// Token: 0x060013D9 RID: 5081 RVA: 0x0003B014 File Offset: 0x00039214
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1679]);
		}

		// Token: 0x060013DA RID: 5082 RVA: 0x0003B02C File Offset: 0x0003922C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1681]);
			}
		}

		// Token: 0x060013DB RID: 5083 RVA: 0x0003B068 File Offset: 0x00039268
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1681]);
			}
		}

		// Token: 0x060013DC RID: 5084 RVA: 0x0003B090 File Offset: 0x00039290
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1681]);
		}

		// Token: 0x060013DD RID: 5085 RVA: 0x0003B0A8 File Offset: 0x000392A8
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1681]);
			}
		}

		// Token: 0x060013DE RID: 5086 RVA: 0x0003B0E4 File Offset: 0x000392E4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1681]);
			}
		}

		// Token: 0x060013DF RID: 5087 RVA: 0x0003B10C File Offset: 0x0003930C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1681]);
		}

		// Token: 0x060013E0 RID: 5088 RVA: 0x0003B124 File Offset: 0x00039324
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1683]);
			}
		}

		// Token: 0x060013E1 RID: 5089 RVA: 0x0003B160 File Offset: 0x00039360
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1683]);
			}
		}

		// Token: 0x060013E2 RID: 5090 RVA: 0x0003B188 File Offset: 0x00039388
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1683]);
		}

		// Token: 0x060013E3 RID: 5091 RVA: 0x0003B1A0 File Offset: 0x000393A0
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1683]);
			}
		}

		// Token: 0x060013E4 RID: 5092 RVA: 0x0003B1DC File Offset: 0x000393DC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1683]);
			}
		}

		// Token: 0x060013E5 RID: 5093 RVA: 0x0003B204 File Offset: 0x00039404
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1683]);
		}

		// Token: 0x060013E6 RID: 5094 RVA: 0x0003B21C File Offset: 0x0003941C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1685]);
			}
		}

		// Token: 0x060013E7 RID: 5095 RVA: 0x0003B258 File Offset: 0x00039458
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1685]);
			}
		}

		// Token: 0x060013E8 RID: 5096 RVA: 0x0003B280 File Offset: 0x00039480
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1685]);
		}

		// Token: 0x060013E9 RID: 5097 RVA: 0x0003B298 File Offset: 0x00039498
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1685]);
			}
		}

		// Token: 0x060013EA RID: 5098 RVA: 0x0003B2D4 File Offset: 0x000394D4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1685]);
			}
		}

		// Token: 0x060013EB RID: 5099 RVA: 0x0003B2FC File Offset: 0x000394FC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1685]);
		}

		// Token: 0x060013EC RID: 5100 RVA: 0x0003B314 File Offset: 0x00039514
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1687]);
			}
		}

		// Token: 0x060013ED RID: 5101 RVA: 0x0003B350 File Offset: 0x00039550
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1687]);
			}
		}

		// Token: 0x060013EE RID: 5102 RVA: 0x0003B378 File Offset: 0x00039578
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1687]);
		}

		// Token: 0x060013EF RID: 5103 RVA: 0x0003B390 File Offset: 0x00039590
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1687]);
			}
		}

		// Token: 0x060013F0 RID: 5104 RVA: 0x0003B3CC File Offset: 0x000395CC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1687]);
			}
		}

		// Token: 0x060013F1 RID: 5105 RVA: 0x0003B3F4 File Offset: 0x000395F4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1687]);
		}

		// Token: 0x060013F2 RID: 5106 RVA: 0x0003B40C File Offset: 0x0003960C
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1689]);
			}
		}

		// Token: 0x060013F3 RID: 5107 RVA: 0x0003B448 File Offset: 0x00039648
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1689]);
			}
		}

		// Token: 0x060013F4 RID: 5108 RVA: 0x0003B470 File Offset: 0x00039670
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1689]);
		}

		// Token: 0x060013F5 RID: 5109 RVA: 0x0003B488 File Offset: 0x00039688
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1689]);
			}
		}

		// Token: 0x060013F6 RID: 5110 RVA: 0x0003B4C4 File Offset: 0x000396C4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1689]);
			}
		}

		// Token: 0x060013F7 RID: 5111 RVA: 0x0003B4EC File Offset: 0x000396EC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1689]);
		}

		// Token: 0x060013F8 RID: 5112 RVA: 0x0003B504 File Offset: 0x00039704
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1691]);
			}
		}

		// Token: 0x060013F9 RID: 5113 RVA: 0x0003B540 File Offset: 0x00039740
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1691]);
			}
		}

		// Token: 0x060013FA RID: 5114 RVA: 0x0003B568 File Offset: 0x00039768
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1691]);
		}

		// Token: 0x060013FB RID: 5115 RVA: 0x0003B580 File Offset: 0x00039780
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1691]);
			}
		}

		// Token: 0x060013FC RID: 5116 RVA: 0x0003B5BC File Offset: 0x000397BC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1691]);
			}
		}

		// Token: 0x060013FD RID: 5117 RVA: 0x0003B5E4 File Offset: 0x000397E4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1691]);
		}

		// Token: 0x060013FE RID: 5118 RVA: 0x0003B5FC File Offset: 0x000397FC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1693]);
			}
		}

		// Token: 0x060013FF RID: 5119 RVA: 0x0003B638 File Offset: 0x00039838
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1693]);
			}
		}

		// Token: 0x06001400 RID: 5120 RVA: 0x0003B660 File Offset: 0x00039860
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1693]);
		}

		// Token: 0x06001401 RID: 5121 RVA: 0x0003B678 File Offset: 0x00039878
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1693]);
			}
		}

		// Token: 0x06001402 RID: 5122 RVA: 0x0003B6B4 File Offset: 0x000398B4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1693]);
			}
		}

		// Token: 0x06001403 RID: 5123 RVA: 0x0003B6DC File Offset: 0x000398DC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1693]);
		}

		// Token: 0x06001404 RID: 5124 RVA: 0x0003B6F4 File Offset: 0x000398F4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1695]);
			}
		}

		// Token: 0x06001405 RID: 5125 RVA: 0x0003B730 File Offset: 0x00039930
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1695]);
			}
		}

		// Token: 0x06001406 RID: 5126 RVA: 0x0003B758 File Offset: 0x00039958
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1695]);
		}

		// Token: 0x06001407 RID: 5127 RVA: 0x0003B770 File Offset: 0x00039970
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1695]);
			}
		}

		// Token: 0x06001408 RID: 5128 RVA: 0x0003B7AC File Offset: 0x000399AC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1695]);
			}
		}

		// Token: 0x06001409 RID: 5129 RVA: 0x0003B7D4 File Offset: 0x000399D4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1695]);
		}

		// Token: 0x0600140A RID: 5130 RVA: 0x0003B7EC File Offset: 0x000399EC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1697]);
			}
		}

		// Token: 0x0600140B RID: 5131 RVA: 0x0003B828 File Offset: 0x00039A28
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1697]);
			}
		}

		// Token: 0x0600140C RID: 5132 RVA: 0x0003B850 File Offset: 0x00039A50
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1697]);
		}

		// Token: 0x0600140D RID: 5133 RVA: 0x0003B868 File Offset: 0x00039A68
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1697]);
			}
		}

		// Token: 0x0600140E RID: 5134 RVA: 0x0003B8A4 File Offset: 0x00039AA4
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1697]);
			}
		}

		// Token: 0x0600140F RID: 5135 RVA: 0x0003B8CC File Offset: 0x00039ACC
		[CLSCompliant(false)]
		public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1697]);
		}

		// Token: 0x06001410 RID: 5136 RVA: 0x0003B8E4 File Offset: 0x00039AE4
		public static void ProvokingVertex(ProvokingVertexMode mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[1702]);
		}

		// Token: 0x06001411 RID: 5137 RVA: 0x0003B8F8 File Offset: 0x00039AF8
		public static void PushAttrib(AttribMask mask)
		{
			calli(System.Void(System.Int32), mask, GL.EntryPoints[1704]);
		}

		// Token: 0x06001412 RID: 5138 RVA: 0x0003B90C File Offset: 0x00039B0C
		public static void PushClientAttrib(ClientAttribMask mask)
		{
			calli(System.Void(System.Int32), mask, GL.EntryPoints[1705]);
		}

		// Token: 0x06001413 RID: 5139 RVA: 0x0003B920 File Offset: 0x00039B20
		[CLSCompliant(false)]
		public static void PushDebugGroup(DebugSourceExternal source, int id, int length, string message)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(message);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), source, id, length, intPtr, GL.EntryPoints[1707]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06001414 RID: 5140 RVA: 0x0003B950 File Offset: 0x00039B50
		[CLSCompliant(false)]
		public static void PushDebugGroup(DebugSourceExternal source, uint id, int length, string message)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(message);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), source, id, length, intPtr, GL.EntryPoints[1707]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06001415 RID: 5141 RVA: 0x0003B980 File Offset: 0x00039B80
		public static void PushMatrix()
		{
			calli(System.Void(), GL.EntryPoints[1710]);
		}

		// Token: 0x06001416 RID: 5142 RVA: 0x0003B994 File Offset: 0x00039B94
		[CLSCompliant(false)]
		public static void PushName(int name)
		{
			calli(System.Void(System.UInt32), name, GL.EntryPoints[1711]);
		}

		// Token: 0x06001417 RID: 5143 RVA: 0x0003B9A8 File Offset: 0x00039BA8
		[CLSCompliant(false)]
		public static void PushName(uint name)
		{
			calli(System.Void(System.UInt32), name, GL.EntryPoints[1711]);
		}

		// Token: 0x06001418 RID: 5144 RVA: 0x0003B9BC File Offset: 0x00039BBC
		[CLSCompliant(false)]
		public static void QueryCounter(int id, QueryCounterTarget target)
		{
			calli(System.Void(System.UInt32,System.Int32), id, target, GL.EntryPoints[1712]);
		}

		// Token: 0x06001419 RID: 5145 RVA: 0x0003B9D0 File Offset: 0x00039BD0
		[CLSCompliant(false)]
		public static void QueryCounter(uint id, QueryCounterTarget target)
		{
			calli(System.Void(System.UInt32,System.Int32), id, target, GL.EntryPoints[1712]);
		}

		// Token: 0x0600141A RID: 5146 RVA: 0x0003B9E4 File Offset: 0x00039BE4
		public static void RasterPos2(double x, double y)
		{
			calli(System.Void(System.Double,System.Double), x, y, GL.EntryPoints[1715]);
		}

		// Token: 0x0600141B RID: 5147 RVA: 0x0003B9F8 File Offset: 0x00039BF8
		[CLSCompliant(false)]
		public unsafe static void RasterPos2(double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1716]);
			}
		}

		// Token: 0x0600141C RID: 5148 RVA: 0x0003BA2C File Offset: 0x00039C2C
		[CLSCompliant(false)]
		public unsafe static void RasterPos2(ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1716]);
			}
		}

		// Token: 0x0600141D RID: 5149 RVA: 0x0003BA50 File Offset: 0x00039C50
		[CLSCompliant(false)]
		public unsafe static void RasterPos2(double* v)
		{
			calli(System.Void(System.Double*), v, GL.EntryPoints[1716]);
		}

		// Token: 0x0600141E RID: 5150 RVA: 0x0003BA64 File Offset: 0x00039C64
		public static void RasterPos2(float x, float y)
		{
			calli(System.Void(System.Single,System.Single), x, y, GL.EntryPoints[1717]);
		}

		// Token: 0x0600141F RID: 5151 RVA: 0x0003BA78 File Offset: 0x00039C78
		[CLSCompliant(false)]
		public unsafe static void RasterPos2(float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1718]);
			}
		}

		// Token: 0x06001420 RID: 5152 RVA: 0x0003BAAC File Offset: 0x00039CAC
		[CLSCompliant(false)]
		public unsafe static void RasterPos2(ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1718]);
			}
		}

		// Token: 0x06001421 RID: 5153 RVA: 0x0003BAD0 File Offset: 0x00039CD0
		[CLSCompliant(false)]
		public unsafe static void RasterPos2(float* v)
		{
			calli(System.Void(System.Single*), v, GL.EntryPoints[1718]);
		}

		// Token: 0x06001422 RID: 5154 RVA: 0x0003BAE4 File Offset: 0x00039CE4
		public static void RasterPos2(int x, int y)
		{
			calli(System.Void(System.Int32,System.Int32), x, y, GL.EntryPoints[1719]);
		}

		// Token: 0x06001423 RID: 5155 RVA: 0x0003BAF8 File Offset: 0x00039CF8
		[CLSCompliant(false)]
		public unsafe static void RasterPos2(int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1720]);
			}
		}

		// Token: 0x06001424 RID: 5156 RVA: 0x0003BB2C File Offset: 0x00039D2C
		[CLSCompliant(false)]
		public unsafe static void RasterPos2(ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1720]);
			}
		}

		// Token: 0x06001425 RID: 5157 RVA: 0x0003BB50 File Offset: 0x00039D50
		[CLSCompliant(false)]
		public unsafe static void RasterPos2(int* v)
		{
			calli(System.Void(System.Int32*), v, GL.EntryPoints[1720]);
		}

		// Token: 0x06001426 RID: 5158 RVA: 0x0003BB64 File Offset: 0x00039D64
		public static void RasterPos2(short x, short y)
		{
			calli(System.Void(System.Int16,System.Int16), x, y, GL.EntryPoints[1721]);
		}

		// Token: 0x06001427 RID: 5159 RVA: 0x0003BB78 File Offset: 0x00039D78
		[CLSCompliant(false)]
		public unsafe static void RasterPos2(short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1722]);
			}
		}

		// Token: 0x06001428 RID: 5160 RVA: 0x0003BBAC File Offset: 0x00039DAC
		[CLSCompliant(false)]
		public unsafe static void RasterPos2(ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1722]);
			}
		}

		// Token: 0x06001429 RID: 5161 RVA: 0x0003BBD0 File Offset: 0x00039DD0
		[CLSCompliant(false)]
		public unsafe static void RasterPos2(short* v)
		{
			calli(System.Void(System.Int16*), v, GL.EntryPoints[1722]);
		}

		// Token: 0x0600142A RID: 5162 RVA: 0x0003BBE4 File Offset: 0x00039DE4
		public static void RasterPos3(double x, double y, double z)
		{
			calli(System.Void(System.Double,System.Double,System.Double), x, y, z, GL.EntryPoints[1725]);
		}

		// Token: 0x0600142B RID: 5163 RVA: 0x0003BBFC File Offset: 0x00039DFC
		[CLSCompliant(false)]
		public unsafe static void RasterPos3(double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1726]);
			}
		}

		// Token: 0x0600142C RID: 5164 RVA: 0x0003BC30 File Offset: 0x00039E30
		[CLSCompliant(false)]
		public unsafe static void RasterPos3(ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1726]);
			}
		}

		// Token: 0x0600142D RID: 5165 RVA: 0x0003BC54 File Offset: 0x00039E54
		[CLSCompliant(false)]
		public unsafe static void RasterPos3(double* v)
		{
			calli(System.Void(System.Double*), v, GL.EntryPoints[1726]);
		}

		// Token: 0x0600142E RID: 5166 RVA: 0x0003BC68 File Offset: 0x00039E68
		public static void RasterPos3(float x, float y, float z)
		{
			calli(System.Void(System.Single,System.Single,System.Single), x, y, z, GL.EntryPoints[1727]);
		}

		// Token: 0x0600142F RID: 5167 RVA: 0x0003BC80 File Offset: 0x00039E80
		[CLSCompliant(false)]
		public unsafe static void RasterPos3(float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1728]);
			}
		}

		// Token: 0x06001430 RID: 5168 RVA: 0x0003BCB4 File Offset: 0x00039EB4
		[CLSCompliant(false)]
		public unsafe static void RasterPos3(ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1728]);
			}
		}

		// Token: 0x06001431 RID: 5169 RVA: 0x0003BCD8 File Offset: 0x00039ED8
		[CLSCompliant(false)]
		public unsafe static void RasterPos3(float* v)
		{
			calli(System.Void(System.Single*), v, GL.EntryPoints[1728]);
		}

		// Token: 0x06001432 RID: 5170 RVA: 0x0003BCEC File Offset: 0x00039EEC
		public static void RasterPos3(int x, int y, int z)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), x, y, z, GL.EntryPoints[1729]);
		}

		// Token: 0x06001433 RID: 5171 RVA: 0x0003BD04 File Offset: 0x00039F04
		[CLSCompliant(false)]
		public unsafe static void RasterPos3(int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1730]);
			}
		}

		// Token: 0x06001434 RID: 5172 RVA: 0x0003BD38 File Offset: 0x00039F38
		[CLSCompliant(false)]
		public unsafe static void RasterPos3(ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1730]);
			}
		}

		// Token: 0x06001435 RID: 5173 RVA: 0x0003BD5C File Offset: 0x00039F5C
		[CLSCompliant(false)]
		public unsafe static void RasterPos3(int* v)
		{
			calli(System.Void(System.Int32*), v, GL.EntryPoints[1730]);
		}

		// Token: 0x06001436 RID: 5174 RVA: 0x0003BD70 File Offset: 0x00039F70
		public static void RasterPos3(short x, short y, short z)
		{
			calli(System.Void(System.Int16,System.Int16,System.Int16), x, y, z, GL.EntryPoints[1731]);
		}

		// Token: 0x06001437 RID: 5175 RVA: 0x0003BD88 File Offset: 0x00039F88
		[CLSCompliant(false)]
		public unsafe static void RasterPos3(short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1732]);
			}
		}

		// Token: 0x06001438 RID: 5176 RVA: 0x0003BDBC File Offset: 0x00039FBC
		[CLSCompliant(false)]
		public unsafe static void RasterPos3(ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1732]);
			}
		}

		// Token: 0x06001439 RID: 5177 RVA: 0x0003BDE0 File Offset: 0x00039FE0
		[CLSCompliant(false)]
		public unsafe static void RasterPos3(short* v)
		{
			calli(System.Void(System.Int16*), v, GL.EntryPoints[1732]);
		}

		// Token: 0x0600143A RID: 5178 RVA: 0x0003BDF4 File Offset: 0x00039FF4
		public static void RasterPos4(double x, double y, double z, double w)
		{
			calli(System.Void(System.Double,System.Double,System.Double,System.Double), x, y, z, w, GL.EntryPoints[1735]);
		}

		// Token: 0x0600143B RID: 5179 RVA: 0x0003BE0C File Offset: 0x0003A00C
		[CLSCompliant(false)]
		public unsafe static void RasterPos4(double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1736]);
			}
		}

		// Token: 0x0600143C RID: 5180 RVA: 0x0003BE40 File Offset: 0x0003A040
		[CLSCompliant(false)]
		public unsafe static void RasterPos4(ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1736]);
			}
		}

		// Token: 0x0600143D RID: 5181 RVA: 0x0003BE64 File Offset: 0x0003A064
		[CLSCompliant(false)]
		public unsafe static void RasterPos4(double* v)
		{
			calli(System.Void(System.Double*), v, GL.EntryPoints[1736]);
		}

		// Token: 0x0600143E RID: 5182 RVA: 0x0003BE78 File Offset: 0x0003A078
		public static void RasterPos4(float x, float y, float z, float w)
		{
			calli(System.Void(System.Single,System.Single,System.Single,System.Single), x, y, z, w, GL.EntryPoints[1737]);
		}

		// Token: 0x0600143F RID: 5183 RVA: 0x0003BE90 File Offset: 0x0003A090
		[CLSCompliant(false)]
		public unsafe static void RasterPos4(float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1738]);
			}
		}

		// Token: 0x06001440 RID: 5184 RVA: 0x0003BEC4 File Offset: 0x0003A0C4
		[CLSCompliant(false)]
		public unsafe static void RasterPos4(ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1738]);
			}
		}

		// Token: 0x06001441 RID: 5185 RVA: 0x0003BEE8 File Offset: 0x0003A0E8
		[CLSCompliant(false)]
		public unsafe static void RasterPos4(float* v)
		{
			calli(System.Void(System.Single*), v, GL.EntryPoints[1738]);
		}

		// Token: 0x06001442 RID: 5186 RVA: 0x0003BEFC File Offset: 0x0003A0FC
		public static void RasterPos4(int x, int y, int z, int w)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), x, y, z, w, GL.EntryPoints[1739]);
		}

		// Token: 0x06001443 RID: 5187 RVA: 0x0003BF14 File Offset: 0x0003A114
		[CLSCompliant(false)]
		public unsafe static void RasterPos4(int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1740]);
			}
		}

		// Token: 0x06001444 RID: 5188 RVA: 0x0003BF48 File Offset: 0x0003A148
		[CLSCompliant(false)]
		public unsafe static void RasterPos4(ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1740]);
			}
		}

		// Token: 0x06001445 RID: 5189 RVA: 0x0003BF6C File Offset: 0x0003A16C
		[CLSCompliant(false)]
		public unsafe static void RasterPos4(int* v)
		{
			calli(System.Void(System.Int32*), v, GL.EntryPoints[1740]);
		}

		// Token: 0x06001446 RID: 5190 RVA: 0x0003BF80 File Offset: 0x0003A180
		public static void RasterPos4(short x, short y, short z, short w)
		{
			calli(System.Void(System.Int16,System.Int16,System.Int16,System.Int16), x, y, z, w, GL.EntryPoints[1741]);
		}

		// Token: 0x06001447 RID: 5191 RVA: 0x0003BF98 File Offset: 0x0003A198
		[CLSCompliant(false)]
		public unsafe static void RasterPos4(short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1742]);
			}
		}

		// Token: 0x06001448 RID: 5192 RVA: 0x0003BFCC File Offset: 0x0003A1CC
		[CLSCompliant(false)]
		public unsafe static void RasterPos4(ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1742]);
			}
		}

		// Token: 0x06001449 RID: 5193 RVA: 0x0003BFF0 File Offset: 0x0003A1F0
		[CLSCompliant(false)]
		public unsafe static void RasterPos4(short* v)
		{
			calli(System.Void(System.Int16*), v, GL.EntryPoints[1742]);
		}

		// Token: 0x0600144A RID: 5194 RVA: 0x0003C004 File Offset: 0x0003A204
		public static void ReadBuffer(ReadBufferMode mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[1745]);
		}

		// Token: 0x0600144B RID: 5195 RVA: 0x0003C018 File Offset: 0x0003A218
		public static void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, [Out] IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, pixels, GL.EntryPoints[1748]);
		}

		// Token: 0x0600144C RID: 5196 RVA: 0x0003C040 File Offset: 0x0003A240
		[CLSCompliant(false)]
		public unsafe static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, ptr, GL.EntryPoints[1748]);
			}
		}

		// Token: 0x0600144D RID: 5197 RVA: 0x0003C080 File Offset: 0x0003A280
		[CLSCompliant(false)]
		public unsafe static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, ptr, GL.EntryPoints[1748]);
			}
		}

		// Token: 0x0600144E RID: 5198 RVA: 0x0003C0C4 File Offset: 0x0003A2C4
		[CLSCompliant(false)]
		public unsafe static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,,] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, ptr, GL.EntryPoints[1748]);
			}
		}

		// Token: 0x0600144F RID: 5199 RVA: 0x0003C108 File Offset: 0x0003A308
		public unsafe static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T6 pixels) where T6 : struct
		{
			fixed (T6* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, ptr, GL.EntryPoints[1748]);
			}
		}

		// Token: 0x06001450 RID: 5200 RVA: 0x0003C134 File Offset: 0x0003A334
		public static void Rect(double x1, double y1, double x2, double y2)
		{
			calli(System.Void(System.Double,System.Double,System.Double,System.Double), x1, y1, x2, y2, GL.EntryPoints[1749]);
		}

		// Token: 0x06001451 RID: 5201 RVA: 0x0003C14C File Offset: 0x0003A34C
		[CLSCompliant(false)]
		public unsafe static void Rect(double[] v1, double[] v2)
		{
			fixed (double* ptr = ref (v1 != null && v1.Length != 0) ? ref v1[0] : ref *null)
			{
				double* ptr2 = ptr;
				fixed (double* ptr3 = ref (v2 != null && v2.Length != 0) ? ref v2[0] : ref *null)
				{
					calli(System.Void(System.Double*,System.Double*), ptr2, ptr3, GL.EntryPoints[1750]);
				}
			}
		}

		// Token: 0x06001452 RID: 5202 RVA: 0x0003C198 File Offset: 0x0003A398
		[CLSCompliant(false)]
		public unsafe static void Rect(ref double v1, ref double v2)
		{
			fixed (double* ptr = &v1)
			{
				double* ptr2 = ptr;
				fixed (double* ptr3 = &v2)
				{
					calli(System.Void(System.Double*,System.Double*), ptr2, ptr3, GL.EntryPoints[1750]);
				}
			}
		}

		// Token: 0x06001453 RID: 5203 RVA: 0x0003C1C0 File Offset: 0x0003A3C0
		[CLSCompliant(false)]
		public unsafe static void Rect(double* v1, double* v2)
		{
			calli(System.Void(System.Double*,System.Double*), v1, v2, GL.EntryPoints[1750]);
		}

		// Token: 0x06001454 RID: 5204 RVA: 0x0003C1D4 File Offset: 0x0003A3D4
		public static void Rect(float x1, float y1, float x2, float y2)
		{
			calli(System.Void(System.Single,System.Single,System.Single,System.Single), x1, y1, x2, y2, GL.EntryPoints[1751]);
		}

		// Token: 0x06001455 RID: 5205 RVA: 0x0003C1EC File Offset: 0x0003A3EC
		[CLSCompliant(false)]
		public unsafe static void Rect(float[] v1, float[] v2)
		{
			fixed (float* ptr = ref (v1 != null && v1.Length != 0) ? ref v1[0] : ref *null)
			{
				float* ptr2 = ptr;
				fixed (float* ptr3 = ref (v2 != null && v2.Length != 0) ? ref v2[0] : ref *null)
				{
					calli(System.Void(System.Single*,System.Single*), ptr2, ptr3, GL.EntryPoints[1752]);
				}
			}
		}

		// Token: 0x06001456 RID: 5206 RVA: 0x0003C238 File Offset: 0x0003A438
		[CLSCompliant(false)]
		public unsafe static void Rect(ref float v1, ref float v2)
		{
			fixed (float* ptr = &v1)
			{
				float* ptr2 = ptr;
				fixed (float* ptr3 = &v2)
				{
					calli(System.Void(System.Single*,System.Single*), ptr2, ptr3, GL.EntryPoints[1752]);
				}
			}
		}

		// Token: 0x06001457 RID: 5207 RVA: 0x0003C260 File Offset: 0x0003A460
		[CLSCompliant(false)]
		public unsafe static void Rect(float* v1, float* v2)
		{
			calli(System.Void(System.Single*,System.Single*), v1, v2, GL.EntryPoints[1752]);
		}

		// Token: 0x06001458 RID: 5208 RVA: 0x0003C274 File Offset: 0x0003A474
		public static void Rect(int x1, int y1, int x2, int y2)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), x1, y1, x2, y2, GL.EntryPoints[1753]);
		}

		// Token: 0x06001459 RID: 5209 RVA: 0x0003C28C File Offset: 0x0003A48C
		[CLSCompliant(false)]
		public unsafe static void Rect(int[] v1, int[] v2)
		{
			fixed (int* ptr = ref (v1 != null && v1.Length != 0) ? ref v1[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (v2 != null && v2.Length != 0) ? ref v2[0] : ref *null)
				{
					calli(System.Void(System.Int32*,System.Int32*), ptr2, ptr3, GL.EntryPoints[1754]);
				}
			}
		}

		// Token: 0x0600145A RID: 5210 RVA: 0x0003C2D8 File Offset: 0x0003A4D8
		[CLSCompliant(false)]
		public unsafe static void Rect(ref int v1, ref int v2)
		{
			fixed (int* ptr = &v1)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &v2)
				{
					calli(System.Void(System.Int32*,System.Int32*), ptr2, ptr3, GL.EntryPoints[1754]);
				}
			}
		}

		// Token: 0x0600145B RID: 5211 RVA: 0x0003C300 File Offset: 0x0003A500
		[CLSCompliant(false)]
		public unsafe static void Rect(int* v1, int* v2)
		{
			calli(System.Void(System.Int32*,System.Int32*), v1, v2, GL.EntryPoints[1754]);
		}

		// Token: 0x0600145C RID: 5212 RVA: 0x0003C314 File Offset: 0x0003A514
		public static void Rects(short x1, short y1, short x2, short y2)
		{
			calli(System.Void(System.Int16,System.Int16,System.Int16,System.Int16), x1, y1, x2, y2, GL.EntryPoints[1755]);
		}

		// Token: 0x0600145D RID: 5213 RVA: 0x0003C32C File Offset: 0x0003A52C
		[CLSCompliant(false)]
		public unsafe static void Rect(short[] v1, short[] v2)
		{
			fixed (short* ptr = ref (v1 != null && v1.Length != 0) ? ref v1[0] : ref *null)
			{
				short* ptr2 = ptr;
				fixed (short* ptr3 = ref (v2 != null && v2.Length != 0) ? ref v2[0] : ref *null)
				{
					calli(System.Void(System.Int16*,System.Int16*), ptr2, ptr3, GL.EntryPoints[1756]);
				}
			}
		}

		// Token: 0x0600145E RID: 5214 RVA: 0x0003C378 File Offset: 0x0003A578
		[CLSCompliant(false)]
		public unsafe static void Rect(ref short v1, ref short v2)
		{
			fixed (short* ptr = &v1)
			{
				short* ptr2 = ptr;
				fixed (short* ptr3 = &v2)
				{
					calli(System.Void(System.Int16*,System.Int16*), ptr2, ptr3, GL.EntryPoints[1756]);
				}
			}
		}

		// Token: 0x0600145F RID: 5215 RVA: 0x0003C3A0 File Offset: 0x0003A5A0
		[CLSCompliant(false)]
		public unsafe static void Rect(short* v1, short* v2)
		{
			calli(System.Void(System.Int16*,System.Int16*), v1, v2, GL.EntryPoints[1756]);
		}

		// Token: 0x06001460 RID: 5216 RVA: 0x0003C3B4 File Offset: 0x0003A5B4
		public static void ReleaseShaderCompiler()
		{
			calli(System.Void(), GL.EntryPoints[1760]);
		}

		// Token: 0x06001461 RID: 5217 RVA: 0x0003C3C8 File Offset: 0x0003A5C8
		public static void RenderbufferStorage(RenderbufferTarget target, RenderbufferStorage internalformat, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, width, height, GL.EntryPoints[1761]);
		}

		// Token: 0x06001462 RID: 5218 RVA: 0x0003C3E0 File Offset: 0x0003A5E0
		public static void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, RenderbufferStorage internalformat, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, samples, internalformat, width, height, GL.EntryPoints[1763]);
		}

		// Token: 0x06001463 RID: 5219 RVA: 0x0003C3F8 File Offset: 0x0003A5F8
		public static int RenderMode(RenderingMode mode)
		{
			return calli(System.Int32(System.Int32), mode, GL.EntryPoints[1766]);
		}

		// Token: 0x06001464 RID: 5220 RVA: 0x0003C40C File Offset: 0x0003A60C
		public static void ResetHistogram(HistogramTarget target)
		{
			calli(System.Void(System.Int32), target, GL.EntryPoints[1791]);
		}

		// Token: 0x06001465 RID: 5221 RVA: 0x0003C420 File Offset: 0x0003A620
		public static void ResetMinmax(MinmaxTarget target)
		{
			calli(System.Void(System.Int32), target, GL.EntryPoints[1793]);
		}

		// Token: 0x06001466 RID: 5222 RVA: 0x0003C434 File Offset: 0x0003A634
		public static void ResumeTransformFeedback()
		{
			calli(System.Void(), GL.EntryPoints[1796]);
		}

		// Token: 0x06001467 RID: 5223 RVA: 0x0003C448 File Offset: 0x0003A648
		public static void Rotate(double angle, double x, double y, double z)
		{
			calli(System.Void(System.Double,System.Double,System.Double,System.Double), angle, x, y, z, GL.EntryPoints[1798]);
		}

		// Token: 0x06001468 RID: 5224 RVA: 0x0003C460 File Offset: 0x0003A660
		public static void Rotate(float angle, float x, float y, float z)
		{
			calli(System.Void(System.Single,System.Single,System.Single,System.Single), angle, x, y, z, GL.EntryPoints[1799]);
		}

		// Token: 0x06001469 RID: 5225 RVA: 0x0003C478 File Offset: 0x0003A678
		public static void SampleCoverage(float value, bool invert)
		{
			calli(System.Void(System.Single,System.Boolean), value, invert, GL.EntryPoints[1801]);
		}

		// Token: 0x0600146A RID: 5226 RVA: 0x0003C48C File Offset: 0x0003A68C
		[CLSCompliant(false)]
		public static void SampleMask(int maskNumber, int mask)
		{
			calli(System.Void(System.UInt32,System.UInt32), maskNumber, mask, GL.EntryPoints[1807]);
		}

		// Token: 0x0600146B RID: 5227 RVA: 0x0003C4A0 File Offset: 0x0003A6A0
		[CLSCompliant(false)]
		public static void SampleMask(uint maskNumber, uint mask)
		{
			calli(System.Void(System.UInt32,System.UInt32), maskNumber, mask, GL.EntryPoints[1807]);
		}

		// Token: 0x0600146C RID: 5228 RVA: 0x0003C4B4 File Offset: 0x0003A6B4
		[Obsolete("Use SamplerParameterName overload instead")]
		[CLSCompliant(false)]
		public static void SamplerParameter(int sampler, SamplerParameter pname, float param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single), sampler, pname, param, GL.EntryPoints[1812]);
		}

		// Token: 0x0600146D RID: 5229 RVA: 0x0003C4CC File Offset: 0x0003A6CC
		[CLSCompliant(false)]
		public static void SamplerParameter(int sampler, SamplerParameterName pname, float param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single), sampler, pname, param, GL.EntryPoints[1812]);
		}

		// Token: 0x0600146E RID: 5230 RVA: 0x0003C4E4 File Offset: 0x0003A6E4
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public static void SamplerParameter(uint sampler, SamplerParameter pname, float param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single), sampler, pname, param, GL.EntryPoints[1812]);
		}

		// Token: 0x0600146F RID: 5231 RVA: 0x0003C4FC File Offset: 0x0003A6FC
		[CLSCompliant(false)]
		public static void SamplerParameter(uint sampler, SamplerParameterName pname, float param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single), sampler, pname, param, GL.EntryPoints[1812]);
		}

		// Token: 0x06001470 RID: 5232 RVA: 0x0003C514 File Offset: 0x0003A714
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public unsafe static void SamplerParameter(int sampler, SamplerParameter pname, float[] param)
		{
			fixed (float* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[1813]);
			}
		}

		// Token: 0x06001471 RID: 5233 RVA: 0x0003C54C File Offset: 0x0003A74C
		[Obsolete("Use SamplerParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(int sampler, SamplerParameter pname, float* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, param, GL.EntryPoints[1813]);
		}

		// Token: 0x06001472 RID: 5234 RVA: 0x0003C564 File Offset: 0x0003A764
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(int sampler, SamplerParameterName pname, float[] param)
		{
			fixed (float* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[1813]);
			}
		}

		// Token: 0x06001473 RID: 5235 RVA: 0x0003C59C File Offset: 0x0003A79C
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(int sampler, SamplerParameterName pname, float* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, param, GL.EntryPoints[1813]);
		}

		// Token: 0x06001474 RID: 5236 RVA: 0x0003C5B4 File Offset: 0x0003A7B4
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public unsafe static void SamplerParameter(uint sampler, SamplerParameter pname, float[] param)
		{
			fixed (float* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[1813]);
			}
		}

		// Token: 0x06001475 RID: 5237 RVA: 0x0003C5EC File Offset: 0x0003A7EC
		[Obsolete("Use SamplerParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, SamplerParameter pname, float* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, param, GL.EntryPoints[1813]);
		}

		// Token: 0x06001476 RID: 5238 RVA: 0x0003C604 File Offset: 0x0003A804
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, SamplerParameterName pname, float[] param)
		{
			fixed (float* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[1813]);
			}
		}

		// Token: 0x06001477 RID: 5239 RVA: 0x0003C63C File Offset: 0x0003A83C
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, SamplerParameterName pname, float* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, param, GL.EntryPoints[1813]);
		}

		// Token: 0x06001478 RID: 5240 RVA: 0x0003C654 File Offset: 0x0003A854
		[Obsolete("Use SamplerParameterName overload instead")]
		[CLSCompliant(false)]
		public static void SamplerParameter(int sampler, SamplerParameter pname, int param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), sampler, pname, param, GL.EntryPoints[1814]);
		}

		// Token: 0x06001479 RID: 5241 RVA: 0x0003C66C File Offset: 0x0003A86C
		[CLSCompliant(false)]
		public static void SamplerParameter(int sampler, SamplerParameterName pname, int param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), sampler, pname, param, GL.EntryPoints[1814]);
		}

		// Token: 0x0600147A RID: 5242 RVA: 0x0003C684 File Offset: 0x0003A884
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public static void SamplerParameter(uint sampler, SamplerParameter pname, int param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), sampler, pname, param, GL.EntryPoints[1814]);
		}

		// Token: 0x0600147B RID: 5243 RVA: 0x0003C69C File Offset: 0x0003A89C
		[CLSCompliant(false)]
		public static void SamplerParameter(uint sampler, SamplerParameterName pname, int param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), sampler, pname, param, GL.EntryPoints[1814]);
		}

		// Token: 0x0600147C RID: 5244 RVA: 0x0003C6B4 File Offset: 0x0003A8B4
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public unsafe static void SamplerParameterI(int sampler, ArbSamplerObjects pname, int[] param)
		{
			fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[1815]);
			}
		}

		// Token: 0x0600147D RID: 5245 RVA: 0x0003C6EC File Offset: 0x0003A8EC
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public unsafe static void SamplerParameterI(int sampler, ArbSamplerObjects pname, ref int param)
		{
			fixed (int* ptr = &param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[1815]);
			}
		}

		// Token: 0x0600147E RID: 5246 RVA: 0x0003C710 File Offset: 0x0003A910
		[Obsolete("Use SamplerParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(int sampler, ArbSamplerObjects pname, int* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[1815]);
		}

		// Token: 0x0600147F RID: 5247 RVA: 0x0003C728 File Offset: 0x0003A928
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(int sampler, SamplerParameterName pname, int[] param)
		{
			fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[1815]);
			}
		}

		// Token: 0x06001480 RID: 5248 RVA: 0x0003C760 File Offset: 0x0003A960
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(int sampler, SamplerParameterName pname, ref int param)
		{
			fixed (int* ptr = &param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[1815]);
			}
		}

		// Token: 0x06001481 RID: 5249 RVA: 0x0003C784 File Offset: 0x0003A984
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(int sampler, SamplerParameterName pname, int* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[1815]);
		}

		// Token: 0x06001482 RID: 5250 RVA: 0x0003C79C File Offset: 0x0003A99C
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public unsafe static void SamplerParameterI(uint sampler, ArbSamplerObjects pname, int[] param)
		{
			fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[1815]);
			}
		}

		// Token: 0x06001483 RID: 5251 RVA: 0x0003C7D4 File Offset: 0x0003A9D4
		[Obsolete("Use SamplerParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(uint sampler, ArbSamplerObjects pname, ref int param)
		{
			fixed (int* ptr = &param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[1815]);
			}
		}

		// Token: 0x06001484 RID: 5252 RVA: 0x0003C7F8 File Offset: 0x0003A9F8
		[Obsolete("Use SamplerParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(uint sampler, ArbSamplerObjects pname, int* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[1815]);
		}

		// Token: 0x06001485 RID: 5253 RVA: 0x0003C810 File Offset: 0x0003AA10
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(uint sampler, SamplerParameterName pname, int[] param)
		{
			fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[1815]);
			}
		}

		// Token: 0x06001486 RID: 5254 RVA: 0x0003C848 File Offset: 0x0003AA48
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(uint sampler, SamplerParameterName pname, ref int param)
		{
			fixed (int* ptr = &param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[1815]);
			}
		}

		// Token: 0x06001487 RID: 5255 RVA: 0x0003C86C File Offset: 0x0003AA6C
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(uint sampler, SamplerParameterName pname, int* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[1815]);
		}

		// Token: 0x06001488 RID: 5256 RVA: 0x0003C884 File Offset: 0x0003AA84
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public unsafe static void SamplerParameterI(uint sampler, ArbSamplerObjects pname, uint[] param)
		{
			fixed (uint* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, ptr, GL.EntryPoints[1816]);
			}
		}

		// Token: 0x06001489 RID: 5257 RVA: 0x0003C8BC File Offset: 0x0003AABC
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public unsafe static void SamplerParameterI(uint sampler, ArbSamplerObjects pname, ref uint param)
		{
			fixed (uint* ptr = &param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, ptr, GL.EntryPoints[1816]);
			}
		}

		// Token: 0x0600148A RID: 5258 RVA: 0x0003C8E0 File Offset: 0x0003AAE0
		[Obsolete("Use SamplerParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(uint sampler, ArbSamplerObjects pname, uint* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, param, GL.EntryPoints[1816]);
		}

		// Token: 0x0600148B RID: 5259 RVA: 0x0003C8F8 File Offset: 0x0003AAF8
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(uint sampler, SamplerParameterName pname, uint[] param)
		{
			fixed (uint* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, ptr, GL.EntryPoints[1816]);
			}
		}

		// Token: 0x0600148C RID: 5260 RVA: 0x0003C930 File Offset: 0x0003AB30
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(uint sampler, SamplerParameterName pname, ref uint param)
		{
			fixed (uint* ptr = &param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, ptr, GL.EntryPoints[1816]);
			}
		}

		// Token: 0x0600148D RID: 5261 RVA: 0x0003C954 File Offset: 0x0003AB54
		[CLSCompliant(false)]
		public unsafe static void SamplerParameterI(uint sampler, SamplerParameterName pname, uint* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, param, GL.EntryPoints[1816]);
		}

		// Token: 0x0600148E RID: 5262 RVA: 0x0003C96C File Offset: 0x0003AB6C
		[Obsolete("Use SamplerParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(int sampler, SamplerParameter pname, int[] param)
		{
			fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[1817]);
			}
		}

		// Token: 0x0600148F RID: 5263 RVA: 0x0003C9A4 File Offset: 0x0003ABA4
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public unsafe static void SamplerParameter(int sampler, SamplerParameter pname, int* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[1817]);
		}

		// Token: 0x06001490 RID: 5264 RVA: 0x0003C9BC File Offset: 0x0003ABBC
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(int sampler, SamplerParameterName pname, int[] param)
		{
			fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[1817]);
			}
		}

		// Token: 0x06001491 RID: 5265 RVA: 0x0003C9F4 File Offset: 0x0003ABF4
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(int sampler, SamplerParameterName pname, int* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[1817]);
		}

		// Token: 0x06001492 RID: 5266 RVA: 0x0003CA0C File Offset: 0x0003AC0C
		[CLSCompliant(false)]
		[Obsolete("Use SamplerParameterName overload instead")]
		public unsafe static void SamplerParameter(uint sampler, SamplerParameter pname, int[] param)
		{
			fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[1817]);
			}
		}

		// Token: 0x06001493 RID: 5267 RVA: 0x0003CA44 File Offset: 0x0003AC44
		[Obsolete("Use SamplerParameterName overload instead")]
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, SamplerParameter pname, int* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[1817]);
		}

		// Token: 0x06001494 RID: 5268 RVA: 0x0003CA5C File Offset: 0x0003AC5C
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, SamplerParameterName pname, int[] param)
		{
			fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[1817]);
			}
		}

		// Token: 0x06001495 RID: 5269 RVA: 0x0003CA94 File Offset: 0x0003AC94
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, SamplerParameterName pname, int* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[1817]);
		}

		// Token: 0x06001496 RID: 5270 RVA: 0x0003CAAC File Offset: 0x0003ACAC
		public static void Scale(double x, double y, double z)
		{
			calli(System.Void(System.Double,System.Double,System.Double), x, y, z, GL.EntryPoints[1818]);
		}

		// Token: 0x06001497 RID: 5271 RVA: 0x0003CAC4 File Offset: 0x0003ACC4
		public static void Scale(float x, float y, float z)
		{
			calli(System.Void(System.Single,System.Single,System.Single), x, y, z, GL.EntryPoints[1819]);
		}

		// Token: 0x06001498 RID: 5272 RVA: 0x0003CADC File Offset: 0x0003ACDC
		public static void Scissor(int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), x, y, width, height, GL.EntryPoints[1821]);
		}

		// Token: 0x06001499 RID: 5273 RVA: 0x0003CAF4 File Offset: 0x0003ACF4
		[CLSCompliant(false)]
		public unsafe static void ScissorArray(int first, int count, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), first, count, ptr, GL.EntryPoints[1822]);
			}
		}

		// Token: 0x0600149A RID: 5274 RVA: 0x0003CB2C File Offset: 0x0003AD2C
		[CLSCompliant(false)]
		public unsafe static void ScissorArray(int first, int count, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), first, count, ptr, GL.EntryPoints[1822]);
			}
		}

		// Token: 0x0600149B RID: 5275 RVA: 0x0003CB50 File Offset: 0x0003AD50
		[CLSCompliant(false)]
		public unsafe static void ScissorArray(int first, int count, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), first, count, v, GL.EntryPoints[1822]);
		}

		// Token: 0x0600149C RID: 5276 RVA: 0x0003CB68 File Offset: 0x0003AD68
		[CLSCompliant(false)]
		public unsafe static void ScissorArray(uint first, int count, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), first, count, ptr, GL.EntryPoints[1822]);
			}
		}

		// Token: 0x0600149D RID: 5277 RVA: 0x0003CBA0 File Offset: 0x0003ADA0
		[CLSCompliant(false)]
		public unsafe static void ScissorArray(uint first, int count, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), first, count, ptr, GL.EntryPoints[1822]);
			}
		}

		// Token: 0x0600149E RID: 5278 RVA: 0x0003CBC4 File Offset: 0x0003ADC4
		[CLSCompliant(false)]
		public unsafe static void ScissorArray(uint first, int count, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), first, count, v, GL.EntryPoints[1822]);
		}

		// Token: 0x0600149F RID: 5279 RVA: 0x0003CBDC File Offset: 0x0003ADDC
		[CLSCompliant(false)]
		public static void ScissorIndexed(int index, int left, int bottom, int width, int height)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), index, left, bottom, width, height, GL.EntryPoints[1823]);
		}

		// Token: 0x060014A0 RID: 5280 RVA: 0x0003CBF4 File Offset: 0x0003ADF4
		[CLSCompliant(false)]
		public static void ScissorIndexed(uint index, int left, int bottom, int width, int height)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), index, left, bottom, width, height, GL.EntryPoints[1823]);
		}

		// Token: 0x060014A1 RID: 5281 RVA: 0x0003CC0C File Offset: 0x0003AE0C
		[CLSCompliant(false)]
		public unsafe static void ScissorIndexed(int index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[1824]);
			}
		}

		// Token: 0x060014A2 RID: 5282 RVA: 0x0003CC40 File Offset: 0x0003AE40
		[CLSCompliant(false)]
		public unsafe static void ScissorIndexed(int index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[1824]);
			}
		}

		// Token: 0x060014A3 RID: 5283 RVA: 0x0003CC64 File Offset: 0x0003AE64
		[CLSCompliant(false)]
		public unsafe static void ScissorIndexed(int index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[1824]);
		}

		// Token: 0x060014A4 RID: 5284 RVA: 0x0003CC78 File Offset: 0x0003AE78
		[CLSCompliant(false)]
		public unsafe static void ScissorIndexed(uint index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[1824]);
			}
		}

		// Token: 0x060014A5 RID: 5285 RVA: 0x0003CCAC File Offset: 0x0003AEAC
		[CLSCompliant(false)]
		public unsafe static void ScissorIndexed(uint index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[1824]);
			}
		}

		// Token: 0x060014A6 RID: 5286 RVA: 0x0003CCD0 File Offset: 0x0003AED0
		[CLSCompliant(false)]
		public unsafe static void ScissorIndexed(uint index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[1824]);
		}

		// Token: 0x060014A7 RID: 5287 RVA: 0x0003CCE4 File Offset: 0x0003AEE4
		[CLSCompliant(false)]
		public static void SecondaryColor3(sbyte red, sbyte green, sbyte blue)
		{
			calli(System.Void(System.SByte,System.SByte,System.SByte), red, green, blue, GL.EntryPoints[1825]);
		}

		// Token: 0x060014A8 RID: 5288 RVA: 0x0003CCFC File Offset: 0x0003AEFC
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(sbyte[] v)
		{
			fixed (sbyte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1827]);
			}
		}

		// Token: 0x060014A9 RID: 5289 RVA: 0x0003CD30 File Offset: 0x0003AF30
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(ref sbyte v)
		{
			fixed (sbyte* ptr = &v)
			{
				calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1827]);
			}
		}

		// Token: 0x060014AA RID: 5290 RVA: 0x0003CD54 File Offset: 0x0003AF54
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(sbyte* v)
		{
			calli(System.Void(System.SByte*), v, GL.EntryPoints[1827]);
		}

		// Token: 0x060014AB RID: 5291 RVA: 0x0003CD68 File Offset: 0x0003AF68
		public static void SecondaryColor3(double red, double green, double blue)
		{
			calli(System.Void(System.Double,System.Double,System.Double), red, green, blue, GL.EntryPoints[1829]);
		}

		// Token: 0x060014AC RID: 5292 RVA: 0x0003CD80 File Offset: 0x0003AF80
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1831]);
			}
		}

		// Token: 0x060014AD RID: 5293 RVA: 0x0003CDB4 File Offset: 0x0003AFB4
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1831]);
			}
		}

		// Token: 0x060014AE RID: 5294 RVA: 0x0003CDD8 File Offset: 0x0003AFD8
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(double* v)
		{
			calli(System.Void(System.Double*), v, GL.EntryPoints[1831]);
		}

		// Token: 0x060014AF RID: 5295 RVA: 0x0003CDEC File Offset: 0x0003AFEC
		public static void SecondaryColor3(float red, float green, float blue)
		{
			calli(System.Void(System.Single,System.Single,System.Single), red, green, blue, GL.EntryPoints[1833]);
		}

		// Token: 0x060014B0 RID: 5296 RVA: 0x0003CE04 File Offset: 0x0003B004
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1835]);
			}
		}

		// Token: 0x060014B1 RID: 5297 RVA: 0x0003CE38 File Offset: 0x0003B038
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1835]);
			}
		}

		// Token: 0x060014B2 RID: 5298 RVA: 0x0003CE5C File Offset: 0x0003B05C
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(float* v)
		{
			calli(System.Void(System.Single*), v, GL.EntryPoints[1835]);
		}

		// Token: 0x060014B3 RID: 5299 RVA: 0x0003CE70 File Offset: 0x0003B070
		public static void SecondaryColor3(int red, int green, int blue)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), red, green, blue, GL.EntryPoints[1839]);
		}

		// Token: 0x060014B4 RID: 5300 RVA: 0x0003CE88 File Offset: 0x0003B088
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1841]);
			}
		}

		// Token: 0x060014B5 RID: 5301 RVA: 0x0003CEBC File Offset: 0x0003B0BC
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1841]);
			}
		}

		// Token: 0x060014B6 RID: 5302 RVA: 0x0003CEE0 File Offset: 0x0003B0E0
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(int* v)
		{
			calli(System.Void(System.Int32*), v, GL.EntryPoints[1841]);
		}

		// Token: 0x060014B7 RID: 5303 RVA: 0x0003CEF4 File Offset: 0x0003B0F4
		public static void SecondaryColor3(short red, short green, short blue)
		{
			calli(System.Void(System.Int16,System.Int16,System.Int16), red, green, blue, GL.EntryPoints[1843]);
		}

		// Token: 0x060014B8 RID: 5304 RVA: 0x0003CF0C File Offset: 0x0003B10C
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1845]);
			}
		}

		// Token: 0x060014B9 RID: 5305 RVA: 0x0003CF40 File Offset: 0x0003B140
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1845]);
			}
		}

		// Token: 0x060014BA RID: 5306 RVA: 0x0003CF64 File Offset: 0x0003B164
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(short* v)
		{
			calli(System.Void(System.Int16*), v, GL.EntryPoints[1845]);
		}

		// Token: 0x060014BB RID: 5307 RVA: 0x0003CF78 File Offset: 0x0003B178
		public static void SecondaryColor3(byte red, byte green, byte blue)
		{
			calli(System.Void(System.Byte,System.Byte,System.Byte), red, green, blue, GL.EntryPoints[1847]);
		}

		// Token: 0x060014BC RID: 5308 RVA: 0x0003CF90 File Offset: 0x0003B190
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(byte[] v)
		{
			fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Byte*), ptr, GL.EntryPoints[1849]);
			}
		}

		// Token: 0x060014BD RID: 5309 RVA: 0x0003CFC4 File Offset: 0x0003B1C4
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(ref byte v)
		{
			fixed (byte* ptr = &v)
			{
				calli(System.Void(System.Byte*), ptr, GL.EntryPoints[1849]);
			}
		}

		// Token: 0x060014BE RID: 5310 RVA: 0x0003CFE8 File Offset: 0x0003B1E8
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(byte* v)
		{
			calli(System.Void(System.Byte*), v, GL.EntryPoints[1849]);
		}

		// Token: 0x060014BF RID: 5311 RVA: 0x0003CFFC File Offset: 0x0003B1FC
		[CLSCompliant(false)]
		public static void SecondaryColor3(uint red, uint green, uint blue)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), red, green, blue, GL.EntryPoints[1851]);
		}

		// Token: 0x060014C0 RID: 5312 RVA: 0x0003D014 File Offset: 0x0003B214
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(uint[] v)
		{
			fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[1853]);
			}
		}

		// Token: 0x060014C1 RID: 5313 RVA: 0x0003D048 File Offset: 0x0003B248
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(ref uint v)
		{
			fixed (uint* ptr = &v)
			{
				calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[1853]);
			}
		}

		// Token: 0x060014C2 RID: 5314 RVA: 0x0003D06C File Offset: 0x0003B26C
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(uint* v)
		{
			calli(System.Void(System.UInt32*), v, GL.EntryPoints[1853]);
		}

		// Token: 0x060014C3 RID: 5315 RVA: 0x0003D080 File Offset: 0x0003B280
		[CLSCompliant(false)]
		public static void SecondaryColor3(ushort red, ushort green, ushort blue)
		{
			calli(System.Void(System.UInt16,System.UInt16,System.UInt16), red, green, blue, GL.EntryPoints[1855]);
		}

		// Token: 0x060014C4 RID: 5316 RVA: 0x0003D098 File Offset: 0x0003B298
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(ushort[] v)
		{
			fixed (ushort* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt16*), ptr, GL.EntryPoints[1857]);
			}
		}

		// Token: 0x060014C5 RID: 5317 RVA: 0x0003D0CC File Offset: 0x0003B2CC
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(ref ushort v)
		{
			fixed (ushort* ptr = &v)
			{
				calli(System.Void(System.UInt16*), ptr, GL.EntryPoints[1857]);
			}
		}

		// Token: 0x060014C6 RID: 5318 RVA: 0x0003D0F0 File Offset: 0x0003B2F0
		[CLSCompliant(false)]
		public unsafe static void SecondaryColor3(ushort* v)
		{
			calli(System.Void(System.UInt16*), v, GL.EntryPoints[1857]);
		}

		// Token: 0x060014C7 RID: 5319 RVA: 0x0003D104 File Offset: 0x0003B304
		[CLSCompliant(false)]
		public static void SecondaryColorP3(PackedPointerType type, int color)
		{
			calli(System.Void(System.Int32,System.UInt32), type, color, GL.EntryPoints[1860]);
		}

		// Token: 0x060014C8 RID: 5320 RVA: 0x0003D118 File Offset: 0x0003B318
		[CLSCompliant(false)]
		public static void SecondaryColorP3(PackedPointerType type, uint color)
		{
			calli(System.Void(System.Int32,System.UInt32), type, color, GL.EntryPoints[1860]);
		}

		// Token: 0x060014C9 RID: 5321 RVA: 0x0003D12C File Offset: 0x0003B32C
		[CLSCompliant(false)]
		public unsafe static void SecondaryColorP3(PackedPointerType type, int* color)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, color, GL.EntryPoints[1861]);
		}

		// Token: 0x060014CA RID: 5322 RVA: 0x0003D140 File Offset: 0x0003B340
		[CLSCompliant(false)]
		public unsafe static void SecondaryColorP3(PackedPointerType type, uint* color)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, color, GL.EntryPoints[1861]);
		}

		// Token: 0x060014CB RID: 5323 RVA: 0x0003D154 File Offset: 0x0003B354
		public static void SecondaryColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, pointer, GL.EntryPoints[1862]);
		}

		// Token: 0x060014CC RID: 5324 RVA: 0x0003D16C File Offset: 0x0003B36C
		[CLSCompliant(false)]
		public unsafe static void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, [In] [Out] T3[] pointer) where T3 : struct
		{
			fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[1862]);
			}
		}

		// Token: 0x060014CD RID: 5325 RVA: 0x0003D1A4 File Offset: 0x0003B3A4
		[CLSCompliant(false)]
		public unsafe static void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, [In] [Out] T3[,] pointer) where T3 : struct
		{
			fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[1862]);
			}
		}

		// Token: 0x060014CE RID: 5326 RVA: 0x0003D1E0 File Offset: 0x0003B3E0
		[CLSCompliant(false)]
		public unsafe static void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, [In] [Out] T3[,,] pointer) where T3 : struct
		{
			fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[1862]);
			}
		}

		// Token: 0x060014CF RID: 5327 RVA: 0x0003D21C File Offset: 0x0003B41C
		public unsafe static void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, [In] [Out] ref T3 pointer) where T3 : struct
		{
			fixed (T3* ptr = &pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[1862]);
			}
		}

		// Token: 0x060014D0 RID: 5328 RVA: 0x0003D240 File Offset: 0x0003B440
		[CLSCompliant(false)]
		public unsafe static void SelectBuffer(int size, [Out] int[] buffer)
		{
			fixed (int* ptr = ref (buffer != null && buffer.Length != 0) ? ref buffer[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), size, ptr, GL.EntryPoints[1865]);
			}
		}

		// Token: 0x060014D1 RID: 5329 RVA: 0x0003D274 File Offset: 0x0003B474
		[CLSCompliant(false)]
		public unsafe static void SelectBuffer(int size, out int buffer)
		{
			fixed (int* ptr = &buffer)
			{
				calli(System.Void(System.Int32,System.UInt32*), size, ptr, GL.EntryPoints[1865]);
			}
		}

		// Token: 0x060014D2 RID: 5330 RVA: 0x0003D298 File Offset: 0x0003B498
		[CLSCompliant(false)]
		public unsafe static void SelectBuffer(int size, [Out] int* buffer)
		{
			calli(System.Void(System.Int32,System.UInt32*), size, buffer, GL.EntryPoints[1865]);
		}

		// Token: 0x060014D3 RID: 5331 RVA: 0x0003D2AC File Offset: 0x0003B4AC
		[CLSCompliant(false)]
		public unsafe static void SelectBuffer(int size, [Out] uint[] buffer)
		{
			fixed (uint* ptr = ref (buffer != null && buffer.Length != 0) ? ref buffer[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), size, ptr, GL.EntryPoints[1865]);
			}
		}

		// Token: 0x060014D4 RID: 5332 RVA: 0x0003D2E0 File Offset: 0x0003B4E0
		[CLSCompliant(false)]
		public unsafe static void SelectBuffer(int size, out uint buffer)
		{
			fixed (uint* ptr = &buffer)
			{
				calli(System.Void(System.Int32,System.UInt32*), size, ptr, GL.EntryPoints[1865]);
			}
		}

		// Token: 0x060014D5 RID: 5333 RVA: 0x0003D304 File Offset: 0x0003B504
		[CLSCompliant(false)]
		public unsafe static void SelectBuffer(int size, [Out] uint* buffer)
		{
			calli(System.Void(System.Int32,System.UInt32*), size, buffer, GL.EntryPoints[1865]);
		}

		// Token: 0x060014D6 RID: 5334 RVA: 0x0003D318 File Offset: 0x0003B518
		public static void SeparableFilter2D(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, row, column, GL.EntryPoints[1867]);
		}

		// Token: 0x060014D7 RID: 5335 RVA: 0x0003D344 File Offset: 0x0003B544
		[CLSCompliant(false)]
		public unsafe static void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[] row, [In] [Out] T7[] column) where T6 : struct where T7 : struct
		{
			fixed (T6* ptr = ref (row != null && row.Length != 0) ? ref row[0] : ref *null)
			{
				T6* ptr2 = ptr;
				fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1867]);
				}
			}
		}

		// Token: 0x060014D8 RID: 5336 RVA: 0x0003D39C File Offset: 0x0003B59C
		[CLSCompliant(false)]
		public unsafe static void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,] row, [In] [Out] T7[,] column) where T6 : struct where T7 : struct
		{
			fixed (T6* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0] : ref *null)
			{
				T6* ptr2 = ptr;
				fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1867]);
				}
			}
		}

		// Token: 0x060014D9 RID: 5337 RVA: 0x0003D3FC File Offset: 0x0003B5FC
		[CLSCompliant(false)]
		public unsafe static void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,,] row, [In] [Out] T7[,,] column) where T6 : struct where T7 : struct
		{
			fixed (T6* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0, 0] : ref *null)
			{
				T6* ptr2 = ptr;
				fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1867]);
				}
			}
		}

		// Token: 0x060014DA RID: 5338 RVA: 0x0003D460 File Offset: 0x0003B660
		public unsafe static void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T6 row, [In] [Out] ref T7 column) where T6 : struct where T7 : struct
		{
			fixed (T6* ptr = &row)
			{
				T6* ptr2 = ptr;
				fixed (T7* ptr3 = &column)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1867]);
				}
			}
		}

		// Token: 0x060014DB RID: 5339 RVA: 0x0003D490 File Offset: 0x0003B690
		public static void ShadeModel(ShadingModel mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[1875]);
		}

		// Token: 0x060014DC RID: 5340 RVA: 0x0003D4A4 File Offset: 0x0003B6A4
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, int[] shaders, BinaryFormat binaryformat, IntPtr binary, int length)
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr, binaryformat, binary, length, GL.EntryPoints[1876]);
			}
		}

		// Token: 0x060014DD RID: 5341 RVA: 0x0003D4DC File Offset: 0x0003B6DC
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int[] shaders, BinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[1876]);
				}
			}
		}

		// Token: 0x060014DE RID: 5342 RVA: 0x0003D52C File Offset: 0x0003B72C
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int[] shaders, BinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[1876]);
				}
			}
		}

		// Token: 0x060014DF RID: 5343 RVA: 0x0003D580 File Offset: 0x0003B780
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int[] shaders, BinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[1876]);
				}
			}
		}

		// Token: 0x060014E0 RID: 5344 RVA: 0x0003D5D4 File Offset: 0x0003B7D4
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int[] shaders, BinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &binary)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[1876]);
				}
			}
		}

		// Token: 0x060014E1 RID: 5345 RVA: 0x0003D610 File Offset: 0x0003B810
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, ref int shaders, BinaryFormat binaryformat, IntPtr binary, int length)
		{
			fixed (int* ptr = &shaders)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr, binaryformat, binary, length, GL.EntryPoints[1876]);
			}
		}

		// Token: 0x060014E2 RID: 5346 RVA: 0x0003D638 File Offset: 0x0003B838
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref int shaders, BinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (int* ptr = &shaders)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[1876]);
				}
			}
		}

		// Token: 0x060014E3 RID: 5347 RVA: 0x0003D674 File Offset: 0x0003B874
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref int shaders, BinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (int* ptr = &shaders)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[1876]);
				}
			}
		}

		// Token: 0x060014E4 RID: 5348 RVA: 0x0003D6B4 File Offset: 0x0003B8B4
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref int shaders, BinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (int* ptr = &shaders)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[1876]);
				}
			}
		}

		// Token: 0x060014E5 RID: 5349 RVA: 0x0003D6F4 File Offset: 0x0003B8F4
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref int shaders, BinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (int* ptr = &shaders)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &binary)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[1876]);
				}
			}
		}

		// Token: 0x060014E6 RID: 5350 RVA: 0x0003D720 File Offset: 0x0003B920
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, int* shaders, BinaryFormat binaryformat, IntPtr binary, int length)
		{
			calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, binary, length, GL.EntryPoints[1876]);
		}

		// Token: 0x060014E7 RID: 5351 RVA: 0x0003D738 File Offset: 0x0003B938
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int* shaders, BinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[1876]);
			}
		}

		// Token: 0x060014E8 RID: 5352 RVA: 0x0003D770 File Offset: 0x0003B970
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int* shaders, BinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[1876]);
			}
		}

		// Token: 0x060014E9 RID: 5353 RVA: 0x0003D7AC File Offset: 0x0003B9AC
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int* shaders, BinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[1876]);
			}
		}

		// Token: 0x060014EA RID: 5354 RVA: 0x0003D7EC File Offset: 0x0003B9EC
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int* shaders, BinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (T3* ptr = &binary)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[1876]);
			}
		}

		// Token: 0x060014EB RID: 5355 RVA: 0x0003D814 File Offset: 0x0003BA14
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, uint[] shaders, BinaryFormat binaryformat, IntPtr binary, int length)
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr, binaryformat, binary, length, GL.EntryPoints[1876]);
			}
		}

		// Token: 0x060014EC RID: 5356 RVA: 0x0003D84C File Offset: 0x0003BA4C
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint[] shaders, BinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[1876]);
				}
			}
		}

		// Token: 0x060014ED RID: 5357 RVA: 0x0003D89C File Offset: 0x0003BA9C
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint[] shaders, BinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[1876]);
				}
			}
		}

		// Token: 0x060014EE RID: 5358 RVA: 0x0003D8F0 File Offset: 0x0003BAF0
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint[] shaders, BinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[1876]);
				}
			}
		}

		// Token: 0x060014EF RID: 5359 RVA: 0x0003D944 File Offset: 0x0003BB44
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint[] shaders, BinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = &binary)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[1876]);
				}
			}
		}

		// Token: 0x060014F0 RID: 5360 RVA: 0x0003D980 File Offset: 0x0003BB80
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, ref uint shaders, BinaryFormat binaryformat, IntPtr binary, int length)
		{
			fixed (uint* ptr = &shaders)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr, binaryformat, binary, length, GL.EntryPoints[1876]);
			}
		}

		// Token: 0x060014F1 RID: 5361 RVA: 0x0003D9A8 File Offset: 0x0003BBA8
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref uint shaders, BinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = &shaders)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[1876]);
				}
			}
		}

		// Token: 0x060014F2 RID: 5362 RVA: 0x0003D9E4 File Offset: 0x0003BBE4
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref uint shaders, BinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = &shaders)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[1876]);
				}
			}
		}

		// Token: 0x060014F3 RID: 5363 RVA: 0x0003DA24 File Offset: 0x0003BC24
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref uint shaders, BinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = &shaders)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[1876]);
				}
			}
		}

		// Token: 0x060014F4 RID: 5364 RVA: 0x0003DA64 File Offset: 0x0003BC64
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref uint shaders, BinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (uint* ptr = &shaders)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = &binary)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[1876]);
				}
			}
		}

		// Token: 0x060014F5 RID: 5365 RVA: 0x0003DA90 File Offset: 0x0003BC90
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, uint* shaders, BinaryFormat binaryformat, IntPtr binary, int length)
		{
			calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, binary, length, GL.EntryPoints[1876]);
		}

		// Token: 0x060014F6 RID: 5366 RVA: 0x0003DAA8 File Offset: 0x0003BCA8
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint* shaders, BinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[1876]);
			}
		}

		// Token: 0x060014F7 RID: 5367 RVA: 0x0003DAE0 File Offset: 0x0003BCE0
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint* shaders, BinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[1876]);
			}
		}

		// Token: 0x060014F8 RID: 5368 RVA: 0x0003DB1C File Offset: 0x0003BD1C
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint* shaders, BinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[1876]);
			}
		}

		// Token: 0x060014F9 RID: 5369 RVA: 0x0003DB5C File Offset: 0x0003BD5C
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint* shaders, BinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (T3* ptr = &binary)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[1876]);
			}
		}

		// Token: 0x060014FA RID: 5370 RVA: 0x0003DB84 File Offset: 0x0003BD84
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(int shader, int count, string[] @string, int[] length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[1880]);
				BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
			}
		}

		// Token: 0x060014FB RID: 5371 RVA: 0x0003DBCC File Offset: 0x0003BDCC
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(int shader, int count, string[] @string, ref int length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = &length)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[1880]);
				BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
			}
		}

		// Token: 0x060014FC RID: 5372 RVA: 0x0003DC00 File Offset: 0x0003BE00
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(int shader, int count, string[] @string, int* length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr, length, GL.EntryPoints[1880]);
			BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
		}

		// Token: 0x060014FD RID: 5373 RVA: 0x0003DC34 File Offset: 0x0003BE34
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(uint shader, int count, string[] @string, int[] length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[1880]);
				BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
			}
		}

		// Token: 0x060014FE RID: 5374 RVA: 0x0003DC7C File Offset: 0x0003BE7C
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(uint shader, int count, string[] @string, ref int length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = &length)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[1880]);
				BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
			}
		}

		// Token: 0x060014FF RID: 5375 RVA: 0x0003DCB0 File Offset: 0x0003BEB0
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(uint shader, int count, string[] @string, int* length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr, length, GL.EntryPoints[1880]);
			BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
		}

		// Token: 0x06001500 RID: 5376 RVA: 0x0003DCE4 File Offset: 0x0003BEE4
		[CLSCompliant(false)]
		public static void ShaderStorageBlockBinding(int program, int storageBlockIndex, int storageBlockBinding)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), program, storageBlockIndex, storageBlockBinding, GL.EntryPoints[1882]);
		}

		// Token: 0x06001501 RID: 5377 RVA: 0x0003DCFC File Offset: 0x0003BEFC
		[CLSCompliant(false)]
		public static void ShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), program, storageBlockIndex, storageBlockBinding, GL.EntryPoints[1882]);
		}

		// Token: 0x06001502 RID: 5378 RVA: 0x0003DD14 File Offset: 0x0003BF14
		[CLSCompliant(false)]
		public static void StencilFunc(StencilFunction func, int @ref, int mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), func, @ref, mask, GL.EntryPoints[1892]);
		}

		// Token: 0x06001503 RID: 5379 RVA: 0x0003DD2C File Offset: 0x0003BF2C
		[CLSCompliant(false)]
		public static void StencilFunc(StencilFunction func, int @ref, uint mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), func, @ref, mask, GL.EntryPoints[1892]);
		}

		// Token: 0x06001504 RID: 5380 RVA: 0x0003DD44 File Offset: 0x0003BF44
		[CLSCompliant(false)]
		public static void StencilFuncSeparate(StencilFace face, StencilFunction func, int @ref, int mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), face, func, @ref, mask, GL.EntryPoints[1893]);
		}

		// Token: 0x06001505 RID: 5381 RVA: 0x0003DD5C File Offset: 0x0003BF5C
		[CLSCompliant(false)]
		public static void StencilFuncSeparate(StencilFace face, StencilFunction func, int @ref, uint mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), face, func, @ref, mask, GL.EntryPoints[1893]);
		}

		// Token: 0x06001506 RID: 5382 RVA: 0x0003DD74 File Offset: 0x0003BF74
		[CLSCompliant(false)]
		[Obsolete("Use StencilFace overload instead")]
		public static void StencilFuncSeparate(Version20 face, StencilFunction func, int @ref, int mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), face, func, @ref, mask, GL.EntryPoints[1893]);
		}

		// Token: 0x06001507 RID: 5383 RVA: 0x0003DD8C File Offset: 0x0003BF8C
		[Obsolete("Use StencilFace overload instead")]
		[CLSCompliant(false)]
		public static void StencilFuncSeparate(Version20 face, StencilFunction func, int @ref, uint mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), face, func, @ref, mask, GL.EntryPoints[1893]);
		}

		// Token: 0x06001508 RID: 5384 RVA: 0x0003DDA4 File Offset: 0x0003BFA4
		[CLSCompliant(false)]
		public static void StencilMask(int mask)
		{
			calli(System.Void(System.UInt32), mask, GL.EntryPoints[1895]);
		}

		// Token: 0x06001509 RID: 5385 RVA: 0x0003DDB8 File Offset: 0x0003BFB8
		[CLSCompliant(false)]
		public static void StencilMask(uint mask)
		{
			calli(System.Void(System.UInt32), mask, GL.EntryPoints[1895]);
		}

		// Token: 0x0600150A RID: 5386 RVA: 0x0003DDCC File Offset: 0x0003BFCC
		[CLSCompliant(false)]
		public static void StencilMaskSeparate(StencilFace face, int mask)
		{
			calli(System.Void(System.Int32,System.UInt32), face, mask, GL.EntryPoints[1896]);
		}

		// Token: 0x0600150B RID: 5387 RVA: 0x0003DDE0 File Offset: 0x0003BFE0
		[CLSCompliant(false)]
		public static void StencilMaskSeparate(StencilFace face, uint mask)
		{
			calli(System.Void(System.Int32,System.UInt32), face, mask, GL.EntryPoints[1896]);
		}

		// Token: 0x0600150C RID: 5388 RVA: 0x0003DDF4 File Offset: 0x0003BFF4
		public static void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), fail, zfail, zpass, GL.EntryPoints[1897]);
		}

		// Token: 0x0600150D RID: 5389 RVA: 0x0003DE0C File Offset: 0x0003C00C
		public static void StencilOpSeparate(StencilFace face, StencilOp sfail, StencilOp dpfail, StencilOp dppass)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), face, sfail, dpfail, dppass, GL.EntryPoints[1898]);
		}

		// Token: 0x0600150E RID: 5390 RVA: 0x0003DE24 File Offset: 0x0003C024
		[CLSCompliant(false)]
		public static void TexBuffer(TextureBufferTarget target, SizedInternalFormat internalformat, int buffer)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), target, internalformat, buffer, GL.EntryPoints[1925]);
		}

		// Token: 0x0600150F RID: 5391 RVA: 0x0003DE3C File Offset: 0x0003C03C
		[CLSCompliant(false)]
		public static void TexBuffer(TextureBufferTarget target, SizedInternalFormat internalformat, uint buffer)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), target, internalformat, buffer, GL.EntryPoints[1925]);
		}

		// Token: 0x06001510 RID: 5392 RVA: 0x0003DE54 File Offset: 0x0003C054
		[CLSCompliant(false)]
		public static void TexBufferRange(TextureBufferTarget target, SizedInternalFormat internalformat, int buffer, IntPtr offset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.IntPtr,System.IntPtr), target, internalformat, buffer, offset, size, GL.EntryPoints[1928]);
		}

		// Token: 0x06001511 RID: 5393 RVA: 0x0003DE6C File Offset: 0x0003C06C
		[CLSCompliant(false)]
		public static void TexBufferRange(TextureBufferTarget target, SizedInternalFormat internalformat, uint buffer, IntPtr offset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.IntPtr,System.IntPtr), target, internalformat, buffer, offset, size, GL.EntryPoints[1928]);
		}

		// Token: 0x06001512 RID: 5394 RVA: 0x0003DE84 File Offset: 0x0003C084
		public static void TexCoord1(double s)
		{
			calli(System.Void(System.Double), s, GL.EntryPoints[1933]);
		}

		// Token: 0x06001513 RID: 5395 RVA: 0x0003DE98 File Offset: 0x0003C098
		[CLSCompliant(false)]
		public unsafe static void TexCoord1(double* v)
		{
			calli(System.Void(System.Double*), v, GL.EntryPoints[1934]);
		}

		// Token: 0x06001514 RID: 5396 RVA: 0x0003DEAC File Offset: 0x0003C0AC
		public static void TexCoord1(float s)
		{
			calli(System.Void(System.Single), s, GL.EntryPoints[1935]);
		}

		// Token: 0x06001515 RID: 5397 RVA: 0x0003DEC0 File Offset: 0x0003C0C0
		[CLSCompliant(false)]
		public unsafe static void TexCoord1(float* v)
		{
			calli(System.Void(System.Single*), v, GL.EntryPoints[1936]);
		}

		// Token: 0x06001516 RID: 5398 RVA: 0x0003DED4 File Offset: 0x0003C0D4
		public static void TexCoord1(int s)
		{
			calli(System.Void(System.Int32), s, GL.EntryPoints[1939]);
		}

		// Token: 0x06001517 RID: 5399 RVA: 0x0003DEE8 File Offset: 0x0003C0E8
		[CLSCompliant(false)]
		public unsafe static void TexCoord1(int* v)
		{
			calli(System.Void(System.Int32*), v, GL.EntryPoints[1940]);
		}

		// Token: 0x06001518 RID: 5400 RVA: 0x0003DEFC File Offset: 0x0003C0FC
		public static void TexCoord1(short s)
		{
			calli(System.Void(System.Int16), s, GL.EntryPoints[1941]);
		}

		// Token: 0x06001519 RID: 5401 RVA: 0x0003DF10 File Offset: 0x0003C110
		[CLSCompliant(false)]
		public unsafe static void TexCoord1(short* v)
		{
			calli(System.Void(System.Int16*), v, GL.EntryPoints[1942]);
		}

		// Token: 0x0600151A RID: 5402 RVA: 0x0003DF24 File Offset: 0x0003C124
		public static void TexCoord2(double s, double t)
		{
			calli(System.Void(System.Double,System.Double), s, t, GL.EntryPoints[1947]);
		}

		// Token: 0x0600151B RID: 5403 RVA: 0x0003DF38 File Offset: 0x0003C138
		[CLSCompliant(false)]
		public unsafe static void TexCoord2(double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1948]);
			}
		}

		// Token: 0x0600151C RID: 5404 RVA: 0x0003DF6C File Offset: 0x0003C16C
		[CLSCompliant(false)]
		public unsafe static void TexCoord2(ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1948]);
			}
		}

		// Token: 0x0600151D RID: 5405 RVA: 0x0003DF90 File Offset: 0x0003C190
		[CLSCompliant(false)]
		public unsafe static void TexCoord2(double* v)
		{
			calli(System.Void(System.Double*), v, GL.EntryPoints[1948]);
		}

		// Token: 0x0600151E RID: 5406 RVA: 0x0003DFA4 File Offset: 0x0003C1A4
		public static void TexCoord2(float s, float t)
		{
			calli(System.Void(System.Single,System.Single), s, t, GL.EntryPoints[1949]);
		}

		// Token: 0x0600151F RID: 5407 RVA: 0x0003DFB8 File Offset: 0x0003C1B8
		[CLSCompliant(false)]
		public unsafe static void TexCoord2(float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1958]);
			}
		}

		// Token: 0x06001520 RID: 5408 RVA: 0x0003DFEC File Offset: 0x0003C1EC
		[CLSCompliant(false)]
		public unsafe static void TexCoord2(ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1958]);
			}
		}

		// Token: 0x06001521 RID: 5409 RVA: 0x0003E010 File Offset: 0x0003C210
		[CLSCompliant(false)]
		public unsafe static void TexCoord2(float* v)
		{
			calli(System.Void(System.Single*), v, GL.EntryPoints[1958]);
		}

		// Token: 0x06001522 RID: 5410 RVA: 0x0003E024 File Offset: 0x0003C224
		public static void TexCoord2(int s, int t)
		{
			calli(System.Void(System.Int32,System.Int32), s, t, GL.EntryPoints[1963]);
		}

		// Token: 0x06001523 RID: 5411 RVA: 0x0003E038 File Offset: 0x0003C238
		[CLSCompliant(false)]
		public unsafe static void TexCoord2(int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1964]);
			}
		}

		// Token: 0x06001524 RID: 5412 RVA: 0x0003E06C File Offset: 0x0003C26C
		[CLSCompliant(false)]
		public unsafe static void TexCoord2(ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1964]);
			}
		}

		// Token: 0x06001525 RID: 5413 RVA: 0x0003E090 File Offset: 0x0003C290
		[CLSCompliant(false)]
		public unsafe static void TexCoord2(int* v)
		{
			calli(System.Void(System.Int32*), v, GL.EntryPoints[1964]);
		}

		// Token: 0x06001526 RID: 5414 RVA: 0x0003E0A4 File Offset: 0x0003C2A4
		public static void TexCoord2(short s, short t)
		{
			calli(System.Void(System.Int16,System.Int16), s, t, GL.EntryPoints[1965]);
		}

		// Token: 0x06001527 RID: 5415 RVA: 0x0003E0B8 File Offset: 0x0003C2B8
		[CLSCompliant(false)]
		public unsafe static void TexCoord2(short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1966]);
			}
		}

		// Token: 0x06001528 RID: 5416 RVA: 0x0003E0EC File Offset: 0x0003C2EC
		[CLSCompliant(false)]
		public unsafe static void TexCoord2(ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1966]);
			}
		}

		// Token: 0x06001529 RID: 5417 RVA: 0x0003E110 File Offset: 0x0003C310
		[CLSCompliant(false)]
		public unsafe static void TexCoord2(short* v)
		{
			calli(System.Void(System.Int16*), v, GL.EntryPoints[1966]);
		}

		// Token: 0x0600152A RID: 5418 RVA: 0x0003E124 File Offset: 0x0003C324
		public static void TexCoord3(double s, double t, double r)
		{
			calli(System.Void(System.Double,System.Double,System.Double), s, t, r, GL.EntryPoints[1971]);
		}

		// Token: 0x0600152B RID: 5419 RVA: 0x0003E13C File Offset: 0x0003C33C
		[CLSCompliant(false)]
		public unsafe static void TexCoord3(double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1972]);
			}
		}

		// Token: 0x0600152C RID: 5420 RVA: 0x0003E170 File Offset: 0x0003C370
		[CLSCompliant(false)]
		public unsafe static void TexCoord3(ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1972]);
			}
		}

		// Token: 0x0600152D RID: 5421 RVA: 0x0003E194 File Offset: 0x0003C394
		[CLSCompliant(false)]
		public unsafe static void TexCoord3(double* v)
		{
			calli(System.Void(System.Double*), v, GL.EntryPoints[1972]);
		}

		// Token: 0x0600152E RID: 5422 RVA: 0x0003E1A8 File Offset: 0x0003C3A8
		public static void TexCoord3(float s, float t, float r)
		{
			calli(System.Void(System.Single,System.Single,System.Single), s, t, r, GL.EntryPoints[1973]);
		}

		// Token: 0x0600152F RID: 5423 RVA: 0x0003E1C0 File Offset: 0x0003C3C0
		[CLSCompliant(false)]
		public unsafe static void TexCoord3(float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1974]);
			}
		}

		// Token: 0x06001530 RID: 5424 RVA: 0x0003E1F4 File Offset: 0x0003C3F4
		[CLSCompliant(false)]
		public unsafe static void TexCoord3(ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1974]);
			}
		}

		// Token: 0x06001531 RID: 5425 RVA: 0x0003E218 File Offset: 0x0003C418
		[CLSCompliant(false)]
		public unsafe static void TexCoord3(float* v)
		{
			calli(System.Void(System.Single*), v, GL.EntryPoints[1974]);
		}

		// Token: 0x06001532 RID: 5426 RVA: 0x0003E22C File Offset: 0x0003C42C
		public static void TexCoord3(int s, int t, int r)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), s, t, r, GL.EntryPoints[1977]);
		}

		// Token: 0x06001533 RID: 5427 RVA: 0x0003E244 File Offset: 0x0003C444
		[CLSCompliant(false)]
		public unsafe static void TexCoord3(int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1978]);
			}
		}

		// Token: 0x06001534 RID: 5428 RVA: 0x0003E278 File Offset: 0x0003C478
		[CLSCompliant(false)]
		public unsafe static void TexCoord3(ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1978]);
			}
		}

		// Token: 0x06001535 RID: 5429 RVA: 0x0003E29C File Offset: 0x0003C49C
		[CLSCompliant(false)]
		public unsafe static void TexCoord3(int* v)
		{
			calli(System.Void(System.Int32*), v, GL.EntryPoints[1978]);
		}

		// Token: 0x06001536 RID: 5430 RVA: 0x0003E2B0 File Offset: 0x0003C4B0
		public static void TexCoord3(short s, short t, short r)
		{
			calli(System.Void(System.Int16,System.Int16,System.Int16), s, t, r, GL.EntryPoints[1979]);
		}

		// Token: 0x06001537 RID: 5431 RVA: 0x0003E2C8 File Offset: 0x0003C4C8
		[CLSCompliant(false)]
		public unsafe static void TexCoord3(short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1980]);
			}
		}

		// Token: 0x06001538 RID: 5432 RVA: 0x0003E2FC File Offset: 0x0003C4FC
		[CLSCompliant(false)]
		public unsafe static void TexCoord3(ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1980]);
			}
		}

		// Token: 0x06001539 RID: 5433 RVA: 0x0003E320 File Offset: 0x0003C520
		[CLSCompliant(false)]
		public unsafe static void TexCoord3(short* v)
		{
			calli(System.Void(System.Int16*), v, GL.EntryPoints[1980]);
		}

		// Token: 0x0600153A RID: 5434 RVA: 0x0003E334 File Offset: 0x0003C534
		public static void TexCoord4(double s, double t, double r, double q)
		{
			calli(System.Void(System.Double,System.Double,System.Double,System.Double), s, t, r, q, GL.EntryPoints[1985]);
		}

		// Token: 0x0600153B RID: 5435 RVA: 0x0003E34C File Offset: 0x0003C54C
		[CLSCompliant(false)]
		public unsafe static void TexCoord4(double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1986]);
			}
		}

		// Token: 0x0600153C RID: 5436 RVA: 0x0003E380 File Offset: 0x0003C580
		[CLSCompliant(false)]
		public unsafe static void TexCoord4(ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[1986]);
			}
		}

		// Token: 0x0600153D RID: 5437 RVA: 0x0003E3A4 File Offset: 0x0003C5A4
		[CLSCompliant(false)]
		public unsafe static void TexCoord4(double* v)
		{
			calli(System.Void(System.Double*), v, GL.EntryPoints[1986]);
		}

		// Token: 0x0600153E RID: 5438 RVA: 0x0003E3B8 File Offset: 0x0003C5B8
		public static void TexCoord4(float s, float t, float r, float q)
		{
			calli(System.Void(System.Single,System.Single,System.Single,System.Single), s, t, r, q, GL.EntryPoints[1987]);
		}

		// Token: 0x0600153F RID: 5439 RVA: 0x0003E3D0 File Offset: 0x0003C5D0
		[CLSCompliant(false)]
		public unsafe static void TexCoord4(float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1990]);
			}
		}

		// Token: 0x06001540 RID: 5440 RVA: 0x0003E404 File Offset: 0x0003C604
		[CLSCompliant(false)]
		public unsafe static void TexCoord4(ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[1990]);
			}
		}

		// Token: 0x06001541 RID: 5441 RVA: 0x0003E428 File Offset: 0x0003C628
		[CLSCompliant(false)]
		public unsafe static void TexCoord4(float* v)
		{
			calli(System.Void(System.Single*), v, GL.EntryPoints[1990]);
		}

		// Token: 0x06001542 RID: 5442 RVA: 0x0003E43C File Offset: 0x0003C63C
		public static void TexCoord4(int s, int t, int r, int q)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), s, t, r, q, GL.EntryPoints[1995]);
		}

		// Token: 0x06001543 RID: 5443 RVA: 0x0003E454 File Offset: 0x0003C654
		[CLSCompliant(false)]
		public unsafe static void TexCoord4(int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1996]);
			}
		}

		// Token: 0x06001544 RID: 5444 RVA: 0x0003E488 File Offset: 0x0003C688
		[CLSCompliant(false)]
		public unsafe static void TexCoord4(ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1996]);
			}
		}

		// Token: 0x06001545 RID: 5445 RVA: 0x0003E4AC File Offset: 0x0003C6AC
		[CLSCompliant(false)]
		public unsafe static void TexCoord4(int* v)
		{
			calli(System.Void(System.Int32*), v, GL.EntryPoints[1996]);
		}

		// Token: 0x06001546 RID: 5446 RVA: 0x0003E4C0 File Offset: 0x0003C6C0
		public static void TexCoord4(short s, short t, short r, short q)
		{
			calli(System.Void(System.Int16,System.Int16,System.Int16,System.Int16), s, t, r, q, GL.EntryPoints[1997]);
		}

		// Token: 0x06001547 RID: 5447 RVA: 0x0003E4D8 File Offset: 0x0003C6D8
		[CLSCompliant(false)]
		public unsafe static void TexCoord4(short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1998]);
			}
		}

		// Token: 0x06001548 RID: 5448 RVA: 0x0003E50C File Offset: 0x0003C70C
		[CLSCompliant(false)]
		public unsafe static void TexCoord4(ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1998]);
			}
		}

		// Token: 0x06001549 RID: 5449 RVA: 0x0003E530 File Offset: 0x0003C730
		[CLSCompliant(false)]
		public unsafe static void TexCoord4(short* v)
		{
			calli(System.Void(System.Int16*), v, GL.EntryPoints[1998]);
		}

		// Token: 0x0600154A RID: 5450 RVA: 0x0003E544 File Offset: 0x0003C744
		[CLSCompliant(false)]
		public static void TexCoordP1(PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[2002]);
		}

		// Token: 0x0600154B RID: 5451 RVA: 0x0003E558 File Offset: 0x0003C758
		[CLSCompliant(false)]
		public static void TexCoordP1(PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[2002]);
		}

		// Token: 0x0600154C RID: 5452 RVA: 0x0003E56C File Offset: 0x0003C76C
		[CLSCompliant(false)]
		public unsafe static void TexCoordP1(PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[2003]);
		}

		// Token: 0x0600154D RID: 5453 RVA: 0x0003E580 File Offset: 0x0003C780
		[CLSCompliant(false)]
		public unsafe static void TexCoordP1(PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[2003]);
		}

		// Token: 0x0600154E RID: 5454 RVA: 0x0003E594 File Offset: 0x0003C794
		[CLSCompliant(false)]
		public static void TexCoordP2(PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[2004]);
		}

		// Token: 0x0600154F RID: 5455 RVA: 0x0003E5A8 File Offset: 0x0003C7A8
		[CLSCompliant(false)]
		public static void TexCoordP2(PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[2004]);
		}

		// Token: 0x06001550 RID: 5456 RVA: 0x0003E5BC File Offset: 0x0003C7BC
		[CLSCompliant(false)]
		public unsafe static void TexCoordP2(PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[2005]);
		}

		// Token: 0x06001551 RID: 5457 RVA: 0x0003E5D0 File Offset: 0x0003C7D0
		[CLSCompliant(false)]
		public unsafe static void TexCoordP2(PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[2005]);
		}

		// Token: 0x06001552 RID: 5458 RVA: 0x0003E5E4 File Offset: 0x0003C7E4
		[CLSCompliant(false)]
		public static void TexCoordP3(PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[2006]);
		}

		// Token: 0x06001553 RID: 5459 RVA: 0x0003E5F8 File Offset: 0x0003C7F8
		[CLSCompliant(false)]
		public static void TexCoordP3(PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[2006]);
		}

		// Token: 0x06001554 RID: 5460 RVA: 0x0003E60C File Offset: 0x0003C80C
		[CLSCompliant(false)]
		public unsafe static void TexCoordP3(PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[2007]);
		}

		// Token: 0x06001555 RID: 5461 RVA: 0x0003E620 File Offset: 0x0003C820
		[CLSCompliant(false)]
		public unsafe static void TexCoordP3(PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[2007]);
		}

		// Token: 0x06001556 RID: 5462 RVA: 0x0003E634 File Offset: 0x0003C834
		[CLSCompliant(false)]
		public static void TexCoordP4(PackedPointerType type, int coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[2008]);
		}

		// Token: 0x06001557 RID: 5463 RVA: 0x0003E648 File Offset: 0x0003C848
		[CLSCompliant(false)]
		public static void TexCoordP4(PackedPointerType type, uint coords)
		{
			calli(System.Void(System.Int32,System.UInt32), type, coords, GL.EntryPoints[2008]);
		}

		// Token: 0x06001558 RID: 5464 RVA: 0x0003E65C File Offset: 0x0003C85C
		[CLSCompliant(false)]
		public unsafe static void TexCoordP4(PackedPointerType type, int* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[2009]);
		}

		// Token: 0x06001559 RID: 5465 RVA: 0x0003E670 File Offset: 0x0003C870
		[CLSCompliant(false)]
		public unsafe static void TexCoordP4(PackedPointerType type, uint* coords)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, coords, GL.EntryPoints[2009]);
		}

		// Token: 0x0600155A RID: 5466 RVA: 0x0003E684 File Offset: 0x0003C884
		public static void TexCoordPointer(int size, TexCoordPointerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, pointer, GL.EntryPoints[2010]);
		}

		// Token: 0x0600155B RID: 5467 RVA: 0x0003E69C File Offset: 0x0003C89C
		[CLSCompliant(false)]
		public unsafe static void TexCoordPointer<T3>(int size, TexCoordPointerType type, int stride, [In] [Out] T3[] pointer) where T3 : struct
		{
			fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[2010]);
			}
		}

		// Token: 0x0600155C RID: 5468 RVA: 0x0003E6D4 File Offset: 0x0003C8D4
		[CLSCompliant(false)]
		public unsafe static void TexCoordPointer<T3>(int size, TexCoordPointerType type, int stride, [In] [Out] T3[,] pointer) where T3 : struct
		{
			fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[2010]);
			}
		}

		// Token: 0x0600155D RID: 5469 RVA: 0x0003E710 File Offset: 0x0003C910
		[CLSCompliant(false)]
		public unsafe static void TexCoordPointer<T3>(int size, TexCoordPointerType type, int stride, [In] [Out] T3[,,] pointer) where T3 : struct
		{
			fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[2010]);
			}
		}

		// Token: 0x0600155E RID: 5470 RVA: 0x0003E74C File Offset: 0x0003C94C
		public unsafe static void TexCoordPointer<T3>(int size, TexCoordPointerType type, int stride, [In] [Out] ref T3 pointer) where T3 : struct
		{
			fixed (T3* ptr = &pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[2010]);
			}
		}

		// Token: 0x0600155F RID: 5471 RVA: 0x0003E770 File Offset: 0x0003C970
		public static void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, float param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single), target, pname, param, GL.EntryPoints[2014]);
		}

		// Token: 0x06001560 RID: 5472 RVA: 0x0003E788 File Offset: 0x0003C988
		[CLSCompliant(false)]
		public unsafe static void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[2015]);
			}
		}

		// Token: 0x06001561 RID: 5473 RVA: 0x0003E7C0 File Offset: 0x0003C9C0
		[CLSCompliant(false)]
		public unsafe static void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[2015]);
		}

		// Token: 0x06001562 RID: 5474 RVA: 0x0003E7D8 File Offset: 0x0003C9D8
		public static void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, param, GL.EntryPoints[2016]);
		}

		// Token: 0x06001563 RID: 5475 RVA: 0x0003E7F0 File Offset: 0x0003C9F0
		[CLSCompliant(false)]
		public unsafe static void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[2017]);
			}
		}

		// Token: 0x06001564 RID: 5476 RVA: 0x0003E828 File Offset: 0x0003CA28
		[CLSCompliant(false)]
		public unsafe static void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[2017]);
		}

		// Token: 0x06001565 RID: 5477 RVA: 0x0003E840 File Offset: 0x0003CA40
		public static void TexGend(TextureCoordName coord, TextureGenParameter pname, double param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Double), coord, pname, param, GL.EntryPoints[2021]);
		}

		// Token: 0x06001566 RID: 5478 RVA: 0x0003E858 File Offset: 0x0003CA58
		[CLSCompliant(false)]
		public unsafe static void TexGen(TextureCoordName coord, TextureGenParameter pname, double[] @params)
		{
			fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), coord, pname, ptr, GL.EntryPoints[2022]);
			}
		}

		// Token: 0x06001567 RID: 5479 RVA: 0x0003E890 File Offset: 0x0003CA90
		[CLSCompliant(false)]
		public unsafe static void TexGen(TextureCoordName coord, TextureGenParameter pname, ref double @params)
		{
			fixed (double* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), coord, pname, ptr, GL.EntryPoints[2022]);
			}
		}

		// Token: 0x06001568 RID: 5480 RVA: 0x0003E8B4 File Offset: 0x0003CAB4
		[CLSCompliant(false)]
		public unsafe static void TexGen(TextureCoordName coord, TextureGenParameter pname, double* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Double*), coord, pname, @params, GL.EntryPoints[2022]);
		}

		// Token: 0x06001569 RID: 5481 RVA: 0x0003E8CC File Offset: 0x0003CACC
		public static void TexGen(TextureCoordName coord, TextureGenParameter pname, float param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single), coord, pname, param, GL.EntryPoints[2023]);
		}

		// Token: 0x0600156A RID: 5482 RVA: 0x0003E8E4 File Offset: 0x0003CAE4
		[CLSCompliant(false)]
		public unsafe static void TexGen(TextureCoordName coord, TextureGenParameter pname, float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), coord, pname, ptr, GL.EntryPoints[2024]);
			}
		}

		// Token: 0x0600156B RID: 5483 RVA: 0x0003E91C File Offset: 0x0003CB1C
		[CLSCompliant(false)]
		public unsafe static void TexGen(TextureCoordName coord, TextureGenParameter pname, float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), coord, pname, @params, GL.EntryPoints[2024]);
		}

		// Token: 0x0600156C RID: 5484 RVA: 0x0003E934 File Offset: 0x0003CB34
		public static void TexGen(TextureCoordName coord, TextureGenParameter pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), coord, pname, param, GL.EntryPoints[2025]);
		}

		// Token: 0x0600156D RID: 5485 RVA: 0x0003E94C File Offset: 0x0003CB4C
		[CLSCompliant(false)]
		public unsafe static void TexGen(TextureCoordName coord, TextureGenParameter pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), coord, pname, ptr, GL.EntryPoints[2026]);
			}
		}

		// Token: 0x0600156E RID: 5486 RVA: 0x0003E984 File Offset: 0x0003CB84
		[CLSCompliant(false)]
		public unsafe static void TexGen(TextureCoordName coord, TextureGenParameter pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), coord, pname, @params, GL.EntryPoints[2026]);
		}

		// Token: 0x0600156F RID: 5487 RVA: 0x0003E99C File Offset: 0x0003CB9C
		public static void TexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, format, type, pixels, GL.EntryPoints[2029]);
		}

		// Token: 0x06001570 RID: 5488 RVA: 0x0003E9C8 File Offset: 0x0003CBC8
		[CLSCompliant(false)]
		public unsafe static void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T7[] pixels) where T7 : struct
		{
			fixed (T7* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2029]);
			}
		}

		// Token: 0x06001571 RID: 5489 RVA: 0x0003EA08 File Offset: 0x0003CC08
		[CLSCompliant(false)]
		public unsafe static void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T7[,] pixels) where T7 : struct
		{
			fixed (T7* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2029]);
			}
		}

		// Token: 0x06001572 RID: 5490 RVA: 0x0003EA4C File Offset: 0x0003CC4C
		[CLSCompliant(false)]
		public unsafe static void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T7[,,] pixels) where T7 : struct
		{
			fixed (T7* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2029]);
			}
		}

		// Token: 0x06001573 RID: 5491 RVA: 0x0003EA94 File Offset: 0x0003CC94
		public unsafe static void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] ref T7 pixels) where T7 : struct
		{
			fixed (T7* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2029]);
			}
		}

		// Token: 0x06001574 RID: 5492 RVA: 0x0003EAC0 File Offset: 0x0003CCC0
		public static void TexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, pixels, GL.EntryPoints[2030]);
		}

		// Token: 0x06001575 RID: 5493 RVA: 0x0003EAEC File Offset: 0x0003CCEC
		[CLSCompliant(false)]
		public unsafe static void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T8[] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2030]);
			}
		}

		// Token: 0x06001576 RID: 5494 RVA: 0x0003EB30 File Offset: 0x0003CD30
		[CLSCompliant(false)]
		public unsafe static void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T8[,] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2030]);
			}
		}

		// Token: 0x06001577 RID: 5495 RVA: 0x0003EB78 File Offset: 0x0003CD78
		[CLSCompliant(false)]
		public unsafe static void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T8[,,] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2030]);
			}
		}

		// Token: 0x06001578 RID: 5496 RVA: 0x0003EBC0 File Offset: 0x0003CDC0
		public unsafe static void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] ref T8 pixels) where T8 : struct
		{
			fixed (T8* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2030]);
			}
		}

		// Token: 0x06001579 RID: 5497 RVA: 0x0003EBF0 File Offset: 0x0003CDF0
		public static void TexImage2DMultisample(TextureTargetMultisample target, int samples, PixelInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), target, samples, internalformat, width, height, fixedsamplelocations, GL.EntryPoints[2031]);
		}

		// Token: 0x0600157A RID: 5498 RVA: 0x0003EC0C File Offset: 0x0003CE0C
		public static void TexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, pixels, GL.EntryPoints[2033]);
		}

		// Token: 0x0600157B RID: 5499 RVA: 0x0003EC3C File Offset: 0x0003CE3C
		[CLSCompliant(false)]
		public unsafe static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T9[] pixels) where T9 : struct
		{
			fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2033]);
			}
		}

		// Token: 0x0600157C RID: 5500 RVA: 0x0003EC80 File Offset: 0x0003CE80
		[CLSCompliant(false)]
		public unsafe static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T9[,] pixels) where T9 : struct
		{
			fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2033]);
			}
		}

		// Token: 0x0600157D RID: 5501 RVA: 0x0003ECC8 File Offset: 0x0003CEC8
		[CLSCompliant(false)]
		public unsafe static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T9[,,] pixels) where T9 : struct
		{
			fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2033]);
			}
		}

		// Token: 0x0600157E RID: 5502 RVA: 0x0003ED14 File Offset: 0x0003CF14
		public unsafe static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] ref T9 pixels) where T9 : struct
		{
			fixed (T9* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2033]);
			}
		}

		// Token: 0x0600157F RID: 5503 RVA: 0x0003ED44 File Offset: 0x0003CF44
		public static void TexImage3DMultisample(TextureTargetMultisample target, int samples, PixelInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), target, samples, internalformat, width, height, depth, fixedsamplelocations, GL.EntryPoints[2035]);
		}

		// Token: 0x06001580 RID: 5504 RVA: 0x0003ED6C File Offset: 0x0003CF6C
		public static void TexParameter(TextureTarget target, TextureParameterName pname, float param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single), target, pname, param, GL.EntryPoints[2039]);
		}

		// Token: 0x06001581 RID: 5505 RVA: 0x0003ED84 File Offset: 0x0003CF84
		[CLSCompliant(false)]
		public unsafe static void TexParameter(TextureTarget target, TextureParameterName pname, float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[2040]);
			}
		}

		// Token: 0x06001582 RID: 5506 RVA: 0x0003EDBC File Offset: 0x0003CFBC
		[CLSCompliant(false)]
		public unsafe static void TexParameter(TextureTarget target, TextureParameterName pname, float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[2040]);
		}

		// Token: 0x06001583 RID: 5507 RVA: 0x0003EDD4 File Offset: 0x0003CFD4
		public static void TexParameter(TextureTarget target, TextureParameterName pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, param, GL.EntryPoints[2041]);
		}

		// Token: 0x06001584 RID: 5508 RVA: 0x0003EDEC File Offset: 0x0003CFEC
		[CLSCompliant(false)]
		public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[2042]);
			}
		}

		// Token: 0x06001585 RID: 5509 RVA: 0x0003EE24 File Offset: 0x0003D024
		[CLSCompliant(false)]
		public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, ref int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[2042]);
			}
		}

		// Token: 0x06001586 RID: 5510 RVA: 0x0003EE48 File Offset: 0x0003D048
		[CLSCompliant(false)]
		public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[2042]);
		}

		// Token: 0x06001587 RID: 5511 RVA: 0x0003EE60 File Offset: 0x0003D060
		[CLSCompliant(false)]
		public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, uint[] @params)
		{
			fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[2044]);
			}
		}

		// Token: 0x06001588 RID: 5512 RVA: 0x0003EE98 File Offset: 0x0003D098
		[CLSCompliant(false)]
		public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, ref uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[2044]);
			}
		}

		// Token: 0x06001589 RID: 5513 RVA: 0x0003EEBC File Offset: 0x0003D0BC
		[CLSCompliant(false)]
		public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, uint* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, @params, GL.EntryPoints[2044]);
		}

		// Token: 0x0600158A RID: 5514 RVA: 0x0003EED4 File Offset: 0x0003D0D4
		[CLSCompliant(false)]
		public unsafe static void TexParameter(TextureTarget target, TextureParameterName pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[2046]);
			}
		}

		// Token: 0x0600158B RID: 5515 RVA: 0x0003EF0C File Offset: 0x0003D10C
		[CLSCompliant(false)]
		public unsafe static void TexParameter(TextureTarget target, TextureParameterName pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[2046]);
		}

		// Token: 0x0600158C RID: 5516 RVA: 0x0003EF24 File Offset: 0x0003D124
		public static void TexStorage1D(TextureTarget1d target, int levels, SizedInternalFormat internalformat, int width)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), target, levels, internalformat, width, GL.EntryPoints[2050]);
		}

		// Token: 0x0600158D RID: 5517 RVA: 0x0003EF3C File Offset: 0x0003D13C
		public static void TexStorage2D(TextureTarget2d target, int levels, SizedInternalFormat internalformat, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, levels, internalformat, width, height, GL.EntryPoints[2051]);
		}

		// Token: 0x0600158E RID: 5518 RVA: 0x0003EF54 File Offset: 0x0003D154
		public static void TexStorage2DMultisample(TextureTargetMultisample2d target, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), target, samples, internalformat, width, height, fixedsamplelocations, GL.EntryPoints[2052]);
		}

		// Token: 0x0600158F RID: 5519 RVA: 0x0003EF70 File Offset: 0x0003D170
		public static void TexStorage3D(TextureTarget3d target, int levels, SizedInternalFormat internalformat, int width, int height, int depth)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, levels, internalformat, width, height, depth, GL.EntryPoints[2053]);
		}

		// Token: 0x06001590 RID: 5520 RVA: 0x0003EF8C File Offset: 0x0003D18C
		public static void TexStorage3DMultisample(TextureTargetMultisample3d target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), target, samples, internalformat, width, height, depth, fixedsamplelocations, GL.EntryPoints[2054]);
		}

		// Token: 0x06001591 RID: 5521 RVA: 0x0003EFB4 File Offset: 0x0003D1B4
		public static void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, type, pixels, GL.EntryPoints[2056]);
		}

		// Token: 0x06001592 RID: 5522 RVA: 0x0003EFDC File Offset: 0x0003D1DC
		[CLSCompliant(false)]
		public unsafe static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T6[] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, type, ptr, GL.EntryPoints[2056]);
			}
		}

		// Token: 0x06001593 RID: 5523 RVA: 0x0003F01C File Offset: 0x0003D21C
		[CLSCompliant(false)]
		public unsafe static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T6[,] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, type, ptr, GL.EntryPoints[2056]);
			}
		}

		// Token: 0x06001594 RID: 5524 RVA: 0x0003F060 File Offset: 0x0003D260
		[CLSCompliant(false)]
		public unsafe static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T6[,,] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, type, ptr, GL.EntryPoints[2056]);
			}
		}

		// Token: 0x06001595 RID: 5525 RVA: 0x0003F0A4 File Offset: 0x0003D2A4
		public unsafe static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] ref T6 pixels) where T6 : struct
		{
			fixed (T6* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, type, ptr, GL.EntryPoints[2056]);
			}
		}

		// Token: 0x06001596 RID: 5526 RVA: 0x0003F0D0 File Offset: 0x0003D2D0
		public static void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, pixels, GL.EntryPoints[2058]);
		}

		// Token: 0x06001597 RID: 5527 RVA: 0x0003F0FC File Offset: 0x0003D2FC
		[CLSCompliant(false)]
		public unsafe static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T8[] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[2058]);
			}
		}

		// Token: 0x06001598 RID: 5528 RVA: 0x0003F140 File Offset: 0x0003D340
		[CLSCompliant(false)]
		public unsafe static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T8[,] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[2058]);
			}
		}

		// Token: 0x06001599 RID: 5529 RVA: 0x0003F188 File Offset: 0x0003D388
		[CLSCompliant(false)]
		public unsafe static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T8[,,] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[2058]);
			}
		}

		// Token: 0x0600159A RID: 5530 RVA: 0x0003F1D0 File Offset: 0x0003D3D0
		public unsafe static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T8 pixels) where T8 : struct
		{
			fixed (T8* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[2058]);
			}
		}

		// Token: 0x0600159B RID: 5531 RVA: 0x0003F200 File Offset: 0x0003D400
		public static void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels, GL.EntryPoints[2060]);
		}

		// Token: 0x0600159C RID: 5532 RVA: 0x0003F230 File Offset: 0x0003D430
		[CLSCompliant(false)]
		public unsafe static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[] pixels) where T10 : struct
		{
			fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[2060]);
			}
		}

		// Token: 0x0600159D RID: 5533 RVA: 0x0003F278 File Offset: 0x0003D478
		[CLSCompliant(false)]
		public unsafe static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[,] pixels) where T10 : struct
		{
			fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[2060]);
			}
		}

		// Token: 0x0600159E RID: 5534 RVA: 0x0003F2C4 File Offset: 0x0003D4C4
		[CLSCompliant(false)]
		public unsafe static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[,,] pixels) where T10 : struct
		{
			fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[2060]);
			}
		}

		// Token: 0x0600159F RID: 5535 RVA: 0x0003F310 File Offset: 0x0003D510
		public unsafe static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] ref T10 pixels) where T10 : struct
		{
			fixed (T10* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[2060]);
			}
		}

		// Token: 0x060015A0 RID: 5536 RVA: 0x0003F344 File Offset: 0x0003D544
		[CLSCompliant(false)]
		public static void TextureView(int texture, TextureTarget target, int origtexture, PixelInternalFormat internalformat, int minlevel, int numlevels, int minlayer, int numlayers)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers, GL.EntryPoints[2095]);
		}

		// Token: 0x060015A1 RID: 5537 RVA: 0x0003F370 File Offset: 0x0003D570
		[CLSCompliant(false)]
		public static void TextureView(uint texture, TextureTarget target, uint origtexture, PixelInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers, GL.EntryPoints[2095]);
		}

		// Token: 0x060015A2 RID: 5538 RVA: 0x0003F39C File Offset: 0x0003D59C
		[CLSCompliant(false)]
		public static void TransformFeedbackVaryings(int program, int count, string[] varyings, TransformFeedbackMode bufferMode)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(varyings);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, count, intPtr, bufferMode, GL.EntryPoints[2099]);
			BindingsBase.FreeStringArrayPtr(intPtr, varyings.Length);
		}

		// Token: 0x060015A3 RID: 5539 RVA: 0x0003F3D0 File Offset: 0x0003D5D0
		[CLSCompliant(false)]
		public static void TransformFeedbackVaryings(uint program, int count, string[] varyings, TransformFeedbackMode bufferMode)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(varyings);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, count, intPtr, bufferMode, GL.EntryPoints[2099]);
			BindingsBase.FreeStringArrayPtr(intPtr, varyings.Length);
		}

		// Token: 0x060015A4 RID: 5540 RVA: 0x0003F404 File Offset: 0x0003D604
		public static void Translate(double x, double y, double z)
		{
			calli(System.Void(System.Double,System.Double,System.Double), x, y, z, GL.EntryPoints[2103]);
		}

		// Token: 0x060015A5 RID: 5541 RVA: 0x0003F41C File Offset: 0x0003D61C
		public static void Translate(float x, float y, float z)
		{
			calli(System.Void(System.Single,System.Single,System.Single), x, y, z, GL.EntryPoints[2104]);
		}

		// Token: 0x060015A6 RID: 5542 RVA: 0x0003F434 File Offset: 0x0003D634
		public static void Uniform1(int location, double x)
		{
			calli(System.Void(System.Int32,System.Double), location, x, GL.EntryPoints[2106]);
		}

		// Token: 0x060015A7 RID: 5543 RVA: 0x0003F448 File Offset: 0x0003D648
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, ptr, GL.EntryPoints[2107]);
			}
		}

		// Token: 0x060015A8 RID: 5544 RVA: 0x0003F480 File Offset: 0x0003D680
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, ptr, GL.EntryPoints[2107]);
			}
		}

		// Token: 0x060015A9 RID: 5545 RVA: 0x0003F4A4 File Offset: 0x0003D6A4
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, value, GL.EntryPoints[2107]);
		}

		// Token: 0x060015AA RID: 5546 RVA: 0x0003F4BC File Offset: 0x0003D6BC
		public static void Uniform1(int location, float v0)
		{
			calli(System.Void(System.Int32,System.Single), location, v0, GL.EntryPoints[2108]);
		}

		// Token: 0x060015AB RID: 5547 RVA: 0x0003F4D0 File Offset: 0x0003D6D0
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[2110]);
			}
		}

		// Token: 0x060015AC RID: 5548 RVA: 0x0003F508 File Offset: 0x0003D708
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[2110]);
			}
		}

		// Token: 0x060015AD RID: 5549 RVA: 0x0003F52C File Offset: 0x0003D72C
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, value, GL.EntryPoints[2110]);
		}

		// Token: 0x060015AE RID: 5550 RVA: 0x0003F544 File Offset: 0x0003D744
		public static void Uniform1(int location, int v0)
		{
			calli(System.Void(System.Int32,System.Int32), location, v0, GL.EntryPoints[2112]);
		}

		// Token: 0x060015AF RID: 5551 RVA: 0x0003F558 File Offset: 0x0003D758
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[2116]);
			}
		}

		// Token: 0x060015B0 RID: 5552 RVA: 0x0003F590 File Offset: 0x0003D790
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[2116]);
			}
		}

		// Token: 0x060015B1 RID: 5553 RVA: 0x0003F5B4 File Offset: 0x0003D7B4
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, int* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, value, GL.EntryPoints[2116]);
		}

		// Token: 0x060015B2 RID: 5554 RVA: 0x0003F5CC File Offset: 0x0003D7CC
		[CLSCompliant(false)]
		public static void Uniform1(int location, uint v0)
		{
			calli(System.Void(System.Int32,System.UInt32), location, v0, GL.EntryPoints[2118]);
		}

		// Token: 0x060015B3 RID: 5555 RVA: 0x0003F5E0 File Offset: 0x0003D7E0
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2122]);
			}
		}

		// Token: 0x060015B4 RID: 5556 RVA: 0x0003F618 File Offset: 0x0003D818
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2122]);
			}
		}

		// Token: 0x060015B5 RID: 5557 RVA: 0x0003F63C File Offset: 0x0003D83C
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, uint* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[2122]);
		}

		// Token: 0x060015B6 RID: 5558 RVA: 0x0003F654 File Offset: 0x0003D854
		public static void Uniform2(int location, double x, double y)
		{
			calli(System.Void(System.Int32,System.Double,System.Double), location, x, y, GL.EntryPoints[2124]);
		}

		// Token: 0x060015B7 RID: 5559 RVA: 0x0003F66C File Offset: 0x0003D86C
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, ptr, GL.EntryPoints[2125]);
			}
		}

		// Token: 0x060015B8 RID: 5560 RVA: 0x0003F6A4 File Offset: 0x0003D8A4
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, ptr, GL.EntryPoints[2125]);
			}
		}

		// Token: 0x060015B9 RID: 5561 RVA: 0x0003F6C8 File Offset: 0x0003D8C8
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, value, GL.EntryPoints[2125]);
		}

		// Token: 0x060015BA RID: 5562 RVA: 0x0003F6E0 File Offset: 0x0003D8E0
		public static void Uniform2(int location, float v0, float v1)
		{
			calli(System.Void(System.Int32,System.Single,System.Single), location, v0, v1, GL.EntryPoints[2126]);
		}

		// Token: 0x060015BB RID: 5563 RVA: 0x0003F6F8 File Offset: 0x0003D8F8
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[2128]);
			}
		}

		// Token: 0x060015BC RID: 5564 RVA: 0x0003F730 File Offset: 0x0003D930
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[2128]);
			}
		}

		// Token: 0x060015BD RID: 5565 RVA: 0x0003F754 File Offset: 0x0003D954
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, value, GL.EntryPoints[2128]);
		}

		// Token: 0x060015BE RID: 5566 RVA: 0x0003F76C File Offset: 0x0003D96C
		public static void Uniform2(int location, int v0, int v1)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), location, v0, v1, GL.EntryPoints[2130]);
		}

		// Token: 0x060015BF RID: 5567 RVA: 0x0003F784 File Offset: 0x0003D984
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[2134]);
			}
		}

		// Token: 0x060015C0 RID: 5568 RVA: 0x0003F7BC File Offset: 0x0003D9BC
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, int* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, value, GL.EntryPoints[2134]);
		}

		// Token: 0x060015C1 RID: 5569 RVA: 0x0003F7D4 File Offset: 0x0003D9D4
		[CLSCompliant(false)]
		public static void Uniform2(int location, uint v0, uint v1)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), location, v0, v1, GL.EntryPoints[2136]);
		}

		// Token: 0x060015C2 RID: 5570 RVA: 0x0003F7EC File Offset: 0x0003D9EC
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2140]);
			}
		}

		// Token: 0x060015C3 RID: 5571 RVA: 0x0003F824 File Offset: 0x0003DA24
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2140]);
			}
		}

		// Token: 0x060015C4 RID: 5572 RVA: 0x0003F848 File Offset: 0x0003DA48
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, uint* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[2140]);
		}

		// Token: 0x060015C5 RID: 5573 RVA: 0x0003F860 File Offset: 0x0003DA60
		public static void Uniform3(int location, double x, double y, double z)
		{
			calli(System.Void(System.Int32,System.Double,System.Double,System.Double), location, x, y, z, GL.EntryPoints[2142]);
		}

		// Token: 0x060015C6 RID: 5574 RVA: 0x0003F878 File Offset: 0x0003DA78
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, ptr, GL.EntryPoints[2143]);
			}
		}

		// Token: 0x060015C7 RID: 5575 RVA: 0x0003F8B0 File Offset: 0x0003DAB0
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, ptr, GL.EntryPoints[2143]);
			}
		}

		// Token: 0x060015C8 RID: 5576 RVA: 0x0003F8D4 File Offset: 0x0003DAD4
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, value, GL.EntryPoints[2143]);
		}

		// Token: 0x060015C9 RID: 5577 RVA: 0x0003F8EC File Offset: 0x0003DAEC
		public static void Uniform3(int location, float v0, float v1, float v2)
		{
			calli(System.Void(System.Int32,System.Single,System.Single,System.Single), location, v0, v1, v2, GL.EntryPoints[2144]);
		}

		// Token: 0x060015CA RID: 5578 RVA: 0x0003F904 File Offset: 0x0003DB04
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[2146]);
			}
		}

		// Token: 0x060015CB RID: 5579 RVA: 0x0003F93C File Offset: 0x0003DB3C
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[2146]);
			}
		}

		// Token: 0x060015CC RID: 5580 RVA: 0x0003F960 File Offset: 0x0003DB60
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, value, GL.EntryPoints[2146]);
		}

		// Token: 0x060015CD RID: 5581 RVA: 0x0003F978 File Offset: 0x0003DB78
		public static void Uniform3(int location, int v0, int v1, int v2)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), location, v0, v1, v2, GL.EntryPoints[2148]);
		}

		// Token: 0x060015CE RID: 5582 RVA: 0x0003F990 File Offset: 0x0003DB90
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[2152]);
			}
		}

		// Token: 0x060015CF RID: 5583 RVA: 0x0003F9C8 File Offset: 0x0003DBC8
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[2152]);
			}
		}

		// Token: 0x060015D0 RID: 5584 RVA: 0x0003F9EC File Offset: 0x0003DBEC
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, int* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, value, GL.EntryPoints[2152]);
		}

		// Token: 0x060015D1 RID: 5585 RVA: 0x0003FA04 File Offset: 0x0003DC04
		[CLSCompliant(false)]
		public static void Uniform3(int location, uint v0, uint v1, uint v2)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32), location, v0, v1, v2, GL.EntryPoints[2154]);
		}

		// Token: 0x060015D2 RID: 5586 RVA: 0x0003FA1C File Offset: 0x0003DC1C
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2158]);
			}
		}

		// Token: 0x060015D3 RID: 5587 RVA: 0x0003FA54 File Offset: 0x0003DC54
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2158]);
			}
		}

		// Token: 0x060015D4 RID: 5588 RVA: 0x0003FA78 File Offset: 0x0003DC78
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, uint* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[2158]);
		}

		// Token: 0x060015D5 RID: 5589 RVA: 0x0003FA90 File Offset: 0x0003DC90
		public static void Uniform4(int location, double x, double y, double z, double w)
		{
			calli(System.Void(System.Int32,System.Double,System.Double,System.Double,System.Double), location, x, y, z, w, GL.EntryPoints[2160]);
		}

		// Token: 0x060015D6 RID: 5590 RVA: 0x0003FAA8 File Offset: 0x0003DCA8
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, ptr, GL.EntryPoints[2161]);
			}
		}

		// Token: 0x060015D7 RID: 5591 RVA: 0x0003FAE0 File Offset: 0x0003DCE0
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, ptr, GL.EntryPoints[2161]);
			}
		}

		// Token: 0x060015D8 RID: 5592 RVA: 0x0003FB04 File Offset: 0x0003DD04
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Double*), location, count, value, GL.EntryPoints[2161]);
		}

		// Token: 0x060015D9 RID: 5593 RVA: 0x0003FB1C File Offset: 0x0003DD1C
		public static void Uniform4(int location, float v0, float v1, float v2, float v3)
		{
			calli(System.Void(System.Int32,System.Single,System.Single,System.Single,System.Single), location, v0, v1, v2, v3, GL.EntryPoints[2162]);
		}

		// Token: 0x060015DA RID: 5594 RVA: 0x0003FB34 File Offset: 0x0003DD34
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[2164]);
			}
		}

		// Token: 0x060015DB RID: 5595 RVA: 0x0003FB6C File Offset: 0x0003DD6C
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[2164]);
			}
		}

		// Token: 0x060015DC RID: 5596 RVA: 0x0003FB90 File Offset: 0x0003DD90
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, value, GL.EntryPoints[2164]);
		}

		// Token: 0x060015DD RID: 5597 RVA: 0x0003FBA8 File Offset: 0x0003DDA8
		public static void Uniform4(int location, int v0, int v1, int v2, int v3)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), location, v0, v1, v2, v3, GL.EntryPoints[2166]);
		}

		// Token: 0x060015DE RID: 5598 RVA: 0x0003FBC0 File Offset: 0x0003DDC0
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[2170]);
			}
		}

		// Token: 0x060015DF RID: 5599 RVA: 0x0003FBF8 File Offset: 0x0003DDF8
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[2170]);
			}
		}

		// Token: 0x060015E0 RID: 5600 RVA: 0x0003FC1C File Offset: 0x0003DE1C
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, int* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, value, GL.EntryPoints[2170]);
		}

		// Token: 0x060015E1 RID: 5601 RVA: 0x0003FC34 File Offset: 0x0003DE34
		[CLSCompliant(false)]
		public static void Uniform4(int location, uint v0, uint v1, uint v2, uint v3)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), location, v0, v1, v2, v3, GL.EntryPoints[2172]);
		}

		// Token: 0x060015E2 RID: 5602 RVA: 0x0003FC4C File Offset: 0x0003DE4C
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2176]);
			}
		}

		// Token: 0x060015E3 RID: 5603 RVA: 0x0003FC84 File Offset: 0x0003DE84
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2176]);
			}
		}

		// Token: 0x060015E4 RID: 5604 RVA: 0x0003FCA8 File Offset: 0x0003DEA8
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, uint* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[2176]);
		}

		// Token: 0x060015E5 RID: 5605 RVA: 0x0003FCC0 File Offset: 0x0003DEC0
		[CLSCompliant(false)]
		public static void UniformBlockBinding(int program, int uniformBlockIndex, int uniformBlockBinding)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), program, uniformBlockIndex, uniformBlockBinding, GL.EntryPoints[2178]);
		}

		// Token: 0x060015E6 RID: 5606 RVA: 0x0003FCD8 File Offset: 0x0003DED8
		[CLSCompliant(false)]
		public static void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), program, uniformBlockIndex, uniformBlockBinding, GL.EntryPoints[2178]);
		}

		// Token: 0x060015E7 RID: 5607 RVA: 0x0003FCF0 File Offset: 0x0003DEF0
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2184]);
			}
		}

		// Token: 0x060015E8 RID: 5608 RVA: 0x0003FD28 File Offset: 0x0003DF28
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2184]);
			}
		}

		// Token: 0x060015E9 RID: 5609 RVA: 0x0003FD4C File Offset: 0x0003DF4C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[2184]);
		}

		// Token: 0x060015EA RID: 5610 RVA: 0x0003FD64 File Offset: 0x0003DF64
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2185]);
			}
		}

		// Token: 0x060015EB RID: 5611 RVA: 0x0003FD9C File Offset: 0x0003DF9C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2185]);
			}
		}

		// Token: 0x060015EC RID: 5612 RVA: 0x0003FDC0 File Offset: 0x0003DFC0
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[2185]);
		}

		// Token: 0x060015ED RID: 5613 RVA: 0x0003FDD8 File Offset: 0x0003DFD8
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2187]);
			}
		}

		// Token: 0x060015EE RID: 5614 RVA: 0x0003FE10 File Offset: 0x0003E010
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2187]);
			}
		}

		// Token: 0x060015EF RID: 5615 RVA: 0x0003FE34 File Offset: 0x0003E034
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[2187]);
		}

		// Token: 0x060015F0 RID: 5616 RVA: 0x0003FE4C File Offset: 0x0003E04C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2188]);
			}
		}

		// Token: 0x060015F1 RID: 5617 RVA: 0x0003FE84 File Offset: 0x0003E084
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2188]);
			}
		}

		// Token: 0x060015F2 RID: 5618 RVA: 0x0003FEA8 File Offset: 0x0003E0A8
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[2188]);
		}

		// Token: 0x060015F3 RID: 5619 RVA: 0x0003FEC0 File Offset: 0x0003E0C0
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2189]);
			}
		}

		// Token: 0x060015F4 RID: 5620 RVA: 0x0003FEF8 File Offset: 0x0003E0F8
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2189]);
			}
		}

		// Token: 0x060015F5 RID: 5621 RVA: 0x0003FF1C File Offset: 0x0003E11C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[2189]);
		}

		// Token: 0x060015F6 RID: 5622 RVA: 0x0003FF34 File Offset: 0x0003E134
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2190]);
			}
		}

		// Token: 0x060015F7 RID: 5623 RVA: 0x0003FF6C File Offset: 0x0003E16C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2190]);
			}
		}

		// Token: 0x060015F8 RID: 5624 RVA: 0x0003FF90 File Offset: 0x0003E190
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[2190]);
		}

		// Token: 0x060015F9 RID: 5625 RVA: 0x0003FFA8 File Offset: 0x0003E1A8
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2191]);
			}
		}

		// Token: 0x060015FA RID: 5626 RVA: 0x0003FFE0 File Offset: 0x0003E1E0
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2191]);
			}
		}

		// Token: 0x060015FB RID: 5627 RVA: 0x00040004 File Offset: 0x0003E204
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[2191]);
		}

		// Token: 0x060015FC RID: 5628 RVA: 0x0004001C File Offset: 0x0003E21C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2192]);
			}
		}

		// Token: 0x060015FD RID: 5629 RVA: 0x00040054 File Offset: 0x0003E254
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2192]);
			}
		}

		// Token: 0x060015FE RID: 5630 RVA: 0x00040078 File Offset: 0x0003E278
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[2192]);
		}

		// Token: 0x060015FF RID: 5631 RVA: 0x00040090 File Offset: 0x0003E290
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2194]);
			}
		}

		// Token: 0x06001600 RID: 5632 RVA: 0x000400C8 File Offset: 0x0003E2C8
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2194]);
			}
		}

		// Token: 0x06001601 RID: 5633 RVA: 0x000400EC File Offset: 0x0003E2EC
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[2194]);
		}

		// Token: 0x06001602 RID: 5634 RVA: 0x00040104 File Offset: 0x0003E304
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2195]);
			}
		}

		// Token: 0x06001603 RID: 5635 RVA: 0x0004013C File Offset: 0x0003E33C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2195]);
			}
		}

		// Token: 0x06001604 RID: 5636 RVA: 0x00040160 File Offset: 0x0003E360
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[2195]);
		}

		// Token: 0x06001605 RID: 5637 RVA: 0x00040178 File Offset: 0x0003E378
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2196]);
			}
		}

		// Token: 0x06001606 RID: 5638 RVA: 0x000401B0 File Offset: 0x0003E3B0
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2196]);
			}
		}

		// Token: 0x06001607 RID: 5639 RVA: 0x000401D4 File Offset: 0x0003E3D4
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[2196]);
		}

		// Token: 0x06001608 RID: 5640 RVA: 0x000401EC File Offset: 0x0003E3EC
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2197]);
			}
		}

		// Token: 0x06001609 RID: 5641 RVA: 0x00040224 File Offset: 0x0003E424
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2197]);
			}
		}

		// Token: 0x0600160A RID: 5642 RVA: 0x00040248 File Offset: 0x0003E448
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[2197]);
		}

		// Token: 0x0600160B RID: 5643 RVA: 0x00040260 File Offset: 0x0003E460
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2198]);
			}
		}

		// Token: 0x0600160C RID: 5644 RVA: 0x00040298 File Offset: 0x0003E498
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2198]);
			}
		}

		// Token: 0x0600160D RID: 5645 RVA: 0x000402BC File Offset: 0x0003E4BC
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[2198]);
		}

		// Token: 0x0600160E RID: 5646 RVA: 0x000402D4 File Offset: 0x0003E4D4
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2199]);
			}
		}

		// Token: 0x0600160F RID: 5647 RVA: 0x0004030C File Offset: 0x0003E50C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2199]);
			}
		}

		// Token: 0x06001610 RID: 5648 RVA: 0x00040330 File Offset: 0x0003E530
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[2199]);
		}

		// Token: 0x06001611 RID: 5649 RVA: 0x00040348 File Offset: 0x0003E548
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2201]);
			}
		}

		// Token: 0x06001612 RID: 5650 RVA: 0x00040380 File Offset: 0x0003E580
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2201]);
			}
		}

		// Token: 0x06001613 RID: 5651 RVA: 0x000403A4 File Offset: 0x0003E5A4
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[2201]);
		}

		// Token: 0x06001614 RID: 5652 RVA: 0x000403BC File Offset: 0x0003E5BC
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2202]);
			}
		}

		// Token: 0x06001615 RID: 5653 RVA: 0x000403F4 File Offset: 0x0003E5F4
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2202]);
			}
		}

		// Token: 0x06001616 RID: 5654 RVA: 0x00040418 File Offset: 0x0003E618
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[2202]);
		}

		// Token: 0x06001617 RID: 5655 RVA: 0x00040430 File Offset: 0x0003E630
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, double[] value)
		{
			fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2203]);
			}
		}

		// Token: 0x06001618 RID: 5656 RVA: 0x00040468 File Offset: 0x0003E668
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, ref double value)
		{
			fixed (double* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, ptr, GL.EntryPoints[2203]);
			}
		}

		// Token: 0x06001619 RID: 5657 RVA: 0x0004048C File Offset: 0x0003E68C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, double* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Double*), location, count, transpose, value, GL.EntryPoints[2203]);
		}

		// Token: 0x0600161A RID: 5658 RVA: 0x000404A4 File Offset: 0x0003E6A4
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2204]);
			}
		}

		// Token: 0x0600161B RID: 5659 RVA: 0x000404DC File Offset: 0x0003E6DC
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2204]);
			}
		}

		// Token: 0x0600161C RID: 5660 RVA: 0x00040500 File Offset: 0x0003E700
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[2204]);
		}

		// Token: 0x0600161D RID: 5661 RVA: 0x00040518 File Offset: 0x0003E718
		[CLSCompliant(false)]
		public unsafe static void UniformSubroutines(ShaderType shadertype, int count, int[] indices)
		{
			fixed (int* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, count, ptr, GL.EntryPoints[2205]);
			}
		}

		// Token: 0x0600161E RID: 5662 RVA: 0x00040550 File Offset: 0x0003E750
		[CLSCompliant(false)]
		public unsafe static void UniformSubroutines(ShaderType shadertype, int count, ref int indices)
		{
			fixed (int* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, count, ptr, GL.EntryPoints[2205]);
			}
		}

		// Token: 0x0600161F RID: 5663 RVA: 0x00040574 File Offset: 0x0003E774
		[CLSCompliant(false)]
		public unsafe static void UniformSubroutines(ShaderType shadertype, int count, int* indices)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, count, indices, GL.EntryPoints[2205]);
		}

		// Token: 0x06001620 RID: 5664 RVA: 0x0004058C File Offset: 0x0003E78C
		[CLSCompliant(false)]
		public unsafe static void UniformSubroutines(ShaderType shadertype, int count, uint[] indices)
		{
			fixed (uint* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, count, ptr, GL.EntryPoints[2205]);
			}
		}

		// Token: 0x06001621 RID: 5665 RVA: 0x000405C4 File Offset: 0x0003E7C4
		[CLSCompliant(false)]
		public unsafe static void UniformSubroutines(ShaderType shadertype, int count, ref uint indices)
		{
			fixed (uint* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, count, ptr, GL.EntryPoints[2205]);
			}
		}

		// Token: 0x06001622 RID: 5666 RVA: 0x000405E8 File Offset: 0x0003E7E8
		[CLSCompliant(false)]
		public unsafe static void UniformSubroutines(ShaderType shadertype, int count, uint* indices)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), shadertype, count, indices, GL.EntryPoints[2205]);
		}

		// Token: 0x06001623 RID: 5667 RVA: 0x00040600 File Offset: 0x0003E800
		public static bool UnmapBuffer(BufferTarget target)
		{
			return calli(System.Byte(System.Int32), target, GL.EntryPoints[2209]);
		}

		// Token: 0x06001624 RID: 5668 RVA: 0x00040614 File Offset: 0x0003E814
		[CLSCompliant(false)]
		public static void UseProgram(int program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[2215]);
		}

		// Token: 0x06001625 RID: 5669 RVA: 0x00040628 File Offset: 0x0003E828
		[CLSCompliant(false)]
		public static void UseProgram(uint program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[2215]);
		}

		// Token: 0x06001626 RID: 5670 RVA: 0x0004063C File Offset: 0x0003E83C
		[CLSCompliant(false)]
		public static void UseProgramStages(int pipeline, ProgramStageMask stages, int program)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32), pipeline, stages, program, GL.EntryPoints[2217]);
		}

		// Token: 0x06001627 RID: 5671 RVA: 0x00040654 File Offset: 0x0003E854
		[CLSCompliant(false)]
		public static void UseProgramStages(uint pipeline, ProgramStageMask stages, uint program)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32), pipeline, stages, program, GL.EntryPoints[2217]);
		}

		// Token: 0x06001628 RID: 5672 RVA: 0x0004066C File Offset: 0x0003E86C
		[CLSCompliant(false)]
		public static void ValidateProgram(int program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[2220]);
		}

		// Token: 0x06001629 RID: 5673 RVA: 0x00040680 File Offset: 0x0003E880
		[CLSCompliant(false)]
		public static void ValidateProgram(uint program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[2220]);
		}

		// Token: 0x0600162A RID: 5674 RVA: 0x00040694 File Offset: 0x0003E894
		[CLSCompliant(false)]
		public static void ValidateProgramPipeline(int pipeline)
		{
			calli(System.Void(System.UInt32), pipeline, GL.EntryPoints[2222]);
		}

		// Token: 0x0600162B RID: 5675 RVA: 0x000406A8 File Offset: 0x0003E8A8
		[CLSCompliant(false)]
		public static void ValidateProgramPipeline(uint pipeline)
		{
			calli(System.Void(System.UInt32), pipeline, GL.EntryPoints[2222]);
		}

		// Token: 0x0600162C RID: 5676 RVA: 0x000406BC File Offset: 0x0003E8BC
		public static void Vertex2(double x, double y)
		{
			calli(System.Void(System.Double,System.Double), x, y, GL.EntryPoints[2246]);
		}

		// Token: 0x0600162D RID: 5677 RVA: 0x000406D0 File Offset: 0x0003E8D0
		[CLSCompliant(false)]
		public unsafe static void Vertex2(double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[2247]);
			}
		}

		// Token: 0x0600162E RID: 5678 RVA: 0x00040704 File Offset: 0x0003E904
		[CLSCompliant(false)]
		public unsafe static void Vertex2(ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[2247]);
			}
		}

		// Token: 0x0600162F RID: 5679 RVA: 0x00040728 File Offset: 0x0003E928
		[CLSCompliant(false)]
		public unsafe static void Vertex2(double* v)
		{
			calli(System.Void(System.Double*), v, GL.EntryPoints[2247]);
		}

		// Token: 0x06001630 RID: 5680 RVA: 0x0004073C File Offset: 0x0003E93C
		public static void Vertex2(float x, float y)
		{
			calli(System.Void(System.Single,System.Single), x, y, GL.EntryPoints[2248]);
		}

		// Token: 0x06001631 RID: 5681 RVA: 0x00040750 File Offset: 0x0003E950
		[CLSCompliant(false)]
		public unsafe static void Vertex2(float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[2249]);
			}
		}

		// Token: 0x06001632 RID: 5682 RVA: 0x00040784 File Offset: 0x0003E984
		[CLSCompliant(false)]
		public unsafe static void Vertex2(ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[2249]);
			}
		}

		// Token: 0x06001633 RID: 5683 RVA: 0x000407A8 File Offset: 0x0003E9A8
		[CLSCompliant(false)]
		public unsafe static void Vertex2(float* v)
		{
			calli(System.Void(System.Single*), v, GL.EntryPoints[2249]);
		}

		// Token: 0x06001634 RID: 5684 RVA: 0x000407BC File Offset: 0x0003E9BC
		public static void Vertex2(int x, int y)
		{
			calli(System.Void(System.Int32,System.Int32), x, y, GL.EntryPoints[2252]);
		}

		// Token: 0x06001635 RID: 5685 RVA: 0x000407D0 File Offset: 0x0003E9D0
		[CLSCompliant(false)]
		public unsafe static void Vertex2(int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2253]);
			}
		}

		// Token: 0x06001636 RID: 5686 RVA: 0x00040804 File Offset: 0x0003EA04
		[CLSCompliant(false)]
		public unsafe static void Vertex2(ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2253]);
			}
		}

		// Token: 0x06001637 RID: 5687 RVA: 0x00040828 File Offset: 0x0003EA28
		[CLSCompliant(false)]
		public unsafe static void Vertex2(int* v)
		{
			calli(System.Void(System.Int32*), v, GL.EntryPoints[2253]);
		}

		// Token: 0x06001638 RID: 5688 RVA: 0x0004083C File Offset: 0x0003EA3C
		public static void Vertex2(short x, short y)
		{
			calli(System.Void(System.Int16,System.Int16), x, y, GL.EntryPoints[2254]);
		}

		// Token: 0x06001639 RID: 5689 RVA: 0x00040850 File Offset: 0x0003EA50
		[CLSCompliant(false)]
		public unsafe static void Vertex2(short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2255]);
			}
		}

		// Token: 0x0600163A RID: 5690 RVA: 0x00040884 File Offset: 0x0003EA84
		[CLSCompliant(false)]
		public unsafe static void Vertex2(ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2255]);
			}
		}

		// Token: 0x0600163B RID: 5691 RVA: 0x000408A8 File Offset: 0x0003EAA8
		[CLSCompliant(false)]
		public unsafe static void Vertex2(short* v)
		{
			calli(System.Void(System.Int16*), v, GL.EntryPoints[2255]);
		}

		// Token: 0x0600163C RID: 5692 RVA: 0x000408BC File Offset: 0x0003EABC
		public static void Vertex3(double x, double y, double z)
		{
			calli(System.Void(System.Double,System.Double,System.Double), x, y, z, GL.EntryPoints[2260]);
		}

		// Token: 0x0600163D RID: 5693 RVA: 0x000408D4 File Offset: 0x0003EAD4
		[CLSCompliant(false)]
		public unsafe static void Vertex3(double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[2261]);
			}
		}

		// Token: 0x0600163E RID: 5694 RVA: 0x00040908 File Offset: 0x0003EB08
		[CLSCompliant(false)]
		public unsafe static void Vertex3(ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[2261]);
			}
		}

		// Token: 0x0600163F RID: 5695 RVA: 0x0004092C File Offset: 0x0003EB2C
		[CLSCompliant(false)]
		public unsafe static void Vertex3(double* v)
		{
			calli(System.Void(System.Double*), v, GL.EntryPoints[2261]);
		}

		// Token: 0x06001640 RID: 5696 RVA: 0x00040940 File Offset: 0x0003EB40
		public static void Vertex3(float x, float y, float z)
		{
			calli(System.Void(System.Single,System.Single,System.Single), x, y, z, GL.EntryPoints[2262]);
		}

		// Token: 0x06001641 RID: 5697 RVA: 0x00040958 File Offset: 0x0003EB58
		[CLSCompliant(false)]
		public unsafe static void Vertex3(float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[2263]);
			}
		}

		// Token: 0x06001642 RID: 5698 RVA: 0x0004098C File Offset: 0x0003EB8C
		[CLSCompliant(false)]
		public unsafe static void Vertex3(ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[2263]);
			}
		}

		// Token: 0x06001643 RID: 5699 RVA: 0x000409B0 File Offset: 0x0003EBB0
		[CLSCompliant(false)]
		public unsafe static void Vertex3(float* v)
		{
			calli(System.Void(System.Single*), v, GL.EntryPoints[2263]);
		}

		// Token: 0x06001644 RID: 5700 RVA: 0x000409C4 File Offset: 0x0003EBC4
		public static void Vertex3(int x, int y, int z)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), x, y, z, GL.EntryPoints[2266]);
		}

		// Token: 0x06001645 RID: 5701 RVA: 0x000409DC File Offset: 0x0003EBDC
		[CLSCompliant(false)]
		public unsafe static void Vertex3(int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2267]);
			}
		}

		// Token: 0x06001646 RID: 5702 RVA: 0x00040A10 File Offset: 0x0003EC10
		[CLSCompliant(false)]
		public unsafe static void Vertex3(ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2267]);
			}
		}

		// Token: 0x06001647 RID: 5703 RVA: 0x00040A34 File Offset: 0x0003EC34
		[CLSCompliant(false)]
		public unsafe static void Vertex3(int* v)
		{
			calli(System.Void(System.Int32*), v, GL.EntryPoints[2267]);
		}

		// Token: 0x06001648 RID: 5704 RVA: 0x00040A48 File Offset: 0x0003EC48
		public static void Vertex3(short x, short y, short z)
		{
			calli(System.Void(System.Int16,System.Int16,System.Int16), x, y, z, GL.EntryPoints[2268]);
		}

		// Token: 0x06001649 RID: 5705 RVA: 0x00040A60 File Offset: 0x0003EC60
		[CLSCompliant(false)]
		public unsafe static void Vertex3(short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2269]);
			}
		}

		// Token: 0x0600164A RID: 5706 RVA: 0x00040A94 File Offset: 0x0003EC94
		[CLSCompliant(false)]
		public unsafe static void Vertex3(ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2269]);
			}
		}

		// Token: 0x0600164B RID: 5707 RVA: 0x00040AB8 File Offset: 0x0003ECB8
		[CLSCompliant(false)]
		public unsafe static void Vertex3(short* v)
		{
			calli(System.Void(System.Int16*), v, GL.EntryPoints[2269]);
		}

		// Token: 0x0600164C RID: 5708 RVA: 0x00040ACC File Offset: 0x0003ECCC
		public static void Vertex4(double x, double y, double z, double w)
		{
			calli(System.Void(System.Double,System.Double,System.Double,System.Double), x, y, z, w, GL.EntryPoints[2274]);
		}

		// Token: 0x0600164D RID: 5709 RVA: 0x00040AE4 File Offset: 0x0003ECE4
		[CLSCompliant(false)]
		public unsafe static void Vertex4(double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[2275]);
			}
		}

		// Token: 0x0600164E RID: 5710 RVA: 0x00040B18 File Offset: 0x0003ED18
		[CLSCompliant(false)]
		public unsafe static void Vertex4(ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[2275]);
			}
		}

		// Token: 0x0600164F RID: 5711 RVA: 0x00040B3C File Offset: 0x0003ED3C
		[CLSCompliant(false)]
		public unsafe static void Vertex4(double* v)
		{
			calli(System.Void(System.Double*), v, GL.EntryPoints[2275]);
		}

		// Token: 0x06001650 RID: 5712 RVA: 0x00040B50 File Offset: 0x0003ED50
		public static void Vertex4(float x, float y, float z, float w)
		{
			calli(System.Void(System.Single,System.Single,System.Single,System.Single), x, y, z, w, GL.EntryPoints[2276]);
		}

		// Token: 0x06001651 RID: 5713 RVA: 0x00040B68 File Offset: 0x0003ED68
		[CLSCompliant(false)]
		public unsafe static void Vertex4(float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[2277]);
			}
		}

		// Token: 0x06001652 RID: 5714 RVA: 0x00040B9C File Offset: 0x0003ED9C
		[CLSCompliant(false)]
		public unsafe static void Vertex4(ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[2277]);
			}
		}

		// Token: 0x06001653 RID: 5715 RVA: 0x00040BC0 File Offset: 0x0003EDC0
		[CLSCompliant(false)]
		public unsafe static void Vertex4(float* v)
		{
			calli(System.Void(System.Single*), v, GL.EntryPoints[2277]);
		}

		// Token: 0x06001654 RID: 5716 RVA: 0x00040BD4 File Offset: 0x0003EDD4
		public static void Vertex4(int x, int y, int z, int w)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), x, y, z, w, GL.EntryPoints[2280]);
		}

		// Token: 0x06001655 RID: 5717 RVA: 0x00040BEC File Offset: 0x0003EDEC
		[CLSCompliant(false)]
		public unsafe static void Vertex4(int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2281]);
			}
		}

		// Token: 0x06001656 RID: 5718 RVA: 0x00040C20 File Offset: 0x0003EE20
		[CLSCompliant(false)]
		public unsafe static void Vertex4(ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2281]);
			}
		}

		// Token: 0x06001657 RID: 5719 RVA: 0x00040C44 File Offset: 0x0003EE44
		[CLSCompliant(false)]
		public unsafe static void Vertex4(int* v)
		{
			calli(System.Void(System.Int32*), v, GL.EntryPoints[2281]);
		}

		// Token: 0x06001658 RID: 5720 RVA: 0x00040C58 File Offset: 0x0003EE58
		public static void Vertex4(short x, short y, short z, short w)
		{
			calli(System.Void(System.Int16,System.Int16,System.Int16,System.Int16), x, y, z, w, GL.EntryPoints[2282]);
		}

		// Token: 0x06001659 RID: 5721 RVA: 0x00040C70 File Offset: 0x0003EE70
		[CLSCompliant(false)]
		public unsafe static void Vertex4(short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2283]);
			}
		}

		// Token: 0x0600165A RID: 5722 RVA: 0x00040CA4 File Offset: 0x0003EEA4
		[CLSCompliant(false)]
		public unsafe static void Vertex4(ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2283]);
			}
		}

		// Token: 0x0600165B RID: 5723 RVA: 0x00040CC8 File Offset: 0x0003EEC8
		[CLSCompliant(false)]
		public unsafe static void Vertex4(short* v)
		{
			calli(System.Void(System.Int16*), v, GL.EntryPoints[2283]);
		}

		// Token: 0x0600165C RID: 5724 RVA: 0x00040CDC File Offset: 0x0003EEDC
		[CLSCompliant(false)]
		public static void VertexAttrib1(int index, double x)
		{
			calli(System.Void(System.UInt32,System.Double), index, x, GL.EntryPoints[2308]);
		}

		// Token: 0x0600165D RID: 5725 RVA: 0x00040CF0 File Offset: 0x0003EEF0
		[CLSCompliant(false)]
		public static void VertexAttrib1(uint index, double x)
		{
			calli(System.Void(System.UInt32,System.Double), index, x, GL.EntryPoints[2308]);
		}

		// Token: 0x0600165E RID: 5726 RVA: 0x00040D04 File Offset: 0x0003EF04
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib1(int index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2311]);
		}

		// Token: 0x0600165F RID: 5727 RVA: 0x00040D18 File Offset: 0x0003EF18
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib1(uint index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2311]);
		}

		// Token: 0x06001660 RID: 5728 RVA: 0x00040D2C File Offset: 0x0003EF2C
		[CLSCompliant(false)]
		public static void VertexAttrib1(int index, float x)
		{
			calli(System.Void(System.UInt32,System.Single), index, x, GL.EntryPoints[2314]);
		}

		// Token: 0x06001661 RID: 5729 RVA: 0x00040D40 File Offset: 0x0003EF40
		[CLSCompliant(false)]
		public static void VertexAttrib1(uint index, float x)
		{
			calli(System.Void(System.UInt32,System.Single), index, x, GL.EntryPoints[2314]);
		}

		// Token: 0x06001662 RID: 5730 RVA: 0x00040D54 File Offset: 0x0003EF54
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib1(int index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2317]);
		}

		// Token: 0x06001663 RID: 5731 RVA: 0x00040D68 File Offset: 0x0003EF68
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib1(uint index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2317]);
		}

		// Token: 0x06001664 RID: 5732 RVA: 0x00040D7C File Offset: 0x0003EF7C
		[CLSCompliant(false)]
		public static void VertexAttrib1(int index, short x)
		{
			calli(System.Void(System.UInt32,System.Int16), index, x, GL.EntryPoints[2322]);
		}

		// Token: 0x06001665 RID: 5733 RVA: 0x00040D90 File Offset: 0x0003EF90
		[CLSCompliant(false)]
		public static void VertexAttrib1(uint index, short x)
		{
			calli(System.Void(System.UInt32,System.Int16), index, x, GL.EntryPoints[2322]);
		}

		// Token: 0x06001666 RID: 5734 RVA: 0x00040DA4 File Offset: 0x0003EFA4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib1(int index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2325]);
		}

		// Token: 0x06001667 RID: 5735 RVA: 0x00040DB8 File Offset: 0x0003EFB8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib1(uint index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2325]);
		}

		// Token: 0x06001668 RID: 5736 RVA: 0x00040DCC File Offset: 0x0003EFCC
		[CLSCompliant(false)]
		public static void VertexAttrib2(int index, double x, double y)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double), index, x, y, GL.EntryPoints[2328]);
		}

		// Token: 0x06001669 RID: 5737 RVA: 0x00040DE4 File Offset: 0x0003EFE4
		[CLSCompliant(false)]
		public static void VertexAttrib2(uint index, double x, double y)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double), index, x, y, GL.EntryPoints[2328]);
		}

		// Token: 0x0600166A RID: 5738 RVA: 0x00040DFC File Offset: 0x0003EFFC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2331]);
			}
		}

		// Token: 0x0600166B RID: 5739 RVA: 0x00040E30 File Offset: 0x0003F030
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2331]);
			}
		}

		// Token: 0x0600166C RID: 5740 RVA: 0x00040E54 File Offset: 0x0003F054
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2331]);
		}

		// Token: 0x0600166D RID: 5741 RVA: 0x00040E68 File Offset: 0x0003F068
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2331]);
			}
		}

		// Token: 0x0600166E RID: 5742 RVA: 0x00040E9C File Offset: 0x0003F09C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2331]);
			}
		}

		// Token: 0x0600166F RID: 5743 RVA: 0x00040EC0 File Offset: 0x0003F0C0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2331]);
		}

		// Token: 0x06001670 RID: 5744 RVA: 0x00040ED4 File Offset: 0x0003F0D4
		[CLSCompliant(false)]
		public static void VertexAttrib2(int index, float x, float y)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single), index, x, y, GL.EntryPoints[2334]);
		}

		// Token: 0x06001671 RID: 5745 RVA: 0x00040EEC File Offset: 0x0003F0EC
		[CLSCompliant(false)]
		public static void VertexAttrib2(uint index, float x, float y)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single), index, x, y, GL.EntryPoints[2334]);
		}

		// Token: 0x06001672 RID: 5746 RVA: 0x00040F04 File Offset: 0x0003F104
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2337]);
			}
		}

		// Token: 0x06001673 RID: 5747 RVA: 0x00040F38 File Offset: 0x0003F138
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2337]);
			}
		}

		// Token: 0x06001674 RID: 5748 RVA: 0x00040F5C File Offset: 0x0003F15C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2337]);
		}

		// Token: 0x06001675 RID: 5749 RVA: 0x00040F70 File Offset: 0x0003F170
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2337]);
			}
		}

		// Token: 0x06001676 RID: 5750 RVA: 0x00040FA4 File Offset: 0x0003F1A4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2337]);
			}
		}

		// Token: 0x06001677 RID: 5751 RVA: 0x00040FC8 File Offset: 0x0003F1C8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2337]);
		}

		// Token: 0x06001678 RID: 5752 RVA: 0x00040FDC File Offset: 0x0003F1DC
		[CLSCompliant(false)]
		public static void VertexAttrib2(int index, short x, short y)
		{
			calli(System.Void(System.UInt32,System.Int16,System.Int16), index, x, y, GL.EntryPoints[2342]);
		}

		// Token: 0x06001679 RID: 5753 RVA: 0x00040FF4 File Offset: 0x0003F1F4
		[CLSCompliant(false)]
		public static void VertexAttrib2(uint index, short x, short y)
		{
			calli(System.Void(System.UInt32,System.Int16,System.Int16), index, x, y, GL.EntryPoints[2342]);
		}

		// Token: 0x0600167A RID: 5754 RVA: 0x0004100C File Offset: 0x0003F20C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2345]);
			}
		}

		// Token: 0x0600167B RID: 5755 RVA: 0x00041040 File Offset: 0x0003F240
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2345]);
			}
		}

		// Token: 0x0600167C RID: 5756 RVA: 0x00041064 File Offset: 0x0003F264
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2345]);
		}

		// Token: 0x0600167D RID: 5757 RVA: 0x00041078 File Offset: 0x0003F278
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2345]);
			}
		}

		// Token: 0x0600167E RID: 5758 RVA: 0x000410AC File Offset: 0x0003F2AC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2345]);
			}
		}

		// Token: 0x0600167F RID: 5759 RVA: 0x000410D0 File Offset: 0x0003F2D0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2345]);
		}

		// Token: 0x06001680 RID: 5760 RVA: 0x000410E4 File Offset: 0x0003F2E4
		[CLSCompliant(false)]
		public static void VertexAttrib3(int index, double x, double y, double z)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double,System.Double), index, x, y, z, GL.EntryPoints[2348]);
		}

		// Token: 0x06001681 RID: 5761 RVA: 0x000410FC File Offset: 0x0003F2FC
		[CLSCompliant(false)]
		public static void VertexAttrib3(uint index, double x, double y, double z)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double,System.Double), index, x, y, z, GL.EntryPoints[2348]);
		}

		// Token: 0x06001682 RID: 5762 RVA: 0x00041114 File Offset: 0x0003F314
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2351]);
			}
		}

		// Token: 0x06001683 RID: 5763 RVA: 0x00041148 File Offset: 0x0003F348
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2351]);
			}
		}

		// Token: 0x06001684 RID: 5764 RVA: 0x0004116C File Offset: 0x0003F36C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2351]);
		}

		// Token: 0x06001685 RID: 5765 RVA: 0x00041180 File Offset: 0x0003F380
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2351]);
			}
		}

		// Token: 0x06001686 RID: 5766 RVA: 0x000411B4 File Offset: 0x0003F3B4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2351]);
			}
		}

		// Token: 0x06001687 RID: 5767 RVA: 0x000411D8 File Offset: 0x0003F3D8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2351]);
		}

		// Token: 0x06001688 RID: 5768 RVA: 0x000411EC File Offset: 0x0003F3EC
		[CLSCompliant(false)]
		public static void VertexAttrib3(int index, float x, float y, float z)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single,System.Single), index, x, y, z, GL.EntryPoints[2354]);
		}

		// Token: 0x06001689 RID: 5769 RVA: 0x00041204 File Offset: 0x0003F404
		[CLSCompliant(false)]
		public static void VertexAttrib3(uint index, float x, float y, float z)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single,System.Single), index, x, y, z, GL.EntryPoints[2354]);
		}

		// Token: 0x0600168A RID: 5770 RVA: 0x0004121C File Offset: 0x0003F41C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2357]);
			}
		}

		// Token: 0x0600168B RID: 5771 RVA: 0x00041250 File Offset: 0x0003F450
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2357]);
			}
		}

		// Token: 0x0600168C RID: 5772 RVA: 0x00041274 File Offset: 0x0003F474
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2357]);
		}

		// Token: 0x0600168D RID: 5773 RVA: 0x00041288 File Offset: 0x0003F488
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2357]);
			}
		}

		// Token: 0x0600168E RID: 5774 RVA: 0x000412BC File Offset: 0x0003F4BC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2357]);
			}
		}

		// Token: 0x0600168F RID: 5775 RVA: 0x000412E0 File Offset: 0x0003F4E0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2357]);
		}

		// Token: 0x06001690 RID: 5776 RVA: 0x000412F4 File Offset: 0x0003F4F4
		[CLSCompliant(false)]
		public static void VertexAttrib3(int index, short x, short y, short z)
		{
			calli(System.Void(System.UInt32,System.Int16,System.Int16,System.Int16), index, x, y, z, GL.EntryPoints[2362]);
		}

		// Token: 0x06001691 RID: 5777 RVA: 0x0004130C File Offset: 0x0003F50C
		[CLSCompliant(false)]
		public static void VertexAttrib3(uint index, short x, short y, short z)
		{
			calli(System.Void(System.UInt32,System.Int16,System.Int16,System.Int16), index, x, y, z, GL.EntryPoints[2362]);
		}

		// Token: 0x06001692 RID: 5778 RVA: 0x00041324 File Offset: 0x0003F524
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2365]);
			}
		}

		// Token: 0x06001693 RID: 5779 RVA: 0x00041358 File Offset: 0x0003F558
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2365]);
			}
		}

		// Token: 0x06001694 RID: 5780 RVA: 0x0004137C File Offset: 0x0003F57C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2365]);
		}

		// Token: 0x06001695 RID: 5781 RVA: 0x00041390 File Offset: 0x0003F590
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2365]);
			}
		}

		// Token: 0x06001696 RID: 5782 RVA: 0x000413C4 File Offset: 0x0003F5C4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2365]);
			}
		}

		// Token: 0x06001697 RID: 5783 RVA: 0x000413E8 File Offset: 0x0003F5E8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2365]);
		}

		// Token: 0x06001698 RID: 5784 RVA: 0x000413FC File Offset: 0x0003F5FC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, sbyte[] v)
		{
			fixed (sbyte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[2368]);
			}
		}

		// Token: 0x06001699 RID: 5785 RVA: 0x00041430 File Offset: 0x0003F630
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref sbyte v)
		{
			fixed (sbyte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[2368]);
			}
		}

		// Token: 0x0600169A RID: 5786 RVA: 0x00041454 File Offset: 0x0003F654
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, sbyte* v)
		{
			calli(System.Void(System.UInt32,System.SByte*), index, v, GL.EntryPoints[2368]);
		}

		// Token: 0x0600169B RID: 5787 RVA: 0x00041468 File Offset: 0x0003F668
		[CLSCompliant(false)]
		public static void VertexAttrib4(int index, double x, double y, double z, double w)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double,System.Double,System.Double), index, x, y, z, w, GL.EntryPoints[2370]);
		}

		// Token: 0x0600169C RID: 5788 RVA: 0x00041480 File Offset: 0x0003F680
		[CLSCompliant(false)]
		public static void VertexAttrib4(uint index, double x, double y, double z, double w)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double,System.Double,System.Double), index, x, y, z, w, GL.EntryPoints[2370]);
		}

		// Token: 0x0600169D RID: 5789 RVA: 0x00041498 File Offset: 0x0003F698
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2373]);
			}
		}

		// Token: 0x0600169E RID: 5790 RVA: 0x000414CC File Offset: 0x0003F6CC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2373]);
			}
		}

		// Token: 0x0600169F RID: 5791 RVA: 0x000414F0 File Offset: 0x0003F6F0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2373]);
		}

		// Token: 0x060016A0 RID: 5792 RVA: 0x00041504 File Offset: 0x0003F704
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2373]);
			}
		}

		// Token: 0x060016A1 RID: 5793 RVA: 0x00041538 File Offset: 0x0003F738
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2373]);
			}
		}

		// Token: 0x060016A2 RID: 5794 RVA: 0x0004155C File Offset: 0x0003F75C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2373]);
		}

		// Token: 0x060016A3 RID: 5795 RVA: 0x00041570 File Offset: 0x0003F770
		[CLSCompliant(false)]
		public static void VertexAttrib4(int index, float x, float y, float z, float w)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single), index, x, y, z, w, GL.EntryPoints[2376]);
		}

		// Token: 0x060016A4 RID: 5796 RVA: 0x00041588 File Offset: 0x0003F788
		[CLSCompliant(false)]
		public static void VertexAttrib4(uint index, float x, float y, float z, float w)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single), index, x, y, z, w, GL.EntryPoints[2376]);
		}

		// Token: 0x060016A5 RID: 5797 RVA: 0x000415A0 File Offset: 0x0003F7A0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2379]);
			}
		}

		// Token: 0x060016A6 RID: 5798 RVA: 0x000415D4 File Offset: 0x0003F7D4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2379]);
			}
		}

		// Token: 0x060016A7 RID: 5799 RVA: 0x000415F8 File Offset: 0x0003F7F8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2379]);
		}

		// Token: 0x060016A8 RID: 5800 RVA: 0x0004160C File Offset: 0x0003F80C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2379]);
			}
		}

		// Token: 0x060016A9 RID: 5801 RVA: 0x00041640 File Offset: 0x0003F840
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2379]);
			}
		}

		// Token: 0x060016AA RID: 5802 RVA: 0x00041664 File Offset: 0x0003F864
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2379]);
		}

		// Token: 0x060016AB RID: 5803 RVA: 0x00041678 File Offset: 0x0003F878
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2384]);
			}
		}

		// Token: 0x060016AC RID: 5804 RVA: 0x000416AC File Offset: 0x0003F8AC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2384]);
			}
		}

		// Token: 0x060016AD RID: 5805 RVA: 0x000416D0 File Offset: 0x0003F8D0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2384]);
		}

		// Token: 0x060016AE RID: 5806 RVA: 0x000416E4 File Offset: 0x0003F8E4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2384]);
			}
		}

		// Token: 0x060016AF RID: 5807 RVA: 0x00041718 File Offset: 0x0003F918
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2384]);
			}
		}

		// Token: 0x060016B0 RID: 5808 RVA: 0x0004173C File Offset: 0x0003F93C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2384]);
		}

		// Token: 0x060016B1 RID: 5809 RVA: 0x00041750 File Offset: 0x0003F950
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, sbyte[] v)
		{
			fixed (sbyte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[2386]);
			}
		}

		// Token: 0x060016B2 RID: 5810 RVA: 0x00041784 File Offset: 0x0003F984
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, ref sbyte v)
		{
			fixed (sbyte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[2386]);
			}
		}

		// Token: 0x060016B3 RID: 5811 RVA: 0x000417A8 File Offset: 0x0003F9A8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, sbyte* v)
		{
			calli(System.Void(System.UInt32,System.SByte*), index, v, GL.EntryPoints[2386]);
		}

		// Token: 0x060016B4 RID: 5812 RVA: 0x000417BC File Offset: 0x0003F9BC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2388]);
			}
		}

		// Token: 0x060016B5 RID: 5813 RVA: 0x000417F0 File Offset: 0x0003F9F0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2388]);
			}
		}

		// Token: 0x060016B6 RID: 5814 RVA: 0x00041814 File Offset: 0x0003FA14
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2388]);
		}

		// Token: 0x060016B7 RID: 5815 RVA: 0x00041828 File Offset: 0x0003FA28
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2388]);
			}
		}

		// Token: 0x060016B8 RID: 5816 RVA: 0x0004185C File Offset: 0x0003FA5C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2388]);
			}
		}

		// Token: 0x060016B9 RID: 5817 RVA: 0x00041880 File Offset: 0x0003FA80
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2388]);
		}

		// Token: 0x060016BA RID: 5818 RVA: 0x00041894 File Offset: 0x0003FA94
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2390]);
			}
		}

		// Token: 0x060016BB RID: 5819 RVA: 0x000418C8 File Offset: 0x0003FAC8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2390]);
			}
		}

		// Token: 0x060016BC RID: 5820 RVA: 0x000418EC File Offset: 0x0003FAEC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2390]);
		}

		// Token: 0x060016BD RID: 5821 RVA: 0x00041900 File Offset: 0x0003FB00
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2390]);
			}
		}

		// Token: 0x060016BE RID: 5822 RVA: 0x00041934 File Offset: 0x0003FB34
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2390]);
			}
		}

		// Token: 0x060016BF RID: 5823 RVA: 0x00041958 File Offset: 0x0003FB58
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2390]);
		}

		// Token: 0x060016C0 RID: 5824 RVA: 0x0004196C File Offset: 0x0003FB6C
		[CLSCompliant(false)]
		public static void VertexAttrib4N(int index, byte x, byte y, byte z, byte w)
		{
			calli(System.Void(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte), index, x, y, z, w, GL.EntryPoints[2392]);
		}

		// Token: 0x060016C1 RID: 5825 RVA: 0x00041984 File Offset: 0x0003FB84
		[CLSCompliant(false)]
		public static void VertexAttrib4N(uint index, byte x, byte y, byte z, byte w)
		{
			calli(System.Void(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte), index, x, y, z, w, GL.EntryPoints[2392]);
		}

		// Token: 0x060016C2 RID: 5826 RVA: 0x0004199C File Offset: 0x0003FB9C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, byte[] v)
		{
			fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2394]);
			}
		}

		// Token: 0x060016C3 RID: 5827 RVA: 0x000419D0 File Offset: 0x0003FBD0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, ref byte v)
		{
			fixed (byte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2394]);
			}
		}

		// Token: 0x060016C4 RID: 5828 RVA: 0x000419F4 File Offset: 0x0003FBF4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(int index, byte* v)
		{
			calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[2394]);
		}

		// Token: 0x060016C5 RID: 5829 RVA: 0x00041A08 File Offset: 0x0003FC08
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, byte[] v)
		{
			fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2394]);
			}
		}

		// Token: 0x060016C6 RID: 5830 RVA: 0x00041A3C File Offset: 0x0003FC3C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, ref byte v)
		{
			fixed (byte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2394]);
			}
		}

		// Token: 0x060016C7 RID: 5831 RVA: 0x00041A60 File Offset: 0x0003FC60
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, byte* v)
		{
			calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[2394]);
		}

		// Token: 0x060016C8 RID: 5832 RVA: 0x00041A74 File Offset: 0x0003FC74
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, uint[] v)
		{
			fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2396]);
			}
		}

		// Token: 0x060016C9 RID: 5833 RVA: 0x00041AA8 File Offset: 0x0003FCA8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, ref uint v)
		{
			fixed (uint* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2396]);
			}
		}

		// Token: 0x060016CA RID: 5834 RVA: 0x00041ACC File Offset: 0x0003FCCC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, uint* v)
		{
			calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[2396]);
		}

		// Token: 0x060016CB RID: 5835 RVA: 0x00041AE0 File Offset: 0x0003FCE0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, ushort[] v)
		{
			fixed (ushort* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[2398]);
			}
		}

		// Token: 0x060016CC RID: 5836 RVA: 0x00041B14 File Offset: 0x0003FD14
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, ref ushort v)
		{
			fixed (ushort* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[2398]);
			}
		}

		// Token: 0x060016CD RID: 5837 RVA: 0x00041B38 File Offset: 0x0003FD38
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4N(uint index, ushort* v)
		{
			calli(System.Void(System.UInt32,System.UInt16*), index, v, GL.EntryPoints[2398]);
		}

		// Token: 0x060016CE RID: 5838 RVA: 0x00041B4C File Offset: 0x0003FD4C
		[CLSCompliant(false)]
		public static void VertexAttrib4(int index, short x, short y, short z, short w)
		{
			calli(System.Void(System.UInt32,System.Int16,System.Int16,System.Int16,System.Int16), index, x, y, z, w, GL.EntryPoints[2400]);
		}

		// Token: 0x060016CF RID: 5839 RVA: 0x00041B64 File Offset: 0x0003FD64
		[CLSCompliant(false)]
		public static void VertexAttrib4(uint index, short x, short y, short z, short w)
		{
			calli(System.Void(System.UInt32,System.Int16,System.Int16,System.Int16,System.Int16), index, x, y, z, w, GL.EntryPoints[2400]);
		}

		// Token: 0x060016D0 RID: 5840 RVA: 0x00041B7C File Offset: 0x0003FD7C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2403]);
			}
		}

		// Token: 0x060016D1 RID: 5841 RVA: 0x00041BB0 File Offset: 0x0003FDB0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2403]);
			}
		}

		// Token: 0x060016D2 RID: 5842 RVA: 0x00041BD4 File Offset: 0x0003FDD4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2403]);
		}

		// Token: 0x060016D3 RID: 5843 RVA: 0x00041BE8 File Offset: 0x0003FDE8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2403]);
			}
		}

		// Token: 0x060016D4 RID: 5844 RVA: 0x00041C1C File Offset: 0x0003FE1C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2403]);
			}
		}

		// Token: 0x060016D5 RID: 5845 RVA: 0x00041C40 File Offset: 0x0003FE40
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2403]);
		}

		// Token: 0x060016D6 RID: 5846 RVA: 0x00041C54 File Offset: 0x0003FE54
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, byte[] v)
		{
			fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2407]);
			}
		}

		// Token: 0x060016D7 RID: 5847 RVA: 0x00041C88 File Offset: 0x0003FE88
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, ref byte v)
		{
			fixed (byte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2407]);
			}
		}

		// Token: 0x060016D8 RID: 5848 RVA: 0x00041CAC File Offset: 0x0003FEAC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, byte* v)
		{
			calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[2407]);
		}

		// Token: 0x060016D9 RID: 5849 RVA: 0x00041CC0 File Offset: 0x0003FEC0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, byte[] v)
		{
			fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2407]);
			}
		}

		// Token: 0x060016DA RID: 5850 RVA: 0x00041CF4 File Offset: 0x0003FEF4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref byte v)
		{
			fixed (byte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2407]);
			}
		}

		// Token: 0x060016DB RID: 5851 RVA: 0x00041D18 File Offset: 0x0003FF18
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, byte* v)
		{
			calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[2407]);
		}

		// Token: 0x060016DC RID: 5852 RVA: 0x00041D2C File Offset: 0x0003FF2C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, uint[] v)
		{
			fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2410]);
			}
		}

		// Token: 0x060016DD RID: 5853 RVA: 0x00041D60 File Offset: 0x0003FF60
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref uint v)
		{
			fixed (uint* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2410]);
			}
		}

		// Token: 0x060016DE RID: 5854 RVA: 0x00041D84 File Offset: 0x0003FF84
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, uint* v)
		{
			calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[2410]);
		}

		// Token: 0x060016DF RID: 5855 RVA: 0x00041D98 File Offset: 0x0003FF98
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ushort[] v)
		{
			fixed (ushort* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[2412]);
			}
		}

		// Token: 0x060016E0 RID: 5856 RVA: 0x00041DCC File Offset: 0x0003FFCC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref ushort v)
		{
			fixed (ushort* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[2412]);
			}
		}

		// Token: 0x060016E1 RID: 5857 RVA: 0x00041DF0 File Offset: 0x0003FFF0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ushort* v)
		{
			calli(System.Void(System.UInt32,System.UInt16*), index, v, GL.EntryPoints[2412]);
		}

		// Token: 0x060016E2 RID: 5858 RVA: 0x00041E04 File Offset: 0x00040004
		[CLSCompliant(false)]
		public static void VertexAttribBinding(int attribindex, int bindingindex)
		{
			calli(System.Void(System.UInt32,System.UInt32), attribindex, bindingindex, GL.EntryPoints[2415]);
		}

		// Token: 0x060016E3 RID: 5859 RVA: 0x00041E18 File Offset: 0x00040018
		[CLSCompliant(false)]
		public static void VertexAttribBinding(uint attribindex, uint bindingindex)
		{
			calli(System.Void(System.UInt32,System.UInt32), attribindex, bindingindex, GL.EntryPoints[2415]);
		}

		// Token: 0x060016E4 RID: 5860 RVA: 0x00041E2C File Offset: 0x0004002C
		[CLSCompliant(false)]
		public static void VertexAttribDivisor(int index, int divisor)
		{
			calli(System.Void(System.UInt32,System.UInt32), index, divisor, GL.EntryPoints[2416]);
		}

		// Token: 0x060016E5 RID: 5861 RVA: 0x00041E40 File Offset: 0x00040040
		[CLSCompliant(false)]
		public static void VertexAttribDivisor(uint index, uint divisor)
		{
			calli(System.Void(System.UInt32,System.UInt32), index, divisor, GL.EntryPoints[2416]);
		}

		// Token: 0x060016E6 RID: 5862 RVA: 0x00041E54 File Offset: 0x00040054
		[CLSCompliant(false)]
		public static void VertexAttribFormat(int attribindex, int size, VertexAttribType type, bool normalized, int relativeoffset)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.UInt32), attribindex, size, type, normalized, relativeoffset, GL.EntryPoints[2418]);
		}

		// Token: 0x060016E7 RID: 5863 RVA: 0x00041E6C File Offset: 0x0004006C
		[CLSCompliant(false)]
		public static void VertexAttribFormat(uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.UInt32), attribindex, size, type, normalized, relativeoffset, GL.EntryPoints[2418]);
		}

		// Token: 0x060016E8 RID: 5864 RVA: 0x00041E84 File Offset: 0x00040084
		[CLSCompliant(false)]
		public static void VertexAttribI1(int index, int x)
		{
			calli(System.Void(System.UInt32,System.Int32), index, x, GL.EntryPoints[2420]);
		}

		// Token: 0x060016E9 RID: 5865 RVA: 0x00041E98 File Offset: 0x00040098
		[CLSCompliant(false)]
		public static void VertexAttribI1(uint index, int x)
		{
			calli(System.Void(System.UInt32,System.Int32), index, x, GL.EntryPoints[2420]);
		}

		// Token: 0x060016EA RID: 5866 RVA: 0x00041EAC File Offset: 0x000400AC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI1(int index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2422]);
		}

		// Token: 0x060016EB RID: 5867 RVA: 0x00041EC0 File Offset: 0x000400C0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI1(uint index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2422]);
		}

		// Token: 0x060016EC RID: 5868 RVA: 0x00041ED4 File Offset: 0x000400D4
		[CLSCompliant(false)]
		public static void VertexAttribI1(uint index, uint x)
		{
			calli(System.Void(System.UInt32,System.UInt32), index, x, GL.EntryPoints[2424]);
		}

		// Token: 0x060016ED RID: 5869 RVA: 0x00041EE8 File Offset: 0x000400E8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI1(uint index, uint* v)
		{
			calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[2426]);
		}

		// Token: 0x060016EE RID: 5870 RVA: 0x00041EFC File Offset: 0x000400FC
		[CLSCompliant(false)]
		public static void VertexAttribI2(int index, int x, int y)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), index, x, y, GL.EntryPoints[2428]);
		}

		// Token: 0x060016EF RID: 5871 RVA: 0x00041F14 File Offset: 0x00040114
		[CLSCompliant(false)]
		public static void VertexAttribI2(uint index, int x, int y)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), index, x, y, GL.EntryPoints[2428]);
		}

		// Token: 0x060016F0 RID: 5872 RVA: 0x00041F2C File Offset: 0x0004012C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(int index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2430]);
			}
		}

		// Token: 0x060016F1 RID: 5873 RVA: 0x00041F60 File Offset: 0x00040160
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(int index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2430]);
			}
		}

		// Token: 0x060016F2 RID: 5874 RVA: 0x00041F84 File Offset: 0x00040184
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(int index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2430]);
		}

		// Token: 0x060016F3 RID: 5875 RVA: 0x00041F98 File Offset: 0x00040198
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(uint index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2430]);
			}
		}

		// Token: 0x060016F4 RID: 5876 RVA: 0x00041FCC File Offset: 0x000401CC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(uint index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2430]);
			}
		}

		// Token: 0x060016F5 RID: 5877 RVA: 0x00041FF0 File Offset: 0x000401F0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(uint index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2430]);
		}

		// Token: 0x060016F6 RID: 5878 RVA: 0x00042004 File Offset: 0x00040204
		[CLSCompliant(false)]
		public static void VertexAttribI2(uint index, uint x, uint y)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), index, x, y, GL.EntryPoints[2432]);
		}

		// Token: 0x060016F7 RID: 5879 RVA: 0x0004201C File Offset: 0x0004021C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(uint index, uint[] v)
		{
			fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2434]);
			}
		}

		// Token: 0x060016F8 RID: 5880 RVA: 0x00042050 File Offset: 0x00040250
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(uint index, ref uint v)
		{
			fixed (uint* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2434]);
			}
		}

		// Token: 0x060016F9 RID: 5881 RVA: 0x00042074 File Offset: 0x00040274
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI2(uint index, uint* v)
		{
			calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[2434]);
		}

		// Token: 0x060016FA RID: 5882 RVA: 0x00042088 File Offset: 0x00040288
		[CLSCompliant(false)]
		public static void VertexAttribI3(int index, int x, int y, int z)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), index, x, y, z, GL.EntryPoints[2436]);
		}

		// Token: 0x060016FB RID: 5883 RVA: 0x000420A0 File Offset: 0x000402A0
		[CLSCompliant(false)]
		public static void VertexAttribI3(uint index, int x, int y, int z)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), index, x, y, z, GL.EntryPoints[2436]);
		}

		// Token: 0x060016FC RID: 5884 RVA: 0x000420B8 File Offset: 0x000402B8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(int index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2438]);
			}
		}

		// Token: 0x060016FD RID: 5885 RVA: 0x000420EC File Offset: 0x000402EC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(int index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2438]);
			}
		}

		// Token: 0x060016FE RID: 5886 RVA: 0x00042110 File Offset: 0x00040310
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(int index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2438]);
		}

		// Token: 0x060016FF RID: 5887 RVA: 0x00042124 File Offset: 0x00040324
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(uint index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2438]);
			}
		}

		// Token: 0x06001700 RID: 5888 RVA: 0x00042158 File Offset: 0x00040358
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(uint index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2438]);
			}
		}

		// Token: 0x06001701 RID: 5889 RVA: 0x0004217C File Offset: 0x0004037C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(uint index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2438]);
		}

		// Token: 0x06001702 RID: 5890 RVA: 0x00042190 File Offset: 0x00040390
		[CLSCompliant(false)]
		public static void VertexAttribI3(uint index, uint x, uint y, uint z)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.UInt32), index, x, y, z, GL.EntryPoints[2440]);
		}

		// Token: 0x06001703 RID: 5891 RVA: 0x000421A8 File Offset: 0x000403A8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(uint index, uint[] v)
		{
			fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2442]);
			}
		}

		// Token: 0x06001704 RID: 5892 RVA: 0x000421DC File Offset: 0x000403DC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(uint index, ref uint v)
		{
			fixed (uint* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2442]);
			}
		}

		// Token: 0x06001705 RID: 5893 RVA: 0x00042200 File Offset: 0x00040400
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI3(uint index, uint* v)
		{
			calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[2442]);
		}

		// Token: 0x06001706 RID: 5894 RVA: 0x00042214 File Offset: 0x00040414
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, sbyte[] v)
		{
			fixed (sbyte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[2444]);
			}
		}

		// Token: 0x06001707 RID: 5895 RVA: 0x00042248 File Offset: 0x00040448
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ref sbyte v)
		{
			fixed (sbyte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[2444]);
			}
		}

		// Token: 0x06001708 RID: 5896 RVA: 0x0004226C File Offset: 0x0004046C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, sbyte* v)
		{
			calli(System.Void(System.UInt32,System.SByte*), index, v, GL.EntryPoints[2444]);
		}

		// Token: 0x06001709 RID: 5897 RVA: 0x00042280 File Offset: 0x00040480
		[CLSCompliant(false)]
		public static void VertexAttribI4(int index, int x, int y, int z, int w)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), index, x, y, z, w, GL.EntryPoints[2446]);
		}

		// Token: 0x0600170A RID: 5898 RVA: 0x00042298 File Offset: 0x00040498
		[CLSCompliant(false)]
		public static void VertexAttribI4(uint index, int x, int y, int z, int w)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), index, x, y, z, w, GL.EntryPoints[2446]);
		}

		// Token: 0x0600170B RID: 5899 RVA: 0x000422B0 File Offset: 0x000404B0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2448]);
			}
		}

		// Token: 0x0600170C RID: 5900 RVA: 0x000422E4 File Offset: 0x000404E4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2448]);
			}
		}

		// Token: 0x0600170D RID: 5901 RVA: 0x00042308 File Offset: 0x00040508
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2448]);
		}

		// Token: 0x0600170E RID: 5902 RVA: 0x0004231C File Offset: 0x0004051C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2448]);
			}
		}

		// Token: 0x0600170F RID: 5903 RVA: 0x00042350 File Offset: 0x00040550
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2448]);
			}
		}

		// Token: 0x06001710 RID: 5904 RVA: 0x00042374 File Offset: 0x00040574
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2448]);
		}

		// Token: 0x06001711 RID: 5905 RVA: 0x00042388 File Offset: 0x00040588
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2450]);
			}
		}

		// Token: 0x06001712 RID: 5906 RVA: 0x000423BC File Offset: 0x000405BC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2450]);
			}
		}

		// Token: 0x06001713 RID: 5907 RVA: 0x000423E0 File Offset: 0x000405E0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2450]);
		}

		// Token: 0x06001714 RID: 5908 RVA: 0x000423F4 File Offset: 0x000405F4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2450]);
			}
		}

		// Token: 0x06001715 RID: 5909 RVA: 0x00042428 File Offset: 0x00040628
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2450]);
			}
		}

		// Token: 0x06001716 RID: 5910 RVA: 0x0004244C File Offset: 0x0004064C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, short* v)
		{
			calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2450]);
		}

		// Token: 0x06001717 RID: 5911 RVA: 0x00042460 File Offset: 0x00040660
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, byte[] v)
		{
			fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2452]);
			}
		}

		// Token: 0x06001718 RID: 5912 RVA: 0x00042494 File Offset: 0x00040694
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, ref byte v)
		{
			fixed (byte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2452]);
			}
		}

		// Token: 0x06001719 RID: 5913 RVA: 0x000424B8 File Offset: 0x000406B8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, byte* v)
		{
			calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[2452]);
		}

		// Token: 0x0600171A RID: 5914 RVA: 0x000424CC File Offset: 0x000406CC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, byte[] v)
		{
			fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2452]);
			}
		}

		// Token: 0x0600171B RID: 5915 RVA: 0x00042500 File Offset: 0x00040700
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ref byte v)
		{
			fixed (byte* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2452]);
			}
		}

		// Token: 0x0600171C RID: 5916 RVA: 0x00042524 File Offset: 0x00040724
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, byte* v)
		{
			calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[2452]);
		}

		// Token: 0x0600171D RID: 5917 RVA: 0x00042538 File Offset: 0x00040738
		[CLSCompliant(false)]
		public static void VertexAttribI4(uint index, uint x, uint y, uint z, uint w)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), index, x, y, z, w, GL.EntryPoints[2454]);
		}

		// Token: 0x0600171E RID: 5918 RVA: 0x00042550 File Offset: 0x00040750
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, uint[] v)
		{
			fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2456]);
			}
		}

		// Token: 0x0600171F RID: 5919 RVA: 0x00042584 File Offset: 0x00040784
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ref uint v)
		{
			fixed (uint* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2456]);
			}
		}

		// Token: 0x06001720 RID: 5920 RVA: 0x000425A8 File Offset: 0x000407A8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, uint* v)
		{
			calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[2456]);
		}

		// Token: 0x06001721 RID: 5921 RVA: 0x000425BC File Offset: 0x000407BC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ushort[] v)
		{
			fixed (ushort* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[2458]);
			}
		}

		// Token: 0x06001722 RID: 5922 RVA: 0x000425F0 File Offset: 0x000407F0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ref ushort v)
		{
			fixed (ushort* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[2458]);
			}
		}

		// Token: 0x06001723 RID: 5923 RVA: 0x00042614 File Offset: 0x00040814
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ushort* v)
		{
			calli(System.Void(System.UInt32,System.UInt16*), index, v, GL.EntryPoints[2458]);
		}

		// Token: 0x06001724 RID: 5924 RVA: 0x00042628 File Offset: 0x00040828
		[CLSCompliant(false)]
		public static void VertexAttribIFormat(int attribindex, int size, VertexAttribIntegerType type, int relativeoffset)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32), attribindex, size, type, relativeoffset, GL.EntryPoints[2460]);
		}

		// Token: 0x06001725 RID: 5925 RVA: 0x00042640 File Offset: 0x00040840
		[CLSCompliant(false)]
		public static void VertexAttribIFormat(uint attribindex, int size, VertexAttribIntegerType type, uint relativeoffset)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32), attribindex, size, type, relativeoffset, GL.EntryPoints[2460]);
		}

		// Token: 0x06001726 RID: 5926 RVA: 0x00042658 File Offset: 0x00040858
		[CLSCompliant(false)]
		public static void VertexAttribIPointer(int index, int size, VertexAttribIntegerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[2462]);
		}

		// Token: 0x06001727 RID: 5927 RVA: 0x00042670 File Offset: 0x00040870
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2462]);
			}
		}

		// Token: 0x06001728 RID: 5928 RVA: 0x000426AC File Offset: 0x000408AC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2462]);
			}
		}

		// Token: 0x06001729 RID: 5929 RVA: 0x000426EC File Offset: 0x000408EC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2462]);
			}
		}

		// Token: 0x0600172A RID: 5930 RVA: 0x0004272C File Offset: 0x0004092C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
		{
			fixed (T4* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2462]);
			}
		}

		// Token: 0x0600172B RID: 5931 RVA: 0x00042754 File Offset: 0x00040954
		[Obsolete("Use VertexAttribIntegerType overload instead")]
		[CLSCompliant(false)]
		public static void VertexAttribIPointer(int index, int size, VertexAttribIPointerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[2462]);
		}

		// Token: 0x0600172C RID: 5932 RVA: 0x0004276C File Offset: 0x0004096C
		[CLSCompliant(false)]
		[Obsolete("Use VertexAttribIntegerType overload instead")]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIPointerType type, int stride, [In] [Out] T4[] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2462]);
			}
		}

		// Token: 0x0600172D RID: 5933 RVA: 0x000427A8 File Offset: 0x000409A8
		[CLSCompliant(false)]
		[Obsolete("Use VertexAttribIntegerType overload instead")]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIPointerType type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2462]);
			}
		}

		// Token: 0x0600172E RID: 5934 RVA: 0x000427E8 File Offset: 0x000409E8
		[CLSCompliant(false)]
		[Obsolete("Use VertexAttribIntegerType overload instead")]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIPointerType type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2462]);
			}
		}

		// Token: 0x0600172F RID: 5935 RVA: 0x00042828 File Offset: 0x00040A28
		[CLSCompliant(false)]
		[Obsolete("Use VertexAttribIntegerType overload instead")]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIPointerType type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
		{
			fixed (T4* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2462]);
			}
		}

		// Token: 0x06001730 RID: 5936 RVA: 0x00042850 File Offset: 0x00040A50
		[CLSCompliant(false)]
		public static void VertexAttribIPointer(uint index, int size, VertexAttribIntegerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[2462]);
		}

		// Token: 0x06001731 RID: 5937 RVA: 0x00042868 File Offset: 0x00040A68
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2462]);
			}
		}

		// Token: 0x06001732 RID: 5938 RVA: 0x000428A4 File Offset: 0x00040AA4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2462]);
			}
		}

		// Token: 0x06001733 RID: 5939 RVA: 0x000428E4 File Offset: 0x00040AE4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2462]);
			}
		}

		// Token: 0x06001734 RID: 5940 RVA: 0x00042924 File Offset: 0x00040B24
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
		{
			fixed (T4* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2462]);
			}
		}

		// Token: 0x06001735 RID: 5941 RVA: 0x0004294C File Offset: 0x00040B4C
		[CLSCompliant(false)]
		[Obsolete("Use VertexAttribIntegerType overload instead")]
		public static void VertexAttribIPointer(uint index, int size, VertexAttribIPointerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[2462]);
		}

		// Token: 0x06001736 RID: 5942 RVA: 0x00042964 File Offset: 0x00040B64
		[CLSCompliant(false)]
		[Obsolete("Use VertexAttribIntegerType overload instead")]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIPointerType type, int stride, [In] [Out] T4[] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2462]);
			}
		}

		// Token: 0x06001737 RID: 5943 RVA: 0x000429A0 File Offset: 0x00040BA0
		[CLSCompliant(false)]
		[Obsolete("Use VertexAttribIntegerType overload instead")]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIPointerType type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2462]);
			}
		}

		// Token: 0x06001738 RID: 5944 RVA: 0x000429E0 File Offset: 0x00040BE0
		[Obsolete("Use VertexAttribIntegerType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIPointerType type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2462]);
			}
		}

		// Token: 0x06001739 RID: 5945 RVA: 0x00042A20 File Offset: 0x00040C20
		[Obsolete("Use VertexAttribIntegerType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIPointerType type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
		{
			fixed (T4* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2462]);
			}
		}

		// Token: 0x0600173A RID: 5946 RVA: 0x00042A48 File Offset: 0x00040C48
		[CLSCompliant(false)]
		public static void VertexAttribL1(int index, double x)
		{
			calli(System.Void(System.UInt32,System.Double), index, x, GL.EntryPoints[2464]);
		}

		// Token: 0x0600173B RID: 5947 RVA: 0x00042A5C File Offset: 0x00040C5C
		[CLSCompliant(false)]
		public static void VertexAttribL1(uint index, double x)
		{
			calli(System.Void(System.UInt32,System.Double), index, x, GL.EntryPoints[2464]);
		}

		// Token: 0x0600173C RID: 5948 RVA: 0x00042A70 File Offset: 0x00040C70
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL1(int index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2466]);
		}

		// Token: 0x0600173D RID: 5949 RVA: 0x00042A84 File Offset: 0x00040C84
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL1(uint index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2466]);
		}

		// Token: 0x0600173E RID: 5950 RVA: 0x00042A98 File Offset: 0x00040C98
		[CLSCompliant(false)]
		public static void VertexAttribL2(int index, double x, double y)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double), index, x, y, GL.EntryPoints[2474]);
		}

		// Token: 0x0600173F RID: 5951 RVA: 0x00042AB0 File Offset: 0x00040CB0
		[CLSCompliant(false)]
		public static void VertexAttribL2(uint index, double x, double y)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double), index, x, y, GL.EntryPoints[2474]);
		}

		// Token: 0x06001740 RID: 5952 RVA: 0x00042AC8 File Offset: 0x00040CC8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL2(int index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2476]);
			}
		}

		// Token: 0x06001741 RID: 5953 RVA: 0x00042AFC File Offset: 0x00040CFC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL2(int index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2476]);
			}
		}

		// Token: 0x06001742 RID: 5954 RVA: 0x00042B20 File Offset: 0x00040D20
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL2(int index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2476]);
		}

		// Token: 0x06001743 RID: 5955 RVA: 0x00042B34 File Offset: 0x00040D34
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL2(uint index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2476]);
			}
		}

		// Token: 0x06001744 RID: 5956 RVA: 0x00042B68 File Offset: 0x00040D68
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL2(uint index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2476]);
			}
		}

		// Token: 0x06001745 RID: 5957 RVA: 0x00042B8C File Offset: 0x00040D8C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL2(uint index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2476]);
		}

		// Token: 0x06001746 RID: 5958 RVA: 0x00042BA0 File Offset: 0x00040DA0
		[CLSCompliant(false)]
		public static void VertexAttribL3(int index, double x, double y, double z)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double,System.Double), index, x, y, z, GL.EntryPoints[2482]);
		}

		// Token: 0x06001747 RID: 5959 RVA: 0x00042BB8 File Offset: 0x00040DB8
		[CLSCompliant(false)]
		public static void VertexAttribL3(uint index, double x, double y, double z)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double,System.Double), index, x, y, z, GL.EntryPoints[2482]);
		}

		// Token: 0x06001748 RID: 5960 RVA: 0x00042BD0 File Offset: 0x00040DD0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL3(int index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2484]);
			}
		}

		// Token: 0x06001749 RID: 5961 RVA: 0x00042C04 File Offset: 0x00040E04
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL3(int index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2484]);
			}
		}

		// Token: 0x0600174A RID: 5962 RVA: 0x00042C28 File Offset: 0x00040E28
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL3(int index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2484]);
		}

		// Token: 0x0600174B RID: 5963 RVA: 0x00042C3C File Offset: 0x00040E3C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL3(uint index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2484]);
			}
		}

		// Token: 0x0600174C RID: 5964 RVA: 0x00042C70 File Offset: 0x00040E70
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL3(uint index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2484]);
			}
		}

		// Token: 0x0600174D RID: 5965 RVA: 0x00042C94 File Offset: 0x00040E94
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL3(uint index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2484]);
		}

		// Token: 0x0600174E RID: 5966 RVA: 0x00042CA8 File Offset: 0x00040EA8
		[CLSCompliant(false)]
		public static void VertexAttribL4(int index, double x, double y, double z, double w)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double,System.Double,System.Double), index, x, y, z, w, GL.EntryPoints[2490]);
		}

		// Token: 0x0600174F RID: 5967 RVA: 0x00042CC0 File Offset: 0x00040EC0
		[CLSCompliant(false)]
		public static void VertexAttribL4(uint index, double x, double y, double z, double w)
		{
			calli(System.Void(System.UInt32,System.Double,System.Double,System.Double,System.Double), index, x, y, z, w, GL.EntryPoints[2490]);
		}

		// Token: 0x06001750 RID: 5968 RVA: 0x00042CD8 File Offset: 0x00040ED8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL4(int index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2492]);
			}
		}

		// Token: 0x06001751 RID: 5969 RVA: 0x00042D0C File Offset: 0x00040F0C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL4(int index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2492]);
			}
		}

		// Token: 0x06001752 RID: 5970 RVA: 0x00042D30 File Offset: 0x00040F30
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL4(int index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2492]);
		}

		// Token: 0x06001753 RID: 5971 RVA: 0x00042D44 File Offset: 0x00040F44
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL4(uint index, double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2492]);
			}
		}

		// Token: 0x06001754 RID: 5972 RVA: 0x00042D78 File Offset: 0x00040F78
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL4(uint index, ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2492]);
			}
		}

		// Token: 0x06001755 RID: 5973 RVA: 0x00042D9C File Offset: 0x00040F9C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribL4(uint index, double* v)
		{
			calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2492]);
		}

		// Token: 0x06001756 RID: 5974 RVA: 0x00042DB0 File Offset: 0x00040FB0
		[CLSCompliant(false)]
		public static void VertexAttribLFormat(int attribindex, int size, VertexAttribDoubleType type, int relativeoffset)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32), attribindex, size, type, relativeoffset, GL.EntryPoints[2498]);
		}

		// Token: 0x06001757 RID: 5975 RVA: 0x00042DC8 File Offset: 0x00040FC8
		[CLSCompliant(false)]
		public static void VertexAttribLFormat(uint attribindex, int size, VertexAttribDoubleType type, uint relativeoffset)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32), attribindex, size, type, relativeoffset, GL.EntryPoints[2498]);
		}

		// Token: 0x06001758 RID: 5976 RVA: 0x00042DE0 File Offset: 0x00040FE0
		[CLSCompliant(false)]
		public static void VertexAttribLPointer(int index, int size, VertexAttribDoubleType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[2500]);
		}

		// Token: 0x06001759 RID: 5977 RVA: 0x00042DF8 File Offset: 0x00040FF8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(int index, int size, VertexAttribDoubleType type, int stride, [In] [Out] T4[] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2500]);
			}
		}

		// Token: 0x0600175A RID: 5978 RVA: 0x00042E34 File Offset: 0x00041034
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(int index, int size, VertexAttribDoubleType type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2500]);
			}
		}

		// Token: 0x0600175B RID: 5979 RVA: 0x00042E74 File Offset: 0x00041074
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(int index, int size, VertexAttribDoubleType type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2500]);
			}
		}

		// Token: 0x0600175C RID: 5980 RVA: 0x00042EB4 File Offset: 0x000410B4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(int index, int size, VertexAttribDoubleType type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
		{
			fixed (T4* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2500]);
			}
		}

		// Token: 0x0600175D RID: 5981 RVA: 0x00042EDC File Offset: 0x000410DC
		[Obsolete("Use VertexAttribDoubleType overload instead")]
		[CLSCompliant(false)]
		public static void VertexAttribLPointer(int index, int size, VertexAttribDPointerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[2500]);
		}

		// Token: 0x0600175E RID: 5982 RVA: 0x00042EF4 File Offset: 0x000410F4
		[CLSCompliant(false)]
		[Obsolete("Use VertexAttribDoubleType overload instead")]
		public unsafe static void VertexAttribLPointer<T4>(int index, int size, VertexAttribDPointerType type, int stride, [In] [Out] T4[] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2500]);
			}
		}

		// Token: 0x0600175F RID: 5983 RVA: 0x00042F30 File Offset: 0x00041130
		[Obsolete("Use VertexAttribDoubleType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(int index, int size, VertexAttribDPointerType type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2500]);
			}
		}

		// Token: 0x06001760 RID: 5984 RVA: 0x00042F70 File Offset: 0x00041170
		[CLSCompliant(false)]
		[Obsolete("Use VertexAttribDoubleType overload instead")]
		public unsafe static void VertexAttribLPointer<T4>(int index, int size, VertexAttribDPointerType type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2500]);
			}
		}

		// Token: 0x06001761 RID: 5985 RVA: 0x00042FB0 File Offset: 0x000411B0
		[CLSCompliant(false)]
		[Obsolete("Use VertexAttribDoubleType overload instead")]
		public unsafe static void VertexAttribLPointer<T4>(int index, int size, VertexAttribDPointerType type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
		{
			fixed (T4* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2500]);
			}
		}

		// Token: 0x06001762 RID: 5986 RVA: 0x00042FD8 File Offset: 0x000411D8
		[CLSCompliant(false)]
		public static void VertexAttribLPointer(uint index, int size, VertexAttribDoubleType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[2500]);
		}

		// Token: 0x06001763 RID: 5987 RVA: 0x00042FF0 File Offset: 0x000411F0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDoubleType type, int stride, [In] [Out] T4[] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2500]);
			}
		}

		// Token: 0x06001764 RID: 5988 RVA: 0x0004302C File Offset: 0x0004122C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDoubleType type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2500]);
			}
		}

		// Token: 0x06001765 RID: 5989 RVA: 0x0004306C File Offset: 0x0004126C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDoubleType type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2500]);
			}
		}

		// Token: 0x06001766 RID: 5990 RVA: 0x000430AC File Offset: 0x000412AC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDoubleType type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
		{
			fixed (T4* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2500]);
			}
		}

		// Token: 0x06001767 RID: 5991 RVA: 0x000430D4 File Offset: 0x000412D4
		[CLSCompliant(false)]
		[Obsolete("Use VertexAttribDoubleType overload instead")]
		public static void VertexAttribLPointer(uint index, int size, VertexAttribDPointerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[2500]);
		}

		// Token: 0x06001768 RID: 5992 RVA: 0x000430EC File Offset: 0x000412EC
		[CLSCompliant(false)]
		[Obsolete("Use VertexAttribDoubleType overload instead")]
		public unsafe static void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDPointerType type, int stride, [In] [Out] T4[] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2500]);
			}
		}

		// Token: 0x06001769 RID: 5993 RVA: 0x00043128 File Offset: 0x00041328
		[Obsolete("Use VertexAttribDoubleType overload instead")]
		[CLSCompliant(false)]
		public unsafe static void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDPointerType type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2500]);
			}
		}

		// Token: 0x0600176A RID: 5994 RVA: 0x00043168 File Offset: 0x00041368
		[CLSCompliant(false)]
		[Obsolete("Use VertexAttribDoubleType overload instead")]
		public unsafe static void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDPointerType type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2500]);
			}
		}

		// Token: 0x0600176B RID: 5995 RVA: 0x000431A8 File Offset: 0x000413A8
		[CLSCompliant(false)]
		[Obsolete("Use VertexAttribDoubleType overload instead")]
		public unsafe static void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDPointerType type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
		{
			fixed (T4* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2500]);
			}
		}

		// Token: 0x0600176C RID: 5996 RVA: 0x000431D0 File Offset: 0x000413D0
		[CLSCompliant(false)]
		public static void VertexAttribP1(int index, PackedPointerType type, bool normalized, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32), index, type, normalized, value, GL.EntryPoints[2502]);
		}

		// Token: 0x0600176D RID: 5997 RVA: 0x000431E8 File Offset: 0x000413E8
		[CLSCompliant(false)]
		public static void VertexAttribP1(uint index, PackedPointerType type, bool normalized, uint value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32), index, type, normalized, value, GL.EntryPoints[2502]);
		}

		// Token: 0x0600176E RID: 5998 RVA: 0x00043200 File Offset: 0x00041400
		[CLSCompliant(false)]
		public unsafe static void VertexAttribP1(int index, PackedPointerType type, bool normalized, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32*), index, type, normalized, value, GL.EntryPoints[2503]);
		}

		// Token: 0x0600176F RID: 5999 RVA: 0x00043218 File Offset: 0x00041418
		[CLSCompliant(false)]
		public unsafe static void VertexAttribP1(uint index, PackedPointerType type, bool normalized, uint* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32*), index, type, normalized, value, GL.EntryPoints[2503]);
		}

		// Token: 0x06001770 RID: 6000 RVA: 0x00043230 File Offset: 0x00041430
		[CLSCompliant(false)]
		public static void VertexAttribP2(int index, PackedPointerType type, bool normalized, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32), index, type, normalized, value, GL.EntryPoints[2504]);
		}

		// Token: 0x06001771 RID: 6001 RVA: 0x00043248 File Offset: 0x00041448
		[CLSCompliant(false)]
		public static void VertexAttribP2(uint index, PackedPointerType type, bool normalized, uint value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32), index, type, normalized, value, GL.EntryPoints[2504]);
		}

		// Token: 0x06001772 RID: 6002 RVA: 0x00043260 File Offset: 0x00041460
		[CLSCompliant(false)]
		public unsafe static void VertexAttribP2(int index, PackedPointerType type, bool normalized, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32*), index, type, normalized, value, GL.EntryPoints[2505]);
		}

		// Token: 0x06001773 RID: 6003 RVA: 0x00043278 File Offset: 0x00041478
		[CLSCompliant(false)]
		public unsafe static void VertexAttribP2(uint index, PackedPointerType type, bool normalized, uint* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32*), index, type, normalized, value, GL.EntryPoints[2505]);
		}

		// Token: 0x06001774 RID: 6004 RVA: 0x00043290 File Offset: 0x00041490
		[CLSCompliant(false)]
		public static void VertexAttribP3(int index, PackedPointerType type, bool normalized, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32), index, type, normalized, value, GL.EntryPoints[2506]);
		}

		// Token: 0x06001775 RID: 6005 RVA: 0x000432A8 File Offset: 0x000414A8
		[CLSCompliant(false)]
		public static void VertexAttribP3(uint index, PackedPointerType type, bool normalized, uint value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32), index, type, normalized, value, GL.EntryPoints[2506]);
		}

		// Token: 0x06001776 RID: 6006 RVA: 0x000432C0 File Offset: 0x000414C0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribP3(int index, PackedPointerType type, bool normalized, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32*), index, type, normalized, value, GL.EntryPoints[2507]);
		}

		// Token: 0x06001777 RID: 6007 RVA: 0x000432D8 File Offset: 0x000414D8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribP3(uint index, PackedPointerType type, bool normalized, uint* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32*), index, type, normalized, value, GL.EntryPoints[2507]);
		}

		// Token: 0x06001778 RID: 6008 RVA: 0x000432F0 File Offset: 0x000414F0
		[CLSCompliant(false)]
		public static void VertexAttribP4(int index, PackedPointerType type, bool normalized, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32), index, type, normalized, value, GL.EntryPoints[2508]);
		}

		// Token: 0x06001779 RID: 6009 RVA: 0x00043308 File Offset: 0x00041508
		[CLSCompliant(false)]
		public static void VertexAttribP4(uint index, PackedPointerType type, bool normalized, uint value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32), index, type, normalized, value, GL.EntryPoints[2508]);
		}

		// Token: 0x0600177A RID: 6010 RVA: 0x00043320 File Offset: 0x00041520
		[CLSCompliant(false)]
		public unsafe static void VertexAttribP4(int index, PackedPointerType type, bool normalized, int* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32*), index, type, normalized, value, GL.EntryPoints[2509]);
		}

		// Token: 0x0600177B RID: 6011 RVA: 0x00043338 File Offset: 0x00041538
		[CLSCompliant(false)]
		public unsafe static void VertexAttribP4(uint index, PackedPointerType type, bool normalized, uint* value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Boolean,System.UInt32*), index, type, normalized, value, GL.EntryPoints[2509]);
		}

		// Token: 0x0600177C RID: 6012 RVA: 0x00043350 File Offset: 0x00041550
		[CLSCompliant(false)]
		public static void VertexAttribPointer(int index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, pointer, GL.EntryPoints[2511]);
		}

		// Token: 0x0600177D RID: 6013 RVA: 0x0004336C File Offset: 0x0004156C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[2511]);
			}
		}

		// Token: 0x0600177E RID: 6014 RVA: 0x000433A8 File Offset: 0x000415A8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[,] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[2511]);
			}
		}

		// Token: 0x0600177F RID: 6015 RVA: 0x000433E8 File Offset: 0x000415E8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[,,] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[2511]);
			}
		}

		// Token: 0x06001780 RID: 6016 RVA: 0x0004342C File Offset: 0x0004162C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] ref T5 pointer) where T5 : struct
		{
			fixed (T5* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[2511]);
			}
		}

		// Token: 0x06001781 RID: 6017 RVA: 0x00043454 File Offset: 0x00041654
		[CLSCompliant(false)]
		public static void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, pointer, GL.EntryPoints[2511]);
		}

		// Token: 0x06001782 RID: 6018 RVA: 0x00043470 File Offset: 0x00041670
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[2511]);
			}
		}

		// Token: 0x06001783 RID: 6019 RVA: 0x000434AC File Offset: 0x000416AC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[,] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[2511]);
			}
		}

		// Token: 0x06001784 RID: 6020 RVA: 0x000434EC File Offset: 0x000416EC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[,,] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[2511]);
			}
		}

		// Token: 0x06001785 RID: 6021 RVA: 0x00043530 File Offset: 0x00041730
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] ref T5 pointer) where T5 : struct
		{
			fixed (T5* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[2511]);
			}
		}

		// Token: 0x06001786 RID: 6022 RVA: 0x00043558 File Offset: 0x00041758
		[CLSCompliant(false)]
		public static void VertexBindingDivisor(int bindingindex, int divisor)
		{
			calli(System.Void(System.UInt32,System.UInt32), bindingindex, divisor, GL.EntryPoints[2531]);
		}

		// Token: 0x06001787 RID: 6023 RVA: 0x0004356C File Offset: 0x0004176C
		[CLSCompliant(false)]
		public static void VertexBindingDivisor(uint bindingindex, uint divisor)
		{
			calli(System.Void(System.UInt32,System.UInt32), bindingindex, divisor, GL.EntryPoints[2531]);
		}

		// Token: 0x06001788 RID: 6024 RVA: 0x00043580 File Offset: 0x00041780
		[CLSCompliant(false)]
		public static void VertexP2(PackedPointerType type, int value)
		{
			calli(System.Void(System.Int32,System.UInt32), type, value, GL.EntryPoints[2536]);
		}

		// Token: 0x06001789 RID: 6025 RVA: 0x00043594 File Offset: 0x00041794
		[CLSCompliant(false)]
		public static void VertexP2(PackedPointerType type, uint value)
		{
			calli(System.Void(System.Int32,System.UInt32), type, value, GL.EntryPoints[2536]);
		}

		// Token: 0x0600178A RID: 6026 RVA: 0x000435A8 File Offset: 0x000417A8
		[CLSCompliant(false)]
		public unsafe static void VertexP2(PackedPointerType type, int* value)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, value, GL.EntryPoints[2537]);
		}

		// Token: 0x0600178B RID: 6027 RVA: 0x000435BC File Offset: 0x000417BC
		[CLSCompliant(false)]
		public unsafe static void VertexP2(PackedPointerType type, uint* value)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, value, GL.EntryPoints[2537]);
		}

		// Token: 0x0600178C RID: 6028 RVA: 0x000435D0 File Offset: 0x000417D0
		[CLSCompliant(false)]
		public static void VertexP3(PackedPointerType type, int value)
		{
			calli(System.Void(System.Int32,System.UInt32), type, value, GL.EntryPoints[2538]);
		}

		// Token: 0x0600178D RID: 6029 RVA: 0x000435E4 File Offset: 0x000417E4
		[CLSCompliant(false)]
		public static void VertexP3(PackedPointerType type, uint value)
		{
			calli(System.Void(System.Int32,System.UInt32), type, value, GL.EntryPoints[2538]);
		}

		// Token: 0x0600178E RID: 6030 RVA: 0x000435F8 File Offset: 0x000417F8
		[CLSCompliant(false)]
		public unsafe static void VertexP3(PackedPointerType type, int* value)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, value, GL.EntryPoints[2539]);
		}

		// Token: 0x0600178F RID: 6031 RVA: 0x0004360C File Offset: 0x0004180C
		[CLSCompliant(false)]
		public unsafe static void VertexP3(PackedPointerType type, uint* value)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, value, GL.EntryPoints[2539]);
		}

		// Token: 0x06001790 RID: 6032 RVA: 0x00043620 File Offset: 0x00041820
		[CLSCompliant(false)]
		public static void VertexP4(PackedPointerType type, int value)
		{
			calli(System.Void(System.Int32,System.UInt32), type, value, GL.EntryPoints[2540]);
		}

		// Token: 0x06001791 RID: 6033 RVA: 0x00043634 File Offset: 0x00041834
		[CLSCompliant(false)]
		public static void VertexP4(PackedPointerType type, uint value)
		{
			calli(System.Void(System.Int32,System.UInt32), type, value, GL.EntryPoints[2540]);
		}

		// Token: 0x06001792 RID: 6034 RVA: 0x00043648 File Offset: 0x00041848
		[CLSCompliant(false)]
		public unsafe static void VertexP4(PackedPointerType type, int* value)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, value, GL.EntryPoints[2541]);
		}

		// Token: 0x06001793 RID: 6035 RVA: 0x0004365C File Offset: 0x0004185C
		[CLSCompliant(false)]
		public unsafe static void VertexP4(PackedPointerType type, uint* value)
		{
			calli(System.Void(System.Int32,System.UInt32*), type, value, GL.EntryPoints[2541]);
		}

		// Token: 0x06001794 RID: 6036 RVA: 0x00043670 File Offset: 0x00041870
		public static void VertexPointer(int size, VertexPointerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, pointer, GL.EntryPoints[2542]);
		}

		// Token: 0x06001795 RID: 6037 RVA: 0x00043688 File Offset: 0x00041888
		[CLSCompliant(false)]
		public unsafe static void VertexPointer<T3>(int size, VertexPointerType type, int stride, [In] [Out] T3[] pointer) where T3 : struct
		{
			fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[2542]);
			}
		}

		// Token: 0x06001796 RID: 6038 RVA: 0x000436C0 File Offset: 0x000418C0
		[CLSCompliant(false)]
		public unsafe static void VertexPointer<T3>(int size, VertexPointerType type, int stride, [In] [Out] T3[,] pointer) where T3 : struct
		{
			fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[2542]);
			}
		}

		// Token: 0x06001797 RID: 6039 RVA: 0x000436FC File Offset: 0x000418FC
		[CLSCompliant(false)]
		public unsafe static void VertexPointer<T3>(int size, VertexPointerType type, int stride, [In] [Out] T3[,,] pointer) where T3 : struct
		{
			fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[2542]);
			}
		}

		// Token: 0x06001798 RID: 6040 RVA: 0x00043738 File Offset: 0x00041938
		public unsafe static void VertexPointer<T3>(int size, VertexPointerType type, int stride, [In] [Out] ref T3 pointer) where T3 : struct
		{
			fixed (T3* ptr = &pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[2542]);
			}
		}

		// Token: 0x06001799 RID: 6041 RVA: 0x0004375C File Offset: 0x0004195C
		public static void Viewport(int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), x, y, width, height, GL.EntryPoints[2587]);
		}

		// Token: 0x0600179A RID: 6042 RVA: 0x00043774 File Offset: 0x00041974
		[CLSCompliant(false)]
		public unsafe static void ViewportArray(int first, int count, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), first, count, ptr, GL.EntryPoints[2588]);
			}
		}

		// Token: 0x0600179B RID: 6043 RVA: 0x000437AC File Offset: 0x000419AC
		[CLSCompliant(false)]
		public unsafe static void ViewportArray(int first, int count, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), first, count, ptr, GL.EntryPoints[2588]);
			}
		}

		// Token: 0x0600179C RID: 6044 RVA: 0x000437D0 File Offset: 0x000419D0
		[CLSCompliant(false)]
		public unsafe static void ViewportArray(int first, int count, float* v)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), first, count, v, GL.EntryPoints[2588]);
		}

		// Token: 0x0600179D RID: 6045 RVA: 0x000437E8 File Offset: 0x000419E8
		[CLSCompliant(false)]
		public unsafe static void ViewportArray(uint first, int count, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), first, count, ptr, GL.EntryPoints[2588]);
			}
		}

		// Token: 0x0600179E RID: 6046 RVA: 0x00043820 File Offset: 0x00041A20
		[CLSCompliant(false)]
		public unsafe static void ViewportArray(uint first, int count, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), first, count, ptr, GL.EntryPoints[2588]);
			}
		}

		// Token: 0x0600179F RID: 6047 RVA: 0x00043844 File Offset: 0x00041A44
		[CLSCompliant(false)]
		public unsafe static void ViewportArray(uint first, int count, float* v)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), first, count, v, GL.EntryPoints[2588]);
		}

		// Token: 0x060017A0 RID: 6048 RVA: 0x0004385C File Offset: 0x00041A5C
		[CLSCompliant(false)]
		public static void ViewportIndexed(int index, float x, float y, float w, float h)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single), index, x, y, w, h, GL.EntryPoints[2589]);
		}

		// Token: 0x060017A1 RID: 6049 RVA: 0x00043874 File Offset: 0x00041A74
		[CLSCompliant(false)]
		public static void ViewportIndexed(uint index, float x, float y, float w, float h)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single), index, x, y, w, h, GL.EntryPoints[2589]);
		}

		// Token: 0x060017A2 RID: 6050 RVA: 0x0004388C File Offset: 0x00041A8C
		[CLSCompliant(false)]
		public unsafe static void ViewportIndexed(int index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2590]);
			}
		}

		// Token: 0x060017A3 RID: 6051 RVA: 0x000438C0 File Offset: 0x00041AC0
		[CLSCompliant(false)]
		public unsafe static void ViewportIndexed(int index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2590]);
			}
		}

		// Token: 0x060017A4 RID: 6052 RVA: 0x000438E4 File Offset: 0x00041AE4
		[CLSCompliant(false)]
		public unsafe static void ViewportIndexed(int index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2590]);
		}

		// Token: 0x060017A5 RID: 6053 RVA: 0x000438F8 File Offset: 0x00041AF8
		[CLSCompliant(false)]
		public unsafe static void ViewportIndexed(uint index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2590]);
			}
		}

		// Token: 0x060017A6 RID: 6054 RVA: 0x0004392C File Offset: 0x00041B2C
		[CLSCompliant(false)]
		public unsafe static void ViewportIndexed(uint index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2590]);
			}
		}

		// Token: 0x060017A7 RID: 6055 RVA: 0x00043950 File Offset: 0x00041B50
		[CLSCompliant(false)]
		public unsafe static void ViewportIndexed(uint index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2590]);
		}

		// Token: 0x060017A8 RID: 6056 RVA: 0x00043964 File Offset: 0x00041B64
		[CLSCompliant(false)]
		[Obsolete("Use WaitSyncFlags overload instead")]
		public static WaitSyncStatus WaitSync(IntPtr sync, int flags, long timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[2591]);
		}

		// Token: 0x060017A9 RID: 6057 RVA: 0x0004397C File Offset: 0x00041B7C
		[CLSCompliant(false)]
		[Obsolete("Use WaitSyncFlags overload instead")]
		public static WaitSyncStatus WaitSync(IntPtr sync, int flags, ulong timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[2591]);
		}

		// Token: 0x060017AA RID: 6058 RVA: 0x00043994 File Offset: 0x00041B94
		[Obsolete("Use WaitSyncFlags overload instead")]
		[CLSCompliant(false)]
		public static WaitSyncStatus WaitSync(IntPtr sync, uint flags, ulong timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[2591]);
		}

		// Token: 0x060017AB RID: 6059 RVA: 0x000439AC File Offset: 0x00041BAC
		[CLSCompliant(false)]
		public static WaitSyncStatus WaitSync(IntPtr sync, WaitSyncFlags flags, long timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[2591]);
		}

		// Token: 0x060017AC RID: 6060 RVA: 0x000439C4 File Offset: 0x00041BC4
		[CLSCompliant(false)]
		public static WaitSyncStatus WaitSync(IntPtr sync, WaitSyncFlags flags, ulong timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[2591]);
		}

		// Token: 0x060017AD RID: 6061 RVA: 0x000439DC File Offset: 0x00041BDC
		public static void WindowPos2(double x, double y)
		{
			calli(System.Void(System.Double,System.Double), x, y, GL.EntryPoints[2602]);
		}

		// Token: 0x060017AE RID: 6062 RVA: 0x000439F0 File Offset: 0x00041BF0
		[CLSCompliant(false)]
		public unsafe static void WindowPos2(double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[2605]);
			}
		}

		// Token: 0x060017AF RID: 6063 RVA: 0x00043A24 File Offset: 0x00041C24
		[CLSCompliant(false)]
		public unsafe static void WindowPos2(ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[2605]);
			}
		}

		// Token: 0x060017B0 RID: 6064 RVA: 0x00043A48 File Offset: 0x00041C48
		[CLSCompliant(false)]
		public unsafe static void WindowPos2(double* v)
		{
			calli(System.Void(System.Double*), v, GL.EntryPoints[2605]);
		}

		// Token: 0x060017B1 RID: 6065 RVA: 0x00043A5C File Offset: 0x00041C5C
		public static void WindowPos2(float x, float y)
		{
			calli(System.Void(System.Single,System.Single), x, y, GL.EntryPoints[2608]);
		}

		// Token: 0x060017B2 RID: 6066 RVA: 0x00043A70 File Offset: 0x00041C70
		[CLSCompliant(false)]
		public unsafe static void WindowPos2(float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[2611]);
			}
		}

		// Token: 0x060017B3 RID: 6067 RVA: 0x00043AA4 File Offset: 0x00041CA4
		[CLSCompliant(false)]
		public unsafe static void WindowPos2(ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[2611]);
			}
		}

		// Token: 0x060017B4 RID: 6068 RVA: 0x00043AC8 File Offset: 0x00041CC8
		[CLSCompliant(false)]
		public unsafe static void WindowPos2(float* v)
		{
			calli(System.Void(System.Single*), v, GL.EntryPoints[2611]);
		}

		// Token: 0x060017B5 RID: 6069 RVA: 0x00043ADC File Offset: 0x00041CDC
		public static void WindowPos2(int x, int y)
		{
			calli(System.Void(System.Int32,System.Int32), x, y, GL.EntryPoints[2614]);
		}

		// Token: 0x060017B6 RID: 6070 RVA: 0x00043AF0 File Offset: 0x00041CF0
		[CLSCompliant(false)]
		public unsafe static void WindowPos2(int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2617]);
			}
		}

		// Token: 0x060017B7 RID: 6071 RVA: 0x00043B24 File Offset: 0x00041D24
		[CLSCompliant(false)]
		public unsafe static void WindowPos2(ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2617]);
			}
		}

		// Token: 0x060017B8 RID: 6072 RVA: 0x00043B48 File Offset: 0x00041D48
		[CLSCompliant(false)]
		public unsafe static void WindowPos2(int* v)
		{
			calli(System.Void(System.Int32*), v, GL.EntryPoints[2617]);
		}

		// Token: 0x060017B9 RID: 6073 RVA: 0x00043B5C File Offset: 0x00041D5C
		public static void WindowPos2(short x, short y)
		{
			calli(System.Void(System.Int16,System.Int16), x, y, GL.EntryPoints[2620]);
		}

		// Token: 0x060017BA RID: 6074 RVA: 0x00043B70 File Offset: 0x00041D70
		[CLSCompliant(false)]
		public unsafe static void WindowPos2(short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2623]);
			}
		}

		// Token: 0x060017BB RID: 6075 RVA: 0x00043BA4 File Offset: 0x00041DA4
		[CLSCompliant(false)]
		public unsafe static void WindowPos2(ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2623]);
			}
		}

		// Token: 0x060017BC RID: 6076 RVA: 0x00043BC8 File Offset: 0x00041DC8
		[CLSCompliant(false)]
		public unsafe static void WindowPos2(short* v)
		{
			calli(System.Void(System.Int16*), v, GL.EntryPoints[2623]);
		}

		// Token: 0x060017BD RID: 6077 RVA: 0x00043BDC File Offset: 0x00041DDC
		public static void WindowPos3(double x, double y, double z)
		{
			calli(System.Void(System.Double,System.Double,System.Double), x, y, z, GL.EntryPoints[2626]);
		}

		// Token: 0x060017BE RID: 6078 RVA: 0x00043BF4 File Offset: 0x00041DF4
		[CLSCompliant(false)]
		public unsafe static void WindowPos3(double[] v)
		{
			fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[2629]);
			}
		}

		// Token: 0x060017BF RID: 6079 RVA: 0x00043C28 File Offset: 0x00041E28
		[CLSCompliant(false)]
		public unsafe static void WindowPos3(ref double v)
		{
			fixed (double* ptr = &v)
			{
				calli(System.Void(System.Double*), ptr, GL.EntryPoints[2629]);
			}
		}

		// Token: 0x060017C0 RID: 6080 RVA: 0x00043C4C File Offset: 0x00041E4C
		[CLSCompliant(false)]
		public unsafe static void WindowPos3(double* v)
		{
			calli(System.Void(System.Double*), v, GL.EntryPoints[2629]);
		}

		// Token: 0x060017C1 RID: 6081 RVA: 0x00043C60 File Offset: 0x00041E60
		public static void WindowPos3(float x, float y, float z)
		{
			calli(System.Void(System.Single,System.Single,System.Single), x, y, z, GL.EntryPoints[2632]);
		}

		// Token: 0x060017C2 RID: 6082 RVA: 0x00043C78 File Offset: 0x00041E78
		[CLSCompliant(false)]
		public unsafe static void WindowPos3(float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[2635]);
			}
		}

		// Token: 0x060017C3 RID: 6083 RVA: 0x00043CAC File Offset: 0x00041EAC
		[CLSCompliant(false)]
		public unsafe static void WindowPos3(ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.Single*), ptr, GL.EntryPoints[2635]);
			}
		}

		// Token: 0x060017C4 RID: 6084 RVA: 0x00043CD0 File Offset: 0x00041ED0
		[CLSCompliant(false)]
		public unsafe static void WindowPos3(float* v)
		{
			calli(System.Void(System.Single*), v, GL.EntryPoints[2635]);
		}

		// Token: 0x060017C5 RID: 6085 RVA: 0x00043CE4 File Offset: 0x00041EE4
		public static void WindowPos3(int x, int y, int z)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), x, y, z, GL.EntryPoints[2638]);
		}

		// Token: 0x060017C6 RID: 6086 RVA: 0x00043CFC File Offset: 0x00041EFC
		[CLSCompliant(false)]
		public unsafe static void WindowPos3(int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2641]);
			}
		}

		// Token: 0x060017C7 RID: 6087 RVA: 0x00043D30 File Offset: 0x00041F30
		[CLSCompliant(false)]
		public unsafe static void WindowPos3(ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2641]);
			}
		}

		// Token: 0x060017C8 RID: 6088 RVA: 0x00043D54 File Offset: 0x00041F54
		[CLSCompliant(false)]
		public unsafe static void WindowPos3(int* v)
		{
			calli(System.Void(System.Int32*), v, GL.EntryPoints[2641]);
		}

		// Token: 0x060017C9 RID: 6089 RVA: 0x00043D68 File Offset: 0x00041F68
		public static void WindowPos3(short x, short y, short z)
		{
			calli(System.Void(System.Int16,System.Int16,System.Int16), x, y, z, GL.EntryPoints[2644]);
		}

		// Token: 0x060017CA RID: 6090 RVA: 0x00043D80 File Offset: 0x00041F80
		[CLSCompliant(false)]
		public unsafe static void WindowPos3(short[] v)
		{
			fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2647]);
			}
		}

		// Token: 0x060017CB RID: 6091 RVA: 0x00043DB4 File Offset: 0x00041FB4
		[CLSCompliant(false)]
		public unsafe static void WindowPos3(ref short v)
		{
			fixed (short* ptr = &v)
			{
				calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2647]);
			}
		}

		// Token: 0x060017CC RID: 6092 RVA: 0x00043DD8 File Offset: 0x00041FD8
		[CLSCompliant(false)]
		public unsafe static void WindowPos3(short* v)
		{
			calli(System.Void(System.Int16*), v, GL.EntryPoints[2647]);
		}

		// Token: 0x060017CD RID: 6093 RVA: 0x00043DEC File Offset: 0x00041FEC
		public GL()
		{
			this._EntryPointsInstance = GL.EntryPoints;
			this._EntryPointNamesInstance = GL.EntryPointNames;
			this._EntryPointNameOffsetsInstance = GL.EntryPointNameOffsets;
		}

		// Token: 0x060017CE RID: 6094 RVA: 0x00043E18 File Offset: 0x00042018
		[Obsolete("If you are using a context constructed outside of OpenTK, create a new GraphicsContext and pass your context handle to it. Otherwise, there is no need to call this method.")]
		public static void LoadAll()
		{
			new GL().LoadEntryPoints();
		}

		// Token: 0x1700026F RID: 623
		// (get) Token: 0x060017CF RID: 6095 RVA: 0x00043E24 File Offset: 0x00042024
		protected override object SyncRoot
		{
			get
			{
				return GL.sync_root;
			}
		}

		// Token: 0x060017D0 RID: 6096 RVA: 0x00043E2C File Offset: 0x0004202C
		public static void Color3(Color color)
		{
			GL.Color3(color.R, color.G, color.B);
		}

		// Token: 0x060017D1 RID: 6097 RVA: 0x00043E48 File Offset: 0x00042048
		public static void Color4(Color color)
		{
			GL.Color4(color.R, color.G, color.B, color.A);
		}

		// Token: 0x060017D2 RID: 6098 RVA: 0x00043E6C File Offset: 0x0004206C
		public static void Color3(Vector3 color)
		{
			GL.Color3(color.X, color.Y, color.Z);
		}

		// Token: 0x060017D3 RID: 6099 RVA: 0x00043E88 File Offset: 0x00042088
		public static void Color4(Vector4 color)
		{
			GL.Color4(color.X, color.Y, color.Z, color.W);
		}

		// Token: 0x060017D4 RID: 6100 RVA: 0x00043EAC File Offset: 0x000420AC
		public static void Color4(Color4 color)
		{
			GL.Color4(color.R, color.G, color.B, color.A);
		}

		// Token: 0x060017D5 RID: 6101 RVA: 0x00043ED0 File Offset: 0x000420D0
		public static void ClearColor(Color color)
		{
			GL.ClearColor((float)color.R / 255f, (float)color.G / 255f, (float)color.B / 255f, (float)color.A / 255f);
		}

		// Token: 0x060017D6 RID: 6102 RVA: 0x00043F10 File Offset: 0x00042110
		public static void ClearColor(Color4 color)
		{
			GL.ClearColor(color.R, color.G, color.B, color.A);
		}

		// Token: 0x060017D7 RID: 6103 RVA: 0x00043F34 File Offset: 0x00042134
		public static void BlendColor(Color color)
		{
			GL.BlendColor((float)color.R / 255f, (float)color.G / 255f, (float)color.B / 255f, (float)color.A / 255f);
		}

		// Token: 0x060017D8 RID: 6104 RVA: 0x00043F74 File Offset: 0x00042174
		public static void BlendColor(Color4 color)
		{
			GL.BlendColor(color.R, color.G, color.B, color.A);
		}

		// Token: 0x060017D9 RID: 6105 RVA: 0x00043F98 File Offset: 0x00042198
		public unsafe static void Material(MaterialFace face, MaterialParameter pname, Vector4 @params)
		{
			GL.Material(face, pname, &@params.X);
		}

		// Token: 0x060017DA RID: 6106 RVA: 0x00043FAC File Offset: 0x000421AC
		public unsafe static void Material(MaterialFace face, MaterialParameter pname, Color4 @params)
		{
			GL.Material(face, pname, (float*)(&@params));
		}

		// Token: 0x060017DB RID: 6107 RVA: 0x00043FB8 File Offset: 0x000421B8
		public unsafe static void Light(LightName name, LightParameter pname, Vector4 @params)
		{
			GL.Light(name, pname, &@params.X);
		}

		// Token: 0x060017DC RID: 6108 RVA: 0x00043FCC File Offset: 0x000421CC
		public unsafe static void Light(LightName name, LightParameter pname, Color4 @params)
		{
			GL.Light(name, pname, (float*)(&@params));
		}

		// Token: 0x060017DD RID: 6109 RVA: 0x00043FD8 File Offset: 0x000421D8
		public static void Normal3(Vector3 normal)
		{
			GL.Normal3(normal.X, normal.Y, normal.Z);
		}

		// Token: 0x060017DE RID: 6110 RVA: 0x00043FF4 File Offset: 0x000421F4
		public static void RasterPos2(Vector2 pos)
		{
			GL.RasterPos2(pos.X, pos.Y);
		}

		// Token: 0x060017DF RID: 6111 RVA: 0x0004400C File Offset: 0x0004220C
		public static void RasterPos3(Vector3 pos)
		{
			GL.RasterPos3(pos.X, pos.Y, pos.Z);
		}

		// Token: 0x060017E0 RID: 6112 RVA: 0x00044028 File Offset: 0x00042228
		public static void RasterPos4(Vector4 pos)
		{
			GL.RasterPos4(pos.X, pos.Y, pos.Z, pos.W);
		}

		// Token: 0x060017E1 RID: 6113 RVA: 0x0004404C File Offset: 0x0004224C
		public static void Vertex2(Vector2 v)
		{
			GL.Vertex2(v.X, v.Y);
		}

		// Token: 0x060017E2 RID: 6114 RVA: 0x00044064 File Offset: 0x00042264
		public static void Vertex3(Vector3 v)
		{
			GL.Vertex3(v.X, v.Y, v.Z);
		}

		// Token: 0x060017E3 RID: 6115 RVA: 0x00044080 File Offset: 0x00042280
		public static void Vertex4(Vector4 v)
		{
			GL.Vertex4(v.X, v.Y, v.Z, v.W);
		}

		// Token: 0x060017E4 RID: 6116 RVA: 0x000440A4 File Offset: 0x000422A4
		public static void TexCoord2(Vector2 v)
		{
			GL.TexCoord2(v.X, v.Y);
		}

		// Token: 0x060017E5 RID: 6117 RVA: 0x000440BC File Offset: 0x000422BC
		public static void TexCoord3(Vector3 v)
		{
			GL.TexCoord3(v.X, v.Y, v.Z);
		}

		// Token: 0x060017E6 RID: 6118 RVA: 0x000440D8 File Offset: 0x000422D8
		public static void TexCoord4(Vector4 v)
		{
			GL.TexCoord4(v.X, v.Y, v.Z, v.W);
		}

		// Token: 0x060017E7 RID: 6119 RVA: 0x000440FC File Offset: 0x000422FC
		public static void Rotate(float angle, Vector3 axis)
		{
			GL.Rotate(angle, axis.X, axis.Y, axis.Z);
		}

		// Token: 0x060017E8 RID: 6120 RVA: 0x0004411C File Offset: 0x0004231C
		public static void Scale(Vector3 scale)
		{
			GL.Scale(scale.X, scale.Y, scale.Z);
		}

		// Token: 0x060017E9 RID: 6121 RVA: 0x00044138 File Offset: 0x00042338
		public static void Translate(Vector3 trans)
		{
			GL.Translate(trans.X, trans.Y, trans.Z);
		}

		// Token: 0x060017EA RID: 6122 RVA: 0x00044154 File Offset: 0x00042354
		public unsafe static void MultMatrix(ref Matrix4 mat)
		{
			fixed (float* ptr = &mat.Row0.X)
			{
				GL.MultMatrix(ptr);
			}
		}

		// Token: 0x060017EB RID: 6123 RVA: 0x00044178 File Offset: 0x00042378
		public unsafe static void LoadMatrix(ref Matrix4 mat)
		{
			fixed (float* ptr = &mat.Row0.X)
			{
				GL.LoadMatrix(ptr);
			}
		}

		// Token: 0x060017EC RID: 6124 RVA: 0x0004419C File Offset: 0x0004239C
		public unsafe static void LoadTransposeMatrix(ref Matrix4 mat)
		{
			fixed (float* ptr = &mat.Row0.X)
			{
				GL.LoadTransposeMatrix(ptr);
			}
		}

		// Token: 0x060017ED RID: 6125 RVA: 0x000441C0 File Offset: 0x000423C0
		public unsafe static void MultTransposeMatrix(ref Matrix4 mat)
		{
			fixed (float* ptr = &mat.Row0.X)
			{
				GL.MultTransposeMatrix(ptr);
			}
		}

		// Token: 0x060017EE RID: 6126 RVA: 0x000441E4 File Offset: 0x000423E4
		public static void Normal3(Vector3d normal)
		{
			GL.Normal3(normal.X, normal.Y, normal.Z);
		}

		// Token: 0x060017EF RID: 6127 RVA: 0x00044200 File Offset: 0x00042400
		public static void RasterPos2(Vector2d pos)
		{
			GL.RasterPos2(pos.X, pos.Y);
		}

		// Token: 0x060017F0 RID: 6128 RVA: 0x00044218 File Offset: 0x00042418
		public static void RasterPos3(Vector3d pos)
		{
			GL.RasterPos3(pos.X, pos.Y, pos.Z);
		}

		// Token: 0x060017F1 RID: 6129 RVA: 0x00044234 File Offset: 0x00042434
		public static void RasterPos4(Vector4d pos)
		{
			GL.RasterPos4(pos.X, pos.Y, pos.Z, pos.W);
		}

		// Token: 0x060017F2 RID: 6130 RVA: 0x00044258 File Offset: 0x00042458
		public static void Vertex2(Vector2d v)
		{
			GL.Vertex2(v.X, v.Y);
		}

		// Token: 0x060017F3 RID: 6131 RVA: 0x00044270 File Offset: 0x00042470
		public static void Vertex3(Vector3d v)
		{
			GL.Vertex3(v.X, v.Y, v.Z);
		}

		// Token: 0x060017F4 RID: 6132 RVA: 0x0004428C File Offset: 0x0004248C
		public static void Vertex4(Vector4d v)
		{
			GL.Vertex4(v.X, v.Y, v.Z, v.W);
		}

		// Token: 0x060017F5 RID: 6133 RVA: 0x000442B0 File Offset: 0x000424B0
		public static void TexCoord2(Vector2d v)
		{
			GL.TexCoord2(v.X, v.Y);
		}

		// Token: 0x060017F6 RID: 6134 RVA: 0x000442C8 File Offset: 0x000424C8
		public static void TexCoord3(Vector3d v)
		{
			GL.TexCoord3(v.X, v.Y, v.Z);
		}

		// Token: 0x060017F7 RID: 6135 RVA: 0x000442E4 File Offset: 0x000424E4
		public static void TexCoord4(Vector4d v)
		{
			GL.TexCoord4(v.X, v.Y, v.Z, v.W);
		}

		// Token: 0x060017F8 RID: 6136 RVA: 0x00044308 File Offset: 0x00042508
		public static void Rotate(double angle, Vector3d axis)
		{
			GL.Rotate(angle, axis.X, axis.Y, axis.Z);
		}

		// Token: 0x060017F9 RID: 6137 RVA: 0x00044328 File Offset: 0x00042528
		public static void Scale(Vector3d scale)
		{
			GL.Scale(scale.X, scale.Y, scale.Z);
		}

		// Token: 0x060017FA RID: 6138 RVA: 0x00044344 File Offset: 0x00042544
		public static void Translate(Vector3d trans)
		{
			GL.Translate(trans.X, trans.Y, trans.Z);
		}

		// Token: 0x060017FB RID: 6139 RVA: 0x00044360 File Offset: 0x00042560
		public unsafe static void MultMatrix(ref Matrix4d mat)
		{
			fixed (double* ptr = &mat.Row0.X)
			{
				GL.MultMatrix(ptr);
			}
		}

		// Token: 0x060017FC RID: 6140 RVA: 0x00044384 File Offset: 0x00042584
		public unsafe static void LoadMatrix(ref Matrix4d mat)
		{
			fixed (double* ptr = &mat.Row0.X)
			{
				GL.LoadMatrix(ptr);
			}
		}

		// Token: 0x060017FD RID: 6141 RVA: 0x000443A8 File Offset: 0x000425A8
		public unsafe static void LoadTransposeMatrix(ref Matrix4d mat)
		{
			fixed (double* ptr = &mat.Row0.X)
			{
				GL.LoadTransposeMatrix(ptr);
			}
		}

		// Token: 0x060017FE RID: 6142 RVA: 0x000443CC File Offset: 0x000425CC
		public unsafe static void MultTransposeMatrix(ref Matrix4d mat)
		{
			fixed (double* ptr = &mat.Row0.X)
			{
				GL.MultTransposeMatrix(ptr);
			}
		}

		// Token: 0x060017FF RID: 6143 RVA: 0x000443F0 File Offset: 0x000425F0
		[CLSCompliant(false)]
		public static void Uniform2(int location, ref Vector2 vector)
		{
			GL.Uniform2(location, vector.X, vector.Y);
		}

		// Token: 0x06001800 RID: 6144 RVA: 0x00044404 File Offset: 0x00042604
		[CLSCompliant(false)]
		public static void Uniform3(int location, ref Vector3 vector)
		{
			GL.Uniform3(location, vector.X, vector.Y, vector.Z);
		}

		// Token: 0x06001801 RID: 6145 RVA: 0x00044420 File Offset: 0x00042620
		[CLSCompliant(false)]
		public static void Uniform4(int location, ref Vector4 vector)
		{
			GL.Uniform4(location, vector.X, vector.Y, vector.Z, vector.W);
		}

		// Token: 0x06001802 RID: 6146 RVA: 0x00044440 File Offset: 0x00042640
		public static void Uniform2(int location, Vector2 vector)
		{
			GL.Uniform2(location, vector.X, vector.Y);
		}

		// Token: 0x06001803 RID: 6147 RVA: 0x00044458 File Offset: 0x00042658
		public static void Uniform3(int location, Vector3 vector)
		{
			GL.Uniform3(location, vector.X, vector.Y, vector.Z);
		}

		// Token: 0x06001804 RID: 6148 RVA: 0x00044478 File Offset: 0x00042678
		public static void Uniform4(int location, Vector4 vector)
		{
			GL.Uniform4(location, vector.X, vector.Y, vector.Z, vector.W);
		}

		// Token: 0x06001805 RID: 6149 RVA: 0x0004449C File Offset: 0x0004269C
		public static void Uniform4(int location, Color4 color)
		{
			GL.Uniform4(location, color.R, color.G, color.B, color.A);
		}

		// Token: 0x06001806 RID: 6150 RVA: 0x000444C0 File Offset: 0x000426C0
		public static void Uniform4(int location, Quaternion quaternion)
		{
			GL.Uniform4(location, quaternion.X, quaternion.Y, quaternion.Z, quaternion.W);
		}

		// Token: 0x06001807 RID: 6151 RVA: 0x000444E4 File Offset: 0x000426E4
		public unsafe static void UniformMatrix2(int location, bool transpose, ref Matrix2 matrix)
		{
			fixed (float* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix2(location, 1, transpose, ptr);
			}
		}

		// Token: 0x06001808 RID: 6152 RVA: 0x0004450C File Offset: 0x0004270C
		public unsafe static void UniformMatrix2(int location, bool transpose, ref Matrix2d matrix)
		{
			fixed (double* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix2(location, 1, transpose, ptr);
			}
		}

		// Token: 0x06001809 RID: 6153 RVA: 0x00044534 File Offset: 0x00042734
		public unsafe static void UniformMatrix2x3(int location, bool transpose, ref Matrix2x3 matrix)
		{
			fixed (float* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix2x3(location, 1, transpose, ptr);
			}
		}

		// Token: 0x0600180A RID: 6154 RVA: 0x0004455C File Offset: 0x0004275C
		public unsafe static void UniformMatrix2x3(int location, bool transpose, ref Matrix2x3d matrix)
		{
			fixed (double* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix2x3(location, 1, transpose, ptr);
			}
		}

		// Token: 0x0600180B RID: 6155 RVA: 0x00044584 File Offset: 0x00042784
		public unsafe static void UniformMatrix2x4(int location, bool transpose, ref Matrix2x4 matrix)
		{
			fixed (float* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix2x4(location, 1, transpose, ptr);
			}
		}

		// Token: 0x0600180C RID: 6156 RVA: 0x000445AC File Offset: 0x000427AC
		public unsafe static void UniformMatrix2x4(int location, bool transpose, ref Matrix2x4d matrix)
		{
			fixed (double* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix2x4(location, 1, transpose, ptr);
			}
		}

		// Token: 0x0600180D RID: 6157 RVA: 0x000445D4 File Offset: 0x000427D4
		public unsafe static void UniformMatrix3x2(int location, bool transpose, ref Matrix3x2 matrix)
		{
			fixed (float* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix3x2(location, 1, transpose, ptr);
			}
		}

		// Token: 0x0600180E RID: 6158 RVA: 0x000445FC File Offset: 0x000427FC
		public unsafe static void UniformMatrix3x2(int location, bool transpose, ref Matrix3x2d matrix)
		{
			fixed (double* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix3x2(location, 1, transpose, ptr);
			}
		}

		// Token: 0x0600180F RID: 6159 RVA: 0x00044624 File Offset: 0x00042824
		public unsafe static void UniformMatrix3(int location, bool transpose, ref Matrix3 matrix)
		{
			fixed (float* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix3(location, 1, transpose, ptr);
			}
		}

		// Token: 0x06001810 RID: 6160 RVA: 0x0004464C File Offset: 0x0004284C
		public unsafe static void UniformMatrix3(int location, bool transpose, ref Matrix3d matrix)
		{
			fixed (double* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix3(location, 1, transpose, ptr);
			}
		}

		// Token: 0x06001811 RID: 6161 RVA: 0x00044674 File Offset: 0x00042874
		public unsafe static void UniformMatrix3x4(int location, bool transpose, ref Matrix3x4 matrix)
		{
			fixed (float* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix3x4(location, 1, transpose, ptr);
			}
		}

		// Token: 0x06001812 RID: 6162 RVA: 0x0004469C File Offset: 0x0004289C
		public unsafe static void UniformMatrix3x4(int location, bool transpose, ref Matrix3x4d matrix)
		{
			fixed (double* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix3x4(location, 1, transpose, ptr);
			}
		}

		// Token: 0x06001813 RID: 6163 RVA: 0x000446C4 File Offset: 0x000428C4
		public unsafe static void UniformMatrix4x2(int location, bool transpose, ref Matrix4x2 matrix)
		{
			fixed (float* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix4x2(location, 1, transpose, ptr);
			}
		}

		// Token: 0x06001814 RID: 6164 RVA: 0x000446EC File Offset: 0x000428EC
		public unsafe static void UniformMatrix4x2(int location, bool transpose, ref Matrix4x2d matrix)
		{
			fixed (double* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix4x2(location, 1, transpose, ptr);
			}
		}

		// Token: 0x06001815 RID: 6165 RVA: 0x00044714 File Offset: 0x00042914
		public unsafe static void UniformMatrix4x3(int location, bool transpose, ref Matrix4x3 matrix)
		{
			fixed (float* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix4x3(location, 1, transpose, ptr);
			}
		}

		// Token: 0x06001816 RID: 6166 RVA: 0x0004473C File Offset: 0x0004293C
		public unsafe static void UniformMatrix4x3(int location, bool transpose, ref Matrix4x3d matrix)
		{
			fixed (double* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix4x3(location, 1, transpose, ptr);
			}
		}

		// Token: 0x06001817 RID: 6167 RVA: 0x00044764 File Offset: 0x00042964
		public unsafe static void UniformMatrix4(int location, bool transpose, ref Matrix4 matrix)
		{
			fixed (float* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix4(location, 1, transpose, ptr);
			}
		}

		// Token: 0x06001818 RID: 6168 RVA: 0x0004478C File Offset: 0x0004298C
		public unsafe static void UniformMatrix4(int location, bool transpose, ref Matrix4d matrix)
		{
			fixed (double* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix4(location, 1, transpose, ptr);
			}
		}

		// Token: 0x06001819 RID: 6169 RVA: 0x000447B4 File Offset: 0x000429B4
		public static string GetActiveAttrib(int program, int index, out int size, out ActiveAttribType type)
		{
			int num;
			GL.GetProgram(program, GetProgramParameterName.ActiveAttributeMaxLength, out num);
			StringBuilder stringBuilder = new StringBuilder((num == 0) ? 1 : (num * 2));
			GL.GetActiveAttrib(program, index, stringBuilder.Capacity, out num, out size, out type, stringBuilder);
			return stringBuilder.ToString();
		}

		// Token: 0x0600181A RID: 6170 RVA: 0x000447F8 File Offset: 0x000429F8
		public static string GetActiveUniform(int program, int uniformIndex, out int size, out ActiveUniformType type)
		{
			int num;
			GL.GetProgram(program, GetProgramParameterName.ActiveUniformMaxLength, out num);
			StringBuilder stringBuilder = new StringBuilder((num == 0) ? 1 : num);
			GL.GetActiveUniform(program, uniformIndex, stringBuilder.Capacity, out num, out size, out type, stringBuilder);
			return stringBuilder.ToString();
		}

		// Token: 0x0600181B RID: 6171 RVA: 0x00044838 File Offset: 0x00042A38
		public static string GetActiveUniformName(int program, int uniformIndex)
		{
			int num;
			GL.GetProgram(program, GetProgramParameterName.ActiveUniformMaxLength, out num);
			StringBuilder stringBuilder = new StringBuilder((num == 0) ? 1 : (num * 2));
			GL.GetActiveUniformName(program, uniformIndex, stringBuilder.Capacity, out num, stringBuilder);
			return stringBuilder.ToString();
		}

		// Token: 0x0600181C RID: 6172 RVA: 0x00044878 File Offset: 0x00042A78
		public static string GetActiveUniformBlockName(int program, int uniformIndex)
		{
			int num;
			GL.GetProgram(program, GetProgramParameterName.ActiveUniformBlockMaxNameLength, out num);
			StringBuilder stringBuilder = new StringBuilder((num == 0) ? 1 : (num * 2));
			GL.GetActiveUniformBlockName(program, uniformIndex, stringBuilder.Capacity, out num, stringBuilder);
			return stringBuilder.ToString();
		}

		// Token: 0x0600181D RID: 6173 RVA: 0x000448B8 File Offset: 0x00042AB8
		public unsafe static void ShaderSource(int shader, string @string)
		{
			int length = @string.Length;
			GL.ShaderSource((uint)shader, 1, new string[]
			{
				@string
			}, &length);
		}

		// Token: 0x0600181E RID: 6174 RVA: 0x000448E4 File Offset: 0x00042AE4
		public static string GetShaderInfoLog(int shader)
		{
			string result;
			GL.GetShaderInfoLog(shader, out result);
			return result;
		}

		// Token: 0x0600181F RID: 6175 RVA: 0x000448FC File Offset: 0x00042AFC
		public unsafe static void GetShaderInfoLog(int shader, out string info)
		{
			int num;
			GL.GetShader(shader, ShaderParameter.InfoLogLength, out num);
			if (num == 0)
			{
				info = string.Empty;
				return;
			}
			StringBuilder stringBuilder = new StringBuilder(num * 2);
			GL.GetShaderInfoLog((uint)shader, stringBuilder.Capacity, &num, stringBuilder);
			info = stringBuilder.ToString();
		}

		// Token: 0x06001820 RID: 6176 RVA: 0x00044944 File Offset: 0x00042B44
		public static string GetProgramInfoLog(int program)
		{
			string result;
			GL.GetProgramInfoLog(program, out result);
			return result;
		}

		// Token: 0x06001821 RID: 6177 RVA: 0x0004495C File Offset: 0x00042B5C
		public unsafe static void GetProgramInfoLog(int program, out string info)
		{
			int num;
			GL.GetProgram(program, GetProgramParameterName.InfoLogLength, out num);
			if (num == 0)
			{
				info = string.Empty;
				return;
			}
			StringBuilder stringBuilder = new StringBuilder(num * 2);
			GL.GetProgramInfoLog((uint)program, stringBuilder.Capacity, &num, stringBuilder);
			info = stringBuilder.ToString();
		}

		// Token: 0x06001822 RID: 6178 RVA: 0x000449A4 File Offset: 0x00042BA4
		public static void PointParameter(PointSpriteCoordOriginParameter param)
		{
			GL.PointParameter(PointParameterName.PointSpriteCoordOrigin, (int)param);
		}

		// Token: 0x06001823 RID: 6179 RVA: 0x000449B4 File Offset: 0x00042BB4
		[CLSCompliant(false)]
		public static void VertexAttrib2(int index, ref Vector2 v)
		{
			GL.VertexAttrib2(index, v.X, v.Y);
		}

		// Token: 0x06001824 RID: 6180 RVA: 0x000449C8 File Offset: 0x00042BC8
		[CLSCompliant(false)]
		public static void VertexAttrib3(int index, ref Vector3 v)
		{
			GL.VertexAttrib3(index, v.X, v.Y, v.Z);
		}

		// Token: 0x06001825 RID: 6181 RVA: 0x000449E4 File Offset: 0x00042BE4
		[CLSCompliant(false)]
		public static void VertexAttrib4(int index, ref Vector4 v)
		{
			GL.VertexAttrib4(index, v.X, v.Y, v.Z, v.W);
		}

		// Token: 0x06001826 RID: 6182 RVA: 0x00044A04 File Offset: 0x00042C04
		public static void VertexAttrib2(int index, Vector2 v)
		{
			GL.VertexAttrib2(index, v.X, v.Y);
		}

		// Token: 0x06001827 RID: 6183 RVA: 0x00044A1C File Offset: 0x00042C1C
		public static void VertexAttrib3(int index, Vector3 v)
		{
			GL.VertexAttrib3(index, v.X, v.Y, v.Z);
		}

		// Token: 0x06001828 RID: 6184 RVA: 0x00044A3C File Offset: 0x00042C3C
		public static void VertexAttrib4(int index, Vector4 v)
		{
			GL.VertexAttrib4(index, v.X, v.Y, v.Z, v.W);
		}

		// Token: 0x06001829 RID: 6185 RVA: 0x00044A60 File Offset: 0x00042C60
		public static void MultiTexCoord2(TextureUnit target, ref Vector2 v)
		{
			GL.MultiTexCoord2(target, v.X, v.Y);
		}

		// Token: 0x0600182A RID: 6186 RVA: 0x00044A74 File Offset: 0x00042C74
		public static void MultiTexCoord3(TextureUnit target, ref Vector3 v)
		{
			GL.MultiTexCoord3(target, v.X, v.Y, v.Z);
		}

		// Token: 0x0600182B RID: 6187 RVA: 0x00044A90 File Offset: 0x00042C90
		public static void MultiTexCoord4(TextureUnit target, ref Vector4 v)
		{
			GL.MultiTexCoord4(target, v.X, v.Y, v.Z, v.W);
		}

		// Token: 0x0600182C RID: 6188 RVA: 0x00044AB0 File Offset: 0x00042CB0
		[CLSCompliant(false)]
		public static void VertexAttrib2(int index, ref Vector2d v)
		{
			GL.VertexAttrib2(index, v.X, v.Y);
		}

		// Token: 0x0600182D RID: 6189 RVA: 0x00044AC4 File Offset: 0x00042CC4
		[CLSCompliant(false)]
		public static void VertexAttrib3(int index, ref Vector3d v)
		{
			GL.VertexAttrib3(index, v.X, v.Y, v.Z);
		}

		// Token: 0x0600182E RID: 6190 RVA: 0x00044AE0 File Offset: 0x00042CE0
		[CLSCompliant(false)]
		public static void VertexAttrib4(int index, ref Vector4d v)
		{
			GL.VertexAttrib4(index, v.X, v.Y, v.Z, v.W);
		}

		// Token: 0x0600182F RID: 6191 RVA: 0x00044B00 File Offset: 0x00042D00
		public static void VertexAttrib2(int index, Vector2d v)
		{
			GL.VertexAttrib2(index, v.X, v.Y);
		}

		// Token: 0x06001830 RID: 6192 RVA: 0x00044B18 File Offset: 0x00042D18
		public static void VertexAttrib3(int index, Vector3d v)
		{
			GL.VertexAttrib3(index, v.X, v.Y, v.Z);
		}

		// Token: 0x06001831 RID: 6193 RVA: 0x00044B38 File Offset: 0x00042D38
		public static void VertexAttrib4(int index, Vector4d v)
		{
			GL.VertexAttrib4(index, v.X, v.Y, v.Z, v.W);
		}

		// Token: 0x06001832 RID: 6194 RVA: 0x00044B5C File Offset: 0x00042D5C
		public static void MultiTexCoord2(TextureUnit target, ref Vector2d v)
		{
			GL.MultiTexCoord2(target, v.X, v.Y);
		}

		// Token: 0x06001833 RID: 6195 RVA: 0x00044B70 File Offset: 0x00042D70
		public static void MultiTexCoord3(TextureUnit target, ref Vector3d v)
		{
			GL.MultiTexCoord3(target, v.X, v.Y, v.Z);
		}

		// Token: 0x06001834 RID: 6196 RVA: 0x00044B8C File Offset: 0x00042D8C
		public static void MultiTexCoord4(TextureUnit target, ref Vector4d v)
		{
			GL.MultiTexCoord4(target, v.X, v.Y, v.Z, v.W);
		}

		// Token: 0x06001835 RID: 6197 RVA: 0x00044BAC File Offset: 0x00042DAC
		[CLSCompliant(false)]
		public static void Rect(RectangleF rect)
		{
			GL.Rect(rect.Left, rect.Top, rect.Right, rect.Bottom);
		}

		// Token: 0x06001836 RID: 6198 RVA: 0x00044BD0 File Offset: 0x00042DD0
		[CLSCompliant(false)]
		public static void Rect(Rectangle rect)
		{
			GL.Rect(rect.Left, rect.Top, rect.Right, rect.Bottom);
		}

		// Token: 0x06001837 RID: 6199 RVA: 0x00044BF4 File Offset: 0x00042DF4
		[CLSCompliant(false)]
		public static void Rect(ref RectangleF rect)
		{
			GL.Rect(rect.Left, rect.Top, rect.Right, rect.Bottom);
		}

		// Token: 0x06001838 RID: 6200 RVA: 0x00044C14 File Offset: 0x00042E14
		[CLSCompliant(false)]
		public static void Rect(ref Rectangle rect)
		{
			GL.Rect(rect.Left, rect.Top, rect.Right, rect.Bottom);
		}

		// Token: 0x06001839 RID: 6201 RVA: 0x00044C34 File Offset: 0x00042E34
		public static void VertexPointer(int size, VertexPointerType type, int stride, int offset)
		{
			GL.VertexPointer(size, type, stride, (IntPtr)offset);
		}

		// Token: 0x0600183A RID: 6202 RVA: 0x00044C44 File Offset: 0x00042E44
		public static void NormalPointer(NormalPointerType type, int stride, int offset)
		{
			GL.NormalPointer(type, stride, (IntPtr)offset);
		}

		// Token: 0x0600183B RID: 6203 RVA: 0x00044C54 File Offset: 0x00042E54
		public static void IndexPointer(IndexPointerType type, int stride, int offset)
		{
			GL.IndexPointer(type, stride, (IntPtr)offset);
		}

		// Token: 0x0600183C RID: 6204 RVA: 0x00044C64 File Offset: 0x00042E64
		public static void ColorPointer(int size, ColorPointerType type, int stride, int offset)
		{
			GL.ColorPointer(size, type, stride, (IntPtr)offset);
		}

		// Token: 0x0600183D RID: 6205 RVA: 0x00044C74 File Offset: 0x00042E74
		public static void FogCoordPointer(FogPointerType type, int stride, int offset)
		{
			GL.FogCoordPointer(type, stride, (IntPtr)offset);
		}

		// Token: 0x0600183E RID: 6206 RVA: 0x00044C84 File Offset: 0x00042E84
		public static void EdgeFlagPointer(int stride, int offset)
		{
			GL.EdgeFlagPointer(stride, (IntPtr)offset);
		}

		// Token: 0x0600183F RID: 6207 RVA: 0x00044C94 File Offset: 0x00042E94
		public static void TexCoordPointer(int size, TexCoordPointerType type, int stride, int offset)
		{
			GL.TexCoordPointer(size, type, stride, (IntPtr)offset);
		}

		// Token: 0x06001840 RID: 6208 RVA: 0x00044CA4 File Offset: 0x00042EA4
		public static void VertexAttribPointer(int index, int size, VertexAttribPointerType type, bool normalized, int stride, int offset)
		{
			GL.VertexAttribPointer(index, size, type, normalized, stride, (IntPtr)offset);
		}

		// Token: 0x06001841 RID: 6209 RVA: 0x00044CB8 File Offset: 0x00042EB8
		public unsafe static void GetFloat(GetPName pname, out Vector2 vector)
		{
			fixed (Vector2* ptr = &vector)
			{
				GL.GetFloat(pname, (float*)ptr);
			}
		}

		// Token: 0x06001842 RID: 6210 RVA: 0x00044CD4 File Offset: 0x00042ED4
		public unsafe static void GetFloat(GetPName pname, out Vector3 vector)
		{
			fixed (Vector3* ptr = &vector)
			{
				GL.GetFloat(pname, (float*)ptr);
			}
		}

		// Token: 0x06001843 RID: 6211 RVA: 0x00044CF0 File Offset: 0x00042EF0
		public unsafe static void GetFloat(GetPName pname, out Vector4 vector)
		{
			fixed (Vector4* ptr = &vector)
			{
				GL.GetFloat(pname, (float*)ptr);
			}
		}

		// Token: 0x06001844 RID: 6212 RVA: 0x00044D0C File Offset: 0x00042F0C
		public unsafe static void GetFloat(GetPName pname, out Matrix4 matrix)
		{
			fixed (Matrix4* ptr = &matrix)
			{
				GL.GetFloat(pname, (float*)ptr);
			}
		}

		// Token: 0x06001845 RID: 6213 RVA: 0x00044D28 File Offset: 0x00042F28
		public unsafe static void GetDouble(GetPName pname, out Vector2d vector)
		{
			fixed (Vector2d* ptr = &vector)
			{
				GL.GetDouble(pname, (double*)ptr);
			}
		}

		// Token: 0x06001846 RID: 6214 RVA: 0x00044D44 File Offset: 0x00042F44
		public unsafe static void GetDouble(GetPName pname, out Vector3d vector)
		{
			fixed (Vector3d* ptr = &vector)
			{
				GL.GetDouble(pname, (double*)ptr);
			}
		}

		// Token: 0x06001847 RID: 6215 RVA: 0x00044D60 File Offset: 0x00042F60
		public unsafe static void GetDouble(GetPName pname, out Vector4d vector)
		{
			fixed (Vector4d* ptr = &vector)
			{
				GL.GetDouble(pname, (double*)ptr);
			}
		}

		// Token: 0x06001848 RID: 6216 RVA: 0x00044D7C File Offset: 0x00042F7C
		public unsafe static void GetDouble(GetPName pname, out Matrix4d matrix)
		{
			fixed (Matrix4d* ptr = &matrix)
			{
				GL.GetDouble(pname, (double*)ptr);
			}
		}

		// Token: 0x06001849 RID: 6217 RVA: 0x00044D98 File Offset: 0x00042F98
		public static void Viewport(Size size)
		{
			GL.Viewport(0, 0, size.Width, size.Height);
		}

		// Token: 0x0600184A RID: 6218 RVA: 0x00044DB0 File Offset: 0x00042FB0
		public static void Viewport(Point location, Size size)
		{
			GL.Viewport(location.X, location.Y, size.Width, size.Height);
		}

		// Token: 0x0600184B RID: 6219 RVA: 0x00044DD4 File Offset: 0x00042FD4
		public static void Viewport(Rectangle rectangle)
		{
			GL.Viewport(rectangle.X, rectangle.Y, rectangle.Width, rectangle.Height);
		}

		// Token: 0x0600184C RID: 6220 RVA: 0x00044DF8 File Offset: 0x00042FF8
		public unsafe static void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, Color color)
		{
			Color4 color2 = new Color4(color.R, color.G, color.B, color.A);
			GL.TexEnv(target, pname, &color2.R);
		}

		// Token: 0x0600184D RID: 6221 RVA: 0x00044E38 File Offset: 0x00043038
		public unsafe static void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, Color4 color)
		{
			GL.TexEnv(target, pname, &color.R);
		}

		// Token: 0x0600184E RID: 6222 RVA: 0x00044E4C File Offset: 0x0004304C
		[Obsolete("Use DisableClientState(ArrayCap) instead")]
		public static void DisableClientState(EnableCap array)
		{
			GL.DisableClientState((ArrayCap)array);
		}

		// Token: 0x0600184F RID: 6223 RVA: 0x00044E54 File Offset: 0x00043054
		[Obsolete("Use EnableClientState(ArrayCap) instead.")]
		public static void EnableClientState(EnableCap array)
		{
			GL.EnableClientState((ArrayCap)array);
		}

		// Token: 0x06001850 RID: 6224 RVA: 0x00044E5C File Offset: 0x0004305C
		[Obsolete("Use GetActiveUniforms(..., ActiveUniformParameter, ...) instead.")]
		public static void GetActiveUniforms(int program, int uniformCount, int[] uniformIndices, ArbUniformBufferObject pname, [Out] int[] @params)
		{
			GL.GetActiveUniforms(program, uniformCount, uniformIndices, (ActiveUniformParameter)pname, @params);
		}

		// Token: 0x06001851 RID: 6225 RVA: 0x00044E6C File Offset: 0x0004306C
		[Obsolete("Use GetActiveUniforms(..., ActiveUniformParameter, ...) instead.")]
		public static void GetActiveUniforms(int program, int uniformCount, ref int uniformIndices, ArbUniformBufferObject pname, out int @params)
		{
			GL.GetActiveUniforms(program, uniformCount, ref uniformIndices, (ActiveUniformParameter)pname, out @params);
		}

		// Token: 0x06001852 RID: 6226 RVA: 0x00044E7C File Offset: 0x0004307C
		[CLSCompliant(false)]
		[Obsolete("Use GetActiveUniforms(..., ActiveUniformParameter, ...) instead.")]
		public unsafe static void GetActiveUniforms(int program, int uniformCount, int* uniformIndices, ArbUniformBufferObject pname, [Out] int* @params)
		{
			GL.GetActiveUniforms(program, uniformCount, uniformIndices, (ActiveUniformParameter)pname, @params);
		}

		// Token: 0x06001853 RID: 6227 RVA: 0x00044E8C File Offset: 0x0004308C
		[Obsolete("Use GetActiveUniforms(..., ActiveUniformParameter, ...) instead.")]
		[CLSCompliant(false)]
		public static void GetActiveUniforms(uint program, int uniformCount, uint[] uniformIndices, ArbUniformBufferObject pname, [Out] int[] @params)
		{
			GL.GetActiveUniforms(program, uniformCount, uniformIndices, (ActiveUniformParameter)pname, @params);
		}

		// Token: 0x06001854 RID: 6228 RVA: 0x00044E9C File Offset: 0x0004309C
		[CLSCompliant(false)]
		[Obsolete("Use GetActiveUniforms(..., ActiveUniformParameter, ...) instead.")]
		public static void GetActiveUniforms(uint program, int uniformCount, ref uint uniformIndices, ArbUniformBufferObject pname, out int @params)
		{
			GL.GetActiveUniforms(program, uniformCount, ref uniformIndices, (ActiveUniformParameter)pname, out @params);
		}

		// Token: 0x06001855 RID: 6229 RVA: 0x00044EAC File Offset: 0x000430AC
		[Obsolete("Use GetActiveUniforms(..., ActiveUniformParameter, ...) instead.")]
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(uint program, int uniformCount, uint* uniformIndices, ArbUniformBufferObject pname, [Out] int* @params)
		{
			GL.GetActiveUniforms(program, uniformCount, uniformIndices, (ActiveUniformParameter)pname, @params);
		}

		// Token: 0x06001856 RID: 6230 RVA: 0x00044EBC File Offset: 0x000430BC
		[Obsolete("Use strongly-typed overload instead")]
		public static void GetBufferParameteri64(Version32 target, Version32 pname, [Out] long[] @params)
		{
			GL.GetBufferParameter((BufferTarget)target, (BufferParameterName)pname, @params);
		}

		// Token: 0x06001857 RID: 6231 RVA: 0x00044EC8 File Offset: 0x000430C8
		[Obsolete("Use strongly-typed overload instead")]
		public static void GetBufferParameteri64(Version32 target, Version32 pname, out long @params)
		{
			GL.GetBufferParameter((BufferTarget)target, (BufferParameterName)pname, out @params);
		}

		// Token: 0x06001858 RID: 6232 RVA: 0x00044ED4 File Offset: 0x000430D4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameteri64(Version32 target, Version32 pname, [Out] long* @params)
		{
			GL.GetBufferParameter((BufferTarget)target, (BufferParameterName)pname, @params);
		}

		// Token: 0x06001859 RID: 6233 RVA: 0x00044EE0 File Offset: 0x000430E0
		[Obsolete("Use GL.Arb.FramebufferTextureFace instead (OpenGL spec bug)")]
		public static void FramebufferTextureFace(Version32 target, Version32 attachment, int texture, int level, Version32 face)
		{
			GL.Arb.FramebufferTextureFace((FramebufferTarget)target, (FramebufferAttachment)attachment, texture, level, (TextureTarget)face);
		}

		// Token: 0x0600185A RID: 6234 RVA: 0x00044EF0 File Offset: 0x000430F0
		[CLSCompliant(false)]
		[Obsolete("Use GL.Arb.FramebufferTextureFace instead (OpenGL spec bug)")]
		public static void FramebufferTextureFace(Version32 target, Version32 attachment, uint texture, int level, Version32 face)
		{
			GL.Arb.FramebufferTextureFace((FramebufferTarget)target, (FramebufferAttachment)attachment, texture, level, (TextureTarget)face);
		}

		// Token: 0x0600185B RID: 6235 RVA: 0x00044F00 File Offset: 0x00043100
		[CLSCompliant(false)]
		[Obsolete("Use GetAttachedShaders out/array overload instead")]
		public unsafe static void GetAttachedShaders(int program, int maxCount, [Out] int* count, [Out] int[] obj)
		{
			fixed (int* ptr = ref (obj != null && obj.Length != 0) ? ref obj[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, count, ptr, GL.EntryPoints[646]);
			}
		}

		// Token: 0x0600185C RID: 6236 RVA: 0x00044F38 File Offset: 0x00043138
		[Obsolete("Use GetAttachedShaders out/array overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(uint program, int maxCount, [Out] int* count, [Out] uint[] obj)
		{
			fixed (uint* ptr = ref (obj != null && obj.Length != 0) ? ref obj[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, count, ptr, GL.EntryPoints[646]);
			}
		}

		// Token: 0x0600185D RID: 6237 RVA: 0x00044F70 File Offset: 0x00043170
		[Obsolete("Use GetSeparableFilter<T3, T4, T5> overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSeparableFilter<T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In] [Out] T5[] span) where T5 : struct
		{
			fixed (T5* ptr = ref (span != null && span.Length != 0) ? ref span[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, column, ptr, GL.EntryPoints[919]);
			}
		}

		// Token: 0x0600185E RID: 6238 RVA: 0x00044FAC File Offset: 0x000431AC
		[Obsolete("Use GetSeparableFilter<T3, T4, T5> overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSeparableFilter<T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In] [Out] T5[,] span) where T5 : struct
		{
			fixed (T5* ptr = ref (span != null && span.Length != 0) ? ref span[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, column, ptr, GL.EntryPoints[919]);
			}
		}

		// Token: 0x0600185F RID: 6239 RVA: 0x00044FEC File Offset: 0x000431EC
		[Obsolete("Use GetSeparableFilter<T3, T4, T5> overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSeparableFilter<T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In] [Out] T5[,,] span) where T5 : struct
		{
			fixed (T5* ptr = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, column, ptr, GL.EntryPoints[919]);
			}
		}

		// Token: 0x06001860 RID: 6240 RVA: 0x00045030 File Offset: 0x00043230
		[Obsolete("Use GetSeparableFilter<T3, T4, T5> overload instead")]
		public unsafe static void GetSeparableFilter<T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In] [Out] ref T5 span) where T5 : struct
		{
			fixed (T5* ptr = &span)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, column, ptr, GL.EntryPoints[919]);
			}
		}

		// Token: 0x06001861 RID: 6241 RVA: 0x00045058 File Offset: 0x00043258
		[Obsolete("Use GetSeparableFilter<T3, T4, T5> overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSeparableFilter<T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [In] [Out] T4[] column, [In] [Out] T5[,,] span) where T4 : struct where T5 : struct
		{
			fixed (T4* ptr = ref (column != null && column.Length != 0) ? ref column[0] : ref *null)
			{
				T4* ptr2 = ptr;
				fixed (T5* ptr3 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, ptr2, ptr3, GL.EntryPoints[919]);
				}
			}
		}

		// Token: 0x06001862 RID: 6242 RVA: 0x000450B0 File Offset: 0x000432B0
		[CLSCompliant(false)]
		[Obsolete("Use GetSeparableFilter<T3, T4, T5> overload instead")]
		public unsafe static void GetSeparableFilter<T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [In] [Out] T4[,] column, [In] [Out] T5[,,] span) where T4 : struct where T5 : struct
		{
			fixed (T4* ptr = ref (column != null && column.Length != 0) ? ref column[0, 0] : ref *null)
			{
				T4* ptr2 = ptr;
				fixed (T5* ptr3 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, ptr2, ptr3, GL.EntryPoints[919]);
				}
			}
		}

		// Token: 0x06001863 RID: 6243 RVA: 0x0004510C File Offset: 0x0004330C
		[Obsolete("Use GetSeparableFilter<T3, T4, T5> overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSeparableFilter<T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span) where T4 : struct where T5 : struct
		{
			fixed (T4* ptr = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
			{
				T4* ptr2 = ptr;
				fixed (T5* ptr3 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, ptr2, ptr3, GL.EntryPoints[919]);
				}
			}
		}

		// Token: 0x06001864 RID: 6244 RVA: 0x0004516C File Offset: 0x0004336C
		[Obsolete("Use GetSeparableFilter<T3, T4, T5> overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSeparableFilter<T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [In] [Out] ref T4 column, [In] [Out] T5[,,] span) where T4 : struct where T5 : struct
		{
			fixed (T4* ptr = &column)
			{
				T4* ptr2 = ptr;
				fixed (T5* ptr3 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, ptr2, ptr3, GL.EntryPoints[919]);
				}
			}
		}

		// Token: 0x06001865 RID: 6245 RVA: 0x000451B0 File Offset: 0x000433B0
		[Obsolete("Use GetSeparableFilter<T3, T4, T5> overload with equal array dimensions instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[] row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
		{
			fixed (T3* ptr = ref (row != null && row.Length != 0) ? ref row[0] : ref *null)
			{
				T3* ptr2 = ptr;
				fixed (T4* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
				{
					T4* ptr4 = ptr3;
					fixed (T5* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[919]);
					}
				}
			}
		}

		// Token: 0x06001866 RID: 6246 RVA: 0x00045224 File Offset: 0x00043424
		[CLSCompliant(false)]
		[Obsolete("Use GetSeparableFilter<T3, T4, T5> overload with equal array dimensions instead")]
		public unsafe static void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[,] row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
		{
			fixed (T3* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0] : ref *null)
			{
				T3* ptr2 = ptr;
				fixed (T4* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
				{
					T4* ptr4 = ptr3;
					fixed (T5* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[919]);
					}
				}
			}
		}

		// Token: 0x06001867 RID: 6247 RVA: 0x0004529C File Offset: 0x0004349C
		[Obsolete("Use GetSeparableFilter<T3, T4, T5> with three ref arguments instead")]
		public unsafe static void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [In] [Out] ref T3 row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
		{
			fixed (T3* ptr = &row)
			{
				T3* ptr2 = ptr;
				fixed (T4* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
				{
					T4* ptr4 = ptr3;
					fixed (T5* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[919]);
					}
				}
			}
		}

		// Token: 0x06001868 RID: 6248 RVA: 0x000452FC File Offset: 0x000434FC
		[CLSCompliant(false)]
		[Obsolete("Use out/array overload instead")]
		public unsafe static void GetSync(IntPtr sync, ArbSync pname, int bufSize, [Out] int* length, [Out] int[] values)
		{
			fixed (int* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
			{
				calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, length, ptr, GL.EntryPoints[931]);
			}
		}

		// Token: 0x06001869 RID: 6249 RVA: 0x00045338 File Offset: 0x00043538
		[Obsolete("Use overload with equal array dimensions instead")]
		[CLSCompliant(false)]
		public unsafe static void SeparableFilter2D<T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] T7[] column) where T7 : struct
		{
			fixed (T7* ptr = ref (column != null && column.Length != 0) ? ref column[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, row, ptr, GL.EntryPoints[1867]);
			}
		}

		// Token: 0x0600186A RID: 6250 RVA: 0x00045378 File Offset: 0x00043578
		[Obsolete("Use overload with equal array dimensions instead")]
		[CLSCompliant(false)]
		public unsafe static void SeparableFilter2D<T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] T7[,] column) where T7 : struct
		{
			fixed (T7* ptr = ref (column != null && column.Length != 0) ? ref column[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, row, ptr, GL.EntryPoints[1867]);
			}
		}

		// Token: 0x0600186B RID: 6251 RVA: 0x000453BC File Offset: 0x000435BC
		[Obsolete("Use overload with equal array dimensions instead")]
		[CLSCompliant(false)]
		public unsafe static void SeparableFilter2D<T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] T7[,,] column) where T7 : struct
		{
			fixed (T7* ptr = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, row, ptr, GL.EntryPoints[1867]);
			}
		}

		// Token: 0x0600186C RID: 6252 RVA: 0x00045404 File Offset: 0x00043604
		[Obsolete("Use overload with equal array dimensions instead")]
		public unsafe static void SeparableFilter2D<T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] ref T7 column) where T7 : struct
		{
			fixed (T7* ptr = &column)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, row, ptr, GL.EntryPoints[1867]);
			}
		}

		// Token: 0x0600186D RID: 6253 RVA: 0x00045430 File Offset: 0x00043630
		[CLSCompliant(false)]
		[Obsolete("Use overload with equal array dimensions instead")]
		public unsafe static void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[] row, [In] [Out] T7[,,] column) where T6 : struct where T7 : struct
		{
			fixed (T6* ptr = ref (row != null && row.Length != 0) ? ref row[0] : ref *null)
			{
				T6* ptr2 = ptr;
				fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1867]);
				}
			}
		}

		// Token: 0x0600186E RID: 6254 RVA: 0x0004548C File Offset: 0x0004368C
		[Obsolete("Use overload with equal array dimensions instead")]
		[CLSCompliant(false)]
		public unsafe static void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,] row, [In] [Out] T7[,,] column) where T6 : struct where T7 : struct
		{
			fixed (T6* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0] : ref *null)
			{
				T6* ptr2 = ptr;
				fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1867]);
				}
			}
		}

		// Token: 0x0600186F RID: 6255 RVA: 0x000454EC File Offset: 0x000436EC
		[Obsolete("Use overload with equal array dimensions instead")]
		[CLSCompliant(false)]
		public unsafe static void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T6 row, [In] [Out] T7[,,] column) where T6 : struct where T7 : struct
		{
			fixed (T6* ptr = &row)
			{
				T6* ptr2 = ptr;
				fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1867]);
				}
			}
		}

		// Token: 0x06001870 RID: 6256 RVA: 0x00045534 File Offset: 0x00043734
		[Obsolete("Use ref/array overloads instead")]
		public unsafe static void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T6 row, [In] [Out] T7[,,] column) where T6 : struct where T7 : struct
		{
			fixed (T6* ptr = &row)
			{
				T6* ptr2 = ptr;
				fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1868]);
				}
			}
		}

		// Token: 0x04004AD4 RID: 19156
		internal const string Library = "opengl32.dll";

		// Token: 0x04004AD5 RID: 19157
		private static readonly object sync_root = new object();

		// Token: 0x04004AD6 RID: 19158
		private static IntPtr[] EntryPoints;

		// Token: 0x04004AD7 RID: 19159
		private static byte[] EntryPointNames = new byte[]
		{
			103,
			108,
			65,
			99,
			99,
			117,
			109,
			0,
			103,
			108,
			65,
			99,
			99,
			117,
			109,
			120,
			79,
			69,
			83,
			0,
			103,
			108,
			65,
			99,
			116,
			105,
			118,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			69,
			88,
			84,
			0,
			103,
			108,
			65,
			99,
			116,
			105,
			118,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			65,
			99,
			116,
			105,
			118,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			69,
			88,
			84,
			0,
			103,
			108,
			65,
			99,
			116,
			105,
			118,
			101,
			83,
			116,
			101,
			110,
			99,
			105,
			108,
			70,
			97,
			99,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			65,
			99,
			116,
			105,
			118,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			0,
			103,
			108,
			65,
			99,
			116,
			105,
			118,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			65,
			82,
			66,
			0,
			103,
			108,
			65,
			99,
			116,
			105,
			118,
			101,
			86,
			97,
			114,
			121,
			105,
			110,
			103,
			78,
			86,
			0,
			103,
			108,
			65,
			108,
			112,
			104,
			97,
			70,
			114,
			97,
			103,
			109,
			101,
			110,
			116,
			79,
			112,
			49,
			65,
			84,
			73,
			0,
			103,
			108,
			65,
			108,
			112,
			104,
			97,
			70,
			114,
			97,
			103,
			109,
			101,
			110,
			116,
			79,
			112,
			50,
			65,
			84,
			73,
			0,
			103,
			108,
			65,
			108,
			112,
			104,
			97,
			70,
			114,
			97,
			103,
			109,
			101,
			110,
			116,
			79,
			112,
			51,
			65,
			84,
			73,
			0,
			103,
			108,
			65,
			108,
			112,
			104,
			97,
			70,
			117,
			110,
			99,
			0,
			103,
			108,
			65,
			108,
			112,
			104,
			97,
			70,
			117,
			110,
			99,
			120,
			79,
			69,
			83,
			0,
			103,
			108,
			65,
			112,
			112,
			108,
			121,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			65,
			114,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			115,
			82,
			101,
			115,
			105,
			100,
			101,
			110,
			116,
			78,
			86,
			0,
			103,
			108,
			65,
			114,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			82,
			101,
			115,
			105,
			100,
			101,
			110,
			116,
			0,
			103,
			108,
			65,
			114,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			82,
			101,
			115,
			105,
			100,
			101,
			110,
			116,
			69,
			88,
			84,
			0,
			103,
			108,
			65,
			114,
			114,
			97,
			121,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			0,
			103,
			108,
			65,
			114,
			114,
			97,
			121,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			69,
			88,
			84,
			0,
			103,
			108,
			65,
			114,
			114,
			97,
			121,
			79,
			98,
			106,
			101,
			99,
			116,
			65,
			84,
			73,
			0,
			103,
			108,
			65,
			115,
			121,
			110,
			99,
			77,
			97,
			114,
			107,
			101,
			114,
			83,
			71,
			73,
			88,
			0,
			103,
			108,
			65,
			116,
			116,
			97,
			99,
			104,
			79,
			98,
			106,
			101,
			99,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			65,
			116,
			116,
			97,
			99,
			104,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			67,
			111,
			110,
			100,
			105,
			116,
			105,
			111,
			110,
			97,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			67,
			111,
			110,
			100,
			105,
			116,
			105,
			111,
			110,
			97,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			78,
			86,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			67,
			111,
			110,
			100,
			105,
			116,
			105,
			111,
			110,
			97,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			78,
			86,
			88,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			70,
			114,
			97,
			103,
			109,
			101,
			110,
			116,
			83,
			104,
			97,
			100,
			101,
			114,
			65,
			84,
			73,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			79,
			99,
			99,
			108,
			117,
			115,
			105,
			111,
			110,
			81,
			117,
			101,
			114,
			121,
			78,
			86,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			80,
			101,
			114,
			102,
			77,
			111,
			110,
			105,
			116,
			111,
			114,
			65,
			77,
			68,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			80,
			101,
			114,
			102,
			81,
			117,
			101,
			114,
			121,
			73,
			78,
			84,
			69,
			76,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			81,
			117,
			101,
			114,
			121,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			81,
			117,
			101,
			114,
			121,
			65,
			82,
			66,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			81,
			117,
			101,
			114,
			121,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			78,
			86,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			86,
			101,
			114,
			116,
			101,
			120,
			83,
			104,
			97,
			100,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			86,
			105,
			100,
			101,
			111,
			67,
			97,
			112,
			116,
			117,
			114,
			101,
			78,
			86,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			65,
			116,
			116,
			114,
			105,
			98,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			65,
			116,
			116,
			114,
			105,
			98,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			65,
			82,
			66,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			65,
			82,
			66,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			66,
			97,
			115,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			66,
			97,
			115,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			66,
			97,
			115,
			101,
			78,
			86,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			79,
			102,
			102,
			115,
			101,
			116,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			79,
			102,
			102,
			115,
			101,
			116,
			78,
			86,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			82,
			97,
			110,
			103,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			82,
			97,
			110,
			103,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			82,
			97,
			110,
			103,
			101,
			78,
			86,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			66,
			97,
			115,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			82,
			97,
			110,
			103,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			70,
			114,
			97,
			103,
			68,
			97,
			116,
			97,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			70,
			114,
			97,
			103,
			68,
			97,
			116,
			97,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			70,
			114,
			97,
			103,
			68,
			97,
			116,
			97,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			70,
			114,
			97,
			103,
			109,
			101,
			110,
			116,
			83,
			104,
			97,
			100,
			101,
			114,
			65,
			84,
			73,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			73,
			109,
			97,
			103,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			73,
			109,
			97,
			103,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			73,
			109,
			97,
			103,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			76,
			105,
			103,
			104,
			116,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			77,
			97,
			116,
			101,
			114,
			105,
			97,
			108,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			65,
			82,
			66,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			78,
			86,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			115,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			84,
			101,
			120,
			71,
			101,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			85,
			110,
			105,
			116,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			78,
			86,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			86,
			101,
			114,
			116,
			101,
			120,
			66,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			86,
			101,
			114,
			116,
			101,
			120,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			86,
			101,
			114,
			116,
			101,
			120,
			83,
			104,
			97,
			100,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			86,
			105,
			100,
			101,
			111,
			67,
			97,
			112,
			116,
			117,
			114,
			101,
			83,
			116,
			114,
			101,
			97,
			109,
			66,
			117,
			102,
			102,
			101,
			114,
			78,
			86,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			86,
			105,
			100,
			101,
			111,
			67,
			97,
			112,
			116,
			117,
			114,
			101,
			83,
			116,
			114,
			101,
			97,
			109,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			78,
			86,
			0,
			103,
			108,
			66,
			105,
			110,
			111,
			114,
			109,
			97,
			108,
			51,
			98,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			111,
			114,
			109,
			97,
			108,
			51,
			98,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			111,
			114,
			109,
			97,
			108,
			51,
			100,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			111,
			114,
			109,
			97,
			108,
			51,
			100,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			111,
			114,
			109,
			97,
			108,
			51,
			102,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			111,
			114,
			109,
			97,
			108,
			51,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			111,
			114,
			109,
			97,
			108,
			51,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			111,
			114,
			109,
			97,
			108,
			51,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			111,
			114,
			109,
			97,
			108,
			51,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			111,
			114,
			109,
			97,
			108,
			51,
			115,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			111,
			114,
			109,
			97,
			108,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			116,
			109,
			97,
			112,
			0,
			103,
			108,
			66,
			105,
			116,
			109,
			97,
			112,
			120,
			79,
			69,
			83,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			66,
			97,
			114,
			114,
			105,
			101,
			114,
			78,
			86,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			67,
			111,
			108,
			111,
			114,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			67,
			111,
			108,
			111,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			67,
			111,
			108,
			111,
			114,
			120,
			79,
			69,
			83,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			105,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			105,
			65,
			82,
			66,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			65,
			77,
			68,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			105,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			105,
			65,
			82,
			66,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			65,
			77,
			68,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			105,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			105,
			65,
			82,
			66,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			65,
			77,
			68,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			105,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			105,
			65,
			82,
			66,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			65,
			77,
			68,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			73,
			78,
			71,
			82,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			78,
			86,
			0,
			103,
			108,
			66,
			108,
			105,
			116,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			66,
			108,
			105,
			116,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			117,
			102,
			102,
			101,
			114,
			65,
			100,
			100,
			114,
			101,
			115,
			115,
			82,
			97,
			110,
			103,
			101,
			78,
			86,
			0,
			103,
			108,
			66,
			117,
			102,
			102,
			101,
			114,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			66,
			117,
			102,
			102,
			101,
			114,
			68,
			97,
			116,
			97,
			65,
			82,
			66,
			0,
			103,
			108,
			66,
			117,
			102,
			102,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			66,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			0,
			103,
			108,
			66,
			117,
			102,
			102,
			101,
			114,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			66,
			117,
			102,
			102,
			101,
			114,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			65,
			82,
			66,
			0,
			103,
			108,
			67,
			97,
			108,
			108,
			76,
			105,
			115,
			116,
			0,
			103,
			108,
			67,
			97,
			108,
			108,
			76,
			105,
			115,
			116,
			115,
			0,
			103,
			108,
			67,
			104,
			101,
			99,
			107,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			97,
			116,
			117,
			115,
			0,
			103,
			108,
			67,
			104,
			101,
			99,
			107,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			97,
			116,
			117,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			104,
			101,
			99,
			107,
			78,
			97,
			109,
			101,
			100,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			97,
			116,
			117,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			108,
			97,
			109,
			112,
			67,
			111,
			108,
			111,
			114,
			0,
			103,
			108,
			67,
			108,
			97,
			109,
			112,
			67,
			111,
			108,
			111,
			114,
			65,
			82,
			66,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			65,
			99,
			99,
			117,
			109,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			65,
			99,
			99,
			117,
			109,
			120,
			79,
			69,
			83,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			102,
			105,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			117,
			105,
			118,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			67,
			111,
			108,
			111,
			114,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			67,
			111,
			108,
			111,
			114,
			73,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			67,
			111,
			108,
			111,
			114,
			73,
			117,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			67,
			111,
			108,
			111,
			114,
			120,
			79,
			69,
			83,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			68,
			101,
			112,
			116,
			104,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			68,
			101,
			112,
			116,
			104,
			100,
			78,
			86,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			68,
			101,
			112,
			116,
			104,
			102,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			68,
			101,
			112,
			116,
			104,
			102,
			79,
			69,
			83,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			68,
			101,
			112,
			116,
			104,
			120,
			79,
			69,
			83,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			73,
			110,
			100,
			101,
			120,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			78,
			97,
			109,
			101,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			68,
			97,
			116,
			97,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			78,
			97,
			109,
			101,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			83,
			116,
			101,
			110,
			99,
			105,
			108,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			0,
			103,
			108,
			67,
			108,
			105,
			101,
			110,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			0,
			103,
			108,
			67,
			108,
			105,
			101,
			110,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			65,
			82,
			66,
			0,
			103,
			108,
			67,
			108,
			105,
			101,
			110,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			83,
			116,
			114,
			101,
			97,
			109,
			65,
			84,
			73,
			0,
			103,
			108,
			67,
			108,
			105,
			101,
			110,
			116,
			65,
			116,
			116,
			114,
			105,
			98,
			68,
			101,
			102,
			97,
			117,
			108,
			116,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			108,
			105,
			101,
			110,
			116,
			87,
			97,
			105,
			116,
			83,
			121,
			110,
			99,
			0,
			103,
			108,
			67,
			108,
			105,
			112,
			80,
			108,
			97,
			110,
			101,
			0,
			103,
			108,
			67,
			108,
			105,
			112,
			80,
			108,
			97,
			110,
			101,
			102,
			79,
			69,
			83,
			0,
			103,
			108,
			67,
			108,
			105,
			112,
			80,
			108,
			97,
			110,
			101,
			120,
			79,
			69,
			83,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			98,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			98,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			100,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			100,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			102,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			102,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			102,
			86,
			101,
			114,
			116,
			101,
			120,
			51,
			102,
			83,
			85,
			78,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			102,
			86,
			101,
			114,
			116,
			101,
			120,
			51,
			102,
			118,
			83,
			85,
			78,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			104,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			104,
			118,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			105,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			105,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			115,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			115,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			117,
			98,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			117,
			98,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			117,
			105,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			117,
			105,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			117,
			115,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			117,
			115,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			120,
			79,
			69,
			83,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			51,
			120,
			118,
			79,
			69,
			83,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			98,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			98,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			100,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			100,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			102,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			102,
			78,
			111,
			114,
			109,
			97,
			108,
			51,
			102,
			86,
			101,
			114,
			116,
			101,
			120,
			51,
			102,
			83,
			85,
			78,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			102,
			78,
			111,
			114,
			109,
			97,
			108,
			51,
			102,
			86,
			101,
			114,
			116,
			101,
			120,
			51,
			102,
			118,
			83,
			85,
			78,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			102,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			104,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			104,
			118,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			105,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			105,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			115,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			115,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			117,
			98,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			117,
			98,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			117,
			98,
			86,
			101,
			114,
			116,
			101,
			120,
			50,
			102,
			83,
			85,
			78,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			117,
			98,
			86,
			101,
			114,
			116,
			101,
			120,
			50,
			102,
			118,
			83,
			85,
			78,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			117,
			98,
			86,
			101,
			114,
			116,
			101,
			120,
			51,
			102,
			83,
			85,
			78,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			117,
			98,
			86,
			101,
			114,
			116,
			101,
			120,
			51,
			102,
			118,
			83,
			85,
			78,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			117,
			105,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			117,
			105,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			117,
			115,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			117,
			115,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			120,
			79,
			69,
			83,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			52,
			120,
			118,
			79,
			69,
			83,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			70,
			111,
			114,
			109,
			97,
			116,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			70,
			114,
			97,
			103,
			109,
			101,
			110,
			116,
			79,
			112,
			49,
			65,
			84,
			73,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			70,
			114,
			97,
			103,
			109,
			101,
			110,
			116,
			79,
			112,
			50,
			65,
			84,
			73,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			70,
			114,
			97,
			103,
			109,
			101,
			110,
			116,
			79,
			112,
			51,
			65,
			84,
			73,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			77,
			97,
			115,
			107,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			77,
			97,
			115,
			107,
			105,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			77,
			97,
			115,
			107,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			77,
			97,
			116,
			101,
			114,
			105,
			97,
			108,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			80,
			51,
			117,
			105,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			80,
			51,
			117,
			105,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			80,
			52,
			117,
			105,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			80,
			52,
			117,
			105,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			76,
			105,
			115,
			116,
			73,
			66,
			77,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			118,
			73,
			78,
			84,
			69,
			76,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			83,
			117,
			98,
			84,
			97,
			98,
			108,
			101,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			83,
			117,
			98,
			84,
			97,
			98,
			108,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			83,
			71,
			73,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			83,
			71,
			73,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			83,
			71,
			73,
			0,
			103,
			108,
			67,
			111,
			109,
			98,
			105,
			110,
			101,
			114,
			73,
			110,
			112,
			117,
			116,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			109,
			98,
			105,
			110,
			101,
			114,
			79,
			117,
			116,
			112,
			117,
			116,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			109,
			98,
			105,
			110,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			109,
			98,
			105,
			110,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			109,
			98,
			105,
			110,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			109,
			98,
			105,
			110,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			109,
			98,
			105,
			110,
			101,
			114,
			83,
			116,
			97,
			103,
			101,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			105,
			108,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			105,
			108,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			65,
			82,
			66,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			105,
			108,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			73,
			110,
			99,
			108,
			117,
			100,
			101,
			65,
			82,
			66,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			65,
			82,
			66,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			65,
			82,
			66,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			65,
			82,
			66,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			65,
			82,
			66,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			65,
			82,
			66,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			65,
			82,
			66,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			70,
			105,
			108,
			116,
			101,
			114,
			49,
			68,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			70,
			105,
			108,
			116,
			101,
			114,
			49,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			70,
			105,
			108,
			116,
			101,
			114,
			50,
			68,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			70,
			105,
			108,
			116,
			101,
			114,
			50,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			120,
			79,
			69,
			83,
			0,
			103,
			108,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			120,
			118,
			79,
			69,
			83,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			66,
			117,
			102,
			102,
			101,
			114,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			67,
			111,
			108,
			111,
			114,
			83,
			117,
			98,
			84,
			97,
			98,
			108,
			101,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			67,
			111,
			108,
			111,
			114,
			83,
			117,
			98,
			84,
			97,
			98,
			108,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			67,
			111,
			108,
			111,
			114,
			84,
			97,
			98,
			108,
			101,
			83,
			71,
			73,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			70,
			105,
			108,
			116,
			101,
			114,
			49,
			68,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			70,
			105,
			108,
			116,
			101,
			114,
			49,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			70,
			105,
			108,
			116,
			101,
			114,
			50,
			68,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			67,
			111,
			110,
			118,
			111,
			108,
			117,
			116,
			105,
			111,
			110,
			70,
			105,
			108,
			116,
			101,
			114,
			50,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			73,
			109,
			97,
			103,
			101,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			73,
			109,
			97,
			103,
			101,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			77,
			117,
			108,
			116,
			105,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			80,
			97,
			116,
			104,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			80,
			105,
			120,
			101,
			108,
			115,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			49,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			118,
			101,
			114,
			70,
			105,
			108,
			108,
			80,
			97,
			116,
			104,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			118,
			101,
			114,
			70,
			105,
			108,
			108,
			80,
			97,
			116,
			104,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			118,
			101,
			114,
			83,
			116,
			114,
			111,
			107,
			101,
			80,
			97,
			116,
			104,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			118,
			101,
			114,
			83,
			116,
			114,
			111,
			107,
			101,
			80,
			97,
			116,
			104,
			78,
			86,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			80,
			101,
			114,
			102,
			81,
			117,
			101,
			114,
			121,
			73,
			78,
			84,
			69,
			76,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			79,
			98,
			106,
			101,
			99,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			79,
			98,
			106,
			101,
			99,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			118,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			83,
			121,
			110,
			99,
			70,
			114,
			111,
			109,
			67,
			76,
			101,
			118,
			101,
			110,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			67,
			117,
			108,
			108,
			70,
			97,
			99,
			101,
			0,
			103,
			108,
			67,
			117,
			108,
			108,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			100,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			117,
			108,
			108,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			117,
			114,
			114,
			101,
			110,
			116,
			80,
			97,
			108,
			101,
			116,
			116,
			101,
			77,
			97,
			116,
			114,
			105,
			120,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			97,
			108,
			108,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			97,
			108,
			108,
			98,
			97,
			99,
			107,
			65,
			77,
			68,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			97,
			108,
			108,
			98,
			97,
			99,
			107,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			97,
			108,
			108,
			98,
			97,
			99,
			107,
			75,
			72,
			82,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			111,
			110,
			116,
			114,
			111,
			108,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			111,
			110,
			116,
			114,
			111,
			108,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			111,
			110,
			116,
			114,
			111,
			108,
			75,
			72,
			82,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			69,
			110,
			97,
			98,
			108,
			101,
			65,
			77,
			68,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			73,
			110,
			115,
			101,
			114,
			116,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			73,
			110,
			115,
			101,
			114,
			116,
			65,
			77,
			68,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			73,
			110,
			115,
			101,
			114,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			73,
			110,
			115,
			101,
			114,
			116,
			75,
			72,
			82,
			0,
			103,
			108,
			68,
			101,
			102,
			111,
			114,
			109,
			97,
			116,
			105,
			111,
			110,
			77,
			97,
			112,
			51,
			100,
			83,
			71,
			73,
			88,
			0,
			103,
			108,
			68,
			101,
			102,
			111,
			114,
			109,
			97,
			116,
			105,
			111,
			110,
			77,
			97,
			112,
			51,
			102,
			83,
			71,
			73,
			88,
			0,
			103,
			108,
			68,
			101,
			102,
			111,
			114,
			109,
			83,
			71,
			73,
			88,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			65,
			115,
			121,
			110,
			99,
			77,
			97,
			114,
			107,
			101,
			114,
			115,
			83,
			71,
			73,
			88,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			70,
			101,
			110,
			99,
			101,
			115,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			70,
			101,
			110,
			99,
			101,
			115,
			78,
			86,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			70,
			114,
			97,
			103,
			109,
			101,
			110,
			116,
			83,
			104,
			97,
			100,
			101,
			114,
			65,
			84,
			73,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			76,
			105,
			115,
			116,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			78,
			97,
			109,
			101,
			100,
			83,
			116,
			114,
			105,
			110,
			103,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			78,
			97,
			109,
			101,
			115,
			65,
			77,
			68,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			79,
			98,
			106,
			101,
			99,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			79,
			99,
			99,
			108,
			117,
			115,
			105,
			111,
			110,
			81,
			117,
			101,
			114,
			105,
			101,
			115,
			78,
			86,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			80,
			97,
			116,
			104,
			115,
			78,
			86,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			80,
			101,
			114,
			102,
			77,
			111,
			110,
			105,
			116,
			111,
			114,
			115,
			65,
			77,
			68,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			80,
			101,
			114,
			102,
			81,
			117,
			101,
			114,
			121,
			73,
			78,
			84,
			69,
			76,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			115,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			115,
			78,
			86,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			81,
			117,
			101,
			114,
			105,
			101,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			81,
			117,
			101,
			114,
			105,
			101,
			115,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			83,
			121,
			110,
			99,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			115,
			78,
			86,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			115,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			83,
			104,
			97,
			100,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			66,
			111,
			117,
			110,
			100,
			115,
			100,
			78,
			86,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			66,
			111,
			117,
			110,
			100,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			70,
			117,
			110,
			99,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			77,
			97,
			115,
			107,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			82,
			97,
			110,
			103,
			101,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			82,
			97,
			110,
			103,
			101,
			65,
			114,
			114,
			97,
			121,
			118,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			82,
			97,
			110,
			103,
			101,
			100,
			78,
			86,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			82,
			97,
			110,
			103,
			101,
			102,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			82,
			97,
			110,
			103,
			101,
			102,
			79,
			69,
			83,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			82,
			97,
			110,
			103,
			101,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			82,
			97,
			110,
			103,
			101,
			120,
			79,
			69,
			83,
			0,
			103,
			108,
			68,
			101,
			116,
			97,
			99,
			104,
			79,
			98,
			106,
			101,
			99,
			116,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			101,
			116,
			97,
			99,
			104,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			68,
			101,
			116,
			97,
			105,
			108,
			84,
			101,
			120,
			70,
			117,
			110,
			99,
			83,
			71,
			73,
			83,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			67,
			108,
			105,
			101,
			110,
			116,
			83,
			116,
			97,
			116,
			101,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			67,
			108,
			105,
			101,
			110,
			116,
			83,
			116,
			97,
			116,
			101,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			67,
			108,
			105,
			101,
			110,
			116,
			83,
			116,
			97,
			116,
			101,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			105,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			86,
			97,
			114,
			105,
			97,
			110,
			116,
			67,
			108,
			105,
			101,
			110,
			116,
			83,
			116,
			97,
			116,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			65,
			116,
			116,
			114,
			105,
			98,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			65,
			114,
			114,
			97,
			121,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			65,
			114,
			114,
			97,
			121,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			105,
			115,
			112,
			97,
			116,
			99,
			104,
			67,
			111,
			109,
			112,
			117,
			116,
			101,
			0,
			103,
			108,
			68,
			105,
			115,
			112,
			97,
			116,
			99,
			104,
			67,
			111,
			109,
			112,
			117,
			116,
			101,
			71,
			114,
			111,
			117,
			112,
			83,
			105,
			122,
			101,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			105,
			115,
			112,
			97,
			116,
			99,
			104,
			67,
			111,
			109,
			112,
			117,
			116,
			101,
			73,
			110,
			100,
			105,
			114,
			101,
			99,
			116,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			73,
			110,
			100,
			105,
			114,
			101,
			99,
			116,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			66,
			97,
			115,
			101,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			66,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			65,
			84,
			73,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			65,
			114,
			114,
			97,
			121,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			65,
			114,
			114,
			97,
			121,
			65,
			84,
			73,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			66,
			97,
			115,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			100,
			105,
			114,
			101,
			99,
			116,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			65,
			82,
			66,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			66,
			97,
			115,
			101,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			66,
			97,
			115,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			66,
			97,
			115,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			66,
			97,
			115,
			101,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			77,
			101,
			115,
			104,
			65,
			114,
			114,
			97,
			121,
			115,
			83,
			85,
			78,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			80,
			105,
			120,
			101,
			108,
			115,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			82,
			97,
			110,
			103,
			101,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			65,
			114,
			114,
			97,
			121,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			82,
			97,
			110,
			103,
			101,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			65,
			114,
			114,
			97,
			121,
			65,
			84,
			73,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			82,
			97,
			110,
			103,
			101,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			82,
			97,
			110,
			103,
			101,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			66,
			97,
			115,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			82,
			97,
			110,
			103,
			101,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			78,
			86,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			78,
			86,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			83,
			116,
			114,
			101,
			97,
			109,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			83,
			116,
			114,
			101,
			97,
			109,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			0,
			103,
			108,
			69,
			100,
			103,
			101,
			70,
			108,
			97,
			103,
			0,
			103,
			108,
			69,
			100,
			103,
			101,
			70,
			108,
			97,
			103,
			70,
			111,
			114,
			109,
			97,
			116,
			78,
			86,
			0,
			103,
			108,
			69,
			100,
			103,
			101,
			70,
			108,
			97,
			103,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			0,
			103,
			108,
			69,
			100,
			103,
			101,
			70,
			108,
			97,
			103,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			69,
			100,
			103,
			101,
			70,
			108,
			97,
			103,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			76,
			105,
			115,
			116,
			73,
			66,
			77,
			0,
			103,
			108,
			69,
			100,
			103,
			101,
			70,
			108,
			97,
			103,
			118,
			0,
			103,
			108,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			65,
			84,
			73,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			67,
			108,
			105,
			101,
			110,
			116,
			83,
			116,
			97,
			116,
			101,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			67,
			108,
			105,
			101,
			110,
			116,
			83,
			116,
			97,
			116,
			101,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			67,
			108,
			105,
			101,
			110,
			116,
			83,
			116,
			97,
			116,
			101,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			69,
			88,
			84,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			105,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			69,
			88,
			84,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			86,
			97,
			114,
			105,
			97,
			110,
			116,
			67,
			108,
			105,
			101,
			110,
			116,
			83,
			116,
			97,
			116,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			65,
			116,
			116,
			114,
			105,
			98,
			69,
			88,
			84,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			69,
			88,
			84,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			65,
			114,
			114,
			97,
			121,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			65,
			114,
			114,
			97,
			121,
			65,
			82,
			66,
			0,
			103,
			108,
			69,
			110,
			100,
			0,
			103,
			108,
			69,
			110,
			100,
			67,
			111,
			110,
			100,
			105,
			116,
			105,
			111,
			110,
			97,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			0,
			103,
			108,
			69,
			110,
			100,
			67,
			111,
			110,
			100,
			105,
			116,
			105,
			111,
			110,
			97,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			78,
			86,
			0,
			103,
			108,
			69,
			110,
			100,
			67,
			111,
			110,
			100,
			105,
			116,
			105,
			111,
			110,
			97,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			78,
			86,
			88,
			0,
			103,
			108,
			69,
			110,
			100,
			70,
			114,
			97,
			103,
			109,
			101,
			110,
			116,
			83,
			104,
			97,
			100,
			101,
			114,
			65,
			84,
			73,
			0,
			103,
			108,
			69,
			110,
			100,
			76,
			105,
			115,
			116,
			0,
			103,
			108,
			69,
			110,
			100,
			79,
			99,
			99,
			108,
			117,
			115,
			105,
			111,
			110,
			81,
			117,
			101,
			114,
			121,
			"Not showing all elements because this array is too big (55085 elements)"
		};

		// Token: 0x04004AD8 RID: 19160
		private static int[] EntryPointNameOffsets = new int[]
		{
			0,
			8,
			20,
			39,
			61,
			86,
			109,
			125,
			144,
			162,
			184,
			206,
			228,
			240,
			256,
			274,
			298,
			320,
			345,
			360,
			378,
			395,
			413,
			431,
			446,
			454,
			479,
			506,
			534,
			559,
			583,
			605,
			627,
			640,
			656,
			676,
			701,
			729,
			756,
			779,
			801,
			822,
			846,
			859,
			875,
			892,
			912,
			931,
			953,
			974,
			992,
			1013,
			1033,
			1051,
			1070,
			1093,
			1119,
			1149,
			1173,
			1191,
			1212,
			1231,
			1253,
			1273,
			1297,
			1324,
			1346,
			1365,
			1382,
			1398,
			1420,
			1445,
			1464,
			1486,
			1500,
			1515,
			1540,
			1554,
			1571,
			1586,
			1616,
			1640,
			1666,
			1684,
			1707,
			1726,
			1746,
			1768,
			1801,
			1835,
			1851,
			1868,
			1884,
			1901,
			1917,
			1934,
			1950,
			1967,
			1983,
			2000,
			2021,
			2030,
			2043,
			2060,
			2073,
			2089,
			2106,
			2122,
			2141,
			2158,
			2178,
			2204,
			2228,
			2255,
			2280,
			2308,
			2342,
			2354,
			2367,
			2383,
			2405,
			2425,
			2448,
			2469,
			2493,
			2523,
			2547,
			2567,
			2585,
			2606,
			2629,
			2642,
			2658,
			2682,
			2698,
			2714,
			2733,
			2744,
			2756,
			2781,
			2809,
			2842,
			2855,
			2871,
			2879,
			2892,
			2909,
			2927,
			2943,
			2959,
			2975,
			2996,
			3013,
			3026,
			3044,
			3063,
			3080,
			3093,
			3109,
			3123,
			3140,
			3157,
			3170,
			3196,
			3225,
			3240,
			3256,
			3275,
			3297,
			3322,
			3352,
			3377,
			3394,
			3406,
			3422,
			3438,
			3448,
			3459,
			3469,
			3480,
			3490,
			3501,
			3522,
			3544,
			3556,
			3569,
			3579,
			3590,
			3600,
			3611,
			3622,
			3634,
			3645,
			3657,
			3668,
			3680,
			3693,
			3707,
			3717,
			3728,
			3738,
			3749,
			3759,
			3788,
			3818,
			3829,
			3841,
			3854,
			3864,
			3875,
			3885,
			3896,
			3907,
			3919,
			3941,
			3964,
			3986,
			4009,
			4020,
			4032,
			4043,
			4055,
			4068,
			4082,
			4098,
			4120,
			4142,
			4164,
			4176,
			4189,
			4211,
			4227,
			4239,
			4252,
			4264,
			4277,
			4292,
			4310,
			4332,
			4353,
			4369,
			4388,
			4401,
			4417,
			4441,
			4468,
			4492,
			4519,
			4535,
			4553,
			4572,
			4595,
			4619,
			4642,
			4666,
			4695,
			4711,
			4730,
			4756,
			4787,
			4818,
			4849,
			4883,
			4917,
			4951,
			4974,
			5000,
			5023,
			5049,
			5072,
			5098,
			5124,
			5153,
			5179,
			5208,
			5234,
			5263,
			5293,
			5323,
			5353,
			5386,
			5419,
			5452,
			5474,
			5499,
			5521,
			5546,
			5570,
			5597,
			5622,
			5650,
			5674,
			5701,
			5726,
			5754,
			5781,
			5809,
			5829,
			5849,
			5872,
			5889,
			5909,
			5935,
			5964,
			5990,
			6019,
			6038,
			6059,
			6084,
			6109,
			6137,
			6165,
			6193,
			6206,
			6219,
			6236,
			6256,
			6273,
			6293,
			6313,
			6336,
			6356,
			6379,
			6399,
			6422,
			6446,
			6470,
			6497,
			6524,
			6551,
			6578,
			6596,
			6625,
			6645,
			6668,
			6684,
			6709,
			6724,
			6748,
			6773,
			6796,
			6822,
			6849,
			6860,
			6881,
			6902,
			6928,
			6951,
			6977,
			7003,
			7029,
			7051,
			7076,
			7101,
			7125,
			7146,
			7170,
			7194,
			7218,
			7241,
			7264,
			7277,
			7302,
			7318,
			7337,
			7357,
			7374,
			7400,
			7421,
			7445,
			7459,
			7482,
			7499,
			7517,
			7544,
			7560,
			7584,
			7607,
			7623,
			7648,
			7676,
			7696,
			7715,
			7731,
			7750,
			7772,
			7797,
			7814,
			7829,
			7842,
			7859,
			7879,
			7906,
			7935,
			7956,
			7982,
			8006,
			8023,
			8040,
			8052,
			8064,
			8077,
			8096,
			8112,
			8126,
			8143,
			8163,
			8180,
			8198,
			8213,
			8233,
			8243,
			8264,
			8289,
			8320,
			8331,
			8351,
			8382,
			8412,
			8436,
			8463,
			8490,
			8520,
			8538,
			8568,
			8594,
			8607,
			8623,
			8644,
			8666,
			8691,
			8725,
			8750,
			8763,
			8777,
			8794,
			8811,
			8835,
			8857,
			8872,
			8897,
			8920,
			8944,
			8971,
			9007,
			9041,
			9087,
			9114,
			9134,
			9147,
			9176,
			9203,
			9223,
			9253,
			9276,
			9292,
			9316,
			9349,
			9375,
			9405,
			9444,
			9455,
			9474,
			9492,
			9513,
			9538,
			9550,
			9572,
			9592,
			9601,
			9621,
			9645,
			9675,
			9685,
			9704,
			9734,
			9763,
			9786,
			9812,
			9838,
			9867,
			9873,
			9896,
			9921,
			9947,
			9970,
			9980,
			10002,
			10022,
			10042,
			10053,
			10067,
			10085,
			10108,
			10134,
			10159,
			10180,
			10200,
			10214,
			10229,
			10243,
			10258,
			10275,
			10293,
			10307,
			10322,
			10336,
			10351,
			10368,
			10386,
			10399,
			10411,
			10423,
			10436,
			10449,
			10468,
			10490,
			10507,
			10528,
			10540,
			10563,
			10572,
			10590,
			10609,
			10625,
			10645,
			10665,
			10673,
			10698,
			10728,
			10761,
			10785,
			10803,
			10824,
			10853,
			10879,
			10891,
			10906,
			10919,
			10935,
			10947,
			10962,
			10981,
			10994,
			11010,
			11024,
			11039,
			11057,
			11078,
			11103,
			11110,
			11124,
			11132,
			11139,
			11147,
			11157,
			11168,
			11196,
			11217,
			11239,
			11260,
			11282,
			11308,
			11335,
			11361,
			11388,
			11412,
			11437,
			11461,
			11486,
			11513,
			11541,
			11565,
			11592,
			11618,
			11647,
			11668,
			11691,
			11717,
			11740,
			11766,
			11789,
			11815,
			11839,
			11863,
			11891,
			11919,
			11945,
			11974,
			12003,
			12028,
			12044,
			12066,
			12078,
			12088,
			12102,
			12116,
			12138,
			12151,
			12167,
			12184,
			12204,
			12232,
			12259,
			12276,
			12290,
			12314,
			12332,
			12353,
			12364,
			12378,
			12402,
			12415,
			12436,
			12458,
			12483,
			12500,
			12516,
			12529,
			12545,
			12564,
			12586,
			12600,
			12616,
			12630,
			12647,
			12671,
			12697,
			12715,
			12738,
			12760,
			12793,
			12811,
			12832,
			12858,
			12889,
			12922,
			12941,
			12963,
			12989,
			13017,
			13040,
			13062,
			13083,
			13105,
			13127,
			13151,
			13172,
			13192,
			13215,
			13231,
			13255,
			13269,
			13294,
			13317,
			13343,
			13371,
			13391,
			13414,
			13433,
			13455,
			13470,
			13489,
			13508,
			13524,
			13543,
			13570,
			13600,
			13630,
			13657,
			13687,
			13717,
			13736,
			13768,
			13800,
			13833,
			13866,
			13898,
			13930,
			13954,
			13981,
			14012,
			14035,
			14061,
			14089,
			14120,
			14148,
			14179,
			14210,
			14231,
			14255,
			14279,
			14303,
			14326,
			14341,
			14359,
			14382,
			14395,
			14406,
			14421,
			14458,
			14495,
			14522,
			14537,
			14551,
			14568,
			14590,
			14602,
			14619,
			14638,
			14660,
			14685,
			14710,
			14735,
			14763,
			14791,
			14829,
			14870,
			14898,
			14929,
			14957,
			14972,
			14987,
			15005,
			15031,
			15060,
			15086,
			15115,
			15144,
			15164,
			15183,
			15216,
			15249,
			15265,
			15286,
			15304,
			15320,
			15336,
			15360,
			15382,
			15402,
			15416,
			15440,
			15462,
			15488,
			15512,
			15538,
			15551,
			15564,
			15579,
			15595,
			15620,
			15645,
			15675,
			15703,
			15733,
			15761,
			15789,
			15813,
			15824,
			15835,
			15846,
			15868,
			15890,
			15904,
			15920,
			15936,
			15954,
			15973,
			15985,
			16000,
			16023,
			16049,
			16072,
			16098,
			16117,
			16138,
			16160,
			16182,
			16204,
			16226,
			16248,
			16270,
			16303,
			16336,
			16364,
			16393,
			16423,
			16451,
			16482,
			16515,
			16543,
			16570,
			16616,
			16652,
			16675,
			16712,
			16749,
			16787,
			16826,
			16853,
			16890,
			16910,
			16932,
			16952,
			16980,
			17007,
			17033,
			17052,
			17067,
			17082,
			17097,
			17113,
			17133,
			17154,
			17175,
			17199,
			17224,
			17242,
			17261,
			17280,
			17299,
			17319,
			17342,
			17365,
			17382,
			17402,
			17422,
			17448,
			17476,
			17502,
			17522,
			17545,
			17569,
			17594,
			17616,
			17638,
			17658,
			17676,
			17697,
			17715,
			17738,
			17757,
			17780,
			17803,
			17822,
			17842,
			17862,
			17888,
			17919,
			17950,
			17978,
			18011,
			18037,
			18068,
			18092,
			18120,
			18144,
			18160,
			18177,
			18194,
			18210,
			18242,
			18274,
			18308,
			18342,
			18361,
			18385,
			18399,
			18416,
			18433,
			18453,
			18472,
			18502,
			18532,
			18562,
			18593,
			18613,
			18637,
			18652,
			18670,
			18687,
			18719,
			18751,
			18783,
			18816,
			18847,
			18878,
			18904,
			18930,
			18958,
			18989,
			19012,
			19038,
			19064,
			19087,
			19116,
			19150,
			19175,
			19195,
			19217,
			19238,
			19275,
			19295,
			19308,
			19324,
			19345,
			19369,
			19388,
			19410,
			19432,
			19457,
			19477,
			19500,
			19529,
			19561,
			19585,
			19610,
			19636,
			19660,
			19681,
			19705,
			19724,
			19738,
			19765,
			19783,
			19804,
			19828,
			19840,
			19853,
			19874,
			19905,
			19917,
			19944,
			19971,
			19985,
			19999,
			20016,
			20039,
			20053,
			20067,
			20081,
			20098,
			20112,
			20137,
			20162,
			20190,
			20210,
			20231,
			20255,
			20277,
			20302,
			20322,
			20353,
			20376,
			20398,
			20419,
			20440,
			20472,
			20504,
			20531,
			20559,
			20588,
			20615,
			20644,
			20672,
			20693,
			20723,
			20756,
			20788,
			20811,
			20837,
			20852,
			20867,
			20885,
			20904,
			20924,
			20939,
			20957,
			20978,
			21002,
			21024,
			21050,
			21070,
			21086,
			21105,
			21134,
			21163,
			21187,
			21209,
			21233,
			21257,
			21280,
			21310,
			21338,
			21368,
			21396,
			21430,
			21464,
			21484,
			21507,
			21529,
			21549,
			21572,
			21594,
			21615,
			21639,
			21661,
			21686,
			21706,
			21729,
			21751,
			21772,
			21796,
			21821,
			21848,
			21874,
			21900,
			21929,
			21957,
			21979,
			22007,
			22035,
			22063,
			22080,
			22095,
			22113,
			22129,
			22153,
			22177,
			22201,
			22225,
			22249,
			22274,
			22299,
			22324,
			22331,
			22341,
			22353,
			22368,
			22389,
			22418,
			22448,
			22477,
			22507,
			22523,
			22532,
			22542,
			22551,
			22567,
			22582,
			22592,
			22601,
			22611,
			22623,
			22642,
			22657,
			22675,
			22697,
			22706,
			22716,
			22726,
			22737,
			22749,
			22762,
			22774,
			22795,
			22818,
			22842,
			22862,
			22883,
			22906,
			22932,
			22956,
			22983,
			23004,
			23028,
			23048,
			23059,
			23073,
			23094,
			23106,
			23119,
			23141,
			23156,
			23168,
			23184,
			23203,
			23230,
			23256,
			23265,
			23277,
			23303,
			23322,
			23342,
			23363,
			23374,
			23396,
			23420,
			23432,
			23447,
			23461,
			23481,
			23504,
			23514,
			23527,
			23544,
			23564,
			23576,
			23587,
			23596,
			23608,
			23623,
			23652,
			23680,
			23702,
			23726,
			23748,
			23764,
			23785,
			23814,
			23831,
			23847,
			23856,
			23866,
			23875,
			23885,
			23899,
			23914,
			23928,
			23943,
			23960,
			23978,
			23990,
			24003,
			24017,
			24029,
			24045,
			24059,
			24076,
			24087,
			24108,
			24130,
			24151,
			24173,
			24188,
			24221,
			24235,
			24249,
			24266,
			24277,
			24293,
			24316,
			24342,
			24365,
			24391,
			24417,
			24433,
			24443,
			24469,
			24492,
			24524,
			24555,
			24584,
			24612,
			24643,
			24671,
			24705,
			24738,
			24769,
			24799,
			24807,
			24815,
			24826,
			24834,
			24842,
			24853,
			24865,
			24880,
			24897,
			24918,
			24930,
			24942,
			24957,
			24969,
			24981,
			24996,
			25016,
			25041,
			25062,
			25081,
			25100,
			25120,
			25145,
			25170,
			25195,
			25220,
			25232,
			25245,
			25257,
			25270,
			25285,
			25301,
			25320,
			25344,
			25364,
			25384,
			25404,
			25421,
			25438,
			25462,
			25488,
			25514,
			25527,
			25544,
			25561,
			25587,
			25613,
			25630,
			25645,
			25661,
			25680,
			25699,
			25717,
			25735,
			25757,
			25779,
			25795,
			25814,
			25823,
			25835,
			25854,
			25876,
			25894,
			25915,
			25941,
			25970,
			26006,
			26040,
			26069,
			26089,
			26119,
			26142,
			26170,
			26201,
			26239,
			26275,
			26309,
			26334,
			26361,
			26381,
			26402,
			26424,
			26442,
			26463,
			26482,
			26504,
			26522,
			26543,
			26562,
			26584,
			26604,
			26625,
			26643,
			26664,
			26683,
			26705,
			26723,
			26744,
			26763,
			26785,
			26806,
			26828,
			26849,
			26871,
			26889,
			26910,
			26929,
			26951,
			26969,
			26990,
			27009,
			27031,
			27051,
			27072,
			27090,
			27111,
			27130,
			27152,
			27170,
			27191,
			27210,
			27232,
			27253,
			27275,
			27296,
			27318,
			27336,
			27357,
			27376,
			27398,
			27416,
			27437,
			27456,
			27478,
			27498,
			27519,
			27537,
			27558,
			27577,
			27599,
			27617,
			27638,
			27657,
			27679,
			27700,
			27722,
			27743,
			27765,
			27783,
			27804,
			27823,
			27845,
			27863,
			27884,
			27903,
			27925,
			27945,
			27966,
			27984,
			28005,
			28024,
			28046,
			28064,
			28085,
			28104,
			28126,
			28147,
			28169,
			28189,
			28210,
			28230,
			28251,
			28271,
			28292,
			28312,
			28333,
			28359,
			28377,
			28396,
			28414,
			28433,
			28451,
			28470,
			28488,
			28507,
			28525,
			28544,
			28565,
			28586,
			28607,
			28631,
			28656,
			28680,
			28706,
			28733,
			28758,
			28784,
			28808,
			28832,
			28856,
			28870,
			28884,
			28901,
			28924,
			28950,
			28973,
			28999,
			29025,
			29046,
			29070,
			29094,
			29122,
			29154,
			29188,
			29219,
			29250,
			29281,
			29310,
			29343,
			29377,
			29411,
			29446,
			29480,
			29515,
			29550,
			29586,
			29622,
			29659,
			29695,
			29732,
			29770,
			29794,
			29824,
			29873,
			29914,
			29931,
			29941,
			29962,
			29973,
			29985,
			29996,
			30008,
			30019,
			30031,
			30053,
			30076,
			30089,
			30103,
			30114,
			30126,
			30137,
			30149,
			30163,
			30178,
			30195,
			30208,
			30222,
			30238,
			30257,
			30280,
			30302,
			30322,
			30343,
			30363,
			30384,
			30404,
			30425,
			30445,
			30466,
			30486,
			30507,
			30521,
			30538,
			30555,
			30575,
			30598,
			30623,
			30631,
			30643,
			30655,
			30673,
			30687,
			30705,
			30724,
			30742,
			30759,
			30776,
			30791,
			30814,
			30832,
			30847,
			30866,
			30881,
			30900,
			30920,
			30939,
			30959,
			30986,
			31006,
			31021,
			31041,
			31059,
			31074,
			31099,
			31126,
			31145,
			31158,
			31172,
			31186,
			31198,
			31212,
			31226,
			31240,
			31268,
			31297,
			31325,
			31354,
			31372,
			31389,
			31406,
			31426,
			31456,
			31487,
			31517,
			31548,
			31560,
			31576,
			31594,
			31612,
			31631,
			31649,
			31670,
			31691,
			31713,
			31732,
			31754,
			31776,
			31799,
			31817,
			31837,
			31856,
			31877,
			31898,
			31920,
			31932,
			31948,
			31964,
			31986,
			32000,
			32016,
			32035,
			32055,
			32072,
			32084,
			32102,
			32118,
			32137,
			32157,
			32169,
			32179,
			32204,
			32226,
			32250,
			32276,
			32297,
			32318,
			32342,
			32367,
			32383,
			32413,
			32444,
			32476,
			32503,
			32531,
			32558,
			32586,
			32613,
			32641,
			32669,
			32698,
			32727,
			32756,
			32786,
			32815,
			32845,
			32874,
			32904,
			32933,
			32963,
			32993,
			33024,
			33055,
			33086,
			33118,
			33146,
			33175,
			33203,
			33232,
			33255,
			33279,
			33302,
			33326,
			33346,
			33369,
			33392,
			33417,
			33442,
			33461,
			33496,
			33515,
			33537,
			33557,
			33580,
			33599,
			33621,
			33641,
			33664,
			33683,
			33706,
			33730,
			33752,
			33772,
			33795,
			33815,
			33839,
			33864,
			33887,
			33908,
			33932,
			33951,
			33973,
			33993,
			34016,
			34035,
			34057,
			34077,
			34100,
			34119,
			34142,
			34166,
			34188,
			34208,
			34231,
			34251,
			34275,
			34300,
			34323,
			34344,
			34368,
			34387,
			34409,
			34429,
			34452,
			34471,
			34493,
			34513,
			34536,
			34555,
			34578,
			34602,
			34624,
			34644,
			34667,
			34687,
			34711,
			34736,
			34759,
			34780,
			34804,
			34823,
			34845,
			34865,
			34888,
			34907,
			34929,
			34949,
			34972,
			34991,
			35014,
			35038,
			35060,
			35080,
			35103,
			35123,
			35147,
			35172,
			35195,
			35216,
			35240,
			35270,
			35299,
			35330,
			35360,
			35386,
			35415,
			35441,
			35470,
			35498,
			35529,
			35557,
			35588,
			35616,
			35647,
			35675,
			35706,
			35732,
			35761,
			35787,
			35816,
			35844,
			35875,
			35903,
			35934,
			35962,
			35993,
			36021,
			36052,
			36078,
			36107,
			36133,
			36162,
			36190,
			36221,
			36249,
			36280,
			36308,
			36339,
			36367,
			36398,
			36421,
			36445,
			36468,
			36486,
			36507,
			36520,
			36539,
			36568,
			36585,
			36605,
			36626,
			36639,
			36650,
			36665,
			36683,
			36711,
			36725,
			36740,
			36754,
			36769,
			36783,
			36798,
			36812,
			36827,
			36844,
			36862,
			36876,
			36891,
			36905,
			36920,
			36934,
			36949,
			36963,
			36978,
			36995,
			37013,
			37027,
			37042,
			37056,
			37071,
			37085,
			37100,
			37114,
			37129,
			37146,
			37164,
			37177,
			37199,
			37216,
			37229,
			37237,
			37246,
			37254,
			37263,
			37271,
			37280,
			37288,
			37297,
			37308,
			37320,
			37341,
			37365,
			37387,
			37412,
			37445,
			37488,
			37524,
			37537,
			37565,
			37588,
			37612,
			37650,
			37689,
			37735,
			37782,
			37821,
			37861,
			37900,
			37940,
			37963,
			38019,
			38076,
			38125,
			38175,
			38216,
			38258,
			38289,
			38321,
			38345,
			38368,
			38392,
			38420,
			38437,
			38457,
			38471,
			38488,
			38508,
			38534,
			38562,
			38572,
			38582,
			38595,
			38612,
			38632,
			38652,
			38673,
			38688,
			38704,
			38718,
			38740,
			38757,
			38776,
			38796,
			38816,
			38837,
			38857,
			38879,
			38902,
			38923,
			38932,
			38941,
			38953,
			38963,
			38979,
			38996,
			39014,
			39033,
			39055,
			39075,
			39098,
			39117,
			39139,
			39159,
			39182,
			39201,
			39223,
			39243,
			39266,
			39287,
			39309,
			39328,
			39350,
			39370,
			39393,
			39412,
			39434,
			39454,
			39477,
			39497,
			39520,
			39541,
			39565,
			39585,
			39608,
			39629,
			39653,
			39673,
			39696,
			39717,
			39741,
			39766,
			39787,
			39809,
			39833,
			39860,
			39891,
			39906,
			39937,
			39957,
			39980,
			39996,
			40009,
			40040,
			40058,
			40080,
			40102,
			40115,
			40130,
			40145,
			40160,
			40175,
			40190,
			40208,
			40236,
			40257,
			40280,
			40304,
			40327,
			40351,
			40374,
			40395,
			40424,
			40444,
			40458,
			40480,
			40505,
			40519,
			40541,
			40553,
			40573,
			40596,
			40616,
			40647,
			40669,
			40691,
			40713,
			40726,
			40745,
			40767,
			40782,
			40798,
			40813,
			40829,
			40844,
			40860,
			40875,
			40891,
			40906,
			40922,
			40942,
			40960,
			40984,
			41006,
			41023,
			41037,
			41055,
			41067,
			41082,
			41097,
			41114,
			41138,
			41162,
			41178,
			41195,
			41208,
			41222,
			41235,
			41249,
			41264,
			41280,
			41293,
			41307,
			41320,
			41334,
			41350,
			41367,
			41383,
			41400,
			41413,
			41427,
			41440,
			41471,
			41503,
			41542,
			41582,
			41614,
			41647,
			41679,
			41712,
			41726,
			41750,
			41775,
			41790,
			41806,
			41819,
			41833,
			41846,
			41860,
			41876,
			41893,
			41909,
			41926,
			41939,
			41953,
			41966,
			41980,
			41995,
			42011,
			42024,
			42038,
			42051,
			42065,
			42081,
			42098,
			42114,
			42131,
			42144,
			42158,
			42171,
			42210,
			42250,
			42264,
			42288,
			42313,
			42328,
			42344,
			42357,
			42371,
			42384,
			42398,
			42414,
			42431,
			42450,
			42465,
			42481,
			42496,
			42512,
			42527,
			42543,
			42558,
			42574,
			42592,
			42613,
			42638,
			42662,
			42672,
			42683,
			42693,
			42704,
			42717,
			42731,
			42751,
			42761,
			42772,
			42782,
			42793,
			42803,
			42814,
			42827,
			42841,
			42854,
			42867,
			42891,
			42925,
			42938,
			42954,
			42978,
			43012,
			43029,
			43052,
			43068,
			43085,
			43101,
			43119,
			43140,
			43159,
			43181,
			43198,
			43217,
			43237,
			43257,
			43272,
			43287,
			43313,
			43328,
			43354,
			43376,
			43392,
			43411,
			43427,
			43446,
			43462,
			43481,
			43501,
			43520,
			43539,
			43563,
			43586,
			43606,
			43626,
			43664,
			43694,
			43714,
			43752,
			43782,
			43800,
			43821,
			43840,
			43867,
			43890,
			43914,
			43937,
			43962,
			43988,
			44012,
			44032,
			44057,
			44079,
			44101,
			44134,
			44156,
			44189,
			44215,
			44238,
			44261,
			44284,
			44298,
			44314,
			44343,
			44378,
			44406,
			44437,
			44467,
			44485,
			44498,
			44511,
			44527,
			44539,
			44552,
			44564,
			44579,
			44592,
			44608,
			44620,
			44636,
			44653,
			44668,
			44681,
			44697,
			44710,
			44727,
			44745,
			44761,
			44775,
			44792,
			44804,
			44817,
			44829,
			44844,
			44857,
			44873,
			44885,
			44901,
			44918,
			44933,
			44946,
			44962,
			44975,
			44992,
			45010,
			45026,
			45040,
			45057,
			45069,
			45082,
			45094,
			45109,
			45122,
			45138,
			45150,
			45166,
			45183,
			45198,
			45211,
			45227,
			45240,
			45257,
			45275,
			45291,
			45305,
			45322,
			45334,
			45347,
			45359,
			45374,
			45387,
			45403,
			45415,
			45431,
			45448,
			45463,
			45476,
			45492,
			45505,
			45522,
			45540,
			45556,
			45570,
			45587,
			45609,
			45628,
			45651,
			45673,
			45697,
			45720,
			45739,
			45758,
			45780,
			45801,
			45822,
			45843,
			45864,
			45883,
			45902,
			45924,
			45945,
			45966,
			45987,
			46008,
			46027,
			46046,
			46068,
			46089,
			46110,
			46131,
			46152,
			46176,
			46192,
			46209,
			46227,
			46241,
			46258,
			46280,
			46303,
			46325,
			46349,
			46362,
			46384,
			46403,
			46425,
			46447,
			46465,
			46486,
			46512,
			46541,
			46565,
			46580,
			46595,
			46610,
			46625,
			46645,
			46660,
			46676,
			46692,
			46708,
			46722,
			46744,
			46758,
			46777,
			46798,
			46829,
			46859,
			46882,
			46905,
			46932,
			46946,
			46961,
			46972,
			46984,
			46995,
			47007,
			47020,
			47034,
			47045,
			47057,
			47068,
			47080,
			47094,
			47109,
			47123,
			47138,
			47149,
			47161,
			47172,
			47184,
			47197,
			47211,
			47222,
			47234,
			47245,
			47257,
			47271,
			47286,
			47300,
			47315,
			47326,
			47338,
			47349,
			47361,
			47374,
			47388,
			47399,
			47411,
			47422,
			47434,
			47448,
			47463,
			47496,
			47524,
			47555,
			47586,
			47614,
			47650,
			47679,
			47708,
			47732,
			47753,
			47790,
			47821,
			47857,
			47893,
			47928,
			47964,
			48000,
			48036,
			48072,
			48107,
			48144,
			48173,
			48190,
			48210,
			48229,
			48247,
			48268,
			48288,
			48305,
			48325,
			48344,
			48362,
			48383,
			48403,
			48422,
			48442,
			48459,
			48479,
			48498,
			48516,
			48537,
			48557,
			48574,
			48594,
			48613,
			48631,
			48652,
			48672,
			48689,
			48709,
			48728,
			48746,
			48767,
			48787,
			48806,
			48826,
			48843,
			48863,
			48882,
			48900,
			48921,
			48941,
			48958,
			48978,
			48997,
			49015,
			49036,
			49056,
			49073,
			49093,
			49112,
			49130,
			49151,
			49171,
			49190,
			49210,
			49227,
			49247,
			49266,
			49284,
			49305,
			49325,
			49343,
			49364,
			49381,
			49401,
			49420,
			49438,
			49459,
			49479,
			49496,
			49516,
			49535,
			49553,
			49574,
			49594,
			49613,
			49633,
			49651,
			49672,
			49691,
			49713,
			49732,
			49754,
			49773,
			49795,
			49814,
			49836,
			49856,
			49879,
			49899,
			49922,
			49942,
			49965,
			49982,
			50002,
			50021,
			50039,
			50060,
			50080,
			50100,
			50119,
			50141,
			50162,
			50181,
			50203,
			50222,
			50244,
			50273,
			50295,
			50317,
			50342,
			50363,
			50386,
			50404,
			50425,
			50444,
			50466,
			50485,
			50507,
			50527,
			50550,
			50568,
			50589,
			50608,
			50630,
			50649,
			50671,
			50691,
			50714,
			50732,
			50753,
			50772,
			50794,
			50813,
			50835,
			50855,
			50878,
			50897,
			50919,
			50937,
			50958,
			50977,
			50999,
			51018,
			51040,
			51060,
			51083,
			51102,
			51124,
			51144,
			51167,
			51187,
			51210,
			51232,
			51256,
			51279,
			51305,
			51323,
			51344,
			51363,
			51385,
			51407,
			51430,
			51454,
			51477,
			51502,
			51526,
			51544,
			51565,
			51584,
			51606,
			51628,
			51651,
			51674,
			51698,
			51716,
			51737,
			51756,
			51778,
			51800,
			51823,
			51846,
			51870,
			51888,
			51909,
			51928,
			51950,
			51972,
			51995,
			52018,
			52042,
			52064,
			52088,
			52111,
			52137,
			52156,
			52176,
			52195,
			52215,
			52234,
			52254,
			52273,
			52293,
			52321,
			52343,
			52368,
			52392,
			52413,
			52434,
			52455,
			52476,
			52497,
			52518,
			52539,
			52560,
			52581,
			52602,
			52623,
			52644,
			52665,
			52686,
			52707,
			52728,
			52750,
			52773,
			52790,
			52811,
			52832,
			52849,
			52862,
			52876,
			52889,
			52903,
			52916,
			52930,
			52946,
			52965,
			52988,
			53010,
			53030,
			53051,
			53071,
			53092,
			53112,
			53133,
			53153,
			53174,
			53194,
			53215,
			53235,
			53256,
			53276,
			53297,
			53317,
			53338,
			53358,
			53379,
			53399,
			53420,
			53440,
			53461,
			53481,
			53502,
			53522,
			53543,
			53563,
			53584,
			53604,
			53625,
			53645,
			53666,
			53685,
			53705,
			53723,
			53742,
			53767,
			53784,
			53818,
			53852,
			53886,
			53897,
			53914,
			53933,
			53953,
			53964,
			53978,
			53992,
			54006,
			54020,
			54036,
			54055,
			54069,
			54084,
			54099,
			54114,
			54128,
			54145,
			54163,
			54178,
			54196,
			54215,
			54229,
			54246,
			54264,
			54279,
			54297,
			54316,
			54330,
			54347,
			54365,
			54380,
			54398,
			54417,
			54431,
			54448,
			54466,
			54481,
			54499,
			54518,
			54532,
			54549,
			54567,
			54582,
			54600,
			54619,
			54633,
			54650,
			54668,
			54683,
			54701,
			54720,
			54734,
			54751,
			54769,
			54784,
			54802,
			54821,
			54835,
			54852,
			54870,
			54885,
			54903,
			54922,
			54940,
			54959,
			54977,
			54996,
			55014,
			55033,
			55051,
			55070
		};

		// Token: 0x020004B6 RID: 1206
		public static class GL_3dfx
		{
			// Token: 0x06001871 RID: 6257 RVA: 0x0004557C File Offset: 0x0004377C
			[CLSCompliant(false)]
			public static void TbufferMask(int mask)
			{
				calli(System.Void(System.UInt32), mask, GL.EntryPoints[1919]);
			}

			// Token: 0x06001872 RID: 6258 RVA: 0x00045590 File Offset: 0x00043790
			[CLSCompliant(false)]
			public static void TbufferMask(uint mask)
			{
				calli(System.Void(System.UInt32), mask, GL.EntryPoints[1919]);
			}
		}

		// Token: 0x020004B7 RID: 1207
		public static class Amd
		{
			// Token: 0x06001873 RID: 6259 RVA: 0x000455A4 File Offset: 0x000437A4
			[CLSCompliant(false)]
			public static void BeginPerfMonitor(int monitor)
			{
				calli(System.Void(System.UInt32), monitor, GL.EntryPoints[30]);
			}

			// Token: 0x06001874 RID: 6260 RVA: 0x000455B4 File Offset: 0x000437B4
			[CLSCompliant(false)]
			public static void BeginPerfMonitor(uint monitor)
			{
				calli(System.Void(System.UInt32), monitor, GL.EntryPoints[30]);
			}

			// Token: 0x06001875 RID: 6261 RVA: 0x000455C4 File Offset: 0x000437C4
			[CLSCompliant(false)]
			public static void BlendEquationIndexed(int buf, AmdDrawBuffersBlend mode)
			{
				calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[110]);
			}

			// Token: 0x06001876 RID: 6262 RVA: 0x000455D8 File Offset: 0x000437D8
			[CLSCompliant(false)]
			public static void BlendEquationIndexed(uint buf, AmdDrawBuffersBlend mode)
			{
				calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[110]);
			}

			// Token: 0x06001877 RID: 6263 RVA: 0x000455EC File Offset: 0x000437EC
			[CLSCompliant(false)]
			public static void BlendEquationSeparateIndexed(int buf, AmdDrawBuffersBlend modeRGB, AmdDrawBuffersBlend modeAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, modeRGB, modeAlpha, GL.EntryPoints[115]);
			}

			// Token: 0x06001878 RID: 6264 RVA: 0x00045600 File Offset: 0x00043800
			[CLSCompliant(false)]
			public static void BlendEquationSeparateIndexed(uint buf, AmdDrawBuffersBlend modeRGB, AmdDrawBuffersBlend modeAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, modeRGB, modeAlpha, GL.EntryPoints[115]);
			}

			// Token: 0x06001879 RID: 6265 RVA: 0x00045614 File Offset: 0x00043814
			[CLSCompliant(false)]
			public static void BlendFuncIndexed(int buf, AmdDrawBuffersBlend src, AmdDrawBuffersBlend dst)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, src, dst, GL.EntryPoints[119]);
			}

			// Token: 0x0600187A RID: 6266 RVA: 0x00045628 File Offset: 0x00043828
			[CLSCompliant(false)]
			public static void BlendFuncIndexed(uint buf, AmdDrawBuffersBlend src, AmdDrawBuffersBlend dst)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, src, dst, GL.EntryPoints[119]);
			}

			// Token: 0x0600187B RID: 6267 RVA: 0x0004563C File Offset: 0x0004383C
			[CLSCompliant(false)]
			public static void BlendFuncSeparateIndexed(int buf, AmdDrawBuffersBlend srcRGB, AmdDrawBuffersBlend dstRGB, AmdDrawBuffersBlend srcAlpha, AmdDrawBuffersBlend dstAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), buf, srcRGB, dstRGB, srcAlpha, dstAlpha, GL.EntryPoints[124]);
			}

			// Token: 0x0600187C RID: 6268 RVA: 0x00045654 File Offset: 0x00043854
			[CLSCompliant(false)]
			public static void BlendFuncSeparateIndexed(uint buf, AmdDrawBuffersBlend srcRGB, AmdDrawBuffersBlend dstRGB, AmdDrawBuffersBlend srcAlpha, AmdDrawBuffersBlend dstAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), buf, srcRGB, dstRGB, srcAlpha, dstAlpha, GL.EntryPoints[124]);
			}

			// Token: 0x0600187D RID: 6269 RVA: 0x0004566C File Offset: 0x0004386C
			public static void DebugMessageCallback(DebugProcAmd callback, [Out] IntPtr userParam)
			{
				calli(System.Void(OpenTK.Graphics.OpenGL.DebugProcAmd,System.IntPtr), callback, userParam, GL.EntryPoints[347]);
			}

			// Token: 0x0600187E RID: 6270 RVA: 0x00045680 File Offset: 0x00043880
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcAmd callback, [In] [Out] T1[] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL.DebugProcAmd,System.IntPtr), callback, ptr, GL.EntryPoints[347]);
				}
			}

			// Token: 0x0600187F RID: 6271 RVA: 0x000456B4 File Offset: 0x000438B4
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcAmd callback, [In] [Out] T1[,] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL.DebugProcAmd,System.IntPtr), callback, ptr, GL.EntryPoints[347]);
				}
			}

			// Token: 0x06001880 RID: 6272 RVA: 0x000456EC File Offset: 0x000438EC
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcAmd callback, [In] [Out] T1[,,] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0, 0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL.DebugProcAmd,System.IntPtr), callback, ptr, GL.EntryPoints[347]);
				}
			}

			// Token: 0x06001881 RID: 6273 RVA: 0x00045728 File Offset: 0x00043928
			public unsafe static void DebugMessageCallback<T1>(DebugProcAmd callback, [In] [Out] ref T1 userParam) where T1 : struct
			{
				fixed (T1* ptr = &userParam)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL.DebugProcAmd,System.IntPtr), callback, ptr, GL.EntryPoints[347]);
				}
			}

			// Token: 0x06001882 RID: 6274 RVA: 0x0004574C File Offset: 0x0004394C
			[CLSCompliant(false)]
			public unsafe static void DebugMessageEnable(AmdDebugOutput category, AmdDebugOutput severity, int count, int[] ids, bool enabled)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), category, severity, count, ptr, enabled, GL.EntryPoints[353]);
				}
			}

			// Token: 0x06001883 RID: 6275 RVA: 0x00045784 File Offset: 0x00043984
			[CLSCompliant(false)]
			public unsafe static void DebugMessageEnable(AmdDebugOutput category, AmdDebugOutput severity, int count, ref int ids, bool enabled)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), category, severity, count, ptr, enabled, GL.EntryPoints[353]);
				}
			}

			// Token: 0x06001884 RID: 6276 RVA: 0x000457AC File Offset: 0x000439AC
			[CLSCompliant(false)]
			public unsafe static void DebugMessageEnable(AmdDebugOutput category, AmdDebugOutput severity, int count, int* ids, bool enabled)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), category, severity, count, ids, enabled, GL.EntryPoints[353]);
			}

			// Token: 0x06001885 RID: 6277 RVA: 0x000457C4 File Offset: 0x000439C4
			[CLSCompliant(false)]
			public unsafe static void DebugMessageEnable(AmdDebugOutput category, AmdDebugOutput severity, int count, uint[] ids, bool enabled)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), category, severity, count, ptr, enabled, GL.EntryPoints[353]);
				}
			}

			// Token: 0x06001886 RID: 6278 RVA: 0x000457FC File Offset: 0x000439FC
			[CLSCompliant(false)]
			public unsafe static void DebugMessageEnable(AmdDebugOutput category, AmdDebugOutput severity, int count, ref uint ids, bool enabled)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), category, severity, count, ptr, enabled, GL.EntryPoints[353]);
				}
			}

			// Token: 0x06001887 RID: 6279 RVA: 0x00045824 File Offset: 0x00043A24
			[CLSCompliant(false)]
			public unsafe static void DebugMessageEnable(AmdDebugOutput category, AmdDebugOutput severity, int count, uint* ids, bool enabled)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), category, severity, count, ids, enabled, GL.EntryPoints[353]);
			}

			// Token: 0x06001888 RID: 6280 RVA: 0x0004583C File Offset: 0x00043A3C
			[CLSCompliant(false)]
			public static void DebugMessageInsert(AmdDebugOutput category, AmdDebugOutput severity, int id, int length, string buf)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.IntPtr), category, severity, id, length, intPtr, GL.EntryPoints[355]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06001889 RID: 6281 RVA: 0x0004586C File Offset: 0x00043A6C
			[CLSCompliant(false)]
			public static void DebugMessageInsert(AmdDebugOutput category, AmdDebugOutput severity, uint id, int length, string buf)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.IntPtr), category, severity, id, length, intPtr, GL.EntryPoints[355]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x0600188A RID: 6282 RVA: 0x0004589C File Offset: 0x00043A9C
			[CLSCompliant(false)]
			public unsafe static void DeleteNames(AmdNameGenDelete identifier, int num, int[] names)
			{
				fixed (int* ptr = ref (names != null && names.Length != 0) ? ref names[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), identifier, num, ptr, GL.EntryPoints[371]);
				}
			}

			// Token: 0x0600188B RID: 6283 RVA: 0x000458D4 File Offset: 0x00043AD4
			[CLSCompliant(false)]
			public unsafe static void DeleteNames(AmdNameGenDelete identifier, int num, ref int names)
			{
				fixed (int* ptr = &names)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), identifier, num, ptr, GL.EntryPoints[371]);
				}
			}

			// Token: 0x0600188C RID: 6284 RVA: 0x000458F8 File Offset: 0x00043AF8
			[CLSCompliant(false)]
			public unsafe static void DeleteNames(AmdNameGenDelete identifier, int num, int* names)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32*), identifier, num, names, GL.EntryPoints[371]);
			}

			// Token: 0x0600188D RID: 6285 RVA: 0x00045910 File Offset: 0x00043B10
			[CLSCompliant(false)]
			public unsafe static void DeleteNames(AmdNameGenDelete identifier, uint num, uint[] names)
			{
				fixed (uint* ptr = ref (names != null && names.Length != 0) ? ref names[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), identifier, num, ptr, GL.EntryPoints[371]);
				}
			}

			// Token: 0x0600188E RID: 6286 RVA: 0x00045948 File Offset: 0x00043B48
			[CLSCompliant(false)]
			public unsafe static void DeleteNames(AmdNameGenDelete identifier, uint num, ref uint names)
			{
				fixed (uint* ptr = &names)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), identifier, num, ptr, GL.EntryPoints[371]);
				}
			}

			// Token: 0x0600188F RID: 6287 RVA: 0x0004596C File Offset: 0x00043B6C
			[CLSCompliant(false)]
			public unsafe static void DeleteNames(AmdNameGenDelete identifier, uint num, uint* names)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32*), identifier, num, names, GL.EntryPoints[371]);
			}

			// Token: 0x06001890 RID: 6288 RVA: 0x00045984 File Offset: 0x00043B84
			[CLSCompliant(false)]
			public static void DeletePerfMonitor(int monitors)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref monitors, GL.EntryPoints[375]);
			}

			// Token: 0x06001891 RID: 6289 RVA: 0x0004599C File Offset: 0x00043B9C
			[CLSCompliant(false)]
			public static void DeletePerfMonitor(uint monitors)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref monitors, GL.EntryPoints[375]);
			}

			// Token: 0x06001892 RID: 6290 RVA: 0x000459B4 File Offset: 0x00043BB4
			[CLSCompliant(false)]
			public unsafe static void DeletePerfMonitors(int n, int[] monitors)
			{
				fixed (int* ptr = ref (monitors != null && monitors.Length != 0) ? ref monitors[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[375]);
				}
			}

			// Token: 0x06001893 RID: 6291 RVA: 0x000459E8 File Offset: 0x00043BE8
			[CLSCompliant(false)]
			public unsafe static void DeletePerfMonitors(int n, ref int monitors)
			{
				fixed (int* ptr = &monitors)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[375]);
				}
			}

			// Token: 0x06001894 RID: 6292 RVA: 0x00045A0C File Offset: 0x00043C0C
			[CLSCompliant(false)]
			public unsafe static void DeletePerfMonitors(int n, int* monitors)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, monitors, GL.EntryPoints[375]);
			}

			// Token: 0x06001895 RID: 6293 RVA: 0x00045A20 File Offset: 0x00043C20
			[CLSCompliant(false)]
			public unsafe static void DeletePerfMonitors(int n, uint[] monitors)
			{
				fixed (uint* ptr = ref (monitors != null && monitors.Length != 0) ? ref monitors[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[375]);
				}
			}

			// Token: 0x06001896 RID: 6294 RVA: 0x00045A54 File Offset: 0x00043C54
			[CLSCompliant(false)]
			public unsafe static void DeletePerfMonitors(int n, ref uint monitors)
			{
				fixed (uint* ptr = &monitors)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[375]);
				}
			}

			// Token: 0x06001897 RID: 6295 RVA: 0x00045A78 File Offset: 0x00043C78
			[CLSCompliant(false)]
			public unsafe static void DeletePerfMonitors(int n, uint* monitors)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, monitors, GL.EntryPoints[375]);
			}

			// Token: 0x06001898 RID: 6296 RVA: 0x00045A8C File Offset: 0x00043C8C
			[CLSCompliant(false)]
			public static void EndPerfMonitor(int monitor)
			{
				calli(System.Void(System.UInt32), monitor, GL.EntryPoints[487]);
			}

			// Token: 0x06001899 RID: 6297 RVA: 0x00045AA0 File Offset: 0x00043CA0
			[CLSCompliant(false)]
			public static void EndPerfMonitor(uint monitor)
			{
				calli(System.Void(System.UInt32), monitor, GL.EntryPoints[487]);
			}

			// Token: 0x0600189A RID: 6298 RVA: 0x00045AB4 File Offset: 0x00043CB4
			[CLSCompliant(false)]
			public unsafe static void GenNames(AmdNameGenDelete identifier, int num, [Out] int[] names)
			{
				fixed (int* ptr = ref (names != null && names.Length != 0) ? ref names[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), identifier, num, ptr, GL.EntryPoints[609]);
				}
			}

			// Token: 0x0600189B RID: 6299 RVA: 0x00045AEC File Offset: 0x00043CEC
			[CLSCompliant(false)]
			public unsafe static void GenNames(AmdNameGenDelete identifier, int num, out int names)
			{
				fixed (int* ptr = &names)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), identifier, num, ptr, GL.EntryPoints[609]);
				}
			}

			// Token: 0x0600189C RID: 6300 RVA: 0x00045B10 File Offset: 0x00043D10
			[CLSCompliant(false)]
			public unsafe static void GenNames(AmdNameGenDelete identifier, int num, [Out] int* names)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32*), identifier, num, names, GL.EntryPoints[609]);
			}

			// Token: 0x0600189D RID: 6301 RVA: 0x00045B28 File Offset: 0x00043D28
			[CLSCompliant(false)]
			public unsafe static void GenNames(AmdNameGenDelete identifier, uint num, [Out] uint[] names)
			{
				fixed (uint* ptr = ref (names != null && names.Length != 0) ? ref names[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), identifier, num, ptr, GL.EntryPoints[609]);
				}
			}

			// Token: 0x0600189E RID: 6302 RVA: 0x00045B60 File Offset: 0x00043D60
			[CLSCompliant(false)]
			public unsafe static void GenNames(AmdNameGenDelete identifier, uint num, out uint names)
			{
				fixed (uint* ptr = &names)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), identifier, num, ptr, GL.EntryPoints[609]);
				}
			}

			// Token: 0x0600189F RID: 6303 RVA: 0x00045B84 File Offset: 0x00043D84
			[CLSCompliant(false)]
			public unsafe static void GenNames(AmdNameGenDelete identifier, uint num, [Out] uint* names)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32*), identifier, num, names, GL.EntryPoints[609]);
			}

			// Token: 0x060018A0 RID: 6304 RVA: 0x00045B9C File Offset: 0x00043D9C
			[CLSCompliant(false)]
			public static int GenPerfMonitor()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[612]);
				return result;
			}

			// Token: 0x060018A1 RID: 6305 RVA: 0x00045BC0 File Offset: 0x00043DC0
			[CLSCompliant(false)]
			public unsafe static void GenPerfMonitors(int n, [Out] int[] monitors)
			{
				fixed (int* ptr = ref (monitors != null && monitors.Length != 0) ? ref monitors[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[612]);
				}
			}

			// Token: 0x060018A2 RID: 6306 RVA: 0x00045BF4 File Offset: 0x00043DF4
			[CLSCompliant(false)]
			public unsafe static void GenPerfMonitors(int n, out int monitors)
			{
				fixed (int* ptr = &monitors)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[612]);
				}
			}

			// Token: 0x060018A3 RID: 6307 RVA: 0x00045C18 File Offset: 0x00043E18
			[CLSCompliant(false)]
			public unsafe static void GenPerfMonitors(int n, [Out] int* monitors)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, monitors, GL.EntryPoints[612]);
			}

			// Token: 0x060018A4 RID: 6308 RVA: 0x00045C2C File Offset: 0x00043E2C
			[CLSCompliant(false)]
			public unsafe static void GenPerfMonitors(int n, [Out] uint[] monitors)
			{
				fixed (uint* ptr = ref (monitors != null && monitors.Length != 0) ? ref monitors[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[612]);
				}
			}

			// Token: 0x060018A5 RID: 6309 RVA: 0x00045C60 File Offset: 0x00043E60
			[CLSCompliant(false)]
			public unsafe static void GenPerfMonitors(int n, out uint monitors)
			{
				fixed (uint* ptr = &monitors)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[612]);
				}
			}

			// Token: 0x060018A6 RID: 6310 RVA: 0x00045C84 File Offset: 0x00043E84
			[CLSCompliant(false)]
			public unsafe static void GenPerfMonitors(int n, [Out] uint* monitors)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, monitors, GL.EntryPoints[612]);
			}

			// Token: 0x060018A7 RID: 6311 RVA: 0x00045C98 File Offset: 0x00043E98
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufsize, [Out] AmdDebugOutput[] categories, [Out] int[] severities, [Out] int[] ids, [Out] int[] lengths, [Out] StringBuilder message)
			{
				fixed (AmdDebugOutput* ptr = ref (categories != null && categories.Length != 0) ? ref categories[0] : ref *null)
				{
					AmdDebugOutput* ptr2 = ptr;
					fixed (int* ptr3 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
						{
							int* ptr6 = ptr5;
							fixed (int* ptr7 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
							{
								int* ptr8 = ptr7;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)message.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.UInt32*,System.UInt32*,System.Int32*,System.IntPtr), count, bufsize, ptr2, ptr4, ptr6, ptr8, intPtr, GL.EntryPoints[689]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, message);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}

			// Token: 0x060018A8 RID: 6312 RVA: 0x00045D38 File Offset: 0x00043F38
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufsize, out AmdDebugOutput categories, out int severities, out int ids, out int lengths, [Out] StringBuilder message)
			{
				fixed (AmdDebugOutput* ptr = &categories)
				{
					AmdDebugOutput* ptr2 = ptr;
					fixed (int* ptr3 = &severities)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = &ids)
						{
							int* ptr6 = ptr5;
							fixed (int* ptr7 = &lengths)
							{
								int* ptr8 = ptr7;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)message.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.UInt32*,System.UInt32*,System.Int32*,System.IntPtr), count, bufsize, ptr2, ptr4, ptr6, ptr8, intPtr, GL.EntryPoints[689]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, message);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}

			// Token: 0x060018A9 RID: 6313 RVA: 0x00045D8C File Offset: 0x00043F8C
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufsize, [Out] AmdDebugOutput* categories, [Out] int* severities, [Out] int* ids, [Out] int* lengths, [Out] StringBuilder message)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)message.Capacity);
				int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.UInt32*,System.UInt32*,System.Int32*,System.IntPtr), count, bufsize, categories, severities, ids, lengths, intPtr, GL.EntryPoints[689]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, message);
				Marshal.FreeHGlobal(intPtr);
				return result;
			}

			// Token: 0x060018AA RID: 6314 RVA: 0x00045DD0 File Offset: 0x00043FD0
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufsize, [Out] AmdDebugOutput[] categories, [Out] uint[] severities, [Out] uint[] ids, [Out] int[] lengths, [Out] StringBuilder message)
			{
				fixed (AmdDebugOutput* ptr = ref (categories != null && categories.Length != 0) ? ref categories[0] : ref *null)
				{
					AmdDebugOutput* ptr2 = ptr;
					fixed (uint* ptr3 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
					{
						uint* ptr4 = ptr3;
						fixed (uint* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
						{
							uint* ptr6 = ptr5;
							fixed (int* ptr7 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
							{
								int* ptr8 = ptr7;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)message.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.UInt32*,System.UInt32*,System.Int32*,System.IntPtr), count, bufsize, ptr2, ptr4, ptr6, ptr8, intPtr, GL.EntryPoints[689]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, message);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}

			// Token: 0x060018AB RID: 6315 RVA: 0x00045E70 File Offset: 0x00044070
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufsize, out AmdDebugOutput categories, out uint severities, out uint ids, out int lengths, [Out] StringBuilder message)
			{
				fixed (AmdDebugOutput* ptr = &categories)
				{
					AmdDebugOutput* ptr2 = ptr;
					fixed (uint* ptr3 = &severities)
					{
						uint* ptr4 = ptr3;
						fixed (uint* ptr5 = &ids)
						{
							uint* ptr6 = ptr5;
							fixed (int* ptr7 = &lengths)
							{
								int* ptr8 = ptr7;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)message.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.UInt32*,System.UInt32*,System.Int32*,System.IntPtr), count, bufsize, ptr2, ptr4, ptr6, ptr8, intPtr, GL.EntryPoints[689]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, message);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}

			// Token: 0x060018AC RID: 6316 RVA: 0x00045EC4 File Offset: 0x000440C4
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufsize, [Out] AmdDebugOutput* categories, [Out] uint* severities, [Out] uint* ids, [Out] int* lengths, [Out] StringBuilder message)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)message.Capacity);
				int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.UInt32*,System.UInt32*,System.Int32*,System.IntPtr), count, bufsize, categories, severities, ids, lengths, intPtr, GL.EntryPoints[689]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, message);
				Marshal.FreeHGlobal(intPtr);
				return result;
			}

			// Token: 0x060018AD RID: 6317 RVA: 0x00045F08 File Offset: 0x00044108
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterData(int monitor, AmdPerformanceMonitor pname, int dataSize, [Out] int[] data, out int bytesWritten)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*,System.Int32*), monitor, pname, dataSize, ptr2, ptr3, GL.EntryPoints[848]);
					}
				}
			}

			// Token: 0x060018AE RID: 6318 RVA: 0x00045F44 File Offset: 0x00044144
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterData(int monitor, AmdPerformanceMonitor pname, int dataSize, out int data, out int bytesWritten)
			{
				fixed (int* ptr = &data)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*,System.Int32*), monitor, pname, dataSize, ptr2, ptr3, GL.EntryPoints[848]);
					}
				}
			}

			// Token: 0x060018AF RID: 6319 RVA: 0x00045F70 File Offset: 0x00044170
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterData(int monitor, AmdPerformanceMonitor pname, int dataSize, [Out] int* data, [Out] int* bytesWritten)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*,System.Int32*), monitor, pname, dataSize, data, bytesWritten, GL.EntryPoints[848]);
			}

			// Token: 0x060018B0 RID: 6320 RVA: 0x00045F88 File Offset: 0x00044188
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterData(uint monitor, AmdPerformanceMonitor pname, int dataSize, [Out] uint[] data, out int bytesWritten)
			{
				fixed (uint* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*,System.Int32*), monitor, pname, dataSize, ptr2, ptr3, GL.EntryPoints[848]);
					}
				}
			}

			// Token: 0x060018B1 RID: 6321 RVA: 0x00045FC4 File Offset: 0x000441C4
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterData(uint monitor, AmdPerformanceMonitor pname, int dataSize, out uint data, out int bytesWritten)
			{
				fixed (uint* ptr = &data)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*,System.Int32*), monitor, pname, dataSize, ptr2, ptr3, GL.EntryPoints[848]);
					}
				}
			}

			// Token: 0x060018B2 RID: 6322 RVA: 0x00045FF0 File Offset: 0x000441F0
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterData(uint monitor, AmdPerformanceMonitor pname, int dataSize, [Out] uint* data, [Out] int* bytesWritten)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*,System.Int32*), monitor, pname, dataSize, data, bytesWritten, GL.EntryPoints[848]);
			}

			// Token: 0x060018B3 RID: 6323 RVA: 0x00046008 File Offset: 0x00044208
			[CLSCompliant(false)]
			public static void GetPerfMonitorCounterInfo(int group, int counter, AmdPerformanceMonitor pname, [Out] IntPtr data)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, data, GL.EntryPoints[849]);
			}

			// Token: 0x060018B4 RID: 6324 RVA: 0x00046020 File Offset: 0x00044220
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterInfo<T3>(int group, int counter, AmdPerformanceMonitor pname, [In] [Out] T3[] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, ptr, GL.EntryPoints[849]);
				}
			}

			// Token: 0x060018B5 RID: 6325 RVA: 0x00046058 File Offset: 0x00044258
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterInfo<T3>(int group, int counter, AmdPerformanceMonitor pname, [In] [Out] T3[,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, ptr, GL.EntryPoints[849]);
				}
			}

			// Token: 0x060018B6 RID: 6326 RVA: 0x00046094 File Offset: 0x00044294
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterInfo<T3>(int group, int counter, AmdPerformanceMonitor pname, [In] [Out] T3[,,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, ptr, GL.EntryPoints[849]);
				}
			}

			// Token: 0x060018B7 RID: 6327 RVA: 0x000460D0 File Offset: 0x000442D0
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterInfo<T3>(int group, int counter, AmdPerformanceMonitor pname, [In] [Out] ref T3 data) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, ptr, GL.EntryPoints[849]);
				}
			}

			// Token: 0x060018B8 RID: 6328 RVA: 0x000460F4 File Offset: 0x000442F4
			[CLSCompliant(false)]
			public static void GetPerfMonitorCounterInfo(uint group, uint counter, AmdPerformanceMonitor pname, [Out] IntPtr data)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, data, GL.EntryPoints[849]);
			}

			// Token: 0x060018B9 RID: 6329 RVA: 0x0004610C File Offset: 0x0004430C
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, AmdPerformanceMonitor pname, [In] [Out] T3[] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, ptr, GL.EntryPoints[849]);
				}
			}

			// Token: 0x060018BA RID: 6330 RVA: 0x00046144 File Offset: 0x00044344
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, AmdPerformanceMonitor pname, [In] [Out] T3[,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, ptr, GL.EntryPoints[849]);
				}
			}

			// Token: 0x060018BB RID: 6331 RVA: 0x00046180 File Offset: 0x00044380
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, AmdPerformanceMonitor pname, [In] [Out] T3[,,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, ptr, GL.EntryPoints[849]);
				}
			}

			// Token: 0x060018BC RID: 6332 RVA: 0x000461BC File Offset: 0x000443BC
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, AmdPerformanceMonitor pname, [In] [Out] ref T3 data) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, ptr, GL.EntryPoints[849]);
				}
			}

			// Token: 0x060018BD RID: 6333 RVA: 0x000461E0 File Offset: 0x000443E0
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounters(int group, out int numCounters, out int maxActiveCounters, int counterSize, [Out] int[] counters)
			{
				fixed (int* ptr = &numCounters)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &maxActiveCounters)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = ref (counters != null && counters.Length != 0) ? ref counters[0] : ref *null)
						{
							calli(System.Void(System.UInt32,System.Int32*,System.Int32*,System.Int32,System.UInt32*), group, ptr2, ptr4, counterSize, ptr5, GL.EntryPoints[850]);
						}
					}
				}
			}

			// Token: 0x060018BE RID: 6334 RVA: 0x00046220 File Offset: 0x00044420
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounters(int group, out int numCounters, out int maxActiveCounters, int counterSize, out int counters)
			{
				fixed (int* ptr = &numCounters)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &maxActiveCounters)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = &counters)
						{
							calli(System.Void(System.UInt32,System.Int32*,System.Int32*,System.Int32,System.UInt32*), group, ptr2, ptr4, counterSize, ptr5, GL.EntryPoints[850]);
						}
					}
				}
			}

			// Token: 0x060018BF RID: 6335 RVA: 0x0004624C File Offset: 0x0004444C
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounters(int group, [Out] int* numCounters, [Out] int* maxActiveCounters, int counterSize, [Out] int* counters)
			{
				calli(System.Void(System.UInt32,System.Int32*,System.Int32*,System.Int32,System.UInt32*), group, numCounters, maxActiveCounters, counterSize, counters, GL.EntryPoints[850]);
			}

			// Token: 0x060018C0 RID: 6336 RVA: 0x00046264 File Offset: 0x00044464
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounters(uint group, out int numCounters, out int maxActiveCounters, int counterSize, [Out] uint[] counters)
			{
				fixed (int* ptr = &numCounters)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &maxActiveCounters)
					{
						int* ptr4 = ptr3;
						fixed (uint* ptr5 = ref (counters != null && counters.Length != 0) ? ref counters[0] : ref *null)
						{
							calli(System.Void(System.UInt32,System.Int32*,System.Int32*,System.Int32,System.UInt32*), group, ptr2, ptr4, counterSize, ptr5, GL.EntryPoints[850]);
						}
					}
				}
			}

			// Token: 0x060018C1 RID: 6337 RVA: 0x000462A4 File Offset: 0x000444A4
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounters(uint group, out int numCounters, out int maxActiveCounters, int counterSize, out uint counters)
			{
				fixed (int* ptr = &numCounters)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &maxActiveCounters)
					{
						int* ptr4 = ptr3;
						fixed (uint* ptr5 = &counters)
						{
							calli(System.Void(System.UInt32,System.Int32*,System.Int32*,System.Int32,System.UInt32*), group, ptr2, ptr4, counterSize, ptr5, GL.EntryPoints[850]);
						}
					}
				}
			}

			// Token: 0x060018C2 RID: 6338 RVA: 0x000462D0 File Offset: 0x000444D0
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounters(uint group, [Out] int* numCounters, [Out] int* maxActiveCounters, int counterSize, [Out] uint* counters)
			{
				calli(System.Void(System.UInt32,System.Int32*,System.Int32*,System.Int32,System.UInt32*), group, numCounters, maxActiveCounters, counterSize, counters, GL.EntryPoints[850]);
			}

			// Token: 0x060018C3 RID: 6339 RVA: 0x000462E8 File Offset: 0x000444E8
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterString(int group, int counter, int bufSize, out int length, [Out] StringBuilder counterString)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterString.Capacity);
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), group, counter, bufSize, ptr2, intPtr, GL.EntryPoints[851]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, counterString);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060018C4 RID: 6340 RVA: 0x00046328 File Offset: 0x00044528
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterString(int group, int counter, int bufSize, [Out] int* length, [Out] StringBuilder counterString)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterString.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), group, counter, bufSize, length, intPtr, GL.EntryPoints[851]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, counterString);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x060018C5 RID: 6341 RVA: 0x00046368 File Offset: 0x00044568
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterString(uint group, uint counter, int bufSize, out int length, [Out] StringBuilder counterString)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterString.Capacity);
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), group, counter, bufSize, ptr2, intPtr, GL.EntryPoints[851]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, counterString);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060018C6 RID: 6342 RVA: 0x000463A8 File Offset: 0x000445A8
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterString(uint group, uint counter, int bufSize, [Out] int* length, [Out] StringBuilder counterString)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterString.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), group, counter, bufSize, length, intPtr, GL.EntryPoints[851]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, counterString);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x060018C7 RID: 6343 RVA: 0x000463E8 File Offset: 0x000445E8
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroups(out int numGroups, int groupsSize, [Out] int[] groups)
			{
				fixed (int* ptr = &numGroups)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (groups != null && groups.Length != 0) ? ref groups[0] : ref *null)
					{
						calli(System.Void(System.Int32*,System.Int32,System.UInt32*), ptr2, groupsSize, ptr3, GL.EntryPoints[852]);
					}
				}
			}

			// Token: 0x060018C8 RID: 6344 RVA: 0x00046420 File Offset: 0x00044620
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroups(out int numGroups, int groupsSize, out int groups)
			{
				fixed (int* ptr = &numGroups)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &groups)
					{
						calli(System.Void(System.Int32*,System.Int32,System.UInt32*), ptr2, groupsSize, ptr3, GL.EntryPoints[852]);
					}
				}
			}

			// Token: 0x060018C9 RID: 6345 RVA: 0x00046448 File Offset: 0x00044648
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroups(out int numGroups, int groupsSize, [Out] uint[] groups)
			{
				fixed (int* ptr = &numGroups)
				{
					int* ptr2 = ptr;
					fixed (uint* ptr3 = ref (groups != null && groups.Length != 0) ? ref groups[0] : ref *null)
					{
						calli(System.Void(System.Int32*,System.Int32,System.UInt32*), ptr2, groupsSize, ptr3, GL.EntryPoints[852]);
					}
				}
			}

			// Token: 0x060018CA RID: 6346 RVA: 0x00046480 File Offset: 0x00044680
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroups(out int numGroups, int groupsSize, out uint groups)
			{
				fixed (int* ptr = &numGroups)
				{
					int* ptr2 = ptr;
					fixed (uint* ptr3 = &groups)
					{
						calli(System.Void(System.Int32*,System.Int32,System.UInt32*), ptr2, groupsSize, ptr3, GL.EntryPoints[852]);
					}
				}
			}

			// Token: 0x060018CB RID: 6347 RVA: 0x000464A8 File Offset: 0x000446A8
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroups([Out] int* numGroups, int groupsSize, [Out] int* groups)
			{
				calli(System.Void(System.Int32*,System.Int32,System.UInt32*), numGroups, groupsSize, groups, GL.EntryPoints[852]);
			}

			// Token: 0x060018CC RID: 6348 RVA: 0x000464C0 File Offset: 0x000446C0
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroups([Out] int* numGroups, int groupsSize, [Out] uint* groups)
			{
				calli(System.Void(System.Int32*,System.Int32,System.UInt32*), numGroups, groupsSize, groups, GL.EntryPoints[852]);
			}

			// Token: 0x060018CD RID: 6349 RVA: 0x000464D8 File Offset: 0x000446D8
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroupString(int group, int bufSize, out int length, [Out] StringBuilder groupString)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)groupString.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), group, bufSize, ptr2, intPtr, GL.EntryPoints[853]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, groupString);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060018CE RID: 6350 RVA: 0x00046518 File Offset: 0x00044718
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroupString(int group, int bufSize, [Out] int* length, [Out] StringBuilder groupString)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)groupString.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), group, bufSize, length, intPtr, GL.EntryPoints[853]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, groupString);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x060018CF RID: 6351 RVA: 0x00046554 File Offset: 0x00044754
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroupString(uint group, int bufSize, out int length, [Out] StringBuilder groupString)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)groupString.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), group, bufSize, ptr2, intPtr, GL.EntryPoints[853]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, groupString);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060018D0 RID: 6352 RVA: 0x00046594 File Offset: 0x00044794
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroupString(uint group, int bufSize, [Out] int* length, [Out] StringBuilder groupString)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)groupString.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), group, bufSize, length, intPtr, GL.EntryPoints[853]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, groupString);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x060018D1 RID: 6353 RVA: 0x000465D0 File Offset: 0x000447D0
			[CLSCompliant(false)]
			public static bool IsName(AmdNameGenDelete identifier, int name)
			{
				return calli(System.Byte(System.Int32,System.UInt32), identifier, name, GL.EntryPoints[1090]);
			}

			// Token: 0x060018D2 RID: 6354 RVA: 0x000465E4 File Offset: 0x000447E4
			[CLSCompliant(false)]
			public static bool IsName(AmdNameGenDelete identifier, uint name)
			{
				return calli(System.Byte(System.Int32,System.UInt32), identifier, name, GL.EntryPoints[1090]);
			}

			// Token: 0x060018D3 RID: 6355 RVA: 0x000465F8 File Offset: 0x000447F8
			public static void MultiDrawArraysIndirect(AmdMultiDrawIndirect mode, IntPtr indirect, int primcount, int stride)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32), mode, indirect, primcount, stride, GL.EntryPoints[1235]);
			}

			// Token: 0x060018D4 RID: 6356 RVA: 0x00046610 File Offset: 0x00044810
			[CLSCompliant(false)]
			public unsafe static void MultiDrawArraysIndirect<T1>(AmdMultiDrawIndirect mode, [In] [Out] T1[] indirect, int primcount, int stride) where T1 : struct
			{
				fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32), mode, ptr, primcount, stride, GL.EntryPoints[1235]);
				}
			}

			// Token: 0x060018D5 RID: 6357 RVA: 0x00046648 File Offset: 0x00044848
			[CLSCompliant(false)]
			public unsafe static void MultiDrawArraysIndirect<T1>(AmdMultiDrawIndirect mode, [In] [Out] T1[,] indirect, int primcount, int stride) where T1 : struct
			{
				fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32), mode, ptr, primcount, stride, GL.EntryPoints[1235]);
				}
			}

			// Token: 0x060018D6 RID: 6358 RVA: 0x00046684 File Offset: 0x00044884
			[CLSCompliant(false)]
			public unsafe static void MultiDrawArraysIndirect<T1>(AmdMultiDrawIndirect mode, [In] [Out] T1[,,] indirect, int primcount, int stride) where T1 : struct
			{
				fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32), mode, ptr, primcount, stride, GL.EntryPoints[1235]);
				}
			}

			// Token: 0x060018D7 RID: 6359 RVA: 0x000466C0 File Offset: 0x000448C0
			public unsafe static void MultiDrawArraysIndirect<T1>(AmdMultiDrawIndirect mode, [In] [Out] ref T1 indirect, int primcount, int stride) where T1 : struct
			{
				fixed (T1* ptr = &indirect)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32), mode, ptr, primcount, stride, GL.EntryPoints[1235]);
				}
			}

			// Token: 0x060018D8 RID: 6360 RVA: 0x000466E4 File Offset: 0x000448E4
			public static void MultiDrawElementsIndirect(AmdMultiDrawIndirect mode, AmdMultiDrawIndirect type, IntPtr indirect, int primcount, int stride)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, type, indirect, primcount, stride, GL.EntryPoints[1243]);
			}

			// Token: 0x060018D9 RID: 6361 RVA: 0x000466FC File Offset: 0x000448FC
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElementsIndirect<T2>(AmdMultiDrawIndirect mode, AmdMultiDrawIndirect type, [In] [Out] T2[] indirect, int primcount, int stride) where T2 : struct
			{
				fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, type, ptr, primcount, stride, GL.EntryPoints[1243]);
				}
			}

			// Token: 0x060018DA RID: 6362 RVA: 0x00046734 File Offset: 0x00044934
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElementsIndirect<T2>(AmdMultiDrawIndirect mode, AmdMultiDrawIndirect type, [In] [Out] T2[,] indirect, int primcount, int stride) where T2 : struct
			{
				fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, type, ptr, primcount, stride, GL.EntryPoints[1243]);
				}
			}

			// Token: 0x060018DB RID: 6363 RVA: 0x00046770 File Offset: 0x00044970
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElementsIndirect<T2>(AmdMultiDrawIndirect mode, AmdMultiDrawIndirect type, [In] [Out] T2[,,] indirect, int primcount, int stride) where T2 : struct
			{
				fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, type, ptr, primcount, stride, GL.EntryPoints[1243]);
				}
			}

			// Token: 0x060018DC RID: 6364 RVA: 0x000467B0 File Offset: 0x000449B0
			public unsafe static void MultiDrawElementsIndirect<T2>(AmdMultiDrawIndirect mode, AmdMultiDrawIndirect type, [In] [Out] ref T2 indirect, int primcount, int stride) where T2 : struct
			{
				fixed (T2* ptr = &indirect)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, type, ptr, primcount, stride, GL.EntryPoints[1243]);
				}
			}

			// Token: 0x060018DD RID: 6365 RVA: 0x000467D8 File Offset: 0x000449D8
			[CLSCompliant(false)]
			public static void QueryObjectParameter(AmdOcclusionQueryEvent target, int id, AmdOcclusionQueryEvent pname, OcclusionQueryEventMaskAmd param)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32), target, id, pname, param, GL.EntryPoints[1714]);
			}

			// Token: 0x060018DE RID: 6366 RVA: 0x000467F0 File Offset: 0x000449F0
			[CLSCompliant(false)]
			public static void QueryObjectParameter(AmdOcclusionQueryEvent target, uint id, AmdOcclusionQueryEvent pname, OcclusionQueryEventMaskAmd param)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32), target, id, pname, param, GL.EntryPoints[1714]);
			}

			// Token: 0x060018DF RID: 6367 RVA: 0x00046808 File Offset: 0x00044A08
			[CLSCompliant(false)]
			public unsafe static void SelectPerfMonitorCounters(int monitor, bool enable, int group, int numCounters, [Out] int[] counterList)
			{
				fixed (int* ptr = ref (counterList != null && counterList.Length != 0) ? ref counterList[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Boolean,System.UInt32,System.Int32,System.UInt32*), monitor, enable, group, numCounters, ptr, GL.EntryPoints[1866]);
				}
			}

			// Token: 0x060018E0 RID: 6368 RVA: 0x00046844 File Offset: 0x00044A44
			[CLSCompliant(false)]
			public unsafe static void SelectPerfMonitorCounters(int monitor, bool enable, int group, int numCounters, out int counterList)
			{
				fixed (int* ptr = &counterList)
				{
					calli(System.Void(System.UInt32,System.Boolean,System.UInt32,System.Int32,System.UInt32*), monitor, enable, group, numCounters, ptr, GL.EntryPoints[1866]);
				}
			}

			// Token: 0x060018E1 RID: 6369 RVA: 0x0004686C File Offset: 0x00044A6C
			[CLSCompliant(false)]
			public unsafe static void SelectPerfMonitorCounters(int monitor, bool enable, int group, int numCounters, [Out] int* counterList)
			{
				calli(System.Void(System.UInt32,System.Boolean,System.UInt32,System.Int32,System.UInt32*), monitor, enable, group, numCounters, counterList, GL.EntryPoints[1866]);
			}

			// Token: 0x060018E2 RID: 6370 RVA: 0x00046884 File Offset: 0x00044A84
			[CLSCompliant(false)]
			public unsafe static void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, int numCounters, [Out] uint[] counterList)
			{
				fixed (uint* ptr = ref (counterList != null && counterList.Length != 0) ? ref counterList[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Boolean,System.UInt32,System.Int32,System.UInt32*), monitor, enable, group, numCounters, ptr, GL.EntryPoints[1866]);
				}
			}

			// Token: 0x060018E3 RID: 6371 RVA: 0x000468C0 File Offset: 0x00044AC0
			[CLSCompliant(false)]
			public unsafe static void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, int numCounters, out uint counterList)
			{
				fixed (uint* ptr = &counterList)
				{
					calli(System.Void(System.UInt32,System.Boolean,System.UInt32,System.Int32,System.UInt32*), monitor, enable, group, numCounters, ptr, GL.EntryPoints[1866]);
				}
			}

			// Token: 0x060018E4 RID: 6372 RVA: 0x000468E8 File Offset: 0x00044AE8
			[CLSCompliant(false)]
			public unsafe static void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, int numCounters, [Out] uint* counterList)
			{
				calli(System.Void(System.UInt32,System.Boolean,System.UInt32,System.Int32,System.UInt32*), monitor, enable, group, numCounters, counterList, GL.EntryPoints[1866]);
			}

			// Token: 0x060018E5 RID: 6373 RVA: 0x00046900 File Offset: 0x00044B00
			[CLSCompliant(false)]
			public unsafe static void SetMultisample(AmdSamplePositions pname, int index, float[] val)
			{
				fixed (float* ptr = ref (val != null && val.Length != 0) ? ref val[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[1874]);
				}
			}

			// Token: 0x060018E6 RID: 6374 RVA: 0x00046938 File Offset: 0x00044B38
			[CLSCompliant(false)]
			public unsafe static void SetMultisample(AmdSamplePositions pname, int index, ref float val)
			{
				fixed (float* ptr = &val)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[1874]);
				}
			}

			// Token: 0x060018E7 RID: 6375 RVA: 0x0004695C File Offset: 0x00044B5C
			[CLSCompliant(false)]
			public unsafe static void SetMultisample(AmdSamplePositions pname, int index, float* val)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, val, GL.EntryPoints[1874]);
			}

			// Token: 0x060018E8 RID: 6376 RVA: 0x00046974 File Offset: 0x00044B74
			[CLSCompliant(false)]
			public unsafe static void SetMultisample(AmdSamplePositions pname, uint index, float[] val)
			{
				fixed (float* ptr = ref (val != null && val.Length != 0) ? ref val[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[1874]);
				}
			}

			// Token: 0x060018E9 RID: 6377 RVA: 0x000469AC File Offset: 0x00044BAC
			[CLSCompliant(false)]
			public unsafe static void SetMultisample(AmdSamplePositions pname, uint index, ref float val)
			{
				fixed (float* ptr = &val)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[1874]);
				}
			}

			// Token: 0x060018EA RID: 6378 RVA: 0x000469D0 File Offset: 0x00044BD0
			[CLSCompliant(false)]
			public unsafe static void SetMultisample(AmdSamplePositions pname, uint index, float* val)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, val, GL.EntryPoints[1874]);
			}

			// Token: 0x060018EB RID: 6379 RVA: 0x000469E8 File Offset: 0x00044BE8
			[CLSCompliant(false)]
			public static void StencilOpValue(AmdStencilOperationExtended face, int value)
			{
				calli(System.Void(System.Int32,System.UInt32), face, value, GL.EntryPoints[1900]);
			}

			// Token: 0x060018EC RID: 6380 RVA: 0x000469FC File Offset: 0x00044BFC
			[CLSCompliant(false)]
			public static void StencilOpValue(AmdStencilOperationExtended face, uint value)
			{
				calli(System.Void(System.Int32,System.UInt32), face, value, GL.EntryPoints[1900]);
			}

			// Token: 0x060018ED RID: 6381 RVA: 0x00046A10 File Offset: 0x00044C10
			public static void TessellationFactor(float factor)
			{
				calli(System.Void(System.Single), factor, GL.EntryPoints[1920]);
			}

			// Token: 0x060018EE RID: 6382 RVA: 0x00046A24 File Offset: 0x00044C24
			[Obsolete("Use AmdVertexShaderTessellator overload instead")]
			public static void TessellationMode(AmdVertexShaderTesselator mode)
			{
				calli(System.Void(System.Int32), mode, GL.EntryPoints[1921]);
			}

			// Token: 0x060018EF RID: 6383 RVA: 0x00046A38 File Offset: 0x00044C38
			public static void TessellationMode(AmdVertexShaderTessellator mode)
			{
				calli(System.Void(System.Int32), mode, GL.EntryPoints[1921]);
			}

			// Token: 0x060018F0 RID: 6384 RVA: 0x00046A4C File Offset: 0x00044C4C
			[CLSCompliant(false)]
			public static void TexStorageSparse(AmdSparseTexture target, AmdSparseTexture internalFormat, int width, int height, int depth, int layers, int flags)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32), target, internalFormat, width, height, depth, layers, flags, GL.EntryPoints[2055]);
			}

			// Token: 0x060018F1 RID: 6385 RVA: 0x00046A74 File Offset: 0x00044C74
			[CLSCompliant(false)]
			public static void TexStorageSparse(AmdSparseTexture target, AmdSparseTexture internalFormat, int width, int height, int depth, int layers, uint flags)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32), target, internalFormat, width, height, depth, layers, flags, GL.EntryPoints[2055]);
			}

			// Token: 0x060018F2 RID: 6386 RVA: 0x00046A9C File Offset: 0x00044C9C
			[CLSCompliant(false)]
			public static void TextureStorageSparse(int texture, AmdSparseTexture target, AmdSparseTexture internalFormat, int width, int height, int depth, int layers, int flags)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32), texture, target, internalFormat, width, height, depth, layers, flags, GL.EntryPoints[2091]);
			}

			// Token: 0x060018F3 RID: 6387 RVA: 0x00046AC8 File Offset: 0x00044CC8
			[CLSCompliant(false)]
			public static void TextureStorageSparse(uint texture, AmdSparseTexture target, AmdSparseTexture internalFormat, int width, int height, int depth, int layers, uint flags)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32), texture, target, internalFormat, width, height, depth, layers, flags, GL.EntryPoints[2091]);
			}

			// Token: 0x060018F4 RID: 6388 RVA: 0x00046AF4 File Offset: 0x00044CF4
			[CLSCompliant(false)]
			public static void VertexAttribParameter(int index, AmdInterleavedElements pname, int param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), index, pname, param, GL.EntryPoints[2510]);
			}

			// Token: 0x060018F5 RID: 6389 RVA: 0x00046B0C File Offset: 0x00044D0C
			[CLSCompliant(false)]
			public static void VertexAttribParameter(uint index, AmdInterleavedElements pname, int param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), index, pname, param, GL.EntryPoints[2510]);
			}

			// Token: 0x060018F6 RID: 6390 RVA: 0x00046B24 File Offset: 0x00044D24
			[Obsolete("Use ref/array overloads instead")]
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterData(int monitor, AmdPerformanceMonitor pname, int dataSize, [Out] int[] data, [Out] int* bytesWritten)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*,System.Int32*), monitor, pname, dataSize, ptr, bytesWritten, GL.EntryPoints[848]);
				}
			}

			// Token: 0x060018F7 RID: 6391 RVA: 0x00046B5C File Offset: 0x00044D5C
			[Obsolete("Use ref/array overloads instead")]
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterData(int monitor, AmdPerformanceMonitor pname, int dataSize, [Out] uint[] data, [Out] int* bytesWritten)
			{
				fixed (uint* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*,System.Int32*), monitor, pname, dataSize, ptr, bytesWritten, GL.EntryPoints[848]);
				}
			}

			// Token: 0x060018F8 RID: 6392 RVA: 0x00046B94 File Offset: 0x00044D94
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overloads instead")]
			public unsafe static void GetPerfMonitorCounterData(uint monitor, AmdPerformanceMonitor pname, int dataSize, [Out] uint[] data, [Out] int* bytesWritten)
			{
				fixed (uint* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*,System.Int32*), monitor, pname, dataSize, ptr, bytesWritten, GL.EntryPoints[848]);
				}
			}

			// Token: 0x060018F9 RID: 6393 RVA: 0x00046BCC File Offset: 0x00044DCC
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overloads instead")]
			public unsafe static void GetPerfMonitorCounters(int group, [Out] int* numCounters, [Out] int* maxActiveCounters, int counterSize, [Out] int[] counters)
			{
				fixed (int* ptr = ref (counters != null && counters.Length != 0) ? ref counters[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32*,System.Int32*,System.Int32,System.UInt32*), group, numCounters, maxActiveCounters, counterSize, ptr, GL.EntryPoints[850]);
				}
			}

			// Token: 0x060018FA RID: 6394 RVA: 0x00046C08 File Offset: 0x00044E08
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overloads instead")]
			public unsafe static void GetPerfMonitorCounters(uint group, [Out] int* numCounters, [Out] int* maxActiveCounters, int counterSize, [Out] uint[] counters)
			{
				fixed (uint* ptr = ref (counters != null && counters.Length != 0) ? ref counters[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32*,System.Int32*,System.Int32,System.UInt32*), group, numCounters, maxActiveCounters, counterSize, ptr, GL.EntryPoints[850]);
				}
			}

			// Token: 0x060018FB RID: 6395 RVA: 0x00046C44 File Offset: 0x00044E44
			[Obsolete("Use GetPerfMonitorGroups instead")]
			public unsafe static void GetPerfMonitorGroup(out int numGroups, int groupsSize, out int groups)
			{
				fixed (int* ptr = &numGroups)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &groups)
					{
						calli(System.Void(System.Int32*,System.Int32,System.UInt32*), ptr2, groupsSize, ptr3, GL.EntryPoints[852]);
					}
				}
			}

			// Token: 0x060018FC RID: 6396 RVA: 0x00046C6C File Offset: 0x00044E6C
			[CLSCompliant(false)]
			[Obsolete("Use GetPerfMonitorGroups instead")]
			public unsafe static void GetPerfMonitorGroup(out int numGroups, int groupsSize, out uint groups)
			{
				fixed (int* ptr = &numGroups)
				{
					int* ptr2 = ptr;
					fixed (uint* ptr3 = &groups)
					{
						calli(System.Void(System.Int32*,System.Int32,System.UInt32*), ptr2, groupsSize, ptr3, GL.EntryPoints[852]);
					}
				}
			}

			// Token: 0x060018FD RID: 6397 RVA: 0x00046C94 File Offset: 0x00044E94
			[Obsolete("Use GetPerfMonitorGroups instead")]
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroup([Out] int* numGroups, int groupsSize, [Out] int[] groups)
			{
				fixed (int* ptr = ref (groups != null && groups.Length != 0) ? ref groups[0] : ref *null)
				{
					calli(System.Void(System.Int32*,System.Int32,System.UInt32*), numGroups, groupsSize, ptr, GL.EntryPoints[852]);
				}
			}

			// Token: 0x060018FE RID: 6398 RVA: 0x00046CCC File Offset: 0x00044ECC
			[CLSCompliant(false)]
			[Obsolete("Use GetPerfMonitorGroups instead")]
			public unsafe static void GetPerfMonitorGroup([Out] int* numGroups, int groupsSize, [Out] int* groups)
			{
				calli(System.Void(System.Int32*,System.Int32,System.UInt32*), numGroups, groupsSize, groups, GL.EntryPoints[852]);
			}

			// Token: 0x060018FF RID: 6399 RVA: 0x00046CE4 File Offset: 0x00044EE4
			[CLSCompliant(false)]
			[Obsolete("Use GetPerfMonitorGroups instead")]
			public unsafe static void GetPerfMonitorGroup([Out] int* numGroups, int groupsSize, [Out] uint[] groups)
			{
				fixed (uint* ptr = ref (groups != null && groups.Length != 0) ? ref groups[0] : ref *null)
				{
					calli(System.Void(System.Int32*,System.Int32,System.UInt32*), numGroups, groupsSize, ptr, GL.EntryPoints[852]);
				}
			}

			// Token: 0x06001900 RID: 6400 RVA: 0x00046D1C File Offset: 0x00044F1C
			[Obsolete("Use GetPerfMonitorGroups instead")]
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroup([Out] int* numGroups, int groupsSize, [Out] uint* groups)
			{
				calli(System.Void(System.Int32*,System.Int32,System.UInt32*), numGroups, groupsSize, groups, GL.EntryPoints[852]);
			}
		}

		// Token: 0x020004B8 RID: 1208
		public static class Apple
		{
			// Token: 0x06001901 RID: 6401 RVA: 0x00046D34 File Offset: 0x00044F34
			[CLSCompliant(false)]
			public static void BindVertexArray(int array)
			{
				calli(System.Void(System.UInt32), array, GL.EntryPoints[83]);
			}

			// Token: 0x06001902 RID: 6402 RVA: 0x00046D44 File Offset: 0x00044F44
			[CLSCompliant(false)]
			public static void BindVertexArray(uint array)
			{
				calli(System.Void(System.UInt32), array, GL.EntryPoints[83]);
			}

			// Token: 0x06001903 RID: 6403 RVA: 0x00046D54 File Offset: 0x00044F54
			public static void BufferParameter(BufferTarget target, BufferParameterApple pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, param, GL.EntryPoints[132]);
			}

			// Token: 0x06001904 RID: 6404 RVA: 0x00046D6C File Offset: 0x00044F6C
			[CLSCompliant(false)]
			public static void DeleteFence(int fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref fences, GL.EntryPoints[364]);
			}

			// Token: 0x06001905 RID: 6405 RVA: 0x00046D84 File Offset: 0x00044F84
			[CLSCompliant(false)]
			public static void DeleteFence(uint fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref fences, GL.EntryPoints[364]);
			}

			// Token: 0x06001906 RID: 6406 RVA: 0x00046D9C File Offset: 0x00044F9C
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, int[] fences)
			{
				fixed (int* ptr = ref (fences != null && fences.Length != 0) ? ref fences[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[364]);
				}
			}

			// Token: 0x06001907 RID: 6407 RVA: 0x00046DD0 File Offset: 0x00044FD0
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, ref int fences)
			{
				fixed (int* ptr = &fences)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[364]);
				}
			}

			// Token: 0x06001908 RID: 6408 RVA: 0x00046DF4 File Offset: 0x00044FF4
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, int* fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, fences, GL.EntryPoints[364]);
			}

			// Token: 0x06001909 RID: 6409 RVA: 0x00046E08 File Offset: 0x00045008
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, uint[] fences)
			{
				fixed (uint* ptr = ref (fences != null && fences.Length != 0) ? ref fences[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[364]);
				}
			}

			// Token: 0x0600190A RID: 6410 RVA: 0x00046E3C File Offset: 0x0004503C
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, ref uint fences)
			{
				fixed (uint* ptr = &fences)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[364]);
				}
			}

			// Token: 0x0600190B RID: 6411 RVA: 0x00046E60 File Offset: 0x00045060
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, uint* fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, fences, GL.EntryPoints[364]);
			}

			// Token: 0x0600190C RID: 6412 RVA: 0x00046E74 File Offset: 0x00045074
			[CLSCompliant(false)]
			public static void DeleteVertexArray(int arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref arrays, GL.EntryPoints[394]);
			}

			// Token: 0x0600190D RID: 6413 RVA: 0x00046E8C File Offset: 0x0004508C
			[CLSCompliant(false)]
			public static void DeleteVertexArray(uint arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref arrays, GL.EntryPoints[394]);
			}

			// Token: 0x0600190E RID: 6414 RVA: 0x00046EA4 File Offset: 0x000450A4
			[CLSCompliant(false)]
			public unsafe static void DeleteVertexArrays(int n, int[] arrays)
			{
				fixed (int* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[394]);
				}
			}

			// Token: 0x0600190F RID: 6415 RVA: 0x00046ED8 File Offset: 0x000450D8
			[CLSCompliant(false)]
			public unsafe static void DeleteVertexArrays(int n, ref int arrays)
			{
				fixed (int* ptr = &arrays)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[394]);
				}
			}

			// Token: 0x06001910 RID: 6416 RVA: 0x00046EFC File Offset: 0x000450FC
			[CLSCompliant(false)]
			public unsafe static void DeleteVertexArrays(int n, int* arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[394]);
			}

			// Token: 0x06001911 RID: 6417 RVA: 0x00046F10 File Offset: 0x00045110
			[CLSCompliant(false)]
			public unsafe static void DeleteVertexArrays(int n, uint[] arrays)
			{
				fixed (uint* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[394]);
				}
			}

			// Token: 0x06001912 RID: 6418 RVA: 0x00046F44 File Offset: 0x00045144
			[CLSCompliant(false)]
			public unsafe static void DeleteVertexArrays(int n, ref uint arrays)
			{
				fixed (uint* ptr = &arrays)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[394]);
				}
			}

			// Token: 0x06001913 RID: 6419 RVA: 0x00046F68 File Offset: 0x00045168
			[CLSCompliant(false)]
			public unsafe static void DeleteVertexArrays(int n, uint* arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[394]);
			}

			// Token: 0x06001914 RID: 6420 RVA: 0x00046F7C File Offset: 0x0004517C
			[CLSCompliant(false)]
			public static void DisableVertexAttrib(int index, AppleVertexProgramEvaluators pname)
			{
				calli(System.Void(System.UInt32,System.Int32), index, pname, GL.EntryPoints[419]);
			}

			// Token: 0x06001915 RID: 6421 RVA: 0x00046F90 File Offset: 0x00045190
			[CLSCompliant(false)]
			public static void DisableVertexAttrib(uint index, AppleVertexProgramEvaluators pname)
			{
				calli(System.Void(System.UInt32,System.Int32), index, pname, GL.EntryPoints[419]);
			}

			// Token: 0x06001916 RID: 6422 RVA: 0x00046FA4 File Offset: 0x000451A4
			[Obsolete("Use PrimitiveType overload instead")]
			public static void DrawElementArray(BeginMode mode, int first, int count)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), mode, first, count, GL.EntryPoints[436]);
			}

			// Token: 0x06001917 RID: 6423 RVA: 0x00046FBC File Offset: 0x000451BC
			public static void DrawElementArray(PrimitiveType mode, int first, int count)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), mode, first, count, GL.EntryPoints[436]);
			}

			// Token: 0x06001918 RID: 6424 RVA: 0x00046FD4 File Offset: 0x000451D4
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public static void DrawRangeElementArray(BeginMode mode, int start, int end, int first, int count)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32), mode, start, end, first, count, GL.EntryPoints[449]);
			}

			// Token: 0x06001919 RID: 6425 RVA: 0x00046FEC File Offset: 0x000451EC
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public static void DrawRangeElementArray(BeginMode mode, uint start, uint end, int first, int count)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32), mode, start, end, first, count, GL.EntryPoints[449]);
			}

			// Token: 0x0600191A RID: 6426 RVA: 0x00047004 File Offset: 0x00045204
			[CLSCompliant(false)]
			public static void DrawRangeElementArray(PrimitiveType mode, int start, int end, int first, int count)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32), mode, start, end, first, count, GL.EntryPoints[449]);
			}

			// Token: 0x0600191B RID: 6427 RVA: 0x0004701C File Offset: 0x0004521C
			[CLSCompliant(false)]
			public static void DrawRangeElementArray(PrimitiveType mode, uint start, uint end, int first, int count)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32), mode, start, end, first, count, GL.EntryPoints[449]);
			}

			// Token: 0x0600191C RID: 6428 RVA: 0x00047034 File Offset: 0x00045234
			public static void ElementPointer(AppleElementArray type, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.IntPtr), type, pointer, GL.EntryPoints[466]);
			}

			// Token: 0x0600191D RID: 6429 RVA: 0x00047048 File Offset: 0x00045248
			[CLSCompliant(false)]
			public unsafe static void ElementPointer<T1>(AppleElementArray type, [In] [Out] T1[] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), type, ptr, GL.EntryPoints[466]);
				}
			}

			// Token: 0x0600191E RID: 6430 RVA: 0x0004707C File Offset: 0x0004527C
			[CLSCompliant(false)]
			public unsafe static void ElementPointer<T1>(AppleElementArray type, [In] [Out] T1[,] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), type, ptr, GL.EntryPoints[466]);
				}
			}

			// Token: 0x0600191F RID: 6431 RVA: 0x000470B4 File Offset: 0x000452B4
			[CLSCompliant(false)]
			public unsafe static void ElementPointer<T1>(AppleElementArray type, [In] [Out] T1[,,] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), type, ptr, GL.EntryPoints[466]);
				}
			}

			// Token: 0x06001920 RID: 6432 RVA: 0x000470F0 File Offset: 0x000452F0
			public unsafe static void ElementPointer<T1>(AppleElementArray type, [In] [Out] ref T1 pointer) where T1 : struct
			{
				fixed (T1* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.IntPtr), type, ptr, GL.EntryPoints[466]);
				}
			}

			// Token: 0x06001921 RID: 6433 RVA: 0x00047114 File Offset: 0x00045314
			[CLSCompliant(false)]
			public static void EnableVertexAttrib(int index, AppleVertexProgramEvaluators pname)
			{
				calli(System.Void(System.UInt32,System.Int32), index, pname, GL.EntryPoints[477]);
			}

			// Token: 0x06001922 RID: 6434 RVA: 0x00047128 File Offset: 0x00045328
			[CLSCompliant(false)]
			public static void EnableVertexAttrib(uint index, AppleVertexProgramEvaluators pname)
			{
				calli(System.Void(System.UInt32,System.Int32), index, pname, GL.EntryPoints[477]);
			}

			// Token: 0x06001923 RID: 6435 RVA: 0x0004713C File Offset: 0x0004533C
			[CLSCompliant(false)]
			public static void FinishFence(int fence)
			{
				calli(System.Void(System.UInt32), fence, GL.EntryPoints[522]);
			}

			// Token: 0x06001924 RID: 6436 RVA: 0x00047150 File Offset: 0x00045350
			[CLSCompliant(false)]
			public static void FinishFence(uint fence)
			{
				calli(System.Void(System.UInt32), fence, GL.EntryPoints[522]);
			}

			// Token: 0x06001925 RID: 6437 RVA: 0x00047164 File Offset: 0x00045364
			public static void FinishObject(AppleFence @object, int name)
			{
				calli(System.Void(System.Int32,System.Int32), @object, name, GL.EntryPoints[524]);
			}

			// Token: 0x06001926 RID: 6438 RVA: 0x00047178 File Offset: 0x00045378
			public static void FlushMappedBufferRange(BufferTarget target, IntPtr offset, IntPtr size)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr), target, offset, size, GL.EntryPoints[528]);
			}

			// Token: 0x06001927 RID: 6439 RVA: 0x00047190 File Offset: 0x00045390
			public static void FlushVertexArrayRange(int length, [Out] IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.IntPtr), length, pointer, GL.EntryPoints[533]);
			}

			// Token: 0x06001928 RID: 6440 RVA: 0x000471A4 File Offset: 0x000453A4
			[CLSCompliant(false)]
			public unsafe static void FlushVertexArrayRange<T1>(int length, [In] [Out] T1[] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), length, ptr, GL.EntryPoints[533]);
				}
			}

			// Token: 0x06001929 RID: 6441 RVA: 0x000471D8 File Offset: 0x000453D8
			[CLSCompliant(false)]
			public unsafe static void FlushVertexArrayRange<T1>(int length, [In] [Out] T1[,] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), length, ptr, GL.EntryPoints[533]);
				}
			}

			// Token: 0x0600192A RID: 6442 RVA: 0x00047210 File Offset: 0x00045410
			[CLSCompliant(false)]
			public unsafe static void FlushVertexArrayRange<T1>(int length, [In] [Out] T1[,,] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), length, ptr, GL.EntryPoints[533]);
				}
			}

			// Token: 0x0600192B RID: 6443 RVA: 0x0004724C File Offset: 0x0004544C
			public unsafe static void FlushVertexArrayRange<T1>(int length, [In] [Out] ref T1 pointer) where T1 : struct
			{
				fixed (T1* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.IntPtr), length, ptr, GL.EntryPoints[533]);
				}
			}

			// Token: 0x0600192C RID: 6444 RVA: 0x00047270 File Offset: 0x00045470
			[CLSCompliant(false)]
			public static int GenFence()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[603]);
				return result;
			}

			// Token: 0x0600192D RID: 6445 RVA: 0x00047294 File Offset: 0x00045494
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, [Out] int[] fences)
			{
				fixed (int* ptr = ref (fences != null && fences.Length != 0) ? ref fences[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[603]);
				}
			}

			// Token: 0x0600192E RID: 6446 RVA: 0x000472C8 File Offset: 0x000454C8
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, out int fences)
			{
				fixed (int* ptr = &fences)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[603]);
				}
			}

			// Token: 0x0600192F RID: 6447 RVA: 0x000472EC File Offset: 0x000454EC
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, [Out] int* fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, fences, GL.EntryPoints[603]);
			}

			// Token: 0x06001930 RID: 6448 RVA: 0x00047300 File Offset: 0x00045500
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, [Out] uint[] fences)
			{
				fixed (uint* ptr = ref (fences != null && fences.Length != 0) ? ref fences[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[603]);
				}
			}

			// Token: 0x06001931 RID: 6449 RVA: 0x00047334 File Offset: 0x00045534
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, out uint fences)
			{
				fixed (uint* ptr = &fences)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[603]);
				}
			}

			// Token: 0x06001932 RID: 6450 RVA: 0x00047358 File Offset: 0x00045558
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, [Out] uint* fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, fences, GL.EntryPoints[603]);
			}

			// Token: 0x06001933 RID: 6451 RVA: 0x0004736C File Offset: 0x0004556C
			[CLSCompliant(false)]
			public static int GenVertexArray()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[628]);
				return result;
			}

			// Token: 0x06001934 RID: 6452 RVA: 0x00047390 File Offset: 0x00045590
			[CLSCompliant(false)]
			public unsafe static void GenVertexArrays(int n, [Out] int[] arrays)
			{
				fixed (int* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[628]);
				}
			}

			// Token: 0x06001935 RID: 6453 RVA: 0x000473C4 File Offset: 0x000455C4
			[CLSCompliant(false)]
			public unsafe static void GenVertexArrays(int n, out int arrays)
			{
				fixed (int* ptr = &arrays)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[628]);
				}
			}

			// Token: 0x06001936 RID: 6454 RVA: 0x000473E8 File Offset: 0x000455E8
			[CLSCompliant(false)]
			public unsafe static void GenVertexArrays(int n, [Out] int* arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[628]);
			}

			// Token: 0x06001937 RID: 6455 RVA: 0x000473FC File Offset: 0x000455FC
			[CLSCompliant(false)]
			public unsafe static void GenVertexArrays(int n, [Out] uint[] arrays)
			{
				fixed (uint* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[628]);
				}
			}

			// Token: 0x06001938 RID: 6456 RVA: 0x00047430 File Offset: 0x00045630
			[CLSCompliant(false)]
			public unsafe static void GenVertexArrays(int n, out uint arrays)
			{
				fixed (uint* ptr = &arrays)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[628]);
				}
			}

			// Token: 0x06001939 RID: 6457 RVA: 0x00047454 File Offset: 0x00045654
			[CLSCompliant(false)]
			public unsafe static void GenVertexArrays(int n, [Out] uint* arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[628]);
			}

			// Token: 0x0600193A RID: 6458 RVA: 0x00047468 File Offset: 0x00045668
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(AppleObjectPurgeable objectType, int name, AppleObjectPurgeable pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), objectType, name, pname, ptr, GL.EntryPoints[828]);
				}
			}

			// Token: 0x0600193B RID: 6459 RVA: 0x000474A0 File Offset: 0x000456A0
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(AppleObjectPurgeable objectType, int name, AppleObjectPurgeable pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), objectType, name, pname, ptr, GL.EntryPoints[828]);
				}
			}

			// Token: 0x0600193C RID: 6460 RVA: 0x000474C4 File Offset: 0x000456C4
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(AppleObjectPurgeable objectType, int name, AppleObjectPurgeable pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), objectType, name, pname, @params, GL.EntryPoints[828]);
			}

			// Token: 0x0600193D RID: 6461 RVA: 0x000474DC File Offset: 0x000456DC
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(AppleObjectPurgeable objectType, uint name, AppleObjectPurgeable pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), objectType, name, pname, ptr, GL.EntryPoints[828]);
				}
			}

			// Token: 0x0600193E RID: 6462 RVA: 0x00047514 File Offset: 0x00045714
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(AppleObjectPurgeable objectType, uint name, AppleObjectPurgeable pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), objectType, name, pname, ptr, GL.EntryPoints[828]);
				}
			}

			// Token: 0x0600193F RID: 6463 RVA: 0x00047538 File Offset: 0x00045738
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(AppleObjectPurgeable objectType, uint name, AppleObjectPurgeable pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), objectType, name, pname, @params, GL.EntryPoints[828]);
			}

			// Token: 0x06001940 RID: 6464 RVA: 0x00047550 File Offset: 0x00045750
			public static void GetTexParameterPointer(AppleTextureRange target, AppleTextureRange pname, [Out] IntPtr @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, @params, GL.EntryPoints[952]);
			}

			// Token: 0x06001941 RID: 6465 RVA: 0x00047568 File Offset: 0x00045768
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterPointer<T2>(AppleTextureRange target, AppleTextureRange pname, [In] [Out] T2[] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[952]);
				}
			}

			// Token: 0x06001942 RID: 6466 RVA: 0x000475A0 File Offset: 0x000457A0
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterPointer<T2>(AppleTextureRange target, AppleTextureRange pname, [In] [Out] T2[,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[952]);
				}
			}

			// Token: 0x06001943 RID: 6467 RVA: 0x000475DC File Offset: 0x000457DC
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterPointer<T2>(AppleTextureRange target, AppleTextureRange pname, [In] [Out] T2[,,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[952]);
				}
			}

			// Token: 0x06001944 RID: 6468 RVA: 0x00047618 File Offset: 0x00045818
			public unsafe static void GetTexParameterPointer<T2>(AppleTextureRange target, AppleTextureRange pname, [In] [Out] ref T2 @params) where T2 : struct
			{
				fixed (T2* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[952]);
				}
			}

			// Token: 0x06001945 RID: 6469 RVA: 0x0004763C File Offset: 0x0004583C
			[CLSCompliant(false)]
			public static bool IsFence(int fence)
			{
				return calli(System.Byte(System.UInt32), fence, GL.EntryPoints[1083]);
			}

			// Token: 0x06001946 RID: 6470 RVA: 0x00047650 File Offset: 0x00045850
			[CLSCompliant(false)]
			public static bool IsFence(uint fence)
			{
				return calli(System.Byte(System.UInt32), fence, GL.EntryPoints[1083]);
			}

			// Token: 0x06001947 RID: 6471 RVA: 0x00047664 File Offset: 0x00045864
			[CLSCompliant(false)]
			public static bool IsVertexArray(int array)
			{
				return calli(System.Byte(System.UInt32), array, GL.EntryPoints[1118]);
			}

			// Token: 0x06001948 RID: 6472 RVA: 0x00047678 File Offset: 0x00045878
			[CLSCompliant(false)]
			public static bool IsVertexArray(uint array)
			{
				return calli(System.Byte(System.UInt32), array, GL.EntryPoints[1118]);
			}

			// Token: 0x06001949 RID: 6473 RVA: 0x0004768C File Offset: 0x0004588C
			[CLSCompliant(false)]
			public static bool IsVertexAttribEnabled(int index, AppleVertexProgramEvaluators pname)
			{
				return calli(System.Byte(System.UInt32,System.Int32), index, pname, GL.EntryPoints[1119]);
			}

			// Token: 0x0600194A RID: 6474 RVA: 0x000476A0 File Offset: 0x000458A0
			[CLSCompliant(false)]
			public static bool IsVertexAttribEnabled(uint index, AppleVertexProgramEvaluators pname)
			{
				return calli(System.Byte(System.UInt32,System.Int32), index, pname, GL.EntryPoints[1119]);
			}

			// Token: 0x0600194B RID: 6475 RVA: 0x000476B4 File Offset: 0x000458B4
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib1(int index, int size, double u1, double u2, int stride, int order, double[] points)
			{
				fixed (double* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), index, size, u1, u2, stride, order, ptr, GL.EntryPoints[1192]);
				}
			}

			// Token: 0x0600194C RID: 6476 RVA: 0x000476F4 File Offset: 0x000458F4
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib1(int index, int size, double u1, double u2, int stride, int order, ref double points)
			{
				fixed (double* ptr = &points)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), index, size, u1, u2, stride, order, ptr, GL.EntryPoints[1192]);
				}
			}

			// Token: 0x0600194D RID: 6477 RVA: 0x00047720 File Offset: 0x00045920
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib1(int index, int size, double u1, double u2, int stride, int order, double* points)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), index, size, u1, u2, stride, order, points, GL.EntryPoints[1192]);
			}

			// Token: 0x0600194E RID: 6478 RVA: 0x00047748 File Offset: 0x00045948
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib1(uint index, uint size, double u1, double u2, int stride, int order, double[] points)
			{
				fixed (double* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), index, size, u1, u2, stride, order, ptr, GL.EntryPoints[1192]);
				}
			}

			// Token: 0x0600194F RID: 6479 RVA: 0x00047788 File Offset: 0x00045988
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib1(uint index, uint size, double u1, double u2, int stride, int order, ref double points)
			{
				fixed (double* ptr = &points)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), index, size, u1, u2, stride, order, ptr, GL.EntryPoints[1192]);
				}
			}

			// Token: 0x06001950 RID: 6480 RVA: 0x000477B4 File Offset: 0x000459B4
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib1(uint index, uint size, double u1, double u2, int stride, int order, double* points)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), index, size, u1, u2, stride, order, points, GL.EntryPoints[1192]);
			}

			// Token: 0x06001951 RID: 6481 RVA: 0x000477DC File Offset: 0x000459DC
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib1(int index, int size, float u1, float u2, int stride, int order, float[] points)
			{
				fixed (float* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), index, size, u1, u2, stride, order, ptr, GL.EntryPoints[1193]);
				}
			}

			// Token: 0x06001952 RID: 6482 RVA: 0x0004781C File Offset: 0x00045A1C
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib1(int index, int size, float u1, float u2, int stride, int order, ref float points)
			{
				fixed (float* ptr = &points)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), index, size, u1, u2, stride, order, ptr, GL.EntryPoints[1193]);
				}
			}

			// Token: 0x06001953 RID: 6483 RVA: 0x00047848 File Offset: 0x00045A48
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib1(int index, int size, float u1, float u2, int stride, int order, float* points)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), index, size, u1, u2, stride, order, points, GL.EntryPoints[1193]);
			}

			// Token: 0x06001954 RID: 6484 RVA: 0x00047870 File Offset: 0x00045A70
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib1(uint index, uint size, float u1, float u2, int stride, int order, float[] points)
			{
				fixed (float* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), index, size, u1, u2, stride, order, ptr, GL.EntryPoints[1193]);
				}
			}

			// Token: 0x06001955 RID: 6485 RVA: 0x000478B0 File Offset: 0x00045AB0
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib1(uint index, uint size, float u1, float u2, int stride, int order, ref float points)
			{
				fixed (float* ptr = &points)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), index, size, u1, u2, stride, order, ptr, GL.EntryPoints[1193]);
				}
			}

			// Token: 0x06001956 RID: 6486 RVA: 0x000478DC File Offset: 0x00045ADC
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib1(uint index, uint size, float u1, float u2, int stride, int order, float* points)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), index, size, u1, u2, stride, order, points, GL.EntryPoints[1193]);
			}

			// Token: 0x06001957 RID: 6487 RVA: 0x00047904 File Offset: 0x00045B04
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib2(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points)
			{
				fixed (double* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, ptr, GL.EntryPoints[1194]);
				}
			}

			// Token: 0x06001958 RID: 6488 RVA: 0x0004794C File Offset: 0x00045B4C
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib2(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref double points)
			{
				fixed (double* ptr = &points)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, ptr, GL.EntryPoints[1194]);
				}
			}

			// Token: 0x06001959 RID: 6489 RVA: 0x00047980 File Offset: 0x00045B80
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib2(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points, GL.EntryPoints[1194]);
			}

			// Token: 0x0600195A RID: 6490 RVA: 0x000479B0 File Offset: 0x00045BB0
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib2(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points)
			{
				fixed (double* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, ptr, GL.EntryPoints[1194]);
				}
			}

			// Token: 0x0600195B RID: 6491 RVA: 0x000479F8 File Offset: 0x00045BF8
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib2(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref double points)
			{
				fixed (double* ptr = &points)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, ptr, GL.EntryPoints[1194]);
				}
			}

			// Token: 0x0600195C RID: 6492 RVA: 0x00047A2C File Offset: 0x00045C2C
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib2(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points, GL.EntryPoints[1194]);
			}

			// Token: 0x0600195D RID: 6493 RVA: 0x00047A5C File Offset: 0x00045C5C
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib2(int index, int size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points)
			{
				fixed (float* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, ptr, GL.EntryPoints[1195]);
				}
			}

			// Token: 0x0600195E RID: 6494 RVA: 0x00047AA4 File Offset: 0x00045CA4
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib2(int index, int size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref float points)
			{
				fixed (float* ptr = &points)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, ptr, GL.EntryPoints[1195]);
				}
			}

			// Token: 0x0600195F RID: 6495 RVA: 0x00047AD8 File Offset: 0x00045CD8
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib2(int index, int size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points, GL.EntryPoints[1195]);
			}

			// Token: 0x06001960 RID: 6496 RVA: 0x00047B08 File Offset: 0x00045D08
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib2(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points)
			{
				fixed (float* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, ptr, GL.EntryPoints[1195]);
				}
			}

			// Token: 0x06001961 RID: 6497 RVA: 0x00047B50 File Offset: 0x00045D50
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib2(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref float points)
			{
				fixed (float* ptr = &points)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, ptr, GL.EntryPoints[1195]);
				}
			}

			// Token: 0x06001962 RID: 6498 RVA: 0x00047B84 File Offset: 0x00045D84
			[CLSCompliant(false)]
			public unsafe static void MapVertexAttrib2(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points, GL.EntryPoints[1195]);
			}

			// Token: 0x06001963 RID: 6499 RVA: 0x00047BB4 File Offset: 0x00045DB4
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElementArray(BeginMode mode, int[] first, int[] count, int primcount)
			{
				fixed (int* ptr = ref (first != null && first.Length != 0) ? ref first[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, primcount, GL.EntryPoints[1238]);
					}
				}
			}

			// Token: 0x06001964 RID: 6500 RVA: 0x00047C00 File Offset: 0x00045E00
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiDrawElementArray(BeginMode mode, ref int first, ref int count, int primcount)
			{
				fixed (int* ptr = &first)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, primcount, GL.EntryPoints[1238]);
					}
				}
			}

			// Token: 0x06001965 RID: 6501 RVA: 0x00047C28 File Offset: 0x00045E28
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiDrawElementArray(BeginMode mode, int* first, int* count, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, first, count, primcount, GL.EntryPoints[1238]);
			}

			// Token: 0x06001966 RID: 6502 RVA: 0x00047C40 File Offset: 0x00045E40
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElementArray(PrimitiveType mode, int[] first, int[] count, int primcount)
			{
				fixed (int* ptr = ref (first != null && first.Length != 0) ? ref first[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, primcount, GL.EntryPoints[1238]);
					}
				}
			}

			// Token: 0x06001967 RID: 6503 RVA: 0x00047C8C File Offset: 0x00045E8C
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElementArray(PrimitiveType mode, ref int first, ref int count, int primcount)
			{
				fixed (int* ptr = &first)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, primcount, GL.EntryPoints[1238]);
					}
				}
			}

			// Token: 0x06001968 RID: 6504 RVA: 0x00047CB4 File Offset: 0x00045EB4
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElementArray(PrimitiveType mode, int* first, int* count, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, first, count, primcount, GL.EntryPoints[1238]);
			}

			// Token: 0x06001969 RID: 6505 RVA: 0x00047CCC File Offset: 0x00045ECC
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiDrawRangeElementArray(BeginMode mode, int start, int end, int[] first, int[] count, int primcount)
			{
				fixed (int* ptr = ref (first != null && first.Length != 0) ? ref first[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32*,System.Int32*,System.Int32), mode, start, end, ptr2, ptr3, primcount, GL.EntryPoints[1246]);
					}
				}
			}

			// Token: 0x0600196A RID: 6506 RVA: 0x00047D20 File Offset: 0x00045F20
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiDrawRangeElementArray(BeginMode mode, int start, int end, ref int first, ref int count, int primcount)
			{
				fixed (int* ptr = &first)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32*,System.Int32*,System.Int32), mode, start, end, ptr2, ptr3, primcount, GL.EntryPoints[1246]);
					}
				}
			}

			// Token: 0x0600196B RID: 6507 RVA: 0x00047D4C File Offset: 0x00045F4C
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiDrawRangeElementArray(BeginMode mode, int start, int end, int* first, int* count, int primcount)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32*,System.Int32*,System.Int32), mode, start, end, first, count, primcount, GL.EntryPoints[1246]);
			}

			// Token: 0x0600196C RID: 6508 RVA: 0x00047D68 File Offset: 0x00045F68
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawRangeElementArray(BeginMode mode, uint start, uint end, int[] first, int[] count, int primcount)
			{
				fixed (int* ptr = ref (first != null && first.Length != 0) ? ref first[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32*,System.Int32*,System.Int32), mode, start, end, ptr2, ptr3, primcount, GL.EntryPoints[1246]);
					}
				}
			}

			// Token: 0x0600196D RID: 6509 RVA: 0x00047DBC File Offset: 0x00045FBC
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiDrawRangeElementArray(BeginMode mode, uint start, uint end, ref int first, ref int count, int primcount)
			{
				fixed (int* ptr = &first)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32*,System.Int32*,System.Int32), mode, start, end, ptr2, ptr3, primcount, GL.EntryPoints[1246]);
					}
				}
			}

			// Token: 0x0600196E RID: 6510 RVA: 0x00047DE8 File Offset: 0x00045FE8
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiDrawRangeElementArray(BeginMode mode, uint start, uint end, int* first, int* count, int primcount)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32*,System.Int32*,System.Int32), mode, start, end, first, count, primcount, GL.EntryPoints[1246]);
			}

			// Token: 0x0600196F RID: 6511 RVA: 0x00047E04 File Offset: 0x00046004
			[CLSCompliant(false)]
			public unsafe static void MultiDrawRangeElementArray(PrimitiveType mode, int start, int end, int[] first, int[] count, int primcount)
			{
				fixed (int* ptr = ref (first != null && first.Length != 0) ? ref first[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32*,System.Int32*,System.Int32), mode, start, end, ptr2, ptr3, primcount, GL.EntryPoints[1246]);
					}
				}
			}

			// Token: 0x06001970 RID: 6512 RVA: 0x00047E58 File Offset: 0x00046058
			[CLSCompliant(false)]
			public unsafe static void MultiDrawRangeElementArray(PrimitiveType mode, int start, int end, ref int first, ref int count, int primcount)
			{
				fixed (int* ptr = &first)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32*,System.Int32*,System.Int32), mode, start, end, ptr2, ptr3, primcount, GL.EntryPoints[1246]);
					}
				}
			}

			// Token: 0x06001971 RID: 6513 RVA: 0x00047E84 File Offset: 0x00046084
			[CLSCompliant(false)]
			public unsafe static void MultiDrawRangeElementArray(PrimitiveType mode, int start, int end, int* first, int* count, int primcount)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32*,System.Int32*,System.Int32), mode, start, end, first, count, primcount, GL.EntryPoints[1246]);
			}

			// Token: 0x06001972 RID: 6514 RVA: 0x00047EA0 File Offset: 0x000460A0
			[CLSCompliant(false)]
			public unsafe static void MultiDrawRangeElementArray(PrimitiveType mode, uint start, uint end, int[] first, int[] count, int primcount)
			{
				fixed (int* ptr = ref (first != null && first.Length != 0) ? ref first[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32*,System.Int32*,System.Int32), mode, start, end, ptr2, ptr3, primcount, GL.EntryPoints[1246]);
					}
				}
			}

			// Token: 0x06001973 RID: 6515 RVA: 0x00047EF4 File Offset: 0x000460F4
			[CLSCompliant(false)]
			public unsafe static void MultiDrawRangeElementArray(PrimitiveType mode, uint start, uint end, ref int first, ref int count, int primcount)
			{
				fixed (int* ptr = &first)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32*,System.Int32*,System.Int32), mode, start, end, ptr2, ptr3, primcount, GL.EntryPoints[1246]);
					}
				}
			}

			// Token: 0x06001974 RID: 6516 RVA: 0x00047F20 File Offset: 0x00046120
			[CLSCompliant(false)]
			public unsafe static void MultiDrawRangeElementArray(PrimitiveType mode, uint start, uint end, int* first, int* count, int primcount)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32*,System.Int32*,System.Int32), mode, start, end, first, count, primcount, GL.EntryPoints[1246]);
			}

			// Token: 0x06001975 RID: 6517 RVA: 0x00047F3C File Offset: 0x0004613C
			[CLSCompliant(false)]
			public static AppleObjectPurgeable ObjectPurgeable(AppleObjectPurgeable objectType, int name, AppleObjectPurgeable option)
			{
				return calli(System.Int32(System.Int32,System.UInt32,System.Int32), objectType, name, option, GL.EntryPoints[1445]);
			}

			// Token: 0x06001976 RID: 6518 RVA: 0x00047F54 File Offset: 0x00046154
			[CLSCompliant(false)]
			public static AppleObjectPurgeable ObjectPurgeable(AppleObjectPurgeable objectType, uint name, AppleObjectPurgeable option)
			{
				return calli(System.Int32(System.Int32,System.UInt32,System.Int32), objectType, name, option, GL.EntryPoints[1445]);
			}

			// Token: 0x06001977 RID: 6519 RVA: 0x00047F6C File Offset: 0x0004616C
			[CLSCompliant(false)]
			public static AppleObjectPurgeable ObjectUnpurgeable(AppleObjectPurgeable objectType, int name, AppleObjectPurgeable option)
			{
				return calli(System.Int32(System.Int32,System.UInt32,System.Int32), objectType, name, option, GL.EntryPoints[1446]);
			}

			// Token: 0x06001978 RID: 6520 RVA: 0x00047F84 File Offset: 0x00046184
			[CLSCompliant(false)]
			public static AppleObjectPurgeable ObjectUnpurgeable(AppleObjectPurgeable objectType, uint name, AppleObjectPurgeable option)
			{
				return calli(System.Int32(System.Int32,System.UInt32,System.Int32), objectType, name, option, GL.EntryPoints[1446]);
			}

			// Token: 0x06001979 RID: 6521 RVA: 0x00047F9C File Offset: 0x0004619C
			[CLSCompliant(false)]
			public static void SetFence(int fence)
			{
				calli(System.Void(System.UInt32), fence, GL.EntryPoints[1869]);
			}

			// Token: 0x0600197A RID: 6522 RVA: 0x00047FB0 File Offset: 0x000461B0
			[CLSCompliant(false)]
			public static void SetFence(uint fence)
			{
				calli(System.Void(System.UInt32), fence, GL.EntryPoints[1869]);
			}

			// Token: 0x0600197B RID: 6523 RVA: 0x00047FC4 File Offset: 0x000461C4
			[CLSCompliant(false)]
			public static bool TestFence(int fence)
			{
				return calli(System.Byte(System.UInt32), fence, GL.EntryPoints[1922]);
			}

			// Token: 0x0600197C RID: 6524 RVA: 0x00047FD8 File Offset: 0x000461D8
			[CLSCompliant(false)]
			public static bool TestFence(uint fence)
			{
				return calli(System.Byte(System.UInt32), fence, GL.EntryPoints[1922]);
			}

			// Token: 0x0600197D RID: 6525 RVA: 0x00047FEC File Offset: 0x000461EC
			[CLSCompliant(false)]
			public static bool TestObject(AppleFence @object, int name)
			{
				return calli(System.Byte(System.Int32,System.UInt32), @object, name, GL.EntryPoints[1924]);
			}

			// Token: 0x0600197E RID: 6526 RVA: 0x00048000 File Offset: 0x00046200
			[CLSCompliant(false)]
			public static bool TestObject(AppleFence @object, uint name)
			{
				return calli(System.Byte(System.Int32,System.UInt32), @object, name, GL.EntryPoints[1924]);
			}

			// Token: 0x0600197F RID: 6527 RVA: 0x00048014 File Offset: 0x00046214
			public static void TextureRange(AppleTextureRange target, int length, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, length, pointer, GL.EntryPoints[2084]);
			}

			// Token: 0x06001980 RID: 6528 RVA: 0x0004802C File Offset: 0x0004622C
			[CLSCompliant(false)]
			public unsafe static void TextureRange<T2>(AppleTextureRange target, int length, [In] [Out] T2[] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, length, ptr, GL.EntryPoints[2084]);
				}
			}

			// Token: 0x06001981 RID: 6529 RVA: 0x00048064 File Offset: 0x00046264
			[CLSCompliant(false)]
			public unsafe static void TextureRange<T2>(AppleTextureRange target, int length, [In] [Out] T2[,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, length, ptr, GL.EntryPoints[2084]);
				}
			}

			// Token: 0x06001982 RID: 6530 RVA: 0x000480A0 File Offset: 0x000462A0
			[CLSCompliant(false)]
			public unsafe static void TextureRange<T2>(AppleTextureRange target, int length, [In] [Out] T2[,,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, length, ptr, GL.EntryPoints[2084]);
				}
			}

			// Token: 0x06001983 RID: 6531 RVA: 0x000480DC File Offset: 0x000462DC
			public unsafe static void TextureRange<T2>(AppleTextureRange target, int length, [In] [Out] ref T2 pointer) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, length, ptr, GL.EntryPoints[2084]);
				}
			}

			// Token: 0x06001984 RID: 6532 RVA: 0x00048100 File Offset: 0x00046300
			public static void VertexArrayParameter(AppleVertexArrayRange pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[2293]);
			}

			// Token: 0x06001985 RID: 6533 RVA: 0x00048114 File Offset: 0x00046314
			public static void VertexArrayRange(int length, [Out] IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.IntPtr), length, pointer, GL.EntryPoints[2294]);
			}

			// Token: 0x06001986 RID: 6534 RVA: 0x00048128 File Offset: 0x00046328
			[CLSCompliant(false)]
			public unsafe static void VertexArrayRange<T1>(int length, [In] [Out] T1[] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), length, ptr, GL.EntryPoints[2294]);
				}
			}

			// Token: 0x06001987 RID: 6535 RVA: 0x0004815C File Offset: 0x0004635C
			[CLSCompliant(false)]
			public unsafe static void VertexArrayRange<T1>(int length, [In] [Out] T1[,] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), length, ptr, GL.EntryPoints[2294]);
				}
			}

			// Token: 0x06001988 RID: 6536 RVA: 0x00048194 File Offset: 0x00046394
			[CLSCompliant(false)]
			public unsafe static void VertexArrayRange<T1>(int length, [In] [Out] T1[,,] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), length, ptr, GL.EntryPoints[2294]);
				}
			}

			// Token: 0x06001989 RID: 6537 RVA: 0x000481D0 File Offset: 0x000463D0
			public unsafe static void VertexArrayRange<T1>(int length, [In] [Out] ref T1 pointer) where T1 : struct
			{
				fixed (T1* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.IntPtr), length, ptr, GL.EntryPoints[2294]);
				}
			}
		}

		// Token: 0x020004B9 RID: 1209
		public static class Arb
		{
			// Token: 0x0600198A RID: 6538 RVA: 0x000481F4 File Offset: 0x000463F4
			public static void ActiveTexture(TextureUnit texture)
			{
				calli(System.Void(System.Int32), texture, GL.EntryPoints[7]);
			}

			// Token: 0x0600198B RID: 6539 RVA: 0x00048204 File Offset: 0x00046404
			[CLSCompliant(false)]
			public static void AttachObject(int containerObj, int obj)
			{
				calli(System.Void(System.UInt32,System.UInt32), containerObj, obj, GL.EntryPoints[22]);
			}

			// Token: 0x0600198C RID: 6540 RVA: 0x00048218 File Offset: 0x00046418
			[CLSCompliant(false)]
			public static void AttachObject(uint containerObj, uint obj)
			{
				calli(System.Void(System.UInt32,System.UInt32), containerObj, obj, GL.EntryPoints[22]);
			}

			// Token: 0x0600198D RID: 6541 RVA: 0x0004822C File Offset: 0x0004642C
			[CLSCompliant(false)]
			public static void BeginQuery(ArbOcclusionQuery target, int id)
			{
				calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[33]);
			}

			// Token: 0x0600198E RID: 6542 RVA: 0x00048240 File Offset: 0x00046440
			[CLSCompliant(false)]
			public static void BeginQuery(ArbOcclusionQuery target, uint id)
			{
				calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[33]);
			}

			// Token: 0x0600198F RID: 6543 RVA: 0x00048254 File Offset: 0x00046454
			[CLSCompliant(false)]
			public static void BindAttribLocation(int programObj, int index, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				calli(System.Void(System.UInt32,System.UInt32,System.IntPtr), programObj, index, intPtr, GL.EntryPoints[41]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06001990 RID: 6544 RVA: 0x00048280 File Offset: 0x00046480
			[CLSCompliant(false)]
			public static void BindAttribLocation(uint programObj, uint index, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				calli(System.Void(System.UInt32,System.UInt32,System.IntPtr), programObj, index, intPtr, GL.EntryPoints[41]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06001991 RID: 6545 RVA: 0x000482AC File Offset: 0x000464AC
			[CLSCompliant(false)]
			public static void BindBuffer(BufferTargetArb target, int buffer)
			{
				calli(System.Void(System.Int32,System.UInt32), target, buffer, GL.EntryPoints[43]);
			}

			// Token: 0x06001992 RID: 6546 RVA: 0x000482C0 File Offset: 0x000464C0
			[CLSCompliant(false)]
			public static void BindBuffer(BufferTargetArb target, uint buffer)
			{
				calli(System.Void(System.Int32,System.UInt32), target, buffer, GL.EntryPoints[43]);
			}

			// Token: 0x06001993 RID: 6547 RVA: 0x000482D4 File Offset: 0x000464D4
			[CLSCompliant(false)]
			public static void BindProgram(AssemblyProgramTargetArb target, int program)
			{
				calli(System.Void(System.Int32,System.UInt32), target, program, GL.EntryPoints[67]);
			}

			// Token: 0x06001994 RID: 6548 RVA: 0x000482E8 File Offset: 0x000464E8
			[CLSCompliant(false)]
			public static void BindProgram(AssemblyProgramTargetArb target, uint program)
			{
				calli(System.Void(System.Int32,System.UInt32), target, program, GL.EntryPoints[67]);
			}

			// Token: 0x06001995 RID: 6549 RVA: 0x000482FC File Offset: 0x000464FC
			[CLSCompliant(false)]
			[Obsolete("Use BlendEquationMode overload instead")]
			public static void BlendEquation(int buf, ArbDrawBuffersBlend mode)
			{
				calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[109]);
			}

			// Token: 0x06001996 RID: 6550 RVA: 0x00048310 File Offset: 0x00046510
			[CLSCompliant(false)]
			public static void BlendEquation(int buf, BlendEquationMode mode)
			{
				calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[109]);
			}

			// Token: 0x06001997 RID: 6551 RVA: 0x00048324 File Offset: 0x00046524
			[CLSCompliant(false)]
			[Obsolete("Use BlendEquationMode overload instead")]
			public static void BlendEquation(uint buf, ArbDrawBuffersBlend mode)
			{
				calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[109]);
			}

			// Token: 0x06001998 RID: 6552 RVA: 0x00048338 File Offset: 0x00046538
			[CLSCompliant(false)]
			public static void BlendEquation(uint buf, BlendEquationMode mode)
			{
				calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[109]);
			}

			// Token: 0x06001999 RID: 6553 RVA: 0x0004834C File Offset: 0x0004654C
			[CLSCompliant(false)]
			public static void BlendEquationSeparate(int buf, ArbDrawBuffersBlend modeRGB, ArbDrawBuffersBlend modeAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, modeRGB, modeAlpha, GL.EntryPoints[114]);
			}

			// Token: 0x0600199A RID: 6554 RVA: 0x00048360 File Offset: 0x00046560
			[CLSCompliant(false)]
			public static void BlendEquationSeparate(uint buf, ArbDrawBuffersBlend modeRGB, ArbDrawBuffersBlend modeAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, modeRGB, modeAlpha, GL.EntryPoints[114]);
			}

			// Token: 0x0600199B RID: 6555 RVA: 0x00048374 File Offset: 0x00046574
			[CLSCompliant(false)]
			public static void BlendFunc(int buf, ArbDrawBuffersBlend src, ArbDrawBuffersBlend dst)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, src, dst, GL.EntryPoints[118]);
			}

			// Token: 0x0600199C RID: 6556 RVA: 0x00048388 File Offset: 0x00046588
			[CLSCompliant(false)]
			public static void BlendFunc(uint buf, ArbDrawBuffersBlend src, ArbDrawBuffersBlend dst)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, src, dst, GL.EntryPoints[118]);
			}

			// Token: 0x0600199D RID: 6557 RVA: 0x0004839C File Offset: 0x0004659C
			[CLSCompliant(false)]
			public static void BlendFuncSeparate(int buf, ArbDrawBuffersBlend srcRGB, ArbDrawBuffersBlend dstRGB, ArbDrawBuffersBlend srcAlpha, ArbDrawBuffersBlend dstAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), buf, srcRGB, dstRGB, srcAlpha, dstAlpha, GL.EntryPoints[123]);
			}

			// Token: 0x0600199E RID: 6558 RVA: 0x000483B4 File Offset: 0x000465B4
			[CLSCompliant(false)]
			public static void BlendFuncSeparate(uint buf, ArbDrawBuffersBlend srcRGB, ArbDrawBuffersBlend dstRGB, ArbDrawBuffersBlend srcAlpha, ArbDrawBuffersBlend dstAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), buf, srcRGB, dstRGB, srcAlpha, dstAlpha, GL.EntryPoints[123]);
			}

			// Token: 0x0600199F RID: 6559 RVA: 0x000483CC File Offset: 0x000465CC
			public static void BufferData(BufferTargetArb target, IntPtr size, IntPtr data, BufferUsageArb usage)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, data, usage, GL.EntryPoints[131]);
			}

			// Token: 0x060019A0 RID: 6560 RVA: 0x000483E4 File Offset: 0x000465E4
			[CLSCompliant(false)]
			public unsafe static void BufferData<T2>(BufferTargetArb target, IntPtr size, [In] [Out] T2[] data, BufferUsageArb usage) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[131]);
				}
			}

			// Token: 0x060019A1 RID: 6561 RVA: 0x0004841C File Offset: 0x0004661C
			[CLSCompliant(false)]
			public unsafe static void BufferData<T2>(BufferTargetArb target, IntPtr size, [In] [Out] T2[,] data, BufferUsageArb usage) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[131]);
				}
			}

			// Token: 0x060019A2 RID: 6562 RVA: 0x00048458 File Offset: 0x00046658
			[CLSCompliant(false)]
			public unsafe static void BufferData<T2>(BufferTargetArb target, IntPtr size, [In] [Out] T2[,,] data, BufferUsageArb usage) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[131]);
				}
			}

			// Token: 0x060019A3 RID: 6563 RVA: 0x00048494 File Offset: 0x00046694
			public unsafe static void BufferData<T2>(BufferTargetArb target, IntPtr size, [In] [Out] ref T2 data, BufferUsageArb usage) where T2 : struct
			{
				fixed (T2* ptr = &data)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[131]);
				}
			}

			// Token: 0x060019A4 RID: 6564 RVA: 0x000484B8 File Offset: 0x000466B8
			public static void BufferSubData(BufferTargetArb target, IntPtr offset, IntPtr size, IntPtr data)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, data, GL.EntryPoints[135]);
			}

			// Token: 0x060019A5 RID: 6565 RVA: 0x000484D0 File Offset: 0x000466D0
			[CLSCompliant(false)]
			public unsafe static void BufferSubData<T3>(BufferTargetArb target, IntPtr offset, IntPtr size, [In] [Out] T3[] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[135]);
				}
			}

			// Token: 0x060019A6 RID: 6566 RVA: 0x00048508 File Offset: 0x00046708
			[CLSCompliant(false)]
			public unsafe static void BufferSubData<T3>(BufferTargetArb target, IntPtr offset, IntPtr size, [In] [Out] T3[,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[135]);
				}
			}

			// Token: 0x060019A7 RID: 6567 RVA: 0x00048544 File Offset: 0x00046744
			[CLSCompliant(false)]
			public unsafe static void BufferSubData<T3>(BufferTargetArb target, IntPtr offset, IntPtr size, [In] [Out] T3[,,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[135]);
				}
			}

			// Token: 0x060019A8 RID: 6568 RVA: 0x00048580 File Offset: 0x00046780
			public unsafe static void BufferSubData<T3>(BufferTargetArb target, IntPtr offset, IntPtr size, [In] [Out] ref T3 data) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[135]);
				}
			}

			// Token: 0x060019A9 RID: 6569 RVA: 0x000485A4 File Offset: 0x000467A4
			public static void ClampColor(ArbColorBufferFloat target, ArbColorBufferFloat clamp)
			{
				calli(System.Void(System.Int32,System.Int32), target, clamp, GL.EntryPoints[142]);
			}

			// Token: 0x060019AA RID: 6570 RVA: 0x000485B8 File Offset: 0x000467B8
			public static void ClientActiveTexture(TextureUnit texture)
			{
				calli(System.Void(System.Int32), texture, GL.EntryPoints[168]);
			}

			// Token: 0x060019AB RID: 6571 RVA: 0x000485CC File Offset: 0x000467CC
			[CLSCompliant(false)]
			public static void CompileShader(int shaderObj)
			{
				calli(System.Void(System.UInt32), shaderObj, GL.EntryPoints[256]);
			}

			// Token: 0x060019AC RID: 6572 RVA: 0x000485E0 File Offset: 0x000467E0
			[CLSCompliant(false)]
			public static void CompileShader(uint shaderObj)
			{
				calli(System.Void(System.UInt32), shaderObj, GL.EntryPoints[256]);
			}

			// Token: 0x060019AD RID: 6573 RVA: 0x000485F4 File Offset: 0x000467F4
			[CLSCompliant(false)]
			public unsafe static void CompileShaderInclude(int shader, int count, string[] path, int[] length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(path);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[257]);
					BindingsBase.FreeStringArrayPtr(intPtr, path.Length);
				}
			}

			// Token: 0x060019AE RID: 6574 RVA: 0x0004863C File Offset: 0x0004683C
			[CLSCompliant(false)]
			public unsafe static void CompileShaderInclude(int shader, int count, string[] path, ref int length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(path);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = &length)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[257]);
					BindingsBase.FreeStringArrayPtr(intPtr, path.Length);
				}
			}

			// Token: 0x060019AF RID: 6575 RVA: 0x00048670 File Offset: 0x00046870
			[CLSCompliant(false)]
			public unsafe static void CompileShaderInclude(int shader, int count, string[] path, int* length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(path);
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr, length, GL.EntryPoints[257]);
				BindingsBase.FreeStringArrayPtr(intPtr, path.Length);
			}

			// Token: 0x060019B0 RID: 6576 RVA: 0x000486A4 File Offset: 0x000468A4
			[CLSCompliant(false)]
			public unsafe static void CompileShaderInclude(uint shader, int count, string[] path, int[] length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(path);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[257]);
					BindingsBase.FreeStringArrayPtr(intPtr, path.Length);
				}
			}

			// Token: 0x060019B1 RID: 6577 RVA: 0x000486EC File Offset: 0x000468EC
			[CLSCompliant(false)]
			public unsafe static void CompileShaderInclude(uint shader, int count, string[] path, ref int length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(path);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = &length)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[257]);
					BindingsBase.FreeStringArrayPtr(intPtr, path.Length);
				}
			}

			// Token: 0x060019B2 RID: 6578 RVA: 0x00048720 File Offset: 0x00046920
			[CLSCompliant(false)]
			public unsafe static void CompileShaderInclude(uint shader, int count, string[] path, int* length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(path);
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr, length, GL.EntryPoints[257]);
				BindingsBase.FreeStringArrayPtr(intPtr, path.Length);
			}

			// Token: 0x060019B3 RID: 6579 RVA: 0x00048754 File Offset: 0x00046954
			public static void CompressedTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, IntPtr data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, imageSize, data, GL.EntryPoints[265]);
			}

			// Token: 0x060019B4 RID: 6580 RVA: 0x0004877C File Offset: 0x0004697C
			[CLSCompliant(false)]
			public unsafe static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In] [Out] T6[] data) where T6 : struct
			{
				fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[265]);
				}
			}

			// Token: 0x060019B5 RID: 6581 RVA: 0x000487BC File Offset: 0x000469BC
			[CLSCompliant(false)]
			public unsafe static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In] [Out] T6[,] data) where T6 : struct
			{
				fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[265]);
				}
			}

			// Token: 0x060019B6 RID: 6582 RVA: 0x00048800 File Offset: 0x00046A00
			[CLSCompliant(false)]
			public unsafe static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In] [Out] T6[,,] data) where T6 : struct
			{
				fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[265]);
				}
			}

			// Token: 0x060019B7 RID: 6583 RVA: 0x00048844 File Offset: 0x00046A44
			public unsafe static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In] [Out] ref T6 data) where T6 : struct
			{
				fixed (T6* ptr = &data)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[265]);
				}
			}

			// Token: 0x060019B8 RID: 6584 RVA: 0x00048870 File Offset: 0x00046A70
			public static void CompressedTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, data, GL.EntryPoints[267]);
			}

			// Token: 0x060019B9 RID: 6585 RVA: 0x0004889C File Offset: 0x00046A9C
			[CLSCompliant(false)]
			public unsafe static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[] data) where T7 : struct
			{
				fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[267]);
				}
			}

			// Token: 0x060019BA RID: 6586 RVA: 0x000488DC File Offset: 0x00046ADC
			[CLSCompliant(false)]
			public unsafe static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[,] data) where T7 : struct
			{
				fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[267]);
				}
			}

			// Token: 0x060019BB RID: 6587 RVA: 0x00048920 File Offset: 0x00046B20
			[CLSCompliant(false)]
			public unsafe static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[,,] data) where T7 : struct
			{
				fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[267]);
				}
			}

			// Token: 0x060019BC RID: 6588 RVA: 0x00048968 File Offset: 0x00046B68
			public unsafe static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In] [Out] ref T7 data) where T7 : struct
			{
				fixed (T7* ptr = &data)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[267]);
				}
			}

			// Token: 0x060019BD RID: 6589 RVA: 0x00048994 File Offset: 0x00046B94
			public static void CompressedTexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, data, GL.EntryPoints[269]);
			}

			// Token: 0x060019BE RID: 6590 RVA: 0x000489C0 File Offset: 0x00046BC0
			[CLSCompliant(false)]
			public unsafe static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[] data) where T8 : struct
			{
				fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[269]);
				}
			}

			// Token: 0x060019BF RID: 6591 RVA: 0x00048A04 File Offset: 0x00046C04
			[CLSCompliant(false)]
			public unsafe static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[,] data) where T8 : struct
			{
				fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[269]);
				}
			}

			// Token: 0x060019C0 RID: 6592 RVA: 0x00048A4C File Offset: 0x00046C4C
			[CLSCompliant(false)]
			public unsafe static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[,,] data) where T8 : struct
			{
				fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[269]);
				}
			}

			// Token: 0x060019C1 RID: 6593 RVA: 0x00048A94 File Offset: 0x00046C94
			public unsafe static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] ref T8 data) where T8 : struct
			{
				fixed (T8* ptr = &data)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[269]);
				}
			}

			// Token: 0x060019C2 RID: 6594 RVA: 0x00048AC4 File Offset: 0x00046CC4
			public static void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, imageSize, data, GL.EntryPoints[271]);
			}

			// Token: 0x060019C3 RID: 6595 RVA: 0x00048AEC File Offset: 0x00046CEC
			[CLSCompliant(false)]
			public unsafe static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T6[] data) where T6 : struct
			{
				fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[271]);
				}
			}

			// Token: 0x060019C4 RID: 6596 RVA: 0x00048B2C File Offset: 0x00046D2C
			[CLSCompliant(false)]
			public unsafe static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T6[,] data) where T6 : struct
			{
				fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[271]);
				}
			}

			// Token: 0x060019C5 RID: 6597 RVA: 0x00048B70 File Offset: 0x00046D70
			[CLSCompliant(false)]
			public unsafe static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T6[,,] data) where T6 : struct
			{
				fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[271]);
				}
			}

			// Token: 0x060019C6 RID: 6598 RVA: 0x00048BB4 File Offset: 0x00046DB4
			public unsafe static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] ref T6 data) where T6 : struct
			{
				fixed (T6* ptr = &data)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[271]);
				}
			}

			// Token: 0x060019C7 RID: 6599 RVA: 0x00048BE0 File Offset: 0x00046DE0
			public static void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, data, GL.EntryPoints[273]);
			}

			// Token: 0x060019C8 RID: 6600 RVA: 0x00048C0C File Offset: 0x00046E0C
			[CLSCompliant(false)]
			public unsafe static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T8[] data) where T8 : struct
			{
				fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[273]);
				}
			}

			// Token: 0x060019C9 RID: 6601 RVA: 0x00048C50 File Offset: 0x00046E50
			[CLSCompliant(false)]
			public unsafe static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T8[,] data) where T8 : struct
			{
				fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[273]);
				}
			}

			// Token: 0x060019CA RID: 6602 RVA: 0x00048C98 File Offset: 0x00046E98
			[CLSCompliant(false)]
			public unsafe static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T8[,,] data) where T8 : struct
			{
				fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[273]);
				}
			}

			// Token: 0x060019CB RID: 6603 RVA: 0x00048CE0 File Offset: 0x00046EE0
			public unsafe static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] ref T8 data) where T8 : struct
			{
				fixed (T8* ptr = &data)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[273]);
				}
			}

			// Token: 0x060019CC RID: 6604 RVA: 0x00048D10 File Offset: 0x00046F10
			public static void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data, GL.EntryPoints[275]);
			}

			// Token: 0x060019CD RID: 6605 RVA: 0x00048D40 File Offset: 0x00046F40
			[CLSCompliant(false)]
			public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T10[] data) where T10 : struct
			{
				fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[275]);
				}
			}

			// Token: 0x060019CE RID: 6606 RVA: 0x00048D88 File Offset: 0x00046F88
			[CLSCompliant(false)]
			public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T10[,] data) where T10 : struct
			{
				fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[275]);
				}
			}

			// Token: 0x060019CF RID: 6607 RVA: 0x00048DD4 File Offset: 0x00046FD4
			[CLSCompliant(false)]
			public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T10[,,] data) where T10 : struct
			{
				fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[275]);
				}
			}

			// Token: 0x060019D0 RID: 6608 RVA: 0x00048E20 File Offset: 0x00047020
			public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] ref T10 data) where T10 : struct
			{
				fixed (T10* ptr = &data)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[275]);
				}
			}

			// Token: 0x060019D1 RID: 6609 RVA: 0x00048E54 File Offset: 0x00047054
			public static int CreateProgramObject()
			{
				return calli(System.Int32(), GL.EntryPoints[335]);
			}

			// Token: 0x060019D2 RID: 6610 RVA: 0x00048E68 File Offset: 0x00047068
			public static int CreateShaderObject(ArbShaderObjects shaderType)
			{
				return calli(System.Int32(System.Int32), shaderType, GL.EntryPoints[337]);
			}

			// Token: 0x060019D3 RID: 6611 RVA: 0x00048E7C File Offset: 0x0004707C
			[CLSCompliant(false)]
			public unsafe static IntPtr CreateSyncFromCLevent([Out] IntPtr[] context, [Out] IntPtr[] @event, int flags)
			{
				fixed (IntPtr* ptr = ref (context != null && context.Length != 0) ? ref context[0] : ref *null)
				{
					IntPtr* ptr2 = ptr;
					fixed (IntPtr* ptr3 = ref (@event != null && @event.Length != 0) ? ref @event[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr*,System.IntPtr*,System.UInt32), ptr2, ptr3, flags, GL.EntryPoints[341]);
					}
				}
			}

			// Token: 0x060019D4 RID: 6612 RVA: 0x00048EC8 File Offset: 0x000470C8
			[CLSCompliant(false)]
			public unsafe static IntPtr CreateSyncFromCLevent([Out] IntPtr[] context, [Out] IntPtr[] @event, uint flags)
			{
				fixed (IntPtr* ptr = ref (context != null && context.Length != 0) ? ref context[0] : ref *null)
				{
					IntPtr* ptr2 = ptr;
					fixed (IntPtr* ptr3 = ref (@event != null && @event.Length != 0) ? ref @event[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr*,System.IntPtr*,System.UInt32), ptr2, ptr3, flags, GL.EntryPoints[341]);
					}
				}
			}

			// Token: 0x060019D5 RID: 6613 RVA: 0x00048F14 File Offset: 0x00047114
			[CLSCompliant(false)]
			public unsafe static IntPtr CreateSyncFromCLevent(out IntPtr context, out IntPtr @event, int flags)
			{
				fixed (IntPtr* ptr = &context)
				{
					IntPtr* ptr2 = ptr;
					fixed (IntPtr* ptr3 = &@event)
					{
						return calli(System.IntPtr(System.IntPtr*,System.IntPtr*,System.UInt32), ptr2, ptr3, flags, GL.EntryPoints[341]);
					}
				}
			}

			// Token: 0x060019D6 RID: 6614 RVA: 0x00048F3C File Offset: 0x0004713C
			[CLSCompliant(false)]
			public unsafe static IntPtr CreateSyncFromCLevent(out IntPtr context, out IntPtr @event, uint flags)
			{
				fixed (IntPtr* ptr = &context)
				{
					IntPtr* ptr2 = ptr;
					fixed (IntPtr* ptr3 = &@event)
					{
						return calli(System.IntPtr(System.IntPtr*,System.IntPtr*,System.UInt32), ptr2, ptr3, flags, GL.EntryPoints[341]);
					}
				}
			}

			// Token: 0x060019D7 RID: 6615 RVA: 0x00048F64 File Offset: 0x00047164
			[CLSCompliant(false)]
			public unsafe static IntPtr CreateSyncFromCLevent([Out] IntPtr* context, [Out] IntPtr* @event, int flags)
			{
				return calli(System.IntPtr(System.IntPtr*,System.IntPtr*,System.UInt32), context, @event, flags, GL.EntryPoints[341]);
			}

			// Token: 0x060019D8 RID: 6616 RVA: 0x00048F7C File Offset: 0x0004717C
			[CLSCompliant(false)]
			public unsafe static IntPtr CreateSyncFromCLevent([Out] IntPtr* context, [Out] IntPtr* @event, uint flags)
			{
				return calli(System.IntPtr(System.IntPtr*,System.IntPtr*,System.UInt32), context, @event, flags, GL.EntryPoints[341]);
			}

			// Token: 0x060019D9 RID: 6617 RVA: 0x00048F94 File Offset: 0x00047194
			public static void CurrentPaletteMatrix(int index)
			{
				calli(System.Void(System.Int32), index, GL.EntryPoints[345]);
			}

			// Token: 0x060019DA RID: 6618 RVA: 0x00048FA8 File Offset: 0x000471A8
			public static void DebugMessageCallback(DebugProcArb callback, IntPtr userParam)
			{
				calli(System.Void(OpenTK.Graphics.OpenGL.DebugProcArb,System.IntPtr), callback, userParam, GL.EntryPoints[348]);
			}

			// Token: 0x060019DB RID: 6619 RVA: 0x00048FBC File Offset: 0x000471BC
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcArb callback, [In] [Out] T1[] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL.DebugProcArb,System.IntPtr), callback, ptr, GL.EntryPoints[348]);
				}
			}

			// Token: 0x060019DC RID: 6620 RVA: 0x00048FF0 File Offset: 0x000471F0
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcArb callback, [In] [Out] T1[,] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL.DebugProcArb,System.IntPtr), callback, ptr, GL.EntryPoints[348]);
				}
			}

			// Token: 0x060019DD RID: 6621 RVA: 0x00049028 File Offset: 0x00047228
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcArb callback, [In] [Out] T1[,,] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0, 0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL.DebugProcArb,System.IntPtr), callback, ptr, GL.EntryPoints[348]);
				}
			}

			// Token: 0x060019DE RID: 6622 RVA: 0x00049064 File Offset: 0x00047264
			public unsafe static void DebugMessageCallback<T1>(DebugProcArb callback, [In] [Out] ref T1 userParam) where T1 : struct
			{
				fixed (T1* ptr = &userParam)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL.DebugProcArb,System.IntPtr), callback, ptr, GL.EntryPoints[348]);
				}
			}

			// Token: 0x060019DF RID: 6623 RVA: 0x00049088 File Offset: 0x00047288
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(ArbDebugOutput source, ArbDebugOutput type, ArbDebugOutput severity, int count, int[] ids, bool enabled)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[351]);
				}
			}

			// Token: 0x060019E0 RID: 6624 RVA: 0x000490C4 File Offset: 0x000472C4
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(ArbDebugOutput source, ArbDebugOutput type, ArbDebugOutput severity, int count, ref int ids, bool enabled)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[351]);
				}
			}

			// Token: 0x060019E1 RID: 6625 RVA: 0x000490EC File Offset: 0x000472EC
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(ArbDebugOutput source, ArbDebugOutput type, ArbDebugOutput severity, int count, int* ids, bool enabled)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[351]);
			}

			// Token: 0x060019E2 RID: 6626 RVA: 0x00049108 File Offset: 0x00047308
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(ArbDebugOutput source, ArbDebugOutput type, ArbDebugOutput severity, int count, uint[] ids, bool enabled)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[351]);
				}
			}

			// Token: 0x060019E3 RID: 6627 RVA: 0x00049144 File Offset: 0x00047344
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(ArbDebugOutput source, ArbDebugOutput type, ArbDebugOutput severity, int count, ref uint ids, bool enabled)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[351]);
				}
			}

			// Token: 0x060019E4 RID: 6628 RVA: 0x0004916C File Offset: 0x0004736C
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(ArbDebugOutput source, ArbDebugOutput type, ArbDebugOutput severity, int count, uint* ids, bool enabled)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[351]);
			}

			// Token: 0x060019E5 RID: 6629 RVA: 0x00049188 File Offset: 0x00047388
			[CLSCompliant(false)]
			public static void DebugMessageInsert(ArbDebugOutput source, ArbDebugOutput type, int id, ArbDebugOutput severity, int length, string buf)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[356]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x060019E6 RID: 6630 RVA: 0x000491BC File Offset: 0x000473BC
			[CLSCompliant(false)]
			public static void DebugMessageInsert(ArbDebugOutput source, ArbDebugOutput type, uint id, ArbDebugOutput severity, int length, string buf)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[356]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x060019E7 RID: 6631 RVA: 0x000491F0 File Offset: 0x000473F0
			[CLSCompliant(false)]
			public static void DeleteBuffer(int buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref buffers, GL.EntryPoints[363]);
			}

			// Token: 0x060019E8 RID: 6632 RVA: 0x00049208 File Offset: 0x00047408
			[CLSCompliant(false)]
			public static void DeleteBuffer(uint buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref buffers, GL.EntryPoints[363]);
			}

			// Token: 0x060019E9 RID: 6633 RVA: 0x00049220 File Offset: 0x00047420
			[CLSCompliant(false)]
			public unsafe static void DeleteBuffers(int n, int[] buffers)
			{
				fixed (int* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[363]);
				}
			}

			// Token: 0x060019EA RID: 6634 RVA: 0x00049254 File Offset: 0x00047454
			[CLSCompliant(false)]
			public unsafe static void DeleteBuffers(int n, ref int buffers)
			{
				fixed (int* ptr = &buffers)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[363]);
				}
			}

			// Token: 0x060019EB RID: 6635 RVA: 0x00049278 File Offset: 0x00047478
			[CLSCompliant(false)]
			public unsafe static void DeleteBuffers(int n, int* buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, buffers, GL.EntryPoints[363]);
			}

			// Token: 0x060019EC RID: 6636 RVA: 0x0004928C File Offset: 0x0004748C
			[CLSCompliant(false)]
			public unsafe static void DeleteBuffers(int n, uint[] buffers)
			{
				fixed (uint* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[363]);
				}
			}

			// Token: 0x060019ED RID: 6637 RVA: 0x000492C0 File Offset: 0x000474C0
			[CLSCompliant(false)]
			public unsafe static void DeleteBuffers(int n, ref uint buffers)
			{
				fixed (uint* ptr = &buffers)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[363]);
				}
			}

			// Token: 0x060019EE RID: 6638 RVA: 0x000492E4 File Offset: 0x000474E4
			[CLSCompliant(false)]
			public unsafe static void DeleteBuffers(int n, uint* buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, buffers, GL.EntryPoints[363]);
			}

			// Token: 0x060019EF RID: 6639 RVA: 0x000492F8 File Offset: 0x000474F8
			public static void DeleteNamedString(int namelen, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				calli(System.Void(System.Int32,System.IntPtr), namelen, intPtr, GL.EntryPoints[370]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x060019F0 RID: 6640 RVA: 0x00049324 File Offset: 0x00047524
			[CLSCompliant(false)]
			public static void DeleteObject(int obj)
			{
				calli(System.Void(System.UInt32), obj, GL.EntryPoints[372]);
			}

			// Token: 0x060019F1 RID: 6641 RVA: 0x00049338 File Offset: 0x00047538
			[CLSCompliant(false)]
			public static void DeleteObject(uint obj)
			{
				calli(System.Void(System.UInt32), obj, GL.EntryPoints[372]);
			}

			// Token: 0x060019F2 RID: 6642 RVA: 0x0004934C File Offset: 0x0004754C
			[CLSCompliant(false)]
			public static void DeleteProgram(int programs)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref programs, GL.EntryPoints[380]);
			}

			// Token: 0x060019F3 RID: 6643 RVA: 0x00049364 File Offset: 0x00047564
			[CLSCompliant(false)]
			public static void DeleteProgram(uint programs)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref programs, GL.EntryPoints[380]);
			}

			// Token: 0x060019F4 RID: 6644 RVA: 0x0004937C File Offset: 0x0004757C
			[CLSCompliant(false)]
			public unsafe static void DeleteProgram(int n, int[] programs)
			{
				fixed (int* ptr = ref (programs != null && programs.Length != 0) ? ref programs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[380]);
				}
			}

			// Token: 0x060019F5 RID: 6645 RVA: 0x000493B0 File Offset: 0x000475B0
			[CLSCompliant(false)]
			public unsafe static void DeleteProgram(int n, ref int programs)
			{
				fixed (int* ptr = &programs)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[380]);
				}
			}

			// Token: 0x060019F6 RID: 6646 RVA: 0x000493D4 File Offset: 0x000475D4
			[CLSCompliant(false)]
			public unsafe static void DeleteProgram(int n, int* programs)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, programs, GL.EntryPoints[380]);
			}

			// Token: 0x060019F7 RID: 6647 RVA: 0x000493E8 File Offset: 0x000475E8
			[CLSCompliant(false)]
			public unsafe static void DeleteProgram(int n, uint[] programs)
			{
				fixed (uint* ptr = ref (programs != null && programs.Length != 0) ? ref programs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[380]);
				}
			}

			// Token: 0x060019F8 RID: 6648 RVA: 0x0004941C File Offset: 0x0004761C
			[CLSCompliant(false)]
			public unsafe static void DeleteProgram(int n, ref uint programs)
			{
				fixed (uint* ptr = &programs)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[380]);
				}
			}

			// Token: 0x060019F9 RID: 6649 RVA: 0x00049440 File Offset: 0x00047640
			[CLSCompliant(false)]
			public unsafe static void DeleteProgram(int n, uint* programs)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, programs, GL.EntryPoints[380]);
			}

			// Token: 0x060019FA RID: 6650 RVA: 0x00049454 File Offset: 0x00047654
			[CLSCompliant(false)]
			public static void DeleteQuery(int ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[383]);
			}

			// Token: 0x060019FB RID: 6651 RVA: 0x0004946C File Offset: 0x0004766C
			[CLSCompliant(false)]
			public static void DeleteQuery(uint ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[383]);
			}

			// Token: 0x060019FC RID: 6652 RVA: 0x00049484 File Offset: 0x00047684
			[CLSCompliant(false)]
			public unsafe static void DeleteQueries(int n, int[] ids)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[383]);
				}
			}

			// Token: 0x060019FD RID: 6653 RVA: 0x000494B8 File Offset: 0x000476B8
			[CLSCompliant(false)]
			public unsafe static void DeleteQueries(int n, ref int ids)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[383]);
				}
			}

			// Token: 0x060019FE RID: 6654 RVA: 0x000494DC File Offset: 0x000476DC
			[CLSCompliant(false)]
			public unsafe static void DeleteQueries(int n, int* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[383]);
			}

			// Token: 0x060019FF RID: 6655 RVA: 0x000494F0 File Offset: 0x000476F0
			[CLSCompliant(false)]
			public unsafe static void DeleteQueries(int n, uint[] ids)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[383]);
				}
			}

			// Token: 0x06001A00 RID: 6656 RVA: 0x00049524 File Offset: 0x00047724
			[CLSCompliant(false)]
			public unsafe static void DeleteQueries(int n, ref uint ids)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[383]);
				}
			}

			// Token: 0x06001A01 RID: 6657 RVA: 0x00049548 File Offset: 0x00047748
			[CLSCompliant(false)]
			public unsafe static void DeleteQueries(int n, uint* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[383]);
			}

			// Token: 0x06001A02 RID: 6658 RVA: 0x0004955C File Offset: 0x0004775C
			[CLSCompliant(false)]
			public static void DetachObject(int containerObj, int attachedObj)
			{
				calli(System.Void(System.UInt32,System.UInt32), containerObj, attachedObj, GL.EntryPoints[407]);
			}

			// Token: 0x06001A03 RID: 6659 RVA: 0x00049570 File Offset: 0x00047770
			[CLSCompliant(false)]
			public static void DetachObject(uint containerObj, uint attachedObj)
			{
				calli(System.Void(System.UInt32,System.UInt32), containerObj, attachedObj, GL.EntryPoints[407]);
			}

			// Token: 0x06001A04 RID: 6660 RVA: 0x00049584 File Offset: 0x00047784
			[CLSCompliant(false)]
			public static void DisableVertexAttribArray(int index)
			{
				calli(System.Void(System.UInt32), index, GL.EntryPoints[421]);
			}

			// Token: 0x06001A05 RID: 6661 RVA: 0x00049598 File Offset: 0x00047798
			[CLSCompliant(false)]
			public static void DisableVertexAttribArray(uint index)
			{
				calli(System.Void(System.UInt32), index, GL.EntryPoints[421]);
			}

			// Token: 0x06001A06 RID: 6662 RVA: 0x000495AC File Offset: 0x000477AC
			[CLSCompliant(false)]
			public static void DispatchComputeGroupSize(int num_groups_x, int num_groups_y, int num_groups_z, int group_size_x, int group_size_y, int group_size_z)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z, GL.EntryPoints[423]);
			}

			// Token: 0x06001A07 RID: 6663 RVA: 0x000495C8 File Offset: 0x000477C8
			[CLSCompliant(false)]
			public static void DispatchComputeGroupSize(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z, GL.EntryPoints[423]);
			}

			// Token: 0x06001A08 RID: 6664 RVA: 0x000495E4 File Offset: 0x000477E4
			[Obsolete("Use PrimitiveType overload instead")]
			public static void DrawArraysInstanced(BeginMode mode, int first, int count, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, first, count, primcount, GL.EntryPoints[429]);
			}

			// Token: 0x06001A09 RID: 6665 RVA: 0x000495FC File Offset: 0x000477FC
			public static void DrawArraysInstanced(PrimitiveType mode, int first, int count, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, first, count, primcount, GL.EntryPoints[429]);
			}

			// Token: 0x06001A0A RID: 6666 RVA: 0x00049614 File Offset: 0x00047814
			[CLSCompliant(false)]
			public unsafe static void DrawBuffers(int n, ArbDrawBuffers[] bufs)
			{
				fixed (ArbDrawBuffers* ptr = ref (bufs != null && bufs.Length != 0) ? ref bufs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[434]);
				}
			}

			// Token: 0x06001A0B RID: 6667 RVA: 0x00049648 File Offset: 0x00047848
			[CLSCompliant(false)]
			public unsafe static void DrawBuffers(int n, ref ArbDrawBuffers bufs)
			{
				fixed (ArbDrawBuffers* ptr = &bufs)
				{
					calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[434]);
				}
			}

			// Token: 0x06001A0C RID: 6668 RVA: 0x0004966C File Offset: 0x0004786C
			[CLSCompliant(false)]
			public unsafe static void DrawBuffers(int n, ArbDrawBuffers* bufs)
			{
				calli(System.Void(System.Int32,System.Int32*), n, bufs, GL.EntryPoints[434]);
			}

			// Token: 0x06001A0D RID: 6669 RVA: 0x00049680 File Offset: 0x00047880
			[Obsolete("Use PrimitiveType overload instead")]
			public static void DrawElementsInstanced(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, primcount, GL.EntryPoints[442]);
			}

			// Token: 0x06001A0E RID: 6670 RVA: 0x00049698 File Offset: 0x00047898
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[442]);
				}
			}

			// Token: 0x06001A0F RID: 6671 RVA: 0x000496D0 File Offset: 0x000478D0
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[442]);
				}
			}

			// Token: 0x06001A10 RID: 6672 RVA: 0x0004970C File Offset: 0x0004790C
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[442]);
				}
			}

			// Token: 0x06001A11 RID: 6673 RVA: 0x0004974C File Offset: 0x0004794C
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[442]);
				}
			}

			// Token: 0x06001A12 RID: 6674 RVA: 0x00049774 File Offset: 0x00047974
			public static void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, primcount, GL.EntryPoints[442]);
			}

			// Token: 0x06001A13 RID: 6675 RVA: 0x0004978C File Offset: 0x0004798C
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[442]);
				}
			}

			// Token: 0x06001A14 RID: 6676 RVA: 0x000497C4 File Offset: 0x000479C4
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[442]);
				}
			}

			// Token: 0x06001A15 RID: 6677 RVA: 0x00049800 File Offset: 0x00047A00
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[442]);
				}
			}

			// Token: 0x06001A16 RID: 6678 RVA: 0x00049840 File Offset: 0x00047A40
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[442]);
				}
			}

			// Token: 0x06001A17 RID: 6679 RVA: 0x00049868 File Offset: 0x00047A68
			[CLSCompliant(false)]
			public static void EnableVertexAttribArray(int index)
			{
				calli(System.Void(System.UInt32), index, GL.EntryPoints[479]);
			}

			// Token: 0x06001A18 RID: 6680 RVA: 0x0004987C File Offset: 0x00047A7C
			[CLSCompliant(false)]
			public static void EnableVertexAttribArray(uint index)
			{
				calli(System.Void(System.UInt32), index, GL.EntryPoints[479]);
			}

			// Token: 0x06001A19 RID: 6681 RVA: 0x00049890 File Offset: 0x00047A90
			public static void EndQuery(ArbOcclusionQuery target)
			{
				calli(System.Void(System.Int32), target, GL.EntryPoints[490]);
			}

			// Token: 0x06001A1A RID: 6682 RVA: 0x000498A4 File Offset: 0x00047AA4
			[CLSCompliant(false)]
			public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, texture, level, GL.EntryPoints[582]);
			}

			// Token: 0x06001A1B RID: 6683 RVA: 0x000498BC File Offset: 0x00047ABC
			[CLSCompliant(false)]
			public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, texture, level, GL.EntryPoints[582]);
			}

			// Token: 0x06001A1C RID: 6684 RVA: 0x000498D4 File Offset: 0x00047AD4
			[CLSCompliant(false)]
			public static void FramebufferTextureFace(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level, TextureTarget face)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, texture, level, face, GL.EntryPoints[584]);
			}

			// Token: 0x06001A1D RID: 6685 RVA: 0x000498EC File Offset: 0x00047AEC
			[CLSCompliant(false)]
			public static void FramebufferTextureFace(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, TextureTarget face)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, texture, level, face, GL.EntryPoints[584]);
			}

			// Token: 0x06001A1E RID: 6686 RVA: 0x00049904 File Offset: 0x00047B04
			[CLSCompliant(false)]
			public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level, int layer)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, texture, level, layer, GL.EntryPoints[587]);
			}

			// Token: 0x06001A1F RID: 6687 RVA: 0x0004991C File Offset: 0x00047B1C
			[CLSCompliant(false)]
			public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, texture, level, layer, GL.EntryPoints[587]);
			}

			// Token: 0x06001A20 RID: 6688 RVA: 0x00049934 File Offset: 0x00047B34
			[CLSCompliant(false)]
			public static int GenBuffer()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[598]);
				return result;
			}

			// Token: 0x06001A21 RID: 6689 RVA: 0x00049958 File Offset: 0x00047B58
			[CLSCompliant(false)]
			public unsafe static void GenBuffers(int n, [Out] int[] buffers)
			{
				fixed (int* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[598]);
				}
			}

			// Token: 0x06001A22 RID: 6690 RVA: 0x0004998C File Offset: 0x00047B8C
			[CLSCompliant(false)]
			public unsafe static void GenBuffers(int n, out int buffers)
			{
				fixed (int* ptr = &buffers)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[598]);
				}
			}

			// Token: 0x06001A23 RID: 6691 RVA: 0x000499B0 File Offset: 0x00047BB0
			[CLSCompliant(false)]
			public unsafe static void GenBuffers(int n, [Out] int* buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, buffers, GL.EntryPoints[598]);
			}

			// Token: 0x06001A24 RID: 6692 RVA: 0x000499C4 File Offset: 0x00047BC4
			[CLSCompliant(false)]
			public unsafe static void GenBuffers(int n, [Out] uint[] buffers)
			{
				fixed (uint* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[598]);
				}
			}

			// Token: 0x06001A25 RID: 6693 RVA: 0x000499F8 File Offset: 0x00047BF8
			[CLSCompliant(false)]
			public unsafe static void GenBuffers(int n, out uint buffers)
			{
				fixed (uint* ptr = &buffers)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[598]);
				}
			}

			// Token: 0x06001A26 RID: 6694 RVA: 0x00049A1C File Offset: 0x00047C1C
			[CLSCompliant(false)]
			public unsafe static void GenBuffers(int n, [Out] uint* buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, buffers, GL.EntryPoints[598]);
			}

			// Token: 0x06001A27 RID: 6695 RVA: 0x00049A30 File Offset: 0x00047C30
			[CLSCompliant(false)]
			public static int GenProgram()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[615]);
				return result;
			}

			// Token: 0x06001A28 RID: 6696 RVA: 0x00049A54 File Offset: 0x00047C54
			[CLSCompliant(false)]
			public unsafe static void GenProgram(int n, [Out] int[] programs)
			{
				fixed (int* ptr = ref (programs != null && programs.Length != 0) ? ref programs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[615]);
				}
			}

			// Token: 0x06001A29 RID: 6697 RVA: 0x00049A88 File Offset: 0x00047C88
			[CLSCompliant(false)]
			public unsafe static void GenProgram(int n, out int programs)
			{
				fixed (int* ptr = &programs)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[615]);
				}
			}

			// Token: 0x06001A2A RID: 6698 RVA: 0x00049AAC File Offset: 0x00047CAC
			[CLSCompliant(false)]
			public unsafe static void GenProgram(int n, [Out] int* programs)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, programs, GL.EntryPoints[615]);
			}

			// Token: 0x06001A2B RID: 6699 RVA: 0x00049AC0 File Offset: 0x00047CC0
			[CLSCompliant(false)]
			public unsafe static void GenProgram(int n, [Out] uint[] programs)
			{
				fixed (uint* ptr = ref (programs != null && programs.Length != 0) ? ref programs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[615]);
				}
			}

			// Token: 0x06001A2C RID: 6700 RVA: 0x00049AF4 File Offset: 0x00047CF4
			[CLSCompliant(false)]
			public unsafe static void GenProgram(int n, out uint programs)
			{
				fixed (uint* ptr = &programs)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[615]);
				}
			}

			// Token: 0x06001A2D RID: 6701 RVA: 0x00049B18 File Offset: 0x00047D18
			[CLSCompliant(false)]
			public unsafe static void GenProgram(int n, [Out] uint* programs)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, programs, GL.EntryPoints[615]);
			}

			// Token: 0x06001A2E RID: 6702 RVA: 0x00049B2C File Offset: 0x00047D2C
			[CLSCompliant(false)]
			public static int GenQuery()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[618]);
				return result;
			}

			// Token: 0x06001A2F RID: 6703 RVA: 0x00049B50 File Offset: 0x00047D50
			[CLSCompliant(false)]
			public unsafe static void GenQueries(int n, [Out] int[] ids)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[618]);
				}
			}

			// Token: 0x06001A30 RID: 6704 RVA: 0x00049B84 File Offset: 0x00047D84
			[CLSCompliant(false)]
			public unsafe static void GenQueries(int n, out int ids)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[618]);
				}
			}

			// Token: 0x06001A31 RID: 6705 RVA: 0x00049BA8 File Offset: 0x00047DA8
			[CLSCompliant(false)]
			public unsafe static void GenQueries(int n, [Out] int* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[618]);
			}

			// Token: 0x06001A32 RID: 6706 RVA: 0x00049BBC File Offset: 0x00047DBC
			[CLSCompliant(false)]
			public unsafe static void GenQueries(int n, [Out] uint[] ids)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[618]);
				}
			}

			// Token: 0x06001A33 RID: 6707 RVA: 0x00049BF0 File Offset: 0x00047DF0
			[CLSCompliant(false)]
			public unsafe static void GenQueries(int n, out uint ids)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[618]);
				}
			}

			// Token: 0x06001A34 RID: 6708 RVA: 0x00049C14 File Offset: 0x00047E14
			[CLSCompliant(false)]
			public unsafe static void GenQueries(int n, [Out] uint* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[618]);
			}

			// Token: 0x06001A35 RID: 6709 RVA: 0x00049C28 File Offset: 0x00047E28
			[CLSCompliant(false)]
			public unsafe static void GetActiveAttrib(int programObj, int index, int maxLength, out int length, out int size, out ArbVertexShader type, [Out] StringBuilder name)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &size)
					{
						int* ptr4 = ptr3;
						fixed (ArbVertexShader* ptr5 = &type)
						{
							ArbVertexShader* ptr6 = ptr5;
							IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
							calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), programObj, index, maxLength, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[632]);
							BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
							Marshal.FreeHGlobal(intPtr);
						}
					}
				}
			}

			// Token: 0x06001A36 RID: 6710 RVA: 0x00049C74 File Offset: 0x00047E74
			[CLSCompliant(false)]
			public unsafe static void GetActiveAttrib(int programObj, int index, int maxLength, [Out] int* length, [Out] int* size, [Out] ArbVertexShader* type, [Out] StringBuilder name)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), programObj, index, maxLength, length, size, type, intPtr, GL.EntryPoints[632]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06001A37 RID: 6711 RVA: 0x00049CB8 File Offset: 0x00047EB8
			[CLSCompliant(false)]
			public unsafe static void GetActiveAttrib(uint programObj, uint index, int maxLength, out int length, out int size, out ArbVertexShader type, [Out] StringBuilder name)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &size)
					{
						int* ptr4 = ptr3;
						fixed (ArbVertexShader* ptr5 = &type)
						{
							ArbVertexShader* ptr6 = ptr5;
							IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
							calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), programObj, index, maxLength, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[632]);
							BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
							Marshal.FreeHGlobal(intPtr);
						}
					}
				}
			}

			// Token: 0x06001A38 RID: 6712 RVA: 0x00049D04 File Offset: 0x00047F04
			[CLSCompliant(false)]
			public unsafe static void GetActiveAttrib(uint programObj, uint index, int maxLength, [Out] int* length, [Out] int* size, [Out] ArbVertexShader* type, [Out] StringBuilder name)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), programObj, index, maxLength, length, size, type, intPtr, GL.EntryPoints[632]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06001A39 RID: 6713 RVA: 0x00049D48 File Offset: 0x00047F48
			[CLSCompliant(false)]
			public unsafe static void GetActiveUniform(int programObj, int index, int maxLength, out int length, out int size, out ArbShaderObjects type, [Out] StringBuilder name)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &size)
					{
						int* ptr4 = ptr3;
						fixed (ArbShaderObjects* ptr5 = &type)
						{
							ArbShaderObjects* ptr6 = ptr5;
							IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
							calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), programObj, index, maxLength, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[637]);
							BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
							Marshal.FreeHGlobal(intPtr);
						}
					}
				}
			}

			// Token: 0x06001A3A RID: 6714 RVA: 0x00049D94 File Offset: 0x00047F94
			[CLSCompliant(false)]
			public unsafe static void GetActiveUniform(int programObj, int index, int maxLength, [Out] int* length, [Out] int* size, [Out] ArbShaderObjects* type, [Out] StringBuilder name)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), programObj, index, maxLength, length, size, type, intPtr, GL.EntryPoints[637]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06001A3B RID: 6715 RVA: 0x00049DD8 File Offset: 0x00047FD8
			[CLSCompliant(false)]
			public unsafe static void GetActiveUniform(uint programObj, uint index, int maxLength, out int length, out int size, out ArbShaderObjects type, [Out] StringBuilder name)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &size)
					{
						int* ptr4 = ptr3;
						fixed (ArbShaderObjects* ptr5 = &type)
						{
							ArbShaderObjects* ptr6 = ptr5;
							IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
							calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), programObj, index, maxLength, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[637]);
							BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
							Marshal.FreeHGlobal(intPtr);
						}
					}
				}
			}

			// Token: 0x06001A3C RID: 6716 RVA: 0x00049E24 File Offset: 0x00048024
			[CLSCompliant(false)]
			public unsafe static void GetActiveUniform(uint programObj, uint index, int maxLength, [Out] int* length, [Out] int* size, [Out] ArbShaderObjects* type, [Out] StringBuilder name)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), programObj, index, maxLength, length, size, type, intPtr, GL.EntryPoints[637]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06001A3D RID: 6717 RVA: 0x00049E68 File Offset: 0x00048068
			[CLSCompliant(false)]
			public unsafe static void GetAttachedObjects(int containerObj, int maxCount, out int count, [Out] int[] obj)
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (obj != null && obj.Length != 0) ? ref obj[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), containerObj, maxCount, ptr2, ptr3, GL.EntryPoints[645]);
					}
				}
			}

			// Token: 0x06001A3E RID: 6718 RVA: 0x00049EA4 File Offset: 0x000480A4
			[CLSCompliant(false)]
			public unsafe static void GetAttachedObjects(int containerObj, int maxCount, out int count, out int obj)
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &obj)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), containerObj, maxCount, ptr2, ptr3, GL.EntryPoints[645]);
					}
				}
			}

			// Token: 0x06001A3F RID: 6719 RVA: 0x00049ECC File Offset: 0x000480CC
			[CLSCompliant(false)]
			public unsafe static void GetAttachedObjects(int containerObj, int maxCount, [Out] int* count, [Out] int* obj)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), containerObj, maxCount, count, obj, GL.EntryPoints[645]);
			}

			// Token: 0x06001A40 RID: 6720 RVA: 0x00049EE4 File Offset: 0x000480E4
			[CLSCompliant(false)]
			public unsafe static void GetAttachedObjects(uint containerObj, int maxCount, out int count, [Out] uint[] obj)
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (uint* ptr3 = ref (obj != null && obj.Length != 0) ? ref obj[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), containerObj, maxCount, ptr2, ptr3, GL.EntryPoints[645]);
					}
				}
			}

			// Token: 0x06001A41 RID: 6721 RVA: 0x00049F20 File Offset: 0x00048120
			[CLSCompliant(false)]
			public unsafe static void GetAttachedObjects(uint containerObj, int maxCount, out int count, out uint obj)
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (uint* ptr3 = &obj)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), containerObj, maxCount, ptr2, ptr3, GL.EntryPoints[645]);
					}
				}
			}

			// Token: 0x06001A42 RID: 6722 RVA: 0x00049F48 File Offset: 0x00048148
			[CLSCompliant(false)]
			public unsafe static void GetAttachedObjects(uint containerObj, int maxCount, [Out] int* count, [Out] uint* obj)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), containerObj, maxCount, count, obj, GL.EntryPoints[645]);
			}

			// Token: 0x06001A43 RID: 6723 RVA: 0x00049F60 File Offset: 0x00048160
			[CLSCompliant(false)]
			public static int GetAttribLocation(int programObj, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				int result = calli(System.Int32(System.UInt32,System.IntPtr), programObj, intPtr, GL.EntryPoints[648]);
				BindingsBase.FreeStringPtr(intPtr);
				return result;
			}

			// Token: 0x06001A44 RID: 6724 RVA: 0x00049F8C File Offset: 0x0004818C
			[CLSCompliant(false)]
			public static int GetAttribLocation(uint programObj, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				int result = calli(System.Int32(System.UInt32,System.IntPtr), programObj, intPtr, GL.EntryPoints[648]);
				BindingsBase.FreeStringPtr(intPtr);
				return result;
			}

			// Token: 0x06001A45 RID: 6725 RVA: 0x00049FB8 File Offset: 0x000481B8
			[CLSCompliant(false)]
			[Obsolete("Use BufferTargetArb overload instead")]
			public unsafe static void GetBufferParameter(ArbVertexBufferObject target, BufferParameterNameArb pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[654]);
				}
			}

			// Token: 0x06001A46 RID: 6726 RVA: 0x00049FF0 File Offset: 0x000481F0
			[CLSCompliant(false)]
			[Obsolete("Use BufferTargetArb overload instead")]
			public unsafe static void GetBufferParameter(ArbVertexBufferObject target, BufferParameterNameArb pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[654]);
				}
			}

			// Token: 0x06001A47 RID: 6727 RVA: 0x0004A014 File Offset: 0x00048214
			[CLSCompliant(false)]
			[Obsolete("Use BufferTargetArb overload instead")]
			public unsafe static void GetBufferParameter(ArbVertexBufferObject target, BufferParameterNameArb pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[654]);
			}

			// Token: 0x06001A48 RID: 6728 RVA: 0x0004A02C File Offset: 0x0004822C
			[CLSCompliant(false)]
			public unsafe static void GetBufferParameter(BufferTargetArb target, BufferParameterNameArb pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[654]);
				}
			}

			// Token: 0x06001A49 RID: 6729 RVA: 0x0004A064 File Offset: 0x00048264
			[CLSCompliant(false)]
			public unsafe static void GetBufferParameter(BufferTargetArb target, BufferParameterNameArb pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[654]);
				}
			}

			// Token: 0x06001A4A RID: 6730 RVA: 0x0004A088 File Offset: 0x00048288
			[CLSCompliant(false)]
			public unsafe static void GetBufferParameter(BufferTargetArb target, BufferParameterNameArb pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[654]);
			}

			// Token: 0x06001A4B RID: 6731 RVA: 0x0004A0A0 File Offset: 0x000482A0
			[Obsolete("Use BufferTargetArb overload instead")]
			public static void GetBufferPointer(ArbVertexBufferObject target, BufferPointerNameArb pname, [Out] IntPtr @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, @params, GL.EntryPoints[657]);
			}

			// Token: 0x06001A4C RID: 6732 RVA: 0x0004A0B8 File Offset: 0x000482B8
			[Obsolete("Use BufferTargetArb overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetBufferPointer<T2>(ArbVertexBufferObject target, BufferPointerNameArb pname, [In] [Out] T2[] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[657]);
				}
			}

			// Token: 0x06001A4D RID: 6733 RVA: 0x0004A0F0 File Offset: 0x000482F0
			[CLSCompliant(false)]
			[Obsolete("Use BufferTargetArb overload instead")]
			public unsafe static void GetBufferPointer<T2>(ArbVertexBufferObject target, BufferPointerNameArb pname, [In] [Out] T2[,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[657]);
				}
			}

			// Token: 0x06001A4E RID: 6734 RVA: 0x0004A12C File Offset: 0x0004832C
			[CLSCompliant(false)]
			[Obsolete("Use BufferTargetArb overload instead")]
			public unsafe static void GetBufferPointer<T2>(ArbVertexBufferObject target, BufferPointerNameArb pname, [In] [Out] T2[,,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[657]);
				}
			}

			// Token: 0x06001A4F RID: 6735 RVA: 0x0004A168 File Offset: 0x00048368
			[Obsolete("Use BufferTargetArb overload instead")]
			public unsafe static void GetBufferPointer<T2>(ArbVertexBufferObject target, BufferPointerNameArb pname, [In] [Out] ref T2 @params) where T2 : struct
			{
				fixed (T2* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[657]);
				}
			}

			// Token: 0x06001A50 RID: 6736 RVA: 0x0004A18C File Offset: 0x0004838C
			public static void GetBufferPointer(BufferTargetArb target, BufferPointerNameArb pname, [Out] IntPtr @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, @params, GL.EntryPoints[657]);
			}

			// Token: 0x06001A51 RID: 6737 RVA: 0x0004A1A4 File Offset: 0x000483A4
			[CLSCompliant(false)]
			public unsafe static void GetBufferPointer<T2>(BufferTargetArb target, BufferPointerNameArb pname, [In] [Out] T2[] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[657]);
				}
			}

			// Token: 0x06001A52 RID: 6738 RVA: 0x0004A1DC File Offset: 0x000483DC
			[CLSCompliant(false)]
			public unsafe static void GetBufferPointer<T2>(BufferTargetArb target, BufferPointerNameArb pname, [In] [Out] T2[,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[657]);
				}
			}

			// Token: 0x06001A53 RID: 6739 RVA: 0x0004A218 File Offset: 0x00048418
			[CLSCompliant(false)]
			public unsafe static void GetBufferPointer<T2>(BufferTargetArb target, BufferPointerNameArb pname, [In] [Out] T2[,,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[657]);
				}
			}

			// Token: 0x06001A54 RID: 6740 RVA: 0x0004A254 File Offset: 0x00048454
			public unsafe static void GetBufferPointer<T2>(BufferTargetArb target, BufferPointerNameArb pname, [In] [Out] ref T2 @params) where T2 : struct
			{
				fixed (T2* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[657]);
				}
			}

			// Token: 0x06001A55 RID: 6741 RVA: 0x0004A278 File Offset: 0x00048478
			public static void GetBufferSubData(BufferTargetArb target, IntPtr offset, IntPtr size, [Out] IntPtr data)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, data, GL.EntryPoints[659]);
			}

			// Token: 0x06001A56 RID: 6742 RVA: 0x0004A290 File Offset: 0x00048490
			[CLSCompliant(false)]
			public unsafe static void GetBufferSubData<T3>(BufferTargetArb target, IntPtr offset, IntPtr size, [In] [Out] T3[] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[659]);
				}
			}

			// Token: 0x06001A57 RID: 6743 RVA: 0x0004A2C8 File Offset: 0x000484C8
			[CLSCompliant(false)]
			public unsafe static void GetBufferSubData<T3>(BufferTargetArb target, IntPtr offset, IntPtr size, [In] [Out] T3[,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[659]);
				}
			}

			// Token: 0x06001A58 RID: 6744 RVA: 0x0004A304 File Offset: 0x00048504
			[CLSCompliant(false)]
			public unsafe static void GetBufferSubData<T3>(BufferTargetArb target, IntPtr offset, IntPtr size, [In] [Out] T3[,,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[659]);
				}
			}

			// Token: 0x06001A59 RID: 6745 RVA: 0x0004A340 File Offset: 0x00048540
			public unsafe static void GetBufferSubData<T3>(BufferTargetArb target, IntPtr offset, IntPtr size, [In] [Out] ref T3 data) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[659]);
				}
			}

			// Token: 0x06001A5A RID: 6746 RVA: 0x0004A364 File Offset: 0x00048564
			public static void GetCompressedTexImage(TextureTarget target, int level, [Out] IntPtr img)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, level, img, GL.EntryPoints[679]);
			}

			// Token: 0x06001A5B RID: 6747 RVA: 0x0004A37C File Offset: 0x0004857C
			[CLSCompliant(false)]
			public unsafe static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In] [Out] T2[] img) where T2 : struct
			{
				fixed (T2* ptr = ref (img != null && img.Length != 0) ? ref img[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, level, ptr, GL.EntryPoints[679]);
				}
			}

			// Token: 0x06001A5C RID: 6748 RVA: 0x0004A3B4 File Offset: 0x000485B4
			[CLSCompliant(false)]
			public unsafe static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In] [Out] T2[,] img) where T2 : struct
			{
				fixed (T2* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, level, ptr, GL.EntryPoints[679]);
				}
			}

			// Token: 0x06001A5D RID: 6749 RVA: 0x0004A3F0 File Offset: 0x000485F0
			[CLSCompliant(false)]
			public unsafe static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In] [Out] T2[,,] img) where T2 : struct
			{
				fixed (T2* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, level, ptr, GL.EntryPoints[679]);
				}
			}

			// Token: 0x06001A5E RID: 6750 RVA: 0x0004A42C File Offset: 0x0004862C
			public unsafe static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In] [Out] ref T2 img) where T2 : struct
			{
				fixed (T2* ptr = &img)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, level, ptr, GL.EntryPoints[679]);
				}
			}

			// Token: 0x06001A5F RID: 6751 RVA: 0x0004A450 File Offset: 0x00048650
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] ArbDebugOutput[] sources, [Out] ArbDebugOutput[] types, [Out] int[] ids, [Out] ArbDebugOutput[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
			{
				fixed (ArbDebugOutput* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
				{
					ArbDebugOutput* ptr2 = ptr;
					fixed (ArbDebugOutput* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
					{
						ArbDebugOutput* ptr4 = ptr3;
						fixed (int* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
						{
							int* ptr6 = ptr5;
							fixed (ArbDebugOutput* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
							{
								ArbDebugOutput* ptr8 = ptr7;
								fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[690]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x06001A60 RID: 6752 RVA: 0x0004A508 File Offset: 0x00048708
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, out ArbDebugOutput sources, out ArbDebugOutput types, out int ids, out ArbDebugOutput severities, out int lengths, [Out] StringBuilder messageLog)
			{
				fixed (ArbDebugOutput* ptr = &sources)
				{
					ArbDebugOutput* ptr2 = ptr;
					fixed (ArbDebugOutput* ptr3 = &types)
					{
						ArbDebugOutput* ptr4 = ptr3;
						fixed (int* ptr5 = &ids)
						{
							int* ptr6 = ptr5;
							fixed (ArbDebugOutput* ptr7 = &severities)
							{
								ArbDebugOutput* ptr8 = ptr7;
								fixed (int* ptr9 = &lengths)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[690]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x06001A61 RID: 6753 RVA: 0x0004A560 File Offset: 0x00048760
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] ArbDebugOutput* sources, [Out] ArbDebugOutput* types, [Out] int* ids, [Out] ArbDebugOutput* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
				int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[690]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
				Marshal.FreeHGlobal(intPtr);
				return result;
			}

			// Token: 0x06001A62 RID: 6754 RVA: 0x0004A5A4 File Offset: 0x000487A4
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] ArbDebugOutput[] sources, [Out] ArbDebugOutput[] types, [Out] uint[] ids, [Out] ArbDebugOutput[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
			{
				fixed (ArbDebugOutput* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
				{
					ArbDebugOutput* ptr2 = ptr;
					fixed (ArbDebugOutput* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
					{
						ArbDebugOutput* ptr4 = ptr3;
						fixed (uint* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
						{
							uint* ptr6 = ptr5;
							fixed (ArbDebugOutput* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
							{
								ArbDebugOutput* ptr8 = ptr7;
								fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[690]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x06001A63 RID: 6755 RVA: 0x0004A65C File Offset: 0x0004885C
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, out ArbDebugOutput sources, out ArbDebugOutput types, out uint ids, out ArbDebugOutput severities, out int lengths, [Out] StringBuilder messageLog)
			{
				fixed (ArbDebugOutput* ptr = &sources)
				{
					ArbDebugOutput* ptr2 = ptr;
					fixed (ArbDebugOutput* ptr3 = &types)
					{
						ArbDebugOutput* ptr4 = ptr3;
						fixed (uint* ptr5 = &ids)
						{
							uint* ptr6 = ptr5;
							fixed (ArbDebugOutput* ptr7 = &severities)
							{
								ArbDebugOutput* ptr8 = ptr7;
								fixed (int* ptr9 = &lengths)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[690]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x06001A64 RID: 6756 RVA: 0x0004A6B4 File Offset: 0x000488B4
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] ArbDebugOutput* sources, [Out] ArbDebugOutput* types, [Out] uint* ids, [Out] ArbDebugOutput* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
				int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[690]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
				Marshal.FreeHGlobal(intPtr);
				return result;
			}

			// Token: 0x06001A65 RID: 6757 RVA: 0x0004A6F8 File Offset: 0x000488F8
			public static ArbRobustness GetGraphicsResetStatus()
			{
				return calli(System.Int32(), GL.EntryPoints[719]);
			}

			// Token: 0x06001A66 RID: 6758 RVA: 0x0004A70C File Offset: 0x0004890C
			public static int GetHandle(ArbShaderObjects pname)
			{
				return calli(System.Int32(System.Int32), pname, GL.EntryPoints[720]);
			}

			// Token: 0x06001A67 RID: 6759 RVA: 0x0004A720 File Offset: 0x00048920
			[CLSCompliant(false)]
			public static long GetImageHandle(int texture, int level, bool layered, int layer, ArbBindlessTexture format)
			{
				return calli(System.Int64(System.UInt32,System.Int32,System.Boolean,System.Int32,System.Int32), texture, level, layered, layer, format, GL.EntryPoints[728]);
			}

			// Token: 0x06001A68 RID: 6760 RVA: 0x0004A738 File Offset: 0x00048938
			[CLSCompliant(false)]
			public static long GetImageHandle(uint texture, int level, bool layered, int layer, ArbBindlessTexture format)
			{
				return calli(System.Int64(System.UInt32,System.Int32,System.Boolean,System.Int32,System.Int32), texture, level, layered, layer, format, GL.EntryPoints[728]);
			}

			// Token: 0x06001A69 RID: 6761 RVA: 0x0004A750 File Offset: 0x00048950
			[CLSCompliant(false)]
			public unsafe static void GetInfoLog(int obj, int maxLength, out int length, [Out] StringBuilder infoLog)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), obj, maxLength, ptr2, intPtr, GL.EntryPoints[732]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06001A6A RID: 6762 RVA: 0x0004A790 File Offset: 0x00048990
			[CLSCompliant(false)]
			public unsafe static void GetInfoLog(int obj, int maxLength, [Out] int* length, [Out] StringBuilder infoLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), obj, maxLength, length, intPtr, GL.EntryPoints[732]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06001A6B RID: 6763 RVA: 0x0004A7CC File Offset: 0x000489CC
			[CLSCompliant(false)]
			public unsafe static void GetInfoLog(uint obj, int maxLength, out int length, [Out] StringBuilder infoLog)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), obj, maxLength, ptr2, intPtr, GL.EntryPoints[732]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06001A6C RID: 6764 RVA: 0x0004A80C File Offset: 0x00048A0C
			[CLSCompliant(false)]
			public unsafe static void GetInfoLog(uint obj, int maxLength, [Out] int* length, [Out] StringBuilder infoLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), obj, maxLength, length, intPtr, GL.EntryPoints[732]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06001A6D RID: 6765 RVA: 0x0004A848 File Offset: 0x00048A48
			[CLSCompliant(false)]
			public unsafe static void GetNamedString(int namelen, string name, int bufSize, out int stringlen, [Out] StringBuilder @string)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = &stringlen)
				{
					int* ptr2 = ptr;
					IntPtr intPtr3 = Marshal.AllocHGlobal((IntPtr)@string.Capacity);
					calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32*,System.IntPtr), namelen, intPtr2, bufSize, ptr2, intPtr3, GL.EntryPoints[801]);
					BindingsBase.FreeStringPtr(intPtr);
					BindingsBase.MarshalPtrToStringBuilder(intPtr3, @string);
					Marshal.FreeHGlobal(intPtr3);
				}
			}

			// Token: 0x06001A6E RID: 6766 RVA: 0x0004A898 File Offset: 0x00048A98
			[CLSCompliant(false)]
			public unsafe static void GetNamedString(int namelen, string name, int bufSize, [Out] int* stringlen, [Out] StringBuilder @string)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				IntPtr intPtr2 = intPtr;
				IntPtr intPtr3 = Marshal.AllocHGlobal((IntPtr)@string.Capacity);
				calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32*,System.IntPtr), namelen, intPtr2, bufSize, stringlen, intPtr3, GL.EntryPoints[801]);
				BindingsBase.FreeStringPtr(intPtr);
				BindingsBase.MarshalPtrToStringBuilder(intPtr3, @string);
				Marshal.FreeHGlobal(intPtr3);
			}

			// Token: 0x06001A6F RID: 6767 RVA: 0x0004A8E4 File Offset: 0x00048AE4
			[CLSCompliant(false)]
			public unsafe static void GetNamedString(int namelen, string name, ArbShadingLanguageInclude pname, [Out] int[] @params)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32*), namelen, intPtr2, pname, ptr, GL.EntryPoints[802]);
					BindingsBase.FreeStringPtr(intPtr);
				}
			}

			// Token: 0x06001A70 RID: 6768 RVA: 0x0004A928 File Offset: 0x00048B28
			[CLSCompliant(false)]
			public unsafe static void GetNamedString(int namelen, string name, ArbShadingLanguageInclude pname, out int @params)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32*), namelen, intPtr2, pname, ptr, GL.EntryPoints[802]);
					BindingsBase.FreeStringPtr(intPtr);
				}
			}

			// Token: 0x06001A71 RID: 6769 RVA: 0x0004A95C File Offset: 0x00048B5C
			[CLSCompliant(false)]
			public unsafe static void GetNamedString(int namelen, string name, ArbShadingLanguageInclude pname, [Out] int* @params)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32*), namelen, intPtr, pname, @params, GL.EntryPoints[802]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06001A72 RID: 6770 RVA: 0x0004A98C File Offset: 0x00048B8C
			public static void GetnColorTable(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr table)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, table, GL.EntryPoints[803]);
			}

			// Token: 0x06001A73 RID: 6771 RVA: 0x0004A9A4 File Offset: 0x00048BA4
			[CLSCompliant(false)]
			public unsafe static void GetnColorTable<T4>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T4[] table) where T4 : struct
			{
				fixed (T4* ptr = ref (table != null && table.Length != 0) ? ref table[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, ptr, GL.EntryPoints[803]);
				}
			}

			// Token: 0x06001A74 RID: 6772 RVA: 0x0004A9E0 File Offset: 0x00048BE0
			[CLSCompliant(false)]
			public unsafe static void GetnColorTable<T4>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T4[,] table) where T4 : struct
			{
				fixed (T4* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, ptr, GL.EntryPoints[803]);
				}
			}

			// Token: 0x06001A75 RID: 6773 RVA: 0x0004AA20 File Offset: 0x00048C20
			[CLSCompliant(false)]
			public unsafe static void GetnColorTable<T4>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T4[,,] table) where T4 : struct
			{
				fixed (T4* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, ptr, GL.EntryPoints[803]);
				}
			}

			// Token: 0x06001A76 RID: 6774 RVA: 0x0004AA60 File Offset: 0x00048C60
			public unsafe static void GetnColorTable<T4>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] ref T4 table) where T4 : struct
			{
				fixed (T4* ptr = &table)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, ptr, GL.EntryPoints[803]);
				}
			}

			// Token: 0x06001A77 RID: 6775 RVA: 0x0004AA88 File Offset: 0x00048C88
			public static void GetnCompressedTexImage(ArbRobustness target, int lod, int bufSize, [Out] IntPtr img)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, lod, bufSize, img, GL.EntryPoints[804]);
			}

			// Token: 0x06001A78 RID: 6776 RVA: 0x0004AAA0 File Offset: 0x00048CA0
			[CLSCompliant(false)]
			public unsafe static void GetnCompressedTexImage<T3>(ArbRobustness target, int lod, int bufSize, [In] [Out] T3[] img) where T3 : struct
			{
				fixed (T3* ptr = ref (img != null && img.Length != 0) ? ref img[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, lod, bufSize, ptr, GL.EntryPoints[804]);
				}
			}

			// Token: 0x06001A79 RID: 6777 RVA: 0x0004AAD8 File Offset: 0x00048CD8
			[CLSCompliant(false)]
			public unsafe static void GetnCompressedTexImage<T3>(ArbRobustness target, int lod, int bufSize, [In] [Out] T3[,] img) where T3 : struct
			{
				fixed (T3* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, lod, bufSize, ptr, GL.EntryPoints[804]);
				}
			}

			// Token: 0x06001A7A RID: 6778 RVA: 0x0004AB14 File Offset: 0x00048D14
			[CLSCompliant(false)]
			public unsafe static void GetnCompressedTexImage<T3>(ArbRobustness target, int lod, int bufSize, [In] [Out] T3[,,] img) where T3 : struct
			{
				fixed (T3* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, lod, bufSize, ptr, GL.EntryPoints[804]);
				}
			}

			// Token: 0x06001A7B RID: 6779 RVA: 0x0004AB50 File Offset: 0x00048D50
			public unsafe static void GetnCompressedTexImage<T3>(ArbRobustness target, int lod, int bufSize, [In] [Out] ref T3 img) where T3 : struct
			{
				fixed (T3* ptr = &img)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, lod, bufSize, ptr, GL.EntryPoints[804]);
				}
			}

			// Token: 0x06001A7C RID: 6780 RVA: 0x0004AB74 File Offset: 0x00048D74
			public static void GetnConvolutionFilter(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr image)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, image, GL.EntryPoints[805]);
			}

			// Token: 0x06001A7D RID: 6781 RVA: 0x0004AB8C File Offset: 0x00048D8C
			[CLSCompliant(false)]
			public unsafe static void GetnConvolutionFilter<T4>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T4[] image) where T4 : struct
			{
				fixed (T4* ptr = ref (image != null && image.Length != 0) ? ref image[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, ptr, GL.EntryPoints[805]);
				}
			}

			// Token: 0x06001A7E RID: 6782 RVA: 0x0004ABC8 File Offset: 0x00048DC8
			[CLSCompliant(false)]
			public unsafe static void GetnConvolutionFilter<T4>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T4[,] image) where T4 : struct
			{
				fixed (T4* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, ptr, GL.EntryPoints[805]);
				}
			}

			// Token: 0x06001A7F RID: 6783 RVA: 0x0004AC08 File Offset: 0x00048E08
			[CLSCompliant(false)]
			public unsafe static void GetnConvolutionFilter<T4>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T4[,,] image) where T4 : struct
			{
				fixed (T4* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, ptr, GL.EntryPoints[805]);
				}
			}

			// Token: 0x06001A80 RID: 6784 RVA: 0x0004AC48 File Offset: 0x00048E48
			public unsafe static void GetnConvolutionFilter<T4>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] ref T4 image) where T4 : struct
			{
				fixed (T4* ptr = &image)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, bufSize, ptr, GL.EntryPoints[805]);
				}
			}

			// Token: 0x06001A81 RID: 6785 RVA: 0x0004AC70 File Offset: 0x00048E70
			public static void GetnHistogram(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr values)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, values, GL.EntryPoints[807]);
			}

			// Token: 0x06001A82 RID: 6786 RVA: 0x0004AC8C File Offset: 0x00048E8C
			[CLSCompliant(false)]
			public unsafe static void GetnHistogram<T5>(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T5[] values) where T5 : struct
			{
				fixed (T5* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, ptr, GL.EntryPoints[807]);
				}
			}

			// Token: 0x06001A83 RID: 6787 RVA: 0x0004ACC8 File Offset: 0x00048EC8
			[CLSCompliant(false)]
			public unsafe static void GetnHistogram<T5>(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T5[,] values) where T5 : struct
			{
				fixed (T5* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, ptr, GL.EntryPoints[807]);
				}
			}

			// Token: 0x06001A84 RID: 6788 RVA: 0x0004AD08 File Offset: 0x00048F08
			[CLSCompliant(false)]
			public unsafe static void GetnHistogram<T5>(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T5[,,] values) where T5 : struct
			{
				fixed (T5* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, ptr, GL.EntryPoints[807]);
				}
			}

			// Token: 0x06001A85 RID: 6789 RVA: 0x0004AD4C File Offset: 0x00048F4C
			public unsafe static void GetnHistogram<T5>(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] ref T5 values) where T5 : struct
			{
				fixed (T5* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, ptr, GL.EntryPoints[807]);
				}
			}

			// Token: 0x06001A86 RID: 6790 RVA: 0x0004AD74 File Offset: 0x00048F74
			[CLSCompliant(false)]
			public unsafe static void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, [Out] double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Double*), target, query, bufSize, ptr, GL.EntryPoints[808]);
				}
			}

			// Token: 0x06001A87 RID: 6791 RVA: 0x0004ADAC File Offset: 0x00048FAC
			[CLSCompliant(false)]
			public unsafe static void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, out double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Double*), target, query, bufSize, ptr, GL.EntryPoints[808]);
				}
			}

			// Token: 0x06001A88 RID: 6792 RVA: 0x0004ADD0 File Offset: 0x00048FD0
			[CLSCompliant(false)]
			public unsafe static void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, [Out] double* v)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Double*), target, query, bufSize, v, GL.EntryPoints[808]);
			}

			// Token: 0x06001A89 RID: 6793 RVA: 0x0004ADE8 File Offset: 0x00048FE8
			[CLSCompliant(false)]
			public unsafe static void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, [Out] float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), target, query, bufSize, ptr, GL.EntryPoints[809]);
				}
			}

			// Token: 0x06001A8A RID: 6794 RVA: 0x0004AE20 File Offset: 0x00049020
			[CLSCompliant(false)]
			public unsafe static void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, out float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), target, query, bufSize, ptr, GL.EntryPoints[809]);
				}
			}

			// Token: 0x06001A8B RID: 6795 RVA: 0x0004AE44 File Offset: 0x00049044
			[CLSCompliant(false)]
			public unsafe static void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, [Out] float* v)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), target, query, bufSize, v, GL.EntryPoints[809]);
			}

			// Token: 0x06001A8C RID: 6796 RVA: 0x0004AE5C File Offset: 0x0004905C
			[CLSCompliant(false)]
			public unsafe static void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, [Out] int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, query, bufSize, ptr, GL.EntryPoints[810]);
				}
			}

			// Token: 0x06001A8D RID: 6797 RVA: 0x0004AE94 File Offset: 0x00049094
			[CLSCompliant(false)]
			public unsafe static void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, out int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, query, bufSize, ptr, GL.EntryPoints[810]);
				}
			}

			// Token: 0x06001A8E RID: 6798 RVA: 0x0004AEB8 File Offset: 0x000490B8
			[CLSCompliant(false)]
			public unsafe static void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, [Out] int* v)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, query, bufSize, v, GL.EntryPoints[810]);
			}

			// Token: 0x06001A8F RID: 6799 RVA: 0x0004AED0 File Offset: 0x000490D0
			public static void GetnMinmax(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr values)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, values, GL.EntryPoints[811]);
			}

			// Token: 0x06001A90 RID: 6800 RVA: 0x0004AEEC File Offset: 0x000490EC
			[CLSCompliant(false)]
			public unsafe static void GetnMinmax<T5>(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T5[] values) where T5 : struct
			{
				fixed (T5* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, ptr, GL.EntryPoints[811]);
				}
			}

			// Token: 0x06001A91 RID: 6801 RVA: 0x0004AF28 File Offset: 0x00049128
			[CLSCompliant(false)]
			public unsafe static void GetnMinmax<T5>(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T5[,] values) where T5 : struct
			{
				fixed (T5* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, ptr, GL.EntryPoints[811]);
				}
			}

			// Token: 0x06001A92 RID: 6802 RVA: 0x0004AF68 File Offset: 0x00049168
			[CLSCompliant(false)]
			public unsafe static void GetnMinmax<T5>(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T5[,,] values) where T5 : struct
			{
				fixed (T5* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, ptr, GL.EntryPoints[811]);
				}
			}

			// Token: 0x06001A93 RID: 6803 RVA: 0x0004AFAC File Offset: 0x000491AC
			public unsafe static void GetnMinmax<T5>(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] ref T5 values) where T5 : struct
			{
				fixed (T5* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, bufSize, ptr, GL.EntryPoints[811]);
				}
			}

			// Token: 0x06001A94 RID: 6804 RVA: 0x0004AFD4 File Offset: 0x000491D4
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(ArbRobustness map, int bufSize, [Out] float[] values)
			{
				fixed (float* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), map, bufSize, ptr, GL.EntryPoints[812]);
				}
			}

			// Token: 0x06001A95 RID: 6805 RVA: 0x0004B00C File Offset: 0x0004920C
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(ArbRobustness map, int bufSize, out float values)
			{
				fixed (float* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), map, bufSize, ptr, GL.EntryPoints[812]);
				}
			}

			// Token: 0x06001A96 RID: 6806 RVA: 0x0004B030 File Offset: 0x00049230
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(ArbRobustness map, int bufSize, [Out] float* values)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), map, bufSize, values, GL.EntryPoints[812]);
			}

			// Token: 0x06001A97 RID: 6807 RVA: 0x0004B048 File Offset: 0x00049248
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(ArbRobustness map, int bufSize, [Out] int[] values)
			{
				fixed (int* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, bufSize, ptr, GL.EntryPoints[813]);
				}
			}

			// Token: 0x06001A98 RID: 6808 RVA: 0x0004B080 File Offset: 0x00049280
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(ArbRobustness map, int bufSize, out int values)
			{
				fixed (int* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, bufSize, ptr, GL.EntryPoints[813]);
				}
			}

			// Token: 0x06001A99 RID: 6809 RVA: 0x0004B0A4 File Offset: 0x000492A4
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(ArbRobustness map, int bufSize, [Out] int* values)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, bufSize, values, GL.EntryPoints[813]);
			}

			// Token: 0x06001A9A RID: 6810 RVA: 0x0004B0BC File Offset: 0x000492BC
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(ArbRobustness map, int bufSize, [Out] uint[] values)
			{
				fixed (uint* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, bufSize, ptr, GL.EntryPoints[813]);
				}
			}

			// Token: 0x06001A9B RID: 6811 RVA: 0x0004B0F4 File Offset: 0x000492F4
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(ArbRobustness map, int bufSize, out uint values)
			{
				fixed (uint* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, bufSize, ptr, GL.EntryPoints[813]);
				}
			}

			// Token: 0x06001A9C RID: 6812 RVA: 0x0004B118 File Offset: 0x00049318
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(ArbRobustness map, int bufSize, [Out] uint* values)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), map, bufSize, values, GL.EntryPoints[813]);
			}

			// Token: 0x06001A9D RID: 6813 RVA: 0x0004B130 File Offset: 0x00049330
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(ArbRobustness map, int bufSize, [Out] short[] values)
			{
				fixed (short* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, bufSize, ptr, GL.EntryPoints[814]);
				}
			}

			// Token: 0x06001A9E RID: 6814 RVA: 0x0004B168 File Offset: 0x00049368
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(ArbRobustness map, int bufSize, out short values)
			{
				fixed (short* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, bufSize, ptr, GL.EntryPoints[814]);
				}
			}

			// Token: 0x06001A9F RID: 6815 RVA: 0x0004B18C File Offset: 0x0004938C
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(ArbRobustness map, int bufSize, [Out] short* values)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, bufSize, values, GL.EntryPoints[814]);
			}

			// Token: 0x06001AA0 RID: 6816 RVA: 0x0004B1A4 File Offset: 0x000493A4
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(ArbRobustness map, int bufSize, [Out] ushort[] values)
			{
				fixed (ushort* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, bufSize, ptr, GL.EntryPoints[814]);
				}
			}

			// Token: 0x06001AA1 RID: 6817 RVA: 0x0004B1DC File Offset: 0x000493DC
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(ArbRobustness map, int bufSize, out ushort values)
			{
				fixed (ushort* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, bufSize, ptr, GL.EntryPoints[814]);
				}
			}

			// Token: 0x06001AA2 RID: 6818 RVA: 0x0004B200 File Offset: 0x00049400
			[CLSCompliant(false)]
			public unsafe static void GetnPixelMap(ArbRobustness map, int bufSize, [Out] ushort* values)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt16*), map, bufSize, values, GL.EntryPoints[814]);
			}

			// Token: 0x06001AA3 RID: 6819 RVA: 0x0004B218 File Offset: 0x00049418
			[CLSCompliant(false)]
			public static byte GetnPolygonStipple()
			{
				byte result;
				calli(System.Void(System.Int32,System.Byte*), 1, ref result, GL.EntryPoints[815]);
				return result;
			}

			// Token: 0x06001AA4 RID: 6820 RVA: 0x0004B23C File Offset: 0x0004943C
			[CLSCompliant(false)]
			public unsafe static void GetnPolygonStipple(int bufSize, [Out] byte[] pattern)
			{
				fixed (byte* ptr = ref (pattern != null && pattern.Length != 0) ? ref pattern[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Byte*), bufSize, ptr, GL.EntryPoints[815]);
				}
			}

			// Token: 0x06001AA5 RID: 6821 RVA: 0x0004B270 File Offset: 0x00049470
			[CLSCompliant(false)]
			public unsafe static void GetnPolygonStipple(int bufSize, out byte pattern)
			{
				fixed (byte* ptr = &pattern)
				{
					calli(System.Void(System.Int32,System.Byte*), bufSize, ptr, GL.EntryPoints[815]);
				}
			}

			// Token: 0x06001AA6 RID: 6822 RVA: 0x0004B294 File Offset: 0x00049494
			[CLSCompliant(false)]
			public unsafe static void GetnPolygonStipple(int bufSize, [Out] byte* pattern)
			{
				calli(System.Void(System.Int32,System.Byte*), bufSize, pattern, GL.EntryPoints[815]);
			}

			// Token: 0x06001AA7 RID: 6823 RVA: 0x0004B2A8 File Offset: 0x000494A8
			public static void GetnSeparableFilter(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [Out] IntPtr row, int columnBufSize, [Out] IntPtr column, [Out] IntPtr span)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr), target, format, type, rowBufSize, row, columnBufSize, column, span, GL.EntryPoints[816]);
			}

			// Token: 0x06001AA8 RID: 6824 RVA: 0x0004B2D4 File Offset: 0x000494D4
			[CLSCompliant(false)]
			public unsafe static void GetnSeparableFilter<T4, T6, T7>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [In] [Out] T4[] row, int columnBufSize, [In] [Out] T6[] column, [In] [Out] T7[] span) where T4 : struct where T6 : struct where T7 : struct
			{
				fixed (T4* ptr = ref (row != null && row.Length != 0) ? ref row[0] : ref *null)
				{
					T4* ptr2 = ptr;
					fixed (T6* ptr3 = ref (column != null && column.Length != 0) ? ref column[0] : ref *null)
					{
						T6* ptr4 = ptr3;
						fixed (T7* ptr5 = ref (span != null && span.Length != 0) ? ref span[0] : ref *null)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr), target, format, type, rowBufSize, ptr2, columnBufSize, ptr4, ptr5, GL.EntryPoints[816]);
						}
					}
				}
			}

			// Token: 0x06001AA9 RID: 6825 RVA: 0x0004B344 File Offset: 0x00049544
			[CLSCompliant(false)]
			public unsafe static void GetnSeparableFilter<T4, T6, T7>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [In] [Out] T4[,] row, int columnBufSize, [In] [Out] T6[,] column, [In] [Out] T7[,] span) where T4 : struct where T6 : struct where T7 : struct
			{
				fixed (T4* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0] : ref *null)
				{
					T4* ptr2 = ptr;
					fixed (T6* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0] : ref *null)
					{
						T6* ptr4 = ptr3;
						fixed (T7* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0] : ref *null)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr), target, format, type, rowBufSize, ptr2, columnBufSize, ptr4, ptr5, GL.EntryPoints[816]);
						}
					}
				}
			}

			// Token: 0x06001AAA RID: 6826 RVA: 0x0004B3C0 File Offset: 0x000495C0
			[CLSCompliant(false)]
			public unsafe static void GetnSeparableFilter<T4, T6, T7>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [In] [Out] T4[,,] row, int columnBufSize, [In] [Out] T6[,,] column, [In] [Out] T7[,,] span) where T4 : struct where T6 : struct where T7 : struct
			{
				fixed (T4* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0, 0] : ref *null)
				{
					T4* ptr2 = ptr;
					fixed (T6* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
					{
						T6* ptr4 = ptr3;
						fixed (T7* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr), target, format, type, rowBufSize, ptr2, columnBufSize, ptr4, ptr5, GL.EntryPoints[816]);
						}
					}
				}
			}

			// Token: 0x06001AAB RID: 6827 RVA: 0x0004B440 File Offset: 0x00049640
			public unsafe static void GetnSeparableFilter<T4, T6, T7>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [In] [Out] ref T4 row, int columnBufSize, [In] [Out] ref T6 column, [In] [Out] ref T7 span) where T4 : struct where T6 : struct where T7 : struct
			{
				fixed (T4* ptr = &row)
				{
					T4* ptr2 = ptr;
					fixed (T6* ptr3 = &column)
					{
						T6* ptr4 = ptr3;
						fixed (T7* ptr5 = &span)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr), target, format, type, rowBufSize, ptr2, columnBufSize, ptr4, ptr5, GL.EntryPoints[816]);
						}
					}
				}
			}

			// Token: 0x06001AAC RID: 6828 RVA: 0x0004B474 File Offset: 0x00049674
			public static void GetnTexImage(ArbRobustness target, int level, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr img)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, bufSize, img, GL.EntryPoints[817]);
			}

			// Token: 0x06001AAD RID: 6829 RVA: 0x0004B490 File Offset: 0x00049690
			[CLSCompliant(false)]
			public unsafe static void GetnTexImage<T5>(ArbRobustness target, int level, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T5[] img) where T5 : struct
			{
				fixed (T5* ptr = ref (img != null && img.Length != 0) ? ref img[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, bufSize, ptr, GL.EntryPoints[817]);
				}
			}

			// Token: 0x06001AAE RID: 6830 RVA: 0x0004B4CC File Offset: 0x000496CC
			[CLSCompliant(false)]
			public unsafe static void GetnTexImage<T5>(ArbRobustness target, int level, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T5[,] img) where T5 : struct
			{
				fixed (T5* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, bufSize, ptr, GL.EntryPoints[817]);
				}
			}

			// Token: 0x06001AAF RID: 6831 RVA: 0x0004B50C File Offset: 0x0004970C
			[CLSCompliant(false)]
			public unsafe static void GetnTexImage<T5>(ArbRobustness target, int level, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T5[,,] img) where T5 : struct
			{
				fixed (T5* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, bufSize, ptr, GL.EntryPoints[817]);
				}
			}

			// Token: 0x06001AB0 RID: 6832 RVA: 0x0004B550 File Offset: 0x00049750
			public unsafe static void GetnTexImage<T5>(ArbRobustness target, int level, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] ref T5 img) where T5 : struct
			{
				fixed (T5* ptr = &img)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, format, type, bufSize, ptr, GL.EntryPoints[817]);
				}
			}

			// Token: 0x06001AB1 RID: 6833 RVA: 0x0004B578 File Offset: 0x00049778
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, bufSize, ptr, GL.EntryPoints[818]);
				}
			}

			// Token: 0x06001AB2 RID: 6834 RVA: 0x0004B5B0 File Offset: 0x000497B0
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, bufSize, ptr, GL.EntryPoints[818]);
				}
			}

			// Token: 0x06001AB3 RID: 6835 RVA: 0x0004B5D4 File Offset: 0x000497D4
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, bufSize, @params, GL.EntryPoints[818]);
			}

			// Token: 0x06001AB4 RID: 6836 RVA: 0x0004B5EC File Offset: 0x000497EC
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, bufSize, ptr, GL.EntryPoints[818]);
				}
			}

			// Token: 0x06001AB5 RID: 6837 RVA: 0x0004B624 File Offset: 0x00049824
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, bufSize, ptr, GL.EntryPoints[818]);
				}
			}

			// Token: 0x06001AB6 RID: 6838 RVA: 0x0004B648 File Offset: 0x00049848
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, bufSize, @params, GL.EntryPoints[818]);
			}

			// Token: 0x06001AB7 RID: 6839 RVA: 0x0004B660 File Offset: 0x00049860
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, ptr, GL.EntryPoints[819]);
				}
			}

			// Token: 0x06001AB8 RID: 6840 RVA: 0x0004B698 File Offset: 0x00049898
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, ptr, GL.EntryPoints[819]);
				}
			}

			// Token: 0x06001AB9 RID: 6841 RVA: 0x0004B6BC File Offset: 0x000498BC
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, @params, GL.EntryPoints[819]);
			}

			// Token: 0x06001ABA RID: 6842 RVA: 0x0004B6D4 File Offset: 0x000498D4
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, ptr, GL.EntryPoints[819]);
				}
			}

			// Token: 0x06001ABB RID: 6843 RVA: 0x0004B70C File Offset: 0x0004990C
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, ptr, GL.EntryPoints[819]);
				}
			}

			// Token: 0x06001ABC RID: 6844 RVA: 0x0004B730 File Offset: 0x00049930
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, @params, GL.EntryPoints[819]);
			}

			// Token: 0x06001ABD RID: 6845 RVA: 0x0004B748 File Offset: 0x00049948
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, ptr, GL.EntryPoints[820]);
				}
			}

			// Token: 0x06001ABE RID: 6846 RVA: 0x0004B780 File Offset: 0x00049980
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, ptr, GL.EntryPoints[820]);
				}
			}

			// Token: 0x06001ABF RID: 6847 RVA: 0x0004B7A4 File Offset: 0x000499A4
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, @params, GL.EntryPoints[820]);
			}

			// Token: 0x06001AC0 RID: 6848 RVA: 0x0004B7BC File Offset: 0x000499BC
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, ptr, GL.EntryPoints[820]);
				}
			}

			// Token: 0x06001AC1 RID: 6849 RVA: 0x0004B7F4 File Offset: 0x000499F4
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, ptr, GL.EntryPoints[820]);
				}
			}

			// Token: 0x06001AC2 RID: 6850 RVA: 0x0004B818 File Offset: 0x00049A18
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, @params, GL.EntryPoints[820]);
			}

			// Token: 0x06001AC3 RID: 6851 RVA: 0x0004B830 File Offset: 0x00049A30
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, bufSize, ptr, GL.EntryPoints[821]);
				}
			}

			// Token: 0x06001AC4 RID: 6852 RVA: 0x0004B868 File Offset: 0x00049A68
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, bufSize, ptr, GL.EntryPoints[821]);
				}
			}

			// Token: 0x06001AC5 RID: 6853 RVA: 0x0004B88C File Offset: 0x00049A8C
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] uint* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, bufSize, @params, GL.EntryPoints[821]);
			}

			// Token: 0x06001AC6 RID: 6854 RVA: 0x0004B8A4 File Offset: 0x00049AA4
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(int obj, ArbShaderObjects pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), obj, pname, ptr, GL.EntryPoints[827]);
				}
			}

			// Token: 0x06001AC7 RID: 6855 RVA: 0x0004B8DC File Offset: 0x00049ADC
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(int obj, ArbShaderObjects pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), obj, pname, ptr, GL.EntryPoints[827]);
				}
			}

			// Token: 0x06001AC8 RID: 6856 RVA: 0x0004B900 File Offset: 0x00049B00
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(int obj, ArbShaderObjects pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), obj, pname, @params, GL.EntryPoints[827]);
			}

			// Token: 0x06001AC9 RID: 6857 RVA: 0x0004B918 File Offset: 0x00049B18
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(uint obj, ArbShaderObjects pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), obj, pname, ptr, GL.EntryPoints[827]);
				}
			}

			// Token: 0x06001ACA RID: 6858 RVA: 0x0004B950 File Offset: 0x00049B50
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(uint obj, ArbShaderObjects pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), obj, pname, ptr, GL.EntryPoints[827]);
				}
			}

			// Token: 0x06001ACB RID: 6859 RVA: 0x0004B974 File Offset: 0x00049B74
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(uint obj, ArbShaderObjects pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), obj, pname, @params, GL.EntryPoints[827]);
			}

			// Token: 0x06001ACC RID: 6860 RVA: 0x0004B98C File Offset: 0x00049B8C
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(int obj, ArbShaderObjects pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), obj, pname, ptr, GL.EntryPoints[829]);
				}
			}

			// Token: 0x06001ACD RID: 6861 RVA: 0x0004B9C4 File Offset: 0x00049BC4
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(int obj, ArbShaderObjects pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), obj, pname, ptr, GL.EntryPoints[829]);
				}
			}

			// Token: 0x06001ACE RID: 6862 RVA: 0x0004B9E8 File Offset: 0x00049BE8
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(int obj, ArbShaderObjects pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), obj, pname, @params, GL.EntryPoints[829]);
			}

			// Token: 0x06001ACF RID: 6863 RVA: 0x0004BA00 File Offset: 0x00049C00
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(uint obj, ArbShaderObjects pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), obj, pname, ptr, GL.EntryPoints[829]);
				}
			}

			// Token: 0x06001AD0 RID: 6864 RVA: 0x0004BA38 File Offset: 0x00049C38
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(uint obj, ArbShaderObjects pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), obj, pname, ptr, GL.EntryPoints[829]);
				}
			}

			// Token: 0x06001AD1 RID: 6865 RVA: 0x0004BA5C File Offset: 0x00049C5C
			[CLSCompliant(false)]
			public unsafe static void GetObjectParameter(uint obj, ArbShaderObjects pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), obj, pname, @params, GL.EntryPoints[829]);
			}

			// Token: 0x06001AD2 RID: 6866 RVA: 0x0004BA74 File Offset: 0x00049C74
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameter(All target, int index, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[872]);
				}
			}

			// Token: 0x06001AD3 RID: 6867 RVA: 0x0004BAAC File Offset: 0x00049CAC
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameter(All target, int index, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[872]);
				}
			}

			// Token: 0x06001AD4 RID: 6868 RVA: 0x0004BAD0 File Offset: 0x00049CD0
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameter(All target, int index, [Out] double* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, @params, GL.EntryPoints[872]);
			}

			// Token: 0x06001AD5 RID: 6869 RVA: 0x0004BAE8 File Offset: 0x00049CE8
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameter(All target, uint index, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[872]);
				}
			}

			// Token: 0x06001AD6 RID: 6870 RVA: 0x0004BB20 File Offset: 0x00049D20
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameter(All target, uint index, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[872]);
				}
			}

			// Token: 0x06001AD7 RID: 6871 RVA: 0x0004BB44 File Offset: 0x00049D44
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameter(All target, uint index, [Out] double* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, @params, GL.EntryPoints[872]);
			}

			// Token: 0x06001AD8 RID: 6872 RVA: 0x0004BB5C File Offset: 0x00049D5C
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetProgramEnvParameter(ArbVertexProgram target, int index, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[872]);
				}
			}

			// Token: 0x06001AD9 RID: 6873 RVA: 0x0004BB94 File Offset: 0x00049D94
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetProgramEnvParameter(ArbVertexProgram target, int index, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[872]);
				}
			}

			// Token: 0x06001ADA RID: 6874 RVA: 0x0004BBB8 File Offset: 0x00049DB8
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetProgramEnvParameter(ArbVertexProgram target, int index, [Out] double* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, @params, GL.EntryPoints[872]);
			}

			// Token: 0x06001ADB RID: 6875 RVA: 0x0004BBD0 File Offset: 0x00049DD0
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetProgramEnvParameter(ArbVertexProgram target, uint index, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[872]);
				}
			}

			// Token: 0x06001ADC RID: 6876 RVA: 0x0004BC08 File Offset: 0x00049E08
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetProgramEnvParameter(ArbVertexProgram target, uint index, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[872]);
				}
			}

			// Token: 0x06001ADD RID: 6877 RVA: 0x0004BC2C File Offset: 0x00049E2C
			[Obsolete("Use All overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameter(ArbVertexProgram target, uint index, [Out] double* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, @params, GL.EntryPoints[872]);
			}

			// Token: 0x06001ADE RID: 6878 RVA: 0x0004BC44 File Offset: 0x00049E44
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameter(All target, int index, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[873]);
				}
			}

			// Token: 0x06001ADF RID: 6879 RVA: 0x0004BC7C File Offset: 0x00049E7C
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameter(All target, int index, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[873]);
				}
			}

			// Token: 0x06001AE0 RID: 6880 RVA: 0x0004BCA0 File Offset: 0x00049EA0
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameter(All target, int index, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, @params, GL.EntryPoints[873]);
			}

			// Token: 0x06001AE1 RID: 6881 RVA: 0x0004BCB8 File Offset: 0x00049EB8
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameter(All target, uint index, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[873]);
				}
			}

			// Token: 0x06001AE2 RID: 6882 RVA: 0x0004BCF0 File Offset: 0x00049EF0
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameter(All target, uint index, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[873]);
				}
			}

			// Token: 0x06001AE3 RID: 6883 RVA: 0x0004BD14 File Offset: 0x00049F14
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameter(All target, uint index, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, @params, GL.EntryPoints[873]);
			}

			// Token: 0x06001AE4 RID: 6884 RVA: 0x0004BD2C File Offset: 0x00049F2C
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetProgramEnvParameter(ArbVertexProgram target, int index, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[873]);
				}
			}

			// Token: 0x06001AE5 RID: 6885 RVA: 0x0004BD64 File Offset: 0x00049F64
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetProgramEnvParameter(ArbVertexProgram target, int index, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[873]);
				}
			}

			// Token: 0x06001AE6 RID: 6886 RVA: 0x0004BD88 File Offset: 0x00049F88
			[Obsolete("Use All overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameter(ArbVertexProgram target, int index, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, @params, GL.EntryPoints[873]);
			}

			// Token: 0x06001AE7 RID: 6887 RVA: 0x0004BDA0 File Offset: 0x00049FA0
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetProgramEnvParameter(ArbVertexProgram target, uint index, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[873]);
				}
			}

			// Token: 0x06001AE8 RID: 6888 RVA: 0x0004BDD8 File Offset: 0x00049FD8
			[Obsolete("Use All overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameter(ArbVertexProgram target, uint index, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[873]);
				}
			}

			// Token: 0x06001AE9 RID: 6889 RVA: 0x0004BDFC File Offset: 0x00049FFC
			[Obsolete("Use All overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameter(ArbVertexProgram target, uint index, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, @params, GL.EntryPoints[873]);
			}

			// Token: 0x06001AEA RID: 6890 RVA: 0x0004BE14 File Offset: 0x0004A014
			[CLSCompliant(false)]
			public unsafe static void GetProgram(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[879]);
				}
			}

			// Token: 0x06001AEB RID: 6891 RVA: 0x0004BE38 File Offset: 0x0004A038
			[CLSCompliant(false)]
			public unsafe static void GetProgram(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[879]);
			}

			// Token: 0x06001AEC RID: 6892 RVA: 0x0004BE50 File Offset: 0x0004A050
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(All target, int index, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[881]);
				}
			}

			// Token: 0x06001AED RID: 6893 RVA: 0x0004BE88 File Offset: 0x0004A088
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(All target, int index, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[881]);
				}
			}

			// Token: 0x06001AEE RID: 6894 RVA: 0x0004BEAC File Offset: 0x0004A0AC
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(All target, int index, [Out] double* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, @params, GL.EntryPoints[881]);
			}

			// Token: 0x06001AEF RID: 6895 RVA: 0x0004BEC4 File Offset: 0x0004A0C4
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(All target, uint index, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[881]);
				}
			}

			// Token: 0x06001AF0 RID: 6896 RVA: 0x0004BEFC File Offset: 0x0004A0FC
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(All target, uint index, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[881]);
				}
			}

			// Token: 0x06001AF1 RID: 6897 RVA: 0x0004BF20 File Offset: 0x0004A120
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(All target, uint index, [Out] double* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, @params, GL.EntryPoints[881]);
			}

			// Token: 0x06001AF2 RID: 6898 RVA: 0x0004BF38 File Offset: 0x0004A138
			[Obsolete("Use All overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(ArbVertexProgram target, int index, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[881]);
				}
			}

			// Token: 0x06001AF3 RID: 6899 RVA: 0x0004BF70 File Offset: 0x0004A170
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetProgramLocalParameter(ArbVertexProgram target, int index, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[881]);
				}
			}

			// Token: 0x06001AF4 RID: 6900 RVA: 0x0004BF94 File Offset: 0x0004A194
			[Obsolete("Use All overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(ArbVertexProgram target, int index, [Out] double* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, @params, GL.EntryPoints[881]);
			}

			// Token: 0x06001AF5 RID: 6901 RVA: 0x0004BFAC File Offset: 0x0004A1AC
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetProgramLocalParameter(ArbVertexProgram target, uint index, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[881]);
				}
			}

			// Token: 0x06001AF6 RID: 6902 RVA: 0x0004BFE4 File Offset: 0x0004A1E4
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetProgramLocalParameter(ArbVertexProgram target, uint index, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[881]);
				}
			}

			// Token: 0x06001AF7 RID: 6903 RVA: 0x0004C008 File Offset: 0x0004A208
			[Obsolete("Use All overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(ArbVertexProgram target, uint index, [Out] double* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, @params, GL.EntryPoints[881]);
			}

			// Token: 0x06001AF8 RID: 6904 RVA: 0x0004C020 File Offset: 0x0004A220
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(All target, int index, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[882]);
				}
			}

			// Token: 0x06001AF9 RID: 6905 RVA: 0x0004C058 File Offset: 0x0004A258
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(All target, int index, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[882]);
				}
			}

			// Token: 0x06001AFA RID: 6906 RVA: 0x0004C07C File Offset: 0x0004A27C
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(All target, int index, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, @params, GL.EntryPoints[882]);
			}

			// Token: 0x06001AFB RID: 6907 RVA: 0x0004C094 File Offset: 0x0004A294
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(All target, uint index, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[882]);
				}
			}

			// Token: 0x06001AFC RID: 6908 RVA: 0x0004C0CC File Offset: 0x0004A2CC
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(All target, uint index, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[882]);
				}
			}

			// Token: 0x06001AFD RID: 6909 RVA: 0x0004C0F0 File Offset: 0x0004A2F0
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(All target, uint index, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, @params, GL.EntryPoints[882]);
			}

			// Token: 0x06001AFE RID: 6910 RVA: 0x0004C108 File Offset: 0x0004A308
			[Obsolete("Use All overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(ArbVertexProgram target, int index, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[882]);
				}
			}

			// Token: 0x06001AFF RID: 6911 RVA: 0x0004C140 File Offset: 0x0004A340
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetProgramLocalParameter(ArbVertexProgram target, int index, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[882]);
				}
			}

			// Token: 0x06001B00 RID: 6912 RVA: 0x0004C164 File Offset: 0x0004A364
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetProgramLocalParameter(ArbVertexProgram target, int index, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, @params, GL.EntryPoints[882]);
			}

			// Token: 0x06001B01 RID: 6913 RVA: 0x0004C17C File Offset: 0x0004A37C
			[Obsolete("Use All overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameter(ArbVertexProgram target, uint index, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[882]);
				}
			}

			// Token: 0x06001B02 RID: 6914 RVA: 0x0004C1B4 File Offset: 0x0004A3B4
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetProgramLocalParameter(ArbVertexProgram target, uint index, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[882]);
				}
			}

			// Token: 0x06001B03 RID: 6915 RVA: 0x0004C1D8 File Offset: 0x0004A3D8
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetProgramLocalParameter(ArbVertexProgram target, uint index, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, @params, GL.EntryPoints[882]);
			}

			// Token: 0x06001B04 RID: 6916 RVA: 0x0004C1F0 File Offset: 0x0004A3F0
			public static void GetProgramString(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, [Out] IntPtr @string)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, @string, GL.EntryPoints[899]);
			}

			// Token: 0x06001B05 RID: 6917 RVA: 0x0004C208 File Offset: 0x0004A408
			[CLSCompliant(false)]
			public unsafe static void GetProgramString<T2>(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, [In] [Out] T2[] @string) where T2 : struct
			{
				fixed (T2* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[899]);
				}
			}

			// Token: 0x06001B06 RID: 6918 RVA: 0x0004C240 File Offset: 0x0004A440
			[CLSCompliant(false)]
			public unsafe static void GetProgramString<T2>(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, [In] [Out] T2[,] @string) where T2 : struct
			{
				fixed (T2* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[899]);
				}
			}

			// Token: 0x06001B07 RID: 6919 RVA: 0x0004C27C File Offset: 0x0004A47C
			[CLSCompliant(false)]
			public unsafe static void GetProgramString<T2>(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, [In] [Out] T2[,,] @string) where T2 : struct
			{
				fixed (T2* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[899]);
				}
			}

			// Token: 0x06001B08 RID: 6920 RVA: 0x0004C2B8 File Offset: 0x0004A4B8
			public unsafe static void GetProgramString<T2>(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, [In] [Out] ref T2 @string) where T2 : struct
			{
				fixed (T2* ptr = &@string)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[899]);
				}
			}

			// Token: 0x06001B09 RID: 6921 RVA: 0x0004C2DC File Offset: 0x0004A4DC
			[CLSCompliant(false)]
			public unsafe static void GetQuery(ArbOcclusionQuery target, ArbOcclusionQuery pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[904]);
				}
			}

			// Token: 0x06001B0A RID: 6922 RVA: 0x0004C314 File Offset: 0x0004A514
			[CLSCompliant(false)]
			public unsafe static void GetQuery(ArbOcclusionQuery target, ArbOcclusionQuery pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[904]);
				}
			}

			// Token: 0x06001B0B RID: 6923 RVA: 0x0004C338 File Offset: 0x0004A538
			[CLSCompliant(false)]
			public unsafe static void GetQuery(ArbOcclusionQuery target, ArbOcclusionQuery pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[904]);
			}

			// Token: 0x06001B0C RID: 6924 RVA: 0x0004C350 File Offset: 0x0004A550
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, ArbOcclusionQuery pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[908]);
				}
			}

			// Token: 0x06001B0D RID: 6925 RVA: 0x0004C388 File Offset: 0x0004A588
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, ArbOcclusionQuery pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[908]);
				}
			}

			// Token: 0x06001B0E RID: 6926 RVA: 0x0004C3AC File Offset: 0x0004A5AC
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, ArbOcclusionQuery pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, @params, GL.EntryPoints[908]);
			}

			// Token: 0x06001B0F RID: 6927 RVA: 0x0004C3C4 File Offset: 0x0004A5C4
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, ArbOcclusionQuery pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[908]);
				}
			}

			// Token: 0x06001B10 RID: 6928 RVA: 0x0004C3FC File Offset: 0x0004A5FC
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, ArbOcclusionQuery pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[908]);
				}
			}

			// Token: 0x06001B11 RID: 6929 RVA: 0x0004C420 File Offset: 0x0004A620
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, ArbOcclusionQuery pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, @params, GL.EntryPoints[908]);
			}

			// Token: 0x06001B12 RID: 6930 RVA: 0x0004C438 File Offset: 0x0004A638
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, ArbOcclusionQuery pname, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[912]);
				}
			}

			// Token: 0x06001B13 RID: 6931 RVA: 0x0004C470 File Offset: 0x0004A670
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, ArbOcclusionQuery pname, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[912]);
				}
			}

			// Token: 0x06001B14 RID: 6932 RVA: 0x0004C494 File Offset: 0x0004A694
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, ArbOcclusionQuery pname, [Out] uint* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, @params, GL.EntryPoints[912]);
			}

			// Token: 0x06001B15 RID: 6933 RVA: 0x0004C4AC File Offset: 0x0004A6AC
			[CLSCompliant(false)]
			public unsafe static void GetShaderSource(int obj, int maxLength, out int length, [Out] StringBuilder source)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), obj, maxLength, ptr2, intPtr, GL.EntryPoints[925]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06001B16 RID: 6934 RVA: 0x0004C4EC File Offset: 0x0004A6EC
			[CLSCompliant(false)]
			public unsafe static void GetShaderSource(int obj, int maxLength, [Out] int* length, [Out] StringBuilder source)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), obj, maxLength, length, intPtr, GL.EntryPoints[925]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06001B17 RID: 6935 RVA: 0x0004C528 File Offset: 0x0004A728
			[CLSCompliant(false)]
			public unsafe static void GetShaderSource(uint obj, int maxLength, out int length, [Out] StringBuilder source)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), obj, maxLength, ptr2, intPtr, GL.EntryPoints[925]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06001B18 RID: 6936 RVA: 0x0004C568 File Offset: 0x0004A768
			[CLSCompliant(false)]
			public unsafe static void GetShaderSource(uint obj, int maxLength, [Out] int* length, [Out] StringBuilder source)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), obj, maxLength, length, intPtr, GL.EntryPoints[925]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06001B19 RID: 6937 RVA: 0x0004C5A4 File Offset: 0x0004A7A4
			[CLSCompliant(false)]
			public static long GetTextureHandle(int texture)
			{
				return calli(System.Int64(System.UInt32), texture, GL.EntryPoints[954]);
			}

			// Token: 0x06001B1A RID: 6938 RVA: 0x0004C5B8 File Offset: 0x0004A7B8
			[CLSCompliant(false)]
			public static long GetTextureHandle(uint texture)
			{
				return calli(System.Int64(System.UInt32), texture, GL.EntryPoints[954]);
			}

			// Token: 0x06001B1B RID: 6939 RVA: 0x0004C5CC File Offset: 0x0004A7CC
			[CLSCompliant(false)]
			public static long GetTextureSamplerHandle(int texture, int sampler)
			{
				return calli(System.Int64(System.UInt32,System.UInt32), texture, sampler, GL.EntryPoints[963]);
			}

			// Token: 0x06001B1C RID: 6940 RVA: 0x0004C5E0 File Offset: 0x0004A7E0
			[CLSCompliant(false)]
			public static long GetTextureSamplerHandle(uint texture, uint sampler)
			{
				return calli(System.Int64(System.UInt32,System.UInt32), texture, sampler, GL.EntryPoints[963]);
			}

			// Token: 0x06001B1D RID: 6941 RVA: 0x0004C5F4 File Offset: 0x0004A7F4
			[CLSCompliant(false)]
			public unsafe static void GetUniform(int programObj, int location, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), programObj, location, ptr, GL.EntryPoints[973]);
				}
			}

			// Token: 0x06001B1E RID: 6942 RVA: 0x0004C62C File Offset: 0x0004A82C
			[CLSCompliant(false)]
			public unsafe static void GetUniform(int programObj, int location, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), programObj, location, ptr, GL.EntryPoints[973]);
				}
			}

			// Token: 0x06001B1F RID: 6943 RVA: 0x0004C650 File Offset: 0x0004A850
			[CLSCompliant(false)]
			public unsafe static void GetUniform(int programObj, int location, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), programObj, location, @params, GL.EntryPoints[973]);
			}

			// Token: 0x06001B20 RID: 6944 RVA: 0x0004C668 File Offset: 0x0004A868
			[CLSCompliant(false)]
			public unsafe static void GetUniform(uint programObj, int location, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), programObj, location, ptr, GL.EntryPoints[973]);
				}
			}

			// Token: 0x06001B21 RID: 6945 RVA: 0x0004C6A0 File Offset: 0x0004A8A0
			[CLSCompliant(false)]
			public unsafe static void GetUniform(uint programObj, int location, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), programObj, location, ptr, GL.EntryPoints[973]);
				}
			}

			// Token: 0x06001B22 RID: 6946 RVA: 0x0004C6C4 File Offset: 0x0004A8C4
			[CLSCompliant(false)]
			public unsafe static void GetUniform(uint programObj, int location, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), programObj, location, @params, GL.EntryPoints[973]);
			}

			// Token: 0x06001B23 RID: 6947 RVA: 0x0004C6DC File Offset: 0x0004A8DC
			[CLSCompliant(false)]
			public unsafe static void GetUniform(int programObj, int location, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), programObj, location, ptr, GL.EntryPoints[977]);
				}
			}

			// Token: 0x06001B24 RID: 6948 RVA: 0x0004C714 File Offset: 0x0004A914
			[CLSCompliant(false)]
			public unsafe static void GetUniform(int programObj, int location, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), programObj, location, ptr, GL.EntryPoints[977]);
				}
			}

			// Token: 0x06001B25 RID: 6949 RVA: 0x0004C738 File Offset: 0x0004A938
			[CLSCompliant(false)]
			public unsafe static void GetUniform(int programObj, int location, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), programObj, location, @params, GL.EntryPoints[977]);
			}

			// Token: 0x06001B26 RID: 6950 RVA: 0x0004C750 File Offset: 0x0004A950
			[CLSCompliant(false)]
			public unsafe static void GetUniform(uint programObj, int location, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), programObj, location, ptr, GL.EntryPoints[977]);
				}
			}

			// Token: 0x06001B27 RID: 6951 RVA: 0x0004C788 File Offset: 0x0004A988
			[CLSCompliant(false)]
			public unsafe static void GetUniform(uint programObj, int location, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), programObj, location, ptr, GL.EntryPoints[977]);
				}
			}

			// Token: 0x06001B28 RID: 6952 RVA: 0x0004C7AC File Offset: 0x0004A9AC
			[CLSCompliant(false)]
			public unsafe static void GetUniform(uint programObj, int location, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), programObj, location, @params, GL.EntryPoints[977]);
			}

			// Token: 0x06001B29 RID: 6953 RVA: 0x0004C7C4 File Offset: 0x0004A9C4
			[CLSCompliant(false)]
			public static int GetUniformLocation(int programObj, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				int result = calli(System.Int32(System.UInt32,System.IntPtr), programObj, intPtr, GL.EntryPoints[979]);
				BindingsBase.FreeStringPtr(intPtr);
				return result;
			}

			// Token: 0x06001B2A RID: 6954 RVA: 0x0004C7F0 File Offset: 0x0004A9F0
			[CLSCompliant(false)]
			public static int GetUniformLocation(uint programObj, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				int result = calli(System.Int32(System.UInt32,System.IntPtr), programObj, intPtr, GL.EntryPoints[979]);
				BindingsBase.FreeStringPtr(intPtr);
				return result;
			}

			// Token: 0x06001B2B RID: 6955 RVA: 0x0004C81C File Offset: 0x0004AA1C
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, VertexAttribParameterArb pname, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[999]);
				}
			}

			// Token: 0x06001B2C RID: 6956 RVA: 0x0004C854 File Offset: 0x0004AA54
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, VertexAttribParameterArb pname, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[999]);
				}
			}

			// Token: 0x06001B2D RID: 6957 RVA: 0x0004C878 File Offset: 0x0004AA78
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, VertexAttribParameterArb pname, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, @params, GL.EntryPoints[999]);
			}

			// Token: 0x06001B2E RID: 6958 RVA: 0x0004C890 File Offset: 0x0004AA90
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(uint index, VertexAttribParameterArb pname, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[999]);
				}
			}

			// Token: 0x06001B2F RID: 6959 RVA: 0x0004C8C8 File Offset: 0x0004AAC8
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(uint index, VertexAttribParameterArb pname, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[999]);
				}
			}

			// Token: 0x06001B30 RID: 6960 RVA: 0x0004C8EC File Offset: 0x0004AAEC
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(uint index, VertexAttribParameterArb pname, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, @params, GL.EntryPoints[999]);
			}

			// Token: 0x06001B31 RID: 6961 RVA: 0x0004C904 File Offset: 0x0004AB04
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, VertexAttribParameterArb pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[1002]);
				}
			}

			// Token: 0x06001B32 RID: 6962 RVA: 0x0004C93C File Offset: 0x0004AB3C
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, VertexAttribParameterArb pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[1002]);
				}
			}

			// Token: 0x06001B33 RID: 6963 RVA: 0x0004C960 File Offset: 0x0004AB60
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, VertexAttribParameterArb pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, @params, GL.EntryPoints[1002]);
			}

			// Token: 0x06001B34 RID: 6964 RVA: 0x0004C978 File Offset: 0x0004AB78
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(uint index, VertexAttribParameterArb pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[1002]);
				}
			}

			// Token: 0x06001B35 RID: 6965 RVA: 0x0004C9B0 File Offset: 0x0004ABB0
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(uint index, VertexAttribParameterArb pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[1002]);
				}
			}

			// Token: 0x06001B36 RID: 6966 RVA: 0x0004C9D4 File Offset: 0x0004ABD4
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(uint index, VertexAttribParameterArb pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, @params, GL.EntryPoints[1002]);
			}

			// Token: 0x06001B37 RID: 6967 RVA: 0x0004C9EC File Offset: 0x0004ABEC
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, VertexAttribParameterArb pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[1009]);
				}
			}

			// Token: 0x06001B38 RID: 6968 RVA: 0x0004CA24 File Offset: 0x0004AC24
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, VertexAttribParameterArb pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[1009]);
				}
			}

			// Token: 0x06001B39 RID: 6969 RVA: 0x0004CA48 File Offset: 0x0004AC48
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, VertexAttribParameterArb pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[1009]);
			}

			// Token: 0x06001B3A RID: 6970 RVA: 0x0004CA60 File Offset: 0x0004AC60
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(uint index, VertexAttribParameterArb pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[1009]);
				}
			}

			// Token: 0x06001B3B RID: 6971 RVA: 0x0004CA98 File Offset: 0x0004AC98
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(uint index, VertexAttribParameterArb pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[1009]);
				}
			}

			// Token: 0x06001B3C RID: 6972 RVA: 0x0004CABC File Offset: 0x0004ACBC
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(uint index, VertexAttribParameterArb pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[1009]);
			}

			// Token: 0x06001B3D RID: 6973 RVA: 0x0004CAD4 File Offset: 0x0004ACD4
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(int index, VertexAttribParameterArb pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), index, pname, ptr, GL.EntryPoints[1014]);
				}
			}

			// Token: 0x06001B3E RID: 6974 RVA: 0x0004CB0C File Offset: 0x0004AD0C
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(int index, VertexAttribParameterArb pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), index, pname, ptr, GL.EntryPoints[1014]);
				}
			}

			// Token: 0x06001B3F RID: 6975 RVA: 0x0004CB30 File Offset: 0x0004AD30
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(int index, VertexAttribParameterArb pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), index, pname, @params, GL.EntryPoints[1014]);
			}

			// Token: 0x06001B40 RID: 6976 RVA: 0x0004CB48 File Offset: 0x0004AD48
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(uint index, VertexAttribParameterArb pname, [Out] ulong[] @params)
			{
				fixed (ulong* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), index, pname, ptr, GL.EntryPoints[1014]);
				}
			}

			// Token: 0x06001B41 RID: 6977 RVA: 0x0004CB80 File Offset: 0x0004AD80
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(uint index, VertexAttribParameterArb pname, out ulong @params)
			{
				fixed (ulong* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), index, pname, ptr, GL.EntryPoints[1014]);
				}
			}

			// Token: 0x06001B42 RID: 6978 RVA: 0x0004CBA4 File Offset: 0x0004ADA4
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(uint index, VertexAttribParameterArb pname, [Out] ulong* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), index, pname, @params, GL.EntryPoints[1014]);
			}

			// Token: 0x06001B43 RID: 6979 RVA: 0x0004CBBC File Offset: 0x0004ADBC
			[CLSCompliant(false)]
			public static void GetVertexAttribPointer(int index, VertexAttribPointerParameterArb pname, [Out] IntPtr pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, pointer, GL.EntryPoints[1017]);
			}

			// Token: 0x06001B44 RID: 6980 RVA: 0x0004CBD4 File Offset: 0x0004ADD4
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameterArb pname, [In] [Out] T2[] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1017]);
				}
			}

			// Token: 0x06001B45 RID: 6981 RVA: 0x0004CC0C File Offset: 0x0004AE0C
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameterArb pname, [In] [Out] T2[,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1017]);
				}
			}

			// Token: 0x06001B46 RID: 6982 RVA: 0x0004CC48 File Offset: 0x0004AE48
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameterArb pname, [In] [Out] T2[,,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1017]);
				}
			}

			// Token: 0x06001B47 RID: 6983 RVA: 0x0004CC84 File Offset: 0x0004AE84
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameterArb pname, [In] [Out] ref T2 pointer) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1017]);
				}
			}

			// Token: 0x06001B48 RID: 6984 RVA: 0x0004CCA8 File Offset: 0x0004AEA8
			[CLSCompliant(false)]
			public static void GetVertexAttribPointer(uint index, VertexAttribPointerParameterArb pname, [Out] IntPtr pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, pointer, GL.EntryPoints[1017]);
			}

			// Token: 0x06001B49 RID: 6985 RVA: 0x0004CCC0 File Offset: 0x0004AEC0
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameterArb pname, [In] [Out] T2[] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1017]);
				}
			}

			// Token: 0x06001B4A RID: 6986 RVA: 0x0004CCF8 File Offset: 0x0004AEF8
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameterArb pname, [In] [Out] T2[,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1017]);
				}
			}

			// Token: 0x06001B4B RID: 6987 RVA: 0x0004CD34 File Offset: 0x0004AF34
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameterArb pname, [In] [Out] T2[,,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1017]);
				}
			}

			// Token: 0x06001B4C RID: 6988 RVA: 0x0004CD70 File Offset: 0x0004AF70
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameterArb pname, [In] [Out] ref T2 pointer) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1017]);
				}
			}

			// Token: 0x06001B4D RID: 6989 RVA: 0x0004CD94 File Offset: 0x0004AF94
			[CLSCompliant(false)]
			public static bool IsBuffer(int buffer)
			{
				return calli(System.Byte(System.UInt32), buffer, GL.EntryPoints[1078]);
			}

			// Token: 0x06001B4E RID: 6990 RVA: 0x0004CDA8 File Offset: 0x0004AFA8
			[CLSCompliant(false)]
			public static bool IsBuffer(uint buffer)
			{
				return calli(System.Byte(System.UInt32), buffer, GL.EntryPoints[1078]);
			}

			// Token: 0x06001B4F RID: 6991 RVA: 0x0004CDBC File Offset: 0x0004AFBC
			[CLSCompliant(false)]
			public static bool IsImageHandleResident(long handle)
			{
				return calli(System.Byte(System.UInt64), handle, GL.EntryPoints[1087]);
			}

			// Token: 0x06001B50 RID: 6992 RVA: 0x0004CDD0 File Offset: 0x0004AFD0
			[CLSCompliant(false)]
			public static bool IsImageHandleResident(ulong handle)
			{
				return calli(System.Byte(System.UInt64), handle, GL.EntryPoints[1087]);
			}

			// Token: 0x06001B51 RID: 6993 RVA: 0x0004CDE4 File Offset: 0x0004AFE4
			public static bool IsNamedString(int namelen, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				bool result = calli(System.Byte(System.Int32,System.IntPtr), namelen, intPtr, GL.EntryPoints[1092]);
				BindingsBase.FreeStringPtr(intPtr);
				return result;
			}

			// Token: 0x06001B52 RID: 6994 RVA: 0x0004CE10 File Offset: 0x0004B010
			[CLSCompliant(false)]
			public static bool IsProgram(int program)
			{
				return calli(System.Byte(System.UInt32), program, GL.EntryPoints[1099]);
			}

			// Token: 0x06001B53 RID: 6995 RVA: 0x0004CE24 File Offset: 0x0004B024
			[CLSCompliant(false)]
			public static bool IsProgram(uint program)
			{
				return calli(System.Byte(System.UInt32), program, GL.EntryPoints[1099]);
			}

			// Token: 0x06001B54 RID: 6996 RVA: 0x0004CE38 File Offset: 0x0004B038
			[CLSCompliant(false)]
			public static bool IsQuery(int id)
			{
				return calli(System.Byte(System.UInt32), id, GL.EntryPoints[1104]);
			}

			// Token: 0x06001B55 RID: 6997 RVA: 0x0004CE4C File Offset: 0x0004B04C
			[CLSCompliant(false)]
			public static bool IsQuery(uint id)
			{
				return calli(System.Byte(System.UInt32), id, GL.EntryPoints[1104]);
			}

			// Token: 0x06001B56 RID: 6998 RVA: 0x0004CE60 File Offset: 0x0004B060
			[CLSCompliant(false)]
			public static bool IsTextureHandleResident(long handle)
			{
				return calli(System.Byte(System.UInt64), handle, GL.EntryPoints[1112]);
			}

			// Token: 0x06001B57 RID: 6999 RVA: 0x0004CE74 File Offset: 0x0004B074
			[CLSCompliant(false)]
			public static bool IsTextureHandleResident(ulong handle)
			{
				return calli(System.Byte(System.UInt64), handle, GL.EntryPoints[1112]);
			}

			// Token: 0x06001B58 RID: 7000 RVA: 0x0004CE88 File Offset: 0x0004B088
			[CLSCompliant(false)]
			public static void LinkProgram(int programObj)
			{
				calli(System.Void(System.UInt32), programObj, GL.EntryPoints[1138]);
			}

			// Token: 0x06001B59 RID: 7001 RVA: 0x0004CE9C File Offset: 0x0004B09C
			[CLSCompliant(false)]
			public static void LinkProgram(uint programObj)
			{
				calli(System.Void(System.UInt32), programObj, GL.EntryPoints[1138]);
			}

			// Token: 0x06001B5A RID: 7002 RVA: 0x0004CEB0 File Offset: 0x0004B0B0
			[CLSCompliant(false)]
			public unsafe static void LoadTransposeMatrix(double[] m)
			{
				fixed (double* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[1152]);
				}
			}

			// Token: 0x06001B5B RID: 7003 RVA: 0x0004CEE4 File Offset: 0x0004B0E4
			[CLSCompliant(false)]
			public unsafe static void LoadTransposeMatrix(ref double m)
			{
				fixed (double* ptr = &m)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[1152]);
				}
			}

			// Token: 0x06001B5C RID: 7004 RVA: 0x0004CF08 File Offset: 0x0004B108
			[CLSCompliant(false)]
			public unsafe static void LoadTransposeMatrix(double* m)
			{
				calli(System.Void(System.Double*), m, GL.EntryPoints[1152]);
			}

			// Token: 0x06001B5D RID: 7005 RVA: 0x0004CF1C File Offset: 0x0004B11C
			[CLSCompliant(false)]
			public unsafe static void LoadTransposeMatrix(float[] m)
			{
				fixed (float* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[1154]);
				}
			}

			// Token: 0x06001B5E RID: 7006 RVA: 0x0004CF50 File Offset: 0x0004B150
			[CLSCompliant(false)]
			public unsafe static void LoadTransposeMatrix(ref float m)
			{
				fixed (float* ptr = &m)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[1154]);
				}
			}

			// Token: 0x06001B5F RID: 7007 RVA: 0x0004CF74 File Offset: 0x0004B174
			[CLSCompliant(false)]
			public unsafe static void LoadTransposeMatrix(float* m)
			{
				calli(System.Void(System.Single*), m, GL.EntryPoints[1154]);
			}

			// Token: 0x06001B60 RID: 7008 RVA: 0x0004CF88 File Offset: 0x0004B188
			[CLSCompliant(false)]
			public static void MakeImageHandleNonResident(long handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[1160]);
			}

			// Token: 0x06001B61 RID: 7009 RVA: 0x0004CF9C File Offset: 0x0004B19C
			[CLSCompliant(false)]
			public static void MakeImageHandleNonResident(ulong handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[1160]);
			}

			// Token: 0x06001B62 RID: 7010 RVA: 0x0004CFB0 File Offset: 0x0004B1B0
			[CLSCompliant(false)]
			public static void MakeImageHandleResident(long handle, ArbBindlessTexture access)
			{
				calli(System.Void(System.UInt64,System.Int32), handle, access, GL.EntryPoints[1162]);
			}

			// Token: 0x06001B63 RID: 7011 RVA: 0x0004CFC4 File Offset: 0x0004B1C4
			[CLSCompliant(false)]
			public static void MakeImageHandleResident(ulong handle, ArbBindlessTexture access)
			{
				calli(System.Void(System.UInt64,System.Int32), handle, access, GL.EntryPoints[1162]);
			}

			// Token: 0x06001B64 RID: 7012 RVA: 0x0004CFD8 File Offset: 0x0004B1D8
			[CLSCompliant(false)]
			public static void MakeTextureHandleNonResident(long handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[1166]);
			}

			// Token: 0x06001B65 RID: 7013 RVA: 0x0004CFEC File Offset: 0x0004B1EC
			[CLSCompliant(false)]
			public static void MakeTextureHandleNonResident(ulong handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[1166]);
			}

			// Token: 0x06001B66 RID: 7014 RVA: 0x0004D000 File Offset: 0x0004B200
			[CLSCompliant(false)]
			public static void MakeTextureHandleResident(long handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[1168]);
			}

			// Token: 0x06001B67 RID: 7015 RVA: 0x0004D014 File Offset: 0x0004B214
			[CLSCompliant(false)]
			public static void MakeTextureHandleResident(ulong handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[1168]);
			}

			// Token: 0x06001B68 RID: 7016 RVA: 0x0004D028 File Offset: 0x0004B228
			[Obsolete("Use BufferAccessArb overload instead")]
			public static IntPtr MapBuffer(BufferTargetArb target, ArbVertexBufferObject access)
			{
				return calli(System.IntPtr(System.Int32,System.Int32), target, access, GL.EntryPoints[1177]);
			}

			// Token: 0x06001B69 RID: 7017 RVA: 0x0004D03C File Offset: 0x0004B23C
			public static IntPtr MapBuffer(BufferTargetArb target, BufferAccessArb access)
			{
				return calli(System.IntPtr(System.Int32,System.Int32), target, access, GL.EntryPoints[1177]);
			}

			// Token: 0x06001B6A RID: 7018 RVA: 0x0004D050 File Offset: 0x0004B250
			public static void MatrixIndexPointer(int size, ArbMatrixPalette type, int stride, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, pointer, GL.EntryPoints[1203]);
			}

			// Token: 0x06001B6B RID: 7019 RVA: 0x0004D068 File Offset: 0x0004B268
			[CLSCompliant(false)]
			public unsafe static void MatrixIndexPointer<T3>(int size, ArbMatrixPalette type, int stride, [In] [Out] T3[] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[1203]);
				}
			}

			// Token: 0x06001B6C RID: 7020 RVA: 0x0004D0A0 File Offset: 0x0004B2A0
			[CLSCompliant(false)]
			public unsafe static void MatrixIndexPointer<T3>(int size, ArbMatrixPalette type, int stride, [In] [Out] T3[,] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[1203]);
				}
			}

			// Token: 0x06001B6D RID: 7021 RVA: 0x0004D0DC File Offset: 0x0004B2DC
			[CLSCompliant(false)]
			public unsafe static void MatrixIndexPointer<T3>(int size, ArbMatrixPalette type, int stride, [In] [Out] T3[,,] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[1203]);
				}
			}

			// Token: 0x06001B6E RID: 7022 RVA: 0x0004D118 File Offset: 0x0004B318
			public unsafe static void MatrixIndexPointer<T3>(int size, ArbMatrixPalette type, int stride, [In] [Out] ref T3 pointer) where T3 : struct
			{
				fixed (T3* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[1203]);
				}
			}

			// Token: 0x06001B6F RID: 7023 RVA: 0x0004D13C File Offset: 0x0004B33C
			[CLSCompliant(false)]
			public unsafe static void MatrixIndex(int size, byte[] indices)
			{
				fixed (byte* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Byte*), size, ptr, GL.EntryPoints[1204]);
				}
			}

			// Token: 0x06001B70 RID: 7024 RVA: 0x0004D170 File Offset: 0x0004B370
			[CLSCompliant(false)]
			public unsafe static void MatrixIndex(int size, ref byte indices)
			{
				fixed (byte* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.Byte*), size, ptr, GL.EntryPoints[1204]);
				}
			}

			// Token: 0x06001B71 RID: 7025 RVA: 0x0004D194 File Offset: 0x0004B394
			[CLSCompliant(false)]
			public unsafe static void MatrixIndex(int size, byte* indices)
			{
				calli(System.Void(System.Int32,System.Byte*), size, indices, GL.EntryPoints[1204]);
			}

			// Token: 0x06001B72 RID: 7026 RVA: 0x0004D1A8 File Offset: 0x0004B3A8
			[CLSCompliant(false)]
			public unsafe static void MatrixIndex(int size, int[] indices)
			{
				fixed (int* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), size, ptr, GL.EntryPoints[1205]);
				}
			}

			// Token: 0x06001B73 RID: 7027 RVA: 0x0004D1DC File Offset: 0x0004B3DC
			[CLSCompliant(false)]
			public unsafe static void MatrixIndex(int size, ref int indices)
			{
				fixed (int* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.UInt32*), size, ptr, GL.EntryPoints[1205]);
				}
			}

			// Token: 0x06001B74 RID: 7028 RVA: 0x0004D200 File Offset: 0x0004B400
			[CLSCompliant(false)]
			public unsafe static void MatrixIndex(int size, int* indices)
			{
				calli(System.Void(System.Int32,System.UInt32*), size, indices, GL.EntryPoints[1205]);
			}

			// Token: 0x06001B75 RID: 7029 RVA: 0x0004D214 File Offset: 0x0004B414
			[CLSCompliant(false)]
			public unsafe static void MatrixIndex(int size, uint[] indices)
			{
				fixed (uint* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), size, ptr, GL.EntryPoints[1205]);
				}
			}

			// Token: 0x06001B76 RID: 7030 RVA: 0x0004D248 File Offset: 0x0004B448
			[CLSCompliant(false)]
			public unsafe static void MatrixIndex(int size, ref uint indices)
			{
				fixed (uint* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.UInt32*), size, ptr, GL.EntryPoints[1205]);
				}
			}

			// Token: 0x06001B77 RID: 7031 RVA: 0x0004D26C File Offset: 0x0004B46C
			[CLSCompliant(false)]
			public unsafe static void MatrixIndex(int size, uint* indices)
			{
				calli(System.Void(System.Int32,System.UInt32*), size, indices, GL.EntryPoints[1205]);
			}

			// Token: 0x06001B78 RID: 7032 RVA: 0x0004D280 File Offset: 0x0004B480
			[CLSCompliant(false)]
			public unsafe static void MatrixIndex(int size, short[] indices)
			{
				fixed (short* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt16*), size, ptr, GL.EntryPoints[1206]);
				}
			}

			// Token: 0x06001B79 RID: 7033 RVA: 0x0004D2B4 File Offset: 0x0004B4B4
			[CLSCompliant(false)]
			public unsafe static void MatrixIndex(int size, ref short indices)
			{
				fixed (short* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.UInt16*), size, ptr, GL.EntryPoints[1206]);
				}
			}

			// Token: 0x06001B7A RID: 7034 RVA: 0x0004D2D8 File Offset: 0x0004B4D8
			[CLSCompliant(false)]
			public unsafe static void MatrixIndex(int size, short* indices)
			{
				calli(System.Void(System.Int32,System.UInt16*), size, indices, GL.EntryPoints[1206]);
			}

			// Token: 0x06001B7B RID: 7035 RVA: 0x0004D2EC File Offset: 0x0004B4EC
			[CLSCompliant(false)]
			public unsafe static void MatrixIndex(int size, ushort[] indices)
			{
				fixed (ushort* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt16*), size, ptr, GL.EntryPoints[1206]);
				}
			}

			// Token: 0x06001B7C RID: 7036 RVA: 0x0004D320 File Offset: 0x0004B520
			[CLSCompliant(false)]
			public unsafe static void MatrixIndex(int size, ref ushort indices)
			{
				fixed (ushort* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.UInt16*), size, ptr, GL.EntryPoints[1206]);
				}
			}

			// Token: 0x06001B7D RID: 7037 RVA: 0x0004D344 File Offset: 0x0004B544
			[CLSCompliant(false)]
			public unsafe static void MatrixIndex(int size, ushort* indices)
			{
				calli(System.Void(System.Int32,System.UInt16*), size, indices, GL.EntryPoints[1206]);
			}

			// Token: 0x06001B7E RID: 7038 RVA: 0x0004D358 File Offset: 0x0004B558
			public static void MinSampleShading(float value)
			{
				calli(System.Void(System.Single), value, GL.EntryPoints[1231]);
			}

			// Token: 0x06001B7F RID: 7039 RVA: 0x0004D36C File Offset: 0x0004B56C
			public static void MultiDrawArraysIndirectCount(ArbIndirectParameters mode, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32), mode, indirect, drawcount, maxdrawcount, stride, GL.EntryPoints[1237]);
			}

			// Token: 0x06001B80 RID: 7040 RVA: 0x0004D384 File Offset: 0x0004B584
			public static void MultiDrawElementsIndirectCount(ArbIndirectParameters mode, ArbIndirectParameters type, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32), mode, type, indirect, drawcount, maxdrawcount, stride, GL.EntryPoints[1245]);
			}

			// Token: 0x06001B81 RID: 7041 RVA: 0x0004D3A0 File Offset: 0x0004B5A0
			public static void MultiTexCoord1(TextureUnit target, double s)
			{
				calli(System.Void(System.Int32,System.Double), target, s, GL.EntryPoints[1253]);
			}

			// Token: 0x06001B82 RID: 7042 RVA: 0x0004D3B4 File Offset: 0x0004B5B4
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord1(TextureUnit target, double* v)
			{
				calli(System.Void(System.Int32,System.Double*), target, v, GL.EntryPoints[1255]);
			}

			// Token: 0x06001B83 RID: 7043 RVA: 0x0004D3C8 File Offset: 0x0004B5C8
			public static void MultiTexCoord1(TextureUnit target, float s)
			{
				calli(System.Void(System.Int32,System.Single), target, s, GL.EntryPoints[1257]);
			}

			// Token: 0x06001B84 RID: 7044 RVA: 0x0004D3DC File Offset: 0x0004B5DC
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord1(TextureUnit target, float* v)
			{
				calli(System.Void(System.Int32,System.Single*), target, v, GL.EntryPoints[1259]);
			}

			// Token: 0x06001B85 RID: 7045 RVA: 0x0004D3F0 File Offset: 0x0004B5F0
			public static void MultiTexCoord1(TextureUnit target, int s)
			{
				calli(System.Void(System.Int32,System.Int32), target, s, GL.EntryPoints[1263]);
			}

			// Token: 0x06001B86 RID: 7046 RVA: 0x0004D404 File Offset: 0x0004B604
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord1(TextureUnit target, int* v)
			{
				calli(System.Void(System.Int32,System.Int32*), target, v, GL.EntryPoints[1265]);
			}

			// Token: 0x06001B87 RID: 7047 RVA: 0x0004D418 File Offset: 0x0004B618
			public static void MultiTexCoord1(TextureUnit target, short s)
			{
				calli(System.Void(System.Int32,System.Int16), target, s, GL.EntryPoints[1267]);
			}

			// Token: 0x06001B88 RID: 7048 RVA: 0x0004D42C File Offset: 0x0004B62C
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord1(TextureUnit target, short* v)
			{
				calli(System.Void(System.Int32,System.Int16*), target, v, GL.EntryPoints[1269]);
			}

			// Token: 0x06001B89 RID: 7049 RVA: 0x0004D440 File Offset: 0x0004B640
			public static void MultiTexCoord2(TextureUnit target, double s, double t)
			{
				calli(System.Void(System.Int32,System.Double,System.Double), target, s, t, GL.EntryPoints[1275]);
			}

			// Token: 0x06001B8A RID: 7050 RVA: 0x0004D458 File Offset: 0x0004B658
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(TextureUnit target, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Double*), target, ptr, GL.EntryPoints[1277]);
				}
			}

			// Token: 0x06001B8B RID: 7051 RVA: 0x0004D48C File Offset: 0x0004B68C
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(TextureUnit target, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Double*), target, ptr, GL.EntryPoints[1277]);
				}
			}

			// Token: 0x06001B8C RID: 7052 RVA: 0x0004D4B0 File Offset: 0x0004B6B0
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(TextureUnit target, double* v)
			{
				calli(System.Void(System.Int32,System.Double*), target, v, GL.EntryPoints[1277]);
			}

			// Token: 0x06001B8D RID: 7053 RVA: 0x0004D4C4 File Offset: 0x0004B6C4
			public static void MultiTexCoord2(TextureUnit target, float s, float t)
			{
				calli(System.Void(System.Int32,System.Single,System.Single), target, s, t, GL.EntryPoints[1279]);
			}

			// Token: 0x06001B8E RID: 7054 RVA: 0x0004D4DC File Offset: 0x0004B6DC
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(TextureUnit target, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), target, ptr, GL.EntryPoints[1281]);
				}
			}

			// Token: 0x06001B8F RID: 7055 RVA: 0x0004D510 File Offset: 0x0004B710
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(TextureUnit target, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Single*), target, ptr, GL.EntryPoints[1281]);
				}
			}

			// Token: 0x06001B90 RID: 7056 RVA: 0x0004D534 File Offset: 0x0004B734
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(TextureUnit target, float* v)
			{
				calli(System.Void(System.Int32,System.Single*), target, v, GL.EntryPoints[1281]);
			}

			// Token: 0x06001B91 RID: 7057 RVA: 0x0004D548 File Offset: 0x0004B748
			public static void MultiTexCoord2(TextureUnit target, int s, int t)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), target, s, t, GL.EntryPoints[1285]);
			}

			// Token: 0x06001B92 RID: 7058 RVA: 0x0004D560 File Offset: 0x0004B760
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(TextureUnit target, int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), target, ptr, GL.EntryPoints[1287]);
				}
			}

			// Token: 0x06001B93 RID: 7059 RVA: 0x0004D594 File Offset: 0x0004B794
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(TextureUnit target, ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Int32*), target, ptr, GL.EntryPoints[1287]);
				}
			}

			// Token: 0x06001B94 RID: 7060 RVA: 0x0004D5B8 File Offset: 0x0004B7B8
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(TextureUnit target, int* v)
			{
				calli(System.Void(System.Int32,System.Int32*), target, v, GL.EntryPoints[1287]);
			}

			// Token: 0x06001B95 RID: 7061 RVA: 0x0004D5CC File Offset: 0x0004B7CC
			public static void MultiTexCoord2(TextureUnit target, short s, short t)
			{
				calli(System.Void(System.Int32,System.Int16,System.Int16), target, s, t, GL.EntryPoints[1289]);
			}

			// Token: 0x06001B96 RID: 7062 RVA: 0x0004D5E4 File Offset: 0x0004B7E4
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(TextureUnit target, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int16*), target, ptr, GL.EntryPoints[1291]);
				}
			}

			// Token: 0x06001B97 RID: 7063 RVA: 0x0004D618 File Offset: 0x0004B818
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(TextureUnit target, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Int16*), target, ptr, GL.EntryPoints[1291]);
				}
			}

			// Token: 0x06001B98 RID: 7064 RVA: 0x0004D63C File Offset: 0x0004B83C
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(TextureUnit target, short* v)
			{
				calli(System.Void(System.Int32,System.Int16*), target, v, GL.EntryPoints[1291]);
			}

			// Token: 0x06001B99 RID: 7065 RVA: 0x0004D650 File Offset: 0x0004B850
			public static void MultiTexCoord3(TextureUnit target, double s, double t, double r)
			{
				calli(System.Void(System.Int32,System.Double,System.Double,System.Double), target, s, t, r, GL.EntryPoints[1297]);
			}

			// Token: 0x06001B9A RID: 7066 RVA: 0x0004D668 File Offset: 0x0004B868
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(TextureUnit target, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Double*), target, ptr, GL.EntryPoints[1299]);
				}
			}

			// Token: 0x06001B9B RID: 7067 RVA: 0x0004D69C File Offset: 0x0004B89C
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(TextureUnit target, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Double*), target, ptr, GL.EntryPoints[1299]);
				}
			}

			// Token: 0x06001B9C RID: 7068 RVA: 0x0004D6C0 File Offset: 0x0004B8C0
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(TextureUnit target, double* v)
			{
				calli(System.Void(System.Int32,System.Double*), target, v, GL.EntryPoints[1299]);
			}

			// Token: 0x06001B9D RID: 7069 RVA: 0x0004D6D4 File Offset: 0x0004B8D4
			public static void MultiTexCoord3(TextureUnit target, float s, float t, float r)
			{
				calli(System.Void(System.Int32,System.Single,System.Single,System.Single), target, s, t, r, GL.EntryPoints[1301]);
			}

			// Token: 0x06001B9E RID: 7070 RVA: 0x0004D6EC File Offset: 0x0004B8EC
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(TextureUnit target, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), target, ptr, GL.EntryPoints[1303]);
				}
			}

			// Token: 0x06001B9F RID: 7071 RVA: 0x0004D720 File Offset: 0x0004B920
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(TextureUnit target, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Single*), target, ptr, GL.EntryPoints[1303]);
				}
			}

			// Token: 0x06001BA0 RID: 7072 RVA: 0x0004D744 File Offset: 0x0004B944
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(TextureUnit target, float* v)
			{
				calli(System.Void(System.Int32,System.Single*), target, v, GL.EntryPoints[1303]);
			}

			// Token: 0x06001BA1 RID: 7073 RVA: 0x0004D758 File Offset: 0x0004B958
			public static void MultiTexCoord3(TextureUnit target, int s, int t, int r)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), target, s, t, r, GL.EntryPoints[1307]);
			}

			// Token: 0x06001BA2 RID: 7074 RVA: 0x0004D770 File Offset: 0x0004B970
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(TextureUnit target, int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), target, ptr, GL.EntryPoints[1309]);
				}
			}

			// Token: 0x06001BA3 RID: 7075 RVA: 0x0004D7A4 File Offset: 0x0004B9A4
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(TextureUnit target, ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Int32*), target, ptr, GL.EntryPoints[1309]);
				}
			}

			// Token: 0x06001BA4 RID: 7076 RVA: 0x0004D7C8 File Offset: 0x0004B9C8
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(TextureUnit target, int* v)
			{
				calli(System.Void(System.Int32,System.Int32*), target, v, GL.EntryPoints[1309]);
			}

			// Token: 0x06001BA5 RID: 7077 RVA: 0x0004D7DC File Offset: 0x0004B9DC
			public static void MultiTexCoord3(TextureUnit target, short s, short t, short r)
			{
				calli(System.Void(System.Int32,System.Int16,System.Int16,System.Int16), target, s, t, r, GL.EntryPoints[1311]);
			}

			// Token: 0x06001BA6 RID: 7078 RVA: 0x0004D7F4 File Offset: 0x0004B9F4
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(TextureUnit target, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int16*), target, ptr, GL.EntryPoints[1313]);
				}
			}

			// Token: 0x06001BA7 RID: 7079 RVA: 0x0004D828 File Offset: 0x0004BA28
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(TextureUnit target, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Int16*), target, ptr, GL.EntryPoints[1313]);
				}
			}

			// Token: 0x06001BA8 RID: 7080 RVA: 0x0004D84C File Offset: 0x0004BA4C
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(TextureUnit target, short* v)
			{
				calli(System.Void(System.Int32,System.Int16*), target, v, GL.EntryPoints[1313]);
			}

			// Token: 0x06001BA9 RID: 7081 RVA: 0x0004D860 File Offset: 0x0004BA60
			public static void MultiTexCoord4(TextureUnit target, double s, double t, double r, double q)
			{
				calli(System.Void(System.Int32,System.Double,System.Double,System.Double,System.Double), target, s, t, r, q, GL.EntryPoints[1319]);
			}

			// Token: 0x06001BAA RID: 7082 RVA: 0x0004D878 File Offset: 0x0004BA78
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(TextureUnit target, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Double*), target, ptr, GL.EntryPoints[1321]);
				}
			}

			// Token: 0x06001BAB RID: 7083 RVA: 0x0004D8AC File Offset: 0x0004BAAC
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(TextureUnit target, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Double*), target, ptr, GL.EntryPoints[1321]);
				}
			}

			// Token: 0x06001BAC RID: 7084 RVA: 0x0004D8D0 File Offset: 0x0004BAD0
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(TextureUnit target, double* v)
			{
				calli(System.Void(System.Int32,System.Double*), target, v, GL.EntryPoints[1321]);
			}

			// Token: 0x06001BAD RID: 7085 RVA: 0x0004D8E4 File Offset: 0x0004BAE4
			public static void MultiTexCoord4(TextureUnit target, float s, float t, float r, float q)
			{
				calli(System.Void(System.Int32,System.Single,System.Single,System.Single,System.Single), target, s, t, r, q, GL.EntryPoints[1323]);
			}

			// Token: 0x06001BAE RID: 7086 RVA: 0x0004D8FC File Offset: 0x0004BAFC
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(TextureUnit target, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), target, ptr, GL.EntryPoints[1325]);
				}
			}

			// Token: 0x06001BAF RID: 7087 RVA: 0x0004D930 File Offset: 0x0004BB30
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(TextureUnit target, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Single*), target, ptr, GL.EntryPoints[1325]);
				}
			}

			// Token: 0x06001BB0 RID: 7088 RVA: 0x0004D954 File Offset: 0x0004BB54
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(TextureUnit target, float* v)
			{
				calli(System.Void(System.Int32,System.Single*), target, v, GL.EntryPoints[1325]);
			}

			// Token: 0x06001BB1 RID: 7089 RVA: 0x0004D968 File Offset: 0x0004BB68
			public static void MultiTexCoord4(TextureUnit target, int s, int t, int r, int q)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, s, t, r, q, GL.EntryPoints[1329]);
			}

			// Token: 0x06001BB2 RID: 7090 RVA: 0x0004D980 File Offset: 0x0004BB80
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(TextureUnit target, int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), target, ptr, GL.EntryPoints[1331]);
				}
			}

			// Token: 0x06001BB3 RID: 7091 RVA: 0x0004D9B4 File Offset: 0x0004BBB4
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(TextureUnit target, ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Int32*), target, ptr, GL.EntryPoints[1331]);
				}
			}

			// Token: 0x06001BB4 RID: 7092 RVA: 0x0004D9D8 File Offset: 0x0004BBD8
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(TextureUnit target, int* v)
			{
				calli(System.Void(System.Int32,System.Int32*), target, v, GL.EntryPoints[1331]);
			}

			// Token: 0x06001BB5 RID: 7093 RVA: 0x0004D9EC File Offset: 0x0004BBEC
			public static void MultiTexCoord4(TextureUnit target, short s, short t, short r, short q)
			{
				calli(System.Void(System.Int32,System.Int16,System.Int16,System.Int16,System.Int16), target, s, t, r, q, GL.EntryPoints[1333]);
			}

			// Token: 0x06001BB6 RID: 7094 RVA: 0x0004DA04 File Offset: 0x0004BC04
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(TextureUnit target, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int16*), target, ptr, GL.EntryPoints[1335]);
				}
			}

			// Token: 0x06001BB7 RID: 7095 RVA: 0x0004DA38 File Offset: 0x0004BC38
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(TextureUnit target, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Int16*), target, ptr, GL.EntryPoints[1335]);
				}
			}

			// Token: 0x06001BB8 RID: 7096 RVA: 0x0004DA5C File Offset: 0x0004BC5C
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(TextureUnit target, short* v)
			{
				calli(System.Void(System.Int32,System.Int16*), target, v, GL.EntryPoints[1335]);
			}

			// Token: 0x06001BB9 RID: 7097 RVA: 0x0004DA70 File Offset: 0x0004BC70
			[CLSCompliant(false)]
			public unsafe static void MultTransposeMatrix(double[] m)
			{
				fixed (double* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[1374]);
				}
			}

			// Token: 0x06001BBA RID: 7098 RVA: 0x0004DAA4 File Offset: 0x0004BCA4
			[CLSCompliant(false)]
			public unsafe static void MultTransposeMatrix(ref double m)
			{
				fixed (double* ptr = &m)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[1374]);
				}
			}

			// Token: 0x06001BBB RID: 7099 RVA: 0x0004DAC8 File Offset: 0x0004BCC8
			[CLSCompliant(false)]
			public unsafe static void MultTransposeMatrix(double* m)
			{
				calli(System.Void(System.Double*), m, GL.EntryPoints[1374]);
			}

			// Token: 0x06001BBC RID: 7100 RVA: 0x0004DADC File Offset: 0x0004BCDC
			[CLSCompliant(false)]
			public unsafe static void MultTransposeMatrix(float[] m)
			{
				fixed (float* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[1376]);
				}
			}

			// Token: 0x06001BBD RID: 7101 RVA: 0x0004DB10 File Offset: 0x0004BD10
			[CLSCompliant(false)]
			public unsafe static void MultTransposeMatrix(ref float m)
			{
				fixed (float* ptr = &m)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[1376]);
				}
			}

			// Token: 0x06001BBE RID: 7102 RVA: 0x0004DB34 File Offset: 0x0004BD34
			[CLSCompliant(false)]
			public unsafe static void MultTransposeMatrix(float* m)
			{
				calli(System.Void(System.Single*), m, GL.EntryPoints[1376]);
			}

			// Token: 0x06001BBF RID: 7103 RVA: 0x0004DB48 File Offset: 0x0004BD48
			public static void NamedString(ArbShadingLanguageInclude type, int namelen, string name, int stringlen, string @string)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				IntPtr intPtr2 = intPtr;
				IntPtr intPtr3 = BindingsBase.MarshalStringToPtr(@string);
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr), type, namelen, intPtr2, stringlen, intPtr3, GL.EntryPoints[1405]);
				BindingsBase.FreeStringPtr(intPtr);
				BindingsBase.FreeStringPtr(intPtr3);
			}

			// Token: 0x06001BC0 RID: 7104 RVA: 0x0004DB88 File Offset: 0x0004BD88
			public static void PointParameter(ArbPointParameters pname, float param)
			{
				calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[1501]);
			}

			// Token: 0x06001BC1 RID: 7105 RVA: 0x0004DB9C File Offset: 0x0004BD9C
			[CLSCompliant(false)]
			public unsafe static void PointParameter(ArbPointParameters pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[1505]);
				}
			}

			// Token: 0x06001BC2 RID: 7106 RVA: 0x0004DBD0 File Offset: 0x0004BDD0
			[CLSCompliant(false)]
			public unsafe static void PointParameter(ArbPointParameters pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Single*), pname, @params, GL.EntryPoints[1505]);
			}

			// Token: 0x06001BC3 RID: 7107 RVA: 0x0004DBE4 File Offset: 0x0004BDE4
			[CLSCompliant(false)]
			public static void ProgramEnvParameter4(AssemblyProgramTargetArb target, int index, double x, double y, double z, double w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double,System.Double,System.Double,System.Double), target, index, x, y, z, w, GL.EntryPoints[1542]);
			}

			// Token: 0x06001BC4 RID: 7108 RVA: 0x0004DC00 File Offset: 0x0004BE00
			[CLSCompliant(false)]
			public static void ProgramEnvParameter4(AssemblyProgramTargetArb target, uint index, double x, double y, double z, double w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double,System.Double,System.Double,System.Double), target, index, x, y, z, w, GL.EntryPoints[1542]);
			}

			// Token: 0x06001BC5 RID: 7109 RVA: 0x0004DC1C File Offset: 0x0004BE1C
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameter4(AssemblyProgramTargetArb target, int index, double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[1543]);
				}
			}

			// Token: 0x06001BC6 RID: 7110 RVA: 0x0004DC54 File Offset: 0x0004BE54
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameter4(AssemblyProgramTargetArb target, int index, ref double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[1543]);
				}
			}

			// Token: 0x06001BC7 RID: 7111 RVA: 0x0004DC78 File Offset: 0x0004BE78
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameter4(AssemblyProgramTargetArb target, int index, double* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, @params, GL.EntryPoints[1543]);
			}

			// Token: 0x06001BC8 RID: 7112 RVA: 0x0004DC90 File Offset: 0x0004BE90
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameter4(AssemblyProgramTargetArb target, uint index, double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[1543]);
				}
			}

			// Token: 0x06001BC9 RID: 7113 RVA: 0x0004DCC8 File Offset: 0x0004BEC8
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameter4(AssemblyProgramTargetArb target, uint index, ref double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[1543]);
				}
			}

			// Token: 0x06001BCA RID: 7114 RVA: 0x0004DCEC File Offset: 0x0004BEEC
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameter4(AssemblyProgramTargetArb target, uint index, double* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, @params, GL.EntryPoints[1543]);
			}

			// Token: 0x06001BCB RID: 7115 RVA: 0x0004DD04 File Offset: 0x0004BF04
			[CLSCompliant(false)]
			public static void ProgramEnvParameter4(AssemblyProgramTargetArb target, int index, float x, float y, float z, float w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single,System.Single,System.Single,System.Single), target, index, x, y, z, w, GL.EntryPoints[1544]);
			}

			// Token: 0x06001BCC RID: 7116 RVA: 0x0004DD20 File Offset: 0x0004BF20
			[CLSCompliant(false)]
			public static void ProgramEnvParameter4(AssemblyProgramTargetArb target, uint index, float x, float y, float z, float w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single,System.Single,System.Single,System.Single), target, index, x, y, z, w, GL.EntryPoints[1544]);
			}

			// Token: 0x06001BCD RID: 7117 RVA: 0x0004DD3C File Offset: 0x0004BF3C
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameter4(AssemblyProgramTargetArb target, int index, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[1545]);
				}
			}

			// Token: 0x06001BCE RID: 7118 RVA: 0x0004DD74 File Offset: 0x0004BF74
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameter4(AssemblyProgramTargetArb target, int index, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[1545]);
				}
			}

			// Token: 0x06001BCF RID: 7119 RVA: 0x0004DD98 File Offset: 0x0004BF98
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameter4(AssemblyProgramTargetArb target, int index, float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, @params, GL.EntryPoints[1545]);
			}

			// Token: 0x06001BD0 RID: 7120 RVA: 0x0004DDB0 File Offset: 0x0004BFB0
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameter4(AssemblyProgramTargetArb target, uint index, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[1545]);
				}
			}

			// Token: 0x06001BD1 RID: 7121 RVA: 0x0004DDE8 File Offset: 0x0004BFE8
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameter4(AssemblyProgramTargetArb target, uint index, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[1545]);
				}
			}

			// Token: 0x06001BD2 RID: 7122 RVA: 0x0004DE0C File Offset: 0x0004C00C
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameter4(AssemblyProgramTargetArb target, uint index, float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, @params, GL.EntryPoints[1545]);
			}

			// Token: 0x06001BD3 RID: 7123 RVA: 0x0004DE24 File Offset: 0x0004C024
			[CLSCompliant(false)]
			public static void ProgramLocalParameter4(AssemblyProgramTargetArb target, int index, double x, double y, double z, double w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double,System.Double,System.Double,System.Double), target, index, x, y, z, w, GL.EntryPoints[1553]);
			}

			// Token: 0x06001BD4 RID: 7124 RVA: 0x0004DE40 File Offset: 0x0004C040
			[CLSCompliant(false)]
			public static void ProgramLocalParameter4(AssemblyProgramTargetArb target, uint index, double x, double y, double z, double w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double,System.Double,System.Double,System.Double), target, index, x, y, z, w, GL.EntryPoints[1553]);
			}

			// Token: 0x06001BD5 RID: 7125 RVA: 0x0004DE5C File Offset: 0x0004C05C
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameter4(AssemblyProgramTargetArb target, int index, double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[1554]);
				}
			}

			// Token: 0x06001BD6 RID: 7126 RVA: 0x0004DE94 File Offset: 0x0004C094
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameter4(AssemblyProgramTargetArb target, int index, ref double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[1554]);
				}
			}

			// Token: 0x06001BD7 RID: 7127 RVA: 0x0004DEB8 File Offset: 0x0004C0B8
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameter4(AssemblyProgramTargetArb target, int index, double* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, @params, GL.EntryPoints[1554]);
			}

			// Token: 0x06001BD8 RID: 7128 RVA: 0x0004DED0 File Offset: 0x0004C0D0
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameter4(AssemblyProgramTargetArb target, uint index, double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[1554]);
				}
			}

			// Token: 0x06001BD9 RID: 7129 RVA: 0x0004DF08 File Offset: 0x0004C108
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameter4(AssemblyProgramTargetArb target, uint index, ref double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[1554]);
				}
			}

			// Token: 0x06001BDA RID: 7130 RVA: 0x0004DF2C File Offset: 0x0004C12C
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameter4(AssemblyProgramTargetArb target, uint index, double* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, @params, GL.EntryPoints[1554]);
			}

			// Token: 0x06001BDB RID: 7131 RVA: 0x0004DF44 File Offset: 0x0004C144
			[CLSCompliant(false)]
			public static void ProgramLocalParameter4(AssemblyProgramTargetArb target, int index, float x, float y, float z, float w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single,System.Single,System.Single,System.Single), target, index, x, y, z, w, GL.EntryPoints[1555]);
			}

			// Token: 0x06001BDC RID: 7132 RVA: 0x0004DF60 File Offset: 0x0004C160
			[CLSCompliant(false)]
			public static void ProgramLocalParameter4(AssemblyProgramTargetArb target, uint index, float x, float y, float z, float w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single,System.Single,System.Single,System.Single), target, index, x, y, z, w, GL.EntryPoints[1555]);
			}

			// Token: 0x06001BDD RID: 7133 RVA: 0x0004DF7C File Offset: 0x0004C17C
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameter4(AssemblyProgramTargetArb target, int index, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[1556]);
				}
			}

			// Token: 0x06001BDE RID: 7134 RVA: 0x0004DFB4 File Offset: 0x0004C1B4
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameter4(AssemblyProgramTargetArb target, int index, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[1556]);
				}
			}

			// Token: 0x06001BDF RID: 7135 RVA: 0x0004DFD8 File Offset: 0x0004C1D8
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameter4(AssemblyProgramTargetArb target, int index, float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, @params, GL.EntryPoints[1556]);
			}

			// Token: 0x06001BE0 RID: 7136 RVA: 0x0004DFF0 File Offset: 0x0004C1F0
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameter4(AssemblyProgramTargetArb target, uint index, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[1556]);
				}
			}

			// Token: 0x06001BE1 RID: 7137 RVA: 0x0004E028 File Offset: 0x0004C228
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameter4(AssemblyProgramTargetArb target, uint index, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[1556]);
				}
			}

			// Token: 0x06001BE2 RID: 7138 RVA: 0x0004E04C File Offset: 0x0004C24C
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameter4(AssemblyProgramTargetArb target, uint index, float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, @params, GL.EntryPoints[1556]);
			}

			// Token: 0x06001BE3 RID: 7139 RVA: 0x0004E064 File Offset: 0x0004C264
			[CLSCompliant(false)]
			public static void ProgramParameter(int program, AssemblyProgramParameterArb pname, int value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[1573]);
			}

			// Token: 0x06001BE4 RID: 7140 RVA: 0x0004E07C File Offset: 0x0004C27C
			[CLSCompliant(false)]
			public static void ProgramParameter(uint program, AssemblyProgramParameterArb pname, int value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[1573]);
			}

			// Token: 0x06001BE5 RID: 7141 RVA: 0x0004E094 File Offset: 0x0004C294
			public static void ProgramString(AssemblyProgramTargetArb target, All format, int len, IntPtr @string)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, len, @string, GL.EntryPoints[1577]);
			}

			// Token: 0x06001BE6 RID: 7142 RVA: 0x0004E0AC File Offset: 0x0004C2AC
			[CLSCompliant(false)]
			public unsafe static void ProgramString<T3>(AssemblyProgramTargetArb target, All format, int len, [In] [Out] T3[] @string) where T3 : struct
			{
				fixed (T3* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, len, ptr, GL.EntryPoints[1577]);
				}
			}

			// Token: 0x06001BE7 RID: 7143 RVA: 0x0004E0E4 File Offset: 0x0004C2E4
			[CLSCompliant(false)]
			public unsafe static void ProgramString<T3>(AssemblyProgramTargetArb target, All format, int len, [In] [Out] T3[,] @string) where T3 : struct
			{
				fixed (T3* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, len, ptr, GL.EntryPoints[1577]);
				}
			}

			// Token: 0x06001BE8 RID: 7144 RVA: 0x0004E120 File Offset: 0x0004C320
			[CLSCompliant(false)]
			public unsafe static void ProgramString<T3>(AssemblyProgramTargetArb target, All format, int len, [In] [Out] T3[,,] @string) where T3 : struct
			{
				fixed (T3* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, len, ptr, GL.EntryPoints[1577]);
				}
			}

			// Token: 0x06001BE9 RID: 7145 RVA: 0x0004E15C File Offset: 0x0004C35C
			public unsafe static void ProgramString<T3>(AssemblyProgramTargetArb target, All format, int len, [In] [Out] ref T3 @string) where T3 : struct
			{
				fixed (T3* ptr = &@string)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, len, ptr, GL.EntryPoints[1577]);
				}
			}

			// Token: 0x06001BEA RID: 7146 RVA: 0x0004E180 File Offset: 0x0004C380
			[Obsolete("Use All overload instead")]
			public static void ProgramString(AssemblyProgramTargetArb target, ArbVertexProgram format, int len, IntPtr @string)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, len, @string, GL.EntryPoints[1577]);
			}

			// Token: 0x06001BEB RID: 7147 RVA: 0x0004E198 File Offset: 0x0004C398
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void ProgramString<T3>(AssemblyProgramTargetArb target, ArbVertexProgram format, int len, [In] [Out] T3[] @string) where T3 : struct
			{
				fixed (T3* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, len, ptr, GL.EntryPoints[1577]);
				}
			}

			// Token: 0x06001BEC RID: 7148 RVA: 0x0004E1D0 File Offset: 0x0004C3D0
			[Obsolete("Use All overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ProgramString<T3>(AssemblyProgramTargetArb target, ArbVertexProgram format, int len, [In] [Out] T3[,] @string) where T3 : struct
			{
				fixed (T3* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, len, ptr, GL.EntryPoints[1577]);
				}
			}

			// Token: 0x06001BED RID: 7149 RVA: 0x0004E20C File Offset: 0x0004C40C
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void ProgramString<T3>(AssemblyProgramTargetArb target, ArbVertexProgram format, int len, [In] [Out] T3[,,] @string) where T3 : struct
			{
				fixed (T3* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, len, ptr, GL.EntryPoints[1577]);
				}
			}

			// Token: 0x06001BEE RID: 7150 RVA: 0x0004E248 File Offset: 0x0004C448
			[Obsolete("Use All overload instead")]
			public unsafe static void ProgramString<T3>(AssemblyProgramTargetArb target, ArbVertexProgram format, int len, [In] [Out] ref T3 @string) where T3 : struct
			{
				fixed (T3* ptr = &@string)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, len, ptr, GL.EntryPoints[1577]);
				}
			}

			// Token: 0x06001BEF RID: 7151 RVA: 0x0004E26C File Offset: 0x0004C46C
			[CLSCompliant(false)]
			public static void ProgramUniformHandle(int program, int location, long value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64), program, location, value, GL.EntryPoints[1659]);
			}

			// Token: 0x06001BF0 RID: 7152 RVA: 0x0004E284 File Offset: 0x0004C484
			[CLSCompliant(false)]
			public static void ProgramUniformHandle(uint program, int location, ulong value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64), program, location, value, GL.EntryPoints[1659]);
			}

			// Token: 0x06001BF1 RID: 7153 RVA: 0x0004E29C File Offset: 0x0004C49C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(int program, int location, int count, long[] values)
			{
				fixed (long* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1661]);
				}
			}

			// Token: 0x06001BF2 RID: 7154 RVA: 0x0004E2D4 File Offset: 0x0004C4D4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(int program, int location, int count, ref long values)
			{
				fixed (long* ptr = &values)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1661]);
				}
			}

			// Token: 0x06001BF3 RID: 7155 RVA: 0x0004E2F8 File Offset: 0x0004C4F8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(int program, int location, int count, long* values)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, values, GL.EntryPoints[1661]);
			}

			// Token: 0x06001BF4 RID: 7156 RVA: 0x0004E310 File Offset: 0x0004C510
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(uint program, int location, int count, ulong[] values)
			{
				fixed (ulong* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1661]);
				}
			}

			// Token: 0x06001BF5 RID: 7157 RVA: 0x0004E348 File Offset: 0x0004C548
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(uint program, int location, int count, ref ulong values)
			{
				fixed (ulong* ptr = &values)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1661]);
				}
			}

			// Token: 0x06001BF6 RID: 7158 RVA: 0x0004E36C File Offset: 0x0004C56C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(uint program, int location, int count, ulong* values)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, values, GL.EntryPoints[1661]);
			}

			// Token: 0x06001BF7 RID: 7159 RVA: 0x0004E384 File Offset: 0x0004C584
			public static void ReadnPixels(int x, int y, int width, int height, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, bufSize, data, GL.EntryPoints[1747]);
			}

			// Token: 0x06001BF8 RID: 7160 RVA: 0x0004E3B0 File Offset: 0x0004C5B0
			[CLSCompliant(false)]
			public unsafe static void ReadnPixels<T7>(int x, int y, int width, int height, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T7[] data) where T7 : struct
			{
				fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, bufSize, ptr, GL.EntryPoints[1747]);
				}
			}

			// Token: 0x06001BF9 RID: 7161 RVA: 0x0004E3F0 File Offset: 0x0004C5F0
			[CLSCompliant(false)]
			public unsafe static void ReadnPixels<T7>(int x, int y, int width, int height, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T7[,] data) where T7 : struct
			{
				fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, bufSize, ptr, GL.EntryPoints[1747]);
				}
			}

			// Token: 0x06001BFA RID: 7162 RVA: 0x0004E434 File Offset: 0x0004C634
			[CLSCompliant(false)]
			public unsafe static void ReadnPixels<T7>(int x, int y, int width, int height, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] T7[,,] data) where T7 : struct
			{
				fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, bufSize, ptr, GL.EntryPoints[1747]);
				}
			}

			// Token: 0x06001BFB RID: 7163 RVA: 0x0004E47C File Offset: 0x0004C67C
			public unsafe static void ReadnPixels<T7>(int x, int y, int width, int height, ArbRobustness format, ArbRobustness type, int bufSize, [In] [Out] ref T7 data) where T7 : struct
			{
				fixed (T7* ptr = &data)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, bufSize, ptr, GL.EntryPoints[1747]);
				}
			}

			// Token: 0x06001BFC RID: 7164 RVA: 0x0004E4A8 File Offset: 0x0004C6A8
			public static void SampleCoverage(float value, bool invert)
			{
				calli(System.Void(System.Single,System.Boolean), value, invert, GL.EntryPoints[1802]);
			}

			// Token: 0x06001BFD RID: 7165 RVA: 0x0004E4BC File Offset: 0x0004C6BC
			[CLSCompliant(false)]
			public unsafe static void ShaderSource(int shaderObj, int count, string[] @string, int[] length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shaderObj, count, intPtr2, ptr, GL.EntryPoints[1881]);
					BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
				}
			}

			// Token: 0x06001BFE RID: 7166 RVA: 0x0004E504 File Offset: 0x0004C704
			[CLSCompliant(false)]
			public unsafe static void ShaderSource(int shaderObj, int count, string[] @string, ref int length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = &length)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shaderObj, count, intPtr2, ptr, GL.EntryPoints[1881]);
					BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
				}
			}

			// Token: 0x06001BFF RID: 7167 RVA: 0x0004E538 File Offset: 0x0004C738
			[CLSCompliant(false)]
			public unsafe static void ShaderSource(int shaderObj, int count, string[] @string, int* length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shaderObj, count, intPtr, length, GL.EntryPoints[1881]);
				BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
			}

			// Token: 0x06001C00 RID: 7168 RVA: 0x0004E56C File Offset: 0x0004C76C
			[CLSCompliant(false)]
			public unsafe static void ShaderSource(uint shaderObj, int count, string[] @string, int[] length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shaderObj, count, intPtr2, ptr, GL.EntryPoints[1881]);
					BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
				}
			}

			// Token: 0x06001C01 RID: 7169 RVA: 0x0004E5B4 File Offset: 0x0004C7B4
			[CLSCompliant(false)]
			public unsafe static void ShaderSource(uint shaderObj, int count, string[] @string, ref int length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = &length)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shaderObj, count, intPtr2, ptr, GL.EntryPoints[1881]);
					BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
				}
			}

			// Token: 0x06001C02 RID: 7170 RVA: 0x0004E5E8 File Offset: 0x0004C7E8
			[CLSCompliant(false)]
			public unsafe static void ShaderSource(uint shaderObj, int count, string[] @string, int* length)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shaderObj, count, intPtr, length, GL.EntryPoints[1881]);
				BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
			}

			// Token: 0x06001C03 RID: 7171 RVA: 0x0004E61C File Offset: 0x0004C81C
			[CLSCompliant(false)]
			public static void TexBuffer(TextureTarget target, ArbTextureBufferObject internalformat, int buffer)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32), target, internalformat, buffer, GL.EntryPoints[1926]);
			}

			// Token: 0x06001C04 RID: 7172 RVA: 0x0004E634 File Offset: 0x0004C834
			[CLSCompliant(false)]
			public static void TexBuffer(TextureTarget target, ArbTextureBufferObject internalformat, uint buffer)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32), target, internalformat, buffer, GL.EntryPoints[1926]);
			}

			// Token: 0x06001C05 RID: 7173 RVA: 0x0004E64C File Offset: 0x0004C84C
			public static void TexPageCommitment(ArbSparseTexture target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool resident)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), target, level, xoffset, yoffset, zoffset, width, height, depth, resident, GL.EntryPoints[2038]);
			}

			// Token: 0x06001C06 RID: 7174 RVA: 0x0004E678 File Offset: 0x0004C878
			public static void Uniform1(int location, float v0)
			{
				calli(System.Void(System.Int32,System.Single), location, v0, GL.EntryPoints[2109]);
			}

			// Token: 0x06001C07 RID: 7175 RVA: 0x0004E68C File Offset: 0x0004C88C
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[2111]);
				}
			}

			// Token: 0x06001C08 RID: 7176 RVA: 0x0004E6C4 File Offset: 0x0004C8C4
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[2111]);
				}
			}

			// Token: 0x06001C09 RID: 7177 RVA: 0x0004E6E8 File Offset: 0x0004C8E8
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, float* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, value, GL.EntryPoints[2111]);
			}

			// Token: 0x06001C0A RID: 7178 RVA: 0x0004E700 File Offset: 0x0004C900
			public static void Uniform1(int location, int v0)
			{
				calli(System.Void(System.Int32,System.Int32), location, v0, GL.EntryPoints[2115]);
			}

			// Token: 0x06001C0B RID: 7179 RVA: 0x0004E714 File Offset: 0x0004C914
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[2117]);
				}
			}

			// Token: 0x06001C0C RID: 7180 RVA: 0x0004E74C File Offset: 0x0004C94C
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[2117]);
				}
			}

			// Token: 0x06001C0D RID: 7181 RVA: 0x0004E770 File Offset: 0x0004C970
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, int* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, value, GL.EntryPoints[2117]);
			}

			// Token: 0x06001C0E RID: 7182 RVA: 0x0004E788 File Offset: 0x0004C988
			public static void Uniform2(int location, float v0, float v1)
			{
				calli(System.Void(System.Int32,System.Single,System.Single), location, v0, v1, GL.EntryPoints[2127]);
			}

			// Token: 0x06001C0F RID: 7183 RVA: 0x0004E7A0 File Offset: 0x0004C9A0
			[CLSCompliant(false)]
			public unsafe static void Uniform2(int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[2129]);
				}
			}

			// Token: 0x06001C10 RID: 7184 RVA: 0x0004E7D8 File Offset: 0x0004C9D8
			[CLSCompliant(false)]
			public unsafe static void Uniform2(int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[2129]);
				}
			}

			// Token: 0x06001C11 RID: 7185 RVA: 0x0004E7FC File Offset: 0x0004C9FC
			[CLSCompliant(false)]
			public unsafe static void Uniform2(int location, int count, float* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, value, GL.EntryPoints[2129]);
			}

			// Token: 0x06001C12 RID: 7186 RVA: 0x0004E814 File Offset: 0x0004CA14
			public static void Uniform2(int location, int v0, int v1)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), location, v0, v1, GL.EntryPoints[2133]);
			}

			// Token: 0x06001C13 RID: 7187 RVA: 0x0004E82C File Offset: 0x0004CA2C
			[CLSCompliant(false)]
			public unsafe static void Uniform2(int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[2135]);
				}
			}

			// Token: 0x06001C14 RID: 7188 RVA: 0x0004E864 File Offset: 0x0004CA64
			[CLSCompliant(false)]
			public unsafe static void Uniform2(int location, int count, int* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, value, GL.EntryPoints[2135]);
			}

			// Token: 0x06001C15 RID: 7189 RVA: 0x0004E87C File Offset: 0x0004CA7C
			public static void Uniform3(int location, float v0, float v1, float v2)
			{
				calli(System.Void(System.Int32,System.Single,System.Single,System.Single), location, v0, v1, v2, GL.EntryPoints[2145]);
			}

			// Token: 0x06001C16 RID: 7190 RVA: 0x0004E894 File Offset: 0x0004CA94
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[2147]);
				}
			}

			// Token: 0x06001C17 RID: 7191 RVA: 0x0004E8CC File Offset: 0x0004CACC
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[2147]);
				}
			}

			// Token: 0x06001C18 RID: 7192 RVA: 0x0004E8F0 File Offset: 0x0004CAF0
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, float* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, value, GL.EntryPoints[2147]);
			}

			// Token: 0x06001C19 RID: 7193 RVA: 0x0004E908 File Offset: 0x0004CB08
			public static void Uniform3(int location, int v0, int v1, int v2)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), location, v0, v1, v2, GL.EntryPoints[2151]);
			}

			// Token: 0x06001C1A RID: 7194 RVA: 0x0004E920 File Offset: 0x0004CB20
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[2153]);
				}
			}

			// Token: 0x06001C1B RID: 7195 RVA: 0x0004E958 File Offset: 0x0004CB58
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[2153]);
				}
			}

			// Token: 0x06001C1C RID: 7196 RVA: 0x0004E97C File Offset: 0x0004CB7C
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, int* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, value, GL.EntryPoints[2153]);
			}

			// Token: 0x06001C1D RID: 7197 RVA: 0x0004E994 File Offset: 0x0004CB94
			public static void Uniform4(int location, float v0, float v1, float v2, float v3)
			{
				calli(System.Void(System.Int32,System.Single,System.Single,System.Single,System.Single), location, v0, v1, v2, v3, GL.EntryPoints[2163]);
			}

			// Token: 0x06001C1E RID: 7198 RVA: 0x0004E9AC File Offset: 0x0004CBAC
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[2165]);
				}
			}

			// Token: 0x06001C1F RID: 7199 RVA: 0x0004E9E4 File Offset: 0x0004CBE4
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[2165]);
				}
			}

			// Token: 0x06001C20 RID: 7200 RVA: 0x0004EA08 File Offset: 0x0004CC08
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, float* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, value, GL.EntryPoints[2165]);
			}

			// Token: 0x06001C21 RID: 7201 RVA: 0x0004EA20 File Offset: 0x0004CC20
			public static void Uniform4(int location, int v0, int v1, int v2, int v3)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), location, v0, v1, v2, v3, GL.EntryPoints[2169]);
			}

			// Token: 0x06001C22 RID: 7202 RVA: 0x0004EA38 File Offset: 0x0004CC38
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[2171]);
				}
			}

			// Token: 0x06001C23 RID: 7203 RVA: 0x0004EA70 File Offset: 0x0004CC70
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[2171]);
				}
			}

			// Token: 0x06001C24 RID: 7204 RVA: 0x0004EA94 File Offset: 0x0004CC94
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, int* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, value, GL.EntryPoints[2171]);
			}

			// Token: 0x06001C25 RID: 7205 RVA: 0x0004EAAC File Offset: 0x0004CCAC
			[CLSCompliant(false)]
			public static void UniformHandle(int location, long value)
			{
				calli(System.Void(System.Int32,System.UInt64), location, value, GL.EntryPoints[2180]);
			}

			// Token: 0x06001C26 RID: 7206 RVA: 0x0004EAC0 File Offset: 0x0004CCC0
			[CLSCompliant(false)]
			public static void UniformHandle(int location, ulong value)
			{
				calli(System.Void(System.Int32,System.UInt64), location, value, GL.EntryPoints[2180]);
			}

			// Token: 0x06001C27 RID: 7207 RVA: 0x0004EAD4 File Offset: 0x0004CCD4
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2182]);
				}
			}

			// Token: 0x06001C28 RID: 7208 RVA: 0x0004EB0C File Offset: 0x0004CD0C
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2182]);
				}
			}

			// Token: 0x06001C29 RID: 7209 RVA: 0x0004EB30 File Offset: 0x0004CD30
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, long* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, value, GL.EntryPoints[2182]);
			}

			// Token: 0x06001C2A RID: 7210 RVA: 0x0004EB48 File Offset: 0x0004CD48
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, ulong[] value)
			{
				fixed (ulong* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2182]);
				}
			}

			// Token: 0x06001C2B RID: 7211 RVA: 0x0004EB80 File Offset: 0x0004CD80
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, ref ulong value)
			{
				fixed (ulong* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2182]);
				}
			}

			// Token: 0x06001C2C RID: 7212 RVA: 0x0004EBA4 File Offset: 0x0004CDA4
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, ulong* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, value, GL.EntryPoints[2182]);
			}

			// Token: 0x06001C2D RID: 7213 RVA: 0x0004EBBC File Offset: 0x0004CDBC
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix2(int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2186]);
				}
			}

			// Token: 0x06001C2E RID: 7214 RVA: 0x0004EBF4 File Offset: 0x0004CDF4
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix2(int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2186]);
				}
			}

			// Token: 0x06001C2F RID: 7215 RVA: 0x0004EC18 File Offset: 0x0004CE18
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix2(int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[2186]);
			}

			// Token: 0x06001C30 RID: 7216 RVA: 0x0004EC30 File Offset: 0x0004CE30
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix3(int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2193]);
				}
			}

			// Token: 0x06001C31 RID: 7217 RVA: 0x0004EC68 File Offset: 0x0004CE68
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix3(int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2193]);
				}
			}

			// Token: 0x06001C32 RID: 7218 RVA: 0x0004EC8C File Offset: 0x0004CE8C
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix3(int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[2193]);
			}

			// Token: 0x06001C33 RID: 7219 RVA: 0x0004ECA4 File Offset: 0x0004CEA4
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix4(int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2200]);
				}
			}

			// Token: 0x06001C34 RID: 7220 RVA: 0x0004ECDC File Offset: 0x0004CEDC
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix4(int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[2200]);
				}
			}

			// Token: 0x06001C35 RID: 7221 RVA: 0x0004ED00 File Offset: 0x0004CF00
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix4(int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[2200]);
			}

			// Token: 0x06001C36 RID: 7222 RVA: 0x0004ED18 File Offset: 0x0004CF18
			public static bool UnmapBuffer(BufferTargetArb target)
			{
				return calli(System.Byte(System.Int32), target, GL.EntryPoints[2210]);
			}

			// Token: 0x06001C37 RID: 7223 RVA: 0x0004ED2C File Offset: 0x0004CF2C
			[CLSCompliant(false)]
			public static void UseProgramObject(int programObj)
			{
				calli(System.Void(System.UInt32), programObj, GL.EntryPoints[2216]);
			}

			// Token: 0x06001C38 RID: 7224 RVA: 0x0004ED40 File Offset: 0x0004CF40
			[CLSCompliant(false)]
			public static void UseProgramObject(uint programObj)
			{
				calli(System.Void(System.UInt32), programObj, GL.EntryPoints[2216]);
			}

			// Token: 0x06001C39 RID: 7225 RVA: 0x0004ED54 File Offset: 0x0004CF54
			[CLSCompliant(false)]
			public static void ValidateProgram(int programObj)
			{
				calli(System.Void(System.UInt32), programObj, GL.EntryPoints[2221]);
			}

			// Token: 0x06001C3A RID: 7226 RVA: 0x0004ED68 File Offset: 0x0004CF68
			[CLSCompliant(false)]
			public static void ValidateProgram(uint programObj)
			{
				calli(System.Void(System.UInt32), programObj, GL.EntryPoints[2221]);
			}

			// Token: 0x06001C3B RID: 7227 RVA: 0x0004ED7C File Offset: 0x0004CF7C
			[CLSCompliant(false)]
			public static void VertexAttrib1(int index, double x)
			{
				calli(System.Void(System.UInt32,System.Double), index, x, GL.EntryPoints[2309]);
			}

			// Token: 0x06001C3C RID: 7228 RVA: 0x0004ED90 File Offset: 0x0004CF90
			[CLSCompliant(false)]
			public static void VertexAttrib1(uint index, double x)
			{
				calli(System.Void(System.UInt32,System.Double), index, x, GL.EntryPoints[2309]);
			}

			// Token: 0x06001C3D RID: 7229 RVA: 0x0004EDA4 File Offset: 0x0004CFA4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib1(int index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2312]);
			}

			// Token: 0x06001C3E RID: 7230 RVA: 0x0004EDB8 File Offset: 0x0004CFB8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib1(uint index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2312]);
			}

			// Token: 0x06001C3F RID: 7231 RVA: 0x0004EDCC File Offset: 0x0004CFCC
			[CLSCompliant(false)]
			public static void VertexAttrib1(int index, float x)
			{
				calli(System.Void(System.UInt32,System.Single), index, x, GL.EntryPoints[2315]);
			}

			// Token: 0x06001C40 RID: 7232 RVA: 0x0004EDE0 File Offset: 0x0004CFE0
			[CLSCompliant(false)]
			public static void VertexAttrib1(uint index, float x)
			{
				calli(System.Void(System.UInt32,System.Single), index, x, GL.EntryPoints[2315]);
			}

			// Token: 0x06001C41 RID: 7233 RVA: 0x0004EDF4 File Offset: 0x0004CFF4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib1(int index, float* v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2318]);
			}

			// Token: 0x06001C42 RID: 7234 RVA: 0x0004EE08 File Offset: 0x0004D008
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib1(uint index, float* v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2318]);
			}

			// Token: 0x06001C43 RID: 7235 RVA: 0x0004EE1C File Offset: 0x0004D01C
			[CLSCompliant(false)]
			public static void VertexAttrib1(int index, short x)
			{
				calli(System.Void(System.UInt32,System.Int16), index, x, GL.EntryPoints[2323]);
			}

			// Token: 0x06001C44 RID: 7236 RVA: 0x0004EE30 File Offset: 0x0004D030
			[CLSCompliant(false)]
			public static void VertexAttrib1(uint index, short x)
			{
				calli(System.Void(System.UInt32,System.Int16), index, x, GL.EntryPoints[2323]);
			}

			// Token: 0x06001C45 RID: 7237 RVA: 0x0004EE44 File Offset: 0x0004D044
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib1(int index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2326]);
			}

			// Token: 0x06001C46 RID: 7238 RVA: 0x0004EE58 File Offset: 0x0004D058
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib1(uint index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2326]);
			}

			// Token: 0x06001C47 RID: 7239 RVA: 0x0004EE6C File Offset: 0x0004D06C
			[CLSCompliant(false)]
			public static void VertexAttrib2(int index, double x, double y)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double), index, x, y, GL.EntryPoints[2329]);
			}

			// Token: 0x06001C48 RID: 7240 RVA: 0x0004EE84 File Offset: 0x0004D084
			[CLSCompliant(false)]
			public static void VertexAttrib2(uint index, double x, double y)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double), index, x, y, GL.EntryPoints[2329]);
			}

			// Token: 0x06001C49 RID: 7241 RVA: 0x0004EE9C File Offset: 0x0004D09C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2332]);
				}
			}

			// Token: 0x06001C4A RID: 7242 RVA: 0x0004EED0 File Offset: 0x0004D0D0
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2332]);
				}
			}

			// Token: 0x06001C4B RID: 7243 RVA: 0x0004EEF4 File Offset: 0x0004D0F4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2332]);
			}

			// Token: 0x06001C4C RID: 7244 RVA: 0x0004EF08 File Offset: 0x0004D108
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2332]);
				}
			}

			// Token: 0x06001C4D RID: 7245 RVA: 0x0004EF3C File Offset: 0x0004D13C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2332]);
				}
			}

			// Token: 0x06001C4E RID: 7246 RVA: 0x0004EF60 File Offset: 0x0004D160
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2332]);
			}

			// Token: 0x06001C4F RID: 7247 RVA: 0x0004EF74 File Offset: 0x0004D174
			[CLSCompliant(false)]
			public static void VertexAttrib2(int index, float x, float y)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single), index, x, y, GL.EntryPoints[2335]);
			}

			// Token: 0x06001C50 RID: 7248 RVA: 0x0004EF8C File Offset: 0x0004D18C
			[CLSCompliant(false)]
			public static void VertexAttrib2(uint index, float x, float y)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single), index, x, y, GL.EntryPoints[2335]);
			}

			// Token: 0x06001C51 RID: 7249 RVA: 0x0004EFA4 File Offset: 0x0004D1A4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2338]);
				}
			}

			// Token: 0x06001C52 RID: 7250 RVA: 0x0004EFD8 File Offset: 0x0004D1D8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2338]);
				}
			}

			// Token: 0x06001C53 RID: 7251 RVA: 0x0004EFFC File Offset: 0x0004D1FC
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, float* v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2338]);
			}

			// Token: 0x06001C54 RID: 7252 RVA: 0x0004F010 File Offset: 0x0004D210
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2338]);
				}
			}

			// Token: 0x06001C55 RID: 7253 RVA: 0x0004F044 File Offset: 0x0004D244
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2338]);
				}
			}

			// Token: 0x06001C56 RID: 7254 RVA: 0x0004F068 File Offset: 0x0004D268
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, float* v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2338]);
			}

			// Token: 0x06001C57 RID: 7255 RVA: 0x0004F07C File Offset: 0x0004D27C
			[CLSCompliant(false)]
			public static void VertexAttrib2(int index, short x, short y)
			{
				calli(System.Void(System.UInt32,System.Int16,System.Int16), index, x, y, GL.EntryPoints[2343]);
			}

			// Token: 0x06001C58 RID: 7256 RVA: 0x0004F094 File Offset: 0x0004D294
			[CLSCompliant(false)]
			public static void VertexAttrib2(uint index, short x, short y)
			{
				calli(System.Void(System.UInt32,System.Int16,System.Int16), index, x, y, GL.EntryPoints[2343]);
			}

			// Token: 0x06001C59 RID: 7257 RVA: 0x0004F0AC File Offset: 0x0004D2AC
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2346]);
				}
			}

			// Token: 0x06001C5A RID: 7258 RVA: 0x0004F0E0 File Offset: 0x0004D2E0
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2346]);
				}
			}

			// Token: 0x06001C5B RID: 7259 RVA: 0x0004F104 File Offset: 0x0004D304
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2346]);
			}

			// Token: 0x06001C5C RID: 7260 RVA: 0x0004F118 File Offset: 0x0004D318
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2346]);
				}
			}

			// Token: 0x06001C5D RID: 7261 RVA: 0x0004F14C File Offset: 0x0004D34C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2346]);
				}
			}

			// Token: 0x06001C5E RID: 7262 RVA: 0x0004F170 File Offset: 0x0004D370
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2346]);
			}

			// Token: 0x06001C5F RID: 7263 RVA: 0x0004F184 File Offset: 0x0004D384
			[CLSCompliant(false)]
			public static void VertexAttrib3(int index, double x, double y, double z)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double,System.Double), index, x, y, z, GL.EntryPoints[2349]);
			}

			// Token: 0x06001C60 RID: 7264 RVA: 0x0004F19C File Offset: 0x0004D39C
			[CLSCompliant(false)]
			public static void VertexAttrib3(uint index, double x, double y, double z)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double,System.Double), index, x, y, z, GL.EntryPoints[2349]);
			}

			// Token: 0x06001C61 RID: 7265 RVA: 0x0004F1B4 File Offset: 0x0004D3B4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2352]);
				}
			}

			// Token: 0x06001C62 RID: 7266 RVA: 0x0004F1E8 File Offset: 0x0004D3E8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2352]);
				}
			}

			// Token: 0x06001C63 RID: 7267 RVA: 0x0004F20C File Offset: 0x0004D40C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2352]);
			}

			// Token: 0x06001C64 RID: 7268 RVA: 0x0004F220 File Offset: 0x0004D420
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2352]);
				}
			}

			// Token: 0x06001C65 RID: 7269 RVA: 0x0004F254 File Offset: 0x0004D454
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2352]);
				}
			}

			// Token: 0x06001C66 RID: 7270 RVA: 0x0004F278 File Offset: 0x0004D478
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2352]);
			}

			// Token: 0x06001C67 RID: 7271 RVA: 0x0004F28C File Offset: 0x0004D48C
			[CLSCompliant(false)]
			public static void VertexAttrib3(int index, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single), index, x, y, z, GL.EntryPoints[2355]);
			}

			// Token: 0x06001C68 RID: 7272 RVA: 0x0004F2A4 File Offset: 0x0004D4A4
			[CLSCompliant(false)]
			public static void VertexAttrib3(uint index, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single), index, x, y, z, GL.EntryPoints[2355]);
			}

			// Token: 0x06001C69 RID: 7273 RVA: 0x0004F2BC File Offset: 0x0004D4BC
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2358]);
				}
			}

			// Token: 0x06001C6A RID: 7274 RVA: 0x0004F2F0 File Offset: 0x0004D4F0
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2358]);
				}
			}

			// Token: 0x06001C6B RID: 7275 RVA: 0x0004F314 File Offset: 0x0004D514
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, float* v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2358]);
			}

			// Token: 0x06001C6C RID: 7276 RVA: 0x0004F328 File Offset: 0x0004D528
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2358]);
				}
			}

			// Token: 0x06001C6D RID: 7277 RVA: 0x0004F35C File Offset: 0x0004D55C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2358]);
				}
			}

			// Token: 0x06001C6E RID: 7278 RVA: 0x0004F380 File Offset: 0x0004D580
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, float* v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2358]);
			}

			// Token: 0x06001C6F RID: 7279 RVA: 0x0004F394 File Offset: 0x0004D594
			[CLSCompliant(false)]
			public static void VertexAttrib3(int index, short x, short y, short z)
			{
				calli(System.Void(System.UInt32,System.Int16,System.Int16,System.Int16), index, x, y, z, GL.EntryPoints[2363]);
			}

			// Token: 0x06001C70 RID: 7280 RVA: 0x0004F3AC File Offset: 0x0004D5AC
			[CLSCompliant(false)]
			public static void VertexAttrib3(uint index, short x, short y, short z)
			{
				calli(System.Void(System.UInt32,System.Int16,System.Int16,System.Int16), index, x, y, z, GL.EntryPoints[2363]);
			}

			// Token: 0x06001C71 RID: 7281 RVA: 0x0004F3C4 File Offset: 0x0004D5C4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2366]);
				}
			}

			// Token: 0x06001C72 RID: 7282 RVA: 0x0004F3F8 File Offset: 0x0004D5F8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2366]);
				}
			}

			// Token: 0x06001C73 RID: 7283 RVA: 0x0004F41C File Offset: 0x0004D61C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2366]);
			}

			// Token: 0x06001C74 RID: 7284 RVA: 0x0004F430 File Offset: 0x0004D630
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2366]);
				}
			}

			// Token: 0x06001C75 RID: 7285 RVA: 0x0004F464 File Offset: 0x0004D664
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2366]);
				}
			}

			// Token: 0x06001C76 RID: 7286 RVA: 0x0004F488 File Offset: 0x0004D688
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2366]);
			}

			// Token: 0x06001C77 RID: 7287 RVA: 0x0004F49C File Offset: 0x0004D69C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, sbyte[] v)
			{
				fixed (sbyte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[2369]);
				}
			}

			// Token: 0x06001C78 RID: 7288 RVA: 0x0004F4D0 File Offset: 0x0004D6D0
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, ref sbyte v)
			{
				fixed (sbyte* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[2369]);
				}
			}

			// Token: 0x06001C79 RID: 7289 RVA: 0x0004F4F4 File Offset: 0x0004D6F4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, sbyte* v)
			{
				calli(System.Void(System.UInt32,System.SByte*), index, v, GL.EntryPoints[2369]);
			}

			// Token: 0x06001C7A RID: 7290 RVA: 0x0004F508 File Offset: 0x0004D708
			[CLSCompliant(false)]
			public static void VertexAttrib4(int index, double x, double y, double z, double w)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double,System.Double,System.Double), index, x, y, z, w, GL.EntryPoints[2371]);
			}

			// Token: 0x06001C7B RID: 7291 RVA: 0x0004F520 File Offset: 0x0004D720
			[CLSCompliant(false)]
			public static void VertexAttrib4(uint index, double x, double y, double z, double w)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double,System.Double,System.Double), index, x, y, z, w, GL.EntryPoints[2371]);
			}

			// Token: 0x06001C7C RID: 7292 RVA: 0x0004F538 File Offset: 0x0004D738
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2374]);
				}
			}

			// Token: 0x06001C7D RID: 7293 RVA: 0x0004F56C File Offset: 0x0004D76C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2374]);
				}
			}

			// Token: 0x06001C7E RID: 7294 RVA: 0x0004F590 File Offset: 0x0004D790
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2374]);
			}

			// Token: 0x06001C7F RID: 7295 RVA: 0x0004F5A4 File Offset: 0x0004D7A4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2374]);
				}
			}

			// Token: 0x06001C80 RID: 7296 RVA: 0x0004F5D8 File Offset: 0x0004D7D8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2374]);
				}
			}

			// Token: 0x06001C81 RID: 7297 RVA: 0x0004F5FC File Offset: 0x0004D7FC
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2374]);
			}

			// Token: 0x06001C82 RID: 7298 RVA: 0x0004F610 File Offset: 0x0004D810
			[CLSCompliant(false)]
			public static void VertexAttrib4(int index, float x, float y, float z, float w)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single), index, x, y, z, w, GL.EntryPoints[2377]);
			}

			// Token: 0x06001C83 RID: 7299 RVA: 0x0004F628 File Offset: 0x0004D828
			[CLSCompliant(false)]
			public static void VertexAttrib4(uint index, float x, float y, float z, float w)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single), index, x, y, z, w, GL.EntryPoints[2377]);
			}

			// Token: 0x06001C84 RID: 7300 RVA: 0x0004F640 File Offset: 0x0004D840
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2380]);
				}
			}

			// Token: 0x06001C85 RID: 7301 RVA: 0x0004F674 File Offset: 0x0004D874
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2380]);
				}
			}

			// Token: 0x06001C86 RID: 7302 RVA: 0x0004F698 File Offset: 0x0004D898
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, float* v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2380]);
			}

			// Token: 0x06001C87 RID: 7303 RVA: 0x0004F6AC File Offset: 0x0004D8AC
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2380]);
				}
			}

			// Token: 0x06001C88 RID: 7304 RVA: 0x0004F6E0 File Offset: 0x0004D8E0
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2380]);
				}
			}

			// Token: 0x06001C89 RID: 7305 RVA: 0x0004F704 File Offset: 0x0004D904
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, float* v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2380]);
			}

			// Token: 0x06001C8A RID: 7306 RVA: 0x0004F718 File Offset: 0x0004D918
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2385]);
				}
			}

			// Token: 0x06001C8B RID: 7307 RVA: 0x0004F74C File Offset: 0x0004D94C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2385]);
				}
			}

			// Token: 0x06001C8C RID: 7308 RVA: 0x0004F770 File Offset: 0x0004D970
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, int* v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2385]);
			}

			// Token: 0x06001C8D RID: 7309 RVA: 0x0004F784 File Offset: 0x0004D984
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2385]);
				}
			}

			// Token: 0x06001C8E RID: 7310 RVA: 0x0004F7B8 File Offset: 0x0004D9B8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2385]);
				}
			}

			// Token: 0x06001C8F RID: 7311 RVA: 0x0004F7DC File Offset: 0x0004D9DC
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, int* v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2385]);
			}

			// Token: 0x06001C90 RID: 7312 RVA: 0x0004F7F0 File Offset: 0x0004D9F0
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, sbyte[] v)
			{
				fixed (sbyte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[2387]);
				}
			}

			// Token: 0x06001C91 RID: 7313 RVA: 0x0004F824 File Offset: 0x0004DA24
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, ref sbyte v)
			{
				fixed (sbyte* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[2387]);
				}
			}

			// Token: 0x06001C92 RID: 7314 RVA: 0x0004F848 File Offset: 0x0004DA48
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, sbyte* v)
			{
				calli(System.Void(System.UInt32,System.SByte*), index, v, GL.EntryPoints[2387]);
			}

			// Token: 0x06001C93 RID: 7315 RVA: 0x0004F85C File Offset: 0x0004DA5C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(int index, int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2389]);
				}
			}

			// Token: 0x06001C94 RID: 7316 RVA: 0x0004F890 File Offset: 0x0004DA90
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(int index, ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2389]);
				}
			}

			// Token: 0x06001C95 RID: 7317 RVA: 0x0004F8B4 File Offset: 0x0004DAB4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(int index, int* v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2389]);
			}

			// Token: 0x06001C96 RID: 7318 RVA: 0x0004F8C8 File Offset: 0x0004DAC8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2389]);
				}
			}

			// Token: 0x06001C97 RID: 7319 RVA: 0x0004F8FC File Offset: 0x0004DAFC
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2389]);
				}
			}

			// Token: 0x06001C98 RID: 7320 RVA: 0x0004F920 File Offset: 0x0004DB20
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, int* v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2389]);
			}

			// Token: 0x06001C99 RID: 7321 RVA: 0x0004F934 File Offset: 0x0004DB34
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(int index, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2391]);
				}
			}

			// Token: 0x06001C9A RID: 7322 RVA: 0x0004F968 File Offset: 0x0004DB68
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(int index, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2391]);
				}
			}

			// Token: 0x06001C9B RID: 7323 RVA: 0x0004F98C File Offset: 0x0004DB8C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(int index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2391]);
			}

			// Token: 0x06001C9C RID: 7324 RVA: 0x0004F9A0 File Offset: 0x0004DBA0
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2391]);
				}
			}

			// Token: 0x06001C9D RID: 7325 RVA: 0x0004F9D4 File Offset: 0x0004DBD4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2391]);
				}
			}

			// Token: 0x06001C9E RID: 7326 RVA: 0x0004F9F8 File Offset: 0x0004DBF8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2391]);
			}

			// Token: 0x06001C9F RID: 7327 RVA: 0x0004FA0C File Offset: 0x0004DC0C
			[CLSCompliant(false)]
			public static void VertexAttrib4N(int index, byte x, byte y, byte z, byte w)
			{
				calli(System.Void(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte), index, x, y, z, w, GL.EntryPoints[2393]);
			}

			// Token: 0x06001CA0 RID: 7328 RVA: 0x0004FA24 File Offset: 0x0004DC24
			[CLSCompliant(false)]
			public static void VertexAttrib4N(uint index, byte x, byte y, byte z, byte w)
			{
				calli(System.Void(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte), index, x, y, z, w, GL.EntryPoints[2393]);
			}

			// Token: 0x06001CA1 RID: 7329 RVA: 0x0004FA3C File Offset: 0x0004DC3C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(int index, byte[] v)
			{
				fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2395]);
				}
			}

			// Token: 0x06001CA2 RID: 7330 RVA: 0x0004FA70 File Offset: 0x0004DC70
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(int index, ref byte v)
			{
				fixed (byte* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2395]);
				}
			}

			// Token: 0x06001CA3 RID: 7331 RVA: 0x0004FA94 File Offset: 0x0004DC94
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(int index, byte* v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[2395]);
			}

			// Token: 0x06001CA4 RID: 7332 RVA: 0x0004FAA8 File Offset: 0x0004DCA8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, byte[] v)
			{
				fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2395]);
				}
			}

			// Token: 0x06001CA5 RID: 7333 RVA: 0x0004FADC File Offset: 0x0004DCDC
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, ref byte v)
			{
				fixed (byte* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2395]);
				}
			}

			// Token: 0x06001CA6 RID: 7334 RVA: 0x0004FB00 File Offset: 0x0004DD00
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, byte* v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[2395]);
			}

			// Token: 0x06001CA7 RID: 7335 RVA: 0x0004FB14 File Offset: 0x0004DD14
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, uint[] v)
			{
				fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2397]);
				}
			}

			// Token: 0x06001CA8 RID: 7336 RVA: 0x0004FB48 File Offset: 0x0004DD48
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, ref uint v)
			{
				fixed (uint* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2397]);
				}
			}

			// Token: 0x06001CA9 RID: 7337 RVA: 0x0004FB6C File Offset: 0x0004DD6C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, uint* v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[2397]);
			}

			// Token: 0x06001CAA RID: 7338 RVA: 0x0004FB80 File Offset: 0x0004DD80
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, ushort[] v)
			{
				fixed (ushort* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[2399]);
				}
			}

			// Token: 0x06001CAB RID: 7339 RVA: 0x0004FBB4 File Offset: 0x0004DDB4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, ref ushort v)
			{
				fixed (ushort* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[2399]);
				}
			}

			// Token: 0x06001CAC RID: 7340 RVA: 0x0004FBD8 File Offset: 0x0004DDD8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4N(uint index, ushort* v)
			{
				calli(System.Void(System.UInt32,System.UInt16*), index, v, GL.EntryPoints[2399]);
			}

			// Token: 0x06001CAD RID: 7341 RVA: 0x0004FBEC File Offset: 0x0004DDEC
			[CLSCompliant(false)]
			public static void VertexAttrib4(int index, short x, short y, short z, short w)
			{
				calli(System.Void(System.UInt32,System.Int16,System.Int16,System.Int16,System.Int16), index, x, y, z, w, GL.EntryPoints[2401]);
			}

			// Token: 0x06001CAE RID: 7342 RVA: 0x0004FC04 File Offset: 0x0004DE04
			[CLSCompliant(false)]
			public static void VertexAttrib4(uint index, short x, short y, short z, short w)
			{
				calli(System.Void(System.UInt32,System.Int16,System.Int16,System.Int16,System.Int16), index, x, y, z, w, GL.EntryPoints[2401]);
			}

			// Token: 0x06001CAF RID: 7343 RVA: 0x0004FC1C File Offset: 0x0004DE1C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2404]);
				}
			}

			// Token: 0x06001CB0 RID: 7344 RVA: 0x0004FC50 File Offset: 0x0004DE50
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2404]);
				}
			}

			// Token: 0x06001CB1 RID: 7345 RVA: 0x0004FC74 File Offset: 0x0004DE74
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2404]);
			}

			// Token: 0x06001CB2 RID: 7346 RVA: 0x0004FC88 File Offset: 0x0004DE88
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2404]);
				}
			}

			// Token: 0x06001CB3 RID: 7347 RVA: 0x0004FCBC File Offset: 0x0004DEBC
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2404]);
				}
			}

			// Token: 0x06001CB4 RID: 7348 RVA: 0x0004FCE0 File Offset: 0x0004DEE0
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2404]);
			}

			// Token: 0x06001CB5 RID: 7349 RVA: 0x0004FCF4 File Offset: 0x0004DEF4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, byte[] v)
			{
				fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2408]);
				}
			}

			// Token: 0x06001CB6 RID: 7350 RVA: 0x0004FD28 File Offset: 0x0004DF28
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, ref byte v)
			{
				fixed (byte* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2408]);
				}
			}

			// Token: 0x06001CB7 RID: 7351 RVA: 0x0004FD4C File Offset: 0x0004DF4C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, byte* v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[2408]);
			}

			// Token: 0x06001CB8 RID: 7352 RVA: 0x0004FD60 File Offset: 0x0004DF60
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, byte[] v)
			{
				fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2408]);
				}
			}

			// Token: 0x06001CB9 RID: 7353 RVA: 0x0004FD94 File Offset: 0x0004DF94
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, ref byte v)
			{
				fixed (byte* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2408]);
				}
			}

			// Token: 0x06001CBA RID: 7354 RVA: 0x0004FDB8 File Offset: 0x0004DFB8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, byte* v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[2408]);
			}

			// Token: 0x06001CBB RID: 7355 RVA: 0x0004FDCC File Offset: 0x0004DFCC
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, uint[] v)
			{
				fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2411]);
				}
			}

			// Token: 0x06001CBC RID: 7356 RVA: 0x0004FE00 File Offset: 0x0004E000
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, ref uint v)
			{
				fixed (uint* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2411]);
				}
			}

			// Token: 0x06001CBD RID: 7357 RVA: 0x0004FE24 File Offset: 0x0004E024
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, uint* v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[2411]);
			}

			// Token: 0x06001CBE RID: 7358 RVA: 0x0004FE38 File Offset: 0x0004E038
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, ushort[] v)
			{
				fixed (ushort* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[2413]);
				}
			}

			// Token: 0x06001CBF RID: 7359 RVA: 0x0004FE6C File Offset: 0x0004E06C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, ref ushort v)
			{
				fixed (ushort* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[2413]);
				}
			}

			// Token: 0x06001CC0 RID: 7360 RVA: 0x0004FE90 File Offset: 0x0004E090
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, ushort* v)
			{
				calli(System.Void(System.UInt32,System.UInt16*), index, v, GL.EntryPoints[2413]);
			}

			// Token: 0x06001CC1 RID: 7361 RVA: 0x0004FEA4 File Offset: 0x0004E0A4
			[CLSCompliant(false)]
			public static void VertexAttribDivisor(int index, int divisor)
			{
				calli(System.Void(System.UInt32,System.UInt32), index, divisor, GL.EntryPoints[2417]);
			}

			// Token: 0x06001CC2 RID: 7362 RVA: 0x0004FEB8 File Offset: 0x0004E0B8
			[CLSCompliant(false)]
			public static void VertexAttribDivisor(uint index, uint divisor)
			{
				calli(System.Void(System.UInt32,System.UInt32), index, divisor, GL.EntryPoints[2417]);
			}

			// Token: 0x06001CC3 RID: 7363 RVA: 0x0004FECC File Offset: 0x0004E0CC
			[CLSCompliant(false)]
			public static void VertexAttribL1(int index, long x)
			{
				calli(System.Void(System.UInt32,System.UInt64), index, x, GL.EntryPoints[2470]);
			}

			// Token: 0x06001CC4 RID: 7364 RVA: 0x0004FEE0 File Offset: 0x0004E0E0
			[CLSCompliant(false)]
			public static void VertexAttribL1(uint index, ulong x)
			{
				calli(System.Void(System.UInt32,System.UInt64), index, x, GL.EntryPoints[2470]);
			}

			// Token: 0x06001CC5 RID: 7365 RVA: 0x0004FEF4 File Offset: 0x0004E0F4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL1(int index, long[] v)
			{
				fixed (long* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt64*), index, ptr, GL.EntryPoints[2472]);
				}
			}

			// Token: 0x06001CC6 RID: 7366 RVA: 0x0004FF28 File Offset: 0x0004E128
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL1(int index, long* v)
			{
				calli(System.Void(System.UInt32,System.UInt64*), index, v, GL.EntryPoints[2472]);
			}

			// Token: 0x06001CC7 RID: 7367 RVA: 0x0004FF3C File Offset: 0x0004E13C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL1(uint index, ulong[] v)
			{
				fixed (ulong* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt64*), index, ptr, GL.EntryPoints[2472]);
				}
			}

			// Token: 0x06001CC8 RID: 7368 RVA: 0x0004FF70 File Offset: 0x0004E170
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL1(uint index, ulong* v)
			{
				calli(System.Void(System.UInt32,System.UInt64*), index, v, GL.EntryPoints[2472]);
			}

			// Token: 0x06001CC9 RID: 7369 RVA: 0x0004FF84 File Offset: 0x0004E184
			[CLSCompliant(false)]
			public static void VertexAttribPointer(int index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, IntPtr pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, pointer, GL.EntryPoints[2512]);
			}

			// Token: 0x06001CCA RID: 7370 RVA: 0x0004FFA0 File Offset: 0x0004E1A0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, [In] [Out] T5[] pointer) where T5 : struct
			{
				fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[2512]);
				}
			}

			// Token: 0x06001CCB RID: 7371 RVA: 0x0004FFDC File Offset: 0x0004E1DC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, [In] [Out] T5[,] pointer) where T5 : struct
			{
				fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[2512]);
				}
			}

			// Token: 0x06001CCC RID: 7372 RVA: 0x0005001C File Offset: 0x0004E21C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, [In] [Out] T5[,,] pointer) where T5 : struct
			{
				fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[2512]);
				}
			}

			// Token: 0x06001CCD RID: 7373 RVA: 0x00050060 File Offset: 0x0004E260
			[CLSCompliant(false)]
			public unsafe static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, [In] [Out] ref T5 pointer) where T5 : struct
			{
				fixed (T5* ptr = &pointer)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[2512]);
				}
			}

			// Token: 0x06001CCE RID: 7374 RVA: 0x00050088 File Offset: 0x0004E288
			[CLSCompliant(false)]
			public static void VertexAttribPointer(uint index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, IntPtr pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, pointer, GL.EntryPoints[2512]);
			}

			// Token: 0x06001CCF RID: 7375 RVA: 0x000500A4 File Offset: 0x0004E2A4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, [In] [Out] T5[] pointer) where T5 : struct
			{
				fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[2512]);
				}
			}

			// Token: 0x06001CD0 RID: 7376 RVA: 0x000500E0 File Offset: 0x0004E2E0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, [In] [Out] T5[,] pointer) where T5 : struct
			{
				fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[2512]);
				}
			}

			// Token: 0x06001CD1 RID: 7377 RVA: 0x00050120 File Offset: 0x0004E320
			[CLSCompliant(false)]
			public unsafe static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, [In] [Out] T5[,,] pointer) where T5 : struct
			{
				fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[2512]);
				}
			}

			// Token: 0x06001CD2 RID: 7378 RVA: 0x00050164 File Offset: 0x0004E364
			[CLSCompliant(false)]
			public unsafe static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, [In] [Out] ref T5 pointer) where T5 : struct
			{
				fixed (T5* ptr = &pointer)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[2512]);
				}
			}

			// Token: 0x06001CD3 RID: 7379 RVA: 0x0005018C File Offset: 0x0004E38C
			public static void VertexBlend(int count)
			{
				calli(System.Void(System.Int32), count, GL.EntryPoints[2532]);
			}

			// Token: 0x06001CD4 RID: 7380 RVA: 0x000501A0 File Offset: 0x0004E3A0
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, sbyte[] weights)
			{
				fixed (sbyte* ptr = ref (weights != null && weights.Length != 0) ? ref weights[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.SByte*), size, ptr, GL.EntryPoints[2592]);
				}
			}

			// Token: 0x06001CD5 RID: 7381 RVA: 0x000501D4 File Offset: 0x0004E3D4
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, ref sbyte weights)
			{
				fixed (sbyte* ptr = &weights)
				{
					calli(System.Void(System.Int32,System.SByte*), size, ptr, GL.EntryPoints[2592]);
				}
			}

			// Token: 0x06001CD6 RID: 7382 RVA: 0x000501F8 File Offset: 0x0004E3F8
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, sbyte* weights)
			{
				calli(System.Void(System.Int32,System.SByte*), size, weights, GL.EntryPoints[2592]);
			}

			// Token: 0x06001CD7 RID: 7383 RVA: 0x0005020C File Offset: 0x0004E40C
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, double[] weights)
			{
				fixed (double* ptr = ref (weights != null && weights.Length != 0) ? ref weights[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Double*), size, ptr, GL.EntryPoints[2593]);
				}
			}

			// Token: 0x06001CD8 RID: 7384 RVA: 0x00050240 File Offset: 0x0004E440
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, ref double weights)
			{
				fixed (double* ptr = &weights)
				{
					calli(System.Void(System.Int32,System.Double*), size, ptr, GL.EntryPoints[2593]);
				}
			}

			// Token: 0x06001CD9 RID: 7385 RVA: 0x00050264 File Offset: 0x0004E464
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, double* weights)
			{
				calli(System.Void(System.Int32,System.Double*), size, weights, GL.EntryPoints[2593]);
			}

			// Token: 0x06001CDA RID: 7386 RVA: 0x00050278 File Offset: 0x0004E478
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, float[] weights)
			{
				fixed (float* ptr = ref (weights != null && weights.Length != 0) ? ref weights[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), size, ptr, GL.EntryPoints[2594]);
				}
			}

			// Token: 0x06001CDB RID: 7387 RVA: 0x000502AC File Offset: 0x0004E4AC
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, ref float weights)
			{
				fixed (float* ptr = &weights)
				{
					calli(System.Void(System.Int32,System.Single*), size, ptr, GL.EntryPoints[2594]);
				}
			}

			// Token: 0x06001CDC RID: 7388 RVA: 0x000502D0 File Offset: 0x0004E4D0
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, float* weights)
			{
				calli(System.Void(System.Int32,System.Single*), size, weights, GL.EntryPoints[2594]);
			}

			// Token: 0x06001CDD RID: 7389 RVA: 0x000502E4 File Offset: 0x0004E4E4
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, int[] weights)
			{
				fixed (int* ptr = ref (weights != null && weights.Length != 0) ? ref weights[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), size, ptr, GL.EntryPoints[2595]);
				}
			}

			// Token: 0x06001CDE RID: 7390 RVA: 0x00050318 File Offset: 0x0004E518
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, ref int weights)
			{
				fixed (int* ptr = &weights)
				{
					calli(System.Void(System.Int32,System.Int32*), size, ptr, GL.EntryPoints[2595]);
				}
			}

			// Token: 0x06001CDF RID: 7391 RVA: 0x0005033C File Offset: 0x0004E53C
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, int* weights)
			{
				calli(System.Void(System.Int32,System.Int32*), size, weights, GL.EntryPoints[2595]);
			}

			// Token: 0x06001CE0 RID: 7392 RVA: 0x00050350 File Offset: 0x0004E550
			public static void WeightPointer(int size, ArbVertexBlend type, int stride, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, pointer, GL.EntryPoints[2597]);
			}

			// Token: 0x06001CE1 RID: 7393 RVA: 0x00050368 File Offset: 0x0004E568
			[CLSCompliant(false)]
			public unsafe static void WeightPointer<T3>(int size, ArbVertexBlend type, int stride, [In] [Out] T3[] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[2597]);
				}
			}

			// Token: 0x06001CE2 RID: 7394 RVA: 0x000503A0 File Offset: 0x0004E5A0
			[CLSCompliant(false)]
			public unsafe static void WeightPointer<T3>(int size, ArbVertexBlend type, int stride, [In] [Out] T3[,] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[2597]);
				}
			}

			// Token: 0x06001CE3 RID: 7395 RVA: 0x000503DC File Offset: 0x0004E5DC
			[CLSCompliant(false)]
			public unsafe static void WeightPointer<T3>(int size, ArbVertexBlend type, int stride, [In] [Out] T3[,,] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[2597]);
				}
			}

			// Token: 0x06001CE4 RID: 7396 RVA: 0x00050418 File Offset: 0x0004E618
			public unsafe static void WeightPointer<T3>(int size, ArbVertexBlend type, int stride, [In] [Out] ref T3 pointer) where T3 : struct
			{
				fixed (T3* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[2597]);
				}
			}

			// Token: 0x06001CE5 RID: 7397 RVA: 0x0005043C File Offset: 0x0004E63C
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, short[] weights)
			{
				fixed (short* ptr = ref (weights != null && weights.Length != 0) ? ref weights[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int16*), size, ptr, GL.EntryPoints[2598]);
				}
			}

			// Token: 0x06001CE6 RID: 7398 RVA: 0x00050470 File Offset: 0x0004E670
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, ref short weights)
			{
				fixed (short* ptr = &weights)
				{
					calli(System.Void(System.Int32,System.Int16*), size, ptr, GL.EntryPoints[2598]);
				}
			}

			// Token: 0x06001CE7 RID: 7399 RVA: 0x00050494 File Offset: 0x0004E694
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, short* weights)
			{
				calli(System.Void(System.Int32,System.Int16*), size, weights, GL.EntryPoints[2598]);
			}

			// Token: 0x06001CE8 RID: 7400 RVA: 0x000504A8 File Offset: 0x0004E6A8
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, byte[] weights)
			{
				fixed (byte* ptr = ref (weights != null && weights.Length != 0) ? ref weights[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Byte*), size, ptr, GL.EntryPoints[2599]);
				}
			}

			// Token: 0x06001CE9 RID: 7401 RVA: 0x000504DC File Offset: 0x0004E6DC
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, ref byte weights)
			{
				fixed (byte* ptr = &weights)
				{
					calli(System.Void(System.Int32,System.Byte*), size, ptr, GL.EntryPoints[2599]);
				}
			}

			// Token: 0x06001CEA RID: 7402 RVA: 0x00050500 File Offset: 0x0004E700
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, byte* weights)
			{
				calli(System.Void(System.Int32,System.Byte*), size, weights, GL.EntryPoints[2599]);
			}

			// Token: 0x06001CEB RID: 7403 RVA: 0x00050514 File Offset: 0x0004E714
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, uint[] weights)
			{
				fixed (uint* ptr = ref (weights != null && weights.Length != 0) ? ref weights[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), size, ptr, GL.EntryPoints[2600]);
				}
			}

			// Token: 0x06001CEC RID: 7404 RVA: 0x00050548 File Offset: 0x0004E748
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, ref uint weights)
			{
				fixed (uint* ptr = &weights)
				{
					calli(System.Void(System.Int32,System.UInt32*), size, ptr, GL.EntryPoints[2600]);
				}
			}

			// Token: 0x06001CED RID: 7405 RVA: 0x0005056C File Offset: 0x0004E76C
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, uint* weights)
			{
				calli(System.Void(System.Int32,System.UInt32*), size, weights, GL.EntryPoints[2600]);
			}

			// Token: 0x06001CEE RID: 7406 RVA: 0x00050580 File Offset: 0x0004E780
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, ushort[] weights)
			{
				fixed (ushort* ptr = ref (weights != null && weights.Length != 0) ? ref weights[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt16*), size, ptr, GL.EntryPoints[2601]);
				}
			}

			// Token: 0x06001CEF RID: 7407 RVA: 0x000505B4 File Offset: 0x0004E7B4
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, ref ushort weights)
			{
				fixed (ushort* ptr = &weights)
				{
					calli(System.Void(System.Int32,System.UInt16*), size, ptr, GL.EntryPoints[2601]);
				}
			}

			// Token: 0x06001CF0 RID: 7408 RVA: 0x000505D8 File Offset: 0x0004E7D8
			[CLSCompliant(false)]
			public unsafe static void Weight(int size, ushort* weights)
			{
				calli(System.Void(System.Int32,System.UInt16*), size, weights, GL.EntryPoints[2601]);
			}

			// Token: 0x06001CF1 RID: 7409 RVA: 0x000505EC File Offset: 0x0004E7EC
			public static void WindowPos2(double x, double y)
			{
				calli(System.Void(System.Double,System.Double), x, y, GL.EntryPoints[2603]);
			}

			// Token: 0x06001CF2 RID: 7410 RVA: 0x00050600 File Offset: 0x0004E800
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[2606]);
				}
			}

			// Token: 0x06001CF3 RID: 7411 RVA: 0x00050634 File Offset: 0x0004E834
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[2606]);
				}
			}

			// Token: 0x06001CF4 RID: 7412 RVA: 0x00050658 File Offset: 0x0004E858
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(double* v)
			{
				calli(System.Void(System.Double*), v, GL.EntryPoints[2606]);
			}

			// Token: 0x06001CF5 RID: 7413 RVA: 0x0005066C File Offset: 0x0004E86C
			public static void WindowPos2(float x, float y)
			{
				calli(System.Void(System.Single,System.Single), x, y, GL.EntryPoints[2609]);
			}

			// Token: 0x06001CF6 RID: 7414 RVA: 0x00050680 File Offset: 0x0004E880
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[2612]);
				}
			}

			// Token: 0x06001CF7 RID: 7415 RVA: 0x000506B4 File Offset: 0x0004E8B4
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[2612]);
				}
			}

			// Token: 0x06001CF8 RID: 7416 RVA: 0x000506D8 File Offset: 0x0004E8D8
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(float* v)
			{
				calli(System.Void(System.Single*), v, GL.EntryPoints[2612]);
			}

			// Token: 0x06001CF9 RID: 7417 RVA: 0x000506EC File Offset: 0x0004E8EC
			public static void WindowPos2(int x, int y)
			{
				calli(System.Void(System.Int32,System.Int32), x, y, GL.EntryPoints[2615]);
			}

			// Token: 0x06001CFA RID: 7418 RVA: 0x00050700 File Offset: 0x0004E900
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2618]);
				}
			}

			// Token: 0x06001CFB RID: 7419 RVA: 0x00050734 File Offset: 0x0004E934
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2618]);
				}
			}

			// Token: 0x06001CFC RID: 7420 RVA: 0x00050758 File Offset: 0x0004E958
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(int* v)
			{
				calli(System.Void(System.Int32*), v, GL.EntryPoints[2618]);
			}

			// Token: 0x06001CFD RID: 7421 RVA: 0x0005076C File Offset: 0x0004E96C
			public static void WindowPos2(short x, short y)
			{
				calli(System.Void(System.Int16,System.Int16), x, y, GL.EntryPoints[2621]);
			}

			// Token: 0x06001CFE RID: 7422 RVA: 0x00050780 File Offset: 0x0004E980
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2624]);
				}
			}

			// Token: 0x06001CFF RID: 7423 RVA: 0x000507B4 File Offset: 0x0004E9B4
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2624]);
				}
			}

			// Token: 0x06001D00 RID: 7424 RVA: 0x000507D8 File Offset: 0x0004E9D8
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(short* v)
			{
				calli(System.Void(System.Int16*), v, GL.EntryPoints[2624]);
			}

			// Token: 0x06001D01 RID: 7425 RVA: 0x000507EC File Offset: 0x0004E9EC
			public static void WindowPos3(double x, double y, double z)
			{
				calli(System.Void(System.Double,System.Double,System.Double), x, y, z, GL.EntryPoints[2627]);
			}

			// Token: 0x06001D02 RID: 7426 RVA: 0x00050804 File Offset: 0x0004EA04
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[2630]);
				}
			}

			// Token: 0x06001D03 RID: 7427 RVA: 0x00050838 File Offset: 0x0004EA38
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[2630]);
				}
			}

			// Token: 0x06001D04 RID: 7428 RVA: 0x0005085C File Offset: 0x0004EA5C
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(double* v)
			{
				calli(System.Void(System.Double*), v, GL.EntryPoints[2630]);
			}

			// Token: 0x06001D05 RID: 7429 RVA: 0x00050870 File Offset: 0x0004EA70
			public static void WindowPos3(float x, float y, float z)
			{
				calli(System.Void(System.Single,System.Single,System.Single), x, y, z, GL.EntryPoints[2633]);
			}

			// Token: 0x06001D06 RID: 7430 RVA: 0x00050888 File Offset: 0x0004EA88
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[2636]);
				}
			}

			// Token: 0x06001D07 RID: 7431 RVA: 0x000508BC File Offset: 0x0004EABC
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[2636]);
				}
			}

			// Token: 0x06001D08 RID: 7432 RVA: 0x000508E0 File Offset: 0x0004EAE0
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(float* v)
			{
				calli(System.Void(System.Single*), v, GL.EntryPoints[2636]);
			}

			// Token: 0x06001D09 RID: 7433 RVA: 0x000508F4 File Offset: 0x0004EAF4
			public static void WindowPos3(int x, int y, int z)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), x, y, z, GL.EntryPoints[2639]);
			}

			// Token: 0x06001D0A RID: 7434 RVA: 0x0005090C File Offset: 0x0004EB0C
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2642]);
				}
			}

			// Token: 0x06001D0B RID: 7435 RVA: 0x00050940 File Offset: 0x0004EB40
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2642]);
				}
			}

			// Token: 0x06001D0C RID: 7436 RVA: 0x00050964 File Offset: 0x0004EB64
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(int* v)
			{
				calli(System.Void(System.Int32*), v, GL.EntryPoints[2642]);
			}

			// Token: 0x06001D0D RID: 7437 RVA: 0x00050978 File Offset: 0x0004EB78
			public static void WindowPos3(short x, short y, short z)
			{
				calli(System.Void(System.Int16,System.Int16,System.Int16), x, y, z, GL.EntryPoints[2645]);
			}

			// Token: 0x06001D0E RID: 7438 RVA: 0x00050990 File Offset: 0x0004EB90
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2648]);
				}
			}

			// Token: 0x06001D0F RID: 7439 RVA: 0x000509C4 File Offset: 0x0004EBC4
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2648]);
				}
			}

			// Token: 0x06001D10 RID: 7440 RVA: 0x000509E8 File Offset: 0x0004EBE8
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(short* v)
			{
				calli(System.Void(System.Int16*), v, GL.EntryPoints[2648]);
			}

			// Token: 0x06001D11 RID: 7441 RVA: 0x000509FC File Offset: 0x0004EBFC
			[Obsolete("Use ProgramParameter(..., AssemblyProgramParameterArb, ...) instead.")]
			public static void ProgramParameter(int program, ArbGeometryShader4 pname, int value)
			{
				GL.Arb.ProgramParameter(program, (AssemblyProgramParameterArb)pname, value);
			}

			// Token: 0x06001D12 RID: 7442 RVA: 0x00050A08 File Offset: 0x0004EC08
			[Obsolete("Use ProgramParameter(..., AssemblyProgramParameterArb, ...) instead.")]
			[CLSCompliant(false)]
			public static void ProgramParameter(uint program, ArbGeometryShader4 pname, int value)
			{
				GL.Arb.ProgramParameter(program, (AssemblyProgramParameterArb)pname, value);
			}

			// Token: 0x06001D13 RID: 7443 RVA: 0x00050A14 File Offset: 0x0004EC14
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overloads instead")]
			public unsafe static void GetAttachedObjects(int containerObj, int maxCount, [Out] int* count, [Out] int[] obj)
			{
				fixed (int* ptr = ref (obj != null && obj.Length != 0) ? ref obj[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), containerObj, maxCount, count, ptr, GL.EntryPoints[645]);
				}
			}

			// Token: 0x06001D14 RID: 7444 RVA: 0x00050A4C File Offset: 0x0004EC4C
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overloads instead")]
			public unsafe static void GetAttachedObjects(uint containerObj, int maxCount, [Out] int* count, [Out] uint[] obj)
			{
				fixed (uint* ptr = ref (obj != null && obj.Length != 0) ? ref obj[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), containerObj, maxCount, count, ptr, GL.EntryPoints[645]);
				}
			}
		}

		// Token: 0x020004BA RID: 1210
		public static class Ati
		{
			// Token: 0x06001D15 RID: 7445 RVA: 0x00050A84 File Offset: 0x0004EC84
			[CLSCompliant(false)]
			public static void AlphaFragmentOp1(AtiFragmentShader op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), op, dst, dstMod, arg1, arg1Rep, arg1Mod, GL.EntryPoints[9]);
			}

			// Token: 0x06001D16 RID: 7446 RVA: 0x00050A9C File Offset: 0x0004EC9C
			[CLSCompliant(false)]
			public static void AlphaFragmentOp1(AtiFragmentShader op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), op, dst, dstMod, arg1, arg1Rep, arg1Mod, GL.EntryPoints[9]);
			}

			// Token: 0x06001D17 RID: 7447 RVA: 0x00050AB4 File Offset: 0x0004ECB4
			[CLSCompliant(false)]
			public static void AlphaFragmentOp2(AtiFragmentShader op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, GL.EntryPoints[10]);
			}

			// Token: 0x06001D18 RID: 7448 RVA: 0x00050ADC File Offset: 0x0004ECDC
			[CLSCompliant(false)]
			public static void AlphaFragmentOp2(AtiFragmentShader op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, GL.EntryPoints[10]);
			}

			// Token: 0x06001D19 RID: 7449 RVA: 0x00050B04 File Offset: 0x0004ED04
			[CLSCompliant(false)]
			public static void AlphaFragmentOp3(AtiFragmentShader op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod, GL.EntryPoints[11]);
			}

			// Token: 0x06001D1A RID: 7450 RVA: 0x00050B34 File Offset: 0x0004ED34
			[CLSCompliant(false)]
			public static void AlphaFragmentOp3(AtiFragmentShader op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod, GL.EntryPoints[11]);
			}

			// Token: 0x06001D1B RID: 7451 RVA: 0x00050B64 File Offset: 0x0004ED64
			[CLSCompliant(false)]
			public static void ArrayObject(EnableCap array, int size, AtiVertexArrayObject type, int stride, int buffer, int offset)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32), array, size, type, stride, buffer, offset, GL.EntryPoints[20]);
			}

			// Token: 0x06001D1C RID: 7452 RVA: 0x00050B7C File Offset: 0x0004ED7C
			[CLSCompliant(false)]
			public static void ArrayObject(EnableCap array, int size, AtiVertexArrayObject type, int stride, uint buffer, uint offset)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32), array, size, type, stride, buffer, offset, GL.EntryPoints[20]);
			}

			// Token: 0x06001D1D RID: 7453 RVA: 0x00050B94 File Offset: 0x0004ED94
			public static void BeginFragmentShader()
			{
				calli(System.Void(), GL.EntryPoints[28]);
			}

			// Token: 0x06001D1E RID: 7454 RVA: 0x00050BA4 File Offset: 0x0004EDA4
			[CLSCompliant(false)]
			public static void BindFragmentShader(int id)
			{
				calli(System.Void(System.UInt32), id, GL.EntryPoints[57]);
			}

			// Token: 0x06001D1F RID: 7455 RVA: 0x00050BB4 File Offset: 0x0004EDB4
			[CLSCompliant(false)]
			public static void BindFragmentShader(uint id)
			{
				calli(System.Void(System.UInt32), id, GL.EntryPoints[57]);
			}

			// Token: 0x06001D20 RID: 7456 RVA: 0x00050BC4 File Offset: 0x0004EDC4
			public static void ClientActiveVertexStream(AtiVertexStreams stream)
			{
				calli(System.Void(System.Int32), stream, GL.EntryPoints[169]);
			}

			// Token: 0x06001D21 RID: 7457 RVA: 0x00050BD8 File Offset: 0x0004EDD8
			[CLSCompliant(false)]
			public static void ColorFragmentOp1(AtiFragmentShader op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, GL.EntryPoints[224]);
			}

			// Token: 0x06001D22 RID: 7458 RVA: 0x00050C00 File Offset: 0x0004EE00
			[CLSCompliant(false)]
			public static void ColorFragmentOp1(AtiFragmentShader op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, GL.EntryPoints[224]);
			}

			// Token: 0x06001D23 RID: 7459 RVA: 0x00050C28 File Offset: 0x0004EE28
			[CLSCompliant(false)]
			public static void ColorFragmentOp2(AtiFragmentShader op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, GL.EntryPoints[225]);
			}

			// Token: 0x06001D24 RID: 7460 RVA: 0x00050C58 File Offset: 0x0004EE58
			[CLSCompliant(false)]
			public static void ColorFragmentOp2(AtiFragmentShader op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, GL.EntryPoints[225]);
			}

			// Token: 0x06001D25 RID: 7461 RVA: 0x00050C88 File Offset: 0x0004EE88
			[CLSCompliant(false)]
			public static void ColorFragmentOp3(AtiFragmentShader op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod, GL.EntryPoints[226]);
			}

			// Token: 0x06001D26 RID: 7462 RVA: 0x00050CBC File Offset: 0x0004EEBC
			[CLSCompliant(false)]
			public static void ColorFragmentOp3(AtiFragmentShader op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod, GL.EntryPoints[226]);
			}

			// Token: 0x06001D27 RID: 7463 RVA: 0x00050CF0 File Offset: 0x0004EEF0
			[CLSCompliant(false)]
			public static void DeleteFragmentShader(int id)
			{
				calli(System.Void(System.UInt32), id, GL.EntryPoints[366]);
			}

			// Token: 0x06001D28 RID: 7464 RVA: 0x00050D04 File Offset: 0x0004EF04
			[CLSCompliant(false)]
			public static void DeleteFragmentShader(uint id)
			{
				calli(System.Void(System.UInt32), id, GL.EntryPoints[366]);
			}

			// Token: 0x06001D29 RID: 7465 RVA: 0x00050D18 File Offset: 0x0004EF18
			[CLSCompliant(false)]
			public unsafe static void DrawBuffers(int n, AtiDrawBuffers[] bufs)
			{
				fixed (AtiDrawBuffers* ptr = ref (bufs != null && bufs.Length != 0) ? ref bufs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[435]);
				}
			}

			// Token: 0x06001D2A RID: 7466 RVA: 0x00050D4C File Offset: 0x0004EF4C
			[CLSCompliant(false)]
			public unsafe static void DrawBuffers(int n, ref AtiDrawBuffers bufs)
			{
				fixed (AtiDrawBuffers* ptr = &bufs)
				{
					calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[435]);
				}
			}

			// Token: 0x06001D2B RID: 7467 RVA: 0x00050D70 File Offset: 0x0004EF70
			[CLSCompliant(false)]
			public unsafe static void DrawBuffers(int n, AtiDrawBuffers* bufs)
			{
				calli(System.Void(System.Int32,System.Int32*), n, bufs, GL.EntryPoints[435]);
			}

			// Token: 0x06001D2C RID: 7468 RVA: 0x00050D84 File Offset: 0x0004EF84
			[Obsolete("Use PrimitiveType overload instead")]
			public static void DrawElementArray(BeginMode mode, int count)
			{
				calli(System.Void(System.Int32,System.Int32), mode, count, GL.EntryPoints[437]);
			}

			// Token: 0x06001D2D RID: 7469 RVA: 0x00050D98 File Offset: 0x0004EF98
			public static void DrawElementArray(PrimitiveType mode, int count)
			{
				calli(System.Void(System.Int32,System.Int32), mode, count, GL.EntryPoints[437]);
			}

			// Token: 0x06001D2E RID: 7470 RVA: 0x00050DAC File Offset: 0x0004EFAC
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public static void DrawRangeElementArray(BeginMode mode, int start, int end, int count)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32), mode, start, end, count, GL.EntryPoints[450]);
			}

			// Token: 0x06001D2F RID: 7471 RVA: 0x00050DC4 File Offset: 0x0004EFC4
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public static void DrawRangeElementArray(BeginMode mode, uint start, uint end, int count)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32), mode, start, end, count, GL.EntryPoints[450]);
			}

			// Token: 0x06001D30 RID: 7472 RVA: 0x00050DDC File Offset: 0x0004EFDC
			[CLSCompliant(false)]
			public static void DrawRangeElementArray(PrimitiveType mode, int start, int end, int count)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32), mode, start, end, count, GL.EntryPoints[450]);
			}

			// Token: 0x06001D31 RID: 7473 RVA: 0x00050DF4 File Offset: 0x0004EFF4
			[CLSCompliant(false)]
			public static void DrawRangeElementArray(PrimitiveType mode, uint start, uint end, int count)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32), mode, start, end, count, GL.EntryPoints[450]);
			}

			// Token: 0x06001D32 RID: 7474 RVA: 0x00050E0C File Offset: 0x0004F00C
			public static void ElementPointer(AtiElementArray type, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.IntPtr), type, pointer, GL.EntryPoints[467]);
			}

			// Token: 0x06001D33 RID: 7475 RVA: 0x00050E20 File Offset: 0x0004F020
			[CLSCompliant(false)]
			public unsafe static void ElementPointer<T1>(AtiElementArray type, [In] [Out] T1[] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), type, ptr, GL.EntryPoints[467]);
				}
			}

			// Token: 0x06001D34 RID: 7476 RVA: 0x00050E54 File Offset: 0x0004F054
			[CLSCompliant(false)]
			public unsafe static void ElementPointer<T1>(AtiElementArray type, [In] [Out] T1[,] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), type, ptr, GL.EntryPoints[467]);
				}
			}

			// Token: 0x06001D35 RID: 7477 RVA: 0x00050E8C File Offset: 0x0004F08C
			[CLSCompliant(false)]
			public unsafe static void ElementPointer<T1>(AtiElementArray type, [In] [Out] T1[,,] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), type, ptr, GL.EntryPoints[467]);
				}
			}

			// Token: 0x06001D36 RID: 7478 RVA: 0x00050EC8 File Offset: 0x0004F0C8
			public unsafe static void ElementPointer<T1>(AtiElementArray type, [In] [Out] ref T1 pointer) where T1 : struct
			{
				fixed (T1* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.IntPtr), type, ptr, GL.EntryPoints[467]);
				}
			}

			// Token: 0x06001D37 RID: 7479 RVA: 0x00050EEC File Offset: 0x0004F0EC
			public static void EndFragmentShader()
			{
				calli(System.Void(), GL.EntryPoints[484]);
			}

			// Token: 0x06001D38 RID: 7480 RVA: 0x00050F00 File Offset: 0x0004F100
			[CLSCompliant(false)]
			public static void FreeObjectBuffer(int buffer)
			{
				calli(System.Void(System.UInt32), buffer, GL.EntryPoints[591]);
			}

			// Token: 0x06001D39 RID: 7481 RVA: 0x00050F14 File Offset: 0x0004F114
			[CLSCompliant(false)]
			public static void FreeObjectBuffer(uint buffer)
			{
				calli(System.Void(System.UInt32), buffer, GL.EntryPoints[591]);
			}

			// Token: 0x06001D3A RID: 7482 RVA: 0x00050F28 File Offset: 0x0004F128
			[CLSCompliant(false)]
			public static int GenFragmentShaders(int range)
			{
				return calli(System.Int32(System.UInt32), range, GL.EntryPoints[605]);
			}

			// Token: 0x06001D3B RID: 7483 RVA: 0x00050F3C File Offset: 0x0004F13C
			[CLSCompliant(false)]
			public static int GenFragmentShaders(uint range)
			{
				return calli(System.Int32(System.UInt32), range, GL.EntryPoints[605]);
			}

			// Token: 0x06001D3C RID: 7484 RVA: 0x00050F50 File Offset: 0x0004F150
			[CLSCompliant(false)]
			public unsafe static void GetArrayObject(EnableCap array, AtiVertexArrayObject pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), array, pname, ptr, GL.EntryPoints[643]);
				}
			}

			// Token: 0x06001D3D RID: 7485 RVA: 0x00050F74 File Offset: 0x0004F174
			[CLSCompliant(false)]
			public unsafe static void GetArrayObject(EnableCap array, AtiVertexArrayObject pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), array, pname, @params, GL.EntryPoints[643]);
			}

			// Token: 0x06001D3E RID: 7486 RVA: 0x00050F8C File Offset: 0x0004F18C
			[CLSCompliant(false)]
			public unsafe static void GetArrayObject(EnableCap array, AtiVertexArrayObject pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), array, pname, ptr, GL.EntryPoints[644]);
				}
			}

			// Token: 0x06001D3F RID: 7487 RVA: 0x00050FB0 File Offset: 0x0004F1B0
			[CLSCompliant(false)]
			public unsafe static void GetArrayObject(EnableCap array, AtiVertexArrayObject pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), array, pname, @params, GL.EntryPoints[644]);
			}

			// Token: 0x06001D40 RID: 7488 RVA: 0x00050FC8 File Offset: 0x0004F1C8
			[CLSCompliant(false)]
			public unsafe static void GetObjectBuffer(int buffer, AtiVertexArrayObject pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), buffer, pname, ptr, GL.EntryPoints[822]);
				}
			}

			// Token: 0x06001D41 RID: 7489 RVA: 0x00050FEC File Offset: 0x0004F1EC
			[CLSCompliant(false)]
			public unsafe static void GetObjectBuffer(int buffer, AtiVertexArrayObject pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), buffer, pname, @params, GL.EntryPoints[822]);
			}

			// Token: 0x06001D42 RID: 7490 RVA: 0x00051004 File Offset: 0x0004F204
			[CLSCompliant(false)]
			public unsafe static void GetObjectBuffer(uint buffer, AtiVertexArrayObject pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), buffer, pname, ptr, GL.EntryPoints[822]);
				}
			}

			// Token: 0x06001D43 RID: 7491 RVA: 0x00051028 File Offset: 0x0004F228
			[CLSCompliant(false)]
			public unsafe static void GetObjectBuffer(uint buffer, AtiVertexArrayObject pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), buffer, pname, @params, GL.EntryPoints[822]);
			}

			// Token: 0x06001D44 RID: 7492 RVA: 0x00051040 File Offset: 0x0004F240
			[CLSCompliant(false)]
			public unsafe static void GetObjectBuffer(int buffer, AtiVertexArrayObject pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), buffer, pname, ptr, GL.EntryPoints[823]);
				}
			}

			// Token: 0x06001D45 RID: 7493 RVA: 0x00051064 File Offset: 0x0004F264
			[CLSCompliant(false)]
			public unsafe static void GetObjectBuffer(int buffer, AtiVertexArrayObject pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), buffer, pname, @params, GL.EntryPoints[823]);
			}

			// Token: 0x06001D46 RID: 7494 RVA: 0x0005107C File Offset: 0x0004F27C
			[CLSCompliant(false)]
			public unsafe static void GetObjectBuffer(uint buffer, AtiVertexArrayObject pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), buffer, pname, ptr, GL.EntryPoints[823]);
				}
			}

			// Token: 0x06001D47 RID: 7495 RVA: 0x000510A0 File Offset: 0x0004F2A0
			[CLSCompliant(false)]
			public unsafe static void GetObjectBuffer(uint buffer, AtiVertexArrayObject pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), buffer, pname, @params, GL.EntryPoints[823]);
			}

			// Token: 0x06001D48 RID: 7496 RVA: 0x000510B8 File Offset: 0x0004F2B8
			[CLSCompliant(false)]
			public static float GetTexBumpParameter(AtiEnvmapBumpmap pname)
			{
				float result;
				calli(System.Void(System.Int32,System.Single*), pname, ref result, GL.EntryPoints[932]);
				return result;
			}

			// Token: 0x06001D49 RID: 7497 RVA: 0x000510DC File Offset: 0x0004F2DC
			[CLSCompliant(false)]
			public unsafe static void GetTexBumpParameter(AtiEnvmapBumpmap pname, [Out] float[] param)
			{
				fixed (float* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[932]);
				}
			}

			// Token: 0x06001D4A RID: 7498 RVA: 0x00051110 File Offset: 0x0004F310
			[CLSCompliant(false)]
			public unsafe static void GetTexBumpParameter(AtiEnvmapBumpmap pname, out float param)
			{
				fixed (float* ptr = &param)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[932]);
				}
			}

			// Token: 0x06001D4B RID: 7499 RVA: 0x00051134 File Offset: 0x0004F334
			[CLSCompliant(false)]
			public unsafe static void GetTexBumpParameter(AtiEnvmapBumpmap pname, [Out] float* param)
			{
				calli(System.Void(System.Int32,System.Single*), pname, param, GL.EntryPoints[932]);
			}

			// Token: 0x06001D4C RID: 7500 RVA: 0x00051148 File Offset: 0x0004F348
			[CLSCompliant(false)]
			public unsafe static void GetTexBumpParameter(AtiEnvmapBumpmap pname, [Out] int[] param)
			{
				fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[933]);
				}
			}

			// Token: 0x06001D4D RID: 7501 RVA: 0x0005117C File Offset: 0x0004F37C
			[CLSCompliant(false)]
			public unsafe static void GetTexBumpParameter(AtiEnvmapBumpmap pname, out int param)
			{
				fixed (int* ptr = &param)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[933]);
				}
			}

			// Token: 0x06001D4E RID: 7502 RVA: 0x000511A0 File Offset: 0x0004F3A0
			[CLSCompliant(false)]
			public unsafe static void GetTexBumpParameter(AtiEnvmapBumpmap pname, [Out] int* param)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, param, GL.EntryPoints[933]);
			}

			// Token: 0x06001D4F RID: 7503 RVA: 0x000511B4 File Offset: 0x0004F3B4
			[CLSCompliant(false)]
			public unsafe static void GetVariantArrayObject(int id, AtiVertexArrayObject pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), id, pname, ptr, GL.EntryPoints[985]);
				}
			}

			// Token: 0x06001D50 RID: 7504 RVA: 0x000511D8 File Offset: 0x0004F3D8
			[CLSCompliant(false)]
			public unsafe static void GetVariantArrayObject(int id, AtiVertexArrayObject pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), id, pname, @params, GL.EntryPoints[985]);
			}

			// Token: 0x06001D51 RID: 7505 RVA: 0x000511F0 File Offset: 0x0004F3F0
			[CLSCompliant(false)]
			public unsafe static void GetVariantArrayObject(uint id, AtiVertexArrayObject pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), id, pname, ptr, GL.EntryPoints[985]);
				}
			}

			// Token: 0x06001D52 RID: 7506 RVA: 0x00051214 File Offset: 0x0004F414
			[CLSCompliant(false)]
			public unsafe static void GetVariantArrayObject(uint id, AtiVertexArrayObject pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), id, pname, @params, GL.EntryPoints[985]);
			}

			// Token: 0x06001D53 RID: 7507 RVA: 0x0005122C File Offset: 0x0004F42C
			[CLSCompliant(false)]
			public unsafe static void GetVariantArrayObject(int id, AtiVertexArrayObject pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[986]);
				}
			}

			// Token: 0x06001D54 RID: 7508 RVA: 0x00051250 File Offset: 0x0004F450
			[CLSCompliant(false)]
			public unsafe static void GetVariantArrayObject(int id, AtiVertexArrayObject pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, @params, GL.EntryPoints[986]);
			}

			// Token: 0x06001D55 RID: 7509 RVA: 0x00051268 File Offset: 0x0004F468
			[CLSCompliant(false)]
			public unsafe static void GetVariantArrayObject(uint id, AtiVertexArrayObject pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[986]);
				}
			}

			// Token: 0x06001D56 RID: 7510 RVA: 0x0005128C File Offset: 0x0004F48C
			[CLSCompliant(false)]
			public unsafe static void GetVariantArrayObject(uint id, AtiVertexArrayObject pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, @params, GL.EntryPoints[986]);
			}

			// Token: 0x06001D57 RID: 7511 RVA: 0x000512A4 File Offset: 0x0004F4A4
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribArrayObject(int index, AtiVertexAttribArrayObject pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[996]);
				}
			}

			// Token: 0x06001D58 RID: 7512 RVA: 0x000512DC File Offset: 0x0004F4DC
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribArrayObject(int index, AtiVertexAttribArrayObject pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[996]);
				}
			}

			// Token: 0x06001D59 RID: 7513 RVA: 0x00051300 File Offset: 0x0004F500
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribArrayObject(int index, AtiVertexAttribArrayObject pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, @params, GL.EntryPoints[996]);
			}

			// Token: 0x06001D5A RID: 7514 RVA: 0x00051318 File Offset: 0x0004F518
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribArrayObject(uint index, AtiVertexAttribArrayObject pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[996]);
				}
			}

			// Token: 0x06001D5B RID: 7515 RVA: 0x00051350 File Offset: 0x0004F550
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribArrayObject(uint index, AtiVertexAttribArrayObject pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[996]);
				}
			}

			// Token: 0x06001D5C RID: 7516 RVA: 0x00051374 File Offset: 0x0004F574
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribArrayObject(uint index, AtiVertexAttribArrayObject pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, @params, GL.EntryPoints[996]);
			}

			// Token: 0x06001D5D RID: 7517 RVA: 0x0005138C File Offset: 0x0004F58C
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribArrayObject(int index, AtiVertexAttribArrayObject pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[997]);
				}
			}

			// Token: 0x06001D5E RID: 7518 RVA: 0x000513C4 File Offset: 0x0004F5C4
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribArrayObject(int index, AtiVertexAttribArrayObject pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[997]);
				}
			}

			// Token: 0x06001D5F RID: 7519 RVA: 0x000513E8 File Offset: 0x0004F5E8
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribArrayObject(int index, AtiVertexAttribArrayObject pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[997]);
			}

			// Token: 0x06001D60 RID: 7520 RVA: 0x00051400 File Offset: 0x0004F600
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribArrayObject(uint index, AtiVertexAttribArrayObject pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[997]);
				}
			}

			// Token: 0x06001D61 RID: 7521 RVA: 0x00051438 File Offset: 0x0004F638
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribArrayObject(uint index, AtiVertexAttribArrayObject pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[997]);
				}
			}

			// Token: 0x06001D62 RID: 7522 RVA: 0x0005145C File Offset: 0x0004F65C
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribArrayObject(uint index, AtiVertexAttribArrayObject pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[997]);
			}

			// Token: 0x06001D63 RID: 7523 RVA: 0x00051474 File Offset: 0x0004F674
			[CLSCompliant(false)]
			public static bool IsObjectBuffer(int buffer)
			{
				return calli(System.Byte(System.UInt32), buffer, GL.EntryPoints[1093]);
			}

			// Token: 0x06001D64 RID: 7524 RVA: 0x00051488 File Offset: 0x0004F688
			[CLSCompliant(false)]
			public static bool IsObjectBuffer(uint buffer)
			{
				return calli(System.Byte(System.UInt32), buffer, GL.EntryPoints[1093]);
			}

			// Token: 0x06001D65 RID: 7525 RVA: 0x0005149C File Offset: 0x0004F69C
			[CLSCompliant(false)]
			public static IntPtr MapObjectBuffer(int buffer)
			{
				return calli(System.IntPtr(System.UInt32), buffer, GL.EntryPoints[1188]);
			}

			// Token: 0x06001D66 RID: 7526 RVA: 0x000514B0 File Offset: 0x0004F6B0
			[CLSCompliant(false)]
			public static IntPtr MapObjectBuffer(uint buffer)
			{
				return calli(System.IntPtr(System.UInt32), buffer, GL.EntryPoints[1188]);
			}

			// Token: 0x06001D67 RID: 7527 RVA: 0x000514C4 File Offset: 0x0004F6C4
			public static int NewObjectBuffer(int size, IntPtr pointer, AtiVertexArrayObject usage)
			{
				return calli(System.Int32(System.Int32,System.IntPtr,System.Int32), size, pointer, usage, GL.EntryPoints[1407]);
			}

			// Token: 0x06001D68 RID: 7528 RVA: 0x000514DC File Offset: 0x0004F6DC
			[CLSCompliant(false)]
			public unsafe static int NewObjectBuffer<T1>(int size, [In] [Out] T1[] pointer, AtiVertexArrayObject usage) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					return calli(System.Int32(System.Int32,System.IntPtr,System.Int32), size, ptr, usage, GL.EntryPoints[1407]);
				}
			}

			// Token: 0x06001D69 RID: 7529 RVA: 0x00051514 File Offset: 0x0004F714
			[CLSCompliant(false)]
			public unsafe static int NewObjectBuffer<T1>(int size, [In] [Out] T1[,] pointer, AtiVertexArrayObject usage) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					return calli(System.Int32(System.Int32,System.IntPtr,System.Int32), size, ptr, usage, GL.EntryPoints[1407]);
				}
			}

			// Token: 0x06001D6A RID: 7530 RVA: 0x00051550 File Offset: 0x0004F750
			[CLSCompliant(false)]
			public unsafe static int NewObjectBuffer<T1>(int size, [In] [Out] T1[,,] pointer, AtiVertexArrayObject usage) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					return calli(System.Int32(System.Int32,System.IntPtr,System.Int32), size, ptr, usage, GL.EntryPoints[1407]);
				}
			}

			// Token: 0x06001D6B RID: 7531 RVA: 0x0005158C File Offset: 0x0004F78C
			public unsafe static int NewObjectBuffer<T1>(int size, [In] [Out] ref T1 pointer, AtiVertexArrayObject usage) where T1 : struct
			{
				fixed (T1* ptr = &pointer)
				{
					return calli(System.Int32(System.Int32,System.IntPtr,System.Int32), size, ptr, usage, GL.EntryPoints[1407]);
				}
			}

			// Token: 0x06001D6C RID: 7532 RVA: 0x000515B0 File Offset: 0x0004F7B0
			[CLSCompliant(false)]
			public static void NormalStream3(AtiVertexStreams stream, byte nx, byte ny, byte nz)
			{
				calli(System.Void(System.Int32,System.SByte,System.SByte,System.SByte), stream, nx, ny, nz, GL.EntryPoints[1431]);
			}

			// Token: 0x06001D6D RID: 7533 RVA: 0x000515C8 File Offset: 0x0004F7C8
			[CLSCompliant(false)]
			public static void NormalStream3(AtiVertexStreams stream, sbyte nx, sbyte ny, sbyte nz)
			{
				calli(System.Void(System.Int32,System.SByte,System.SByte,System.SByte), stream, nx, ny, nz, GL.EntryPoints[1431]);
			}

			// Token: 0x06001D6E RID: 7534 RVA: 0x000515E0 File Offset: 0x0004F7E0
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, byte[] coords)
			{
				fixed (byte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.SByte*), stream, ptr, GL.EntryPoints[1432]);
				}
			}

			// Token: 0x06001D6F RID: 7535 RVA: 0x00051614 File Offset: 0x0004F814
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, ref byte coords)
			{
				fixed (byte* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.SByte*), stream, ptr, GL.EntryPoints[1432]);
				}
			}

			// Token: 0x06001D70 RID: 7536 RVA: 0x00051638 File Offset: 0x0004F838
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, byte* coords)
			{
				calli(System.Void(System.Int32,System.SByte*), stream, coords, GL.EntryPoints[1432]);
			}

			// Token: 0x06001D71 RID: 7537 RVA: 0x0005164C File Offset: 0x0004F84C
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, sbyte[] coords)
			{
				fixed (sbyte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.SByte*), stream, ptr, GL.EntryPoints[1432]);
				}
			}

			// Token: 0x06001D72 RID: 7538 RVA: 0x00051680 File Offset: 0x0004F880
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, ref sbyte coords)
			{
				fixed (sbyte* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.SByte*), stream, ptr, GL.EntryPoints[1432]);
				}
			}

			// Token: 0x06001D73 RID: 7539 RVA: 0x000516A4 File Offset: 0x0004F8A4
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, sbyte* coords)
			{
				calli(System.Void(System.Int32,System.SByte*), stream, coords, GL.EntryPoints[1432]);
			}

			// Token: 0x06001D74 RID: 7540 RVA: 0x000516B8 File Offset: 0x0004F8B8
			public static void NormalStream3(AtiVertexStreams stream, double nx, double ny, double nz)
			{
				calli(System.Void(System.Int32,System.Double,System.Double,System.Double), stream, nx, ny, nz, GL.EntryPoints[1433]);
			}

			// Token: 0x06001D75 RID: 7541 RVA: 0x000516D0 File Offset: 0x0004F8D0
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, double[] coords)
			{
				fixed (double* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Double*), stream, ptr, GL.EntryPoints[1434]);
				}
			}

			// Token: 0x06001D76 RID: 7542 RVA: 0x00051704 File Offset: 0x0004F904
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, ref double coords)
			{
				fixed (double* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Double*), stream, ptr, GL.EntryPoints[1434]);
				}
			}

			// Token: 0x06001D77 RID: 7543 RVA: 0x00051728 File Offset: 0x0004F928
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, double* coords)
			{
				calli(System.Void(System.Int32,System.Double*), stream, coords, GL.EntryPoints[1434]);
			}

			// Token: 0x06001D78 RID: 7544 RVA: 0x0005173C File Offset: 0x0004F93C
			public static void NormalStream3(AtiVertexStreams stream, float nx, float ny, float nz)
			{
				calli(System.Void(System.Int32,System.Single,System.Single,System.Single), stream, nx, ny, nz, GL.EntryPoints[1435]);
			}

			// Token: 0x06001D79 RID: 7545 RVA: 0x00051754 File Offset: 0x0004F954
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, float[] coords)
			{
				fixed (float* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), stream, ptr, GL.EntryPoints[1436]);
				}
			}

			// Token: 0x06001D7A RID: 7546 RVA: 0x00051788 File Offset: 0x0004F988
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, ref float coords)
			{
				fixed (float* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Single*), stream, ptr, GL.EntryPoints[1436]);
				}
			}

			// Token: 0x06001D7B RID: 7547 RVA: 0x000517AC File Offset: 0x0004F9AC
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, float* coords)
			{
				calli(System.Void(System.Int32,System.Single*), stream, coords, GL.EntryPoints[1436]);
			}

			// Token: 0x06001D7C RID: 7548 RVA: 0x000517C0 File Offset: 0x0004F9C0
			public static void NormalStream3(AtiVertexStreams stream, int nx, int ny, int nz)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), stream, nx, ny, nz, GL.EntryPoints[1437]);
			}

			// Token: 0x06001D7D RID: 7549 RVA: 0x000517D8 File Offset: 0x0004F9D8
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), stream, ptr, GL.EntryPoints[1438]);
				}
			}

			// Token: 0x06001D7E RID: 7550 RVA: 0x0005180C File Offset: 0x0004FA0C
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Int32*), stream, ptr, GL.EntryPoints[1438]);
				}
			}

			// Token: 0x06001D7F RID: 7551 RVA: 0x00051830 File Offset: 0x0004FA30
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, int* coords)
			{
				calli(System.Void(System.Int32,System.Int32*), stream, coords, GL.EntryPoints[1438]);
			}

			// Token: 0x06001D80 RID: 7552 RVA: 0x00051844 File Offset: 0x0004FA44
			public static void NormalStream3(AtiVertexStreams stream, short nx, short ny, short nz)
			{
				calli(System.Void(System.Int32,System.Int16,System.Int16,System.Int16), stream, nx, ny, nz, GL.EntryPoints[1439]);
			}

			// Token: 0x06001D81 RID: 7553 RVA: 0x0005185C File Offset: 0x0004FA5C
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, short[] coords)
			{
				fixed (short* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int16*), stream, ptr, GL.EntryPoints[1440]);
				}
			}

			// Token: 0x06001D82 RID: 7554 RVA: 0x00051890 File Offset: 0x0004FA90
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, ref short coords)
			{
				fixed (short* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Int16*), stream, ptr, GL.EntryPoints[1440]);
				}
			}

			// Token: 0x06001D83 RID: 7555 RVA: 0x000518B4 File Offset: 0x0004FAB4
			[CLSCompliant(false)]
			public unsafe static void NormalStream3(AtiVertexStreams stream, short* coords)
			{
				calli(System.Void(System.Int32,System.Int16*), stream, coords, GL.EntryPoints[1440]);
			}

			// Token: 0x06001D84 RID: 7556 RVA: 0x000518C8 File Offset: 0x0004FAC8
			[CLSCompliant(false)]
			public static void PassTexCoord(int dst, int coord, AtiFragmentShader swizzle)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32), dst, coord, swizzle, GL.EntryPoints[1450]);
			}

			// Token: 0x06001D85 RID: 7557 RVA: 0x000518E0 File Offset: 0x0004FAE0
			[CLSCompliant(false)]
			public static void PassTexCoord(uint dst, uint coord, AtiFragmentShader swizzle)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32), dst, coord, swizzle, GL.EntryPoints[1450]);
			}

			// Token: 0x06001D86 RID: 7558 RVA: 0x000518F8 File Offset: 0x0004FAF8
			public static void PNTriangles(AtiPnTriangles pname, float param)
			{
				calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[1497]);
			}

			// Token: 0x06001D87 RID: 7559 RVA: 0x0005190C File Offset: 0x0004FB0C
			public static void PNTriangles(AtiPnTriangles pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[1498]);
			}

			// Token: 0x06001D88 RID: 7560 RVA: 0x00051920 File Offset: 0x0004FB20
			[CLSCompliant(false)]
			public static void SampleMap(int dst, int interp, AtiFragmentShader swizzle)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32), dst, interp, swizzle, GL.EntryPoints[1805]);
			}

			// Token: 0x06001D89 RID: 7561 RVA: 0x00051938 File Offset: 0x0004FB38
			[CLSCompliant(false)]
			public static void SampleMap(uint dst, uint interp, AtiFragmentShader swizzle)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32), dst, interp, swizzle, GL.EntryPoints[1805]);
			}

			// Token: 0x06001D8A RID: 7562 RVA: 0x00051950 File Offset: 0x0004FB50
			[CLSCompliant(false)]
			public unsafe static void SetFragmentShaderConstant(int dst, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), dst, ptr, GL.EntryPoints[1871]);
				}
			}

			// Token: 0x06001D8B RID: 7563 RVA: 0x00051984 File Offset: 0x0004FB84
			[CLSCompliant(false)]
			public unsafe static void SetFragmentShaderConstant(int dst, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Single*), dst, ptr, GL.EntryPoints[1871]);
				}
			}

			// Token: 0x06001D8C RID: 7564 RVA: 0x000519A8 File Offset: 0x0004FBA8
			[CLSCompliant(false)]
			public unsafe static void SetFragmentShaderConstant(int dst, float* value)
			{
				calli(System.Void(System.UInt32,System.Single*), dst, value, GL.EntryPoints[1871]);
			}

			// Token: 0x06001D8D RID: 7565 RVA: 0x000519BC File Offset: 0x0004FBBC
			[CLSCompliant(false)]
			public unsafe static void SetFragmentShaderConstant(uint dst, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), dst, ptr, GL.EntryPoints[1871]);
				}
			}

			// Token: 0x06001D8E RID: 7566 RVA: 0x000519F0 File Offset: 0x0004FBF0
			[CLSCompliant(false)]
			public unsafe static void SetFragmentShaderConstant(uint dst, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Single*), dst, ptr, GL.EntryPoints[1871]);
				}
			}

			// Token: 0x06001D8F RID: 7567 RVA: 0x00051A14 File Offset: 0x0004FC14
			[CLSCompliant(false)]
			public unsafe static void SetFragmentShaderConstant(uint dst, float* value)
			{
				calli(System.Void(System.UInt32,System.Single*), dst, value, GL.EntryPoints[1871]);
			}

			// Token: 0x06001D90 RID: 7568 RVA: 0x00051A28 File Offset: 0x0004FC28
			[CLSCompliant(false)]
			public static void StencilFuncSeparate(StencilFunction frontfunc, StencilFunction backfunc, int @ref, int mask)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), frontfunc, backfunc, @ref, mask, GL.EntryPoints[1894]);
			}

			// Token: 0x06001D91 RID: 7569 RVA: 0x00051A40 File Offset: 0x0004FC40
			[CLSCompliant(false)]
			public static void StencilFuncSeparate(StencilFunction frontfunc, StencilFunction backfunc, int @ref, uint mask)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), frontfunc, backfunc, @ref, mask, GL.EntryPoints[1894]);
			}

			// Token: 0x06001D92 RID: 7570 RVA: 0x00051A58 File Offset: 0x0004FC58
			public static void StencilOpSeparate(AtiSeparateStencil face, StencilOp sfail, StencilOp dpfail, StencilOp dppass)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), face, sfail, dpfail, dppass, GL.EntryPoints[1899]);
			}

			// Token: 0x06001D93 RID: 7571 RVA: 0x00051A70 File Offset: 0x0004FC70
			[CLSCompliant(false)]
			public unsafe static void TexBumpParameter(AtiEnvmapBumpmap pname, float[] param)
			{
				fixed (float* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[1929]);
				}
			}

			// Token: 0x06001D94 RID: 7572 RVA: 0x00051AA4 File Offset: 0x0004FCA4
			[CLSCompliant(false)]
			public unsafe static void TexBumpParameter(AtiEnvmapBumpmap pname, ref float param)
			{
				fixed (float* ptr = &param)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[1929]);
				}
			}

			// Token: 0x06001D95 RID: 7573 RVA: 0x00051AC8 File Offset: 0x0004FCC8
			[CLSCompliant(false)]
			public unsafe static void TexBumpParameter(AtiEnvmapBumpmap pname, float* param)
			{
				calli(System.Void(System.Int32,System.Single*), pname, param, GL.EntryPoints[1929]);
			}

			// Token: 0x06001D96 RID: 7574 RVA: 0x00051ADC File Offset: 0x0004FCDC
			[CLSCompliant(false)]
			public unsafe static void TexBumpParameter(AtiEnvmapBumpmap pname, int[] param)
			{
				fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[1930]);
				}
			}

			// Token: 0x06001D97 RID: 7575 RVA: 0x00051B10 File Offset: 0x0004FD10
			[CLSCompliant(false)]
			public unsafe static void TexBumpParameter(AtiEnvmapBumpmap pname, ref int param)
			{
				fixed (int* ptr = &param)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[1930]);
				}
			}

			// Token: 0x06001D98 RID: 7576 RVA: 0x00051B34 File Offset: 0x0004FD34
			[CLSCompliant(false)]
			public unsafe static void TexBumpParameter(AtiEnvmapBumpmap pname, int* param)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, param, GL.EntryPoints[1930]);
			}

			// Token: 0x06001D99 RID: 7577 RVA: 0x00051B48 File Offset: 0x0004FD48
			[CLSCompliant(false)]
			public static void UnmapObjectBuffer(int buffer)
			{
				calli(System.Void(System.UInt32), buffer, GL.EntryPoints[2212]);
			}

			// Token: 0x06001D9A RID: 7578 RVA: 0x00051B5C File Offset: 0x0004FD5C
			[CLSCompliant(false)]
			public static void UnmapObjectBuffer(uint buffer)
			{
				calli(System.Void(System.UInt32), buffer, GL.EntryPoints[2212]);
			}

			// Token: 0x06001D9B RID: 7579 RVA: 0x00051B70 File Offset: 0x0004FD70
			[CLSCompliant(false)]
			public static void UpdateObjectBuffer(int buffer, int offset, int size, IntPtr pointer, AtiVertexArrayObject preserve)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.Int32), buffer, offset, size, pointer, preserve, GL.EntryPoints[2214]);
			}

			// Token: 0x06001D9C RID: 7580 RVA: 0x00051B88 File Offset: 0x0004FD88
			[CLSCompliant(false)]
			public unsafe static void UpdateObjectBuffer<T3>(int buffer, int offset, int size, [In] [Out] T3[] pointer, AtiVertexArrayObject preserve) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.Int32), buffer, offset, size, ptr, preserve, GL.EntryPoints[2214]);
				}
			}

			// Token: 0x06001D9D RID: 7581 RVA: 0x00051BC0 File Offset: 0x0004FDC0
			[CLSCompliant(false)]
			public unsafe static void UpdateObjectBuffer<T3>(int buffer, int offset, int size, [In] [Out] T3[,] pointer, AtiVertexArrayObject preserve) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.Int32), buffer, offset, size, ptr, preserve, GL.EntryPoints[2214]);
				}
			}

			// Token: 0x06001D9E RID: 7582 RVA: 0x00051BFC File Offset: 0x0004FDFC
			[CLSCompliant(false)]
			public unsafe static void UpdateObjectBuffer<T3>(int buffer, int offset, int size, [In] [Out] T3[,,] pointer, AtiVertexArrayObject preserve) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.Int32), buffer, offset, size, ptr, preserve, GL.EntryPoints[2214]);
				}
			}

			// Token: 0x06001D9F RID: 7583 RVA: 0x00051C3C File Offset: 0x0004FE3C
			[CLSCompliant(false)]
			public unsafe static void UpdateObjectBuffer<T3>(int buffer, int offset, int size, [In] [Out] ref T3 pointer, AtiVertexArrayObject preserve) where T3 : struct
			{
				fixed (T3* ptr = &pointer)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.Int32), buffer, offset, size, ptr, preserve, GL.EntryPoints[2214]);
				}
			}

			// Token: 0x06001DA0 RID: 7584 RVA: 0x00051C64 File Offset: 0x0004FE64
			[CLSCompliant(false)]
			public static void UpdateObjectBuffer(uint buffer, uint offset, int size, IntPtr pointer, AtiVertexArrayObject preserve)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.Int32), buffer, offset, size, pointer, preserve, GL.EntryPoints[2214]);
			}

			// Token: 0x06001DA1 RID: 7585 RVA: 0x00051C7C File Offset: 0x0004FE7C
			[CLSCompliant(false)]
			public unsafe static void UpdateObjectBuffer<T3>(uint buffer, uint offset, int size, [In] [Out] T3[] pointer, AtiVertexArrayObject preserve) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.Int32), buffer, offset, size, ptr, preserve, GL.EntryPoints[2214]);
				}
			}

			// Token: 0x06001DA2 RID: 7586 RVA: 0x00051CB4 File Offset: 0x0004FEB4
			[CLSCompliant(false)]
			public unsafe static void UpdateObjectBuffer<T3>(uint buffer, uint offset, int size, [In] [Out] T3[,] pointer, AtiVertexArrayObject preserve) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.Int32), buffer, offset, size, ptr, preserve, GL.EntryPoints[2214]);
				}
			}

			// Token: 0x06001DA3 RID: 7587 RVA: 0x00051CF0 File Offset: 0x0004FEF0
			[CLSCompliant(false)]
			public unsafe static void UpdateObjectBuffer<T3>(uint buffer, uint offset, int size, [In] [Out] T3[,,] pointer, AtiVertexArrayObject preserve) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.Int32), buffer, offset, size, ptr, preserve, GL.EntryPoints[2214]);
				}
			}

			// Token: 0x06001DA4 RID: 7588 RVA: 0x00051D30 File Offset: 0x0004FF30
			[CLSCompliant(false)]
			public unsafe static void UpdateObjectBuffer<T3>(uint buffer, uint offset, int size, [In] [Out] ref T3 pointer, AtiVertexArrayObject preserve) where T3 : struct
			{
				fixed (T3* ptr = &pointer)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.Int32), buffer, offset, size, ptr, preserve, GL.EntryPoints[2214]);
				}
			}

			// Token: 0x06001DA5 RID: 7589 RVA: 0x00051D58 File Offset: 0x0004FF58
			[CLSCompliant(false)]
			public static void VariantArrayObject(int id, AtiVertexArrayObject type, int stride, int buffer, int offset)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32), id, type, stride, buffer, offset, GL.EntryPoints[2224]);
			}

			// Token: 0x06001DA6 RID: 7590 RVA: 0x00051D70 File Offset: 0x0004FF70
			[CLSCompliant(false)]
			public static void VariantArrayObject(uint id, AtiVertexArrayObject type, int stride, uint buffer, uint offset)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32), id, type, stride, buffer, offset, GL.EntryPoints[2224]);
			}

			// Token: 0x06001DA7 RID: 7591 RVA: 0x00051D88 File Offset: 0x0004FF88
			[CLSCompliant(false)]
			[Obsolete("Use VertexAttribPointerType overload instead")]
			public static void VertexAttribArrayObject(int index, int size, AtiVertexAttribArrayObject type, bool normalized, int stride, int buffer, int offset)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.UInt32,System.UInt32), index, size, type, normalized, stride, buffer, offset, GL.EntryPoints[2414]);
			}

			// Token: 0x06001DA8 RID: 7592 RVA: 0x00051DB0 File Offset: 0x0004FFB0
			[CLSCompliant(false)]
			public static void VertexAttribArrayObject(int index, int size, VertexAttribPointerType type, bool normalized, int stride, int buffer, int offset)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.UInt32,System.UInt32), index, size, type, normalized, stride, buffer, offset, GL.EntryPoints[2414]);
			}

			// Token: 0x06001DA9 RID: 7593 RVA: 0x00051DD8 File Offset: 0x0004FFD8
			[CLSCompliant(false)]
			[Obsolete("Use VertexAttribPointerType overload instead")]
			public static void VertexAttribArrayObject(uint index, int size, AtiVertexAttribArrayObject type, bool normalized, int stride, uint buffer, uint offset)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.UInt32,System.UInt32), index, size, type, normalized, stride, buffer, offset, GL.EntryPoints[2414]);
			}

			// Token: 0x06001DAA RID: 7594 RVA: 0x00051E00 File Offset: 0x00050000
			[CLSCompliant(false)]
			public static void VertexAttribArrayObject(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, uint buffer, uint offset)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.UInt32,System.UInt32), index, size, type, normalized, stride, buffer, offset, GL.EntryPoints[2414]);
			}

			// Token: 0x06001DAB RID: 7595 RVA: 0x00051E28 File Offset: 0x00050028
			public static void VertexBlendEnv(AtiVertexStreams pname, float param)
			{
				calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[2533]);
			}

			// Token: 0x06001DAC RID: 7596 RVA: 0x00051E3C File Offset: 0x0005003C
			public static void VertexBlendEnv(AtiVertexStreams pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[2534]);
			}

			// Token: 0x06001DAD RID: 7597 RVA: 0x00051E50 File Offset: 0x00050050
			public static void VertexStream1(AtiVertexStreams stream, double x)
			{
				calli(System.Void(System.Int32,System.Double), stream, x, GL.EntryPoints[2546]);
			}

			// Token: 0x06001DAE RID: 7598 RVA: 0x00051E64 File Offset: 0x00050064
			[CLSCompliant(false)]
			public unsafe static void VertexStream1(AtiVertexStreams stream, double* coords)
			{
				calli(System.Void(System.Int32,System.Double*), stream, coords, GL.EntryPoints[2547]);
			}

			// Token: 0x06001DAF RID: 7599 RVA: 0x00051E78 File Offset: 0x00050078
			public static void VertexStream1(AtiVertexStreams stream, float x)
			{
				calli(System.Void(System.Int32,System.Single), stream, x, GL.EntryPoints[2548]);
			}

			// Token: 0x06001DB0 RID: 7600 RVA: 0x00051E8C File Offset: 0x0005008C
			[CLSCompliant(false)]
			public unsafe static void VertexStream1(AtiVertexStreams stream, float* coords)
			{
				calli(System.Void(System.Int32,System.Single*), stream, coords, GL.EntryPoints[2549]);
			}

			// Token: 0x06001DB1 RID: 7601 RVA: 0x00051EA0 File Offset: 0x000500A0
			public static void VertexStream1(AtiVertexStreams stream, int x)
			{
				calli(System.Void(System.Int32,System.Int32), stream, x, GL.EntryPoints[2550]);
			}

			// Token: 0x06001DB2 RID: 7602 RVA: 0x00051EB4 File Offset: 0x000500B4
			[CLSCompliant(false)]
			public unsafe static void VertexStream1(AtiVertexStreams stream, int* coords)
			{
				calli(System.Void(System.Int32,System.Int32*), stream, coords, GL.EntryPoints[2551]);
			}

			// Token: 0x06001DB3 RID: 7603 RVA: 0x00051EC8 File Offset: 0x000500C8
			public static void VertexStream1(AtiVertexStreams stream, short x)
			{
				calli(System.Void(System.Int32,System.Int16), stream, x, GL.EntryPoints[2552]);
			}

			// Token: 0x06001DB4 RID: 7604 RVA: 0x00051EDC File Offset: 0x000500DC
			[CLSCompliant(false)]
			public unsafe static void VertexStream1(AtiVertexStreams stream, short* coords)
			{
				calli(System.Void(System.Int32,System.Int16*), stream, coords, GL.EntryPoints[2553]);
			}

			// Token: 0x06001DB5 RID: 7605 RVA: 0x00051EF0 File Offset: 0x000500F0
			public static void VertexStream2(AtiVertexStreams stream, double x, double y)
			{
				calli(System.Void(System.Int32,System.Double,System.Double), stream, x, y, GL.EntryPoints[2554]);
			}

			// Token: 0x06001DB6 RID: 7606 RVA: 0x00051F08 File Offset: 0x00050108
			[CLSCompliant(false)]
			public unsafe static void VertexStream2(AtiVertexStreams stream, double[] coords)
			{
				fixed (double* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Double*), stream, ptr, GL.EntryPoints[2555]);
				}
			}

			// Token: 0x06001DB7 RID: 7607 RVA: 0x00051F3C File Offset: 0x0005013C
			[CLSCompliant(false)]
			public unsafe static void VertexStream2(AtiVertexStreams stream, ref double coords)
			{
				fixed (double* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Double*), stream, ptr, GL.EntryPoints[2555]);
				}
			}

			// Token: 0x06001DB8 RID: 7608 RVA: 0x00051F60 File Offset: 0x00050160
			[CLSCompliant(false)]
			public unsafe static void VertexStream2(AtiVertexStreams stream, double* coords)
			{
				calli(System.Void(System.Int32,System.Double*), stream, coords, GL.EntryPoints[2555]);
			}

			// Token: 0x06001DB9 RID: 7609 RVA: 0x00051F74 File Offset: 0x00050174
			public static void VertexStream2(AtiVertexStreams stream, float x, float y)
			{
				calli(System.Void(System.Int32,System.Single,System.Single), stream, x, y, GL.EntryPoints[2556]);
			}

			// Token: 0x06001DBA RID: 7610 RVA: 0x00051F8C File Offset: 0x0005018C
			[CLSCompliant(false)]
			public unsafe static void VertexStream2(AtiVertexStreams stream, float[] coords)
			{
				fixed (float* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), stream, ptr, GL.EntryPoints[2557]);
				}
			}

			// Token: 0x06001DBB RID: 7611 RVA: 0x00051FC0 File Offset: 0x000501C0
			[CLSCompliant(false)]
			public unsafe static void VertexStream2(AtiVertexStreams stream, ref float coords)
			{
				fixed (float* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Single*), stream, ptr, GL.EntryPoints[2557]);
				}
			}

			// Token: 0x06001DBC RID: 7612 RVA: 0x00051FE4 File Offset: 0x000501E4
			[CLSCompliant(false)]
			public unsafe static void VertexStream2(AtiVertexStreams stream, float* coords)
			{
				calli(System.Void(System.Int32,System.Single*), stream, coords, GL.EntryPoints[2557]);
			}

			// Token: 0x06001DBD RID: 7613 RVA: 0x00051FF8 File Offset: 0x000501F8
			public static void VertexStream2(AtiVertexStreams stream, int x, int y)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), stream, x, y, GL.EntryPoints[2558]);
			}

			// Token: 0x06001DBE RID: 7614 RVA: 0x00052010 File Offset: 0x00050210
			[CLSCompliant(false)]
			public unsafe static void VertexStream2(AtiVertexStreams stream, int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), stream, ptr, GL.EntryPoints[2559]);
				}
			}

			// Token: 0x06001DBF RID: 7615 RVA: 0x00052044 File Offset: 0x00050244
			[CLSCompliant(false)]
			public unsafe static void VertexStream2(AtiVertexStreams stream, ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Int32*), stream, ptr, GL.EntryPoints[2559]);
				}
			}

			// Token: 0x06001DC0 RID: 7616 RVA: 0x00052068 File Offset: 0x00050268
			[CLSCompliant(false)]
			public unsafe static void VertexStream2(AtiVertexStreams stream, int* coords)
			{
				calli(System.Void(System.Int32,System.Int32*), stream, coords, GL.EntryPoints[2559]);
			}

			// Token: 0x06001DC1 RID: 7617 RVA: 0x0005207C File Offset: 0x0005027C
			public static void VertexStream2(AtiVertexStreams stream, short x, short y)
			{
				calli(System.Void(System.Int32,System.Int16,System.Int16), stream, x, y, GL.EntryPoints[2560]);
			}

			// Token: 0x06001DC2 RID: 7618 RVA: 0x00052094 File Offset: 0x00050294
			[CLSCompliant(false)]
			public unsafe static void VertexStream2(AtiVertexStreams stream, short[] coords)
			{
				fixed (short* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int16*), stream, ptr, GL.EntryPoints[2561]);
				}
			}

			// Token: 0x06001DC3 RID: 7619 RVA: 0x000520C8 File Offset: 0x000502C8
			[CLSCompliant(false)]
			public unsafe static void VertexStream2(AtiVertexStreams stream, ref short coords)
			{
				fixed (short* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Int16*), stream, ptr, GL.EntryPoints[2561]);
				}
			}

			// Token: 0x06001DC4 RID: 7620 RVA: 0x000520EC File Offset: 0x000502EC
			[CLSCompliant(false)]
			public unsafe static void VertexStream2(AtiVertexStreams stream, short* coords)
			{
				calli(System.Void(System.Int32,System.Int16*), stream, coords, GL.EntryPoints[2561]);
			}

			// Token: 0x06001DC5 RID: 7621 RVA: 0x00052100 File Offset: 0x00050300
			public static void VertexStream3(AtiVertexStreams stream, double x, double y, double z)
			{
				calli(System.Void(System.Int32,System.Double,System.Double,System.Double), stream, x, y, z, GL.EntryPoints[2562]);
			}

			// Token: 0x06001DC6 RID: 7622 RVA: 0x00052118 File Offset: 0x00050318
			[CLSCompliant(false)]
			public unsafe static void VertexStream3(AtiVertexStreams stream, double[] coords)
			{
				fixed (double* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Double*), stream, ptr, GL.EntryPoints[2563]);
				}
			}

			// Token: 0x06001DC7 RID: 7623 RVA: 0x0005214C File Offset: 0x0005034C
			[CLSCompliant(false)]
			public unsafe static void VertexStream3(AtiVertexStreams stream, ref double coords)
			{
				fixed (double* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Double*), stream, ptr, GL.EntryPoints[2563]);
				}
			}

			// Token: 0x06001DC8 RID: 7624 RVA: 0x00052170 File Offset: 0x00050370
			[CLSCompliant(false)]
			public unsafe static void VertexStream3(AtiVertexStreams stream, double* coords)
			{
				calli(System.Void(System.Int32,System.Double*), stream, coords, GL.EntryPoints[2563]);
			}

			// Token: 0x06001DC9 RID: 7625 RVA: 0x00052184 File Offset: 0x00050384
			public static void VertexStream3(AtiVertexStreams stream, float x, float y, float z)
			{
				calli(System.Void(System.Int32,System.Single,System.Single,System.Single), stream, x, y, z, GL.EntryPoints[2564]);
			}

			// Token: 0x06001DCA RID: 7626 RVA: 0x0005219C File Offset: 0x0005039C
			[CLSCompliant(false)]
			public unsafe static void VertexStream3(AtiVertexStreams stream, float[] coords)
			{
				fixed (float* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), stream, ptr, GL.EntryPoints[2565]);
				}
			}

			// Token: 0x06001DCB RID: 7627 RVA: 0x000521D0 File Offset: 0x000503D0
			[CLSCompliant(false)]
			public unsafe static void VertexStream3(AtiVertexStreams stream, ref float coords)
			{
				fixed (float* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Single*), stream, ptr, GL.EntryPoints[2565]);
				}
			}

			// Token: 0x06001DCC RID: 7628 RVA: 0x000521F4 File Offset: 0x000503F4
			[CLSCompliant(false)]
			public unsafe static void VertexStream3(AtiVertexStreams stream, float* coords)
			{
				calli(System.Void(System.Int32,System.Single*), stream, coords, GL.EntryPoints[2565]);
			}

			// Token: 0x06001DCD RID: 7629 RVA: 0x00052208 File Offset: 0x00050408
			public static void VertexStream3(AtiVertexStreams stream, int x, int y, int z)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), stream, x, y, z, GL.EntryPoints[2566]);
			}

			// Token: 0x06001DCE RID: 7630 RVA: 0x00052220 File Offset: 0x00050420
			[CLSCompliant(false)]
			public unsafe static void VertexStream3(AtiVertexStreams stream, int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), stream, ptr, GL.EntryPoints[2567]);
				}
			}

			// Token: 0x06001DCF RID: 7631 RVA: 0x00052254 File Offset: 0x00050454
			[CLSCompliant(false)]
			public unsafe static void VertexStream3(AtiVertexStreams stream, ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Int32*), stream, ptr, GL.EntryPoints[2567]);
				}
			}

			// Token: 0x06001DD0 RID: 7632 RVA: 0x00052278 File Offset: 0x00050478
			[CLSCompliant(false)]
			public unsafe static void VertexStream3(AtiVertexStreams stream, int* coords)
			{
				calli(System.Void(System.Int32,System.Int32*), stream, coords, GL.EntryPoints[2567]);
			}

			// Token: 0x06001DD1 RID: 7633 RVA: 0x0005228C File Offset: 0x0005048C
			public static void VertexStream3(AtiVertexStreams stream, short x, short y, short z)
			{
				calli(System.Void(System.Int32,System.Int16,System.Int16,System.Int16), stream, x, y, z, GL.EntryPoints[2568]);
			}

			// Token: 0x06001DD2 RID: 7634 RVA: 0x000522A4 File Offset: 0x000504A4
			[CLSCompliant(false)]
			public unsafe static void VertexStream3(AtiVertexStreams stream, short[] coords)
			{
				fixed (short* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int16*), stream, ptr, GL.EntryPoints[2569]);
				}
			}

			// Token: 0x06001DD3 RID: 7635 RVA: 0x000522D8 File Offset: 0x000504D8
			[CLSCompliant(false)]
			public unsafe static void VertexStream3(AtiVertexStreams stream, ref short coords)
			{
				fixed (short* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Int16*), stream, ptr, GL.EntryPoints[2569]);
				}
			}

			// Token: 0x06001DD4 RID: 7636 RVA: 0x000522FC File Offset: 0x000504FC
			[CLSCompliant(false)]
			public unsafe static void VertexStream3(AtiVertexStreams stream, short* coords)
			{
				calli(System.Void(System.Int32,System.Int16*), stream, coords, GL.EntryPoints[2569]);
			}

			// Token: 0x06001DD5 RID: 7637 RVA: 0x00052310 File Offset: 0x00050510
			public static void VertexStream4(AtiVertexStreams stream, double x, double y, double z, double w)
			{
				calli(System.Void(System.Int32,System.Double,System.Double,System.Double,System.Double), stream, x, y, z, w, GL.EntryPoints[2570]);
			}

			// Token: 0x06001DD6 RID: 7638 RVA: 0x00052328 File Offset: 0x00050528
			[CLSCompliant(false)]
			public unsafe static void VertexStream4(AtiVertexStreams stream, double[] coords)
			{
				fixed (double* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Double*), stream, ptr, GL.EntryPoints[2571]);
				}
			}

			// Token: 0x06001DD7 RID: 7639 RVA: 0x0005235C File Offset: 0x0005055C
			[CLSCompliant(false)]
			public unsafe static void VertexStream4(AtiVertexStreams stream, ref double coords)
			{
				fixed (double* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Double*), stream, ptr, GL.EntryPoints[2571]);
				}
			}

			// Token: 0x06001DD8 RID: 7640 RVA: 0x00052380 File Offset: 0x00050580
			[CLSCompliant(false)]
			public unsafe static void VertexStream4(AtiVertexStreams stream, double* coords)
			{
				calli(System.Void(System.Int32,System.Double*), stream, coords, GL.EntryPoints[2571]);
			}

			// Token: 0x06001DD9 RID: 7641 RVA: 0x00052394 File Offset: 0x00050594
			public static void VertexStream4(AtiVertexStreams stream, float x, float y, float z, float w)
			{
				calli(System.Void(System.Int32,System.Single,System.Single,System.Single,System.Single), stream, x, y, z, w, GL.EntryPoints[2572]);
			}

			// Token: 0x06001DDA RID: 7642 RVA: 0x000523AC File Offset: 0x000505AC
			[CLSCompliant(false)]
			public unsafe static void VertexStream4(AtiVertexStreams stream, float[] coords)
			{
				fixed (float* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), stream, ptr, GL.EntryPoints[2573]);
				}
			}

			// Token: 0x06001DDB RID: 7643 RVA: 0x000523E0 File Offset: 0x000505E0
			[CLSCompliant(false)]
			public unsafe static void VertexStream4(AtiVertexStreams stream, ref float coords)
			{
				fixed (float* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Single*), stream, ptr, GL.EntryPoints[2573]);
				}
			}

			// Token: 0x06001DDC RID: 7644 RVA: 0x00052404 File Offset: 0x00050604
			[CLSCompliant(false)]
			public unsafe static void VertexStream4(AtiVertexStreams stream, float* coords)
			{
				calli(System.Void(System.Int32,System.Single*), stream, coords, GL.EntryPoints[2573]);
			}

			// Token: 0x06001DDD RID: 7645 RVA: 0x00052418 File Offset: 0x00050618
			public static void VertexStream4(AtiVertexStreams stream, int x, int y, int z, int w)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), stream, x, y, z, w, GL.EntryPoints[2574]);
			}

			// Token: 0x06001DDE RID: 7646 RVA: 0x00052430 File Offset: 0x00050630
			[CLSCompliant(false)]
			public unsafe static void VertexStream4(AtiVertexStreams stream, int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), stream, ptr, GL.EntryPoints[2575]);
				}
			}

			// Token: 0x06001DDF RID: 7647 RVA: 0x00052464 File Offset: 0x00050664
			[CLSCompliant(false)]
			public unsafe static void VertexStream4(AtiVertexStreams stream, ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Int32*), stream, ptr, GL.EntryPoints[2575]);
				}
			}

			// Token: 0x06001DE0 RID: 7648 RVA: 0x00052488 File Offset: 0x00050688
			[CLSCompliant(false)]
			public unsafe static void VertexStream4(AtiVertexStreams stream, int* coords)
			{
				calli(System.Void(System.Int32,System.Int32*), stream, coords, GL.EntryPoints[2575]);
			}

			// Token: 0x06001DE1 RID: 7649 RVA: 0x0005249C File Offset: 0x0005069C
			public static void VertexStream4(AtiVertexStreams stream, short x, short y, short z, short w)
			{
				calli(System.Void(System.Int32,System.Int16,System.Int16,System.Int16,System.Int16), stream, x, y, z, w, GL.EntryPoints[2576]);
			}

			// Token: 0x06001DE2 RID: 7650 RVA: 0x000524B4 File Offset: 0x000506B4
			[CLSCompliant(false)]
			public unsafe static void VertexStream4(AtiVertexStreams stream, short[] coords)
			{
				fixed (short* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int16*), stream, ptr, GL.EntryPoints[2577]);
				}
			}

			// Token: 0x06001DE3 RID: 7651 RVA: 0x000524E8 File Offset: 0x000506E8
			[CLSCompliant(false)]
			public unsafe static void VertexStream4(AtiVertexStreams stream, ref short coords)
			{
				fixed (short* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Int16*), stream, ptr, GL.EntryPoints[2577]);
				}
			}

			// Token: 0x06001DE4 RID: 7652 RVA: 0x0005250C File Offset: 0x0005070C
			[CLSCompliant(false)]
			public unsafe static void VertexStream4(AtiVertexStreams stream, short* coords)
			{
				calli(System.Void(System.Int32,System.Int16*), stream, coords, GL.EntryPoints[2577]);
			}

			// Token: 0x06001DE5 RID: 7653 RVA: 0x00052520 File Offset: 0x00050720
			[Obsolete("Use PassTexCoord instead")]
			public static void PassTexCoor(int dst, int coord, AtiFragmentShader swizzle)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32), dst, coord, swizzle, GL.EntryPoints[1450]);
			}

			// Token: 0x06001DE6 RID: 7654 RVA: 0x00052538 File Offset: 0x00050738
			[CLSCompliant(false)]
			[Obsolete("Use PassTexCoord instead")]
			public static void PassTexCoor(uint dst, uint coord, AtiFragmentShader swizzle)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32), dst, coord, swizzle, GL.EntryPoints[1450]);
			}
		}

		// Token: 0x020004BB RID: 1211
		public static class Ext
		{
			// Token: 0x06001DE7 RID: 7655 RVA: 0x00052550 File Offset: 0x00050750
			[CLSCompliant(false)]
			public static void ActiveProgram(int program)
			{
				calli(System.Void(System.UInt32), program, GL.EntryPoints[2]);
			}

			// Token: 0x06001DE8 RID: 7656 RVA: 0x00052560 File Offset: 0x00050760
			[CLSCompliant(false)]
			public static void ActiveProgram(uint program)
			{
				calli(System.Void(System.UInt32), program, GL.EntryPoints[2]);
			}

			// Token: 0x06001DE9 RID: 7657 RVA: 0x00052570 File Offset: 0x00050770
			[CLSCompliant(false)]
			public static void ActiveShaderProgram(int pipeline, int program)
			{
				calli(System.Void(System.UInt32,System.UInt32), pipeline, program, GL.EntryPoints[4]);
			}

			// Token: 0x06001DEA RID: 7658 RVA: 0x00052580 File Offset: 0x00050780
			[CLSCompliant(false)]
			public static void ActiveShaderProgram(uint pipeline, uint program)
			{
				calli(System.Void(System.UInt32,System.UInt32), pipeline, program, GL.EntryPoints[4]);
			}

			// Token: 0x06001DEB RID: 7659 RVA: 0x00052590 File Offset: 0x00050790
			public static void ActiveStencilFace(ExtStencilTwoSide face)
			{
				calli(System.Void(System.Int32), face, GL.EntryPoints[5]);
			}

			// Token: 0x06001DEC RID: 7660 RVA: 0x000525A0 File Offset: 0x000507A0
			public static void ApplyTexture(ExtLightTexture mode)
			{
				calli(System.Void(System.Int32), mode, GL.EntryPoints[14]);
			}

			// Token: 0x06001DED RID: 7661 RVA: 0x000525B0 File Offset: 0x000507B0
			[CLSCompliant(false)]
			public unsafe static bool AreTexturesResident(int n, int[] textures, [Out] bool[] residences)
			{
				fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (bool* ptr3 = ref (residences != null && residences.Length != 0) ? ref residences[0] : ref *null)
					{
						return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, ptr2, ptr3, GL.EntryPoints[17]);
					}
				}
			}

			// Token: 0x06001DEE RID: 7662 RVA: 0x000525F8 File Offset: 0x000507F8
			[CLSCompliant(false)]
			public unsafe static bool AreTexturesResident(int n, ref int textures, out bool residences)
			{
				fixed (int* ptr = &textures)
				{
					int* ptr2 = ptr;
					fixed (bool* ptr3 = &residences)
					{
						return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, ptr2, ptr3, GL.EntryPoints[17]);
					}
				}
			}

			// Token: 0x06001DEF RID: 7663 RVA: 0x0005261C File Offset: 0x0005081C
			[CLSCompliant(false)]
			public unsafe static bool AreTexturesResident(int n, int* textures, [Out] bool* residences)
			{
				return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, textures, residences, GL.EntryPoints[17]);
			}

			// Token: 0x06001DF0 RID: 7664 RVA: 0x00052630 File Offset: 0x00050830
			[CLSCompliant(false)]
			public unsafe static bool AreTexturesResident(int n, uint[] textures, [Out] bool[] residences)
			{
				fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (bool* ptr3 = ref (residences != null && residences.Length != 0) ? ref residences[0] : ref *null)
					{
						return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, ptr2, ptr3, GL.EntryPoints[17]);
					}
				}
			}

			// Token: 0x06001DF1 RID: 7665 RVA: 0x00052678 File Offset: 0x00050878
			[CLSCompliant(false)]
			public unsafe static bool AreTexturesResident(int n, ref uint textures, out bool residences)
			{
				fixed (uint* ptr = &textures)
				{
					uint* ptr2 = ptr;
					fixed (bool* ptr3 = &residences)
					{
						return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, ptr2, ptr3, GL.EntryPoints[17]);
					}
				}
			}

			// Token: 0x06001DF2 RID: 7666 RVA: 0x0005269C File Offset: 0x0005089C
			[CLSCompliant(false)]
			public unsafe static bool AreTexturesResident(int n, uint* textures, [Out] bool* residences)
			{
				return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, textures, residences, GL.EntryPoints[17]);
			}

			// Token: 0x06001DF3 RID: 7667 RVA: 0x000526B0 File Offset: 0x000508B0
			public static void ArrayElement(int i)
			{
				calli(System.Void(System.Int32), i, GL.EntryPoints[19]);
			}

			// Token: 0x06001DF4 RID: 7668 RVA: 0x000526C0 File Offset: 0x000508C0
			public static void BeginTransformFeedback(ExtTransformFeedback primitiveMode)
			{
				calli(System.Void(System.Int32), primitiveMode, GL.EntryPoints[36]);
			}

			// Token: 0x06001DF5 RID: 7669 RVA: 0x000526D0 File Offset: 0x000508D0
			public static void BeginVertexShader()
			{
				calli(System.Void(), GL.EntryPoints[38]);
			}

			// Token: 0x06001DF6 RID: 7670 RVA: 0x000526E0 File Offset: 0x000508E0
			[CLSCompliant(false)]
			public static void BindBufferBase(ExtTransformFeedback target, int index, int buffer)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, buffer, GL.EntryPoints[45]);
			}

			// Token: 0x06001DF7 RID: 7671 RVA: 0x000526F4 File Offset: 0x000508F4
			[CLSCompliant(false)]
			public static void BindBufferBase(ExtTransformFeedback target, uint index, uint buffer)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, buffer, GL.EntryPoints[45]);
			}

			// Token: 0x06001DF8 RID: 7672 RVA: 0x00052708 File Offset: 0x00050908
			[CLSCompliant(false)]
			public static void BindBufferOffset(ExtTransformFeedback target, int index, int buffer, IntPtr offset)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr), target, index, buffer, offset, GL.EntryPoints[47]);
			}

			// Token: 0x06001DF9 RID: 7673 RVA: 0x0005271C File Offset: 0x0005091C
			[CLSCompliant(false)]
			public static void BindBufferOffset(ExtTransformFeedback target, uint index, uint buffer, IntPtr offset)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr), target, index, buffer, offset, GL.EntryPoints[47]);
			}

			// Token: 0x06001DFA RID: 7674 RVA: 0x00052730 File Offset: 0x00050930
			[CLSCompliant(false)]
			public static void BindBufferRange(ExtTransformFeedback target, int index, int buffer, IntPtr offset, IntPtr size)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr), target, index, buffer, offset, size, GL.EntryPoints[50]);
			}

			// Token: 0x06001DFB RID: 7675 RVA: 0x00052748 File Offset: 0x00050948
			[CLSCompliant(false)]
			public static void BindBufferRange(ExtTransformFeedback target, uint index, uint buffer, IntPtr offset, IntPtr size)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr), target, index, buffer, offset, size, GL.EntryPoints[50]);
			}

			// Token: 0x06001DFC RID: 7676 RVA: 0x00052760 File Offset: 0x00050960
			[CLSCompliant(false)]
			public static void BindFragDataLocation(int program, int color, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				calli(System.Void(System.UInt32,System.UInt32,System.IntPtr), program, color, intPtr, GL.EntryPoints[55]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06001DFD RID: 7677 RVA: 0x0005278C File Offset: 0x0005098C
			[CLSCompliant(false)]
			public static void BindFragDataLocation(uint program, uint color, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				calli(System.Void(System.UInt32,System.UInt32,System.IntPtr), program, color, intPtr, GL.EntryPoints[55]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06001DFE RID: 7678 RVA: 0x000527B8 File Offset: 0x000509B8
			[CLSCompliant(false)]
			public static void BindFramebuffer(FramebufferTarget target, int framebuffer)
			{
				calli(System.Void(System.Int32,System.UInt32), target, framebuffer, GL.EntryPoints[59]);
			}

			// Token: 0x06001DFF RID: 7679 RVA: 0x000527CC File Offset: 0x000509CC
			[CLSCompliant(false)]
			public static void BindFramebuffer(FramebufferTarget target, uint framebuffer)
			{
				calli(System.Void(System.Int32,System.UInt32), target, framebuffer, GL.EntryPoints[59]);
			}

			// Token: 0x06001E00 RID: 7680 RVA: 0x000527E0 File Offset: 0x000509E0
			[CLSCompliant(false)]
			public static void BindImageTexture(int index, int texture, int level, bool layered, int layer, ExtShaderImageLoadStore access, int format)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32), index, texture, level, layered, layer, access, format, GL.EntryPoints[61]);
			}

			// Token: 0x06001E01 RID: 7681 RVA: 0x00052804 File Offset: 0x00050A04
			[CLSCompliant(false)]
			public static void BindImageTexture(uint index, uint texture, int level, bool layered, int layer, ExtShaderImageLoadStore access, int format)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32), index, texture, level, layered, layer, access, format, GL.EntryPoints[61]);
			}

			// Token: 0x06001E02 RID: 7682 RVA: 0x00052828 File Offset: 0x00050A28
			public static int BindLightParameter(LightName light, LightParameter value)
			{
				return calli(System.Int32(System.Int32,System.Int32), light, value, GL.EntryPoints[63]);
			}

			// Token: 0x06001E03 RID: 7683 RVA: 0x0005283C File Offset: 0x00050A3C
			public static int BindMaterialParameter(MaterialFace face, MaterialParameter value)
			{
				return calli(System.Int32(System.Int32,System.Int32), face, value, GL.EntryPoints[64]);
			}

			// Token: 0x06001E04 RID: 7684 RVA: 0x00052850 File Offset: 0x00050A50
			[CLSCompliant(false)]
			public static void BindMultiTexture(TextureUnit texunit, TextureTarget target, int texture)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32), texunit, target, texture, GL.EntryPoints[65]);
			}

			// Token: 0x06001E05 RID: 7685 RVA: 0x00052864 File Offset: 0x00050A64
			[CLSCompliant(false)]
			public static void BindMultiTexture(TextureUnit texunit, TextureTarget target, uint texture)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32), texunit, target, texture, GL.EntryPoints[65]);
			}

			// Token: 0x06001E06 RID: 7686 RVA: 0x00052878 File Offset: 0x00050A78
			public static int BindParameter(ExtVertexShader value)
			{
				return calli(System.Int32(System.Int32), value, GL.EntryPoints[66]);
			}

			// Token: 0x06001E07 RID: 7687 RVA: 0x00052888 File Offset: 0x00050A88
			[CLSCompliant(false)]
			public static void BindProgramPipeline(int pipeline)
			{
				calli(System.Void(System.UInt32), pipeline, GL.EntryPoints[70]);
			}

			// Token: 0x06001E08 RID: 7688 RVA: 0x00052898 File Offset: 0x00050A98
			[CLSCompliant(false)]
			public static void BindProgramPipeline(uint pipeline)
			{
				calli(System.Void(System.UInt32), pipeline, GL.EntryPoints[70]);
			}

			// Token: 0x06001E09 RID: 7689 RVA: 0x000528A8 File Offset: 0x00050AA8
			[CLSCompliant(false)]
			public static void BindRenderbuffer(RenderbufferTarget target, int renderbuffer)
			{
				calli(System.Void(System.Int32,System.UInt32), target, renderbuffer, GL.EntryPoints[72]);
			}

			// Token: 0x06001E0A RID: 7690 RVA: 0x000528BC File Offset: 0x00050ABC
			[CLSCompliant(false)]
			public static void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer)
			{
				calli(System.Void(System.Int32,System.UInt32), target, renderbuffer, GL.EntryPoints[72]);
			}

			// Token: 0x06001E0B RID: 7691 RVA: 0x000528D0 File Offset: 0x00050AD0
			public static int BindTexGenParameter(TextureUnit unit, TextureCoordName coord, TextureGenParameter value)
			{
				return calli(System.Int32(System.Int32,System.Int32,System.Int32), unit, coord, value, GL.EntryPoints[75]);
			}

			// Token: 0x06001E0C RID: 7692 RVA: 0x000528E4 File Offset: 0x00050AE4
			[CLSCompliant(false)]
			public static void BindTexture(TextureTarget target, int texture)
			{
				calli(System.Void(System.Int32,System.UInt32), target, texture, GL.EntryPoints[77]);
			}

			// Token: 0x06001E0D RID: 7693 RVA: 0x000528F8 File Offset: 0x00050AF8
			[CLSCompliant(false)]
			public static void BindTexture(TextureTarget target, uint texture)
			{
				calli(System.Void(System.Int32,System.UInt32), target, texture, GL.EntryPoints[77]);
			}

			// Token: 0x06001E0E RID: 7694 RVA: 0x0005290C File Offset: 0x00050B0C
			public static int BindTextureUnitParameter(TextureUnit unit, ExtVertexShader value)
			{
				return calli(System.Int32(System.Int32,System.Int32), unit, value, GL.EntryPoints[79]);
			}

			// Token: 0x06001E0F RID: 7695 RVA: 0x00052920 File Offset: 0x00050B20
			[CLSCompliant(false)]
			public static void BindVertexShader(int id)
			{
				calli(System.Void(System.UInt32), id, GL.EntryPoints[86]);
			}

			// Token: 0x06001E10 RID: 7696 RVA: 0x00052930 File Offset: 0x00050B30
			[CLSCompliant(false)]
			public static void BindVertexShader(uint id)
			{
				calli(System.Void(System.UInt32), id, GL.EntryPoints[86]);
			}

			// Token: 0x06001E11 RID: 7697 RVA: 0x00052940 File Offset: 0x00050B40
			[CLSCompliant(false)]
			public static void Binormal3(byte bx, byte by, byte bz)
			{
				calli(System.Void(System.SByte,System.SByte,System.SByte), bx, by, bz, GL.EntryPoints[89]);
			}

			// Token: 0x06001E12 RID: 7698 RVA: 0x00052954 File Offset: 0x00050B54
			[CLSCompliant(false)]
			public static void Binormal3(sbyte bx, sbyte by, sbyte bz)
			{
				calli(System.Void(System.SByte,System.SByte,System.SByte), bx, by, bz, GL.EntryPoints[89]);
			}

			// Token: 0x06001E13 RID: 7699 RVA: 0x00052968 File Offset: 0x00050B68
			[CLSCompliant(false)]
			public unsafe static void Binormal3(byte[] v)
			{
				fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[90]);
				}
			}

			// Token: 0x06001E14 RID: 7700 RVA: 0x00052998 File Offset: 0x00050B98
			[CLSCompliant(false)]
			public unsafe static void Binormal3(ref byte v)
			{
				fixed (byte* ptr = &v)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[90]);
				}
			}

			// Token: 0x06001E15 RID: 7701 RVA: 0x000529B8 File Offset: 0x00050BB8
			[CLSCompliant(false)]
			public unsafe static void Binormal3(byte* v)
			{
				calli(System.Void(System.SByte*), v, GL.EntryPoints[90]);
			}

			// Token: 0x06001E16 RID: 7702 RVA: 0x000529C8 File Offset: 0x00050BC8
			[CLSCompliant(false)]
			public unsafe static void Binormal3(sbyte[] v)
			{
				fixed (sbyte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[90]);
				}
			}

			// Token: 0x06001E17 RID: 7703 RVA: 0x000529F8 File Offset: 0x00050BF8
			[CLSCompliant(false)]
			public unsafe static void Binormal3(ref sbyte v)
			{
				fixed (sbyte* ptr = &v)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[90]);
				}
			}

			// Token: 0x06001E18 RID: 7704 RVA: 0x00052A18 File Offset: 0x00050C18
			[CLSCompliant(false)]
			public unsafe static void Binormal3(sbyte* v)
			{
				calli(System.Void(System.SByte*), v, GL.EntryPoints[90]);
			}

			// Token: 0x06001E19 RID: 7705 RVA: 0x00052A28 File Offset: 0x00050C28
			public static void Binormal3(double bx, double by, double bz)
			{
				calli(System.Void(System.Double,System.Double,System.Double), bx, by, bz, GL.EntryPoints[91]);
			}

			// Token: 0x06001E1A RID: 7706 RVA: 0x00052A3C File Offset: 0x00050C3C
			[CLSCompliant(false)]
			public unsafe static void Binormal3(double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[92]);
				}
			}

			// Token: 0x06001E1B RID: 7707 RVA: 0x00052A6C File Offset: 0x00050C6C
			[CLSCompliant(false)]
			public unsafe static void Binormal3(ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[92]);
				}
			}

			// Token: 0x06001E1C RID: 7708 RVA: 0x00052A8C File Offset: 0x00050C8C
			[CLSCompliant(false)]
			public unsafe static void Binormal3(double* v)
			{
				calli(System.Void(System.Double*), v, GL.EntryPoints[92]);
			}

			// Token: 0x06001E1D RID: 7709 RVA: 0x00052A9C File Offset: 0x00050C9C
			public static void Binormal3(float bx, float by, float bz)
			{
				calli(System.Void(System.Single,System.Single,System.Single), bx, by, bz, GL.EntryPoints[93]);
			}

			// Token: 0x06001E1E RID: 7710 RVA: 0x00052AB0 File Offset: 0x00050CB0
			[CLSCompliant(false)]
			public unsafe static void Binormal3(float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[94]);
				}
			}

			// Token: 0x06001E1F RID: 7711 RVA: 0x00052AE0 File Offset: 0x00050CE0
			[CLSCompliant(false)]
			public unsafe static void Binormal3(ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[94]);
				}
			}

			// Token: 0x06001E20 RID: 7712 RVA: 0x00052B00 File Offset: 0x00050D00
			[CLSCompliant(false)]
			public unsafe static void Binormal3(float* v)
			{
				calli(System.Void(System.Single*), v, GL.EntryPoints[94]);
			}

			// Token: 0x06001E21 RID: 7713 RVA: 0x00052B10 File Offset: 0x00050D10
			public static void Binormal3(int bx, int by, int bz)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), bx, by, bz, GL.EntryPoints[95]);
			}

			// Token: 0x06001E22 RID: 7714 RVA: 0x00052B24 File Offset: 0x00050D24
			[CLSCompliant(false)]
			public unsafe static void Binormal3(int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[96]);
				}
			}

			// Token: 0x06001E23 RID: 7715 RVA: 0x00052B54 File Offset: 0x00050D54
			[CLSCompliant(false)]
			public unsafe static void Binormal3(ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[96]);
				}
			}

			// Token: 0x06001E24 RID: 7716 RVA: 0x00052B74 File Offset: 0x00050D74
			[CLSCompliant(false)]
			public unsafe static void Binormal3(int* v)
			{
				calli(System.Void(System.Int32*), v, GL.EntryPoints[96]);
			}

			// Token: 0x06001E25 RID: 7717 RVA: 0x00052B84 File Offset: 0x00050D84
			public static void Binormal3(short bx, short by, short bz)
			{
				calli(System.Void(System.Int16,System.Int16,System.Int16), bx, by, bz, GL.EntryPoints[97]);
			}

			// Token: 0x06001E26 RID: 7718 RVA: 0x00052B98 File Offset: 0x00050D98
			[CLSCompliant(false)]
			public unsafe static void Binormal3(short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int16*), ptr, GL.EntryPoints[98]);
				}
			}

			// Token: 0x06001E27 RID: 7719 RVA: 0x00052BC8 File Offset: 0x00050DC8
			[CLSCompliant(false)]
			public unsafe static void Binormal3(ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.Int16*), ptr, GL.EntryPoints[98]);
				}
			}

			// Token: 0x06001E28 RID: 7720 RVA: 0x00052BE8 File Offset: 0x00050DE8
			[CLSCompliant(false)]
			public unsafe static void Binormal3(short* v)
			{
				calli(System.Void(System.Int16*), v, GL.EntryPoints[98]);
			}

			// Token: 0x06001E29 RID: 7721 RVA: 0x00052BF8 File Offset: 0x00050DF8
			public static void BinormalPointer(NormalPointerType type, int stride, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, pointer, GL.EntryPoints[99]);
			}

			// Token: 0x06001E2A RID: 7722 RVA: 0x00052C0C File Offset: 0x00050E0C
			[CLSCompliant(false)]
			public unsafe static void BinormalPointer<T2>(NormalPointerType type, int stride, [In] [Out] T2[] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[99]);
				}
			}

			// Token: 0x06001E2B RID: 7723 RVA: 0x00052C40 File Offset: 0x00050E40
			[CLSCompliant(false)]
			public unsafe static void BinormalPointer<T2>(NormalPointerType type, int stride, [In] [Out] T2[,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[99]);
				}
			}

			// Token: 0x06001E2C RID: 7724 RVA: 0x00052C78 File Offset: 0x00050E78
			[CLSCompliant(false)]
			public unsafe static void BinormalPointer<T2>(NormalPointerType type, int stride, [In] [Out] T2[,,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[99]);
				}
			}

			// Token: 0x06001E2D RID: 7725 RVA: 0x00052CB0 File Offset: 0x00050EB0
			public unsafe static void BinormalPointer<T2>(NormalPointerType type, int stride, [In] [Out] ref T2 pointer) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[99]);
				}
			}

			// Token: 0x06001E2E RID: 7726 RVA: 0x00052CD0 File Offset: 0x00050ED0
			public static void BlendColor(float red, float green, float blue, float alpha)
			{
				calli(System.Void(System.Single,System.Single,System.Single,System.Single), red, green, blue, alpha, GL.EntryPoints[104]);
			}

			// Token: 0x06001E2F RID: 7727 RVA: 0x00052CE4 File Offset: 0x00050EE4
			public static void BlendEquation(BlendEquationMode mode)
			{
				calli(System.Void(System.Int32), mode, GL.EntryPoints[107]);
			}

			// Token: 0x06001E30 RID: 7728 RVA: 0x00052CF4 File Offset: 0x00050EF4
			[Obsolete("Use BlendEquationMode overload instead")]
			public static void BlendEquation(ExtBlendMinmax mode)
			{
				calli(System.Void(System.Int32), mode, GL.EntryPoints[107]);
			}

			// Token: 0x06001E31 RID: 7729 RVA: 0x00052D04 File Offset: 0x00050F04
			public static void BlendEquationSeparate(BlendEquationModeExt modeRGB, BlendEquationModeExt modeAlpha)
			{
				calli(System.Void(System.Int32,System.Int32), modeRGB, modeAlpha, GL.EntryPoints[112]);
			}

			// Token: 0x06001E32 RID: 7730 RVA: 0x00052D18 File Offset: 0x00050F18
			[Obsolete("Use BlendEquationModeExt overload instead")]
			public static void BlendEquationSeparate(ExtBlendEquationSeparate modeRGB, ExtBlendEquationSeparate modeAlpha)
			{
				calli(System.Void(System.Int32,System.Int32), modeRGB, modeAlpha, GL.EntryPoints[112]);
			}

			// Token: 0x06001E33 RID: 7731 RVA: 0x00052D2C File Offset: 0x00050F2C
			public static void BlendFuncSeparate(ExtBlendFuncSeparate sfactorRGB, ExtBlendFuncSeparate dfactorRGB, ExtBlendFuncSeparate sfactorAlpha, ExtBlendFuncSeparate dfactorAlpha)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha, GL.EntryPoints[121]);
			}

			// Token: 0x06001E34 RID: 7732 RVA: 0x00052D40 File Offset: 0x00050F40
			public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter, GL.EntryPoints[128]);
			}

			// Token: 0x06001E35 RID: 7733 RVA: 0x00052D70 File Offset: 0x00050F70
			[Obsolete("Use BlitFramebufferFilter overload instead")]
			public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, ExtFramebufferBlit filter)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter, GL.EntryPoints[128]);
			}

			// Token: 0x06001E36 RID: 7734 RVA: 0x00052DA0 File Offset: 0x00050FA0
			public static FramebufferErrorCode CheckFramebufferStatus(FramebufferTarget target)
			{
				return calli(System.Int32(System.Int32), target, GL.EntryPoints[139]);
			}

			// Token: 0x06001E37 RID: 7735 RVA: 0x00052DB4 File Offset: 0x00050FB4
			[CLSCompliant(false)]
			public static ExtDirectStateAccess CheckNamedFramebufferStatus(int framebuffer, FramebufferTarget target)
			{
				return calli(System.Int32(System.UInt32,System.Int32), framebuffer, target, GL.EntryPoints[140]);
			}

			// Token: 0x06001E38 RID: 7736 RVA: 0x00052DC8 File Offset: 0x00050FC8
			[CLSCompliant(false)]
			public static ExtDirectStateAccess CheckNamedFramebufferStatus(uint framebuffer, FramebufferTarget target)
			{
				return calli(System.Int32(System.UInt32,System.Int32), framebuffer, target, GL.EntryPoints[140]);
			}

			// Token: 0x06001E39 RID: 7737 RVA: 0x00052DDC File Offset: 0x00050FDC
			public static void ClearColorI(int red, int green, int blue, int alpha)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), red, green, blue, alpha, GL.EntryPoints[153]);
			}

			// Token: 0x06001E3A RID: 7738 RVA: 0x00052DF4 File Offset: 0x00050FF4
			[CLSCompliant(false)]
			public static void ClearColorI(uint red, uint green, uint blue, uint alpha)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.UInt32), red, green, blue, alpha, GL.EntryPoints[154]);
			}

			// Token: 0x06001E3B RID: 7739 RVA: 0x00052E0C File Offset: 0x0005100C
			[CLSCompliant(false)]
			public static void ClearNamedBufferData(int buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, IntPtr data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, format, type, data, GL.EntryPoints[162]);
			}

			// Token: 0x06001E3C RID: 7740 RVA: 0x00052E24 File Offset: 0x00051024
			[CLSCompliant(false)]
			public unsafe static void ClearNamedBufferData<T4>(int buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, [In] [Out] T4[] data) where T4 : struct
			{
				fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, format, type, ptr, GL.EntryPoints[162]);
				}
			}

			// Token: 0x06001E3D RID: 7741 RVA: 0x00052E60 File Offset: 0x00051060
			[CLSCompliant(false)]
			public unsafe static void ClearNamedBufferData<T4>(int buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, [In] [Out] T4[,] data) where T4 : struct
			{
				fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, format, type, ptr, GL.EntryPoints[162]);
				}
			}

			// Token: 0x06001E3E RID: 7742 RVA: 0x00052EA0 File Offset: 0x000510A0
			[CLSCompliant(false)]
			public unsafe static void ClearNamedBufferData<T4>(int buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, [In] [Out] T4[,,] data) where T4 : struct
			{
				fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, format, type, ptr, GL.EntryPoints[162]);
				}
			}

			// Token: 0x06001E3F RID: 7743 RVA: 0x00052EE0 File Offset: 0x000510E0
			[CLSCompliant(false)]
			public unsafe static void ClearNamedBufferData<T4>(int buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, [In] [Out] ref T4 data) where T4 : struct
			{
				fixed (T4* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, format, type, ptr, GL.EntryPoints[162]);
				}
			}

			// Token: 0x06001E40 RID: 7744 RVA: 0x00052F08 File Offset: 0x00051108
			[CLSCompliant(false)]
			public static void ClearNamedBufferData(uint buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, IntPtr data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, format, type, data, GL.EntryPoints[162]);
			}

			// Token: 0x06001E41 RID: 7745 RVA: 0x00052F20 File Offset: 0x00051120
			[CLSCompliant(false)]
			public unsafe static void ClearNamedBufferData<T4>(uint buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, [In] [Out] T4[] data) where T4 : struct
			{
				fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, format, type, ptr, GL.EntryPoints[162]);
				}
			}

			// Token: 0x06001E42 RID: 7746 RVA: 0x00052F5C File Offset: 0x0005115C
			[CLSCompliant(false)]
			public unsafe static void ClearNamedBufferData<T4>(uint buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, [In] [Out] T4[,] data) where T4 : struct
			{
				fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, format, type, ptr, GL.EntryPoints[162]);
				}
			}

			// Token: 0x06001E43 RID: 7747 RVA: 0x00052F9C File Offset: 0x0005119C
			[CLSCompliant(false)]
			public unsafe static void ClearNamedBufferData<T4>(uint buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, [In] [Out] T4[,,] data) where T4 : struct
			{
				fixed (T4* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, format, type, ptr, GL.EntryPoints[162]);
				}
			}

			// Token: 0x06001E44 RID: 7748 RVA: 0x00052FDC File Offset: 0x000511DC
			[CLSCompliant(false)]
			public unsafe static void ClearNamedBufferData<T4>(uint buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, [In] [Out] ref T4 data) where T4 : struct
			{
				fixed (T4* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, format, type, ptr, GL.EntryPoints[162]);
				}
			}

			// Token: 0x06001E45 RID: 7749 RVA: 0x00053004 File Offset: 0x00051204
			[CLSCompliant(false)]
			public static void ClearNamedBufferSubData(int buffer, ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, PixelFormat format, PixelType type, IntPtr data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, offset, size, format, type, data, GL.EntryPoints[163]);
			}

			// Token: 0x06001E46 RID: 7750 RVA: 0x0005302C File Offset: 0x0005122C
			[CLSCompliant(false)]
			public unsafe static void ClearNamedBufferSubData<T6>(int buffer, ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, PixelFormat format, PixelType type, [In] [Out] T6[] data) where T6 : struct
			{
				fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, offset, size, format, type, ptr, GL.EntryPoints[163]);
				}
			}

			// Token: 0x06001E47 RID: 7751 RVA: 0x0005306C File Offset: 0x0005126C
			[CLSCompliant(false)]
			public unsafe static void ClearNamedBufferSubData<T6>(int buffer, ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, PixelFormat format, PixelType type, [In] [Out] T6[,] data) where T6 : struct
			{
				fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, offset, size, format, type, ptr, GL.EntryPoints[163]);
				}
			}

			// Token: 0x06001E48 RID: 7752 RVA: 0x000530B0 File Offset: 0x000512B0
			[CLSCompliant(false)]
			public unsafe static void ClearNamedBufferSubData<T6>(int buffer, ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, PixelFormat format, PixelType type, [In] [Out] T6[,,] data) where T6 : struct
			{
				fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, offset, size, format, type, ptr, GL.EntryPoints[163]);
				}
			}

			// Token: 0x06001E49 RID: 7753 RVA: 0x000530F4 File Offset: 0x000512F4
			[CLSCompliant(false)]
			public unsafe static void ClearNamedBufferSubData<T6>(int buffer, ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, PixelFormat format, PixelType type, [In] [Out] ref T6 data) where T6 : struct
			{
				fixed (T6* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, offset, size, format, type, ptr, GL.EntryPoints[163]);
				}
			}

			// Token: 0x06001E4A RID: 7754 RVA: 0x00053120 File Offset: 0x00051320
			[CLSCompliant(false)]
			public static void ClearNamedBufferSubData(uint buffer, ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, PixelFormat format, PixelType type, IntPtr data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, offset, size, format, type, data, GL.EntryPoints[163]);
			}

			// Token: 0x06001E4B RID: 7755 RVA: 0x00053148 File Offset: 0x00051348
			[CLSCompliant(false)]
			public unsafe static void ClearNamedBufferSubData<T6>(uint buffer, ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, PixelFormat format, PixelType type, [In] [Out] T6[] data) where T6 : struct
			{
				fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, offset, size, format, type, ptr, GL.EntryPoints[163]);
				}
			}

			// Token: 0x06001E4C RID: 7756 RVA: 0x00053188 File Offset: 0x00051388
			[CLSCompliant(false)]
			public unsafe static void ClearNamedBufferSubData<T6>(uint buffer, ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, PixelFormat format, PixelType type, [In] [Out] T6[,] data) where T6 : struct
			{
				fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, offset, size, format, type, ptr, GL.EntryPoints[163]);
				}
			}

			// Token: 0x06001E4D RID: 7757 RVA: 0x000531CC File Offset: 0x000513CC
			[CLSCompliant(false)]
			public unsafe static void ClearNamedBufferSubData<T6>(uint buffer, ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, PixelFormat format, PixelType type, [In] [Out] T6[,,] data) where T6 : struct
			{
				fixed (T6* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, offset, size, format, type, ptr, GL.EntryPoints[163]);
				}
			}

			// Token: 0x06001E4E RID: 7758 RVA: 0x00053210 File Offset: 0x00051410
			[CLSCompliant(false)]
			public unsafe static void ClearNamedBufferSubData<T6>(uint buffer, ExtDirectStateAccess internalformat, IntPtr offset, IntPtr size, PixelFormat format, PixelType type, [In] [Out] ref T6 data) where T6 : struct
			{
				fixed (T6* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr), buffer, internalformat, offset, size, format, type, ptr, GL.EntryPoints[163]);
				}
			}

			// Token: 0x06001E4F RID: 7759 RVA: 0x0005323C File Offset: 0x0005143C
			public static void ClientAttribDefault(ClientAttribMask mask)
			{
				calli(System.Void(System.Int32), mask, GL.EntryPoints[170]);
			}

			// Token: 0x06001E50 RID: 7760 RVA: 0x00053250 File Offset: 0x00051450
			[CLSCompliant(false)]
			public static void ColorMaskIndexed(int index, bool r, bool g, bool b, bool a)
			{
				calli(System.Void(System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean), index, r, g, b, a, GL.EntryPoints[229]);
			}

			// Token: 0x06001E51 RID: 7761 RVA: 0x00053268 File Offset: 0x00051468
			[CLSCompliant(false)]
			public static void ColorMaskIndexed(uint index, bool r, bool g, bool b, bool a)
			{
				calli(System.Void(System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean), index, r, g, b, a, GL.EntryPoints[229]);
			}

			// Token: 0x06001E52 RID: 7762 RVA: 0x00053280 File Offset: 0x00051480
			public static void ColorPointer(int size, ColorPointerType type, int stride, int count, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, count, pointer, GL.EntryPoints[236]);
			}

			// Token: 0x06001E53 RID: 7763 RVA: 0x00053298 File Offset: 0x00051498
			[CLSCompliant(false)]
			public unsafe static void ColorPointer<T4>(int size, ColorPointerType type, int stride, int count, [In] [Out] T4[] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, count, ptr, GL.EntryPoints[236]);
				}
			}

			// Token: 0x06001E54 RID: 7764 RVA: 0x000532D4 File Offset: 0x000514D4
			[CLSCompliant(false)]
			public unsafe static void ColorPointer<T4>(int size, ColorPointerType type, int stride, int count, [In] [Out] T4[,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, count, ptr, GL.EntryPoints[236]);
				}
			}

			// Token: 0x06001E55 RID: 7765 RVA: 0x00053314 File Offset: 0x00051514
			[CLSCompliant(false)]
			public unsafe static void ColorPointer<T4>(int size, ColorPointerType type, int stride, int count, [In] [Out] T4[,,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, count, ptr, GL.EntryPoints[236]);
				}
			}

			// Token: 0x06001E56 RID: 7766 RVA: 0x00053354 File Offset: 0x00051554
			public unsafe static void ColorPointer<T4>(int size, ColorPointerType type, int stride, int count, [In] [Out] ref T4 pointer) where T4 : struct
			{
				fixed (T4* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, count, ptr, GL.EntryPoints[236]);
				}
			}

			// Token: 0x06001E57 RID: 7767 RVA: 0x0005337C File Offset: 0x0005157C
			public static void ColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, start, count, format, type, data, GL.EntryPoints[240]);
			}

			// Token: 0x06001E58 RID: 7768 RVA: 0x00053398 File Offset: 0x00051598
			[CLSCompliant(false)]
			public unsafe static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In] [Out] T5[] data) where T5 : struct
			{
				fixed (T5* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, start, count, format, type, ptr, GL.EntryPoints[240]);
				}
			}

			// Token: 0x06001E59 RID: 7769 RVA: 0x000533D4 File Offset: 0x000515D4
			[CLSCompliant(false)]
			public unsafe static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In] [Out] T5[,] data) where T5 : struct
			{
				fixed (T5* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, start, count, format, type, ptr, GL.EntryPoints[240]);
				}
			}

			// Token: 0x06001E5A RID: 7770 RVA: 0x00053414 File Offset: 0x00051614
			[CLSCompliant(false)]
			public unsafe static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In] [Out] T5[,,] data) where T5 : struct
			{
				fixed (T5* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, start, count, format, type, ptr, GL.EntryPoints[240]);
				}
			}

			// Token: 0x06001E5B RID: 7771 RVA: 0x00053458 File Offset: 0x00051658
			public unsafe static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In] [Out] ref T5 data) where T5 : struct
			{
				fixed (T5* ptr = &data)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, start, count, format, type, ptr, GL.EntryPoints[240]);
				}
			}

			// Token: 0x06001E5C RID: 7772 RVA: 0x00053480 File Offset: 0x00051680
			public static void ColorTable(ColorTableTarget target, PixelInternalFormat internalFormat, int width, PixelFormat format, PixelType type, IntPtr table)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalFormat, width, format, type, table, GL.EntryPoints[242]);
			}

			// Token: 0x06001E5D RID: 7773 RVA: 0x0005349C File Offset: 0x0005169C
			[CLSCompliant(false)]
			public unsafe static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalFormat, int width, PixelFormat format, PixelType type, [In] [Out] T5[] table) where T5 : struct
			{
				fixed (T5* ptr = ref (table != null && table.Length != 0) ? ref table[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalFormat, width, format, type, ptr, GL.EntryPoints[242]);
				}
			}

			// Token: 0x06001E5E RID: 7774 RVA: 0x000534D8 File Offset: 0x000516D8
			[CLSCompliant(false)]
			public unsafe static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalFormat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,] table) where T5 : struct
			{
				fixed (T5* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalFormat, width, format, type, ptr, GL.EntryPoints[242]);
				}
			}

			// Token: 0x06001E5F RID: 7775 RVA: 0x00053518 File Offset: 0x00051718
			[CLSCompliant(false)]
			public unsafe static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalFormat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,,] table) where T5 : struct
			{
				fixed (T5* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalFormat, width, format, type, ptr, GL.EntryPoints[242]);
				}
			}

			// Token: 0x06001E60 RID: 7776 RVA: 0x0005355C File Offset: 0x0005175C
			public unsafe static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalFormat, int width, PixelFormat format, PixelType type, [In] [Out] ref T5 table) where T5 : struct
			{
				fixed (T5* ptr = &table)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalFormat, width, format, type, ptr, GL.EntryPoints[242]);
				}
			}

			// Token: 0x06001E61 RID: 7777 RVA: 0x00053584 File Offset: 0x00051784
			public static void CompressedMultiTexImage1D(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, border, imageSize, bits, GL.EntryPoints[258]);
			}

			// Token: 0x06001E62 RID: 7778 RVA: 0x000535B0 File Offset: 0x000517B0
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In] [Out] T7[] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[258]);
				}
			}

			// Token: 0x06001E63 RID: 7779 RVA: 0x000535F0 File Offset: 0x000517F0
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In] [Out] T7[,] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[258]);
				}
			}

			// Token: 0x06001E64 RID: 7780 RVA: 0x00053634 File Offset: 0x00051834
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In] [Out] T7[,,] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[258]);
				}
			}

			// Token: 0x06001E65 RID: 7781 RVA: 0x0005367C File Offset: 0x0005187C
			public unsafe static void CompressedMultiTexImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In] [Out] ref T7 bits) where T7 : struct
			{
				fixed (T7* ptr = &bits)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[258]);
				}
			}

			// Token: 0x06001E66 RID: 7782 RVA: 0x000536A8 File Offset: 0x000518A8
			public static void CompressedMultiTexImage2D(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, border, imageSize, bits, GL.EntryPoints[259]);
			}

			// Token: 0x06001E67 RID: 7783 RVA: 0x000536D4 File Offset: 0x000518D4
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexImage2D<T8>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In] [Out] T8[] bits) where T8 : struct
			{
				fixed (T8* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[259]);
				}
			}

			// Token: 0x06001E68 RID: 7784 RVA: 0x00053718 File Offset: 0x00051918
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexImage2D<T8>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In] [Out] T8[,] bits) where T8 : struct
			{
				fixed (T8* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[259]);
				}
			}

			// Token: 0x06001E69 RID: 7785 RVA: 0x00053760 File Offset: 0x00051960
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexImage2D<T8>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In] [Out] T8[,,] bits) where T8 : struct
			{
				fixed (T8* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[259]);
				}
			}

			// Token: 0x06001E6A RID: 7786 RVA: 0x000537A8 File Offset: 0x000519A8
			public unsafe static void CompressedMultiTexImage2D<T8>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In] [Out] ref T8 bits) where T8 : struct
			{
				fixed (T8* ptr = &bits)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[259]);
				}
			}

			// Token: 0x06001E6B RID: 7787 RVA: 0x000537D8 File Offset: 0x000519D8
			public static void CompressedMultiTexImage3D(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, depth, border, imageSize, bits, GL.EntryPoints[260]);
			}

			// Token: 0x06001E6C RID: 7788 RVA: 0x00053808 File Offset: 0x00051A08
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexImage3D<T9>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T9[] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[260]);
				}
			}

			// Token: 0x06001E6D RID: 7789 RVA: 0x0005384C File Offset: 0x00051A4C
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexImage3D<T9>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T9[,] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[260]);
				}
			}

			// Token: 0x06001E6E RID: 7790 RVA: 0x00053894 File Offset: 0x00051A94
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexImage3D<T9>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T9[,,] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[260]);
				}
			}

			// Token: 0x06001E6F RID: 7791 RVA: 0x000538E0 File Offset: 0x00051AE0
			public unsafe static void CompressedMultiTexImage3D<T9>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] ref T9 bits) where T9 : struct
			{
				fixed (T9* ptr = &bits)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[260]);
				}
			}

			// Token: 0x06001E70 RID: 7792 RVA: 0x00053910 File Offset: 0x00051B10
			public static void CompressedMultiTexSubImage1D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, width, format, imageSize, bits, GL.EntryPoints[261]);
			}

			// Token: 0x06001E71 RID: 7793 RVA: 0x0005393C File Offset: 0x00051B3C
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexSubImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T7[] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[261]);
				}
			}

			// Token: 0x06001E72 RID: 7794 RVA: 0x0005397C File Offset: 0x00051B7C
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexSubImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T7[,] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[261]);
				}
			}

			// Token: 0x06001E73 RID: 7795 RVA: 0x000539C0 File Offset: 0x00051BC0
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexSubImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T7[,,] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[261]);
				}
			}

			// Token: 0x06001E74 RID: 7796 RVA: 0x00053A08 File Offset: 0x00051C08
			public unsafe static void CompressedMultiTexSubImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] ref T7 bits) where T7 : struct
			{
				fixed (T7* ptr = &bits)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[261]);
				}
			}

			// Token: 0x06001E75 RID: 7797 RVA: 0x00053A34 File Offset: 0x00051C34
			public static void CompressedMultiTexSubImage2D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits, GL.EntryPoints[262]);
			}

			// Token: 0x06001E76 RID: 7798 RVA: 0x00053A64 File Offset: 0x00051C64
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexSubImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T9[] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[262]);
				}
			}

			// Token: 0x06001E77 RID: 7799 RVA: 0x00053AA8 File Offset: 0x00051CA8
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexSubImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T9[,] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[262]);
				}
			}

			// Token: 0x06001E78 RID: 7800 RVA: 0x00053AF0 File Offset: 0x00051CF0
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexSubImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T9[,,] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[262]);
				}
			}

			// Token: 0x06001E79 RID: 7801 RVA: 0x00053B3C File Offset: 0x00051D3C
			public unsafe static void CompressedMultiTexSubImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] ref T9 bits) where T9 : struct
			{
				fixed (T9* ptr = &bits)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[262]);
				}
			}

			// Token: 0x06001E7A RID: 7802 RVA: 0x00053B6C File Offset: 0x00051D6C
			public static void CompressedMultiTexSubImage3D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits, GL.EntryPoints[263]);
			}

			// Token: 0x06001E7B RID: 7803 RVA: 0x00053BA0 File Offset: 0x00051DA0
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexSubImage3D<T11>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T11[] bits) where T11 : struct
			{
				fixed (T11* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[263]);
				}
			}

			// Token: 0x06001E7C RID: 7804 RVA: 0x00053BE8 File Offset: 0x00051DE8
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexSubImage3D<T11>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T11[,] bits) where T11 : struct
			{
				fixed (T11* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[263]);
				}
			}

			// Token: 0x06001E7D RID: 7805 RVA: 0x00053C34 File Offset: 0x00051E34
			[CLSCompliant(false)]
			public unsafe static void CompressedMultiTexSubImage3D<T11>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T11[,,] bits) where T11 : struct
			{
				fixed (T11* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[263]);
				}
			}

			// Token: 0x06001E7E RID: 7806 RVA: 0x00053C84 File Offset: 0x00051E84
			public unsafe static void CompressedMultiTexSubImage3D<T11>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] ref T11 bits) where T11 : struct
			{
				fixed (T11* ptr = &bits)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[263]);
				}
			}

			// Token: 0x06001E7F RID: 7807 RVA: 0x00053CB8 File Offset: 0x00051EB8
			[CLSCompliant(false)]
			public static void CompressedTextureImage1D(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, imageSize, bits, GL.EntryPoints[276]);
			}

			// Token: 0x06001E80 RID: 7808 RVA: 0x00053CE4 File Offset: 0x00051EE4
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage1D<T7>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In] [Out] T7[] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[276]);
				}
			}

			// Token: 0x06001E81 RID: 7809 RVA: 0x00053D24 File Offset: 0x00051F24
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage1D<T7>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In] [Out] T7[,] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[276]);
				}
			}

			// Token: 0x06001E82 RID: 7810 RVA: 0x00053D68 File Offset: 0x00051F68
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage1D<T7>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In] [Out] T7[,,] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[276]);
				}
			}

			// Token: 0x06001E83 RID: 7811 RVA: 0x00053DB0 File Offset: 0x00051FB0
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage1D<T7>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In] [Out] ref T7 bits) where T7 : struct
			{
				fixed (T7* ptr = &bits)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[276]);
				}
			}

			// Token: 0x06001E84 RID: 7812 RVA: 0x00053DDC File Offset: 0x00051FDC
			[CLSCompliant(false)]
			public static void CompressedTextureImage1D(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, imageSize, bits, GL.EntryPoints[276]);
			}

			// Token: 0x06001E85 RID: 7813 RVA: 0x00053E08 File Offset: 0x00052008
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage1D<T7>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In] [Out] T7[] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[276]);
				}
			}

			// Token: 0x06001E86 RID: 7814 RVA: 0x00053E48 File Offset: 0x00052048
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage1D<T7>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In] [Out] T7[,] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[276]);
				}
			}

			// Token: 0x06001E87 RID: 7815 RVA: 0x00053E8C File Offset: 0x0005208C
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage1D<T7>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In] [Out] T7[,,] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[276]);
				}
			}

			// Token: 0x06001E88 RID: 7816 RVA: 0x00053ED4 File Offset: 0x000520D4
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage1D<T7>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In] [Out] ref T7 bits) where T7 : struct
			{
				fixed (T7* ptr = &bits)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, imageSize, ptr, GL.EntryPoints[276]);
				}
			}

			// Token: 0x06001E89 RID: 7817 RVA: 0x00053F00 File Offset: 0x00052100
			[CLSCompliant(false)]
			public static void CompressedTextureImage2D(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, imageSize, bits, GL.EntryPoints[277]);
			}

			// Token: 0x06001E8A RID: 7818 RVA: 0x00053F2C File Offset: 0x0005212C
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage2D<T8>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In] [Out] T8[] bits) where T8 : struct
			{
				fixed (T8* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[277]);
				}
			}

			// Token: 0x06001E8B RID: 7819 RVA: 0x00053F70 File Offset: 0x00052170
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage2D<T8>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In] [Out] T8[,] bits) where T8 : struct
			{
				fixed (T8* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[277]);
				}
			}

			// Token: 0x06001E8C RID: 7820 RVA: 0x00053FB8 File Offset: 0x000521B8
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage2D<T8>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In] [Out] T8[,,] bits) where T8 : struct
			{
				fixed (T8* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[277]);
				}
			}

			// Token: 0x06001E8D RID: 7821 RVA: 0x00054000 File Offset: 0x00052200
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage2D<T8>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In] [Out] ref T8 bits) where T8 : struct
			{
				fixed (T8* ptr = &bits)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[277]);
				}
			}

			// Token: 0x06001E8E RID: 7822 RVA: 0x00054030 File Offset: 0x00052230
			[CLSCompliant(false)]
			public static void CompressedTextureImage2D(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, imageSize, bits, GL.EntryPoints[277]);
			}

			// Token: 0x06001E8F RID: 7823 RVA: 0x0005405C File Offset: 0x0005225C
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage2D<T8>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In] [Out] T8[] bits) where T8 : struct
			{
				fixed (T8* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[277]);
				}
			}

			// Token: 0x06001E90 RID: 7824 RVA: 0x000540A0 File Offset: 0x000522A0
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage2D<T8>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In] [Out] T8[,] bits) where T8 : struct
			{
				fixed (T8* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[277]);
				}
			}

			// Token: 0x06001E91 RID: 7825 RVA: 0x000540E8 File Offset: 0x000522E8
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage2D<T8>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In] [Out] T8[,,] bits) where T8 : struct
			{
				fixed (T8* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[277]);
				}
			}

			// Token: 0x06001E92 RID: 7826 RVA: 0x00054130 File Offset: 0x00052330
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage2D<T8>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In] [Out] ref T8 bits) where T8 : struct
			{
				fixed (T8* ptr = &bits)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[277]);
				}
			}

			// Token: 0x06001E93 RID: 7827 RVA: 0x00054160 File Offset: 0x00052360
			[CLSCompliant(false)]
			public static void CompressedTextureImage3D(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, imageSize, bits, GL.EntryPoints[278]);
			}

			// Token: 0x06001E94 RID: 7828 RVA: 0x00054190 File Offset: 0x00052390
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage3D<T9>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T9[] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[278]);
				}
			}

			// Token: 0x06001E95 RID: 7829 RVA: 0x000541D4 File Offset: 0x000523D4
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage3D<T9>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T9[,] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[278]);
				}
			}

			// Token: 0x06001E96 RID: 7830 RVA: 0x0005421C File Offset: 0x0005241C
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage3D<T9>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T9[,,] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[278]);
				}
			}

			// Token: 0x06001E97 RID: 7831 RVA: 0x00054268 File Offset: 0x00052468
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage3D<T9>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] ref T9 bits) where T9 : struct
			{
				fixed (T9* ptr = &bits)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[278]);
				}
			}

			// Token: 0x06001E98 RID: 7832 RVA: 0x00054298 File Offset: 0x00052498
			[CLSCompliant(false)]
			public static void CompressedTextureImage3D(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, imageSize, bits, GL.EntryPoints[278]);
			}

			// Token: 0x06001E99 RID: 7833 RVA: 0x000542C8 File Offset: 0x000524C8
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage3D<T9>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T9[] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[278]);
				}
			}

			// Token: 0x06001E9A RID: 7834 RVA: 0x0005430C File Offset: 0x0005250C
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage3D<T9>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T9[,] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[278]);
				}
			}

			// Token: 0x06001E9B RID: 7835 RVA: 0x00054354 File Offset: 0x00052554
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage3D<T9>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T9[,,] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[278]);
				}
			}

			// Token: 0x06001E9C RID: 7836 RVA: 0x000543A0 File Offset: 0x000525A0
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureImage3D<T9>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] ref T9 bits) where T9 : struct
			{
				fixed (T9* ptr = &bits)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[278]);
				}
			}

			// Token: 0x06001E9D RID: 7837 RVA: 0x000543D0 File Offset: 0x000525D0
			[CLSCompliant(false)]
			public static void CompressedTextureSubImage1D(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, imageSize, bits, GL.EntryPoints[279]);
			}

			// Token: 0x06001E9E RID: 7838 RVA: 0x000543FC File Offset: 0x000525FC
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage1D<T7>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T7[] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[279]);
				}
			}

			// Token: 0x06001E9F RID: 7839 RVA: 0x0005443C File Offset: 0x0005263C
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage1D<T7>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T7[,] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[279]);
				}
			}

			// Token: 0x06001EA0 RID: 7840 RVA: 0x00054480 File Offset: 0x00052680
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage1D<T7>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T7[,,] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[279]);
				}
			}

			// Token: 0x06001EA1 RID: 7841 RVA: 0x000544C8 File Offset: 0x000526C8
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage1D<T7>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] ref T7 bits) where T7 : struct
			{
				fixed (T7* ptr = &bits)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[279]);
				}
			}

			// Token: 0x06001EA2 RID: 7842 RVA: 0x000544F4 File Offset: 0x000526F4
			[CLSCompliant(false)]
			public static void CompressedTextureSubImage1D(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, imageSize, bits, GL.EntryPoints[279]);
			}

			// Token: 0x06001EA3 RID: 7843 RVA: 0x00054520 File Offset: 0x00052720
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage1D<T7>(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T7[] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[279]);
				}
			}

			// Token: 0x06001EA4 RID: 7844 RVA: 0x00054560 File Offset: 0x00052760
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage1D<T7>(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T7[,] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[279]);
				}
			}

			// Token: 0x06001EA5 RID: 7845 RVA: 0x000545A4 File Offset: 0x000527A4
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage1D<T7>(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] T7[,,] bits) where T7 : struct
			{
				fixed (T7* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[279]);
				}
			}

			// Token: 0x06001EA6 RID: 7846 RVA: 0x000545EC File Offset: 0x000527EC
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage1D<T7>(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In] [Out] ref T7 bits) where T7 : struct
			{
				fixed (T7* ptr = &bits)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, imageSize, ptr, GL.EntryPoints[279]);
				}
			}

			// Token: 0x06001EA7 RID: 7847 RVA: 0x00054618 File Offset: 0x00052818
			[CLSCompliant(false)]
			public static void CompressedTextureSubImage2D(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits, GL.EntryPoints[280]);
			}

			// Token: 0x06001EA8 RID: 7848 RVA: 0x00054648 File Offset: 0x00052848
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage2D<T9>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T9[] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[280]);
				}
			}

			// Token: 0x06001EA9 RID: 7849 RVA: 0x0005468C File Offset: 0x0005288C
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage2D<T9>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T9[,] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[280]);
				}
			}

			// Token: 0x06001EAA RID: 7850 RVA: 0x000546D4 File Offset: 0x000528D4
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage2D<T9>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T9[,,] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[280]);
				}
			}

			// Token: 0x06001EAB RID: 7851 RVA: 0x00054720 File Offset: 0x00052920
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage2D<T9>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] ref T9 bits) where T9 : struct
			{
				fixed (T9* ptr = &bits)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[280]);
				}
			}

			// Token: 0x06001EAC RID: 7852 RVA: 0x00054750 File Offset: 0x00052950
			[CLSCompliant(false)]
			public static void CompressedTextureSubImage2D(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits, GL.EntryPoints[280]);
			}

			// Token: 0x06001EAD RID: 7853 RVA: 0x00054780 File Offset: 0x00052980
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage2D<T9>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T9[] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[280]);
				}
			}

			// Token: 0x06001EAE RID: 7854 RVA: 0x000547C4 File Offset: 0x000529C4
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage2D<T9>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T9[,] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[280]);
				}
			}

			// Token: 0x06001EAF RID: 7855 RVA: 0x0005480C File Offset: 0x00052A0C
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage2D<T9>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T9[,,] bits) where T9 : struct
			{
				fixed (T9* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[280]);
				}
			}

			// Token: 0x06001EB0 RID: 7856 RVA: 0x00054858 File Offset: 0x00052A58
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage2D<T9>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] ref T9 bits) where T9 : struct
			{
				fixed (T9* ptr = &bits)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[280]);
				}
			}

			// Token: 0x06001EB1 RID: 7857 RVA: 0x00054888 File Offset: 0x00052A88
			[CLSCompliant(false)]
			public static void CompressedTextureSubImage3D(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits, GL.EntryPoints[281]);
			}

			// Token: 0x06001EB2 RID: 7858 RVA: 0x000548BC File Offset: 0x00052ABC
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage3D<T11>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T11[] bits) where T11 : struct
			{
				fixed (T11* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[281]);
				}
			}

			// Token: 0x06001EB3 RID: 7859 RVA: 0x00054904 File Offset: 0x00052B04
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage3D<T11>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T11[,] bits) where T11 : struct
			{
				fixed (T11* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[281]);
				}
			}

			// Token: 0x06001EB4 RID: 7860 RVA: 0x00054950 File Offset: 0x00052B50
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage3D<T11>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T11[,,] bits) where T11 : struct
			{
				fixed (T11* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[281]);
				}
			}

			// Token: 0x06001EB5 RID: 7861 RVA: 0x000549A0 File Offset: 0x00052BA0
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage3D<T11>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] ref T11 bits) where T11 : struct
			{
				fixed (T11* ptr = &bits)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[281]);
				}
			}

			// Token: 0x06001EB6 RID: 7862 RVA: 0x000549D4 File Offset: 0x00052BD4
			[CLSCompliant(false)]
			public static void CompressedTextureSubImage3D(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr bits)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits, GL.EntryPoints[281]);
			}

			// Token: 0x06001EB7 RID: 7863 RVA: 0x00054A08 File Offset: 0x00052C08
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage3D<T11>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T11[] bits) where T11 : struct
			{
				fixed (T11* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[281]);
				}
			}

			// Token: 0x06001EB8 RID: 7864 RVA: 0x00054A50 File Offset: 0x00052C50
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage3D<T11>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T11[,] bits) where T11 : struct
			{
				fixed (T11* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[281]);
				}
			}

			// Token: 0x06001EB9 RID: 7865 RVA: 0x00054A9C File Offset: 0x00052C9C
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage3D<T11>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T11[,,] bits) where T11 : struct
			{
				fixed (T11* ptr = ref (bits != null && bits.Length != 0) ? ref bits[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[281]);
				}
			}

			// Token: 0x06001EBA RID: 7866 RVA: 0x00054AEC File Offset: 0x00052CEC
			[CLSCompliant(false)]
			public unsafe static void CompressedTextureSubImage3D<T11>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] ref T11 bits) where T11 : struct
			{
				fixed (T11* ptr = &bits)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[281]);
				}
			}

			// Token: 0x06001EBB RID: 7867 RVA: 0x00054B20 File Offset: 0x00052D20
			public static void ConvolutionFilter1D(ConvolutionTargetExt target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, image, GL.EntryPoints[283]);
			}

			// Token: 0x06001EBC RID: 7868 RVA: 0x00054B3C File Offset: 0x00052D3C
			[CLSCompliant(false)]
			public unsafe static void ConvolutionFilter1D<T5>(ConvolutionTargetExt target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[] image) where T5 : struct
			{
				fixed (T5* ptr = ref (image != null && image.Length != 0) ? ref image[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[283]);
				}
			}

			// Token: 0x06001EBD RID: 7869 RVA: 0x00054B78 File Offset: 0x00052D78
			[CLSCompliant(false)]
			public unsafe static void ConvolutionFilter1D<T5>(ConvolutionTargetExt target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,] image) where T5 : struct
			{
				fixed (T5* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[283]);
				}
			}

			// Token: 0x06001EBE RID: 7870 RVA: 0x00054BB8 File Offset: 0x00052DB8
			[CLSCompliant(false)]
			public unsafe static void ConvolutionFilter1D<T5>(ConvolutionTargetExt target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,,] image) where T5 : struct
			{
				fixed (T5* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[283]);
				}
			}

			// Token: 0x06001EBF RID: 7871 RVA: 0x00054BFC File Offset: 0x00052DFC
			public unsafe static void ConvolutionFilter1D<T5>(ConvolutionTargetExt target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] ref T5 image) where T5 : struct
			{
				fixed (T5* ptr = &image)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[283]);
				}
			}

			// Token: 0x06001EC0 RID: 7872 RVA: 0x00054C24 File Offset: 0x00052E24
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public static void ConvolutionFilter1D(ExtConvolution target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, image, GL.EntryPoints[283]);
			}

			// Token: 0x06001EC1 RID: 7873 RVA: 0x00054C40 File Offset: 0x00052E40
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ConvolutionFilter1D<T5>(ExtConvolution target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[] image) where T5 : struct
			{
				fixed (T5* ptr = ref (image != null && image.Length != 0) ? ref image[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[283]);
				}
			}

			// Token: 0x06001EC2 RID: 7874 RVA: 0x00054C7C File Offset: 0x00052E7C
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ConvolutionFilter1D<T5>(ExtConvolution target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,] image) where T5 : struct
			{
				fixed (T5* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[283]);
				}
			}

			// Token: 0x06001EC3 RID: 7875 RVA: 0x00054CBC File Offset: 0x00052EBC
			[CLSCompliant(false)]
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public unsafe static void ConvolutionFilter1D<T5>(ExtConvolution target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,,] image) where T5 : struct
			{
				fixed (T5* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[283]);
				}
			}

			// Token: 0x06001EC4 RID: 7876 RVA: 0x00054D00 File Offset: 0x00052F00
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public unsafe static void ConvolutionFilter1D<T5>(ExtConvolution target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] ref T5 image) where T5 : struct
			{
				fixed (T5* ptr = &image)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[283]);
				}
			}

			// Token: 0x06001EC5 RID: 7877 RVA: 0x00054D28 File Offset: 0x00052F28
			public static void ConvolutionFilter2D(ConvolutionTargetExt target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, image, GL.EntryPoints[285]);
			}

			// Token: 0x06001EC6 RID: 7878 RVA: 0x00054D50 File Offset: 0x00052F50
			[CLSCompliant(false)]
			public unsafe static void ConvolutionFilter2D<T6>(ConvolutionTargetExt target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[] image) where T6 : struct
			{
				fixed (T6* ptr = ref (image != null && image.Length != 0) ? ref image[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, ptr, GL.EntryPoints[285]);
				}
			}

			// Token: 0x06001EC7 RID: 7879 RVA: 0x00054D90 File Offset: 0x00052F90
			[CLSCompliant(false)]
			public unsafe static void ConvolutionFilter2D<T6>(ConvolutionTargetExt target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,] image) where T6 : struct
			{
				fixed (T6* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, ptr, GL.EntryPoints[285]);
				}
			}

			// Token: 0x06001EC8 RID: 7880 RVA: 0x00054DD4 File Offset: 0x00052FD4
			[CLSCompliant(false)]
			public unsafe static void ConvolutionFilter2D<T6>(ConvolutionTargetExt target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,,] image) where T6 : struct
			{
				fixed (T6* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, ptr, GL.EntryPoints[285]);
				}
			}

			// Token: 0x06001EC9 RID: 7881 RVA: 0x00054E18 File Offset: 0x00053018
			public unsafe static void ConvolutionFilter2D<T6>(ConvolutionTargetExt target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T6 image) where T6 : struct
			{
				fixed (T6* ptr = &image)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, ptr, GL.EntryPoints[285]);
				}
			}

			// Token: 0x06001ECA RID: 7882 RVA: 0x00054E44 File Offset: 0x00053044
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public static void ConvolutionFilter2D(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, image, GL.EntryPoints[285]);
			}

			// Token: 0x06001ECB RID: 7883 RVA: 0x00054E6C File Offset: 0x0005306C
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ConvolutionFilter2D<T6>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[] image) where T6 : struct
			{
				fixed (T6* ptr = ref (image != null && image.Length != 0) ? ref image[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, ptr, GL.EntryPoints[285]);
				}
			}

			// Token: 0x06001ECC RID: 7884 RVA: 0x00054EAC File Offset: 0x000530AC
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ConvolutionFilter2D<T6>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,] image) where T6 : struct
			{
				fixed (T6* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, ptr, GL.EntryPoints[285]);
				}
			}

			// Token: 0x06001ECD RID: 7885 RVA: 0x00054EF0 File Offset: 0x000530F0
			[CLSCompliant(false)]
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public unsafe static void ConvolutionFilter2D<T6>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,,] image) where T6 : struct
			{
				fixed (T6* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, ptr, GL.EntryPoints[285]);
				}
			}

			// Token: 0x06001ECE RID: 7886 RVA: 0x00054F34 File Offset: 0x00053134
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public unsafe static void ConvolutionFilter2D<T6>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T6 image) where T6 : struct
			{
				fixed (T6* ptr = &image)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, height, format, type, ptr, GL.EntryPoints[285]);
				}
			}

			// Token: 0x06001ECF RID: 7887 RVA: 0x00054F60 File Offset: 0x00053160
			public static void ConvolutionParameter(ConvolutionTargetExt target, ConvolutionParameterExt pname, float @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single), target, pname, @params, GL.EntryPoints[287]);
			}

			// Token: 0x06001ED0 RID: 7888 RVA: 0x00054F78 File Offset: 0x00053178
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public static void ConvolutionParameter(ExtConvolution target, ExtConvolution pname, float @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single), target, pname, @params, GL.EntryPoints[287]);
			}

			// Token: 0x06001ED1 RID: 7889 RVA: 0x00054F90 File Offset: 0x00053190
			[CLSCompliant(false)]
			public unsafe static void ConvolutionParameter(ConvolutionTargetExt target, ConvolutionParameterExt pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[289]);
				}
			}

			// Token: 0x06001ED2 RID: 7890 RVA: 0x00054FC8 File Offset: 0x000531C8
			[CLSCompliant(false)]
			public unsafe static void ConvolutionParameter(ConvolutionTargetExt target, ConvolutionParameterExt pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[289]);
			}

			// Token: 0x06001ED3 RID: 7891 RVA: 0x00054FE0 File Offset: 0x000531E0
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ConvolutionParameter(ExtConvolution target, ExtConvolution pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[289]);
				}
			}

			// Token: 0x06001ED4 RID: 7892 RVA: 0x00055018 File Offset: 0x00053218
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ConvolutionParameter(ExtConvolution target, ExtConvolution pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[289]);
			}

			// Token: 0x06001ED5 RID: 7893 RVA: 0x00055030 File Offset: 0x00053230
			public static void ConvolutionParameter(ConvolutionTargetExt target, ConvolutionParameterExt pname, int @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, @params, GL.EntryPoints[291]);
			}

			// Token: 0x06001ED6 RID: 7894 RVA: 0x00055048 File Offset: 0x00053248
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public static void ConvolutionParameter(ExtConvolution target, ExtConvolution pname, int @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, @params, GL.EntryPoints[291]);
			}

			// Token: 0x06001ED7 RID: 7895 RVA: 0x00055060 File Offset: 0x00053260
			[CLSCompliant(false)]
			public unsafe static void ConvolutionParameter(ConvolutionTargetExt target, ConvolutionParameterExt pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[293]);
				}
			}

			// Token: 0x06001ED8 RID: 7896 RVA: 0x00055098 File Offset: 0x00053298
			[CLSCompliant(false)]
			public unsafe static void ConvolutionParameter(ConvolutionTargetExt target, ConvolutionParameterExt pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[293]);
			}

			// Token: 0x06001ED9 RID: 7897 RVA: 0x000550B0 File Offset: 0x000532B0
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ConvolutionParameter(ExtConvolution target, ExtConvolution pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[293]);
				}
			}

			// Token: 0x06001EDA RID: 7898 RVA: 0x000550E8 File Offset: 0x000532E8
			[CLSCompliant(false)]
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public unsafe static void ConvolutionParameter(ExtConvolution target, ExtConvolution pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[293]);
			}

			// Token: 0x06001EDB RID: 7899 RVA: 0x00055100 File Offset: 0x00053300
			public static void CopyColorSubTable(ColorTableTarget target, int start, int x, int y, int width)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, start, x, y, width, GL.EntryPoints[298]);
			}

			// Token: 0x06001EDC RID: 7900 RVA: 0x00055118 File Offset: 0x00053318
			public static void CopyConvolutionFilter1D(ConvolutionTargetExt target, PixelInternalFormat internalformat, int x, int y, int width)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, x, y, width, GL.EntryPoints[302]);
			}

			// Token: 0x06001EDD RID: 7901 RVA: 0x00055130 File Offset: 0x00053330
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public static void CopyConvolutionFilter1D(ExtConvolution target, PixelInternalFormat internalformat, int x, int y, int width)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, x, y, width, GL.EntryPoints[302]);
			}

			// Token: 0x06001EDE RID: 7902 RVA: 0x00055148 File Offset: 0x00053348
			public static void CopyConvolutionFilter2D(ConvolutionTargetExt target, PixelInternalFormat internalformat, int x, int y, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, x, y, width, height, GL.EntryPoints[304]);
			}

			// Token: 0x06001EDF RID: 7903 RVA: 0x00055164 File Offset: 0x00053364
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public static void CopyConvolutionFilter2D(ExtConvolution target, PixelInternalFormat internalformat, int x, int y, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, x, y, width, height, GL.EntryPoints[304]);
			}

			// Token: 0x06001EE0 RID: 7904 RVA: 0x00055180 File Offset: 0x00053380
			public static void CopyMultiTexImage1D(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int border)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texunit, target, level, internalformat, x, y, width, border, GL.EntryPoints[307]);
			}

			// Token: 0x06001EE1 RID: 7905 RVA: 0x000551AC File Offset: 0x000533AC
			public static void CopyMultiTexImage2D(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int height, int border)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texunit, target, level, internalformat, x, y, width, height, border, GL.EntryPoints[308]);
			}

			// Token: 0x06001EE2 RID: 7906 RVA: 0x000551D8 File Offset: 0x000533D8
			public static void CopyMultiTexSubImage1D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int x, int y, int width)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texunit, target, level, xoffset, x, y, width, GL.EntryPoints[309]);
			}

			// Token: 0x06001EE3 RID: 7907 RVA: 0x00055200 File Offset: 0x00053400
			public static void CopyMultiTexSubImage2D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texunit, target, level, xoffset, yoffset, x, y, width, height, GL.EntryPoints[310]);
			}

			// Token: 0x06001EE4 RID: 7908 RVA: 0x0005522C File Offset: 0x0005342C
			public static void CopyMultiTexSubImage3D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height, GL.EntryPoints[311]);
			}

			// Token: 0x06001EE5 RID: 7909 RVA: 0x0005525C File Offset: 0x0005345C
			public static void CopyTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int border)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, internalformat, x, y, width, border, GL.EntryPoints[315]);
			}

			// Token: 0x06001EE6 RID: 7910 RVA: 0x00055284 File Offset: 0x00053484
			public static void CopyTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int height, int border)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, internalformat, x, y, width, height, border, GL.EntryPoints[317]);
			}

			// Token: 0x06001EE7 RID: 7911 RVA: 0x000552B0 File Offset: 0x000534B0
			public static void CopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, xoffset, x, y, width, GL.EntryPoints[319]);
			}

			// Token: 0x06001EE8 RID: 7912 RVA: 0x000552CC File Offset: 0x000534CC
			public static void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, xoffset, yoffset, x, y, width, height, GL.EntryPoints[321]);
			}

			// Token: 0x06001EE9 RID: 7913 RVA: 0x000552F8 File Offset: 0x000534F8
			public static void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, xoffset, yoffset, zoffset, x, y, width, height, GL.EntryPoints[323]);
			}

			// Token: 0x06001EEA RID: 7914 RVA: 0x00055324 File Offset: 0x00053524
			[CLSCompliant(false)]
			public static void CopyTextureImage1D(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int border)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, level, internalformat, x, y, width, border, GL.EntryPoints[324]);
			}

			// Token: 0x06001EEB RID: 7915 RVA: 0x00055350 File Offset: 0x00053550
			[CLSCompliant(false)]
			public static void CopyTextureImage1D(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int border)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, level, internalformat, x, y, width, border, GL.EntryPoints[324]);
			}

			// Token: 0x06001EEC RID: 7916 RVA: 0x0005537C File Offset: 0x0005357C
			[CLSCompliant(false)]
			public static void CopyTextureImage2D(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int height, int border)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, level, internalformat, x, y, width, height, border, GL.EntryPoints[325]);
			}

			// Token: 0x06001EED RID: 7917 RVA: 0x000553A8 File Offset: 0x000535A8
			[CLSCompliant(false)]
			public static void CopyTextureImage2D(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int height, int border)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, level, internalformat, x, y, width, height, border, GL.EntryPoints[325]);
			}

			// Token: 0x06001EEE RID: 7918 RVA: 0x000553D4 File Offset: 0x000535D4
			[CLSCompliant(false)]
			public static void CopyTextureSubImage1D(int texture, TextureTarget target, int level, int xoffset, int x, int y, int width)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, level, xoffset, x, y, width, GL.EntryPoints[326]);
			}

			// Token: 0x06001EEF RID: 7919 RVA: 0x000553FC File Offset: 0x000535FC
			[CLSCompliant(false)]
			public static void CopyTextureSubImage1D(uint texture, TextureTarget target, int level, int xoffset, int x, int y, int width)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, level, xoffset, x, y, width, GL.EntryPoints[326]);
			}

			// Token: 0x06001EF0 RID: 7920 RVA: 0x00055424 File Offset: 0x00053624
			[CLSCompliant(false)]
			public static void CopyTextureSubImage2D(int texture, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, level, xoffset, yoffset, x, y, width, height, GL.EntryPoints[327]);
			}

			// Token: 0x06001EF1 RID: 7921 RVA: 0x00055450 File Offset: 0x00053650
			[CLSCompliant(false)]
			public static void CopyTextureSubImage2D(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, level, xoffset, yoffset, x, y, width, height, GL.EntryPoints[327]);
			}

			// Token: 0x06001EF2 RID: 7922 RVA: 0x0005547C File Offset: 0x0005367C
			[CLSCompliant(false)]
			public static void CopyTextureSubImage3D(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, level, xoffset, yoffset, zoffset, x, y, width, height, GL.EntryPoints[328]);
			}

			// Token: 0x06001EF3 RID: 7923 RVA: 0x000554AC File Offset: 0x000536AC
			[CLSCompliant(false)]
			public static void CopyTextureSubImage3D(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, level, xoffset, yoffset, zoffset, x, y, width, height, GL.EntryPoints[328]);
			}

			// Token: 0x06001EF4 RID: 7924 RVA: 0x000554DC File Offset: 0x000536DC
			public static int CreateShaderProgram(ExtSeparateShaderObjects type, string @string)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(@string);
				int result = calli(System.Int32(System.Int32,System.IntPtr), type, intPtr, GL.EntryPoints[338]);
				BindingsBase.FreeStringPtr(intPtr);
				return result;
			}

			// Token: 0x06001EF5 RID: 7925 RVA: 0x00055508 File Offset: 0x00053708
			public static int CreateShaderProgram(ExtSeparateShaderObjects type, int count, string[] strings)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(strings);
				int result = calli(System.Int32(System.Int32,System.Int32,System.IntPtr), type, count, intPtr, GL.EntryPoints[340]);
				BindingsBase.FreeStringArrayPtr(intPtr, strings.Length);
				return result;
			}

			// Token: 0x06001EF6 RID: 7926 RVA: 0x00055538 File Offset: 0x00053738
			[CLSCompliant(false)]
			public unsafe static void CullParameter(ExtCullVertex pname, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Double*), pname, ptr, GL.EntryPoints[343]);
				}
			}

			// Token: 0x06001EF7 RID: 7927 RVA: 0x0005556C File Offset: 0x0005376C
			[CLSCompliant(false)]
			public unsafe static void CullParameter(ExtCullVertex pname, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Double*), pname, ptr, GL.EntryPoints[343]);
				}
			}

			// Token: 0x06001EF8 RID: 7928 RVA: 0x00055590 File Offset: 0x00053790
			[CLSCompliant(false)]
			public unsafe static void CullParameter(ExtCullVertex pname, [Out] double* @params)
			{
				calli(System.Void(System.Int32,System.Double*), pname, @params, GL.EntryPoints[343]);
			}

			// Token: 0x06001EF9 RID: 7929 RVA: 0x000555A4 File Offset: 0x000537A4
			[CLSCompliant(false)]
			public unsafe static void CullParameter(ExtCullVertex pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[344]);
				}
			}

			// Token: 0x06001EFA RID: 7930 RVA: 0x000555D8 File Offset: 0x000537D8
			[CLSCompliant(false)]
			public unsafe static void CullParameter(ExtCullVertex pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[344]);
				}
			}

			// Token: 0x06001EFB RID: 7931 RVA: 0x000555FC File Offset: 0x000537FC
			[CLSCompliant(false)]
			public unsafe static void CullParameter(ExtCullVertex pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Single*), pname, @params, GL.EntryPoints[344]);
			}

			// Token: 0x06001EFC RID: 7932 RVA: 0x00055610 File Offset: 0x00053810
			[CLSCompliant(false)]
			public static void DeleteFramebuffer(int framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref framebuffers, GL.EntryPoints[368]);
			}

			// Token: 0x06001EFD RID: 7933 RVA: 0x00055628 File Offset: 0x00053828
			[CLSCompliant(false)]
			public static void DeleteFramebuffer(uint framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref framebuffers, GL.EntryPoints[368]);
			}

			// Token: 0x06001EFE RID: 7934 RVA: 0x00055640 File Offset: 0x00053840
			[CLSCompliant(false)]
			public unsafe static void DeleteFramebuffers(int n, int[] framebuffers)
			{
				fixed (int* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[368]);
				}
			}

			// Token: 0x06001EFF RID: 7935 RVA: 0x00055674 File Offset: 0x00053874
			[CLSCompliant(false)]
			public unsafe static void DeleteFramebuffers(int n, ref int framebuffers)
			{
				fixed (int* ptr = &framebuffers)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[368]);
				}
			}

			// Token: 0x06001F00 RID: 7936 RVA: 0x00055698 File Offset: 0x00053898
			[CLSCompliant(false)]
			public unsafe static void DeleteFramebuffers(int n, int* framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, framebuffers, GL.EntryPoints[368]);
			}

			// Token: 0x06001F01 RID: 7937 RVA: 0x000556AC File Offset: 0x000538AC
			[CLSCompliant(false)]
			public unsafe static void DeleteFramebuffers(int n, uint[] framebuffers)
			{
				fixed (uint* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[368]);
				}
			}

			// Token: 0x06001F02 RID: 7938 RVA: 0x000556E0 File Offset: 0x000538E0
			[CLSCompliant(false)]
			public unsafe static void DeleteFramebuffers(int n, ref uint framebuffers)
			{
				fixed (uint* ptr = &framebuffers)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[368]);
				}
			}

			// Token: 0x06001F03 RID: 7939 RVA: 0x00055704 File Offset: 0x00053904
			[CLSCompliant(false)]
			public unsafe static void DeleteFramebuffers(int n, uint* framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, framebuffers, GL.EntryPoints[368]);
			}

			// Token: 0x06001F04 RID: 7940 RVA: 0x00055718 File Offset: 0x00053918
			[CLSCompliant(false)]
			public static void DeleteProgramPipeline(int pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref pipelines, GL.EntryPoints[379]);
			}

			// Token: 0x06001F05 RID: 7941 RVA: 0x00055730 File Offset: 0x00053930
			[CLSCompliant(false)]
			public static void DeleteProgramPipeline(uint pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref pipelines, GL.EntryPoints[379]);
			}

			// Token: 0x06001F06 RID: 7942 RVA: 0x00055748 File Offset: 0x00053948
			[CLSCompliant(false)]
			public unsafe static void DeleteProgramPipelines(int n, int[] pipelines)
			{
				fixed (int* ptr = ref (pipelines != null && pipelines.Length != 0) ? ref pipelines[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[379]);
				}
			}

			// Token: 0x06001F07 RID: 7943 RVA: 0x0005577C File Offset: 0x0005397C
			[CLSCompliant(false)]
			public unsafe static void DeleteProgramPipelines(int n, ref int pipelines)
			{
				fixed (int* ptr = &pipelines)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[379]);
				}
			}

			// Token: 0x06001F08 RID: 7944 RVA: 0x000557A0 File Offset: 0x000539A0
			[CLSCompliant(false)]
			public unsafe static void DeleteProgramPipelines(int n, int* pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, pipelines, GL.EntryPoints[379]);
			}

			// Token: 0x06001F09 RID: 7945 RVA: 0x000557B4 File Offset: 0x000539B4
			[CLSCompliant(false)]
			public unsafe static void DeleteProgramPipelines(int n, uint[] pipelines)
			{
				fixed (uint* ptr = ref (pipelines != null && pipelines.Length != 0) ? ref pipelines[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[379]);
				}
			}

			// Token: 0x06001F0A RID: 7946 RVA: 0x000557E8 File Offset: 0x000539E8
			[CLSCompliant(false)]
			public unsafe static void DeleteProgramPipelines(int n, ref uint pipelines)
			{
				fixed (uint* ptr = &pipelines)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[379]);
				}
			}

			// Token: 0x06001F0B RID: 7947 RVA: 0x0005580C File Offset: 0x00053A0C
			[CLSCompliant(false)]
			public unsafe static void DeleteProgramPipelines(int n, uint* pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, pipelines, GL.EntryPoints[379]);
			}

			// Token: 0x06001F0C RID: 7948 RVA: 0x00055820 File Offset: 0x00053A20
			[CLSCompliant(false)]
			public static void DeleteRenderbuffer(int renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref renderbuffers, GL.EntryPoints[385]);
			}

			// Token: 0x06001F0D RID: 7949 RVA: 0x00055838 File Offset: 0x00053A38
			[CLSCompliant(false)]
			public static void DeleteRenderbuffer(uint renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref renderbuffers, GL.EntryPoints[385]);
			}

			// Token: 0x06001F0E RID: 7950 RVA: 0x00055850 File Offset: 0x00053A50
			[CLSCompliant(false)]
			public unsafe static void DeleteRenderbuffers(int n, int[] renderbuffers)
			{
				fixed (int* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[385]);
				}
			}

			// Token: 0x06001F0F RID: 7951 RVA: 0x00055884 File Offset: 0x00053A84
			[CLSCompliant(false)]
			public unsafe static void DeleteRenderbuffers(int n, ref int renderbuffers)
			{
				fixed (int* ptr = &renderbuffers)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[385]);
				}
			}

			// Token: 0x06001F10 RID: 7952 RVA: 0x000558A8 File Offset: 0x00053AA8
			[CLSCompliant(false)]
			public unsafe static void DeleteRenderbuffers(int n, int* renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, renderbuffers, GL.EntryPoints[385]);
			}

			// Token: 0x06001F11 RID: 7953 RVA: 0x000558BC File Offset: 0x00053ABC
			[CLSCompliant(false)]
			public unsafe static void DeleteRenderbuffers(int n, uint[] renderbuffers)
			{
				fixed (uint* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[385]);
				}
			}

			// Token: 0x06001F12 RID: 7954 RVA: 0x000558F0 File Offset: 0x00053AF0
			[CLSCompliant(false)]
			public unsafe static void DeleteRenderbuffers(int n, ref uint renderbuffers)
			{
				fixed (uint* ptr = &renderbuffers)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[385]);
				}
			}

			// Token: 0x06001F13 RID: 7955 RVA: 0x00055914 File Offset: 0x00053B14
			[CLSCompliant(false)]
			public unsafe static void DeleteRenderbuffers(int n, uint* renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, renderbuffers, GL.EntryPoints[385]);
			}

			// Token: 0x06001F14 RID: 7956 RVA: 0x00055928 File Offset: 0x00053B28
			[CLSCompliant(false)]
			public static void DeleteTexture(int textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref textures, GL.EntryPoints[390]);
			}

			// Token: 0x06001F15 RID: 7957 RVA: 0x00055940 File Offset: 0x00053B40
			[CLSCompliant(false)]
			public static void DeleteTexture(uint textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref textures, GL.EntryPoints[390]);
			}

			// Token: 0x06001F16 RID: 7958 RVA: 0x00055958 File Offset: 0x00053B58
			[CLSCompliant(false)]
			public unsafe static void DeleteTextures(int n, int[] textures)
			{
				fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[390]);
				}
			}

			// Token: 0x06001F17 RID: 7959 RVA: 0x0005598C File Offset: 0x00053B8C
			[CLSCompliant(false)]
			public unsafe static void DeleteTextures(int n, ref int textures)
			{
				fixed (int* ptr = &textures)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[390]);
				}
			}

			// Token: 0x06001F18 RID: 7960 RVA: 0x000559B0 File Offset: 0x00053BB0
			[CLSCompliant(false)]
			public unsafe static void DeleteTextures(int n, int* textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, textures, GL.EntryPoints[390]);
			}

			// Token: 0x06001F19 RID: 7961 RVA: 0x000559C4 File Offset: 0x00053BC4
			[CLSCompliant(false)]
			public unsafe static void DeleteTextures(int n, uint[] textures)
			{
				fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[390]);
				}
			}

			// Token: 0x06001F1A RID: 7962 RVA: 0x000559F8 File Offset: 0x00053BF8
			[CLSCompliant(false)]
			public unsafe static void DeleteTextures(int n, ref uint textures)
			{
				fixed (uint* ptr = &textures)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[390]);
				}
			}

			// Token: 0x06001F1B RID: 7963 RVA: 0x00055A1C File Offset: 0x00053C1C
			[CLSCompliant(false)]
			public unsafe static void DeleteTextures(int n, uint* textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, textures, GL.EntryPoints[390]);
			}

			// Token: 0x06001F1C RID: 7964 RVA: 0x00055A30 File Offset: 0x00053C30
			[CLSCompliant(false)]
			public static void DeleteVertexShader(int id)
			{
				calli(System.Void(System.UInt32), id, GL.EntryPoints[395]);
			}

			// Token: 0x06001F1D RID: 7965 RVA: 0x00055A44 File Offset: 0x00053C44
			[CLSCompliant(false)]
			public static void DeleteVertexShader(uint id)
			{
				calli(System.Void(System.UInt32), id, GL.EntryPoints[395]);
			}

			// Token: 0x06001F1E RID: 7966 RVA: 0x00055A58 File Offset: 0x00053C58
			public static void DepthBounds(double zmin, double zmax)
			{
				calli(System.Void(System.Double,System.Double), zmin, zmax, GL.EntryPoints[397]);
			}

			// Token: 0x06001F1F RID: 7967 RVA: 0x00055A6C File Offset: 0x00053C6C
			[CLSCompliant(false)]
			public static void DisableClientState(ArrayCap array, int index)
			{
				calli(System.Void(System.Int32,System.UInt32), array, index, GL.EntryPoints[412]);
			}

			// Token: 0x06001F20 RID: 7968 RVA: 0x00055A80 File Offset: 0x00053C80
			[CLSCompliant(false)]
			public static void DisableClientState(ArrayCap array, uint index)
			{
				calli(System.Void(System.Int32,System.UInt32), array, index, GL.EntryPoints[412]);
			}

			// Token: 0x06001F21 RID: 7969 RVA: 0x00055A94 File Offset: 0x00053C94
			[CLSCompliant(false)]
			public static void DisableClientStateIndexed(ArrayCap array, int index)
			{
				calli(System.Void(System.Int32,System.UInt32), array, index, GL.EntryPoints[413]);
			}

			// Token: 0x06001F22 RID: 7970 RVA: 0x00055AA8 File Offset: 0x00053CA8
			[CLSCompliant(false)]
			public static void DisableClientStateIndexed(ArrayCap array, uint index)
			{
				calli(System.Void(System.Int32,System.UInt32), array, index, GL.EntryPoints[413]);
			}

			// Token: 0x06001F23 RID: 7971 RVA: 0x00055ABC File Offset: 0x00053CBC
			[Obsolete("Use ArrayCap overload instead")]
			[CLSCompliant(false)]
			public static void DisableClientStateIndexed(EnableCap array, int index)
			{
				calli(System.Void(System.Int32,System.UInt32), array, index, GL.EntryPoints[413]);
			}

			// Token: 0x06001F24 RID: 7972 RVA: 0x00055AD0 File Offset: 0x00053CD0
			[Obsolete("Use ArrayCap overload instead")]
			[CLSCompliant(false)]
			public static void DisableClientStateIndexed(EnableCap array, uint index)
			{
				calli(System.Void(System.Int32,System.UInt32), array, index, GL.EntryPoints[413]);
			}

			// Token: 0x06001F25 RID: 7973 RVA: 0x00055AE4 File Offset: 0x00053CE4
			[Obsolete("Use IndexedEnableCap overload instead")]
			[CLSCompliant(false)]
			public static void DisableIndexed(ExtDrawBuffers2 target, int index)
			{
				calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[415]);
			}

			// Token: 0x06001F26 RID: 7974 RVA: 0x00055AF8 File Offset: 0x00053CF8
			[CLSCompliant(false)]
			[Obsolete("Use IndexedEnableCap overload instead")]
			public static void DisableIndexed(ExtDrawBuffers2 target, uint index)
			{
				calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[415]);
			}

			// Token: 0x06001F27 RID: 7975 RVA: 0x00055B0C File Offset: 0x00053D0C
			[CLSCompliant(false)]
			public static void DisableIndexed(IndexedEnableCap target, int index)
			{
				calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[415]);
			}

			// Token: 0x06001F28 RID: 7976 RVA: 0x00055B20 File Offset: 0x00053D20
			[CLSCompliant(false)]
			public static void DisableIndexed(IndexedEnableCap target, uint index)
			{
				calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[415]);
			}

			// Token: 0x06001F29 RID: 7977 RVA: 0x00055B34 File Offset: 0x00053D34
			[CLSCompliant(false)]
			public static void DisableVariantClientState(int id)
			{
				calli(System.Void(System.UInt32), id, GL.EntryPoints[416]);
			}

			// Token: 0x06001F2A RID: 7978 RVA: 0x00055B48 File Offset: 0x00053D48
			[CLSCompliant(false)]
			public static void DisableVariantClientState(uint id)
			{
				calli(System.Void(System.UInt32), id, GL.EntryPoints[416]);
			}

			// Token: 0x06001F2B RID: 7979 RVA: 0x00055B5C File Offset: 0x00053D5C
			[CLSCompliant(false)]
			public static void DisableVertexArrayAttrib(int vaobj, int index)
			{
				calli(System.Void(System.UInt32,System.UInt32), vaobj, index, GL.EntryPoints[417]);
			}

			// Token: 0x06001F2C RID: 7980 RVA: 0x00055B70 File Offset: 0x00053D70
			[CLSCompliant(false)]
			public static void DisableVertexArrayAttrib(uint vaobj, uint index)
			{
				calli(System.Void(System.UInt32,System.UInt32), vaobj, index, GL.EntryPoints[417]);
			}

			// Token: 0x06001F2D RID: 7981 RVA: 0x00055B84 File Offset: 0x00053D84
			[CLSCompliant(false)]
			public static void DisableVertexArray(int vaobj, EnableCap array)
			{
				calli(System.Void(System.UInt32,System.Int32), vaobj, array, GL.EntryPoints[418]);
			}

			// Token: 0x06001F2E RID: 7982 RVA: 0x00055B98 File Offset: 0x00053D98
			[CLSCompliant(false)]
			public static void DisableVertexArray(uint vaobj, EnableCap array)
			{
				calli(System.Void(System.UInt32,System.Int32), vaobj, array, GL.EntryPoints[418]);
			}

			// Token: 0x06001F2F RID: 7983 RVA: 0x00055BAC File Offset: 0x00053DAC
			[Obsolete("Use PrimitiveType overload instead")]
			public static void DrawArrays(BeginMode mode, int first, int count)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), mode, first, count, GL.EntryPoints[426]);
			}

			// Token: 0x06001F30 RID: 7984 RVA: 0x00055BC4 File Offset: 0x00053DC4
			public static void DrawArrays(PrimitiveType mode, int first, int count)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), mode, first, count, GL.EntryPoints[426]);
			}

			// Token: 0x06001F31 RID: 7985 RVA: 0x00055BDC File Offset: 0x00053DDC
			[Obsolete("Use PrimitiveType overload instead")]
			public static void DrawArraysInstanced(BeginMode mode, int start, int count, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, start, count, primcount, GL.EntryPoints[431]);
			}

			// Token: 0x06001F32 RID: 7986 RVA: 0x00055BF4 File Offset: 0x00053DF4
			public static void DrawArraysInstanced(PrimitiveType mode, int start, int count, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, start, count, primcount, GL.EntryPoints[431]);
			}

			// Token: 0x06001F33 RID: 7987 RVA: 0x00055C0C File Offset: 0x00053E0C
			[Obsolete("Use PrimitiveType overload instead")]
			public static void DrawElementsInstanced(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, primcount, GL.EntryPoints[446]);
			}

			// Token: 0x06001F34 RID: 7988 RVA: 0x00055C24 File Offset: 0x00053E24
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[446]);
				}
			}

			// Token: 0x06001F35 RID: 7989 RVA: 0x00055C5C File Offset: 0x00053E5C
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[446]);
				}
			}

			// Token: 0x06001F36 RID: 7990 RVA: 0x00055C98 File Offset: 0x00053E98
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[446]);
				}
			}

			// Token: 0x06001F37 RID: 7991 RVA: 0x00055CD8 File Offset: 0x00053ED8
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[446]);
				}
			}

			// Token: 0x06001F38 RID: 7992 RVA: 0x00055D00 File Offset: 0x00053F00
			public static void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, primcount, GL.EntryPoints[446]);
			}

			// Token: 0x06001F39 RID: 7993 RVA: 0x00055D18 File Offset: 0x00053F18
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[446]);
				}
			}

			// Token: 0x06001F3A RID: 7994 RVA: 0x00055D50 File Offset: 0x00053F50
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[446]);
				}
			}

			// Token: 0x06001F3B RID: 7995 RVA: 0x00055D8C File Offset: 0x00053F8C
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[446]);
				}
			}

			// Token: 0x06001F3C RID: 7996 RVA: 0x00055DCC File Offset: 0x00053FCC
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[446]);
				}
			}

			// Token: 0x06001F3D RID: 7997 RVA: 0x00055DF4 File Offset: 0x00053FF4
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public static void DrawRangeElements(BeginMode mode, int start, int end, int count, DrawElementsType type, IntPtr indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, indices, GL.EntryPoints[453]);
			}

			// Token: 0x06001F3E RID: 7998 RVA: 0x00055E10 File Offset: 0x00054010
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DrawRangeElements<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[] indices) where T5 : struct
			{
				fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06001F3F RID: 7999 RVA: 0x00055E4C File Offset: 0x0005404C
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void DrawRangeElements<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,] indices) where T5 : struct
			{
				fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06001F40 RID: 8000 RVA: 0x00055E8C File Offset: 0x0005408C
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void DrawRangeElements<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,,] indices) where T5 : struct
			{
				fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06001F41 RID: 8001 RVA: 0x00055ED0 File Offset: 0x000540D0
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void DrawRangeElements<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In] [Out] ref T5 indices) where T5 : struct
			{
				fixed (T5* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06001F42 RID: 8002 RVA: 0x00055EF8 File Offset: 0x000540F8
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public static void DrawRangeElements(BeginMode mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, indices, GL.EntryPoints[453]);
			}

			// Token: 0x06001F43 RID: 8003 RVA: 0x00055F14 File Offset: 0x00054114
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void DrawRangeElements<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[] indices) where T5 : struct
			{
				fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06001F44 RID: 8004 RVA: 0x00055F50 File Offset: 0x00054150
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void DrawRangeElements<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,] indices) where T5 : struct
			{
				fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06001F45 RID: 8005 RVA: 0x00055F90 File Offset: 0x00054190
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void DrawRangeElements<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,,] indices) where T5 : struct
			{
				fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06001F46 RID: 8006 RVA: 0x00055FD4 File Offset: 0x000541D4
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void DrawRangeElements<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] ref T5 indices) where T5 : struct
			{
				fixed (T5* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06001F47 RID: 8007 RVA: 0x00055FFC File Offset: 0x000541FC
			[CLSCompliant(false)]
			public static void DrawRangeElements(PrimitiveType mode, int start, int end, int count, DrawElementsType type, IntPtr indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, indices, GL.EntryPoints[453]);
			}

			// Token: 0x06001F48 RID: 8008 RVA: 0x00056018 File Offset: 0x00054218
			[CLSCompliant(false)]
			public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[] indices) where T5 : struct
			{
				fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06001F49 RID: 8009 RVA: 0x00056054 File Offset: 0x00054254
			[CLSCompliant(false)]
			public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,] indices) where T5 : struct
			{
				fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06001F4A RID: 8010 RVA: 0x00056094 File Offset: 0x00054294
			[CLSCompliant(false)]
			public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,,] indices) where T5 : struct
			{
				fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06001F4B RID: 8011 RVA: 0x000560D8 File Offset: 0x000542D8
			[CLSCompliant(false)]
			public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] ref T5 indices) where T5 : struct
			{
				fixed (T5* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06001F4C RID: 8012 RVA: 0x00056100 File Offset: 0x00054300
			[CLSCompliant(false)]
			public static void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, indices, GL.EntryPoints[453]);
			}

			// Token: 0x06001F4D RID: 8013 RVA: 0x0005611C File Offset: 0x0005431C
			[CLSCompliant(false)]
			public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[] indices) where T5 : struct
			{
				fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06001F4E RID: 8014 RVA: 0x00056158 File Offset: 0x00054358
			[CLSCompliant(false)]
			public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,] indices) where T5 : struct
			{
				fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06001F4F RID: 8015 RVA: 0x00056198 File Offset: 0x00054398
			[CLSCompliant(false)]
			public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,,] indices) where T5 : struct
			{
				fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06001F50 RID: 8016 RVA: 0x000561DC File Offset: 0x000543DC
			[CLSCompliant(false)]
			public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] ref T5 indices) where T5 : struct
			{
				fixed (T5* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06001F51 RID: 8017 RVA: 0x00056204 File Offset: 0x00054404
			[CLSCompliant(false)]
			public unsafe static void EdgeFlagPointer(int stride, int count, bool[] pointer)
			{
				fixed (bool* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean*), stride, count, ptr, GL.EntryPoints[463]);
				}
			}

			// Token: 0x06001F52 RID: 8018 RVA: 0x0005623C File Offset: 0x0005443C
			[CLSCompliant(false)]
			public unsafe static void EdgeFlagPointer(int stride, int count, ref bool pointer)
			{
				fixed (bool* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean*), stride, count, ptr, GL.EntryPoints[463]);
				}
			}

			// Token: 0x06001F53 RID: 8019 RVA: 0x00056260 File Offset: 0x00054460
			[CLSCompliant(false)]
			public unsafe static void EdgeFlagPointer(int stride, int count, bool* pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean*), stride, count, pointer, GL.EntryPoints[463]);
			}

			// Token: 0x06001F54 RID: 8020 RVA: 0x00056278 File Offset: 0x00054478
			[CLSCompliant(false)]
			public static void EnableClientState(ArrayCap array, int index)
			{
				calli(System.Void(System.Int32,System.UInt32), array, index, GL.EntryPoints[470]);
			}

			// Token: 0x06001F55 RID: 8021 RVA: 0x0005628C File Offset: 0x0005448C
			[CLSCompliant(false)]
			public static void EnableClientState(ArrayCap array, uint index)
			{
				calli(System.Void(System.Int32,System.UInt32), array, index, GL.EntryPoints[470]);
			}

			// Token: 0x06001F56 RID: 8022 RVA: 0x000562A0 File Offset: 0x000544A0
			[CLSCompliant(false)]
			public static void EnableClientStateIndexed(ArrayCap array, int index)
			{
				calli(System.Void(System.Int32,System.UInt32), array, index, GL.EntryPoints[471]);
			}

			// Token: 0x06001F57 RID: 8023 RVA: 0x000562B4 File Offset: 0x000544B4
			[CLSCompliant(false)]
			public static void EnableClientStateIndexed(ArrayCap array, uint index)
			{
				calli(System.Void(System.Int32,System.UInt32), array, index, GL.EntryPoints[471]);
			}

			// Token: 0x06001F58 RID: 8024 RVA: 0x000562C8 File Offset: 0x000544C8
			[CLSCompliant(false)]
			[Obsolete("Use ArrayCap overload instead")]
			public static void EnableClientStateIndexed(EnableCap array, int index)
			{
				calli(System.Void(System.Int32,System.UInt32), array, index, GL.EntryPoints[471]);
			}

			// Token: 0x06001F59 RID: 8025 RVA: 0x000562DC File Offset: 0x000544DC
			[CLSCompliant(false)]
			[Obsolete("Use ArrayCap overload instead")]
			public static void EnableClientStateIndexed(EnableCap array, uint index)
			{
				calli(System.Void(System.Int32,System.UInt32), array, index, GL.EntryPoints[471]);
			}

			// Token: 0x06001F5A RID: 8026 RVA: 0x000562F0 File Offset: 0x000544F0
			[Obsolete("Use IndexedEnableCap overload instead")]
			[CLSCompliant(false)]
			public static void EnableIndexed(ExtDrawBuffers2 target, int index)
			{
				calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[473]);
			}

			// Token: 0x06001F5B RID: 8027 RVA: 0x00056304 File Offset: 0x00054504
			[CLSCompliant(false)]
			[Obsolete("Use IndexedEnableCap overload instead")]
			public static void EnableIndexed(ExtDrawBuffers2 target, uint index)
			{
				calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[473]);
			}

			// Token: 0x06001F5C RID: 8028 RVA: 0x00056318 File Offset: 0x00054518
			[CLSCompliant(false)]
			public static void EnableIndexed(IndexedEnableCap target, int index)
			{
				calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[473]);
			}

			// Token: 0x06001F5D RID: 8029 RVA: 0x0005632C File Offset: 0x0005452C
			[CLSCompliant(false)]
			public static void EnableIndexed(IndexedEnableCap target, uint index)
			{
				calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[473]);
			}

			// Token: 0x06001F5E RID: 8030 RVA: 0x00056340 File Offset: 0x00054540
			[CLSCompliant(false)]
			public static void EnableVariantClientState(int id)
			{
				calli(System.Void(System.UInt32), id, GL.EntryPoints[474]);
			}

			// Token: 0x06001F5F RID: 8031 RVA: 0x00056354 File Offset: 0x00054554
			[CLSCompliant(false)]
			public static void EnableVariantClientState(uint id)
			{
				calli(System.Void(System.UInt32), id, GL.EntryPoints[474]);
			}

			// Token: 0x06001F60 RID: 8032 RVA: 0x00056368 File Offset: 0x00054568
			[CLSCompliant(false)]
			public static void EnableVertexArrayAttrib(int vaobj, int index)
			{
				calli(System.Void(System.UInt32,System.UInt32), vaobj, index, GL.EntryPoints[475]);
			}

			// Token: 0x06001F61 RID: 8033 RVA: 0x0005637C File Offset: 0x0005457C
			[CLSCompliant(false)]
			public static void EnableVertexArrayAttrib(uint vaobj, uint index)
			{
				calli(System.Void(System.UInt32,System.UInt32), vaobj, index, GL.EntryPoints[475]);
			}

			// Token: 0x06001F62 RID: 8034 RVA: 0x00056390 File Offset: 0x00054590
			[CLSCompliant(false)]
			public static void EnableVertexArray(int vaobj, EnableCap array)
			{
				calli(System.Void(System.UInt32,System.Int32), vaobj, array, GL.EntryPoints[476]);
			}

			// Token: 0x06001F63 RID: 8035 RVA: 0x000563A4 File Offset: 0x000545A4
			[CLSCompliant(false)]
			public static void EnableVertexArray(uint vaobj, EnableCap array)
			{
				calli(System.Void(System.UInt32,System.Int32), vaobj, array, GL.EntryPoints[476]);
			}

			// Token: 0x06001F64 RID: 8036 RVA: 0x000563B8 File Offset: 0x000545B8
			public static void EndTransformFeedback()
			{
				calli(System.Void(), GL.EntryPoints[493]);
			}

			// Token: 0x06001F65 RID: 8037 RVA: 0x000563CC File Offset: 0x000545CC
			public static void EndVertexShader()
			{
				calli(System.Void(), GL.EntryPoints[495]);
			}

			// Token: 0x06001F66 RID: 8038 RVA: 0x000563E0 File Offset: 0x000545E0
			[CLSCompliant(false)]
			public static void ExtractComponent(int res, int src, int num)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32), res, src, num, GL.EntryPoints[515]);
			}

			// Token: 0x06001F67 RID: 8039 RVA: 0x000563F8 File Offset: 0x000545F8
			[CLSCompliant(false)]
			public static void ExtractComponent(uint res, uint src, uint num)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32), res, src, num, GL.EntryPoints[515]);
			}

			// Token: 0x06001F68 RID: 8040 RVA: 0x00056410 File Offset: 0x00054610
			[CLSCompliant(false)]
			public static void FlushMappedNamedBufferRange(int buffer, IntPtr offset, IntPtr length)
			{
				calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr), buffer, offset, length, GL.EntryPoints[529]);
			}

			// Token: 0x06001F69 RID: 8041 RVA: 0x00056428 File Offset: 0x00054628
			[CLSCompliant(false)]
			public static void FlushMappedNamedBufferRange(uint buffer, IntPtr offset, IntPtr length)
			{
				calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr), buffer, offset, length, GL.EntryPoints[529]);
			}

			// Token: 0x06001F6A RID: 8042 RVA: 0x00056440 File Offset: 0x00054640
			public static void FogCoord(double coord)
			{
				calli(System.Void(System.Double), coord, GL.EntryPoints[536]);
			}

			// Token: 0x06001F6B RID: 8043 RVA: 0x00056454 File Offset: 0x00054654
			[CLSCompliant(false)]
			public unsafe static void FogCoord(double* coord)
			{
				calli(System.Void(System.Double*), coord, GL.EntryPoints[538]);
			}

			// Token: 0x06001F6C RID: 8044 RVA: 0x00056468 File Offset: 0x00054668
			public static void FogCoord(float coord)
			{
				calli(System.Void(System.Single), coord, GL.EntryPoints[540]);
			}

			// Token: 0x06001F6D RID: 8045 RVA: 0x0005647C File Offset: 0x0005467C
			[CLSCompliant(false)]
			public unsafe static void FogCoord(float* coord)
			{
				calli(System.Void(System.Single*), coord, GL.EntryPoints[543]);
			}

			// Token: 0x06001F6E RID: 8046 RVA: 0x00056490 File Offset: 0x00054690
			[Obsolete("Use FogPointerTypeExt overload instead")]
			public static void FogCoordPointer(ExtFogCoord type, int stride, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, pointer, GL.EntryPoints[547]);
			}

			// Token: 0x06001F6F RID: 8047 RVA: 0x000564A8 File Offset: 0x000546A8
			[CLSCompliant(false)]
			[Obsolete("Use FogPointerTypeExt overload instead")]
			public unsafe static void FogCoordPointer<T2>(ExtFogCoord type, int stride, [In] [Out] T2[] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[547]);
				}
			}

			// Token: 0x06001F70 RID: 8048 RVA: 0x000564E0 File Offset: 0x000546E0
			[Obsolete("Use FogPointerTypeExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void FogCoordPointer<T2>(ExtFogCoord type, int stride, [In] [Out] T2[,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[547]);
				}
			}

			// Token: 0x06001F71 RID: 8049 RVA: 0x0005651C File Offset: 0x0005471C
			[CLSCompliant(false)]
			[Obsolete("Use FogPointerTypeExt overload instead")]
			public unsafe static void FogCoordPointer<T2>(ExtFogCoord type, int stride, [In] [Out] T2[,,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[547]);
				}
			}

			// Token: 0x06001F72 RID: 8050 RVA: 0x00056558 File Offset: 0x00054758
			[Obsolete("Use FogPointerTypeExt overload instead")]
			public unsafe static void FogCoordPointer<T2>(ExtFogCoord type, int stride, [In] [Out] ref T2 pointer) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[547]);
				}
			}

			// Token: 0x06001F73 RID: 8051 RVA: 0x0005657C File Offset: 0x0005477C
			public static void FogCoordPointer(FogPointerTypeExt type, int stride, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, pointer, GL.EntryPoints[547]);
			}

			// Token: 0x06001F74 RID: 8052 RVA: 0x00056594 File Offset: 0x00054794
			[CLSCompliant(false)]
			public unsafe static void FogCoordPointer<T2>(FogPointerTypeExt type, int stride, [In] [Out] T2[] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[547]);
				}
			}

			// Token: 0x06001F75 RID: 8053 RVA: 0x000565CC File Offset: 0x000547CC
			[CLSCompliant(false)]
			public unsafe static void FogCoordPointer<T2>(FogPointerTypeExt type, int stride, [In] [Out] T2[,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[547]);
				}
			}

			// Token: 0x06001F76 RID: 8054 RVA: 0x00056608 File Offset: 0x00054808
			[CLSCompliant(false)]
			public unsafe static void FogCoordPointer<T2>(FogPointerTypeExt type, int stride, [In] [Out] T2[,,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[547]);
				}
			}

			// Token: 0x06001F77 RID: 8055 RVA: 0x00056644 File Offset: 0x00054844
			public unsafe static void FogCoordPointer<T2>(FogPointerTypeExt type, int stride, [In] [Out] ref T2 pointer) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[547]);
				}
			}

			// Token: 0x06001F78 RID: 8056 RVA: 0x00056668 File Offset: 0x00054868
			[CLSCompliant(false)]
			public static void FramebufferDrawBuffer(int framebuffer, DrawBufferMode mode)
			{
				calli(System.Void(System.UInt32,System.Int32), framebuffer, mode, GL.EntryPoints[569]);
			}

			// Token: 0x06001F79 RID: 8057 RVA: 0x0005667C File Offset: 0x0005487C
			[CLSCompliant(false)]
			public static void FramebufferDrawBuffer(uint framebuffer, DrawBufferMode mode)
			{
				calli(System.Void(System.UInt32,System.Int32), framebuffer, mode, GL.EntryPoints[569]);
			}

			// Token: 0x06001F7A RID: 8058 RVA: 0x00056690 File Offset: 0x00054890
			[CLSCompliant(false)]
			public unsafe static void FramebufferDrawBuffers(int framebuffer, int n, DrawBufferMode[] bufs)
			{
				fixed (DrawBufferMode* ptr = ref (bufs != null && bufs.Length != 0) ? ref bufs[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, n, ptr, GL.EntryPoints[570]);
				}
			}

			// Token: 0x06001F7B RID: 8059 RVA: 0x000566C8 File Offset: 0x000548C8
			[CLSCompliant(false)]
			public unsafe static void FramebufferDrawBuffers(int framebuffer, int n, ref DrawBufferMode bufs)
			{
				fixed (DrawBufferMode* ptr = &bufs)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, n, ptr, GL.EntryPoints[570]);
				}
			}

			// Token: 0x06001F7C RID: 8060 RVA: 0x000566EC File Offset: 0x000548EC
			[CLSCompliant(false)]
			public unsafe static void FramebufferDrawBuffers(int framebuffer, int n, DrawBufferMode* bufs)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, n, bufs, GL.EntryPoints[570]);
			}

			// Token: 0x06001F7D RID: 8061 RVA: 0x00056704 File Offset: 0x00054904
			[CLSCompliant(false)]
			public unsafe static void FramebufferDrawBuffers(uint framebuffer, int n, DrawBufferMode[] bufs)
			{
				fixed (DrawBufferMode* ptr = ref (bufs != null && bufs.Length != 0) ? ref bufs[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, n, ptr, GL.EntryPoints[570]);
				}
			}

			// Token: 0x06001F7E RID: 8062 RVA: 0x0005673C File Offset: 0x0005493C
			[CLSCompliant(false)]
			public unsafe static void FramebufferDrawBuffers(uint framebuffer, int n, ref DrawBufferMode bufs)
			{
				fixed (DrawBufferMode* ptr = &bufs)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, n, ptr, GL.EntryPoints[570]);
				}
			}

			// Token: 0x06001F7F RID: 8063 RVA: 0x00056760 File Offset: 0x00054960
			[CLSCompliant(false)]
			public unsafe static void FramebufferDrawBuffers(uint framebuffer, int n, DrawBufferMode* bufs)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, n, bufs, GL.EntryPoints[570]);
			}

			// Token: 0x06001F80 RID: 8064 RVA: 0x00056778 File Offset: 0x00054978
			[CLSCompliant(false)]
			public static void FramebufferReadBuffer(int framebuffer, ReadBufferMode mode)
			{
				calli(System.Void(System.UInt32,System.Int32), framebuffer, mode, GL.EntryPoints[572]);
			}

			// Token: 0x06001F81 RID: 8065 RVA: 0x0005678C File Offset: 0x0005498C
			[CLSCompliant(false)]
			public static void FramebufferReadBuffer(uint framebuffer, ReadBufferMode mode)
			{
				calli(System.Void(System.UInt32,System.Int32), framebuffer, mode, GL.EntryPoints[572]);
			}

			// Token: 0x06001F82 RID: 8066 RVA: 0x000567A0 File Offset: 0x000549A0
			[CLSCompliant(false)]
			public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, int renderbuffer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), target, attachment, renderbuffertarget, renderbuffer, GL.EntryPoints[574]);
			}

			// Token: 0x06001F83 RID: 8067 RVA: 0x000567B8 File Offset: 0x000549B8
			[CLSCompliant(false)]
			public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), target, attachment, renderbuffertarget, renderbuffer, GL.EntryPoints[574]);
			}

			// Token: 0x06001F84 RID: 8068 RVA: 0x000567D0 File Offset: 0x000549D0
			[CLSCompliant(false)]
			public static void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, textarget, texture, level, GL.EntryPoints[577]);
			}

			// Token: 0x06001F85 RID: 8069 RVA: 0x000567E8 File Offset: 0x000549E8
			[CLSCompliant(false)]
			public static void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, textarget, texture, level, GL.EntryPoints[577]);
			}

			// Token: 0x06001F86 RID: 8070 RVA: 0x00056800 File Offset: 0x00054A00
			[CLSCompliant(false)]
			public static void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, textarget, texture, level, GL.EntryPoints[579]);
			}

			// Token: 0x06001F87 RID: 8071 RVA: 0x00056818 File Offset: 0x00054A18
			[CLSCompliant(false)]
			public static void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, textarget, texture, level, GL.EntryPoints[579]);
			}

			// Token: 0x06001F88 RID: 8072 RVA: 0x00056830 File Offset: 0x00054A30
			[CLSCompliant(false)]
			public static void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level, int zoffset)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, textarget, texture, level, zoffset, GL.EntryPoints[581]);
			}

			// Token: 0x06001F89 RID: 8073 RVA: 0x0005684C File Offset: 0x00054A4C
			[CLSCompliant(false)]
			public static void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, textarget, texture, level, zoffset, GL.EntryPoints[581]);
			}

			// Token: 0x06001F8A RID: 8074 RVA: 0x00056868 File Offset: 0x00054A68
			[CLSCompliant(false)]
			public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, texture, level, GL.EntryPoints[583]);
			}

			// Token: 0x06001F8B RID: 8075 RVA: 0x00056880 File Offset: 0x00054A80
			[CLSCompliant(false)]
			public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, texture, level, GL.EntryPoints[583]);
			}

			// Token: 0x06001F8C RID: 8076 RVA: 0x00056898 File Offset: 0x00054A98
			[CLSCompliant(false)]
			public static void FramebufferTextureFace(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level, TextureTarget face)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, texture, level, face, GL.EntryPoints[585]);
			}

			// Token: 0x06001F8D RID: 8077 RVA: 0x000568B0 File Offset: 0x00054AB0
			[CLSCompliant(false)]
			public static void FramebufferTextureFace(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, TextureTarget face)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, texture, level, face, GL.EntryPoints[585]);
			}

			// Token: 0x06001F8E RID: 8078 RVA: 0x000568C8 File Offset: 0x00054AC8
			[CLSCompliant(false)]
			public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level, int layer)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, texture, level, layer, GL.EntryPoints[588]);
			}

			// Token: 0x06001F8F RID: 8079 RVA: 0x000568E0 File Offset: 0x00054AE0
			[CLSCompliant(false)]
			public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, texture, level, layer, GL.EntryPoints[588]);
			}

			// Token: 0x06001F90 RID: 8080 RVA: 0x000568F8 File Offset: 0x00054AF8
			public static void GenerateMipmap(GenerateMipmapTarget target)
			{
				calli(System.Void(System.Int32), target, GL.EntryPoints[600]);
			}

			// Token: 0x06001F91 RID: 8081 RVA: 0x0005690C File Offset: 0x00054B0C
			public static void GenerateMultiTexMipmap(TextureUnit texunit, TextureTarget target)
			{
				calli(System.Void(System.Int32,System.Int32), texunit, target, GL.EntryPoints[601]);
			}

			// Token: 0x06001F92 RID: 8082 RVA: 0x00056920 File Offset: 0x00054B20
			[CLSCompliant(false)]
			public static void GenerateTextureMipmap(int texture, TextureTarget target)
			{
				calli(System.Void(System.UInt32,System.Int32), texture, target, GL.EntryPoints[602]);
			}

			// Token: 0x06001F93 RID: 8083 RVA: 0x00056934 File Offset: 0x00054B34
			[CLSCompliant(false)]
			public static void GenerateTextureMipmap(uint texture, TextureTarget target)
			{
				calli(System.Void(System.UInt32,System.Int32), texture, target, GL.EntryPoints[602]);
			}

			// Token: 0x06001F94 RID: 8084 RVA: 0x00056948 File Offset: 0x00054B48
			[CLSCompliant(false)]
			public static int GenFramebuffer()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[607]);
				return result;
			}

			// Token: 0x06001F95 RID: 8085 RVA: 0x0005696C File Offset: 0x00054B6C
			[CLSCompliant(false)]
			public unsafe static void GenFramebuffers(int n, [Out] int[] framebuffers)
			{
				fixed (int* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[607]);
				}
			}

			// Token: 0x06001F96 RID: 8086 RVA: 0x000569A0 File Offset: 0x00054BA0
			[CLSCompliant(false)]
			public unsafe static void GenFramebuffers(int n, out int framebuffers)
			{
				fixed (int* ptr = &framebuffers)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[607]);
				}
			}

			// Token: 0x06001F97 RID: 8087 RVA: 0x000569C4 File Offset: 0x00054BC4
			[CLSCompliant(false)]
			public unsafe static void GenFramebuffers(int n, [Out] int* framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, framebuffers, GL.EntryPoints[607]);
			}

			// Token: 0x06001F98 RID: 8088 RVA: 0x000569D8 File Offset: 0x00054BD8
			[CLSCompliant(false)]
			public unsafe static void GenFramebuffers(int n, [Out] uint[] framebuffers)
			{
				fixed (uint* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[607]);
				}
			}

			// Token: 0x06001F99 RID: 8089 RVA: 0x00056A0C File Offset: 0x00054C0C
			[CLSCompliant(false)]
			public unsafe static void GenFramebuffers(int n, out uint framebuffers)
			{
				fixed (uint* ptr = &framebuffers)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[607]);
				}
			}

			// Token: 0x06001F9A RID: 8090 RVA: 0x00056A30 File Offset: 0x00054C30
			[CLSCompliant(false)]
			public unsafe static void GenFramebuffers(int n, [Out] uint* framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, framebuffers, GL.EntryPoints[607]);
			}

			// Token: 0x06001F9B RID: 8091 RVA: 0x00056A44 File Offset: 0x00054C44
			[CLSCompliant(false)]
			public static int GenProgramPipeline()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[614]);
				return result;
			}

			// Token: 0x06001F9C RID: 8092 RVA: 0x00056A68 File Offset: 0x00054C68
			[CLSCompliant(false)]
			public unsafe static void GenProgramPipelines(int n, [Out] int[] pipelines)
			{
				fixed (int* ptr = ref (pipelines != null && pipelines.Length != 0) ? ref pipelines[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[614]);
				}
			}

			// Token: 0x06001F9D RID: 8093 RVA: 0x00056A9C File Offset: 0x00054C9C
			[CLSCompliant(false)]
			public unsafe static void GenProgramPipelines(int n, out int pipelines)
			{
				fixed (int* ptr = &pipelines)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[614]);
				}
			}

			// Token: 0x06001F9E RID: 8094 RVA: 0x00056AC0 File Offset: 0x00054CC0
			[CLSCompliant(false)]
			public unsafe static void GenProgramPipelines(int n, [Out] int* pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, pipelines, GL.EntryPoints[614]);
			}

			// Token: 0x06001F9F RID: 8095 RVA: 0x00056AD4 File Offset: 0x00054CD4
			[CLSCompliant(false)]
			public unsafe static void GenProgramPipelines(int n, [Out] uint[] pipelines)
			{
				fixed (uint* ptr = ref (pipelines != null && pipelines.Length != 0) ? ref pipelines[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[614]);
				}
			}

			// Token: 0x06001FA0 RID: 8096 RVA: 0x00056B08 File Offset: 0x00054D08
			[CLSCompliant(false)]
			public unsafe static void GenProgramPipelines(int n, out uint pipelines)
			{
				fixed (uint* ptr = &pipelines)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[614]);
				}
			}

			// Token: 0x06001FA1 RID: 8097 RVA: 0x00056B2C File Offset: 0x00054D2C
			[CLSCompliant(false)]
			public unsafe static void GenProgramPipelines(int n, [Out] uint* pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, pipelines, GL.EntryPoints[614]);
			}

			// Token: 0x06001FA2 RID: 8098 RVA: 0x00056B40 File Offset: 0x00054D40
			[CLSCompliant(false)]
			public static int GenRenderbuffer()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[620]);
				return result;
			}

			// Token: 0x06001FA3 RID: 8099 RVA: 0x00056B64 File Offset: 0x00054D64
			[CLSCompliant(false)]
			public unsafe static void GenRenderbuffers(int n, [Out] int[] renderbuffers)
			{
				fixed (int* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[620]);
				}
			}

			// Token: 0x06001FA4 RID: 8100 RVA: 0x00056B98 File Offset: 0x00054D98
			[CLSCompliant(false)]
			public unsafe static void GenRenderbuffers(int n, out int renderbuffers)
			{
				fixed (int* ptr = &renderbuffers)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[620]);
				}
			}

			// Token: 0x06001FA5 RID: 8101 RVA: 0x00056BBC File Offset: 0x00054DBC
			[CLSCompliant(false)]
			public unsafe static void GenRenderbuffers(int n, [Out] int* renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, renderbuffers, GL.EntryPoints[620]);
			}

			// Token: 0x06001FA6 RID: 8102 RVA: 0x00056BD0 File Offset: 0x00054DD0
			[CLSCompliant(false)]
			public unsafe static void GenRenderbuffers(int n, [Out] uint[] renderbuffers)
			{
				fixed (uint* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[620]);
				}
			}

			// Token: 0x06001FA7 RID: 8103 RVA: 0x00056C04 File Offset: 0x00054E04
			[CLSCompliant(false)]
			public unsafe static void GenRenderbuffers(int n, out uint renderbuffers)
			{
				fixed (uint* ptr = &renderbuffers)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[620]);
				}
			}

			// Token: 0x06001FA8 RID: 8104 RVA: 0x00056C28 File Offset: 0x00054E28
			[CLSCompliant(false)]
			public unsafe static void GenRenderbuffers(int n, [Out] uint* renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, renderbuffers, GL.EntryPoints[620]);
			}

			// Token: 0x06001FA9 RID: 8105 RVA: 0x00056C3C File Offset: 0x00054E3C
			[CLSCompliant(false)]
			public static int GenSymbol(ExtVertexShader datatype, ExtVertexShader storagetype, ExtVertexShader range, int components)
			{
				return calli(System.Int32(System.Int32,System.Int32,System.Int32,System.UInt32), datatype, storagetype, range, components, GL.EntryPoints[622]);
			}

			// Token: 0x06001FAA RID: 8106 RVA: 0x00056C54 File Offset: 0x00054E54
			[CLSCompliant(false)]
			public static int GenSymbol(ExtVertexShader datatype, ExtVertexShader storagetype, ExtVertexShader range, uint components)
			{
				return calli(System.Int32(System.Int32,System.Int32,System.Int32,System.UInt32), datatype, storagetype, range, components, GL.EntryPoints[622]);
			}

			// Token: 0x06001FAB RID: 8107 RVA: 0x00056C6C File Offset: 0x00054E6C
			[CLSCompliant(false)]
			public static int GenTexture()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[624]);
				return result;
			}

			// Token: 0x06001FAC RID: 8108 RVA: 0x00056C90 File Offset: 0x00054E90
			[CLSCompliant(false)]
			public unsafe static void GenTextures(int n, [Out] int[] textures)
			{
				fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[624]);
				}
			}

			// Token: 0x06001FAD RID: 8109 RVA: 0x00056CC4 File Offset: 0x00054EC4
			[CLSCompliant(false)]
			public unsafe static void GenTextures(int n, out int textures)
			{
				fixed (int* ptr = &textures)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[624]);
				}
			}

			// Token: 0x06001FAE RID: 8110 RVA: 0x00056CE8 File Offset: 0x00054EE8
			[CLSCompliant(false)]
			public unsafe static void GenTextures(int n, [Out] int* textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, textures, GL.EntryPoints[624]);
			}

			// Token: 0x06001FAF RID: 8111 RVA: 0x00056CFC File Offset: 0x00054EFC
			[CLSCompliant(false)]
			public unsafe static void GenTextures(int n, [Out] uint[] textures)
			{
				fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[624]);
				}
			}

			// Token: 0x06001FB0 RID: 8112 RVA: 0x00056D30 File Offset: 0x00054F30
			[CLSCompliant(false)]
			public unsafe static void GenTextures(int n, out uint textures)
			{
				fixed (uint* ptr = &textures)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[624]);
				}
			}

			// Token: 0x06001FB1 RID: 8113 RVA: 0x00056D54 File Offset: 0x00054F54
			[CLSCompliant(false)]
			public unsafe static void GenTextures(int n, [Out] uint* textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, textures, GL.EntryPoints[624]);
			}

			// Token: 0x06001FB2 RID: 8114 RVA: 0x00056D68 File Offset: 0x00054F68
			[CLSCompliant(false)]
			public static int GenVertexShaders(int range)
			{
				return calli(System.Int32(System.UInt32), range, GL.EntryPoints[629]);
			}

			// Token: 0x06001FB3 RID: 8115 RVA: 0x00056D7C File Offset: 0x00054F7C
			[CLSCompliant(false)]
			public static int GenVertexShaders(uint range)
			{
				return calli(System.Int32(System.UInt32), range, GL.EntryPoints[629]);
			}

			// Token: 0x06001FB4 RID: 8116 RVA: 0x00056D90 File Offset: 0x00054F90
			[CLSCompliant(false)]
			public unsafe static void GetBooleanIndexed(All target, int index, [Out] bool[] data)
			{
				fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, ptr, GL.EntryPoints[650]);
				}
			}

			// Token: 0x06001FB5 RID: 8117 RVA: 0x00056DC8 File Offset: 0x00054FC8
			[CLSCompliant(false)]
			public unsafe static void GetBooleanIndexed(All target, int index, out bool data)
			{
				fixed (bool* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, ptr, GL.EntryPoints[650]);
				}
			}

			// Token: 0x06001FB6 RID: 8118 RVA: 0x00056DEC File Offset: 0x00054FEC
			[CLSCompliant(false)]
			public unsafe static void GetBooleanIndexed(All target, int index, [Out] bool* data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, data, GL.EntryPoints[650]);
			}

			// Token: 0x06001FB7 RID: 8119 RVA: 0x00056E04 File Offset: 0x00055004
			[CLSCompliant(false)]
			public unsafe static void GetBooleanIndexed(All target, uint index, [Out] bool[] data)
			{
				fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, ptr, GL.EntryPoints[650]);
				}
			}

			// Token: 0x06001FB8 RID: 8120 RVA: 0x00056E3C File Offset: 0x0005503C
			[CLSCompliant(false)]
			public unsafe static void GetBooleanIndexed(All target, uint index, out bool data)
			{
				fixed (bool* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, ptr, GL.EntryPoints[650]);
				}
			}

			// Token: 0x06001FB9 RID: 8121 RVA: 0x00056E60 File Offset: 0x00055060
			[CLSCompliant(false)]
			public unsafe static void GetBooleanIndexed(All target, uint index, [Out] bool* data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, data, GL.EntryPoints[650]);
			}

			// Token: 0x06001FBA RID: 8122 RVA: 0x00056E78 File Offset: 0x00055078
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetBooleanIndexed(ExtDrawBuffers2 target, int index, [Out] bool[] data)
			{
				fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, ptr, GL.EntryPoints[650]);
				}
			}

			// Token: 0x06001FBB RID: 8123 RVA: 0x00056EB0 File Offset: 0x000550B0
			[Obsolete("Use All overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetBooleanIndexed(ExtDrawBuffers2 target, int index, out bool data)
			{
				fixed (bool* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, ptr, GL.EntryPoints[650]);
				}
			}

			// Token: 0x06001FBC RID: 8124 RVA: 0x00056ED4 File Offset: 0x000550D4
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetBooleanIndexed(ExtDrawBuffers2 target, int index, [Out] bool* data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, data, GL.EntryPoints[650]);
			}

			// Token: 0x06001FBD RID: 8125 RVA: 0x00056EEC File Offset: 0x000550EC
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetBooleanIndexed(ExtDrawBuffers2 target, uint index, [Out] bool[] data)
			{
				fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, ptr, GL.EntryPoints[650]);
				}
			}

			// Token: 0x06001FBE RID: 8126 RVA: 0x00056F24 File Offset: 0x00055124
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetBooleanIndexed(ExtDrawBuffers2 target, uint index, out bool data)
			{
				fixed (bool* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, ptr, GL.EntryPoints[650]);
				}
			}

			// Token: 0x06001FBF RID: 8127 RVA: 0x00056F48 File Offset: 0x00055148
			[CLSCompliant(false)]
			[Obsolete("Use All overload instead")]
			public unsafe static void GetBooleanIndexed(ExtDrawBuffers2 target, uint index, [Out] bool* data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Boolean*), target, index, data, GL.EntryPoints[650]);
			}

			// Token: 0x06001FC0 RID: 8128 RVA: 0x00056F60 File Offset: 0x00055160
			public static void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, [Out] IntPtr data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, data, GL.EntryPoints[664]);
			}

			// Token: 0x06001FC1 RID: 8129 RVA: 0x00056F78 File Offset: 0x00055178
			[CLSCompliant(false)]
			public unsafe static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[664]);
				}
			}

			// Token: 0x06001FC2 RID: 8130 RVA: 0x00056FB0 File Offset: 0x000551B0
			[CLSCompliant(false)]
			public unsafe static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[664]);
				}
			}

			// Token: 0x06001FC3 RID: 8131 RVA: 0x00056FEC File Offset: 0x000551EC
			[CLSCompliant(false)]
			public unsafe static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In] [Out] T3[,,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[664]);
				}
			}

			// Token: 0x06001FC4 RID: 8132 RVA: 0x00057028 File Offset: 0x00055228
			public unsafe static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In] [Out] ref T3 data) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[664]);
				}
			}

			// Token: 0x06001FC5 RID: 8133 RVA: 0x0005704C File Offset: 0x0005524C
			[CLSCompliant(false)]
			public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[666]);
				}
			}

			// Token: 0x06001FC6 RID: 8134 RVA: 0x00057084 File Offset: 0x00055284
			[CLSCompliant(false)]
			public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[666]);
				}
			}

			// Token: 0x06001FC7 RID: 8135 RVA: 0x000570A8 File Offset: 0x000552A8
			[CLSCompliant(false)]
			public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[666]);
			}

			// Token: 0x06001FC8 RID: 8136 RVA: 0x000570C0 File Offset: 0x000552C0
			[CLSCompliant(false)]
			public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[669]);
				}
			}

			// Token: 0x06001FC9 RID: 8137 RVA: 0x000570F8 File Offset: 0x000552F8
			[CLSCompliant(false)]
			public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[669]);
				}
			}

			// Token: 0x06001FCA RID: 8138 RVA: 0x0005711C File Offset: 0x0005531C
			[CLSCompliant(false)]
			public unsafe static void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[669]);
			}

			// Token: 0x06001FCB RID: 8139 RVA: 0x00057134 File Offset: 0x00055334
			public static void GetCompressedMultiTexImage(TextureUnit texunit, TextureTarget target, int lod, [Out] IntPtr img)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, lod, img, GL.EntryPoints[677]);
			}

			// Token: 0x06001FCC RID: 8140 RVA: 0x0005714C File Offset: 0x0005534C
			[CLSCompliant(false)]
			public unsafe static void GetCompressedMultiTexImage<T3>(TextureUnit texunit, TextureTarget target, int lod, [In] [Out] T3[] img) where T3 : struct
			{
				fixed (T3* ptr = ref (img != null && img.Length != 0) ? ref img[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, lod, ptr, GL.EntryPoints[677]);
				}
			}

			// Token: 0x06001FCD RID: 8141 RVA: 0x00057184 File Offset: 0x00055384
			[CLSCompliant(false)]
			public unsafe static void GetCompressedMultiTexImage<T3>(TextureUnit texunit, TextureTarget target, int lod, [In] [Out] T3[,] img) where T3 : struct
			{
				fixed (T3* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, lod, ptr, GL.EntryPoints[677]);
				}
			}

			// Token: 0x06001FCE RID: 8142 RVA: 0x000571C0 File Offset: 0x000553C0
			[CLSCompliant(false)]
			public unsafe static void GetCompressedMultiTexImage<T3>(TextureUnit texunit, TextureTarget target, int lod, [In] [Out] T3[,,] img) where T3 : struct
			{
				fixed (T3* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, lod, ptr, GL.EntryPoints[677]);
				}
			}

			// Token: 0x06001FCF RID: 8143 RVA: 0x000571FC File Offset: 0x000553FC
			public unsafe static void GetCompressedMultiTexImage<T3>(TextureUnit texunit, TextureTarget target, int lod, [In] [Out] ref T3 img) where T3 : struct
			{
				fixed (T3* ptr = &img)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, lod, ptr, GL.EntryPoints[677]);
				}
			}

			// Token: 0x06001FD0 RID: 8144 RVA: 0x00057220 File Offset: 0x00055420
			[CLSCompliant(false)]
			public static void GetCompressedTextureImage(int texture, TextureTarget target, int lod, [Out] IntPtr img)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), texture, target, lod, img, GL.EntryPoints[680]);
			}

			// Token: 0x06001FD1 RID: 8145 RVA: 0x00057238 File Offset: 0x00055438
			[CLSCompliant(false)]
			public unsafe static void GetCompressedTextureImage<T3>(int texture, TextureTarget target, int lod, [In] [Out] T3[] img) where T3 : struct
			{
				fixed (T3* ptr = ref (img != null && img.Length != 0) ? ref img[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), texture, target, lod, ptr, GL.EntryPoints[680]);
				}
			}

			// Token: 0x06001FD2 RID: 8146 RVA: 0x00057270 File Offset: 0x00055470
			[CLSCompliant(false)]
			public unsafe static void GetCompressedTextureImage<T3>(int texture, TextureTarget target, int lod, [In] [Out] T3[,] img) where T3 : struct
			{
				fixed (T3* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), texture, target, lod, ptr, GL.EntryPoints[680]);
				}
			}

			// Token: 0x06001FD3 RID: 8147 RVA: 0x000572AC File Offset: 0x000554AC
			[CLSCompliant(false)]
			public unsafe static void GetCompressedTextureImage<T3>(int texture, TextureTarget target, int lod, [In] [Out] T3[,,] img) where T3 : struct
			{
				fixed (T3* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), texture, target, lod, ptr, GL.EntryPoints[680]);
				}
			}

			// Token: 0x06001FD4 RID: 8148 RVA: 0x000572E8 File Offset: 0x000554E8
			[CLSCompliant(false)]
			public unsafe static void GetCompressedTextureImage<T3>(int texture, TextureTarget target, int lod, [In] [Out] ref T3 img) where T3 : struct
			{
				fixed (T3* ptr = &img)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), texture, target, lod, ptr, GL.EntryPoints[680]);
				}
			}

			// Token: 0x06001FD5 RID: 8149 RVA: 0x0005730C File Offset: 0x0005550C
			[CLSCompliant(false)]
			public static void GetCompressedTextureImage(uint texture, TextureTarget target, int lod, [Out] IntPtr img)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), texture, target, lod, img, GL.EntryPoints[680]);
			}

			// Token: 0x06001FD6 RID: 8150 RVA: 0x00057324 File Offset: 0x00055524
			[CLSCompliant(false)]
			public unsafe static void GetCompressedTextureImage<T3>(uint texture, TextureTarget target, int lod, [In] [Out] T3[] img) where T3 : struct
			{
				fixed (T3* ptr = ref (img != null && img.Length != 0) ? ref img[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), texture, target, lod, ptr, GL.EntryPoints[680]);
				}
			}

			// Token: 0x06001FD7 RID: 8151 RVA: 0x0005735C File Offset: 0x0005555C
			[CLSCompliant(false)]
			public unsafe static void GetCompressedTextureImage<T3>(uint texture, TextureTarget target, int lod, [In] [Out] T3[,] img) where T3 : struct
			{
				fixed (T3* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), texture, target, lod, ptr, GL.EntryPoints[680]);
				}
			}

			// Token: 0x06001FD8 RID: 8152 RVA: 0x00057398 File Offset: 0x00055598
			[CLSCompliant(false)]
			public unsafe static void GetCompressedTextureImage<T3>(uint texture, TextureTarget target, int lod, [In] [Out] T3[,,] img) where T3 : struct
			{
				fixed (T3* ptr = ref (img != null && img.Length != 0) ? ref img[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), texture, target, lod, ptr, GL.EntryPoints[680]);
				}
			}

			// Token: 0x06001FD9 RID: 8153 RVA: 0x000573D4 File Offset: 0x000555D4
			[CLSCompliant(false)]
			public unsafe static void GetCompressedTextureImage<T3>(uint texture, TextureTarget target, int lod, [In] [Out] ref T3 img) where T3 : struct
			{
				fixed (T3* ptr = &img)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), texture, target, lod, ptr, GL.EntryPoints[680]);
				}
			}

			// Token: 0x06001FDA RID: 8154 RVA: 0x000573F8 File Offset: 0x000555F8
			public static void GetConvolutionFilter(ConvolutionTargetExt target, PixelFormat format, PixelType type, [Out] IntPtr image)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, image, GL.EntryPoints[682]);
			}

			// Token: 0x06001FDB RID: 8155 RVA: 0x00057410 File Offset: 0x00055610
			[CLSCompliant(false)]
			public unsafe static void GetConvolutionFilter<T3>(ConvolutionTargetExt target, PixelFormat format, PixelType type, [In] [Out] T3[] image) where T3 : struct
			{
				fixed (T3* ptr = ref (image != null && image.Length != 0) ? ref image[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[682]);
				}
			}

			// Token: 0x06001FDC RID: 8156 RVA: 0x00057448 File Offset: 0x00055648
			[CLSCompliant(false)]
			public unsafe static void GetConvolutionFilter<T3>(ConvolutionTargetExt target, PixelFormat format, PixelType type, [In] [Out] T3[,] image) where T3 : struct
			{
				fixed (T3* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[682]);
				}
			}

			// Token: 0x06001FDD RID: 8157 RVA: 0x00057484 File Offset: 0x00055684
			[CLSCompliant(false)]
			public unsafe static void GetConvolutionFilter<T3>(ConvolutionTargetExt target, PixelFormat format, PixelType type, [In] [Out] T3[,,] image) where T3 : struct
			{
				fixed (T3* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[682]);
				}
			}

			// Token: 0x06001FDE RID: 8158 RVA: 0x000574C0 File Offset: 0x000556C0
			public unsafe static void GetConvolutionFilter<T3>(ConvolutionTargetExt target, PixelFormat format, PixelType type, [In] [Out] ref T3 image) where T3 : struct
			{
				fixed (T3* ptr = &image)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[682]);
				}
			}

			// Token: 0x06001FDF RID: 8159 RVA: 0x000574E4 File Offset: 0x000556E4
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public static void GetConvolutionFilter(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr image)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, image, GL.EntryPoints[682]);
			}

			// Token: 0x06001FE0 RID: 8160 RVA: 0x000574FC File Offset: 0x000556FC
			[CLSCompliant(false)]
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public unsafe static void GetConvolutionFilter<T3>(ExtConvolution target, PixelFormat format, PixelType type, [In] [Out] T3[] image) where T3 : struct
			{
				fixed (T3* ptr = ref (image != null && image.Length != 0) ? ref image[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[682]);
				}
			}

			// Token: 0x06001FE1 RID: 8161 RVA: 0x00057534 File Offset: 0x00055734
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetConvolutionFilter<T3>(ExtConvolution target, PixelFormat format, PixelType type, [In] [Out] T3[,] image) where T3 : struct
			{
				fixed (T3* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[682]);
				}
			}

			// Token: 0x06001FE2 RID: 8162 RVA: 0x00057570 File Offset: 0x00055770
			[CLSCompliant(false)]
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public unsafe static void GetConvolutionFilter<T3>(ExtConvolution target, PixelFormat format, PixelType type, [In] [Out] T3[,,] image) where T3 : struct
			{
				fixed (T3* ptr = ref (image != null && image.Length != 0) ? ref image[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[682]);
				}
			}

			// Token: 0x06001FE3 RID: 8163 RVA: 0x000575AC File Offset: 0x000557AC
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public unsafe static void GetConvolutionFilter<T3>(ExtConvolution target, PixelFormat format, PixelType type, [In] [Out] ref T3 image) where T3 : struct
			{
				fixed (T3* ptr = &image)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[682]);
				}
			}

			// Token: 0x06001FE4 RID: 8164 RVA: 0x000575D0 File Offset: 0x000557D0
			[CLSCompliant(false)]
			public unsafe static void GetConvolutionParameter(ConvolutionTargetExt target, ConvolutionParameterExt pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[684]);
				}
			}

			// Token: 0x06001FE5 RID: 8165 RVA: 0x00057608 File Offset: 0x00055808
			[CLSCompliant(false)]
			public unsafe static void GetConvolutionParameter(ConvolutionTargetExt target, ConvolutionParameterExt pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[684]);
				}
			}

			// Token: 0x06001FE6 RID: 8166 RVA: 0x0005762C File Offset: 0x0005582C
			[CLSCompliant(false)]
			public unsafe static void GetConvolutionParameter(ConvolutionTargetExt target, ConvolutionParameterExt pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[684]);
			}

			// Token: 0x06001FE7 RID: 8167 RVA: 0x00057644 File Offset: 0x00055844
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetConvolutionParameter(ExtConvolution target, ExtConvolution pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[684]);
				}
			}

			// Token: 0x06001FE8 RID: 8168 RVA: 0x0005767C File Offset: 0x0005587C
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetConvolutionParameter(ExtConvolution target, ExtConvolution pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[684]);
				}
			}

			// Token: 0x06001FE9 RID: 8169 RVA: 0x000576A0 File Offset: 0x000558A0
			[CLSCompliant(false)]
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public unsafe static void GetConvolutionParameter(ExtConvolution target, ExtConvolution pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[684]);
			}

			// Token: 0x06001FEA RID: 8170 RVA: 0x000576B8 File Offset: 0x000558B8
			[CLSCompliant(false)]
			public unsafe static void GetConvolutionParameter(ConvolutionTargetExt target, ConvolutionParameterExt pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[686]);
				}
			}

			// Token: 0x06001FEB RID: 8171 RVA: 0x000576F0 File Offset: 0x000558F0
			[CLSCompliant(false)]
			public unsafe static void GetConvolutionParameter(ConvolutionTargetExt target, ConvolutionParameterExt pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[686]);
				}
			}

			// Token: 0x06001FEC RID: 8172 RVA: 0x00057714 File Offset: 0x00055914
			[CLSCompliant(false)]
			public unsafe static void GetConvolutionParameter(ConvolutionTargetExt target, ConvolutionParameterExt pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[686]);
			}

			// Token: 0x06001FED RID: 8173 RVA: 0x0005772C File Offset: 0x0005592C
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetConvolutionParameter(ExtConvolution target, ExtConvolution pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[686]);
				}
			}

			// Token: 0x06001FEE RID: 8174 RVA: 0x00057764 File Offset: 0x00055964
			[CLSCompliant(false)]
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public unsafe static void GetConvolutionParameter(ExtConvolution target, ExtConvolution pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[686]);
				}
			}

			// Token: 0x06001FEF RID: 8175 RVA: 0x00057788 File Offset: 0x00055988
			[CLSCompliant(false)]
			[Obsolete("Use ConvolutionTargetExt overload instead")]
			public unsafe static void GetConvolutionParameter(ExtConvolution target, ExtConvolution pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[686]);
			}

			// Token: 0x06001FF0 RID: 8176 RVA: 0x000577A0 File Offset: 0x000559A0
			[CLSCompliant(false)]
			public unsafe static void GetDouble(ExtDirectStateAccess pname, int index, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), pname, index, ptr, GL.EntryPoints[694]);
				}
			}

			// Token: 0x06001FF1 RID: 8177 RVA: 0x000577D8 File Offset: 0x000559D8
			[CLSCompliant(false)]
			public unsafe static void GetDouble(ExtDirectStateAccess pname, int index, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), pname, index, ptr, GL.EntryPoints[694]);
				}
			}

			// Token: 0x06001FF2 RID: 8178 RVA: 0x000577FC File Offset: 0x000559FC
			[CLSCompliant(false)]
			public unsafe static void GetDouble(ExtDirectStateAccess pname, int index, [Out] double* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), pname, index, @params, GL.EntryPoints[694]);
			}

			// Token: 0x06001FF3 RID: 8179 RVA: 0x00057814 File Offset: 0x00055A14
			[CLSCompliant(false)]
			public unsafe static void GetDouble(ExtDirectStateAccess pname, uint index, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), pname, index, ptr, GL.EntryPoints[694]);
				}
			}

			// Token: 0x06001FF4 RID: 8180 RVA: 0x0005784C File Offset: 0x00055A4C
			[CLSCompliant(false)]
			public unsafe static void GetDouble(ExtDirectStateAccess pname, uint index, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), pname, index, ptr, GL.EntryPoints[694]);
				}
			}

			// Token: 0x06001FF5 RID: 8181 RVA: 0x00057870 File Offset: 0x00055A70
			[CLSCompliant(false)]
			public unsafe static void GetDouble(ExtDirectStateAccess pname, uint index, [Out] double* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), pname, index, @params, GL.EntryPoints[694]);
			}

			// Token: 0x06001FF6 RID: 8182 RVA: 0x00057888 File Offset: 0x00055A88
			[CLSCompliant(false)]
			public unsafe static void GetDoubleIndexed(ExtDirectStateAccess target, int index, [Out] double[] data)
			{
				fixed (double* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[695]);
				}
			}

			// Token: 0x06001FF7 RID: 8183 RVA: 0x000578C0 File Offset: 0x00055AC0
			[CLSCompliant(false)]
			public unsafe static void GetDoubleIndexed(ExtDirectStateAccess target, int index, out double data)
			{
				fixed (double* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[695]);
				}
			}

			// Token: 0x06001FF8 RID: 8184 RVA: 0x000578E4 File Offset: 0x00055AE4
			[CLSCompliant(false)]
			public unsafe static void GetDoubleIndexed(ExtDirectStateAccess target, int index, [Out] double* data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, data, GL.EntryPoints[695]);
			}

			// Token: 0x06001FF9 RID: 8185 RVA: 0x000578FC File Offset: 0x00055AFC
			[CLSCompliant(false)]
			public unsafe static void GetDoubleIndexed(ExtDirectStateAccess target, uint index, [Out] double[] data)
			{
				fixed (double* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[695]);
				}
			}

			// Token: 0x06001FFA RID: 8186 RVA: 0x00057934 File Offset: 0x00055B34
			[CLSCompliant(false)]
			public unsafe static void GetDoubleIndexed(ExtDirectStateAccess target, uint index, out double data)
			{
				fixed (double* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[695]);
				}
			}

			// Token: 0x06001FFB RID: 8187 RVA: 0x00057958 File Offset: 0x00055B58
			[CLSCompliant(false)]
			public unsafe static void GetDoubleIndexed(ExtDirectStateAccess target, uint index, [Out] double* data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, data, GL.EntryPoints[695]);
			}

			// Token: 0x06001FFC RID: 8188 RVA: 0x00057970 File Offset: 0x00055B70
			[CLSCompliant(false)]
			public unsafe static void GetFloat(ExtDirectStateAccess pname, int index, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[704]);
				}
			}

			// Token: 0x06001FFD RID: 8189 RVA: 0x000579A8 File Offset: 0x00055BA8
			[CLSCompliant(false)]
			public unsafe static void GetFloat(ExtDirectStateAccess pname, int index, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[704]);
				}
			}

			// Token: 0x06001FFE RID: 8190 RVA: 0x000579CC File Offset: 0x00055BCC
			[CLSCompliant(false)]
			public unsafe static void GetFloat(ExtDirectStateAccess pname, int index, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, @params, GL.EntryPoints[704]);
			}

			// Token: 0x06001FFF RID: 8191 RVA: 0x000579E4 File Offset: 0x00055BE4
			[CLSCompliant(false)]
			public unsafe static void GetFloat(ExtDirectStateAccess pname, uint index, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[704]);
				}
			}

			// Token: 0x06002000 RID: 8192 RVA: 0x00057A1C File Offset: 0x00055C1C
			[CLSCompliant(false)]
			public unsafe static void GetFloat(ExtDirectStateAccess pname, uint index, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[704]);
				}
			}

			// Token: 0x06002001 RID: 8193 RVA: 0x00057A40 File Offset: 0x00055C40
			[CLSCompliant(false)]
			public unsafe static void GetFloat(ExtDirectStateAccess pname, uint index, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, @params, GL.EntryPoints[704]);
			}

			// Token: 0x06002002 RID: 8194 RVA: 0x00057A58 File Offset: 0x00055C58
			[CLSCompliant(false)]
			public unsafe static void GetFloatIndexed(ExtDirectStateAccess target, int index, [Out] float[] data)
			{
				fixed (float* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[705]);
				}
			}

			// Token: 0x06002003 RID: 8195 RVA: 0x00057A90 File Offset: 0x00055C90
			[CLSCompliant(false)]
			public unsafe static void GetFloatIndexed(ExtDirectStateAccess target, int index, out float data)
			{
				fixed (float* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[705]);
				}
			}

			// Token: 0x06002004 RID: 8196 RVA: 0x00057AB4 File Offset: 0x00055CB4
			[CLSCompliant(false)]
			public unsafe static void GetFloatIndexed(ExtDirectStateAccess target, int index, [Out] float* data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, data, GL.EntryPoints[705]);
			}

			// Token: 0x06002005 RID: 8197 RVA: 0x00057ACC File Offset: 0x00055CCC
			[CLSCompliant(false)]
			public unsafe static void GetFloatIndexed(ExtDirectStateAccess target, uint index, [Out] float[] data)
			{
				fixed (float* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[705]);
				}
			}

			// Token: 0x06002006 RID: 8198 RVA: 0x00057B04 File Offset: 0x00055D04
			[CLSCompliant(false)]
			public unsafe static void GetFloatIndexed(ExtDirectStateAccess target, uint index, out float data)
			{
				fixed (float* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[705]);
				}
			}

			// Token: 0x06002007 RID: 8199 RVA: 0x00057B28 File Offset: 0x00055D28
			[CLSCompliant(false)]
			public unsafe static void GetFloatIndexed(ExtDirectStateAccess target, uint index, [Out] float* data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, data, GL.EntryPoints[705]);
			}

			// Token: 0x06002008 RID: 8200 RVA: 0x00057B40 File Offset: 0x00055D40
			[CLSCompliant(false)]
			public static int GetFragDataLocation(int program, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[710]);
				BindingsBase.FreeStringPtr(intPtr);
				return result;
			}

			// Token: 0x06002009 RID: 8201 RVA: 0x00057B6C File Offset: 0x00055D6C
			[CLSCompliant(false)]
			public static int GetFragDataLocation(uint program, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[710]);
				BindingsBase.FreeStringPtr(intPtr);
				return result;
			}

			// Token: 0x0600200A RID: 8202 RVA: 0x00057B98 File Offset: 0x00055D98
			[CLSCompliant(false)]
			public unsafe static void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, attachment, pname, ptr, GL.EntryPoints[716]);
				}
			}

			// Token: 0x0600200B RID: 8203 RVA: 0x00057BD0 File Offset: 0x00055DD0
			[CLSCompliant(false)]
			public unsafe static void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, attachment, pname, ptr, GL.EntryPoints[716]);
				}
			}

			// Token: 0x0600200C RID: 8204 RVA: 0x00057BF4 File Offset: 0x00055DF4
			[CLSCompliant(false)]
			public unsafe static void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, attachment, pname, @params, GL.EntryPoints[716]);
			}

			// Token: 0x0600200D RID: 8205 RVA: 0x00057C0C File Offset: 0x00055E0C
			[CLSCompliant(false)]
			public unsafe static void GetFramebufferParameter(int framebuffer, ExtDirectStateAccess pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, pname, ptr, GL.EntryPoints[718]);
				}
			}

			// Token: 0x0600200E RID: 8206 RVA: 0x00057C44 File Offset: 0x00055E44
			[CLSCompliant(false)]
			public unsafe static void GetFramebufferParameter(int framebuffer, ExtDirectStateAccess pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, pname, ptr, GL.EntryPoints[718]);
				}
			}

			// Token: 0x0600200F RID: 8207 RVA: 0x00057C68 File Offset: 0x00055E68
			[CLSCompliant(false)]
			public unsafe static void GetFramebufferParameter(int framebuffer, ExtDirectStateAccess pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, pname, @params, GL.EntryPoints[718]);
			}

			// Token: 0x06002010 RID: 8208 RVA: 0x00057C80 File Offset: 0x00055E80
			[CLSCompliant(false)]
			public unsafe static void GetFramebufferParameter(uint framebuffer, ExtDirectStateAccess pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, pname, ptr, GL.EntryPoints[718]);
				}
			}

			// Token: 0x06002011 RID: 8209 RVA: 0x00057CB8 File Offset: 0x00055EB8
			[CLSCompliant(false)]
			public unsafe static void GetFramebufferParameter(uint framebuffer, ExtDirectStateAccess pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, pname, ptr, GL.EntryPoints[718]);
				}
			}

			// Token: 0x06002012 RID: 8210 RVA: 0x00057CDC File Offset: 0x00055EDC
			[CLSCompliant(false)]
			public unsafe static void GetFramebufferParameter(uint framebuffer, ExtDirectStateAccess pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, pname, @params, GL.EntryPoints[718]);
			}

			// Token: 0x06002013 RID: 8211 RVA: 0x00057CF4 File Offset: 0x00055EF4
			[Obsolete("Use HistogramTargetExt overload instead")]
			public static void GetHistogram(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, values, GL.EntryPoints[722]);
			}

			// Token: 0x06002014 RID: 8212 RVA: 0x00057D0C File Offset: 0x00055F0C
			[Obsolete("Use HistogramTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetHistogram<T4>(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[] values) where T4 : struct
			{
				fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[722]);
				}
			}

			// Token: 0x06002015 RID: 8213 RVA: 0x00057D48 File Offset: 0x00055F48
			[CLSCompliant(false)]
			[Obsolete("Use HistogramTargetExt overload instead")]
			public unsafe static void GetHistogram<T4>(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[,] values) where T4 : struct
			{
				fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[722]);
				}
			}

			// Token: 0x06002016 RID: 8214 RVA: 0x00057D88 File Offset: 0x00055F88
			[CLSCompliant(false)]
			[Obsolete("Use HistogramTargetExt overload instead")]
			public unsafe static void GetHistogram<T4>(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[,,] values) where T4 : struct
			{
				fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[722]);
				}
			}

			// Token: 0x06002017 RID: 8215 RVA: 0x00057DC8 File Offset: 0x00055FC8
			[Obsolete("Use HistogramTargetExt overload instead")]
			public unsafe static void GetHistogram<T4>(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [In] [Out] ref T4 values) where T4 : struct
			{
				fixed (T4* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[722]);
				}
			}

			// Token: 0x06002018 RID: 8216 RVA: 0x00057DF0 File Offset: 0x00055FF0
			public static void GetHistogram(HistogramTargetExt target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, values, GL.EntryPoints[722]);
			}

			// Token: 0x06002019 RID: 8217 RVA: 0x00057E08 File Offset: 0x00056008
			[CLSCompliant(false)]
			public unsafe static void GetHistogram<T4>(HistogramTargetExt target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[] values) where T4 : struct
			{
				fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[722]);
				}
			}

			// Token: 0x0600201A RID: 8218 RVA: 0x00057E44 File Offset: 0x00056044
			[CLSCompliant(false)]
			public unsafe static void GetHistogram<T4>(HistogramTargetExt target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[,] values) where T4 : struct
			{
				fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[722]);
				}
			}

			// Token: 0x0600201B RID: 8219 RVA: 0x00057E84 File Offset: 0x00056084
			[CLSCompliant(false)]
			public unsafe static void GetHistogram<T4>(HistogramTargetExt target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[,,] values) where T4 : struct
			{
				fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[722]);
				}
			}

			// Token: 0x0600201C RID: 8220 RVA: 0x00057EC4 File Offset: 0x000560C4
			public unsafe static void GetHistogram<T4>(HistogramTargetExt target, bool reset, PixelFormat format, PixelType type, [In] [Out] ref T4 values) where T4 : struct
			{
				fixed (T4* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[722]);
				}
			}

			// Token: 0x0600201D RID: 8221 RVA: 0x00057EEC File Offset: 0x000560EC
			[CLSCompliant(false)]
			[Obsolete("Use HistogramTargetExt overload instead")]
			public unsafe static void GetHistogramParameter(ExtHistogram target, ExtHistogram pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[724]);
				}
			}

			// Token: 0x0600201E RID: 8222 RVA: 0x00057F24 File Offset: 0x00056124
			[CLSCompliant(false)]
			[Obsolete("Use HistogramTargetExt overload instead")]
			public unsafe static void GetHistogramParameter(ExtHistogram target, ExtHistogram pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[724]);
				}
			}

			// Token: 0x0600201F RID: 8223 RVA: 0x00057F48 File Offset: 0x00056148
			[Obsolete("Use HistogramTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetHistogramParameter(ExtHistogram target, ExtHistogram pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[724]);
			}

			// Token: 0x06002020 RID: 8224 RVA: 0x00057F60 File Offset: 0x00056160
			[CLSCompliant(false)]
			public unsafe static void GetHistogramParameter(HistogramTargetExt target, GetHistogramParameterPNameExt pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[724]);
				}
			}

			// Token: 0x06002021 RID: 8225 RVA: 0x00057F98 File Offset: 0x00056198
			[CLSCompliant(false)]
			public unsafe static void GetHistogramParameter(HistogramTargetExt target, GetHistogramParameterPNameExt pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[724]);
				}
			}

			// Token: 0x06002022 RID: 8226 RVA: 0x00057FBC File Offset: 0x000561BC
			[CLSCompliant(false)]
			public unsafe static void GetHistogramParameter(HistogramTargetExt target, GetHistogramParameterPNameExt pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[724]);
			}

			// Token: 0x06002023 RID: 8227 RVA: 0x00057FD4 File Offset: 0x000561D4
			[Obsolete("Use HistogramTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetHistogramParameter(ExtHistogram target, ExtHistogram pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[726]);
				}
			}

			// Token: 0x06002024 RID: 8228 RVA: 0x0005800C File Offset: 0x0005620C
			[Obsolete("Use HistogramTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetHistogramParameter(ExtHistogram target, ExtHistogram pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[726]);
				}
			}

			// Token: 0x06002025 RID: 8229 RVA: 0x00058030 File Offset: 0x00056230
			[CLSCompliant(false)]
			[Obsolete("Use HistogramTargetExt overload instead")]
			public unsafe static void GetHistogramParameter(ExtHistogram target, ExtHistogram pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[726]);
			}

			// Token: 0x06002026 RID: 8230 RVA: 0x00058048 File Offset: 0x00056248
			[CLSCompliant(false)]
			public unsafe static void GetHistogramParameter(HistogramTargetExt target, GetHistogramParameterPNameExt pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[726]);
				}
			}

			// Token: 0x06002027 RID: 8231 RVA: 0x00058080 File Offset: 0x00056280
			[CLSCompliant(false)]
			public unsafe static void GetHistogramParameter(HistogramTargetExt target, GetHistogramParameterPNameExt pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[726]);
				}
			}

			// Token: 0x06002028 RID: 8232 RVA: 0x000580A4 File Offset: 0x000562A4
			[CLSCompliant(false)]
			public unsafe static void GetHistogramParameter(HistogramTargetExt target, GetHistogramParameterPNameExt pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[726]);
			}

			// Token: 0x06002029 RID: 8233 RVA: 0x000580BC File Offset: 0x000562BC
			[Obsolete("Use GetIndexedPName overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetIntegerIndexed(ExtDrawBuffers2 target, int index, [Out] int[] data)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[737]);
				}
			}

			// Token: 0x0600202A RID: 8234 RVA: 0x000580F4 File Offset: 0x000562F4
			[Obsolete("Use GetIndexedPName overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetIntegerIndexed(ExtDrawBuffers2 target, int index, out int data)
			{
				fixed (int* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[737]);
				}
			}

			// Token: 0x0600202B RID: 8235 RVA: 0x00058118 File Offset: 0x00056318
			[Obsolete("Use GetIndexedPName overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetIntegerIndexed(ExtDrawBuffers2 target, int index, [Out] int* data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, data, GL.EntryPoints[737]);
			}

			// Token: 0x0600202C RID: 8236 RVA: 0x00058130 File Offset: 0x00056330
			[CLSCompliant(false)]
			[Obsolete("Use GetIndexedPName overload instead")]
			public unsafe static void GetIntegerIndexed(ExtDrawBuffers2 target, uint index, [Out] int[] data)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[737]);
				}
			}

			// Token: 0x0600202D RID: 8237 RVA: 0x00058168 File Offset: 0x00056368
			[Obsolete("Use GetIndexedPName overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetIntegerIndexed(ExtDrawBuffers2 target, uint index, out int data)
			{
				fixed (int* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[737]);
				}
			}

			// Token: 0x0600202E RID: 8238 RVA: 0x0005818C File Offset: 0x0005638C
			[Obsolete("Use GetIndexedPName overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetIntegerIndexed(ExtDrawBuffers2 target, uint index, [Out] int* data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, data, GL.EntryPoints[737]);
			}

			// Token: 0x0600202F RID: 8239 RVA: 0x000581A4 File Offset: 0x000563A4
			[CLSCompliant(false)]
			public unsafe static void GetIntegerIndexed(GetIndexedPName target, int index, [Out] int[] data)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[737]);
				}
			}

			// Token: 0x06002030 RID: 8240 RVA: 0x000581DC File Offset: 0x000563DC
			[CLSCompliant(false)]
			public unsafe static void GetIntegerIndexed(GetIndexedPName target, int index, out int data)
			{
				fixed (int* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[737]);
				}
			}

			// Token: 0x06002031 RID: 8241 RVA: 0x00058200 File Offset: 0x00056400
			[CLSCompliant(false)]
			public unsafe static void GetIntegerIndexed(GetIndexedPName target, int index, [Out] int* data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, data, GL.EntryPoints[737]);
			}

			// Token: 0x06002032 RID: 8242 RVA: 0x00058218 File Offset: 0x00056418
			[CLSCompliant(false)]
			public unsafe static void GetIntegerIndexed(GetIndexedPName target, uint index, [Out] int[] data)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[737]);
				}
			}

			// Token: 0x06002033 RID: 8243 RVA: 0x00058250 File Offset: 0x00056450
			[CLSCompliant(false)]
			public unsafe static void GetIntegerIndexed(GetIndexedPName target, uint index, out int data)
			{
				fixed (int* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[737]);
				}
			}

			// Token: 0x06002034 RID: 8244 RVA: 0x00058274 File Offset: 0x00056474
			[CLSCompliant(false)]
			public unsafe static void GetIntegerIndexed(GetIndexedPName target, uint index, [Out] int* data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, data, GL.EntryPoints[737]);
			}

			// Token: 0x06002035 RID: 8245 RVA: 0x0005828C File Offset: 0x0005648C
			[CLSCompliant(false)]
			public unsafe static void GetInvariantBoolean(int id, ExtVertexShader value, [Out] bool[] data)
			{
				fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, ptr, GL.EntryPoints[743]);
				}
			}

			// Token: 0x06002036 RID: 8246 RVA: 0x000582C4 File Offset: 0x000564C4
			[CLSCompliant(false)]
			public unsafe static void GetInvariantBoolean(int id, ExtVertexShader value, out bool data)
			{
				fixed (bool* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, ptr, GL.EntryPoints[743]);
				}
			}

			// Token: 0x06002037 RID: 8247 RVA: 0x000582E8 File Offset: 0x000564E8
			[CLSCompliant(false)]
			public unsafe static void GetInvariantBoolean(int id, ExtVertexShader value, [Out] bool* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, data, GL.EntryPoints[743]);
			}

			// Token: 0x06002038 RID: 8248 RVA: 0x00058300 File Offset: 0x00056500
			[CLSCompliant(false)]
			public unsafe static void GetInvariantBoolean(uint id, ExtVertexShader value, [Out] bool[] data)
			{
				fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, ptr, GL.EntryPoints[743]);
				}
			}

			// Token: 0x06002039 RID: 8249 RVA: 0x00058338 File Offset: 0x00056538
			[CLSCompliant(false)]
			public unsafe static void GetInvariantBoolean(uint id, ExtVertexShader value, out bool data)
			{
				fixed (bool* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, ptr, GL.EntryPoints[743]);
				}
			}

			// Token: 0x0600203A RID: 8250 RVA: 0x0005835C File Offset: 0x0005655C
			[CLSCompliant(false)]
			public unsafe static void GetInvariantBoolean(uint id, ExtVertexShader value, [Out] bool* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, data, GL.EntryPoints[743]);
			}

			// Token: 0x0600203B RID: 8251 RVA: 0x00058374 File Offset: 0x00056574
			[CLSCompliant(false)]
			public unsafe static void GetInvariantFloat(int id, ExtVertexShader value, [Out] float[] data)
			{
				fixed (float* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, ptr, GL.EntryPoints[744]);
				}
			}

			// Token: 0x0600203C RID: 8252 RVA: 0x000583AC File Offset: 0x000565AC
			[CLSCompliant(false)]
			public unsafe static void GetInvariantFloat(int id, ExtVertexShader value, out float data)
			{
				fixed (float* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, ptr, GL.EntryPoints[744]);
				}
			}

			// Token: 0x0600203D RID: 8253 RVA: 0x000583D0 File Offset: 0x000565D0
			[CLSCompliant(false)]
			public unsafe static void GetInvariantFloat(int id, ExtVertexShader value, [Out] float* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, data, GL.EntryPoints[744]);
			}

			// Token: 0x0600203E RID: 8254 RVA: 0x000583E8 File Offset: 0x000565E8
			[CLSCompliant(false)]
			public unsafe static void GetInvariantFloat(uint id, ExtVertexShader value, [Out] float[] data)
			{
				fixed (float* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, ptr, GL.EntryPoints[744]);
				}
			}

			// Token: 0x0600203F RID: 8255 RVA: 0x00058420 File Offset: 0x00056620
			[CLSCompliant(false)]
			public unsafe static void GetInvariantFloat(uint id, ExtVertexShader value, out float data)
			{
				fixed (float* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, ptr, GL.EntryPoints[744]);
				}
			}

			// Token: 0x06002040 RID: 8256 RVA: 0x00058444 File Offset: 0x00056644
			[CLSCompliant(false)]
			public unsafe static void GetInvariantFloat(uint id, ExtVertexShader value, [Out] float* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, data, GL.EntryPoints[744]);
			}

			// Token: 0x06002041 RID: 8257 RVA: 0x0005845C File Offset: 0x0005665C
			[CLSCompliant(false)]
			public unsafe static void GetInvariantInteger(int id, ExtVertexShader value, [Out] int[] data)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, ptr, GL.EntryPoints[745]);
				}
			}

			// Token: 0x06002042 RID: 8258 RVA: 0x00058494 File Offset: 0x00056694
			[CLSCompliant(false)]
			public unsafe static void GetInvariantInteger(int id, ExtVertexShader value, out int data)
			{
				fixed (int* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, ptr, GL.EntryPoints[745]);
				}
			}

			// Token: 0x06002043 RID: 8259 RVA: 0x000584B8 File Offset: 0x000566B8
			[CLSCompliant(false)]
			public unsafe static void GetInvariantInteger(int id, ExtVertexShader value, [Out] int* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, data, GL.EntryPoints[745]);
			}

			// Token: 0x06002044 RID: 8260 RVA: 0x000584D0 File Offset: 0x000566D0
			[CLSCompliant(false)]
			public unsafe static void GetInvariantInteger(uint id, ExtVertexShader value, [Out] int[] data)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, ptr, GL.EntryPoints[745]);
				}
			}

			// Token: 0x06002045 RID: 8261 RVA: 0x00058508 File Offset: 0x00056708
			[CLSCompliant(false)]
			public unsafe static void GetInvariantInteger(uint id, ExtVertexShader value, out int data)
			{
				fixed (int* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, ptr, GL.EntryPoints[745]);
				}
			}

			// Token: 0x06002046 RID: 8262 RVA: 0x0005852C File Offset: 0x0005672C
			[CLSCompliant(false)]
			public unsafe static void GetInvariantInteger(uint id, ExtVertexShader value, [Out] int* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, data, GL.EntryPoints[745]);
			}

			// Token: 0x06002047 RID: 8263 RVA: 0x00058544 File Offset: 0x00056744
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantBoolean(int id, ExtVertexShader value, [Out] bool[] data)
			{
				fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, ptr, GL.EntryPoints[752]);
				}
			}

			// Token: 0x06002048 RID: 8264 RVA: 0x0005857C File Offset: 0x0005677C
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantBoolean(int id, ExtVertexShader value, out bool data)
			{
				fixed (bool* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, ptr, GL.EntryPoints[752]);
				}
			}

			// Token: 0x06002049 RID: 8265 RVA: 0x000585A0 File Offset: 0x000567A0
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantBoolean(int id, ExtVertexShader value, [Out] bool* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, data, GL.EntryPoints[752]);
			}

			// Token: 0x0600204A RID: 8266 RVA: 0x000585B8 File Offset: 0x000567B8
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantBoolean(uint id, ExtVertexShader value, [Out] bool[] data)
			{
				fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, ptr, GL.EntryPoints[752]);
				}
			}

			// Token: 0x0600204B RID: 8267 RVA: 0x000585F0 File Offset: 0x000567F0
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantBoolean(uint id, ExtVertexShader value, out bool data)
			{
				fixed (bool* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, ptr, GL.EntryPoints[752]);
				}
			}

			// Token: 0x0600204C RID: 8268 RVA: 0x00058614 File Offset: 0x00056814
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantBoolean(uint id, ExtVertexShader value, [Out] bool* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, data, GL.EntryPoints[752]);
			}

			// Token: 0x0600204D RID: 8269 RVA: 0x0005862C File Offset: 0x0005682C
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantFloat(int id, ExtVertexShader value, [Out] float[] data)
			{
				fixed (float* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, ptr, GL.EntryPoints[753]);
				}
			}

			// Token: 0x0600204E RID: 8270 RVA: 0x00058664 File Offset: 0x00056864
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantFloat(int id, ExtVertexShader value, out float data)
			{
				fixed (float* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, ptr, GL.EntryPoints[753]);
				}
			}

			// Token: 0x0600204F RID: 8271 RVA: 0x00058688 File Offset: 0x00056888
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantFloat(int id, ExtVertexShader value, [Out] float* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, data, GL.EntryPoints[753]);
			}

			// Token: 0x06002050 RID: 8272 RVA: 0x000586A0 File Offset: 0x000568A0
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantFloat(uint id, ExtVertexShader value, [Out] float[] data)
			{
				fixed (float* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, ptr, GL.EntryPoints[753]);
				}
			}

			// Token: 0x06002051 RID: 8273 RVA: 0x000586D8 File Offset: 0x000568D8
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantFloat(uint id, ExtVertexShader value, out float data)
			{
				fixed (float* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, ptr, GL.EntryPoints[753]);
				}
			}

			// Token: 0x06002052 RID: 8274 RVA: 0x000586FC File Offset: 0x000568FC
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantFloat(uint id, ExtVertexShader value, [Out] float* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, data, GL.EntryPoints[753]);
			}

			// Token: 0x06002053 RID: 8275 RVA: 0x00058714 File Offset: 0x00056914
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantInteger(int id, ExtVertexShader value, [Out] int[] data)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, ptr, GL.EntryPoints[754]);
				}
			}

			// Token: 0x06002054 RID: 8276 RVA: 0x0005874C File Offset: 0x0005694C
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantInteger(int id, ExtVertexShader value, out int data)
			{
				fixed (int* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, ptr, GL.EntryPoints[754]);
				}
			}

			// Token: 0x06002055 RID: 8277 RVA: 0x00058770 File Offset: 0x00056970
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantInteger(int id, ExtVertexShader value, [Out] int* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, data, GL.EntryPoints[754]);
			}

			// Token: 0x06002056 RID: 8278 RVA: 0x00058788 File Offset: 0x00056988
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantInteger(uint id, ExtVertexShader value, [Out] int[] data)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, ptr, GL.EntryPoints[754]);
				}
			}

			// Token: 0x06002057 RID: 8279 RVA: 0x000587C0 File Offset: 0x000569C0
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantInteger(uint id, ExtVertexShader value, out int data)
			{
				fixed (int* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, ptr, GL.EntryPoints[754]);
				}
			}

			// Token: 0x06002058 RID: 8280 RVA: 0x000587E4 File Offset: 0x000569E4
			[CLSCompliant(false)]
			public unsafe static void GetLocalConstantInteger(uint id, ExtVertexShader value, [Out] int* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, data, GL.EntryPoints[754]);
			}

			// Token: 0x06002059 RID: 8281 RVA: 0x000587FC File Offset: 0x000569FC
			[Obsolete("Use MinmaxTargetExt overload instead")]
			public static void GetMinmax(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, values, GL.EntryPoints[769]);
			}

			// Token: 0x0600205A RID: 8282 RVA: 0x00058814 File Offset: 0x00056A14
			[Obsolete("Use MinmaxTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetMinmax<T4>(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[] values) where T4 : struct
			{
				fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[769]);
				}
			}

			// Token: 0x0600205B RID: 8283 RVA: 0x00058850 File Offset: 0x00056A50
			[CLSCompliant(false)]
			[Obsolete("Use MinmaxTargetExt overload instead")]
			public unsafe static void GetMinmax<T4>(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[,] values) where T4 : struct
			{
				fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[769]);
				}
			}

			// Token: 0x0600205C RID: 8284 RVA: 0x00058890 File Offset: 0x00056A90
			[CLSCompliant(false)]
			[Obsolete("Use MinmaxTargetExt overload instead")]
			public unsafe static void GetMinmax<T4>(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[,,] values) where T4 : struct
			{
				fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[769]);
				}
			}

			// Token: 0x0600205D RID: 8285 RVA: 0x000588D0 File Offset: 0x00056AD0
			[Obsolete("Use MinmaxTargetExt overload instead")]
			public unsafe static void GetMinmax<T4>(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [In] [Out] ref T4 values) where T4 : struct
			{
				fixed (T4* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[769]);
				}
			}

			// Token: 0x0600205E RID: 8286 RVA: 0x000588F8 File Offset: 0x00056AF8
			public static void GetMinmax(MinmaxTargetExt target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values)
			{
				calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, values, GL.EntryPoints[769]);
			}

			// Token: 0x0600205F RID: 8287 RVA: 0x00058910 File Offset: 0x00056B10
			[CLSCompliant(false)]
			public unsafe static void GetMinmax<T4>(MinmaxTargetExt target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[] values) where T4 : struct
			{
				fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[769]);
				}
			}

			// Token: 0x06002060 RID: 8288 RVA: 0x0005894C File Offset: 0x00056B4C
			[CLSCompliant(false)]
			public unsafe static void GetMinmax<T4>(MinmaxTargetExt target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[,] values) where T4 : struct
			{
				fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[769]);
				}
			}

			// Token: 0x06002061 RID: 8289 RVA: 0x0005898C File Offset: 0x00056B8C
			[CLSCompliant(false)]
			public unsafe static void GetMinmax<T4>(MinmaxTargetExt target, bool reset, PixelFormat format, PixelType type, [In] [Out] T4[,,] values) where T4 : struct
			{
				fixed (T4* ptr = ref (values != null && values.Length != 0) ? ref values[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[769]);
				}
			}

			// Token: 0x06002062 RID: 8290 RVA: 0x000589CC File Offset: 0x00056BCC
			public unsafe static void GetMinmax<T4>(MinmaxTargetExt target, bool reset, PixelFormat format, PixelType type, [In] [Out] ref T4 values) where T4 : struct
			{
				fixed (T4* ptr = &values)
				{
					calli(System.Void(System.Int32,System.Boolean,System.Int32,System.Int32,System.IntPtr), target, reset, format, type, ptr, GL.EntryPoints[769]);
				}
			}

			// Token: 0x06002063 RID: 8291 RVA: 0x000589F4 File Offset: 0x00056BF4
			[CLSCompliant(false)]
			[Obsolete("Use MinmaxTargetExt overload instead")]
			public unsafe static void GetMinmaxParameter(ExtHistogram target, ExtHistogram pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[771]);
				}
			}

			// Token: 0x06002064 RID: 8292 RVA: 0x00058A2C File Offset: 0x00056C2C
			[Obsolete("Use MinmaxTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetMinmaxParameter(ExtHistogram target, ExtHistogram pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[771]);
				}
			}

			// Token: 0x06002065 RID: 8293 RVA: 0x00058A50 File Offset: 0x00056C50
			[Obsolete("Use MinmaxTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetMinmaxParameter(ExtHistogram target, ExtHistogram pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[771]);
			}

			// Token: 0x06002066 RID: 8294 RVA: 0x00058A68 File Offset: 0x00056C68
			[CLSCompliant(false)]
			public unsafe static void GetMinmaxParameter(MinmaxTargetExt target, GetMinmaxParameterPNameExt pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[771]);
				}
			}

			// Token: 0x06002067 RID: 8295 RVA: 0x00058AA0 File Offset: 0x00056CA0
			[CLSCompliant(false)]
			public unsafe static void GetMinmaxParameter(MinmaxTargetExt target, GetMinmaxParameterPNameExt pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[771]);
				}
			}

			// Token: 0x06002068 RID: 8296 RVA: 0x00058AC4 File Offset: 0x00056CC4
			[CLSCompliant(false)]
			public unsafe static void GetMinmaxParameter(MinmaxTargetExt target, GetMinmaxParameterPNameExt pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[771]);
			}

			// Token: 0x06002069 RID: 8297 RVA: 0x00058ADC File Offset: 0x00056CDC
			[CLSCompliant(false)]
			[Obsolete("Use MinmaxTargetExt overload instead")]
			public unsafe static void GetMinmaxParameter(ExtHistogram target, ExtHistogram pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[773]);
				}
			}

			// Token: 0x0600206A RID: 8298 RVA: 0x00058B14 File Offset: 0x00056D14
			[Obsolete("Use MinmaxTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetMinmaxParameter(ExtHistogram target, ExtHistogram pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[773]);
				}
			}

			// Token: 0x0600206B RID: 8299 RVA: 0x00058B38 File Offset: 0x00056D38
			[Obsolete("Use MinmaxTargetExt overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetMinmaxParameter(ExtHistogram target, ExtHistogram pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[773]);
			}

			// Token: 0x0600206C RID: 8300 RVA: 0x00058B50 File Offset: 0x00056D50
			[CLSCompliant(false)]
			public unsafe static void GetMinmaxParameter(MinmaxTargetExt target, GetMinmaxParameterPNameExt pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[773]);
				}
			}

			// Token: 0x0600206D RID: 8301 RVA: 0x00058B88 File Offset: 0x00056D88
			[CLSCompliant(false)]
			public unsafe static void GetMinmaxParameter(MinmaxTargetExt target, GetMinmaxParameterPNameExt pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[773]);
				}
			}

			// Token: 0x0600206E RID: 8302 RVA: 0x00058BAC File Offset: 0x00056DAC
			[CLSCompliant(false)]
			public unsafe static void GetMinmaxParameter(MinmaxTargetExt target, GetMinmaxParameterPNameExt pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[773]);
			}

			// Token: 0x0600206F RID: 8303 RVA: 0x00058BC4 File Offset: 0x00056DC4
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texunit, target, pname, ptr, GL.EntryPoints[776]);
				}
			}

			// Token: 0x06002070 RID: 8304 RVA: 0x00058BFC File Offset: 0x00056DFC
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texunit, target, pname, ptr, GL.EntryPoints[776]);
				}
			}

			// Token: 0x06002071 RID: 8305 RVA: 0x00058C20 File Offset: 0x00056E20
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texunit, target, pname, @params, GL.EntryPoints[776]);
			}

			// Token: 0x06002072 RID: 8306 RVA: 0x00058C38 File Offset: 0x00056E38
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, pname, ptr, GL.EntryPoints[777]);
				}
			}

			// Token: 0x06002073 RID: 8307 RVA: 0x00058C70 File Offset: 0x00056E70
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, pname, ptr, GL.EntryPoints[777]);
				}
			}

			// Token: 0x06002074 RID: 8308 RVA: 0x00058C94 File Offset: 0x00056E94
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, pname, @params, GL.EntryPoints[777]);
			}

			// Token: 0x06002075 RID: 8309 RVA: 0x00058CAC File Offset: 0x00056EAC
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Double*), texunit, coord, pname, ptr, GL.EntryPoints[778]);
				}
			}

			// Token: 0x06002076 RID: 8310 RVA: 0x00058CE4 File Offset: 0x00056EE4
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Double*), texunit, coord, pname, ptr, GL.EntryPoints[778]);
				}
			}

			// Token: 0x06002077 RID: 8311 RVA: 0x00058D08 File Offset: 0x00056F08
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] double* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Double*), texunit, coord, pname, @params, GL.EntryPoints[778]);
			}

			// Token: 0x06002078 RID: 8312 RVA: 0x00058D20 File Offset: 0x00056F20
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texunit, coord, pname, ptr, GL.EntryPoints[779]);
				}
			}

			// Token: 0x06002079 RID: 8313 RVA: 0x00058D58 File Offset: 0x00056F58
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texunit, coord, pname, ptr, GL.EntryPoints[779]);
				}
			}

			// Token: 0x0600207A RID: 8314 RVA: 0x00058D7C File Offset: 0x00056F7C
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texunit, coord, pname, @params, GL.EntryPoints[779]);
			}

			// Token: 0x0600207B RID: 8315 RVA: 0x00058D94 File Offset: 0x00056F94
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, coord, pname, ptr, GL.EntryPoints[780]);
				}
			}

			// Token: 0x0600207C RID: 8316 RVA: 0x00058DCC File Offset: 0x00056FCC
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, coord, pname, ptr, GL.EntryPoints[780]);
				}
			}

			// Token: 0x0600207D RID: 8317 RVA: 0x00058DF0 File Offset: 0x00056FF0
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, coord, pname, @params, GL.EntryPoints[780]);
			}

			// Token: 0x0600207E RID: 8318 RVA: 0x00058E08 File Offset: 0x00057008
			public static void GetMultiTexImage(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, [Out] IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, format, type, pixels, GL.EntryPoints[781]);
			}

			// Token: 0x0600207F RID: 8319 RVA: 0x00058E24 File Offset: 0x00057024
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexImage<T5>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] T5[] pixels) where T5 : struct
			{
				fixed (T5* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, format, type, ptr, GL.EntryPoints[781]);
				}
			}

			// Token: 0x06002080 RID: 8320 RVA: 0x00058E60 File Offset: 0x00057060
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexImage<T5>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] T5[,] pixels) where T5 : struct
			{
				fixed (T5* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, format, type, ptr, GL.EntryPoints[781]);
				}
			}

			// Token: 0x06002081 RID: 8321 RVA: 0x00058EA0 File Offset: 0x000570A0
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexImage<T5>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] T5[,,] pixels) where T5 : struct
			{
				fixed (T5* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, format, type, ptr, GL.EntryPoints[781]);
				}
			}

			// Token: 0x06002082 RID: 8322 RVA: 0x00058EE4 File Offset: 0x000570E4
			public unsafe static void GetMultiTexImage<T5>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] ref T5 pixels) where T5 : struct
			{
				fixed (T5* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, format, type, ptr, GL.EntryPoints[781]);
				}
			}

			// Token: 0x06002083 RID: 8323 RVA: 0x00058F0C File Offset: 0x0005710C
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexLevelParameter(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Single*), texunit, target, level, pname, ptr, GL.EntryPoints[782]);
				}
			}

			// Token: 0x06002084 RID: 8324 RVA: 0x00058F48 File Offset: 0x00057148
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexLevelParameter(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Single*), texunit, target, level, pname, ptr, GL.EntryPoints[782]);
				}
			}

			// Token: 0x06002085 RID: 8325 RVA: 0x00058F70 File Offset: 0x00057170
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexLevelParameter(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Single*), texunit, target, level, pname, @params, GL.EntryPoints[782]);
			}

			// Token: 0x06002086 RID: 8326 RVA: 0x00058F88 File Offset: 0x00057188
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexLevelParameter(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, level, pname, ptr, GL.EntryPoints[783]);
				}
			}

			// Token: 0x06002087 RID: 8327 RVA: 0x00058FC4 File Offset: 0x000571C4
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexLevelParameter(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, level, pname, ptr, GL.EntryPoints[783]);
				}
			}

			// Token: 0x06002088 RID: 8328 RVA: 0x00058FEC File Offset: 0x000571EC
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexLevelParameter(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, level, pname, @params, GL.EntryPoints[783]);
			}

			// Token: 0x06002089 RID: 8329 RVA: 0x00059004 File Offset: 0x00057204
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexParameter(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texunit, target, pname, ptr, GL.EntryPoints[784]);
				}
			}

			// Token: 0x0600208A RID: 8330 RVA: 0x0005903C File Offset: 0x0005723C
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexParameter(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texunit, target, pname, ptr, GL.EntryPoints[784]);
				}
			}

			// Token: 0x0600208B RID: 8331 RVA: 0x00059060 File Offset: 0x00057260
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexParameter(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texunit, target, pname, @params, GL.EntryPoints[784]);
			}

			// Token: 0x0600208C RID: 8332 RVA: 0x00059078 File Offset: 0x00057278
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexParameterI(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, pname, ptr, GL.EntryPoints[785]);
				}
			}

			// Token: 0x0600208D RID: 8333 RVA: 0x000590B0 File Offset: 0x000572B0
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexParameterI(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, pname, ptr, GL.EntryPoints[785]);
				}
			}

			// Token: 0x0600208E RID: 8334 RVA: 0x000590D4 File Offset: 0x000572D4
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexParameterI(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, pname, @params, GL.EntryPoints[785]);
			}

			// Token: 0x0600208F RID: 8335 RVA: 0x000590EC File Offset: 0x000572EC
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexParameterI(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32*), texunit, target, pname, ptr, GL.EntryPoints[786]);
				}
			}

			// Token: 0x06002090 RID: 8336 RVA: 0x00059124 File Offset: 0x00057324
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexParameterI(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32*), texunit, target, pname, ptr, GL.EntryPoints[786]);
				}
			}

			// Token: 0x06002091 RID: 8337 RVA: 0x00059148 File Offset: 0x00057348
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexParameterI(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] uint* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32*), texunit, target, pname, @params, GL.EntryPoints[786]);
			}

			// Token: 0x06002092 RID: 8338 RVA: 0x00059160 File Offset: 0x00057360
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexParameter(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, pname, ptr, GL.EntryPoints[787]);
				}
			}

			// Token: 0x06002093 RID: 8339 RVA: 0x00059198 File Offset: 0x00057398
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexParameter(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, pname, ptr, GL.EntryPoints[787]);
				}
			}

			// Token: 0x06002094 RID: 8340 RVA: 0x000591BC File Offset: 0x000573BC
			[CLSCompliant(false)]
			public unsafe static void GetMultiTexParameter(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, pname, @params, GL.EntryPoints[787]);
			}

			// Token: 0x06002095 RID: 8341 RVA: 0x000591D4 File Offset: 0x000573D4
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferParameter(int buffer, ExtDirectStateAccess pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), buffer, pname, ptr, GL.EntryPoints[788]);
				}
			}

			// Token: 0x06002096 RID: 8342 RVA: 0x0005920C File Offset: 0x0005740C
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferParameter(int buffer, ExtDirectStateAccess pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), buffer, pname, ptr, GL.EntryPoints[788]);
				}
			}

			// Token: 0x06002097 RID: 8343 RVA: 0x00059230 File Offset: 0x00057430
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferParameter(int buffer, ExtDirectStateAccess pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), buffer, pname, @params, GL.EntryPoints[788]);
			}

			// Token: 0x06002098 RID: 8344 RVA: 0x00059248 File Offset: 0x00057448
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferParameter(uint buffer, ExtDirectStateAccess pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), buffer, pname, ptr, GL.EntryPoints[788]);
				}
			}

			// Token: 0x06002099 RID: 8345 RVA: 0x00059280 File Offset: 0x00057480
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferParameter(uint buffer, ExtDirectStateAccess pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), buffer, pname, ptr, GL.EntryPoints[788]);
				}
			}

			// Token: 0x0600209A RID: 8346 RVA: 0x000592A4 File Offset: 0x000574A4
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferParameter(uint buffer, ExtDirectStateAccess pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), buffer, pname, @params, GL.EntryPoints[788]);
			}

			// Token: 0x0600209B RID: 8347 RVA: 0x000592BC File Offset: 0x000574BC
			[CLSCompliant(false)]
			public static void GetNamedBufferPointer(int buffer, ExtDirectStateAccess pname, [Out] IntPtr @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), buffer, pname, @params, GL.EntryPoints[790]);
			}

			// Token: 0x0600209C RID: 8348 RVA: 0x000592D4 File Offset: 0x000574D4
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferPointer<T2>(int buffer, ExtDirectStateAccess pname, [In] [Out] T2[] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), buffer, pname, ptr, GL.EntryPoints[790]);
				}
			}

			// Token: 0x0600209D RID: 8349 RVA: 0x0005930C File Offset: 0x0005750C
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferPointer<T2>(int buffer, ExtDirectStateAccess pname, [In] [Out] T2[,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), buffer, pname, ptr, GL.EntryPoints[790]);
				}
			}

			// Token: 0x0600209E RID: 8350 RVA: 0x00059348 File Offset: 0x00057548
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferPointer<T2>(int buffer, ExtDirectStateAccess pname, [In] [Out] T2[,,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), buffer, pname, ptr, GL.EntryPoints[790]);
				}
			}

			// Token: 0x0600209F RID: 8351 RVA: 0x00059384 File Offset: 0x00057584
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferPointer<T2>(int buffer, ExtDirectStateAccess pname, [In] [Out] ref T2 @params) where T2 : struct
			{
				fixed (T2* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), buffer, pname, ptr, GL.EntryPoints[790]);
				}
			}

			// Token: 0x060020A0 RID: 8352 RVA: 0x000593A8 File Offset: 0x000575A8
			[CLSCompliant(false)]
			public static void GetNamedBufferPointer(uint buffer, ExtDirectStateAccess pname, [Out] IntPtr @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), buffer, pname, @params, GL.EntryPoints[790]);
			}

			// Token: 0x060020A1 RID: 8353 RVA: 0x000593C0 File Offset: 0x000575C0
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferPointer<T2>(uint buffer, ExtDirectStateAccess pname, [In] [Out] T2[] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), buffer, pname, ptr, GL.EntryPoints[790]);
				}
			}

			// Token: 0x060020A2 RID: 8354 RVA: 0x000593F8 File Offset: 0x000575F8
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferPointer<T2>(uint buffer, ExtDirectStateAccess pname, [In] [Out] T2[,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), buffer, pname, ptr, GL.EntryPoints[790]);
				}
			}

			// Token: 0x060020A3 RID: 8355 RVA: 0x00059434 File Offset: 0x00057634
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferPointer<T2>(uint buffer, ExtDirectStateAccess pname, [In] [Out] T2[,,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), buffer, pname, ptr, GL.EntryPoints[790]);
				}
			}

			// Token: 0x060020A4 RID: 8356 RVA: 0x00059470 File Offset: 0x00057670
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferPointer<T2>(uint buffer, ExtDirectStateAccess pname, [In] [Out] ref T2 @params) where T2 : struct
			{
				fixed (T2* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), buffer, pname, ptr, GL.EntryPoints[790]);
				}
			}

			// Token: 0x060020A5 RID: 8357 RVA: 0x00059494 File Offset: 0x00057694
			[CLSCompliant(false)]
			public static void GetNamedBufferSubData(int buffer, IntPtr offset, IntPtr size, [Out] IntPtr data)
			{
				calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, data, GL.EntryPoints[791]);
			}

			// Token: 0x060020A6 RID: 8358 RVA: 0x000594AC File Offset: 0x000576AC
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferSubData<T3>(int buffer, IntPtr offset, IntPtr size, [In] [Out] T3[] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, ptr, GL.EntryPoints[791]);
				}
			}

			// Token: 0x060020A7 RID: 8359 RVA: 0x000594E4 File Offset: 0x000576E4
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferSubData<T3>(int buffer, IntPtr offset, IntPtr size, [In] [Out] T3[,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, ptr, GL.EntryPoints[791]);
				}
			}

			// Token: 0x060020A8 RID: 8360 RVA: 0x00059520 File Offset: 0x00057720
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferSubData<T3>(int buffer, IntPtr offset, IntPtr size, [In] [Out] T3[,,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, ptr, GL.EntryPoints[791]);
				}
			}

			// Token: 0x060020A9 RID: 8361 RVA: 0x0005955C File Offset: 0x0005775C
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferSubData<T3>(int buffer, IntPtr offset, IntPtr size, [In] [Out] ref T3 data) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, ptr, GL.EntryPoints[791]);
				}
			}

			// Token: 0x060020AA RID: 8362 RVA: 0x00059580 File Offset: 0x00057780
			[CLSCompliant(false)]
			public static void GetNamedBufferSubData(uint buffer, IntPtr offset, IntPtr size, [Out] IntPtr data)
			{
				calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, data, GL.EntryPoints[791]);
			}

			// Token: 0x060020AB RID: 8363 RVA: 0x00059598 File Offset: 0x00057798
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [In] [Out] T3[] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, ptr, GL.EntryPoints[791]);
				}
			}

			// Token: 0x060020AC RID: 8364 RVA: 0x000595D0 File Offset: 0x000577D0
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [In] [Out] T3[,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, ptr, GL.EntryPoints[791]);
				}
			}

			// Token: 0x060020AD RID: 8365 RVA: 0x0005960C File Offset: 0x0005780C
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [In] [Out] T3[,,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, ptr, GL.EntryPoints[791]);
				}
			}

			// Token: 0x060020AE RID: 8366 RVA: 0x00059648 File Offset: 0x00057848
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [In] [Out] ref T3 data) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, ptr, GL.EntryPoints[791]);
				}
			}

			// Token: 0x060020AF RID: 8367 RVA: 0x0005966C File Offset: 0x0005786C
			[CLSCompliant(false)]
			public unsafe static void GetNamedFramebufferAttachmentParameter(int framebuffer, FramebufferAttachment attachment, ExtDirectStateAccess pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), framebuffer, attachment, pname, ptr, GL.EntryPoints[792]);
				}
			}

			// Token: 0x060020B0 RID: 8368 RVA: 0x000596A4 File Offset: 0x000578A4
			[CLSCompliant(false)]
			public unsafe static void GetNamedFramebufferAttachmentParameter(int framebuffer, FramebufferAttachment attachment, ExtDirectStateAccess pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), framebuffer, attachment, pname, ptr, GL.EntryPoints[792]);
				}
			}

			// Token: 0x060020B1 RID: 8369 RVA: 0x000596C8 File Offset: 0x000578C8
			[CLSCompliant(false)]
			public unsafe static void GetNamedFramebufferAttachmentParameter(int framebuffer, FramebufferAttachment attachment, ExtDirectStateAccess pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), framebuffer, attachment, pname, @params, GL.EntryPoints[792]);
			}

			// Token: 0x060020B2 RID: 8370 RVA: 0x000596E0 File Offset: 0x000578E0
			[CLSCompliant(false)]
			public unsafe static void GetNamedFramebufferAttachmentParameter(uint framebuffer, FramebufferAttachment attachment, ExtDirectStateAccess pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), framebuffer, attachment, pname, ptr, GL.EntryPoints[792]);
				}
			}

			// Token: 0x060020B3 RID: 8371 RVA: 0x00059718 File Offset: 0x00057918
			[CLSCompliant(false)]
			public unsafe static void GetNamedFramebufferAttachmentParameter(uint framebuffer, FramebufferAttachment attachment, ExtDirectStateAccess pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), framebuffer, attachment, pname, ptr, GL.EntryPoints[792]);
				}
			}

			// Token: 0x060020B4 RID: 8372 RVA: 0x0005973C File Offset: 0x0005793C
			[CLSCompliant(false)]
			public unsafe static void GetNamedFramebufferAttachmentParameter(uint framebuffer, FramebufferAttachment attachment, ExtDirectStateAccess pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), framebuffer, attachment, pname, @params, GL.EntryPoints[792]);
			}

			// Token: 0x060020B5 RID: 8373 RVA: 0x00059754 File Offset: 0x00057954
			[CLSCompliant(false)]
			public unsafe static void GetNamedFramebufferParameter(int framebuffer, ExtDirectStateAccess pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, pname, ptr, GL.EntryPoints[793]);
				}
			}

			// Token: 0x060020B6 RID: 8374 RVA: 0x0005978C File Offset: 0x0005798C
			[CLSCompliant(false)]
			public unsafe static void GetNamedFramebufferParameter(int framebuffer, ExtDirectStateAccess pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, pname, ptr, GL.EntryPoints[793]);
				}
			}

			// Token: 0x060020B7 RID: 8375 RVA: 0x000597B0 File Offset: 0x000579B0
			[CLSCompliant(false)]
			public unsafe static void GetNamedFramebufferParameter(int framebuffer, ExtDirectStateAccess pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, pname, @params, GL.EntryPoints[793]);
			}

			// Token: 0x060020B8 RID: 8376 RVA: 0x000597C8 File Offset: 0x000579C8
			[CLSCompliant(false)]
			public unsafe static void GetNamedFramebufferParameter(uint framebuffer, ExtDirectStateAccess pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, pname, ptr, GL.EntryPoints[793]);
				}
			}

			// Token: 0x060020B9 RID: 8377 RVA: 0x00059800 File Offset: 0x00057A00
			[CLSCompliant(false)]
			public unsafe static void GetNamedFramebufferParameter(uint framebuffer, ExtDirectStateAccess pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, pname, ptr, GL.EntryPoints[793]);
				}
			}

			// Token: 0x060020BA RID: 8378 RVA: 0x00059824 File Offset: 0x00057A24
			[CLSCompliant(false)]
			public unsafe static void GetNamedFramebufferParameter(uint framebuffer, ExtDirectStateAccess pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), framebuffer, pname, @params, GL.EntryPoints[793]);
			}

			// Token: 0x060020BB RID: 8379 RVA: 0x0005983C File Offset: 0x00057A3C
			[CLSCompliant(false)]
			[Obsolete("Use ProgramProperty overload instead")]
			public unsafe static void GetNamedProgram(int program, ExtDirectStateAccess target, ExtDirectStateAccess pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, target, pname, ptr, GL.EntryPoints[794]);
				}
			}

			// Token: 0x060020BC RID: 8380 RVA: 0x00059860 File Offset: 0x00057A60
			[Obsolete("Use ProgramProperty overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgram(int program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, target, pname, @params, GL.EntryPoints[794]);
			}

			// Token: 0x060020BD RID: 8381 RVA: 0x00059878 File Offset: 0x00057A78
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgram(int program, ExtDirectStateAccess target, ProgramProperty pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, target, pname, ptr, GL.EntryPoints[794]);
				}
			}

			// Token: 0x060020BE RID: 8382 RVA: 0x0005989C File Offset: 0x00057A9C
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgram(int program, ExtDirectStateAccess target, ProgramProperty pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, target, pname, @params, GL.EntryPoints[794]);
			}

			// Token: 0x060020BF RID: 8383 RVA: 0x000598B4 File Offset: 0x00057AB4
			[CLSCompliant(false)]
			[Obsolete("Use ProgramProperty overload instead")]
			public unsafe static void GetNamedProgram(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, target, pname, ptr, GL.EntryPoints[794]);
				}
			}

			// Token: 0x060020C0 RID: 8384 RVA: 0x000598D8 File Offset: 0x00057AD8
			[CLSCompliant(false)]
			[Obsolete("Use ProgramProperty overload instead")]
			public unsafe static void GetNamedProgram(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, target, pname, @params, GL.EntryPoints[794]);
			}

			// Token: 0x060020C1 RID: 8385 RVA: 0x000598F0 File Offset: 0x00057AF0
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgram(uint program, ExtDirectStateAccess target, ProgramProperty pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, target, pname, ptr, GL.EntryPoints[794]);
				}
			}

			// Token: 0x060020C2 RID: 8386 RVA: 0x00059914 File Offset: 0x00057B14
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgram(uint program, ExtDirectStateAccess target, ProgramProperty pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, target, pname, @params, GL.EntryPoints[794]);
			}

			// Token: 0x060020C3 RID: 8387 RVA: 0x0005992C File Offset: 0x00057B2C
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameter(int program, ExtDirectStateAccess target, int index, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Double*), program, target, index, ptr, GL.EntryPoints[795]);
				}
			}

			// Token: 0x060020C4 RID: 8388 RVA: 0x00059964 File Offset: 0x00057B64
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameter(int program, ExtDirectStateAccess target, int index, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Double*), program, target, index, ptr, GL.EntryPoints[795]);
				}
			}

			// Token: 0x060020C5 RID: 8389 RVA: 0x00059988 File Offset: 0x00057B88
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameter(int program, ExtDirectStateAccess target, int index, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Double*), program, target, index, @params, GL.EntryPoints[795]);
			}

			// Token: 0x060020C6 RID: 8390 RVA: 0x000599A0 File Offset: 0x00057BA0
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameter(uint program, ExtDirectStateAccess target, uint index, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Double*), program, target, index, ptr, GL.EntryPoints[795]);
				}
			}

			// Token: 0x060020C7 RID: 8391 RVA: 0x000599D8 File Offset: 0x00057BD8
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameter(uint program, ExtDirectStateAccess target, uint index, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Double*), program, target, index, ptr, GL.EntryPoints[795]);
				}
			}

			// Token: 0x060020C8 RID: 8392 RVA: 0x000599FC File Offset: 0x00057BFC
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameter(uint program, ExtDirectStateAccess target, uint index, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Double*), program, target, index, @params, GL.EntryPoints[795]);
			}

			// Token: 0x060020C9 RID: 8393 RVA: 0x00059A14 File Offset: 0x00057C14
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameter(int program, ExtDirectStateAccess target, int index, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Single*), program, target, index, ptr, GL.EntryPoints[796]);
				}
			}

			// Token: 0x060020CA RID: 8394 RVA: 0x00059A4C File Offset: 0x00057C4C
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameter(int program, ExtDirectStateAccess target, int index, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Single*), program, target, index, ptr, GL.EntryPoints[796]);
				}
			}

			// Token: 0x060020CB RID: 8395 RVA: 0x00059A70 File Offset: 0x00057C70
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameter(int program, ExtDirectStateAccess target, int index, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Single*), program, target, index, @params, GL.EntryPoints[796]);
			}

			// Token: 0x060020CC RID: 8396 RVA: 0x00059A88 File Offset: 0x00057C88
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameter(uint program, ExtDirectStateAccess target, uint index, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Single*), program, target, index, ptr, GL.EntryPoints[796]);
				}
			}

			// Token: 0x060020CD RID: 8397 RVA: 0x00059AC0 File Offset: 0x00057CC0
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameter(uint program, ExtDirectStateAccess target, uint index, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Single*), program, target, index, ptr, GL.EntryPoints[796]);
				}
			}

			// Token: 0x060020CE RID: 8398 RVA: 0x00059AE4 File Offset: 0x00057CE4
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameter(uint program, ExtDirectStateAccess target, uint index, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Single*), program, target, index, @params, GL.EntryPoints[796]);
			}

			// Token: 0x060020CF RID: 8399 RVA: 0x00059AFC File Offset: 0x00057CFC
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameterI(int program, ExtDirectStateAccess target, int index, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32*), program, target, index, ptr, GL.EntryPoints[797]);
				}
			}

			// Token: 0x060020D0 RID: 8400 RVA: 0x00059B34 File Offset: 0x00057D34
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameterI(int program, ExtDirectStateAccess target, int index, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32*), program, target, index, ptr, GL.EntryPoints[797]);
				}
			}

			// Token: 0x060020D1 RID: 8401 RVA: 0x00059B58 File Offset: 0x00057D58
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameterI(int program, ExtDirectStateAccess target, int index, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32*), program, target, index, @params, GL.EntryPoints[797]);
			}

			// Token: 0x060020D2 RID: 8402 RVA: 0x00059B70 File Offset: 0x00057D70
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameterI(uint program, ExtDirectStateAccess target, uint index, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32*), program, target, index, ptr, GL.EntryPoints[797]);
				}
			}

			// Token: 0x060020D3 RID: 8403 RVA: 0x00059BA8 File Offset: 0x00057DA8
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameterI(uint program, ExtDirectStateAccess target, uint index, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32*), program, target, index, ptr, GL.EntryPoints[797]);
				}
			}

			// Token: 0x060020D4 RID: 8404 RVA: 0x00059BCC File Offset: 0x00057DCC
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameterI(uint program, ExtDirectStateAccess target, uint index, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32*), program, target, index, @params, GL.EntryPoints[797]);
			}

			// Token: 0x060020D5 RID: 8405 RVA: 0x00059BE4 File Offset: 0x00057DE4
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameterI(uint program, ExtDirectStateAccess target, uint index, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32*), program, target, index, ptr, GL.EntryPoints[798]);
				}
			}

			// Token: 0x060020D6 RID: 8406 RVA: 0x00059C1C File Offset: 0x00057E1C
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameterI(uint program, ExtDirectStateAccess target, uint index, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32*), program, target, index, ptr, GL.EntryPoints[798]);
				}
			}

			// Token: 0x060020D7 RID: 8407 RVA: 0x00059C40 File Offset: 0x00057E40
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramLocalParameterI(uint program, ExtDirectStateAccess target, uint index, [Out] uint* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32*), program, target, index, @params, GL.EntryPoints[798]);
			}

			// Token: 0x060020D8 RID: 8408 RVA: 0x00059C58 File Offset: 0x00057E58
			[CLSCompliant(false)]
			public static void GetNamedProgramString(int program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [Out] IntPtr @string)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), program, target, pname, @string, GL.EntryPoints[799]);
			}

			// Token: 0x060020D9 RID: 8409 RVA: 0x00059C70 File Offset: 0x00057E70
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramString<T3>(int program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [In] [Out] T3[] @string) where T3 : struct
			{
				fixed (T3* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), program, target, pname, ptr, GL.EntryPoints[799]);
				}
			}

			// Token: 0x060020DA RID: 8410 RVA: 0x00059CA8 File Offset: 0x00057EA8
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramString<T3>(int program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [In] [Out] T3[,] @string) where T3 : struct
			{
				fixed (T3* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), program, target, pname, ptr, GL.EntryPoints[799]);
				}
			}

			// Token: 0x060020DB RID: 8411 RVA: 0x00059CE4 File Offset: 0x00057EE4
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramString<T3>(int program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [In] [Out] T3[,,] @string) where T3 : struct
			{
				fixed (T3* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), program, target, pname, ptr, GL.EntryPoints[799]);
				}
			}

			// Token: 0x060020DC RID: 8412 RVA: 0x00059D20 File Offset: 0x00057F20
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramString<T3>(int program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [In] [Out] ref T3 @string) where T3 : struct
			{
				fixed (T3* ptr = &@string)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), program, target, pname, ptr, GL.EntryPoints[799]);
				}
			}

			// Token: 0x060020DD RID: 8413 RVA: 0x00059D44 File Offset: 0x00057F44
			[CLSCompliant(false)]
			public static void GetNamedProgramString(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [Out] IntPtr @string)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), program, target, pname, @string, GL.EntryPoints[799]);
			}

			// Token: 0x060020DE RID: 8414 RVA: 0x00059D5C File Offset: 0x00057F5C
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramString<T3>(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [In] [Out] T3[] @string) where T3 : struct
			{
				fixed (T3* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), program, target, pname, ptr, GL.EntryPoints[799]);
				}
			}

			// Token: 0x060020DF RID: 8415 RVA: 0x00059D94 File Offset: 0x00057F94
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramString<T3>(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [In] [Out] T3[,] @string) where T3 : struct
			{
				fixed (T3* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), program, target, pname, ptr, GL.EntryPoints[799]);
				}
			}

			// Token: 0x060020E0 RID: 8416 RVA: 0x00059DD0 File Offset: 0x00057FD0
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramString<T3>(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [In] [Out] T3[,,] @string) where T3 : struct
			{
				fixed (T3* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), program, target, pname, ptr, GL.EntryPoints[799]);
				}
			}

			// Token: 0x060020E1 RID: 8417 RVA: 0x00059E0C File Offset: 0x0005800C
			[CLSCompliant(false)]
			public unsafe static void GetNamedProgramString<T3>(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [In] [Out] ref T3 @string) where T3 : struct
			{
				fixed (T3* ptr = &@string)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), program, target, pname, ptr, GL.EntryPoints[799]);
				}
			}

			// Token: 0x060020E2 RID: 8418 RVA: 0x00059E30 File Offset: 0x00058030
			[CLSCompliant(false)]
			public unsafe static void GetNamedRenderbufferParameter(int renderbuffer, RenderbufferParameterName pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), renderbuffer, pname, ptr, GL.EntryPoints[800]);
				}
			}

			// Token: 0x060020E3 RID: 8419 RVA: 0x00059E68 File Offset: 0x00058068
			[CLSCompliant(false)]
			public unsafe static void GetNamedRenderbufferParameter(int renderbuffer, RenderbufferParameterName pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), renderbuffer, pname, ptr, GL.EntryPoints[800]);
				}
			}

			// Token: 0x060020E4 RID: 8420 RVA: 0x00059E8C File Offset: 0x0005808C
			[CLSCompliant(false)]
			public unsafe static void GetNamedRenderbufferParameter(int renderbuffer, RenderbufferParameterName pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), renderbuffer, pname, @params, GL.EntryPoints[800]);
			}

			// Token: 0x060020E5 RID: 8421 RVA: 0x00059EA4 File Offset: 0x000580A4
			[CLSCompliant(false)]
			public unsafe static void GetNamedRenderbufferParameter(uint renderbuffer, RenderbufferParameterName pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), renderbuffer, pname, ptr, GL.EntryPoints[800]);
				}
			}

			// Token: 0x060020E6 RID: 8422 RVA: 0x00059EDC File Offset: 0x000580DC
			[CLSCompliant(false)]
			public unsafe static void GetNamedRenderbufferParameter(uint renderbuffer, RenderbufferParameterName pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), renderbuffer, pname, ptr, GL.EntryPoints[800]);
				}
			}

			// Token: 0x060020E7 RID: 8423 RVA: 0x00059F00 File Offset: 0x00058100
			[CLSCompliant(false)]
			public unsafe static void GetNamedRenderbufferParameter(uint renderbuffer, RenderbufferParameterName pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), renderbuffer, pname, @params, GL.EntryPoints[800]);
			}

			// Token: 0x060020E8 RID: 8424 RVA: 0x00059F18 File Offset: 0x00058118
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectLabel(ExtDebugLabel type, int @object, int bufSize, [Out] int[] length, [Out] StringBuilder label)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), type, @object, bufSize, ptr2, intPtr, GL.EntryPoints[825]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060020E9 RID: 8425 RVA: 0x00059F6C File Offset: 0x0005816C
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectLabel(ExtDebugLabel type, int @object, int bufSize, out int length, [Out] StringBuilder label)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), type, @object, bufSize, ptr2, intPtr, GL.EntryPoints[825]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060020EA RID: 8426 RVA: 0x00059FAC File Offset: 0x000581AC
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(ExtDebugLabel type, int @object, int bufSize, [Out] int* length, [Out] StringBuilder label)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), type, @object, bufSize, length, intPtr, GL.EntryPoints[825]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x060020EB RID: 8427 RVA: 0x00059FEC File Offset: 0x000581EC
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectLabel(ExtDebugLabel type, uint @object, int bufSize, [Out] int[] length, [Out] StringBuilder label)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), type, @object, bufSize, ptr2, intPtr, GL.EntryPoints[825]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060020EC RID: 8428 RVA: 0x0005A040 File Offset: 0x00058240
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(ExtDebugLabel type, uint @object, int bufSize, out int length, [Out] StringBuilder label)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), type, @object, bufSize, ptr2, intPtr, GL.EntryPoints[825]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060020ED RID: 8429 RVA: 0x0005A080 File Offset: 0x00058280
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(ExtDebugLabel type, uint @object, int bufSize, [Out] int* length, [Out] StringBuilder label)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), type, @object, bufSize, length, intPtr, GL.EntryPoints[825]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x060020EE RID: 8430 RVA: 0x0005A0C0 File Offset: 0x000582C0
			[CLSCompliant(false)]
			public unsafe static void GetPixelTransformParameter(ExtPixelTransform target, ExtPixelTransform pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[863]);
				}
			}

			// Token: 0x060020EF RID: 8431 RVA: 0x0005A0F8 File Offset: 0x000582F8
			[CLSCompliant(false)]
			public unsafe static void GetPixelTransformParameter(ExtPixelTransform target, ExtPixelTransform pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[863]);
				}
			}

			// Token: 0x060020F0 RID: 8432 RVA: 0x0005A11C File Offset: 0x0005831C
			[CLSCompliant(false)]
			public unsafe static void GetPixelTransformParameter(ExtPixelTransform target, ExtPixelTransform pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[863]);
			}

			// Token: 0x060020F1 RID: 8433 RVA: 0x0005A134 File Offset: 0x00058334
			[CLSCompliant(false)]
			public unsafe static void GetPixelTransformParameter(ExtPixelTransform target, ExtPixelTransform pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[864]);
				}
			}

			// Token: 0x060020F2 RID: 8434 RVA: 0x0005A16C File Offset: 0x0005836C
			[CLSCompliant(false)]
			public unsafe static void GetPixelTransformParameter(ExtPixelTransform target, ExtPixelTransform pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[864]);
				}
			}

			// Token: 0x060020F3 RID: 8435 RVA: 0x0005A190 File Offset: 0x00058390
			[CLSCompliant(false)]
			public unsafe static void GetPixelTransformParameter(ExtPixelTransform target, ExtPixelTransform pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[864]);
			}

			// Token: 0x060020F4 RID: 8436 RVA: 0x0005A1A8 File Offset: 0x000583A8
			[CLSCompliant(false)]
			public static void GetPointer(ExtDirectStateAccess pname, int index, [Out] IntPtr @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.IntPtr), pname, index, @params, GL.EntryPoints[865]);
			}

			// Token: 0x060020F5 RID: 8437 RVA: 0x0005A1C0 File Offset: 0x000583C0
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T2>(ExtDirectStateAccess pname, int index, [In] [Out] T2[] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.IntPtr), pname, index, ptr, GL.EntryPoints[865]);
				}
			}

			// Token: 0x060020F6 RID: 8438 RVA: 0x0005A1F8 File Offset: 0x000583F8
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T2>(ExtDirectStateAccess pname, int index, [In] [Out] T2[,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.IntPtr), pname, index, ptr, GL.EntryPoints[865]);
				}
			}

			// Token: 0x060020F7 RID: 8439 RVA: 0x0005A234 File Offset: 0x00058434
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T2>(ExtDirectStateAccess pname, int index, [In] [Out] T2[,,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.IntPtr), pname, index, ptr, GL.EntryPoints[865]);
				}
			}

			// Token: 0x060020F8 RID: 8440 RVA: 0x0005A270 File Offset: 0x00058470
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T2>(ExtDirectStateAccess pname, int index, [In] [Out] ref T2 @params) where T2 : struct
			{
				fixed (T2* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.IntPtr), pname, index, ptr, GL.EntryPoints[865]);
				}
			}

			// Token: 0x060020F9 RID: 8441 RVA: 0x0005A294 File Offset: 0x00058494
			[CLSCompliant(false)]
			public static void GetPointer(ExtDirectStateAccess pname, uint index, [Out] IntPtr @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.IntPtr), pname, index, @params, GL.EntryPoints[865]);
			}

			// Token: 0x060020FA RID: 8442 RVA: 0x0005A2AC File Offset: 0x000584AC
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T2>(ExtDirectStateAccess pname, uint index, [In] [Out] T2[] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.IntPtr), pname, index, ptr, GL.EntryPoints[865]);
				}
			}

			// Token: 0x060020FB RID: 8443 RVA: 0x0005A2E4 File Offset: 0x000584E4
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T2>(ExtDirectStateAccess pname, uint index, [In] [Out] T2[,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.IntPtr), pname, index, ptr, GL.EntryPoints[865]);
				}
			}

			// Token: 0x060020FC RID: 8444 RVA: 0x0005A320 File Offset: 0x00058520
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T2>(ExtDirectStateAccess pname, uint index, [In] [Out] T2[,,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.IntPtr), pname, index, ptr, GL.EntryPoints[865]);
				}
			}

			// Token: 0x060020FD RID: 8445 RVA: 0x0005A35C File Offset: 0x0005855C
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T2>(ExtDirectStateAccess pname, uint index, [In] [Out] ref T2 @params) where T2 : struct
			{
				fixed (T2* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.IntPtr), pname, index, ptr, GL.EntryPoints[865]);
				}
			}

			// Token: 0x060020FE RID: 8446 RVA: 0x0005A380 File Offset: 0x00058580
			[CLSCompliant(false)]
			public static void GetPointerIndexed(ExtDirectStateAccess target, int index, [Out] IntPtr data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.IntPtr), target, index, data, GL.EntryPoints[866]);
			}

			// Token: 0x060020FF RID: 8447 RVA: 0x0005A398 File Offset: 0x00058598
			[CLSCompliant(false)]
			public unsafe static void GetPointerIndexed<T2>(ExtDirectStateAccess target, int index, [In] [Out] T2[] data) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.IntPtr), target, index, ptr, GL.EntryPoints[866]);
				}
			}

			// Token: 0x06002100 RID: 8448 RVA: 0x0005A3D0 File Offset: 0x000585D0
			[CLSCompliant(false)]
			public unsafe static void GetPointerIndexed<T2>(ExtDirectStateAccess target, int index, [In] [Out] T2[,] data) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.IntPtr), target, index, ptr, GL.EntryPoints[866]);
				}
			}

			// Token: 0x06002101 RID: 8449 RVA: 0x0005A40C File Offset: 0x0005860C
			[CLSCompliant(false)]
			public unsafe static void GetPointerIndexed<T2>(ExtDirectStateAccess target, int index, [In] [Out] T2[,,] data) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.IntPtr), target, index, ptr, GL.EntryPoints[866]);
				}
			}

			// Token: 0x06002102 RID: 8450 RVA: 0x0005A448 File Offset: 0x00058648
			[CLSCompliant(false)]
			public unsafe static void GetPointerIndexed<T2>(ExtDirectStateAccess target, int index, [In] [Out] ref T2 data) where T2 : struct
			{
				fixed (T2* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.IntPtr), target, index, ptr, GL.EntryPoints[866]);
				}
			}

			// Token: 0x06002103 RID: 8451 RVA: 0x0005A46C File Offset: 0x0005866C
			[CLSCompliant(false)]
			public static void GetPointerIndexed(ExtDirectStateAccess target, uint index, [Out] IntPtr data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.IntPtr), target, index, data, GL.EntryPoints[866]);
			}

			// Token: 0x06002104 RID: 8452 RVA: 0x0005A484 File Offset: 0x00058684
			[CLSCompliant(false)]
			public unsafe static void GetPointerIndexed<T2>(ExtDirectStateAccess target, uint index, [In] [Out] T2[] data) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.IntPtr), target, index, ptr, GL.EntryPoints[866]);
				}
			}

			// Token: 0x06002105 RID: 8453 RVA: 0x0005A4BC File Offset: 0x000586BC
			[CLSCompliant(false)]
			public unsafe static void GetPointerIndexed<T2>(ExtDirectStateAccess target, uint index, [In] [Out] T2[,] data) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.IntPtr), target, index, ptr, GL.EntryPoints[866]);
				}
			}

			// Token: 0x06002106 RID: 8454 RVA: 0x0005A4F8 File Offset: 0x000586F8
			[CLSCompliant(false)]
			public unsafe static void GetPointerIndexed<T2>(ExtDirectStateAccess target, uint index, [In] [Out] T2[,,] data) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.IntPtr), target, index, ptr, GL.EntryPoints[866]);
				}
			}

			// Token: 0x06002107 RID: 8455 RVA: 0x0005A534 File Offset: 0x00058734
			[CLSCompliant(false)]
			public unsafe static void GetPointerIndexed<T2>(ExtDirectStateAccess target, uint index, [In] [Out] ref T2 data) where T2 : struct
			{
				fixed (T2* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.IntPtr), target, index, ptr, GL.EntryPoints[866]);
				}
			}

			// Token: 0x06002108 RID: 8456 RVA: 0x0005A558 File Offset: 0x00058758
			public static void GetPointer(GetPointervPName pname, [Out] IntPtr @params)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, @params, GL.EntryPoints[868]);
			}

			// Token: 0x06002109 RID: 8457 RVA: 0x0005A56C File Offset: 0x0005876C
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T1>(GetPointervPName pname, [In] [Out] T1[] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[868]);
				}
			}

			// Token: 0x0600210A RID: 8458 RVA: 0x0005A5A0 File Offset: 0x000587A0
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T1>(GetPointervPName pname, [In] [Out] T1[,] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[868]);
				}
			}

			// Token: 0x0600210B RID: 8459 RVA: 0x0005A5D8 File Offset: 0x000587D8
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T1>(GetPointervPName pname, [In] [Out] T1[,,] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[868]);
				}
			}

			// Token: 0x0600210C RID: 8460 RVA: 0x0005A614 File Offset: 0x00058814
			public unsafe static void GetPointer<T1>(GetPointervPName pname, [In] [Out] ref T1 @params) where T1 : struct
			{
				fixed (T1* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[868]);
				}
			}

			// Token: 0x0600210D RID: 8461 RVA: 0x0005A638 File Offset: 0x00058838
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipelineInfoLog(int pipeline, int bufSize, [Out] int[] length, [Out] StringBuilder infoLog)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, ptr2, intPtr, GL.EntryPoints[890]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x0600210E RID: 8462 RVA: 0x0005A688 File Offset: 0x00058888
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipelineInfoLog(int pipeline, int bufSize, out int length, [Out] StringBuilder infoLog)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, ptr2, intPtr, GL.EntryPoints[890]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x0600210F RID: 8463 RVA: 0x0005A6C8 File Offset: 0x000588C8
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetProgramPipelineInfoLog(int pipeline, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, length, intPtr, GL.EntryPoints[890]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06002110 RID: 8464 RVA: 0x0005A704 File Offset: 0x00058904
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [Out] int[] length, [Out] StringBuilder infoLog)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, ptr2, intPtr, GL.EntryPoints[890]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06002111 RID: 8465 RVA: 0x0005A754 File Offset: 0x00058954
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, out int length, [Out] StringBuilder infoLog)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, ptr2, intPtr, GL.EntryPoints[890]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06002112 RID: 8466 RVA: 0x0005A794 File Offset: 0x00058994
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, length, intPtr, GL.EntryPoints[890]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06002113 RID: 8467 RVA: 0x0005A7D0 File Offset: 0x000589D0
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipeline(int pipeline, ExtSeparateShaderObjects pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, ptr, GL.EntryPoints[892]);
				}
			}

			// Token: 0x06002114 RID: 8468 RVA: 0x0005A808 File Offset: 0x00058A08
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipeline(int pipeline, ExtSeparateShaderObjects pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, ptr, GL.EntryPoints[892]);
				}
			}

			// Token: 0x06002115 RID: 8469 RVA: 0x0005A82C File Offset: 0x00058A2C
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipeline(int pipeline, ExtSeparateShaderObjects pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, @params, GL.EntryPoints[892]);
			}

			// Token: 0x06002116 RID: 8470 RVA: 0x0005A844 File Offset: 0x00058A44
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipeline(uint pipeline, ExtSeparateShaderObjects pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, ptr, GL.EntryPoints[892]);
				}
			}

			// Token: 0x06002117 RID: 8471 RVA: 0x0005A87C File Offset: 0x00058A7C
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipeline(uint pipeline, ExtSeparateShaderObjects pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, ptr, GL.EntryPoints[892]);
				}
			}

			// Token: 0x06002118 RID: 8472 RVA: 0x0005A8A0 File Offset: 0x00058AA0
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipeline(uint pipeline, ExtSeparateShaderObjects pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, @params, GL.EntryPoints[892]);
			}

			// Token: 0x06002119 RID: 8473 RVA: 0x0005A8B8 File Offset: 0x00058AB8
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, ExtTimerQuery pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[906]);
				}
			}

			// Token: 0x0600211A RID: 8474 RVA: 0x0005A8F0 File Offset: 0x00058AF0
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, ExtTimerQuery pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[906]);
				}
			}

			// Token: 0x0600211B RID: 8475 RVA: 0x0005A914 File Offset: 0x00058B14
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, ExtTimerQuery pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, @params, GL.EntryPoints[906]);
			}

			// Token: 0x0600211C RID: 8476 RVA: 0x0005A92C File Offset: 0x00058B2C
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, ExtTimerQuery pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[906]);
				}
			}

			// Token: 0x0600211D RID: 8477 RVA: 0x0005A964 File Offset: 0x00058B64
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, ExtTimerQuery pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[906]);
				}
			}

			// Token: 0x0600211E RID: 8478 RVA: 0x0005A988 File Offset: 0x00058B88
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, ExtTimerQuery pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, @params, GL.EntryPoints[906]);
			}

			// Token: 0x0600211F RID: 8479 RVA: 0x0005A9A0 File Offset: 0x00058BA0
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, ExtTimerQuery pname, [Out] ulong[] @params)
			{
				fixed (ulong* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, ptr, GL.EntryPoints[910]);
				}
			}

			// Token: 0x06002120 RID: 8480 RVA: 0x0005A9D8 File Offset: 0x00058BD8
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, ExtTimerQuery pname, out ulong @params)
			{
				fixed (ulong* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, ptr, GL.EntryPoints[910]);
				}
			}

			// Token: 0x06002121 RID: 8481 RVA: 0x0005A9FC File Offset: 0x00058BFC
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, ExtTimerQuery pname, [Out] ulong* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, @params, GL.EntryPoints[910]);
			}

			// Token: 0x06002122 RID: 8482 RVA: 0x0005AA14 File Offset: 0x00058C14
			[CLSCompliant(false)]
			public unsafe static void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[914]);
				}
			}

			// Token: 0x06002123 RID: 8483 RVA: 0x0005AA4C File Offset: 0x00058C4C
			[CLSCompliant(false)]
			public unsafe static void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[914]);
				}
			}

			// Token: 0x06002124 RID: 8484 RVA: 0x0005AA70 File Offset: 0x00058C70
			[CLSCompliant(false)]
			public unsafe static void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[914]);
			}

			// Token: 0x06002125 RID: 8485 RVA: 0x0005AA88 File Offset: 0x00058C88
			public static void GetSeparableFilter(SeparableTargetExt target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [Out] IntPtr span)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, column, span, GL.EntryPoints[920]);
			}

			// Token: 0x06002126 RID: 8486 RVA: 0x0005AAA4 File Offset: 0x00058CA4
			[CLSCompliant(false)]
			public unsafe static void GetSeparableFilter<T3, T4, T5>(SeparableTargetExt target, PixelFormat format, PixelType type, [In] [Out] T3[] row, [In] [Out] T4[] column, [In] [Out] T5[] span) where T3 : struct where T4 : struct where T5 : struct
			{
				fixed (T3* ptr = ref (row != null && row.Length != 0) ? ref row[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (T4* ptr3 = ref (column != null && column.Length != 0) ? ref column[0] : ref *null)
					{
						T4* ptr4 = ptr3;
						fixed (T5* ptr5 = ref (span != null && span.Length != 0) ? ref span[0] : ref *null)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[920]);
						}
					}
				}
			}

			// Token: 0x06002127 RID: 8487 RVA: 0x0005AB0C File Offset: 0x00058D0C
			[CLSCompliant(false)]
			public unsafe static void GetSeparableFilter<T3, T4, T5>(SeparableTargetExt target, PixelFormat format, PixelType type, [In] [Out] T3[,] row, [In] [Out] T4[,] column, [In] [Out] T5[,] span) where T3 : struct where T4 : struct where T5 : struct
			{
				fixed (T3* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (T4* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0] : ref *null)
					{
						T4* ptr4 = ptr3;
						fixed (T5* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0] : ref *null)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[920]);
						}
					}
				}
			}

			// Token: 0x06002128 RID: 8488 RVA: 0x0005AB80 File Offset: 0x00058D80
			[CLSCompliant(false)]
			public unsafe static void GetSeparableFilter<T3, T4, T5>(SeparableTargetExt target, PixelFormat format, PixelType type, [In] [Out] T3[,,] row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
			{
				fixed (T3* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (T4* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
					{
						T4* ptr4 = ptr3;
						fixed (T5* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[920]);
						}
					}
				}
			}

			// Token: 0x06002129 RID: 8489 RVA: 0x0005ABF8 File Offset: 0x00058DF8
			public unsafe static void GetSeparableFilter<T3, T4, T5>(SeparableTargetExt target, PixelFormat format, PixelType type, [In] [Out] ref T3 row, [In] [Out] ref T4 column, [In] [Out] ref T5 span) where T3 : struct where T4 : struct where T5 : struct
			{
				fixed (T3* ptr = &row)
				{
					T3* ptr2 = ptr;
					fixed (T4* ptr3 = &column)
					{
						T4* ptr4 = ptr3;
						fixed (T5* ptr5 = &span)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[920]);
						}
					}
				}
			}

			// Token: 0x0600212A RID: 8490 RVA: 0x0005AC28 File Offset: 0x00058E28
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[948]);
				}
			}

			// Token: 0x0600212B RID: 8491 RVA: 0x0005AC60 File Offset: 0x00058E60
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[948]);
				}
			}

			// Token: 0x0600212C RID: 8492 RVA: 0x0005AC84 File Offset: 0x00058E84
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[948]);
			}

			// Token: 0x0600212D RID: 8493 RVA: 0x0005AC9C File Offset: 0x00058E9C
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[950]);
				}
			}

			// Token: 0x0600212E RID: 8494 RVA: 0x0005ACD4 File Offset: 0x00058ED4
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[950]);
				}
			}

			// Token: 0x0600212F RID: 8495 RVA: 0x0005ACF8 File Offset: 0x00058EF8
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] uint* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, @params, GL.EntryPoints[950]);
			}

			// Token: 0x06002130 RID: 8496 RVA: 0x0005AD10 File Offset: 0x00058F10
			[CLSCompliant(false)]
			public static void GetTextureImage(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, [Out] IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, format, type, pixels, GL.EntryPoints[956]);
			}

			// Token: 0x06002131 RID: 8497 RVA: 0x0005AD2C File Offset: 0x00058F2C
			[CLSCompliant(false)]
			public unsafe static void GetTextureImage<T5>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] T5[] pixels) where T5 : struct
			{
				fixed (T5* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, format, type, ptr, GL.EntryPoints[956]);
				}
			}

			// Token: 0x06002132 RID: 8498 RVA: 0x0005AD68 File Offset: 0x00058F68
			[CLSCompliant(false)]
			public unsafe static void GetTextureImage<T5>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] T5[,] pixels) where T5 : struct
			{
				fixed (T5* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, format, type, ptr, GL.EntryPoints[956]);
				}
			}

			// Token: 0x06002133 RID: 8499 RVA: 0x0005ADA8 File Offset: 0x00058FA8
			[CLSCompliant(false)]
			public unsafe static void GetTextureImage<T5>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] T5[,,] pixels) where T5 : struct
			{
				fixed (T5* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, format, type, ptr, GL.EntryPoints[956]);
				}
			}

			// Token: 0x06002134 RID: 8500 RVA: 0x0005ADEC File Offset: 0x00058FEC
			[CLSCompliant(false)]
			public unsafe static void GetTextureImage<T5>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] ref T5 pixels) where T5 : struct
			{
				fixed (T5* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, format, type, ptr, GL.EntryPoints[956]);
				}
			}

			// Token: 0x06002135 RID: 8501 RVA: 0x0005AE14 File Offset: 0x00059014
			[CLSCompliant(false)]
			public static void GetTextureImage(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, [Out] IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, format, type, pixels, GL.EntryPoints[956]);
			}

			// Token: 0x06002136 RID: 8502 RVA: 0x0005AE30 File Offset: 0x00059030
			[CLSCompliant(false)]
			public unsafe static void GetTextureImage<T5>(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] T5[] pixels) where T5 : struct
			{
				fixed (T5* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, format, type, ptr, GL.EntryPoints[956]);
				}
			}

			// Token: 0x06002137 RID: 8503 RVA: 0x0005AE6C File Offset: 0x0005906C
			[CLSCompliant(false)]
			public unsafe static void GetTextureImage<T5>(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] T5[,] pixels) where T5 : struct
			{
				fixed (T5* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, format, type, ptr, GL.EntryPoints[956]);
				}
			}

			// Token: 0x06002138 RID: 8504 RVA: 0x0005AEAC File Offset: 0x000590AC
			[CLSCompliant(false)]
			public unsafe static void GetTextureImage<T5>(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] T5[,,] pixels) where T5 : struct
			{
				fixed (T5* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, format, type, ptr, GL.EntryPoints[956]);
				}
			}

			// Token: 0x06002139 RID: 8505 RVA: 0x0005AEF0 File Offset: 0x000590F0
			[CLSCompliant(false)]
			public unsafe static void GetTextureImage<T5>(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, [In] [Out] ref T5 pixels) where T5 : struct
			{
				fixed (T5* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, format, type, ptr, GL.EntryPoints[956]);
				}
			}

			// Token: 0x0600213A RID: 8506 RVA: 0x0005AF18 File Offset: 0x00059118
			[CLSCompliant(false)]
			public unsafe static void GetTextureLevelParameter(int texture, TextureTarget target, int level, GetTextureParameter pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Single*), texture, target, level, pname, ptr, GL.EntryPoints[957]);
				}
			}

			// Token: 0x0600213B RID: 8507 RVA: 0x0005AF54 File Offset: 0x00059154
			[CLSCompliant(false)]
			public unsafe static void GetTextureLevelParameter(int texture, TextureTarget target, int level, GetTextureParameter pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Single*), texture, target, level, pname, ptr, GL.EntryPoints[957]);
				}
			}

			// Token: 0x0600213C RID: 8508 RVA: 0x0005AF7C File Offset: 0x0005917C
			[CLSCompliant(false)]
			public unsafe static void GetTextureLevelParameter(int texture, TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Single*), texture, target, level, pname, @params, GL.EntryPoints[957]);
			}

			// Token: 0x0600213D RID: 8509 RVA: 0x0005AF94 File Offset: 0x00059194
			[CLSCompliant(false)]
			public unsafe static void GetTextureLevelParameter(uint texture, TextureTarget target, int level, GetTextureParameter pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Single*), texture, target, level, pname, ptr, GL.EntryPoints[957]);
				}
			}

			// Token: 0x0600213E RID: 8510 RVA: 0x0005AFD0 File Offset: 0x000591D0
			[CLSCompliant(false)]
			public unsafe static void GetTextureLevelParameter(uint texture, TextureTarget target, int level, GetTextureParameter pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Single*), texture, target, level, pname, ptr, GL.EntryPoints[957]);
				}
			}

			// Token: 0x0600213F RID: 8511 RVA: 0x0005AFF8 File Offset: 0x000591F8
			[CLSCompliant(false)]
			public unsafe static void GetTextureLevelParameter(uint texture, TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Single*), texture, target, level, pname, @params, GL.EntryPoints[957]);
			}

			// Token: 0x06002140 RID: 8512 RVA: 0x0005B010 File Offset: 0x00059210
			[CLSCompliant(false)]
			public unsafe static void GetTextureLevelParameter(int texture, TextureTarget target, int level, GetTextureParameter pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32*), texture, target, level, pname, ptr, GL.EntryPoints[958]);
				}
			}

			// Token: 0x06002141 RID: 8513 RVA: 0x0005B04C File Offset: 0x0005924C
			[CLSCompliant(false)]
			public unsafe static void GetTextureLevelParameter(int texture, TextureTarget target, int level, GetTextureParameter pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32*), texture, target, level, pname, ptr, GL.EntryPoints[958]);
				}
			}

			// Token: 0x06002142 RID: 8514 RVA: 0x0005B074 File Offset: 0x00059274
			[CLSCompliant(false)]
			public unsafe static void GetTextureLevelParameter(int texture, TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32*), texture, target, level, pname, @params, GL.EntryPoints[958]);
			}

			// Token: 0x06002143 RID: 8515 RVA: 0x0005B08C File Offset: 0x0005928C
			[CLSCompliant(false)]
			public unsafe static void GetTextureLevelParameter(uint texture, TextureTarget target, int level, GetTextureParameter pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32*), texture, target, level, pname, ptr, GL.EntryPoints[958]);
				}
			}

			// Token: 0x06002144 RID: 8516 RVA: 0x0005B0C8 File Offset: 0x000592C8
			[CLSCompliant(false)]
			public unsafe static void GetTextureLevelParameter(uint texture, TextureTarget target, int level, GetTextureParameter pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32*), texture, target, level, pname, ptr, GL.EntryPoints[958]);
				}
			}

			// Token: 0x06002145 RID: 8517 RVA: 0x0005B0F0 File Offset: 0x000592F0
			[CLSCompliant(false)]
			public unsafe static void GetTextureLevelParameter(uint texture, TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32*), texture, target, level, pname, @params, GL.EntryPoints[958]);
			}

			// Token: 0x06002146 RID: 8518 RVA: 0x0005B108 File Offset: 0x00059308
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameter(int texture, TextureTarget target, GetTextureParameter pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), texture, target, pname, ptr, GL.EntryPoints[959]);
				}
			}

			// Token: 0x06002147 RID: 8519 RVA: 0x0005B140 File Offset: 0x00059340
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameter(int texture, TextureTarget target, GetTextureParameter pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), texture, target, pname, ptr, GL.EntryPoints[959]);
				}
			}

			// Token: 0x06002148 RID: 8520 RVA: 0x0005B164 File Offset: 0x00059364
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameter(int texture, TextureTarget target, GetTextureParameter pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), texture, target, pname, @params, GL.EntryPoints[959]);
			}

			// Token: 0x06002149 RID: 8521 RVA: 0x0005B17C File Offset: 0x0005937C
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameter(uint texture, TextureTarget target, GetTextureParameter pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), texture, target, pname, ptr, GL.EntryPoints[959]);
				}
			}

			// Token: 0x0600214A RID: 8522 RVA: 0x0005B1B4 File Offset: 0x000593B4
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameter(uint texture, TextureTarget target, GetTextureParameter pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), texture, target, pname, ptr, GL.EntryPoints[959]);
				}
			}

			// Token: 0x0600214B RID: 8523 RVA: 0x0005B1D8 File Offset: 0x000593D8
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameter(uint texture, TextureTarget target, GetTextureParameter pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), texture, target, pname, @params, GL.EntryPoints[959]);
			}

			// Token: 0x0600214C RID: 8524 RVA: 0x0005B1F0 File Offset: 0x000593F0
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameterI(int texture, TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, ptr, GL.EntryPoints[960]);
				}
			}

			// Token: 0x0600214D RID: 8525 RVA: 0x0005B228 File Offset: 0x00059428
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameterI(int texture, TextureTarget target, GetTextureParameter pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, ptr, GL.EntryPoints[960]);
				}
			}

			// Token: 0x0600214E RID: 8526 RVA: 0x0005B24C File Offset: 0x0005944C
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameterI(int texture, TextureTarget target, GetTextureParameter pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, @params, GL.EntryPoints[960]);
			}

			// Token: 0x0600214F RID: 8527 RVA: 0x0005B264 File Offset: 0x00059464
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameterI(uint texture, TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, ptr, GL.EntryPoints[960]);
				}
			}

			// Token: 0x06002150 RID: 8528 RVA: 0x0005B29C File Offset: 0x0005949C
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameterI(uint texture, TextureTarget target, GetTextureParameter pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, ptr, GL.EntryPoints[960]);
				}
			}

			// Token: 0x06002151 RID: 8529 RVA: 0x0005B2C0 File Offset: 0x000594C0
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameterI(uint texture, TextureTarget target, GetTextureParameter pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, @params, GL.EntryPoints[960]);
			}

			// Token: 0x06002152 RID: 8530 RVA: 0x0005B2D8 File Offset: 0x000594D8
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameterI(uint texture, TextureTarget target, GetTextureParameter pname, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), texture, target, pname, ptr, GL.EntryPoints[961]);
				}
			}

			// Token: 0x06002153 RID: 8531 RVA: 0x0005B310 File Offset: 0x00059510
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameterI(uint texture, TextureTarget target, GetTextureParameter pname, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), texture, target, pname, ptr, GL.EntryPoints[961]);
				}
			}

			// Token: 0x06002154 RID: 8532 RVA: 0x0005B334 File Offset: 0x00059534
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameterI(uint texture, TextureTarget target, GetTextureParameter pname, [Out] uint* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), texture, target, pname, @params, GL.EntryPoints[961]);
			}

			// Token: 0x06002155 RID: 8533 RVA: 0x0005B34C File Offset: 0x0005954C
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameter(int texture, TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, ptr, GL.EntryPoints[962]);
				}
			}

			// Token: 0x06002156 RID: 8534 RVA: 0x0005B384 File Offset: 0x00059584
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameter(int texture, TextureTarget target, GetTextureParameter pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, ptr, GL.EntryPoints[962]);
				}
			}

			// Token: 0x06002157 RID: 8535 RVA: 0x0005B3A8 File Offset: 0x000595A8
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameter(int texture, TextureTarget target, GetTextureParameter pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, @params, GL.EntryPoints[962]);
			}

			// Token: 0x06002158 RID: 8536 RVA: 0x0005B3C0 File Offset: 0x000595C0
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameter(uint texture, TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, ptr, GL.EntryPoints[962]);
				}
			}

			// Token: 0x06002159 RID: 8537 RVA: 0x0005B3F8 File Offset: 0x000595F8
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameter(uint texture, TextureTarget target, GetTextureParameter pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, ptr, GL.EntryPoints[962]);
				}
			}

			// Token: 0x0600215A RID: 8538 RVA: 0x0005B41C File Offset: 0x0005961C
			[CLSCompliant(false)]
			public unsafe static void GetTextureParameter(uint texture, TextureTarget target, GetTextureParameter pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, @params, GL.EntryPoints[962]);
			}

			// Token: 0x0600215B RID: 8539 RVA: 0x0005B434 File Offset: 0x00059634
			[CLSCompliant(false)]
			public unsafe static void GetTransformFeedbackVarying(int program, int index, int bufSize, out int length, out int size, out ActiveAttribType type, [Out] StringBuilder name)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &size)
					{
						int* ptr4 = ptr3;
						fixed (ActiveAttribType* ptr5 = &type)
						{
							ActiveAttribType* ptr6 = ptr5;
							IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
							calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[967]);
							BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
							Marshal.FreeHGlobal(intPtr);
						}
					}
				}
			}

			// Token: 0x0600215C RID: 8540 RVA: 0x0005B480 File Offset: 0x00059680
			[CLSCompliant(false)]
			public unsafe static void GetTransformFeedbackVarying(int program, int index, int bufSize, out int length, out int size, out ExtTransformFeedback type, [Out] StringBuilder name)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &size)
					{
						int* ptr4 = ptr3;
						fixed (ExtTransformFeedback* ptr5 = &type)
						{
							ExtTransformFeedback* ptr6 = ptr5;
							IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
							calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[967]);
							BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
							Marshal.FreeHGlobal(intPtr);
						}
					}
				}
			}

			// Token: 0x0600215D RID: 8541 RVA: 0x0005B4CC File Offset: 0x000596CC
			[CLSCompliant(false)]
			public unsafe static void GetTransformFeedbackVarying(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[967]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x0600215E RID: 8542 RVA: 0x0005B510 File Offset: 0x00059710
			[CLSCompliant(false)]
			public unsafe static void GetTransformFeedbackVarying(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] ExtTransformFeedback* type, [Out] StringBuilder name)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[967]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x0600215F RID: 8543 RVA: 0x0005B554 File Offset: 0x00059754
			[CLSCompliant(false)]
			public unsafe static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, out int size, out ActiveAttribType type, [Out] StringBuilder name)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &size)
					{
						int* ptr4 = ptr3;
						fixed (ActiveAttribType* ptr5 = &type)
						{
							ActiveAttribType* ptr6 = ptr5;
							IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
							calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[967]);
							BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
							Marshal.FreeHGlobal(intPtr);
						}
					}
				}
			}

			// Token: 0x06002160 RID: 8544 RVA: 0x0005B5A0 File Offset: 0x000597A0
			[CLSCompliant(false)]
			public unsafe static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, out int size, out ExtTransformFeedback type, [Out] StringBuilder name)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &size)
					{
						int* ptr4 = ptr3;
						fixed (ExtTransformFeedback* ptr5 = &type)
						{
							ExtTransformFeedback* ptr6 = ptr5;
							IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
							calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[967]);
							BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
							Marshal.FreeHGlobal(intPtr);
						}
					}
				}
			}

			// Token: 0x06002161 RID: 8545 RVA: 0x0005B5EC File Offset: 0x000597EC
			[CLSCompliant(false)]
			public unsafe static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[967]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06002162 RID: 8546 RVA: 0x0005B630 File Offset: 0x00059830
			[CLSCompliant(false)]
			public unsafe static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ExtTransformFeedback* type, [Out] StringBuilder name)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[967]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06002163 RID: 8547 RVA: 0x0005B674 File Offset: 0x00059874
			[CLSCompliant(false)]
			public static int GetUniformBufferSize(int program, int location)
			{
				return calli(System.Int32(System.UInt32,System.Int32), program, location, GL.EntryPoints[970]);
			}

			// Token: 0x06002164 RID: 8548 RVA: 0x0005B688 File Offset: 0x00059888
			[CLSCompliant(false)]
			public static int GetUniformBufferSize(uint program, int location)
			{
				return calli(System.Int32(System.UInt32,System.Int32), program, location, GL.EntryPoints[970]);
			}

			// Token: 0x06002165 RID: 8549 RVA: 0x0005B69C File Offset: 0x0005989C
			[CLSCompliant(false)]
			public static IntPtr GetUniformOffset(int program, int location)
			{
				return calli(System.IntPtr(System.UInt32,System.Int32), program, location, GL.EntryPoints[980]);
			}

			// Token: 0x06002166 RID: 8550 RVA: 0x0005B6B0 File Offset: 0x000598B0
			[CLSCompliant(false)]
			public static IntPtr GetUniformOffset(uint program, int location)
			{
				return calli(System.IntPtr(System.UInt32,System.Int32), program, location, GL.EntryPoints[980]);
			}

			// Token: 0x06002167 RID: 8551 RVA: 0x0005B6C4 File Offset: 0x000598C4
			[CLSCompliant(false)]
			public unsafe static void GetUniform(int program, int location, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), program, location, ptr, GL.EntryPoints[984]);
				}
			}

			// Token: 0x06002168 RID: 8552 RVA: 0x0005B6FC File Offset: 0x000598FC
			[CLSCompliant(false)]
			public unsafe static void GetUniform(int program, int location, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), program, location, ptr, GL.EntryPoints[984]);
				}
			}

			// Token: 0x06002169 RID: 8553 RVA: 0x0005B720 File Offset: 0x00059920
			[CLSCompliant(false)]
			public unsafe static void GetUniform(int program, int location, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), program, location, @params, GL.EntryPoints[984]);
			}

			// Token: 0x0600216A RID: 8554 RVA: 0x0005B738 File Offset: 0x00059938
			[CLSCompliant(false)]
			public unsafe static void GetUniform(uint program, int location, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), program, location, ptr, GL.EntryPoints[984]);
				}
			}

			// Token: 0x0600216B RID: 8555 RVA: 0x0005B770 File Offset: 0x00059970
			[CLSCompliant(false)]
			public unsafe static void GetUniform(uint program, int location, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), program, location, ptr, GL.EntryPoints[984]);
				}
			}

			// Token: 0x0600216C RID: 8556 RVA: 0x0005B794 File Offset: 0x00059994
			[CLSCompliant(false)]
			public unsafe static void GetUniform(uint program, int location, [Out] uint* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), program, location, @params, GL.EntryPoints[984]);
			}

			// Token: 0x0600216D RID: 8557 RVA: 0x0005B7AC File Offset: 0x000599AC
			[CLSCompliant(false)]
			public unsafe static void GetVariantBoolean(int id, ExtVertexShader value, [Out] bool[] data)
			{
				fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, ptr, GL.EntryPoints[987]);
				}
			}

			// Token: 0x0600216E RID: 8558 RVA: 0x0005B7E4 File Offset: 0x000599E4
			[CLSCompliant(false)]
			public unsafe static void GetVariantBoolean(int id, ExtVertexShader value, out bool data)
			{
				fixed (bool* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, ptr, GL.EntryPoints[987]);
				}
			}

			// Token: 0x0600216F RID: 8559 RVA: 0x0005B808 File Offset: 0x00059A08
			[CLSCompliant(false)]
			public unsafe static void GetVariantBoolean(int id, ExtVertexShader value, [Out] bool* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, data, GL.EntryPoints[987]);
			}

			// Token: 0x06002170 RID: 8560 RVA: 0x0005B820 File Offset: 0x00059A20
			[CLSCompliant(false)]
			public unsafe static void GetVariantBoolean(uint id, ExtVertexShader value, [Out] bool[] data)
			{
				fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, ptr, GL.EntryPoints[987]);
				}
			}

			// Token: 0x06002171 RID: 8561 RVA: 0x0005B858 File Offset: 0x00059A58
			[CLSCompliant(false)]
			public unsafe static void GetVariantBoolean(uint id, ExtVertexShader value, out bool data)
			{
				fixed (bool* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, ptr, GL.EntryPoints[987]);
				}
			}

			// Token: 0x06002172 RID: 8562 RVA: 0x0005B87C File Offset: 0x00059A7C
			[CLSCompliant(false)]
			public unsafe static void GetVariantBoolean(uint id, ExtVertexShader value, [Out] bool* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Boolean*), id, value, data, GL.EntryPoints[987]);
			}

			// Token: 0x06002173 RID: 8563 RVA: 0x0005B894 File Offset: 0x00059A94
			[CLSCompliant(false)]
			public unsafe static void GetVariantFloat(int id, ExtVertexShader value, [Out] float[] data)
			{
				fixed (float* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, ptr, GL.EntryPoints[988]);
				}
			}

			// Token: 0x06002174 RID: 8564 RVA: 0x0005B8CC File Offset: 0x00059ACC
			[CLSCompliant(false)]
			public unsafe static void GetVariantFloat(int id, ExtVertexShader value, out float data)
			{
				fixed (float* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, ptr, GL.EntryPoints[988]);
				}
			}

			// Token: 0x06002175 RID: 8565 RVA: 0x0005B8F0 File Offset: 0x00059AF0
			[CLSCompliant(false)]
			public unsafe static void GetVariantFloat(int id, ExtVertexShader value, [Out] float* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, data, GL.EntryPoints[988]);
			}

			// Token: 0x06002176 RID: 8566 RVA: 0x0005B908 File Offset: 0x00059B08
			[CLSCompliant(false)]
			public unsafe static void GetVariantFloat(uint id, ExtVertexShader value, [Out] float[] data)
			{
				fixed (float* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, ptr, GL.EntryPoints[988]);
				}
			}

			// Token: 0x06002177 RID: 8567 RVA: 0x0005B940 File Offset: 0x00059B40
			[CLSCompliant(false)]
			public unsafe static void GetVariantFloat(uint id, ExtVertexShader value, out float data)
			{
				fixed (float* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, ptr, GL.EntryPoints[988]);
				}
			}

			// Token: 0x06002178 RID: 8568 RVA: 0x0005B964 File Offset: 0x00059B64
			[CLSCompliant(false)]
			public unsafe static void GetVariantFloat(uint id, ExtVertexShader value, [Out] float* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), id, value, data, GL.EntryPoints[988]);
			}

			// Token: 0x06002179 RID: 8569 RVA: 0x0005B97C File Offset: 0x00059B7C
			[CLSCompliant(false)]
			public unsafe static void GetVariantInteger(int id, ExtVertexShader value, [Out] int[] data)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, ptr, GL.EntryPoints[989]);
				}
			}

			// Token: 0x0600217A RID: 8570 RVA: 0x0005B9B4 File Offset: 0x00059BB4
			[CLSCompliant(false)]
			public unsafe static void GetVariantInteger(int id, ExtVertexShader value, out int data)
			{
				fixed (int* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, ptr, GL.EntryPoints[989]);
				}
			}

			// Token: 0x0600217B RID: 8571 RVA: 0x0005B9D8 File Offset: 0x00059BD8
			[CLSCompliant(false)]
			public unsafe static void GetVariantInteger(int id, ExtVertexShader value, [Out] int* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, data, GL.EntryPoints[989]);
			}

			// Token: 0x0600217C RID: 8572 RVA: 0x0005B9F0 File Offset: 0x00059BF0
			[CLSCompliant(false)]
			public unsafe static void GetVariantInteger(uint id, ExtVertexShader value, [Out] int[] data)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, ptr, GL.EntryPoints[989]);
				}
			}

			// Token: 0x0600217D RID: 8573 RVA: 0x0005BA28 File Offset: 0x00059C28
			[CLSCompliant(false)]
			public unsafe static void GetVariantInteger(uint id, ExtVertexShader value, out int data)
			{
				fixed (int* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, ptr, GL.EntryPoints[989]);
				}
			}

			// Token: 0x0600217E RID: 8574 RVA: 0x0005BA4C File Offset: 0x00059C4C
			[CLSCompliant(false)]
			public unsafe static void GetVariantInteger(uint id, ExtVertexShader value, [Out] int* data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, value, data, GL.EntryPoints[989]);
			}

			// Token: 0x0600217F RID: 8575 RVA: 0x0005BA64 File Offset: 0x00059C64
			[CLSCompliant(false)]
			public static void GetVariantPointer(int id, ExtVertexShader value, [Out] IntPtr data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, value, data, GL.EntryPoints[990]);
			}

			// Token: 0x06002180 RID: 8576 RVA: 0x0005BA7C File Offset: 0x00059C7C
			[CLSCompliant(false)]
			public unsafe static void GetVariantPointer<T2>(int id, ExtVertexShader value, [In] [Out] T2[] data) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, value, ptr, GL.EntryPoints[990]);
				}
			}

			// Token: 0x06002181 RID: 8577 RVA: 0x0005BAB4 File Offset: 0x00059CB4
			[CLSCompliant(false)]
			public unsafe static void GetVariantPointer<T2>(int id, ExtVertexShader value, [In] [Out] T2[,] data) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, value, ptr, GL.EntryPoints[990]);
				}
			}

			// Token: 0x06002182 RID: 8578 RVA: 0x0005BAF0 File Offset: 0x00059CF0
			[CLSCompliant(false)]
			public unsafe static void GetVariantPointer<T2>(int id, ExtVertexShader value, [In] [Out] T2[,,] data) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, value, ptr, GL.EntryPoints[990]);
				}
			}

			// Token: 0x06002183 RID: 8579 RVA: 0x0005BB2C File Offset: 0x00059D2C
			[CLSCompliant(false)]
			public unsafe static void GetVariantPointer<T2>(int id, ExtVertexShader value, [In] [Out] ref T2 data) where T2 : struct
			{
				fixed (T2* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, value, ptr, GL.EntryPoints[990]);
				}
			}

			// Token: 0x06002184 RID: 8580 RVA: 0x0005BB50 File Offset: 0x00059D50
			[CLSCompliant(false)]
			public static void GetVariantPointer(uint id, ExtVertexShader value, [Out] IntPtr data)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, value, data, GL.EntryPoints[990]);
			}

			// Token: 0x06002185 RID: 8581 RVA: 0x0005BB68 File Offset: 0x00059D68
			[CLSCompliant(false)]
			public unsafe static void GetVariantPointer<T2>(uint id, ExtVertexShader value, [In] [Out] T2[] data) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, value, ptr, GL.EntryPoints[990]);
				}
			}

			// Token: 0x06002186 RID: 8582 RVA: 0x0005BBA0 File Offset: 0x00059DA0
			[CLSCompliant(false)]
			public unsafe static void GetVariantPointer<T2>(uint id, ExtVertexShader value, [In] [Out] T2[,] data) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, value, ptr, GL.EntryPoints[990]);
				}
			}

			// Token: 0x06002187 RID: 8583 RVA: 0x0005BBDC File Offset: 0x00059DDC
			[CLSCompliant(false)]
			public unsafe static void GetVariantPointer<T2>(uint id, ExtVertexShader value, [In] [Out] T2[,,] data) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, value, ptr, GL.EntryPoints[990]);
				}
			}

			// Token: 0x06002188 RID: 8584 RVA: 0x0005BC18 File Offset: 0x00059E18
			[CLSCompliant(false)]
			public unsafe static void GetVariantPointer<T2>(uint id, ExtVertexShader value, [In] [Out] ref T2 data) where T2 : struct
			{
				fixed (T2* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, value, ptr, GL.EntryPoints[990]);
				}
			}

			// Token: 0x06002189 RID: 8585 RVA: 0x0005BC3C File Offset: 0x00059E3C
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayInteger(int vaobj, int index, ExtDirectStateAccess pname, [Out] int[] param)
			{
				fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), vaobj, index, pname, ptr, GL.EntryPoints[992]);
				}
			}

			// Token: 0x0600218A RID: 8586 RVA: 0x0005BC74 File Offset: 0x00059E74
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayInteger(int vaobj, int index, ExtDirectStateAccess pname, out int param)
			{
				fixed (int* ptr = &param)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), vaobj, index, pname, ptr, GL.EntryPoints[992]);
				}
			}

			// Token: 0x0600218B RID: 8587 RVA: 0x0005BC98 File Offset: 0x00059E98
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayInteger(int vaobj, int index, ExtDirectStateAccess pname, [Out] int* param)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), vaobj, index, pname, param, GL.EntryPoints[992]);
			}

			// Token: 0x0600218C RID: 8588 RVA: 0x0005BCB0 File Offset: 0x00059EB0
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayInteger(uint vaobj, uint index, ExtDirectStateAccess pname, [Out] int[] param)
			{
				fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), vaobj, index, pname, ptr, GL.EntryPoints[992]);
				}
			}

			// Token: 0x0600218D RID: 8589 RVA: 0x0005BCE8 File Offset: 0x00059EE8
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayInteger(uint vaobj, uint index, ExtDirectStateAccess pname, out int param)
			{
				fixed (int* ptr = &param)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), vaobj, index, pname, ptr, GL.EntryPoints[992]);
				}
			}

			// Token: 0x0600218E RID: 8590 RVA: 0x0005BD0C File Offset: 0x00059F0C
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayInteger(uint vaobj, uint index, ExtDirectStateAccess pname, [Out] int* param)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), vaobj, index, pname, param, GL.EntryPoints[992]);
			}

			// Token: 0x0600218F RID: 8591 RVA: 0x0005BD24 File Offset: 0x00059F24
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayInteger(int vaobj, ExtDirectStateAccess pname, [Out] int[] param)
			{
				fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), vaobj, pname, ptr, GL.EntryPoints[993]);
				}
			}

			// Token: 0x06002190 RID: 8592 RVA: 0x0005BD5C File Offset: 0x00059F5C
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayInteger(int vaobj, ExtDirectStateAccess pname, out int param)
			{
				fixed (int* ptr = &param)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), vaobj, pname, ptr, GL.EntryPoints[993]);
				}
			}

			// Token: 0x06002191 RID: 8593 RVA: 0x0005BD80 File Offset: 0x00059F80
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayInteger(int vaobj, ExtDirectStateAccess pname, [Out] int* param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), vaobj, pname, param, GL.EntryPoints[993]);
			}

			// Token: 0x06002192 RID: 8594 RVA: 0x0005BD98 File Offset: 0x00059F98
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayInteger(uint vaobj, ExtDirectStateAccess pname, [Out] int[] param)
			{
				fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), vaobj, pname, ptr, GL.EntryPoints[993]);
				}
			}

			// Token: 0x06002193 RID: 8595 RVA: 0x0005BDD0 File Offset: 0x00059FD0
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayInteger(uint vaobj, ExtDirectStateAccess pname, out int param)
			{
				fixed (int* ptr = &param)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), vaobj, pname, ptr, GL.EntryPoints[993]);
				}
			}

			// Token: 0x06002194 RID: 8596 RVA: 0x0005BDF4 File Offset: 0x00059FF4
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayInteger(uint vaobj, ExtDirectStateAccess pname, [Out] int* param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), vaobj, pname, param, GL.EntryPoints[993]);
			}

			// Token: 0x06002195 RID: 8597 RVA: 0x0005BE0C File Offset: 0x0005A00C
			[CLSCompliant(false)]
			public static void GetVertexArrayPointer(int vaobj, int index, ExtDirectStateAccess pname, [Out] IntPtr param)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), vaobj, index, pname, param, GL.EntryPoints[994]);
			}

			// Token: 0x06002196 RID: 8598 RVA: 0x0005BE24 File Offset: 0x0005A024
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayPointer<T3>(int vaobj, int index, ExtDirectStateAccess pname, [In] [Out] T3[] param) where T3 : struct
			{
				fixed (T3* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), vaobj, index, pname, ptr, GL.EntryPoints[994]);
				}
			}

			// Token: 0x06002197 RID: 8599 RVA: 0x0005BE5C File Offset: 0x0005A05C
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayPointer<T3>(int vaobj, int index, ExtDirectStateAccess pname, [In] [Out] T3[,] param) where T3 : struct
			{
				fixed (T3* ptr = ref (param != null && param.Length != 0) ? ref param[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), vaobj, index, pname, ptr, GL.EntryPoints[994]);
				}
			}

			// Token: 0x06002198 RID: 8600 RVA: 0x0005BE98 File Offset: 0x0005A098
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayPointer<T3>(int vaobj, int index, ExtDirectStateAccess pname, [In] [Out] T3[,,] param) where T3 : struct
			{
				fixed (T3* ptr = ref (param != null && param.Length != 0) ? ref param[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), vaobj, index, pname, ptr, GL.EntryPoints[994]);
				}
			}

			// Token: 0x06002199 RID: 8601 RVA: 0x0005BED4 File Offset: 0x0005A0D4
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayPointer<T3>(int vaobj, int index, ExtDirectStateAccess pname, [In] [Out] ref T3 param) where T3 : struct
			{
				fixed (T3* ptr = &param)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), vaobj, index, pname, ptr, GL.EntryPoints[994]);
				}
			}

			// Token: 0x0600219A RID: 8602 RVA: 0x0005BEF8 File Offset: 0x0005A0F8
			[CLSCompliant(false)]
			public static void GetVertexArrayPointer(uint vaobj, uint index, ExtDirectStateAccess pname, [Out] IntPtr param)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), vaobj, index, pname, param, GL.EntryPoints[994]);
			}

			// Token: 0x0600219B RID: 8603 RVA: 0x0005BF10 File Offset: 0x0005A110
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayPointer<T3>(uint vaobj, uint index, ExtDirectStateAccess pname, [In] [Out] T3[] param) where T3 : struct
			{
				fixed (T3* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), vaobj, index, pname, ptr, GL.EntryPoints[994]);
				}
			}

			// Token: 0x0600219C RID: 8604 RVA: 0x0005BF48 File Offset: 0x0005A148
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayPointer<T3>(uint vaobj, uint index, ExtDirectStateAccess pname, [In] [Out] T3[,] param) where T3 : struct
			{
				fixed (T3* ptr = ref (param != null && param.Length != 0) ? ref param[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), vaobj, index, pname, ptr, GL.EntryPoints[994]);
				}
			}

			// Token: 0x0600219D RID: 8605 RVA: 0x0005BF84 File Offset: 0x0005A184
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayPointer<T3>(uint vaobj, uint index, ExtDirectStateAccess pname, [In] [Out] T3[,,] param) where T3 : struct
			{
				fixed (T3* ptr = ref (param != null && param.Length != 0) ? ref param[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), vaobj, index, pname, ptr, GL.EntryPoints[994]);
				}
			}

			// Token: 0x0600219E RID: 8606 RVA: 0x0005BFC0 File Offset: 0x0005A1C0
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayPointer<T3>(uint vaobj, uint index, ExtDirectStateAccess pname, [In] [Out] ref T3 param) where T3 : struct
			{
				fixed (T3* ptr = &param)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), vaobj, index, pname, ptr, GL.EntryPoints[994]);
				}
			}

			// Token: 0x0600219F RID: 8607 RVA: 0x0005BFE4 File Offset: 0x0005A1E4
			[CLSCompliant(false)]
			public static void GetVertexArrayPointer(int vaobj, ExtDirectStateAccess pname, [Out] IntPtr param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), vaobj, pname, param, GL.EntryPoints[995]);
			}

			// Token: 0x060021A0 RID: 8608 RVA: 0x0005BFFC File Offset: 0x0005A1FC
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayPointer<T2>(int vaobj, ExtDirectStateAccess pname, [In] [Out] T2[] param) where T2 : struct
			{
				fixed (T2* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), vaobj, pname, ptr, GL.EntryPoints[995]);
				}
			}

			// Token: 0x060021A1 RID: 8609 RVA: 0x0005C034 File Offset: 0x0005A234
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayPointer<T2>(int vaobj, ExtDirectStateAccess pname, [In] [Out] T2[,] param) where T2 : struct
			{
				fixed (T2* ptr = ref (param != null && param.Length != 0) ? ref param[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), vaobj, pname, ptr, GL.EntryPoints[995]);
				}
			}

			// Token: 0x060021A2 RID: 8610 RVA: 0x0005C070 File Offset: 0x0005A270
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayPointer<T2>(int vaobj, ExtDirectStateAccess pname, [In] [Out] T2[,,] param) where T2 : struct
			{
				fixed (T2* ptr = ref (param != null && param.Length != 0) ? ref param[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), vaobj, pname, ptr, GL.EntryPoints[995]);
				}
			}

			// Token: 0x060021A3 RID: 8611 RVA: 0x0005C0AC File Offset: 0x0005A2AC
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayPointer<T2>(int vaobj, ExtDirectStateAccess pname, [In] [Out] ref T2 param) where T2 : struct
			{
				fixed (T2* ptr = &param)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), vaobj, pname, ptr, GL.EntryPoints[995]);
				}
			}

			// Token: 0x060021A4 RID: 8612 RVA: 0x0005C0D0 File Offset: 0x0005A2D0
			[CLSCompliant(false)]
			public static void GetVertexArrayPointer(uint vaobj, ExtDirectStateAccess pname, [Out] IntPtr param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), vaobj, pname, param, GL.EntryPoints[995]);
			}

			// Token: 0x060021A5 RID: 8613 RVA: 0x0005C0E8 File Offset: 0x0005A2E8
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayPointer<T2>(uint vaobj, ExtDirectStateAccess pname, [In] [Out] T2[] param) where T2 : struct
			{
				fixed (T2* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), vaobj, pname, ptr, GL.EntryPoints[995]);
				}
			}

			// Token: 0x060021A6 RID: 8614 RVA: 0x0005C120 File Offset: 0x0005A320
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayPointer<T2>(uint vaobj, ExtDirectStateAccess pname, [In] [Out] T2[,] param) where T2 : struct
			{
				fixed (T2* ptr = ref (param != null && param.Length != 0) ? ref param[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), vaobj, pname, ptr, GL.EntryPoints[995]);
				}
			}

			// Token: 0x060021A7 RID: 8615 RVA: 0x0005C15C File Offset: 0x0005A35C
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayPointer<T2>(uint vaobj, ExtDirectStateAccess pname, [In] [Out] T2[,,] param) where T2 : struct
			{
				fixed (T2* ptr = ref (param != null && param.Length != 0) ? ref param[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), vaobj, pname, ptr, GL.EntryPoints[995]);
				}
			}

			// Token: 0x060021A8 RID: 8616 RVA: 0x0005C198 File Offset: 0x0005A398
			[CLSCompliant(false)]
			public unsafe static void GetVertexArrayPointer<T2>(uint vaobj, ExtDirectStateAccess pname, [In] [Out] ref T2 param) where T2 : struct
			{
				fixed (T2* ptr = &param)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), vaobj, pname, ptr, GL.EntryPoints[995]);
				}
			}

			// Token: 0x060021A9 RID: 8617 RVA: 0x0005C1BC File Offset: 0x0005A3BC
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribI(int index, NvVertexProgram4 pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[1005]);
				}
			}

			// Token: 0x060021AA RID: 8618 RVA: 0x0005C1E0 File Offset: 0x0005A3E0
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribI(int index, NvVertexProgram4 pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[1005]);
			}

			// Token: 0x060021AB RID: 8619 RVA: 0x0005C1F8 File Offset: 0x0005A3F8
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribI(uint index, NvVertexProgram4 pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[1005]);
				}
			}

			// Token: 0x060021AC RID: 8620 RVA: 0x0005C21C File Offset: 0x0005A41C
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribI(uint index, NvVertexProgram4 pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[1005]);
			}

			// Token: 0x060021AD RID: 8621 RVA: 0x0005C234 File Offset: 0x0005A434
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribI(uint index, NvVertexProgram4 pname, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), index, pname, ptr, GL.EntryPoints[1007]);
				}
			}

			// Token: 0x060021AE RID: 8622 RVA: 0x0005C258 File Offset: 0x0005A458
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribI(uint index, NvVertexProgram4 pname, [Out] uint* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), index, pname, @params, GL.EntryPoints[1007]);
			}

			// Token: 0x060021AF RID: 8623 RVA: 0x0005C270 File Offset: 0x0005A470
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(int index, ExtVertexAttrib64bit pname, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[1012]);
				}
			}

			// Token: 0x060021B0 RID: 8624 RVA: 0x0005C2A8 File Offset: 0x0005A4A8
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(int index, ExtVertexAttrib64bit pname, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[1012]);
				}
			}

			// Token: 0x060021B1 RID: 8625 RVA: 0x0005C2CC File Offset: 0x0005A4CC
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(int index, ExtVertexAttrib64bit pname, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, @params, GL.EntryPoints[1012]);
			}

			// Token: 0x060021B2 RID: 8626 RVA: 0x0005C2E4 File Offset: 0x0005A4E4
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(uint index, ExtVertexAttrib64bit pname, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[1012]);
				}
			}

			// Token: 0x060021B3 RID: 8627 RVA: 0x0005C31C File Offset: 0x0005A51C
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(uint index, ExtVertexAttrib64bit pname, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[1012]);
				}
			}

			// Token: 0x060021B4 RID: 8628 RVA: 0x0005C340 File Offset: 0x0005A540
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(uint index, ExtVertexAttrib64bit pname, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, @params, GL.EntryPoints[1012]);
			}

			// Token: 0x060021B5 RID: 8629 RVA: 0x0005C358 File Offset: 0x0005A558
			[Obsolete("Use HistogramTargetExt overload instead")]
			public static void Histogram(ExtHistogram target, int width, PixelInternalFormat internalformat, bool sink)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Boolean), target, width, internalformat, sink, GL.EntryPoints[1038]);
			}

			// Token: 0x060021B6 RID: 8630 RVA: 0x0005C370 File Offset: 0x0005A570
			public static void Histogram(HistogramTargetExt target, int width, PixelInternalFormat internalformat, bool sink)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Boolean), target, width, internalformat, sink, GL.EntryPoints[1038]);
			}

			// Token: 0x060021B7 RID: 8631 RVA: 0x0005C388 File Offset: 0x0005A588
			[CLSCompliant(false)]
			public static IntPtr ImportSync(ExtX11SyncObject external_sync_type, IntPtr external_sync, int flags)
			{
				return calli(System.IntPtr(System.Int32,System.IntPtr,System.UInt32), external_sync_type, external_sync, flags, GL.EntryPoints[1044]);
			}

			// Token: 0x060021B8 RID: 8632 RVA: 0x0005C3A0 File Offset: 0x0005A5A0
			[CLSCompliant(false)]
			public static IntPtr ImportSync(ExtX11SyncObject external_sync_type, IntPtr external_sync, uint flags)
			{
				return calli(System.IntPtr(System.Int32,System.IntPtr,System.UInt32), external_sync_type, external_sync, flags, GL.EntryPoints[1044]);
			}

			// Token: 0x060021B9 RID: 8633 RVA: 0x0005C3B8 File Offset: 0x0005A5B8
			public static void IndexFunc(ExtIndexFunc func, float @ref)
			{
				calli(System.Void(System.Int32,System.Single), func, @ref, GL.EntryPoints[1049]);
			}

			// Token: 0x060021BA RID: 8634 RVA: 0x0005C3CC File Offset: 0x0005A5CC
			public static void IndexMaterial(MaterialFace face, ExtIndexMaterial mode)
			{
				calli(System.Void(System.Int32,System.Int32), face, mode, GL.EntryPoints[1054]);
			}

			// Token: 0x060021BB RID: 8635 RVA: 0x0005C3E0 File Offset: 0x0005A5E0
			public static void IndexPointer(IndexPointerType type, int stride, int count, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), type, stride, count, pointer, GL.EntryPoints[1056]);
			}

			// Token: 0x060021BC RID: 8636 RVA: 0x0005C3F8 File Offset: 0x0005A5F8
			[CLSCompliant(false)]
			public unsafe static void IndexPointer<T3>(IndexPointerType type, int stride, int count, [In] [Out] T3[] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), type, stride, count, ptr, GL.EntryPoints[1056]);
				}
			}

			// Token: 0x060021BD RID: 8637 RVA: 0x0005C430 File Offset: 0x0005A630
			[CLSCompliant(false)]
			public unsafe static void IndexPointer<T3>(IndexPointerType type, int stride, int count, [In] [Out] T3[,] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), type, stride, count, ptr, GL.EntryPoints[1056]);
				}
			}

			// Token: 0x060021BE RID: 8638 RVA: 0x0005C46C File Offset: 0x0005A66C
			[CLSCompliant(false)]
			public unsafe static void IndexPointer<T3>(IndexPointerType type, int stride, int count, [In] [Out] T3[,,] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), type, stride, count, ptr, GL.EntryPoints[1056]);
				}
			}

			// Token: 0x060021BF RID: 8639 RVA: 0x0005C4A8 File Offset: 0x0005A6A8
			public unsafe static void IndexPointer<T3>(IndexPointerType type, int stride, int count, [In] [Out] ref T3 pointer) where T3 : struct
			{
				fixed (T3* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), type, stride, count, ptr, GL.EntryPoints[1056]);
				}
			}

			// Token: 0x060021C0 RID: 8640 RVA: 0x0005C4CC File Offset: 0x0005A6CC
			[CLSCompliant(false)]
			public static void InsertComponent(int res, int src, int num)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32), res, src, num, GL.EntryPoints[1065]);
			}

			// Token: 0x060021C1 RID: 8641 RVA: 0x0005C4E4 File Offset: 0x0005A6E4
			[CLSCompliant(false)]
			public static void InsertComponent(uint res, uint src, uint num)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32), res, src, num, GL.EntryPoints[1065]);
			}

			// Token: 0x060021C2 RID: 8642 RVA: 0x0005C4FC File Offset: 0x0005A6FC
			public static void InsertEventMarker(int length, string marker)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(marker);
				calli(System.Void(System.Int32,System.IntPtr), length, intPtr, GL.EntryPoints[1066]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x060021C3 RID: 8643 RVA: 0x0005C528 File Offset: 0x0005A728
			[CLSCompliant(false)]
			[Obsolete("Use IndexedEnableCap overload instead")]
			public static bool IsEnabledIndexed(ExtDrawBuffers2 target, int index)
			{
				return calli(System.Byte(System.Int32,System.UInt32), target, index, GL.EntryPoints[1082]);
			}

			// Token: 0x060021C4 RID: 8644 RVA: 0x0005C53C File Offset: 0x0005A73C
			[Obsolete("Use IndexedEnableCap overload instead")]
			[CLSCompliant(false)]
			public static bool IsEnabledIndexed(ExtDrawBuffers2 target, uint index)
			{
				return calli(System.Byte(System.Int32,System.UInt32), target, index, GL.EntryPoints[1082]);
			}

			// Token: 0x060021C5 RID: 8645 RVA: 0x0005C550 File Offset: 0x0005A750
			[CLSCompliant(false)]
			public static bool IsEnabledIndexed(IndexedEnableCap target, int index)
			{
				return calli(System.Byte(System.Int32,System.UInt32), target, index, GL.EntryPoints[1082]);
			}

			// Token: 0x060021C6 RID: 8646 RVA: 0x0005C564 File Offset: 0x0005A764
			[CLSCompliant(false)]
			public static bool IsEnabledIndexed(IndexedEnableCap target, uint index)
			{
				return calli(System.Byte(System.Int32,System.UInt32), target, index, GL.EntryPoints[1082]);
			}

			// Token: 0x060021C7 RID: 8647 RVA: 0x0005C578 File Offset: 0x0005A778
			[CLSCompliant(false)]
			public static bool IsFramebuffer(int framebuffer)
			{
				return calli(System.Byte(System.UInt32), framebuffer, GL.EntryPoints[1086]);
			}

			// Token: 0x060021C8 RID: 8648 RVA: 0x0005C58C File Offset: 0x0005A78C
			[CLSCompliant(false)]
			public static bool IsFramebuffer(uint framebuffer)
			{
				return calli(System.Byte(System.UInt32), framebuffer, GL.EntryPoints[1086]);
			}

			// Token: 0x060021C9 RID: 8649 RVA: 0x0005C5A0 File Offset: 0x0005A7A0
			[CLSCompliant(false)]
			public static bool IsProgramPipeline(int pipeline)
			{
				return calli(System.Byte(System.UInt32), pipeline, GL.EntryPoints[1102]);
			}

			// Token: 0x060021CA RID: 8650 RVA: 0x0005C5B4 File Offset: 0x0005A7B4
			[CLSCompliant(false)]
			public static bool IsProgramPipeline(uint pipeline)
			{
				return calli(System.Byte(System.UInt32), pipeline, GL.EntryPoints[1102]);
			}

			// Token: 0x060021CB RID: 8651 RVA: 0x0005C5C8 File Offset: 0x0005A7C8
			[CLSCompliant(false)]
			public static bool IsRenderbuffer(int renderbuffer)
			{
				return calli(System.Byte(System.UInt32), renderbuffer, GL.EntryPoints[1106]);
			}

			// Token: 0x060021CC RID: 8652 RVA: 0x0005C5DC File Offset: 0x0005A7DC
			[CLSCompliant(false)]
			public static bool IsRenderbuffer(uint renderbuffer)
			{
				return calli(System.Byte(System.UInt32), renderbuffer, GL.EntryPoints[1106]);
			}

			// Token: 0x060021CD RID: 8653 RVA: 0x0005C5F0 File Offset: 0x0005A7F0
			[CLSCompliant(false)]
			public static bool IsTexture(int texture)
			{
				return calli(System.Byte(System.UInt32), texture, GL.EntryPoints[1111]);
			}

			// Token: 0x060021CE RID: 8654 RVA: 0x0005C604 File Offset: 0x0005A804
			[CLSCompliant(false)]
			public static bool IsTexture(uint texture)
			{
				return calli(System.Byte(System.UInt32), texture, GL.EntryPoints[1111]);
			}

			// Token: 0x060021CF RID: 8655 RVA: 0x0005C618 File Offset: 0x0005A818
			[CLSCompliant(false)]
			public static bool IsVariantEnabled(int id, ExtVertexShader cap)
			{
				return calli(System.Byte(System.UInt32,System.Int32), id, cap, GL.EntryPoints[1116]);
			}

			// Token: 0x060021D0 RID: 8656 RVA: 0x0005C62C File Offset: 0x0005A82C
			[CLSCompliant(false)]
			public static bool IsVariantEnabled(uint id, ExtVertexShader cap)
			{
				return calli(System.Byte(System.UInt32,System.Int32), id, cap, GL.EntryPoints[1116]);
			}

			// Token: 0x060021D1 RID: 8657 RVA: 0x0005C640 File Offset: 0x0005A840
			[CLSCompliant(false)]
			public static void LabelObject(ExtDebugLabel type, int @object, int length, string label)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), type, @object, length, intPtr, GL.EntryPoints[1120]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x060021D2 RID: 8658 RVA: 0x0005C670 File Offset: 0x0005A870
			[CLSCompliant(false)]
			public static void LabelObject(ExtDebugLabel type, uint @object, int length, string label)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), type, @object, length, intPtr, GL.EntryPoints[1120]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x060021D3 RID: 8659 RVA: 0x0005C6A0 File Offset: 0x0005A8A0
			public static void LockArrays(int first, int count)
			{
				calli(System.Void(System.Int32,System.Int32), first, count, GL.EntryPoints[1156]);
			}

			// Token: 0x060021D4 RID: 8660 RVA: 0x0005C6B4 File Offset: 0x0005A8B4
			[CLSCompliant(false)]
			public static IntPtr MapNamedBuffer(int buffer, ExtDirectStateAccess access)
			{
				return calli(System.IntPtr(System.UInt32,System.Int32), buffer, access, GL.EntryPoints[1186]);
			}

			// Token: 0x060021D5 RID: 8661 RVA: 0x0005C6C8 File Offset: 0x0005A8C8
			[CLSCompliant(false)]
			public static IntPtr MapNamedBuffer(uint buffer, ExtDirectStateAccess access)
			{
				return calli(System.IntPtr(System.UInt32,System.Int32), buffer, access, GL.EntryPoints[1186]);
			}

			// Token: 0x060021D6 RID: 8662 RVA: 0x0005C6DC File Offset: 0x0005A8DC
			[CLSCompliant(false)]
			public static IntPtr MapNamedBufferRange(int buffer, IntPtr offset, IntPtr length, BufferAccessMask access)
			{
				return calli(System.IntPtr(System.UInt32,System.IntPtr,System.IntPtr,System.Int32), buffer, offset, length, access, GL.EntryPoints[1187]);
			}

			// Token: 0x060021D7 RID: 8663 RVA: 0x0005C6F4 File Offset: 0x0005A8F4
			[CLSCompliant(false)]
			public static IntPtr MapNamedBufferRange(uint buffer, IntPtr offset, IntPtr length, BufferAccessMask access)
			{
				return calli(System.IntPtr(System.UInt32,System.IntPtr,System.IntPtr,System.Int32), buffer, offset, length, access, GL.EntryPoints[1187]);
			}

			// Token: 0x060021D8 RID: 8664 RVA: 0x0005C70C File Offset: 0x0005A90C
			public static void MatrixFrustum(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar)
			{
				calli(System.Void(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double), mode, left, right, bottom, top, zNear, zFar, GL.EntryPoints[1202]);
			}

			// Token: 0x060021D9 RID: 8665 RVA: 0x0005C734 File Offset: 0x0005A934
			[CLSCompliant(false)]
			public unsafe static void MatrixLoad(MatrixMode mode, double[] m)
			{
				fixed (double* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Double*), mode, ptr, GL.EntryPoints[1207]);
				}
			}

			// Token: 0x060021DA RID: 8666 RVA: 0x0005C768 File Offset: 0x0005A968
			[CLSCompliant(false)]
			public unsafe static void MatrixLoad(MatrixMode mode, ref double m)
			{
				fixed (double* ptr = &m)
				{
					calli(System.Void(System.Int32,System.Double*), mode, ptr, GL.EntryPoints[1207]);
				}
			}

			// Token: 0x060021DB RID: 8667 RVA: 0x0005C78C File Offset: 0x0005A98C
			[CLSCompliant(false)]
			public unsafe static void MatrixLoad(MatrixMode mode, double* m)
			{
				calli(System.Void(System.Int32,System.Double*), mode, m, GL.EntryPoints[1207]);
			}

			// Token: 0x060021DC RID: 8668 RVA: 0x0005C7A0 File Offset: 0x0005A9A0
			[CLSCompliant(false)]
			public unsafe static void MatrixLoad(MatrixMode mode, float[] m)
			{
				fixed (float* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), mode, ptr, GL.EntryPoints[1208]);
				}
			}

			// Token: 0x060021DD RID: 8669 RVA: 0x0005C7D4 File Offset: 0x0005A9D4
			[CLSCompliant(false)]
			public unsafe static void MatrixLoad(MatrixMode mode, ref float m)
			{
				fixed (float* ptr = &m)
				{
					calli(System.Void(System.Int32,System.Single*), mode, ptr, GL.EntryPoints[1208]);
				}
			}

			// Token: 0x060021DE RID: 8670 RVA: 0x0005C7F8 File Offset: 0x0005A9F8
			[CLSCompliant(false)]
			public unsafe static void MatrixLoad(MatrixMode mode, float* m)
			{
				calli(System.Void(System.Int32,System.Single*), mode, m, GL.EntryPoints[1208]);
			}

			// Token: 0x060021DF RID: 8671 RVA: 0x0005C80C File Offset: 0x0005AA0C
			public static void MatrixLoadIdentity(MatrixMode mode)
			{
				calli(System.Void(System.Int32), mode, GL.EntryPoints[1209]);
			}

			// Token: 0x060021E0 RID: 8672 RVA: 0x0005C820 File Offset: 0x0005AA20
			[CLSCompliant(false)]
			public unsafe static void MatrixLoadTranspose(MatrixMode mode, double[] m)
			{
				fixed (double* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Double*), mode, ptr, GL.EntryPoints[1210]);
				}
			}

			// Token: 0x060021E1 RID: 8673 RVA: 0x0005C854 File Offset: 0x0005AA54
			[CLSCompliant(false)]
			public unsafe static void MatrixLoadTranspose(MatrixMode mode, ref double m)
			{
				fixed (double* ptr = &m)
				{
					calli(System.Void(System.Int32,System.Double*), mode, ptr, GL.EntryPoints[1210]);
				}
			}

			// Token: 0x060021E2 RID: 8674 RVA: 0x0005C878 File Offset: 0x0005AA78
			[CLSCompliant(false)]
			public unsafe static void MatrixLoadTranspose(MatrixMode mode, double* m)
			{
				calli(System.Void(System.Int32,System.Double*), mode, m, GL.EntryPoints[1210]);
			}

			// Token: 0x060021E3 RID: 8675 RVA: 0x0005C88C File Offset: 0x0005AA8C
			[CLSCompliant(false)]
			public unsafe static void MatrixLoadTranspose(MatrixMode mode, float[] m)
			{
				fixed (float* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), mode, ptr, GL.EntryPoints[1211]);
				}
			}

			// Token: 0x060021E4 RID: 8676 RVA: 0x0005C8C0 File Offset: 0x0005AAC0
			[CLSCompliant(false)]
			public unsafe static void MatrixLoadTranspose(MatrixMode mode, ref float m)
			{
				fixed (float* ptr = &m)
				{
					calli(System.Void(System.Int32,System.Single*), mode, ptr, GL.EntryPoints[1211]);
				}
			}

			// Token: 0x060021E5 RID: 8677 RVA: 0x0005C8E4 File Offset: 0x0005AAE4
			[CLSCompliant(false)]
			public unsafe static void MatrixLoadTranspose(MatrixMode mode, float* m)
			{
				calli(System.Void(System.Int32,System.Single*), mode, m, GL.EntryPoints[1211]);
			}

			// Token: 0x060021E6 RID: 8678 RVA: 0x0005C8F8 File Offset: 0x0005AAF8
			[CLSCompliant(false)]
			public unsafe static void MatrixMult(MatrixMode mode, double[] m)
			{
				fixed (double* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Double*), mode, ptr, GL.EntryPoints[1213]);
				}
			}

			// Token: 0x060021E7 RID: 8679 RVA: 0x0005C92C File Offset: 0x0005AB2C
			[CLSCompliant(false)]
			public unsafe static void MatrixMult(MatrixMode mode, ref double m)
			{
				fixed (double* ptr = &m)
				{
					calli(System.Void(System.Int32,System.Double*), mode, ptr, GL.EntryPoints[1213]);
				}
			}

			// Token: 0x060021E8 RID: 8680 RVA: 0x0005C950 File Offset: 0x0005AB50
			[CLSCompliant(false)]
			public unsafe static void MatrixMult(MatrixMode mode, double* m)
			{
				calli(System.Void(System.Int32,System.Double*), mode, m, GL.EntryPoints[1213]);
			}

			// Token: 0x060021E9 RID: 8681 RVA: 0x0005C964 File Offset: 0x0005AB64
			[CLSCompliant(false)]
			public unsafe static void MatrixMult(MatrixMode mode, float[] m)
			{
				fixed (float* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), mode, ptr, GL.EntryPoints[1214]);
				}
			}

			// Token: 0x060021EA RID: 8682 RVA: 0x0005C998 File Offset: 0x0005AB98
			[CLSCompliant(false)]
			public unsafe static void MatrixMult(MatrixMode mode, ref float m)
			{
				fixed (float* ptr = &m)
				{
					calli(System.Void(System.Int32,System.Single*), mode, ptr, GL.EntryPoints[1214]);
				}
			}

			// Token: 0x060021EB RID: 8683 RVA: 0x0005C9BC File Offset: 0x0005ABBC
			[CLSCompliant(false)]
			public unsafe static void MatrixMult(MatrixMode mode, float* m)
			{
				calli(System.Void(System.Int32,System.Single*), mode, m, GL.EntryPoints[1214]);
			}

			// Token: 0x060021EC RID: 8684 RVA: 0x0005C9D0 File Offset: 0x0005ABD0
			[CLSCompliant(false)]
			public unsafe static void MatrixMultTranspose(MatrixMode mode, double[] m)
			{
				fixed (double* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Double*), mode, ptr, GL.EntryPoints[1215]);
				}
			}

			// Token: 0x060021ED RID: 8685 RVA: 0x0005CA04 File Offset: 0x0005AC04
			[CLSCompliant(false)]
			public unsafe static void MatrixMultTranspose(MatrixMode mode, ref double m)
			{
				fixed (double* ptr = &m)
				{
					calli(System.Void(System.Int32,System.Double*), mode, ptr, GL.EntryPoints[1215]);
				}
			}

			// Token: 0x060021EE RID: 8686 RVA: 0x0005CA28 File Offset: 0x0005AC28
			[CLSCompliant(false)]
			public unsafe static void MatrixMultTranspose(MatrixMode mode, double* m)
			{
				calli(System.Void(System.Int32,System.Double*), mode, m, GL.EntryPoints[1215]);
			}

			// Token: 0x060021EF RID: 8687 RVA: 0x0005CA3C File Offset: 0x0005AC3C
			[CLSCompliant(false)]
			public unsafe static void MatrixMultTranspose(MatrixMode mode, float[] m)
			{
				fixed (float* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), mode, ptr, GL.EntryPoints[1216]);
				}
			}

			// Token: 0x060021F0 RID: 8688 RVA: 0x0005CA70 File Offset: 0x0005AC70
			[CLSCompliant(false)]
			public unsafe static void MatrixMultTranspose(MatrixMode mode, ref float m)
			{
				fixed (float* ptr = &m)
				{
					calli(System.Void(System.Int32,System.Single*), mode, ptr, GL.EntryPoints[1216]);
				}
			}

			// Token: 0x060021F1 RID: 8689 RVA: 0x0005CA94 File Offset: 0x0005AC94
			[CLSCompliant(false)]
			public unsafe static void MatrixMultTranspose(MatrixMode mode, float* m)
			{
				calli(System.Void(System.Int32,System.Single*), mode, m, GL.EntryPoints[1216]);
			}

			// Token: 0x060021F2 RID: 8690 RVA: 0x0005CAA8 File Offset: 0x0005ACA8
			public static void MatrixOrtho(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar)
			{
				calli(System.Void(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double), mode, left, right, bottom, top, zNear, zFar, GL.EntryPoints[1217]);
			}

			// Token: 0x060021F3 RID: 8691 RVA: 0x0005CAD0 File Offset: 0x0005ACD0
			public static void MatrixPop(MatrixMode mode)
			{
				calli(System.Void(System.Int32), mode, GL.EntryPoints[1218]);
			}

			// Token: 0x060021F4 RID: 8692 RVA: 0x0005CAE4 File Offset: 0x0005ACE4
			public static void MatrixPush(MatrixMode mode)
			{
				calli(System.Void(System.Int32), mode, GL.EntryPoints[1219]);
			}

			// Token: 0x060021F5 RID: 8693 RVA: 0x0005CAF8 File Offset: 0x0005ACF8
			public static void MatrixRotate(MatrixMode mode, double angle, double x, double y, double z)
			{
				calli(System.Void(System.Int32,System.Double,System.Double,System.Double,System.Double), mode, angle, x, y, z, GL.EntryPoints[1220]);
			}

			// Token: 0x060021F6 RID: 8694 RVA: 0x0005CB10 File Offset: 0x0005AD10
			public static void MatrixRotate(MatrixMode mode, float angle, float x, float y, float z)
			{
				calli(System.Void(System.Int32,System.Single,System.Single,System.Single,System.Single), mode, angle, x, y, z, GL.EntryPoints[1221]);
			}

			// Token: 0x060021F7 RID: 8695 RVA: 0x0005CB28 File Offset: 0x0005AD28
			public static void MatrixScale(MatrixMode mode, double x, double y, double z)
			{
				calli(System.Void(System.Int32,System.Double,System.Double,System.Double), mode, x, y, z, GL.EntryPoints[1222]);
			}

			// Token: 0x060021F8 RID: 8696 RVA: 0x0005CB40 File Offset: 0x0005AD40
			public static void MatrixScale(MatrixMode mode, float x, float y, float z)
			{
				calli(System.Void(System.Int32,System.Single,System.Single,System.Single), mode, x, y, z, GL.EntryPoints[1223]);
			}

			// Token: 0x060021F9 RID: 8697 RVA: 0x0005CB58 File Offset: 0x0005AD58
			public static void MatrixTranslate(MatrixMode mode, double x, double y, double z)
			{
				calli(System.Void(System.Int32,System.Double,System.Double,System.Double), mode, x, y, z, GL.EntryPoints[1224]);
			}

			// Token: 0x060021FA RID: 8698 RVA: 0x0005CB70 File Offset: 0x0005AD70
			public static void MatrixTranslate(MatrixMode mode, float x, float y, float z)
			{
				calli(System.Void(System.Int32,System.Single,System.Single,System.Single), mode, x, y, z, GL.EntryPoints[1225]);
			}

			// Token: 0x060021FB RID: 8699 RVA: 0x0005CB88 File Offset: 0x0005AD88
			[CLSCompliant(false)]
			public static void MemoryBarrier(int barriers)
			{
				calli(System.Void(System.UInt32), barriers, GL.EntryPoints[1227]);
			}

			// Token: 0x060021FC RID: 8700 RVA: 0x0005CB9C File Offset: 0x0005AD9C
			[CLSCompliant(false)]
			public static void MemoryBarrier(uint barriers)
			{
				calli(System.Void(System.UInt32), barriers, GL.EntryPoints[1227]);
			}

			// Token: 0x060021FD RID: 8701 RVA: 0x0005CBB0 File Offset: 0x0005ADB0
			[Obsolete("Use MinmaxTargetExt overload instead")]
			public static void Minmax(ExtHistogram target, PixelInternalFormat internalformat, bool sink)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean), target, internalformat, sink, GL.EntryPoints[1229]);
			}

			// Token: 0x060021FE RID: 8702 RVA: 0x0005CBC8 File Offset: 0x0005ADC8
			public static void Minmax(MinmaxTargetExt target, PixelInternalFormat internalformat, bool sink)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean), target, internalformat, sink, GL.EntryPoints[1229]);
			}

			// Token: 0x060021FF RID: 8703 RVA: 0x0005CBE0 File Offset: 0x0005ADE0
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiDrawArrays(BeginMode mode, int[] first, int[] count, int primcount)
			{
				fixed (int* ptr = ref (first != null && first.Length != 0) ? ref first[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, primcount, GL.EntryPoints[1233]);
					}
				}
			}

			// Token: 0x06002200 RID: 8704 RVA: 0x0005CC2C File Offset: 0x0005AE2C
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawArrays(BeginMode mode, ref int first, ref int count, int primcount)
			{
				fixed (int* ptr = &first)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, primcount, GL.EntryPoints[1233]);
					}
				}
			}

			// Token: 0x06002201 RID: 8705 RVA: 0x0005CC54 File Offset: 0x0005AE54
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawArrays(BeginMode mode, int* first, int* count, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, first, count, primcount, GL.EntryPoints[1233]);
			}

			// Token: 0x06002202 RID: 8706 RVA: 0x0005CC6C File Offset: 0x0005AE6C
			[CLSCompliant(false)]
			public unsafe static void MultiDrawArrays(PrimitiveType mode, int[] first, int[] count, int primcount)
			{
				fixed (int* ptr = ref (first != null && first.Length != 0) ? ref first[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, primcount, GL.EntryPoints[1233]);
					}
				}
			}

			// Token: 0x06002203 RID: 8707 RVA: 0x0005CCB8 File Offset: 0x0005AEB8
			[CLSCompliant(false)]
			public unsafe static void MultiDrawArrays(PrimitiveType mode, ref int first, ref int count, int primcount)
			{
				fixed (int* ptr = &first)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, primcount, GL.EntryPoints[1233]);
					}
				}
			}

			// Token: 0x06002204 RID: 8708 RVA: 0x0005CCE0 File Offset: 0x0005AEE0
			[CLSCompliant(false)]
			public unsafe static void MultiDrawArrays(PrimitiveType mode, int* first, int* count, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, first, count, primcount, GL.EntryPoints[1233]);
			}

			// Token: 0x06002205 RID: 8709 RVA: 0x0005CCF8 File Offset: 0x0005AEF8
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiDrawElements(BeginMode mode, int[] count, DrawElementsType type, IntPtr indices, int primcount)
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr, type, indices, primcount, GL.EntryPoints[1241]);
				}
			}

			// Token: 0x06002206 RID: 8710 RVA: 0x0005CD30 File Offset: 0x0005AF30
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(BeginMode mode, int[] count, DrawElementsType type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[1241]);
					}
				}
			}

			// Token: 0x06002207 RID: 8711 RVA: 0x0005CD80 File Offset: 0x0005AF80
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(BeginMode mode, int[] count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[1241]);
					}
				}
			}

			// Token: 0x06002208 RID: 8712 RVA: 0x0005CDD4 File Offset: 0x0005AFD4
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(BeginMode mode, int[] count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[1241]);
					}
				}
			}

			// Token: 0x06002209 RID: 8713 RVA: 0x0005CE28 File Offset: 0x0005B028
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(BeginMode mode, int[] count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = &indices)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[1241]);
					}
				}
			}

			// Token: 0x0600220A RID: 8714 RVA: 0x0005CE64 File Offset: 0x0005B064
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements(BeginMode mode, ref int count, DrawElementsType type, IntPtr indices, int primcount)
			{
				fixed (int* ptr = &count)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr, type, indices, primcount, GL.EntryPoints[1241]);
				}
			}

			// Token: 0x0600220B RID: 8715 RVA: 0x0005CE8C File Offset: 0x0005B08C
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(BeginMode mode, ref int count, DrawElementsType type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[1241]);
					}
				}
			}

			// Token: 0x0600220C RID: 8716 RVA: 0x0005CEC8 File Offset: 0x0005B0C8
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(BeginMode mode, ref int count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[1241]);
					}
				}
			}

			// Token: 0x0600220D RID: 8717 RVA: 0x0005CF08 File Offset: 0x0005B108
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(BeginMode mode, ref int count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[1241]);
					}
				}
			}

			// Token: 0x0600220E RID: 8718 RVA: 0x0005CF48 File Offset: 0x0005B148
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(BeginMode mode, ref int count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = &indices)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[1241]);
					}
				}
			}

			// Token: 0x0600220F RID: 8719 RVA: 0x0005CF74 File Offset: 0x0005B174
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiDrawElements(BeginMode mode, int* count, DrawElementsType type, IntPtr indices, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, primcount, GL.EntryPoints[1241]);
			}

			// Token: 0x06002210 RID: 8720 RVA: 0x0005CF8C File Offset: 0x0005B18C
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(BeginMode mode, int* count, DrawElementsType type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[1241]);
				}
			}

			// Token: 0x06002211 RID: 8721 RVA: 0x0005CFC4 File Offset: 0x0005B1C4
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(BeginMode mode, int* count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[1241]);
				}
			}

			// Token: 0x06002212 RID: 8722 RVA: 0x0005D000 File Offset: 0x0005B200
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiDrawElements<T3>(BeginMode mode, int* count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[1241]);
				}
			}

			// Token: 0x06002213 RID: 8723 RVA: 0x0005D040 File Offset: 0x0005B240
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(BeginMode mode, int* count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[1241]);
				}
			}

			// Token: 0x06002214 RID: 8724 RVA: 0x0005D068 File Offset: 0x0005B268
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements(PrimitiveType mode, int[] count, DrawElementsType type, IntPtr indices, int primcount)
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr, type, indices, primcount, GL.EntryPoints[1241]);
				}
			}

			// Token: 0x06002215 RID: 8725 RVA: 0x0005D0A0 File Offset: 0x0005B2A0
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[1241]);
					}
				}
			}

			// Token: 0x06002216 RID: 8726 RVA: 0x0005D0F0 File Offset: 0x0005B2F0
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[1241]);
					}
				}
			}

			// Token: 0x06002217 RID: 8727 RVA: 0x0005D144 File Offset: 0x0005B344
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[1241]);
					}
				}
			}

			// Token: 0x06002218 RID: 8728 RVA: 0x0005D198 File Offset: 0x0005B398
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = &indices)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[1241]);
					}
				}
			}

			// Token: 0x06002219 RID: 8729 RVA: 0x0005D1D4 File Offset: 0x0005B3D4
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements(PrimitiveType mode, ref int count, DrawElementsType type, IntPtr indices, int primcount)
			{
				fixed (int* ptr = &count)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr, type, indices, primcount, GL.EntryPoints[1241]);
				}
			}

			// Token: 0x0600221A RID: 8730 RVA: 0x0005D1FC File Offset: 0x0005B3FC
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[1241]);
					}
				}
			}

			// Token: 0x0600221B RID: 8731 RVA: 0x0005D238 File Offset: 0x0005B438
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[1241]);
					}
				}
			}

			// Token: 0x0600221C RID: 8732 RVA: 0x0005D278 File Offset: 0x0005B478
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[1241]);
					}
				}
			}

			// Token: 0x0600221D RID: 8733 RVA: 0x0005D2B8 File Offset: 0x0005B4B8
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = &indices)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[1241]);
					}
				}
			}

			// Token: 0x0600221E RID: 8734 RVA: 0x0005D2E4 File Offset: 0x0005B4E4
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements(PrimitiveType mode, int* count, DrawElementsType type, IntPtr indices, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, primcount, GL.EntryPoints[1241]);
			}

			// Token: 0x0600221F RID: 8735 RVA: 0x0005D2FC File Offset: 0x0005B4FC
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[1241]);
				}
			}

			// Token: 0x06002220 RID: 8736 RVA: 0x0005D334 File Offset: 0x0005B534
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[1241]);
				}
			}

			// Token: 0x06002221 RID: 8737 RVA: 0x0005D370 File Offset: 0x0005B570
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[1241]);
				}
			}

			// Token: 0x06002222 RID: 8738 RVA: 0x0005D3B0 File Offset: 0x0005B5B0
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[1241]);
				}
			}

			// Token: 0x06002223 RID: 8739 RVA: 0x0005D3D8 File Offset: 0x0005B5D8
			[CLSCompliant(false)]
			public static void MultiTexBuffer(TextureUnit texunit, TextureTarget target, ExtDirectStateAccess internalformat, int buffer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), texunit, target, internalformat, buffer, GL.EntryPoints[1249]);
			}

			// Token: 0x06002224 RID: 8740 RVA: 0x0005D3F0 File Offset: 0x0005B5F0
			[CLSCompliant(false)]
			public static void MultiTexBuffer(TextureUnit texunit, TextureTarget target, ExtDirectStateAccess internalformat, uint buffer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), texunit, target, internalformat, buffer, GL.EntryPoints[1249]);
			}

			// Token: 0x06002225 RID: 8741 RVA: 0x0005D408 File Offset: 0x0005B608
			public static void MultiTexCoordPointer(TextureUnit texunit, int size, TexCoordPointerType type, int stride, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, size, type, stride, pointer, GL.EntryPoints[1346]);
			}

			// Token: 0x06002226 RID: 8742 RVA: 0x0005D420 File Offset: 0x0005B620
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoordPointer<T4>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, [In] [Out] T4[] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, size, type, stride, ptr, GL.EntryPoints[1346]);
				}
			}

			// Token: 0x06002227 RID: 8743 RVA: 0x0005D45C File Offset: 0x0005B65C
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoordPointer<T4>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, size, type, stride, ptr, GL.EntryPoints[1346]);
				}
			}

			// Token: 0x06002228 RID: 8744 RVA: 0x0005D49C File Offset: 0x0005B69C
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoordPointer<T4>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, size, type, stride, ptr, GL.EntryPoints[1346]);
				}
			}

			// Token: 0x06002229 RID: 8745 RVA: 0x0005D4DC File Offset: 0x0005B6DC
			public unsafe static void MultiTexCoordPointer<T4>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
			{
				fixed (T4* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, size, type, stride, ptr, GL.EntryPoints[1346]);
				}
			}

			// Token: 0x0600222A RID: 8746 RVA: 0x0005D504 File Offset: 0x0005B704
			public static void MultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single), texunit, target, pname, param, GL.EntryPoints[1347]);
			}

			// Token: 0x0600222B RID: 8747 RVA: 0x0005D51C File Offset: 0x0005B71C
			[CLSCompliant(false)]
			public unsafe static void MultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texunit, target, pname, ptr, GL.EntryPoints[1348]);
				}
			}

			// Token: 0x0600222C RID: 8748 RVA: 0x0005D554 File Offset: 0x0005B754
			[CLSCompliant(false)]
			public unsafe static void MultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texunit, target, pname, @params, GL.EntryPoints[1348]);
			}

			// Token: 0x0600222D RID: 8749 RVA: 0x0005D56C File Offset: 0x0005B76C
			public static void MultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), texunit, target, pname, param, GL.EntryPoints[1349]);
			}

			// Token: 0x0600222E RID: 8750 RVA: 0x0005D584 File Offset: 0x0005B784
			[CLSCompliant(false)]
			public unsafe static void MultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, pname, ptr, GL.EntryPoints[1350]);
				}
			}

			// Token: 0x0600222F RID: 8751 RVA: 0x0005D5BC File Offset: 0x0005B7BC
			[CLSCompliant(false)]
			public unsafe static void MultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, pname, @params, GL.EntryPoints[1350]);
			}

			// Token: 0x06002230 RID: 8752 RVA: 0x0005D5D4 File Offset: 0x0005B7D4
			public static void MultiTexGend(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Double), texunit, coord, pname, param, GL.EntryPoints[1351]);
			}

			// Token: 0x06002231 RID: 8753 RVA: 0x0005D5EC File Offset: 0x0005B7EC
			[CLSCompliant(false)]
			public unsafe static void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Double*), texunit, coord, pname, ptr, GL.EntryPoints[1352]);
				}
			}

			// Token: 0x06002232 RID: 8754 RVA: 0x0005D624 File Offset: 0x0005B824
			[CLSCompliant(false)]
			public unsafe static void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Double*), texunit, coord, pname, ptr, GL.EntryPoints[1352]);
				}
			}

			// Token: 0x06002233 RID: 8755 RVA: 0x0005D648 File Offset: 0x0005B848
			[CLSCompliant(false)]
			public unsafe static void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Double*), texunit, coord, pname, @params, GL.EntryPoints[1352]);
			}

			// Token: 0x06002234 RID: 8756 RVA: 0x0005D660 File Offset: 0x0005B860
			public static void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single), texunit, coord, pname, param, GL.EntryPoints[1353]);
			}

			// Token: 0x06002235 RID: 8757 RVA: 0x0005D678 File Offset: 0x0005B878
			[CLSCompliant(false)]
			public unsafe static void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texunit, coord, pname, ptr, GL.EntryPoints[1354]);
				}
			}

			// Token: 0x06002236 RID: 8758 RVA: 0x0005D6B0 File Offset: 0x0005B8B0
			[CLSCompliant(false)]
			public unsafe static void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texunit, coord, pname, @params, GL.EntryPoints[1354]);
			}

			// Token: 0x06002237 RID: 8759 RVA: 0x0005D6C8 File Offset: 0x0005B8C8
			public static void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), texunit, coord, pname, param, GL.EntryPoints[1355]);
			}

			// Token: 0x06002238 RID: 8760 RVA: 0x0005D6E0 File Offset: 0x0005B8E0
			[CLSCompliant(false)]
			public unsafe static void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, coord, pname, ptr, GL.EntryPoints[1356]);
				}
			}

			// Token: 0x06002239 RID: 8761 RVA: 0x0005D718 File Offset: 0x0005B918
			[CLSCompliant(false)]
			public unsafe static void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, coord, pname, @params, GL.EntryPoints[1356]);
			}

			// Token: 0x0600223A RID: 8762 RVA: 0x0005D730 File Offset: 0x0005B930
			[Obsolete("Use int overload instead")]
			public static void MultiTexImage1D(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, border, format, type, pixels, GL.EntryPoints[1357]);
			}

			// Token: 0x0600223B RID: 8763 RVA: 0x0005D75C File Offset: 0x0005B95C
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiTexImage1D<T8>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[1357]);
				}
			}

			// Token: 0x0600223C RID: 8764 RVA: 0x0005D7A0 File Offset: 0x0005B9A0
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void MultiTexImage1D<T8>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[,] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[1357]);
				}
			}

			// Token: 0x0600223D RID: 8765 RVA: 0x0005D7E8 File Offset: 0x0005B9E8
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void MultiTexImage1D<T8>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[,,] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[1357]);
				}
			}

			// Token: 0x0600223E RID: 8766 RVA: 0x0005D830 File Offset: 0x0005BA30
			[Obsolete("Use int overload instead")]
			public unsafe static void MultiTexImage1D<T8>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] ref T8 pixels) where T8 : struct
			{
				fixed (T8* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[1357]);
				}
			}

			// Token: 0x0600223F RID: 8767 RVA: 0x0005D860 File Offset: 0x0005BA60
			public static void MultiTexImage1D(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, border, format, type, pixels, GL.EntryPoints[1357]);
			}

			// Token: 0x06002240 RID: 8768 RVA: 0x0005D88C File Offset: 0x0005BA8C
			[CLSCompliant(false)]
			public unsafe static void MultiTexImage1D<T8>(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[1357]);
				}
			}

			// Token: 0x06002241 RID: 8769 RVA: 0x0005D8D0 File Offset: 0x0005BAD0
			[CLSCompliant(false)]
			public unsafe static void MultiTexImage1D<T8>(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[,] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[1357]);
				}
			}

			// Token: 0x06002242 RID: 8770 RVA: 0x0005D918 File Offset: 0x0005BB18
			[CLSCompliant(false)]
			public unsafe static void MultiTexImage1D<T8>(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[,,] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[1357]);
				}
			}

			// Token: 0x06002243 RID: 8771 RVA: 0x0005D960 File Offset: 0x0005BB60
			public unsafe static void MultiTexImage1D<T8>(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] ref T8 pixels) where T8 : struct
			{
				fixed (T8* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[1357]);
				}
			}

			// Token: 0x06002244 RID: 8772 RVA: 0x0005D990 File Offset: 0x0005BB90
			[Obsolete("Use int overload instead")]
			public static void MultiTexImage2D(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, border, format, type, pixels, GL.EntryPoints[1358]);
			}

			// Token: 0x06002245 RID: 8773 RVA: 0x0005D9C0 File Offset: 0x0005BBC0
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiTexImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[1358]);
				}
			}

			// Token: 0x06002246 RID: 8774 RVA: 0x0005DA04 File Offset: 0x0005BC04
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void MultiTexImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[1358]);
				}
			}

			// Token: 0x06002247 RID: 8775 RVA: 0x0005DA4C File Offset: 0x0005BC4C
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void MultiTexImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[,,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[1358]);
				}
			}

			// Token: 0x06002248 RID: 8776 RVA: 0x0005DA98 File Offset: 0x0005BC98
			[Obsolete("Use int overload instead")]
			public unsafe static void MultiTexImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] ref T9 pixels) where T9 : struct
			{
				fixed (T9* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[1358]);
				}
			}

			// Token: 0x06002249 RID: 8777 RVA: 0x0005DAC8 File Offset: 0x0005BCC8
			public static void MultiTexImage2D(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, border, format, type, pixels, GL.EntryPoints[1358]);
			}

			// Token: 0x0600224A RID: 8778 RVA: 0x0005DAF8 File Offset: 0x0005BCF8
			[CLSCompliant(false)]
			public unsafe static void MultiTexImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[1358]);
				}
			}

			// Token: 0x0600224B RID: 8779 RVA: 0x0005DB3C File Offset: 0x0005BD3C
			[CLSCompliant(false)]
			public unsafe static void MultiTexImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[1358]);
				}
			}

			// Token: 0x0600224C RID: 8780 RVA: 0x0005DB84 File Offset: 0x0005BD84
			[CLSCompliant(false)]
			public unsafe static void MultiTexImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[,,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[1358]);
				}
			}

			// Token: 0x0600224D RID: 8781 RVA: 0x0005DBD0 File Offset: 0x0005BDD0
			public unsafe static void MultiTexImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] ref T9 pixels) where T9 : struct
			{
				fixed (T9* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[1358]);
				}
			}

			// Token: 0x0600224E RID: 8782 RVA: 0x0005DC00 File Offset: 0x0005BE00
			[Obsolete("Use int overload instead")]
			public static void MultiTexImage3D(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, depth, border, format, type, pixels, GL.EntryPoints[1359]);
			}

			// Token: 0x0600224F RID: 8783 RVA: 0x0005DC30 File Offset: 0x0005BE30
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiTexImage3D<T10>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[1359]);
				}
			}

			// Token: 0x06002250 RID: 8784 RVA: 0x0005DC78 File Offset: 0x0005BE78
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void MultiTexImage3D<T10>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[1359]);
				}
			}

			// Token: 0x06002251 RID: 8785 RVA: 0x0005DCC4 File Offset: 0x0005BEC4
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiTexImage3D<T10>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[,,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[1359]);
				}
			}

			// Token: 0x06002252 RID: 8786 RVA: 0x0005DD10 File Offset: 0x0005BF10
			[Obsolete("Use int overload instead")]
			public unsafe static void MultiTexImage3D<T10>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] ref T10 pixels) where T10 : struct
			{
				fixed (T10* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[1359]);
				}
			}

			// Token: 0x06002253 RID: 8787 RVA: 0x0005DD44 File Offset: 0x0005BF44
			public static void MultiTexImage3D(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, depth, border, format, type, pixels, GL.EntryPoints[1359]);
			}

			// Token: 0x06002254 RID: 8788 RVA: 0x0005DD74 File Offset: 0x0005BF74
			[CLSCompliant(false)]
			public unsafe static void MultiTexImage3D<T10>(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[1359]);
				}
			}

			// Token: 0x06002255 RID: 8789 RVA: 0x0005DDBC File Offset: 0x0005BFBC
			[CLSCompliant(false)]
			public unsafe static void MultiTexImage3D<T10>(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[1359]);
				}
			}

			// Token: 0x06002256 RID: 8790 RVA: 0x0005DE08 File Offset: 0x0005C008
			[CLSCompliant(false)]
			public unsafe static void MultiTexImage3D<T10>(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[,,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[1359]);
				}
			}

			// Token: 0x06002257 RID: 8791 RVA: 0x0005DE54 File Offset: 0x0005C054
			public unsafe static void MultiTexImage3D<T10>(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] ref T10 pixels) where T10 : struct
			{
				fixed (T10* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[1359]);
				}
			}

			// Token: 0x06002258 RID: 8792 RVA: 0x0005DE88 File Offset: 0x0005C088
			public static void MultiTexParameter(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single), texunit, target, pname, param, GL.EntryPoints[1360]);
			}

			// Token: 0x06002259 RID: 8793 RVA: 0x0005DEA0 File Offset: 0x0005C0A0
			[CLSCompliant(false)]
			public unsafe static void MultiTexParameter(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texunit, target, pname, ptr, GL.EntryPoints[1361]);
				}
			}

			// Token: 0x0600225A RID: 8794 RVA: 0x0005DED8 File Offset: 0x0005C0D8
			[CLSCompliant(false)]
			public unsafe static void MultiTexParameter(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texunit, target, pname, @params, GL.EntryPoints[1361]);
			}

			// Token: 0x0600225B RID: 8795 RVA: 0x0005DEF0 File Offset: 0x0005C0F0
			public static void MultiTexParameter(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), texunit, target, pname, param, GL.EntryPoints[1362]);
			}

			// Token: 0x0600225C RID: 8796 RVA: 0x0005DF08 File Offset: 0x0005C108
			[CLSCompliant(false)]
			public unsafe static void MultiTexParameterI(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, pname, ptr, GL.EntryPoints[1363]);
				}
			}

			// Token: 0x0600225D RID: 8797 RVA: 0x0005DF40 File Offset: 0x0005C140
			[CLSCompliant(false)]
			public unsafe static void MultiTexParameterI(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, pname, ptr, GL.EntryPoints[1363]);
				}
			}

			// Token: 0x0600225E RID: 8798 RVA: 0x0005DF64 File Offset: 0x0005C164
			[CLSCompliant(false)]
			public unsafe static void MultiTexParameterI(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, pname, @params, GL.EntryPoints[1363]);
			}

			// Token: 0x0600225F RID: 8799 RVA: 0x0005DF7C File Offset: 0x0005C17C
			[CLSCompliant(false)]
			public unsafe static void MultiTexParameterI(TextureUnit texunit, TextureTarget target, TextureParameterName pname, uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32*), texunit, target, pname, ptr, GL.EntryPoints[1364]);
				}
			}

			// Token: 0x06002260 RID: 8800 RVA: 0x0005DFB4 File Offset: 0x0005C1B4
			[CLSCompliant(false)]
			public unsafe static void MultiTexParameterI(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ref uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32*), texunit, target, pname, ptr, GL.EntryPoints[1364]);
				}
			}

			// Token: 0x06002261 RID: 8801 RVA: 0x0005DFD8 File Offset: 0x0005C1D8
			[CLSCompliant(false)]
			public unsafe static void MultiTexParameterI(TextureUnit texunit, TextureTarget target, TextureParameterName pname, uint* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32*), texunit, target, pname, @params, GL.EntryPoints[1364]);
			}

			// Token: 0x06002262 RID: 8802 RVA: 0x0005DFF0 File Offset: 0x0005C1F0
			[CLSCompliant(false)]
			public unsafe static void MultiTexParameter(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, pname, ptr, GL.EntryPoints[1365]);
				}
			}

			// Token: 0x06002263 RID: 8803 RVA: 0x0005E028 File Offset: 0x0005C228
			[CLSCompliant(false)]
			public unsafe static void MultiTexParameter(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), texunit, target, pname, @params, GL.EntryPoints[1365]);
			}

			// Token: 0x06002264 RID: 8804 RVA: 0x0005E040 File Offset: 0x0005C240
			[CLSCompliant(false)]
			public static void MultiTexRenderbuffer(TextureUnit texunit, TextureTarget target, int renderbuffer)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32), texunit, target, renderbuffer, GL.EntryPoints[1366]);
			}

			// Token: 0x06002265 RID: 8805 RVA: 0x0005E058 File Offset: 0x0005C258
			[CLSCompliant(false)]
			public static void MultiTexRenderbuffer(TextureUnit texunit, TextureTarget target, uint renderbuffer)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32), texunit, target, renderbuffer, GL.EntryPoints[1366]);
			}

			// Token: 0x06002266 RID: 8806 RVA: 0x0005E070 File Offset: 0x0005C270
			public static void MultiTexSubImage1D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, width, format, type, pixels, GL.EntryPoints[1367]);
			}

			// Token: 0x06002267 RID: 8807 RVA: 0x0005E09C File Offset: 0x0005C29C
			[CLSCompliant(false)]
			public unsafe static void MultiTexSubImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T7[] pixels) where T7 : struct
			{
				fixed (T7* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, width, format, type, ptr, GL.EntryPoints[1367]);
				}
			}

			// Token: 0x06002268 RID: 8808 RVA: 0x0005E0DC File Offset: 0x0005C2DC
			[CLSCompliant(false)]
			public unsafe static void MultiTexSubImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T7[,] pixels) where T7 : struct
			{
				fixed (T7* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, width, format, type, ptr, GL.EntryPoints[1367]);
				}
			}

			// Token: 0x06002269 RID: 8809 RVA: 0x0005E120 File Offset: 0x0005C320
			[CLSCompliant(false)]
			public unsafe static void MultiTexSubImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T7[,,] pixels) where T7 : struct
			{
				fixed (T7* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, width, format, type, ptr, GL.EntryPoints[1367]);
				}
			}

			// Token: 0x0600226A RID: 8810 RVA: 0x0005E168 File Offset: 0x0005C368
			public unsafe static void MultiTexSubImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] ref T7 pixels) where T7 : struct
			{
				fixed (T7* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, width, format, type, ptr, GL.EntryPoints[1367]);
				}
			}

			// Token: 0x0600226B RID: 8811 RVA: 0x0005E194 File Offset: 0x0005C394
			public static void MultiTexSubImage2D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, width, height, format, type, pixels, GL.EntryPoints[1368]);
			}

			// Token: 0x0600226C RID: 8812 RVA: 0x0005E1C4 File Offset: 0x0005C3C4
			[CLSCompliant(false)]
			public unsafe static void MultiTexSubImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T9[] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[1368]);
				}
			}

			// Token: 0x0600226D RID: 8813 RVA: 0x0005E208 File Offset: 0x0005C408
			[CLSCompliant(false)]
			public unsafe static void MultiTexSubImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T9[,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[1368]);
				}
			}

			// Token: 0x0600226E RID: 8814 RVA: 0x0005E250 File Offset: 0x0005C450
			[CLSCompliant(false)]
			public unsafe static void MultiTexSubImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T9[,,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[1368]);
				}
			}

			// Token: 0x0600226F RID: 8815 RVA: 0x0005E29C File Offset: 0x0005C49C
			public unsafe static void MultiTexSubImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T9 pixels) where T9 : struct
			{
				fixed (T9* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[1368]);
				}
			}

			// Token: 0x06002270 RID: 8816 RVA: 0x0005E2CC File Offset: 0x0005C4CC
			public static void MultiTexSubImage3D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels, GL.EntryPoints[1369]);
			}

			// Token: 0x06002271 RID: 8817 RVA: 0x0005E300 File Offset: 0x0005C500
			[CLSCompliant(false)]
			public unsafe static void MultiTexSubImage3D<T11>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T11[] pixels) where T11 : struct
			{
				fixed (T11* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[1369]);
				}
			}

			// Token: 0x06002272 RID: 8818 RVA: 0x0005E348 File Offset: 0x0005C548
			[CLSCompliant(false)]
			public unsafe static void MultiTexSubImage3D<T11>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T11[,] pixels) where T11 : struct
			{
				fixed (T11* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[1369]);
				}
			}

			// Token: 0x06002273 RID: 8819 RVA: 0x0005E394 File Offset: 0x0005C594
			[CLSCompliant(false)]
			public unsafe static void MultiTexSubImage3D<T11>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T11[,,] pixels) where T11 : struct
			{
				fixed (T11* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[1369]);
				}
			}

			// Token: 0x06002274 RID: 8820 RVA: 0x0005E3E4 File Offset: 0x0005C5E4
			public unsafe static void MultiTexSubImage3D<T11>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] ref T11 pixels) where T11 : struct
			{
				fixed (T11* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[1369]);
				}
			}

			// Token: 0x06002275 RID: 8821 RVA: 0x0005E418 File Offset: 0x0005C618
			[CLSCompliant(false)]
			public static void NamedBufferData(int buffer, IntPtr size, IntPtr data, ExtDirectStateAccess usage)
			{
				calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.Int32), buffer, size, data, usage, GL.EntryPoints[1378]);
			}

			// Token: 0x06002276 RID: 8822 RVA: 0x0005E430 File Offset: 0x0005C630
			[CLSCompliant(false)]
			public unsafe static void NamedBufferData<T2>(int buffer, IntPtr size, [In] [Out] T2[] data, ExtDirectStateAccess usage) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.Int32), buffer, size, ptr, usage, GL.EntryPoints[1378]);
				}
			}

			// Token: 0x06002277 RID: 8823 RVA: 0x0005E468 File Offset: 0x0005C668
			[CLSCompliant(false)]
			public unsafe static void NamedBufferData<T2>(int buffer, IntPtr size, [In] [Out] T2[,] data, ExtDirectStateAccess usage) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.Int32), buffer, size, ptr, usage, GL.EntryPoints[1378]);
				}
			}

			// Token: 0x06002278 RID: 8824 RVA: 0x0005E4A4 File Offset: 0x0005C6A4
			[CLSCompliant(false)]
			public unsafe static void NamedBufferData<T2>(int buffer, IntPtr size, [In] [Out] T2[,,] data, ExtDirectStateAccess usage) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.Int32), buffer, size, ptr, usage, GL.EntryPoints[1378]);
				}
			}

			// Token: 0x06002279 RID: 8825 RVA: 0x0005E4E0 File Offset: 0x0005C6E0
			[CLSCompliant(false)]
			public unsafe static void NamedBufferData<T2>(int buffer, IntPtr size, [In] [Out] ref T2 data, ExtDirectStateAccess usage) where T2 : struct
			{
				fixed (T2* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.Int32), buffer, size, ptr, usage, GL.EntryPoints[1378]);
				}
			}

			// Token: 0x0600227A RID: 8826 RVA: 0x0005E504 File Offset: 0x0005C704
			[CLSCompliant(false)]
			public static void NamedBufferData(uint buffer, IntPtr size, IntPtr data, ExtDirectStateAccess usage)
			{
				calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.Int32), buffer, size, data, usage, GL.EntryPoints[1378]);
			}

			// Token: 0x0600227B RID: 8827 RVA: 0x0005E51C File Offset: 0x0005C71C
			[CLSCompliant(false)]
			public unsafe static void NamedBufferData<T2>(uint buffer, IntPtr size, [In] [Out] T2[] data, ExtDirectStateAccess usage) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.Int32), buffer, size, ptr, usage, GL.EntryPoints[1378]);
				}
			}

			// Token: 0x0600227C RID: 8828 RVA: 0x0005E554 File Offset: 0x0005C754
			[CLSCompliant(false)]
			public unsafe static void NamedBufferData<T2>(uint buffer, IntPtr size, [In] [Out] T2[,] data, ExtDirectStateAccess usage) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.Int32), buffer, size, ptr, usage, GL.EntryPoints[1378]);
				}
			}

			// Token: 0x0600227D RID: 8829 RVA: 0x0005E590 File Offset: 0x0005C790
			[CLSCompliant(false)]
			public unsafe static void NamedBufferData<T2>(uint buffer, IntPtr size, [In] [Out] T2[,,] data, ExtDirectStateAccess usage) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.Int32), buffer, size, ptr, usage, GL.EntryPoints[1378]);
				}
			}

			// Token: 0x0600227E RID: 8830 RVA: 0x0005E5CC File Offset: 0x0005C7CC
			[CLSCompliant(false)]
			public unsafe static void NamedBufferData<T2>(uint buffer, IntPtr size, [In] [Out] ref T2 data, ExtDirectStateAccess usage) where T2 : struct
			{
				fixed (T2* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.Int32), buffer, size, ptr, usage, GL.EntryPoints[1378]);
				}
			}

			// Token: 0x0600227F RID: 8831 RVA: 0x0005E5F0 File Offset: 0x0005C7F0
			[CLSCompliant(false)]
			public static void NamedBufferStorage(int buffer, IntPtr size, IntPtr data, int flags)
			{
				calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.UInt32), buffer, size, data, flags, GL.EntryPoints[1379]);
			}

			// Token: 0x06002280 RID: 8832 RVA: 0x0005E608 File Offset: 0x0005C808
			[CLSCompliant(false)]
			public unsafe static void NamedBufferStorage<T2>(int buffer, IntPtr size, [In] [Out] T2[] data, int flags) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.UInt32), buffer, size, ptr, flags, GL.EntryPoints[1379]);
				}
			}

			// Token: 0x06002281 RID: 8833 RVA: 0x0005E640 File Offset: 0x0005C840
			[CLSCompliant(false)]
			public unsafe static void NamedBufferStorage<T2>(int buffer, IntPtr size, [In] [Out] T2[,] data, int flags) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.UInt32), buffer, size, ptr, flags, GL.EntryPoints[1379]);
				}
			}

			// Token: 0x06002282 RID: 8834 RVA: 0x0005E67C File Offset: 0x0005C87C
			[CLSCompliant(false)]
			public unsafe static void NamedBufferStorage<T2>(int buffer, IntPtr size, [In] [Out] T2[,,] data, int flags) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.UInt32), buffer, size, ptr, flags, GL.EntryPoints[1379]);
				}
			}

			// Token: 0x06002283 RID: 8835 RVA: 0x0005E6B8 File Offset: 0x0005C8B8
			[CLSCompliant(false)]
			public unsafe static void NamedBufferStorage<T2>(int buffer, IntPtr size, [In] [Out] ref T2 data, int flags) where T2 : struct
			{
				fixed (T2* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.UInt32), buffer, size, ptr, flags, GL.EntryPoints[1379]);
				}
			}

			// Token: 0x06002284 RID: 8836 RVA: 0x0005E6DC File Offset: 0x0005C8DC
			[CLSCompliant(false)]
			public static void NamedBufferStorage(uint buffer, IntPtr size, IntPtr data, uint flags)
			{
				calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.UInt32), buffer, size, data, flags, GL.EntryPoints[1379]);
			}

			// Token: 0x06002285 RID: 8837 RVA: 0x0005E6F4 File Offset: 0x0005C8F4
			[CLSCompliant(false)]
			public unsafe static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [In] [Out] T2[] data, uint flags) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.UInt32), buffer, size, ptr, flags, GL.EntryPoints[1379]);
				}
			}

			// Token: 0x06002286 RID: 8838 RVA: 0x0005E72C File Offset: 0x0005C92C
			[CLSCompliant(false)]
			public unsafe static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [In] [Out] T2[,] data, uint flags) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.UInt32), buffer, size, ptr, flags, GL.EntryPoints[1379]);
				}
			}

			// Token: 0x06002287 RID: 8839 RVA: 0x0005E768 File Offset: 0x0005C968
			[CLSCompliant(false)]
			public unsafe static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [In] [Out] T2[,,] data, uint flags) where T2 : struct
			{
				fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.UInt32), buffer, size, ptr, flags, GL.EntryPoints[1379]);
				}
			}

			// Token: 0x06002288 RID: 8840 RVA: 0x0005E7A4 File Offset: 0x0005C9A4
			[CLSCompliant(false)]
			public unsafe static void NamedBufferStorage<T2>(uint buffer, IntPtr size, [In] [Out] ref T2 data, uint flags) where T2 : struct
			{
				fixed (T2* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.UInt32), buffer, size, ptr, flags, GL.EntryPoints[1379]);
				}
			}

			// Token: 0x06002289 RID: 8841 RVA: 0x0005E7C8 File Offset: 0x0005C9C8
			[CLSCompliant(false)]
			public static void NamedBufferSubData(int buffer, IntPtr offset, IntPtr size, IntPtr data)
			{
				calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, data, GL.EntryPoints[1380]);
			}

			// Token: 0x0600228A RID: 8842 RVA: 0x0005E7E0 File Offset: 0x0005C9E0
			[CLSCompliant(false)]
			public unsafe static void NamedBufferSubData<T3>(int buffer, IntPtr offset, IntPtr size, [In] [Out] T3[] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, ptr, GL.EntryPoints[1380]);
				}
			}

			// Token: 0x0600228B RID: 8843 RVA: 0x0005E818 File Offset: 0x0005CA18
			[CLSCompliant(false)]
			public unsafe static void NamedBufferSubData<T3>(int buffer, IntPtr offset, IntPtr size, [In] [Out] T3[,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, ptr, GL.EntryPoints[1380]);
				}
			}

			// Token: 0x0600228C RID: 8844 RVA: 0x0005E854 File Offset: 0x0005CA54
			[CLSCompliant(false)]
			public unsafe static void NamedBufferSubData<T3>(int buffer, IntPtr offset, IntPtr size, [In] [Out] T3[,,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, ptr, GL.EntryPoints[1380]);
				}
			}

			// Token: 0x0600228D RID: 8845 RVA: 0x0005E890 File Offset: 0x0005CA90
			[CLSCompliant(false)]
			public unsafe static void NamedBufferSubData<T3>(int buffer, IntPtr offset, IntPtr size, [In] [Out] ref T3 data) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, ptr, GL.EntryPoints[1380]);
				}
			}

			// Token: 0x0600228E RID: 8846 RVA: 0x0005E8B4 File Offset: 0x0005CAB4
			[CLSCompliant(false)]
			public static void NamedBufferSubData(uint buffer, IntPtr offset, IntPtr size, IntPtr data)
			{
				calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, data, GL.EntryPoints[1380]);
			}

			// Token: 0x0600228F RID: 8847 RVA: 0x0005E8CC File Offset: 0x0005CACC
			[CLSCompliant(false)]
			public unsafe static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [In] [Out] T3[] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, ptr, GL.EntryPoints[1380]);
				}
			}

			// Token: 0x06002290 RID: 8848 RVA: 0x0005E904 File Offset: 0x0005CB04
			[CLSCompliant(false)]
			public unsafe static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [In] [Out] T3[,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, ptr, GL.EntryPoints[1380]);
				}
			}

			// Token: 0x06002291 RID: 8849 RVA: 0x0005E940 File Offset: 0x0005CB40
			[CLSCompliant(false)]
			public unsafe static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [In] [Out] T3[,,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, ptr, GL.EntryPoints[1380]);
				}
			}

			// Token: 0x06002292 RID: 8850 RVA: 0x0005E97C File Offset: 0x0005CB7C
			[CLSCompliant(false)]
			public unsafe static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [In] [Out] ref T3 data) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), buffer, offset, size, ptr, GL.EntryPoints[1380]);
				}
			}

			// Token: 0x06002293 RID: 8851 RVA: 0x0005E9A0 File Offset: 0x0005CBA0
			[CLSCompliant(false)]
			public static void NamedCopyBufferSubData(int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), readBuffer, writeBuffer, readOffset, writeOffset, size, GL.EntryPoints[1381]);
			}

			// Token: 0x06002294 RID: 8852 RVA: 0x0005E9B8 File Offset: 0x0005CBB8
			[CLSCompliant(false)]
			public static void NamedCopyBufferSubData(uint readBuffer, uint writeBuffer, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr), readBuffer, writeBuffer, readOffset, writeOffset, size, GL.EntryPoints[1381]);
			}

			// Token: 0x06002295 RID: 8853 RVA: 0x0005E9D0 File Offset: 0x0005CBD0
			[CLSCompliant(false)]
			public static void NamedFramebufferParameter(int framebuffer, FramebufferParameterName pname, int param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), framebuffer, pname, param, GL.EntryPoints[1382]);
			}

			// Token: 0x06002296 RID: 8854 RVA: 0x0005E9E8 File Offset: 0x0005CBE8
			[CLSCompliant(false)]
			public static void NamedFramebufferParameter(uint framebuffer, FramebufferParameterName pname, int param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), framebuffer, pname, param, GL.EntryPoints[1382]);
			}

			// Token: 0x06002297 RID: 8855 RVA: 0x0005EA00 File Offset: 0x0005CC00
			[CLSCompliant(false)]
			public static void NamedFramebufferRenderbuffer(int framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, int renderbuffer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32), framebuffer, attachment, renderbuffertarget, renderbuffer, GL.EntryPoints[1383]);
			}

			// Token: 0x06002298 RID: 8856 RVA: 0x0005EA18 File Offset: 0x0005CC18
			[CLSCompliant(false)]
			public static void NamedFramebufferRenderbuffer(uint framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32), framebuffer, attachment, renderbuffertarget, renderbuffer, GL.EntryPoints[1383]);
			}

			// Token: 0x06002299 RID: 8857 RVA: 0x0005EA30 File Offset: 0x0005CC30
			[CLSCompliant(false)]
			public static void NamedFramebufferTexture1D(int framebuffer, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32,System.Int32), framebuffer, attachment, textarget, texture, level, GL.EntryPoints[1384]);
			}

			// Token: 0x0600229A RID: 8858 RVA: 0x0005EA48 File Offset: 0x0005CC48
			[CLSCompliant(false)]
			public static void NamedFramebufferTexture1D(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32,System.Int32), framebuffer, attachment, textarget, texture, level, GL.EntryPoints[1384]);
			}

			// Token: 0x0600229B RID: 8859 RVA: 0x0005EA60 File Offset: 0x0005CC60
			[CLSCompliant(false)]
			public static void NamedFramebufferTexture2D(int framebuffer, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32,System.Int32), framebuffer, attachment, textarget, texture, level, GL.EntryPoints[1385]);
			}

			// Token: 0x0600229C RID: 8860 RVA: 0x0005EA78 File Offset: 0x0005CC78
			[CLSCompliant(false)]
			public static void NamedFramebufferTexture2D(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32,System.Int32), framebuffer, attachment, textarget, texture, level, GL.EntryPoints[1385]);
			}

			// Token: 0x0600229D RID: 8861 RVA: 0x0005EA90 File Offset: 0x0005CC90
			[CLSCompliant(false)]
			public static void NamedFramebufferTexture3D(int framebuffer, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level, int zoffset)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), framebuffer, attachment, textarget, texture, level, zoffset, GL.EntryPoints[1386]);
			}

			// Token: 0x0600229E RID: 8862 RVA: 0x0005EAAC File Offset: 0x0005CCAC
			[CLSCompliant(false)]
			public static void NamedFramebufferTexture3D(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), framebuffer, attachment, textarget, texture, level, zoffset, GL.EntryPoints[1386]);
			}

			// Token: 0x0600229F RID: 8863 RVA: 0x0005EAC8 File Offset: 0x0005CCC8
			[CLSCompliant(false)]
			public static void NamedFramebufferTexture(int framebuffer, FramebufferAttachment attachment, int texture, int level)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32), framebuffer, attachment, texture, level, GL.EntryPoints[1387]);
			}

			// Token: 0x060022A0 RID: 8864 RVA: 0x0005EAE0 File Offset: 0x0005CCE0
			[CLSCompliant(false)]
			public static void NamedFramebufferTexture(uint framebuffer, FramebufferAttachment attachment, uint texture, int level)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32), framebuffer, attachment, texture, level, GL.EntryPoints[1387]);
			}

			// Token: 0x060022A1 RID: 8865 RVA: 0x0005EAF8 File Offset: 0x0005CCF8
			[CLSCompliant(false)]
			public static void NamedFramebufferTextureFace(int framebuffer, FramebufferAttachment attachment, int texture, int level, TextureTarget face)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32), framebuffer, attachment, texture, level, face, GL.EntryPoints[1388]);
			}

			// Token: 0x060022A2 RID: 8866 RVA: 0x0005EB10 File Offset: 0x0005CD10
			[CLSCompliant(false)]
			public static void NamedFramebufferTextureFace(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, TextureTarget face)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32), framebuffer, attachment, texture, level, face, GL.EntryPoints[1388]);
			}

			// Token: 0x060022A3 RID: 8867 RVA: 0x0005EB28 File Offset: 0x0005CD28
			[CLSCompliant(false)]
			public static void NamedFramebufferTextureLayer(int framebuffer, FramebufferAttachment attachment, int texture, int level, int layer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32), framebuffer, attachment, texture, level, layer, GL.EntryPoints[1389]);
			}

			// Token: 0x060022A4 RID: 8868 RVA: 0x0005EB40 File Offset: 0x0005CD40
			[CLSCompliant(false)]
			public static void NamedFramebufferTextureLayer(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, int layer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32), framebuffer, attachment, texture, level, layer, GL.EntryPoints[1389]);
			}

			// Token: 0x060022A5 RID: 8869 RVA: 0x0005EB58 File Offset: 0x0005CD58
			[CLSCompliant(false)]
			public static void NamedProgramLocalParameter4(int program, ExtDirectStateAccess target, int index, double x, double y, double z, double w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Double,System.Double,System.Double,System.Double), program, target, index, x, y, z, w, GL.EntryPoints[1390]);
			}

			// Token: 0x060022A6 RID: 8870 RVA: 0x0005EB80 File Offset: 0x0005CD80
			[CLSCompliant(false)]
			public static void NamedProgramLocalParameter4(uint program, ExtDirectStateAccess target, uint index, double x, double y, double z, double w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Double,System.Double,System.Double,System.Double), program, target, index, x, y, z, w, GL.EntryPoints[1390]);
			}

			// Token: 0x060022A7 RID: 8871 RVA: 0x0005EBA8 File Offset: 0x0005CDA8
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameter4(int program, ExtDirectStateAccess target, int index, double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Double*), program, target, index, ptr, GL.EntryPoints[1391]);
				}
			}

			// Token: 0x060022A8 RID: 8872 RVA: 0x0005EBE0 File Offset: 0x0005CDE0
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameter4(int program, ExtDirectStateAccess target, int index, ref double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Double*), program, target, index, ptr, GL.EntryPoints[1391]);
				}
			}

			// Token: 0x060022A9 RID: 8873 RVA: 0x0005EC04 File Offset: 0x0005CE04
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameter4(int program, ExtDirectStateAccess target, int index, double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Double*), program, target, index, @params, GL.EntryPoints[1391]);
			}

			// Token: 0x060022AA RID: 8874 RVA: 0x0005EC1C File Offset: 0x0005CE1C
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameter4(uint program, ExtDirectStateAccess target, uint index, double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Double*), program, target, index, ptr, GL.EntryPoints[1391]);
				}
			}

			// Token: 0x060022AB RID: 8875 RVA: 0x0005EC54 File Offset: 0x0005CE54
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameter4(uint program, ExtDirectStateAccess target, uint index, ref double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Double*), program, target, index, ptr, GL.EntryPoints[1391]);
				}
			}

			// Token: 0x060022AC RID: 8876 RVA: 0x0005EC78 File Offset: 0x0005CE78
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameter4(uint program, ExtDirectStateAccess target, uint index, double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Double*), program, target, index, @params, GL.EntryPoints[1391]);
			}

			// Token: 0x060022AD RID: 8877 RVA: 0x0005EC90 File Offset: 0x0005CE90
			[CLSCompliant(false)]
			public static void NamedProgramLocalParameter4(int program, ExtDirectStateAccess target, int index, float x, float y, float z, float w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Single,System.Single,System.Single,System.Single), program, target, index, x, y, z, w, GL.EntryPoints[1392]);
			}

			// Token: 0x060022AE RID: 8878 RVA: 0x0005ECB8 File Offset: 0x0005CEB8
			[CLSCompliant(false)]
			public static void NamedProgramLocalParameter4(uint program, ExtDirectStateAccess target, uint index, float x, float y, float z, float w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Single,System.Single,System.Single,System.Single), program, target, index, x, y, z, w, GL.EntryPoints[1392]);
			}

			// Token: 0x060022AF RID: 8879 RVA: 0x0005ECE0 File Offset: 0x0005CEE0
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameter4(int program, ExtDirectStateAccess target, int index, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Single*), program, target, index, ptr, GL.EntryPoints[1393]);
				}
			}

			// Token: 0x060022B0 RID: 8880 RVA: 0x0005ED18 File Offset: 0x0005CF18
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameter4(int program, ExtDirectStateAccess target, int index, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Single*), program, target, index, ptr, GL.EntryPoints[1393]);
				}
			}

			// Token: 0x060022B1 RID: 8881 RVA: 0x0005ED3C File Offset: 0x0005CF3C
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameter4(int program, ExtDirectStateAccess target, int index, float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Single*), program, target, index, @params, GL.EntryPoints[1393]);
			}

			// Token: 0x060022B2 RID: 8882 RVA: 0x0005ED54 File Offset: 0x0005CF54
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameter4(uint program, ExtDirectStateAccess target, uint index, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Single*), program, target, index, ptr, GL.EntryPoints[1393]);
				}
			}

			// Token: 0x060022B3 RID: 8883 RVA: 0x0005ED8C File Offset: 0x0005CF8C
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameter4(uint program, ExtDirectStateAccess target, uint index, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Single*), program, target, index, ptr, GL.EntryPoints[1393]);
				}
			}

			// Token: 0x060022B4 RID: 8884 RVA: 0x0005EDB0 File Offset: 0x0005CFB0
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameter4(uint program, ExtDirectStateAccess target, uint index, float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Single*), program, target, index, @params, GL.EntryPoints[1393]);
			}

			// Token: 0x060022B5 RID: 8885 RVA: 0x0005EDC8 File Offset: 0x0005CFC8
			[CLSCompliant(false)]
			public static void NamedProgramLocalParameterI4(int program, ExtDirectStateAccess target, int index, int x, int y, int z, int w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), program, target, index, x, y, z, w, GL.EntryPoints[1394]);
			}

			// Token: 0x060022B6 RID: 8886 RVA: 0x0005EDF0 File Offset: 0x0005CFF0
			[CLSCompliant(false)]
			public static void NamedProgramLocalParameterI4(uint program, ExtDirectStateAccess target, uint index, int x, int y, int z, int w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), program, target, index, x, y, z, w, GL.EntryPoints[1394]);
			}

			// Token: 0x060022B7 RID: 8887 RVA: 0x0005EE18 File Offset: 0x0005D018
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameterI4(int program, ExtDirectStateAccess target, int index, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32*), program, target, index, ptr, GL.EntryPoints[1395]);
				}
			}

			// Token: 0x060022B8 RID: 8888 RVA: 0x0005EE50 File Offset: 0x0005D050
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameterI4(int program, ExtDirectStateAccess target, int index, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32*), program, target, index, ptr, GL.EntryPoints[1395]);
				}
			}

			// Token: 0x060022B9 RID: 8889 RVA: 0x0005EE74 File Offset: 0x0005D074
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameterI4(int program, ExtDirectStateAccess target, int index, int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32*), program, target, index, @params, GL.EntryPoints[1395]);
			}

			// Token: 0x060022BA RID: 8890 RVA: 0x0005EE8C File Offset: 0x0005D08C
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameterI4(uint program, ExtDirectStateAccess target, uint index, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32*), program, target, index, ptr, GL.EntryPoints[1395]);
				}
			}

			// Token: 0x060022BB RID: 8891 RVA: 0x0005EEC4 File Offset: 0x0005D0C4
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameterI4(uint program, ExtDirectStateAccess target, uint index, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32*), program, target, index, ptr, GL.EntryPoints[1395]);
				}
			}

			// Token: 0x060022BC RID: 8892 RVA: 0x0005EEE8 File Offset: 0x0005D0E8
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameterI4(uint program, ExtDirectStateAccess target, uint index, int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32*), program, target, index, @params, GL.EntryPoints[1395]);
			}

			// Token: 0x060022BD RID: 8893 RVA: 0x0005EF00 File Offset: 0x0005D100
			[CLSCompliant(false)]
			public static void NamedProgramLocalParameterI4(uint program, ExtDirectStateAccess target, uint index, uint x, uint y, uint z, uint w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), program, target, index, x, y, z, w, GL.EntryPoints[1396]);
			}

			// Token: 0x060022BE RID: 8894 RVA: 0x0005EF28 File Offset: 0x0005D128
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameterI4(uint program, ExtDirectStateAccess target, uint index, uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32*), program, target, index, ptr, GL.EntryPoints[1397]);
				}
			}

			// Token: 0x060022BF RID: 8895 RVA: 0x0005EF60 File Offset: 0x0005D160
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameterI4(uint program, ExtDirectStateAccess target, uint index, ref uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32*), program, target, index, ptr, GL.EntryPoints[1397]);
				}
			}

			// Token: 0x060022C0 RID: 8896 RVA: 0x0005EF84 File Offset: 0x0005D184
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameterI4(uint program, ExtDirectStateAccess target, uint index, uint* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32*), program, target, index, @params, GL.EntryPoints[1397]);
			}

			// Token: 0x060022C1 RID: 8897 RVA: 0x0005EF9C File Offset: 0x0005D19C
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameters4(int program, ExtDirectStateAccess target, int index, int count, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), program, target, index, count, ptr, GL.EntryPoints[1398]);
				}
			}

			// Token: 0x060022C2 RID: 8898 RVA: 0x0005EFD8 File Offset: 0x0005D1D8
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameters4(int program, ExtDirectStateAccess target, int index, int count, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), program, target, index, count, ptr, GL.EntryPoints[1398]);
				}
			}

			// Token: 0x060022C3 RID: 8899 RVA: 0x0005F000 File Offset: 0x0005D200
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameters4(int program, ExtDirectStateAccess target, int index, int count, float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), program, target, index, count, @params, GL.EntryPoints[1398]);
			}

			// Token: 0x060022C4 RID: 8900 RVA: 0x0005F018 File Offset: 0x0005D218
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameters4(uint program, ExtDirectStateAccess target, uint index, int count, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), program, target, index, count, ptr, GL.EntryPoints[1398]);
				}
			}

			// Token: 0x060022C5 RID: 8901 RVA: 0x0005F054 File Offset: 0x0005D254
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameters4(uint program, ExtDirectStateAccess target, uint index, int count, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), program, target, index, count, ptr, GL.EntryPoints[1398]);
				}
			}

			// Token: 0x060022C6 RID: 8902 RVA: 0x0005F07C File Offset: 0x0005D27C
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParameters4(uint program, ExtDirectStateAccess target, uint index, int count, float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), program, target, index, count, @params, GL.EntryPoints[1398]);
			}

			// Token: 0x060022C7 RID: 8903 RVA: 0x0005F094 File Offset: 0x0005D294
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParametersI4(int program, ExtDirectStateAccess target, int index, int count, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, target, index, count, ptr, GL.EntryPoints[1399]);
				}
			}

			// Token: 0x060022C8 RID: 8904 RVA: 0x0005F0D0 File Offset: 0x0005D2D0
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParametersI4(int program, ExtDirectStateAccess target, int index, int count, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, target, index, count, ptr, GL.EntryPoints[1399]);
				}
			}

			// Token: 0x060022C9 RID: 8905 RVA: 0x0005F0F8 File Offset: 0x0005D2F8
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParametersI4(int program, ExtDirectStateAccess target, int index, int count, int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, target, index, count, @params, GL.EntryPoints[1399]);
			}

			// Token: 0x060022CA RID: 8906 RVA: 0x0005F110 File Offset: 0x0005D310
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParametersI4(uint program, ExtDirectStateAccess target, uint index, int count, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, target, index, count, ptr, GL.EntryPoints[1399]);
				}
			}

			// Token: 0x060022CB RID: 8907 RVA: 0x0005F14C File Offset: 0x0005D34C
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParametersI4(uint program, ExtDirectStateAccess target, uint index, int count, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, target, index, count, ptr, GL.EntryPoints[1399]);
				}
			}

			// Token: 0x060022CC RID: 8908 RVA: 0x0005F174 File Offset: 0x0005D374
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParametersI4(uint program, ExtDirectStateAccess target, uint index, int count, int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32*), program, target, index, count, @params, GL.EntryPoints[1399]);
			}

			// Token: 0x060022CD RID: 8909 RVA: 0x0005F18C File Offset: 0x0005D38C
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParametersI4(uint program, ExtDirectStateAccess target, uint index, int count, uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.UInt32*), program, target, index, count, ptr, GL.EntryPoints[1400]);
				}
			}

			// Token: 0x060022CE RID: 8910 RVA: 0x0005F1C8 File Offset: 0x0005D3C8
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParametersI4(uint program, ExtDirectStateAccess target, uint index, int count, ref uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.UInt32*), program, target, index, count, ptr, GL.EntryPoints[1400]);
				}
			}

			// Token: 0x060022CF RID: 8911 RVA: 0x0005F1F0 File Offset: 0x0005D3F0
			[CLSCompliant(false)]
			public unsafe static void NamedProgramLocalParametersI4(uint program, ExtDirectStateAccess target, uint index, int count, uint* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.UInt32*), program, target, index, count, @params, GL.EntryPoints[1400]);
			}

			// Token: 0x060022D0 RID: 8912 RVA: 0x0005F208 File Offset: 0x0005D408
			[CLSCompliant(false)]
			public static void NamedProgramString(int program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, IntPtr @string)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), program, target, format, len, @string, GL.EntryPoints[1401]);
			}

			// Token: 0x060022D1 RID: 8913 RVA: 0x0005F220 File Offset: 0x0005D420
			[CLSCompliant(false)]
			public unsafe static void NamedProgramString<T4>(int program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, [In] [Out] T4[] @string) where T4 : struct
			{
				fixed (T4* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), program, target, format, len, ptr, GL.EntryPoints[1401]);
				}
			}

			// Token: 0x060022D2 RID: 8914 RVA: 0x0005F25C File Offset: 0x0005D45C
			[CLSCompliant(false)]
			public unsafe static void NamedProgramString<T4>(int program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, [In] [Out] T4[,] @string) where T4 : struct
			{
				fixed (T4* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), program, target, format, len, ptr, GL.EntryPoints[1401]);
				}
			}

			// Token: 0x060022D3 RID: 8915 RVA: 0x0005F29C File Offset: 0x0005D49C
			[CLSCompliant(false)]
			public unsafe static void NamedProgramString<T4>(int program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, [In] [Out] T4[,,] @string) where T4 : struct
			{
				fixed (T4* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), program, target, format, len, ptr, GL.EntryPoints[1401]);
				}
			}

			// Token: 0x060022D4 RID: 8916 RVA: 0x0005F2DC File Offset: 0x0005D4DC
			[CLSCompliant(false)]
			public unsafe static void NamedProgramString<T4>(int program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, [In] [Out] ref T4 @string) where T4 : struct
			{
				fixed (T4* ptr = &@string)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), program, target, format, len, ptr, GL.EntryPoints[1401]);
				}
			}

			// Token: 0x060022D5 RID: 8917 RVA: 0x0005F304 File Offset: 0x0005D504
			[CLSCompliant(false)]
			public static void NamedProgramString(uint program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, IntPtr @string)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), program, target, format, len, @string, GL.EntryPoints[1401]);
			}

			// Token: 0x060022D6 RID: 8918 RVA: 0x0005F31C File Offset: 0x0005D51C
			[CLSCompliant(false)]
			public unsafe static void NamedProgramString<T4>(uint program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, [In] [Out] T4[] @string) where T4 : struct
			{
				fixed (T4* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), program, target, format, len, ptr, GL.EntryPoints[1401]);
				}
			}

			// Token: 0x060022D7 RID: 8919 RVA: 0x0005F358 File Offset: 0x0005D558
			[CLSCompliant(false)]
			public unsafe static void NamedProgramString<T4>(uint program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, [In] [Out] T4[,] @string) where T4 : struct
			{
				fixed (T4* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), program, target, format, len, ptr, GL.EntryPoints[1401]);
				}
			}

			// Token: 0x060022D8 RID: 8920 RVA: 0x0005F398 File Offset: 0x0005D598
			[CLSCompliant(false)]
			public unsafe static void NamedProgramString<T4>(uint program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, [In] [Out] T4[,,] @string) where T4 : struct
			{
				fixed (T4* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), program, target, format, len, ptr, GL.EntryPoints[1401]);
				}
			}

			// Token: 0x060022D9 RID: 8921 RVA: 0x0005F3D8 File Offset: 0x0005D5D8
			[CLSCompliant(false)]
			public unsafe static void NamedProgramString<T4>(uint program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, [In] [Out] ref T4 @string) where T4 : struct
			{
				fixed (T4* ptr = &@string)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), program, target, format, len, ptr, GL.EntryPoints[1401]);
				}
			}

			// Token: 0x060022DA RID: 8922 RVA: 0x0005F400 File Offset: 0x0005D600
			[CLSCompliant(false)]
			public static void NamedRenderbufferStorage(int renderbuffer, PixelInternalFormat internalformat, int width, int height)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), renderbuffer, internalformat, width, height, GL.EntryPoints[1402]);
			}

			// Token: 0x060022DB RID: 8923 RVA: 0x0005F418 File Offset: 0x0005D618
			[CLSCompliant(false)]
			public static void NamedRenderbufferStorage(uint renderbuffer, PixelInternalFormat internalformat, int width, int height)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), renderbuffer, internalformat, width, height, GL.EntryPoints[1402]);
			}

			// Token: 0x060022DC RID: 8924 RVA: 0x0005F430 File Offset: 0x0005D630
			[CLSCompliant(false)]
			public static void NamedRenderbufferStorageMultisampleCoverage(int renderbuffer, int coverageSamples, int colorSamples, PixelInternalFormat internalformat, int width, int height)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), renderbuffer, coverageSamples, colorSamples, internalformat, width, height, GL.EntryPoints[1403]);
			}

			// Token: 0x060022DD RID: 8925 RVA: 0x0005F44C File Offset: 0x0005D64C
			[CLSCompliant(false)]
			public static void NamedRenderbufferStorageMultisampleCoverage(uint renderbuffer, int coverageSamples, int colorSamples, PixelInternalFormat internalformat, int width, int height)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), renderbuffer, coverageSamples, colorSamples, internalformat, width, height, GL.EntryPoints[1403]);
			}

			// Token: 0x060022DE RID: 8926 RVA: 0x0005F468 File Offset: 0x0005D668
			[CLSCompliant(false)]
			public static void NamedRenderbufferStorageMultisample(int renderbuffer, int samples, PixelInternalFormat internalformat, int width, int height)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), renderbuffer, samples, internalformat, width, height, GL.EntryPoints[1404]);
			}

			// Token: 0x060022DF RID: 8927 RVA: 0x0005F480 File Offset: 0x0005D680
			[CLSCompliant(false)]
			public static void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, PixelInternalFormat internalformat, int width, int height)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), renderbuffer, samples, internalformat, width, height, GL.EntryPoints[1404]);
			}

			// Token: 0x060022E0 RID: 8928 RVA: 0x0005F498 File Offset: 0x0005D698
			public static void NormalPointer(NormalPointerType type, int stride, int count, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), type, stride, count, pointer, GL.EntryPoints[1428]);
			}

			// Token: 0x060022E1 RID: 8929 RVA: 0x0005F4B0 File Offset: 0x0005D6B0
			[CLSCompliant(false)]
			public unsafe static void NormalPointer<T3>(NormalPointerType type, int stride, int count, [In] [Out] T3[] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), type, stride, count, ptr, GL.EntryPoints[1428]);
				}
			}

			// Token: 0x060022E2 RID: 8930 RVA: 0x0005F4E8 File Offset: 0x0005D6E8
			[CLSCompliant(false)]
			public unsafe static void NormalPointer<T3>(NormalPointerType type, int stride, int count, [In] [Out] T3[,] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), type, stride, count, ptr, GL.EntryPoints[1428]);
				}
			}

			// Token: 0x060022E3 RID: 8931 RVA: 0x0005F524 File Offset: 0x0005D724
			[CLSCompliant(false)]
			public unsafe static void NormalPointer<T3>(NormalPointerType type, int stride, int count, [In] [Out] T3[,,] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), type, stride, count, ptr, GL.EntryPoints[1428]);
				}
			}

			// Token: 0x060022E4 RID: 8932 RVA: 0x0005F560 File Offset: 0x0005D760
			public unsafe static void NormalPointer<T3>(NormalPointerType type, int stride, int count, [In] [Out] ref T3 pointer) where T3 : struct
			{
				fixed (T3* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), type, stride, count, ptr, GL.EntryPoints[1428]);
				}
			}

			// Token: 0x060022E5 RID: 8933 RVA: 0x0005F584 File Offset: 0x0005D784
			public static void PixelTransformParameter(ExtPixelTransform target, ExtPixelTransform pname, float param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single), target, pname, param, GL.EntryPoints[1491]);
			}

			// Token: 0x060022E6 RID: 8934 RVA: 0x0005F59C File Offset: 0x0005D79C
			[CLSCompliant(false)]
			public unsafe static void PixelTransformParameter(ExtPixelTransform target, ExtPixelTransform pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[1492]);
			}

			// Token: 0x060022E7 RID: 8935 RVA: 0x0005F5B4 File Offset: 0x0005D7B4
			public static void PixelTransformParameter(ExtPixelTransform target, ExtPixelTransform pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, param, GL.EntryPoints[1493]);
			}

			// Token: 0x060022E8 RID: 8936 RVA: 0x0005F5CC File Offset: 0x0005D7CC
			[CLSCompliant(false)]
			public unsafe static void PixelTransformParameter(ExtPixelTransform target, ExtPixelTransform pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[1494]);
			}

			// Token: 0x060022E9 RID: 8937 RVA: 0x0005F5E4 File Offset: 0x0005D7E4
			public static void PointParameter(ExtPointParameters pname, float param)
			{
				calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[1502]);
			}

			// Token: 0x060022EA RID: 8938 RVA: 0x0005F5F8 File Offset: 0x0005D7F8
			[CLSCompliant(false)]
			public unsafe static void PointParameter(ExtPointParameters pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[1506]);
				}
			}

			// Token: 0x060022EB RID: 8939 RVA: 0x0005F62C File Offset: 0x0005D82C
			[CLSCompliant(false)]
			public unsafe static void PointParameter(ExtPointParameters pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Single*), pname, @params, GL.EntryPoints[1506]);
			}

			// Token: 0x060022EC RID: 8940 RVA: 0x0005F640 File Offset: 0x0005D840
			public static void PolygonOffset(float factor, float bias)
			{
				calli(System.Void(System.Single,System.Single), factor, bias, GL.EntryPoints[1520]);
			}

			// Token: 0x060022ED RID: 8941 RVA: 0x0005F654 File Offset: 0x0005D854
			public static void PopGroupMarker()
			{
				calli(System.Void(), GL.EntryPoints[1527]);
			}

			// Token: 0x060022EE RID: 8942 RVA: 0x0005F668 File Offset: 0x0005D868
			[CLSCompliant(false)]
			public unsafe static void PrioritizeTextures(int n, int[] textures, float[] priorities)
			{
				fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = ref (priorities != null && priorities.Length != 0) ? ref priorities[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.UInt32*,System.Single*), n, ptr2, ptr3, GL.EntryPoints[1536]);
					}
				}
			}

			// Token: 0x060022EF RID: 8943 RVA: 0x0005F6B4 File Offset: 0x0005D8B4
			[CLSCompliant(false)]
			public unsafe static void PrioritizeTextures(int n, ref int textures, ref float priorities)
			{
				fixed (int* ptr = &textures)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = &priorities)
					{
						calli(System.Void(System.Int32,System.UInt32*,System.Single*), n, ptr2, ptr3, GL.EntryPoints[1536]);
					}
				}
			}

			// Token: 0x060022F0 RID: 8944 RVA: 0x0005F6DC File Offset: 0x0005D8DC
			[CLSCompliant(false)]
			public unsafe static void PrioritizeTextures(int n, int* textures, float* priorities)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Single*), n, textures, priorities, GL.EntryPoints[1536]);
			}

			// Token: 0x060022F1 RID: 8945 RVA: 0x0005F6F4 File Offset: 0x0005D8F4
			[CLSCompliant(false)]
			public unsafe static void PrioritizeTextures(int n, uint[] textures, float[] priorities)
			{
				fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = ref (priorities != null && priorities.Length != 0) ? ref priorities[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.UInt32*,System.Single*), n, ptr2, ptr3, GL.EntryPoints[1536]);
					}
				}
			}

			// Token: 0x060022F2 RID: 8946 RVA: 0x0005F740 File Offset: 0x0005D940
			[CLSCompliant(false)]
			public unsafe static void PrioritizeTextures(int n, ref uint textures, ref float priorities)
			{
				fixed (uint* ptr = &textures)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = &priorities)
					{
						calli(System.Void(System.Int32,System.UInt32*,System.Single*), n, ptr2, ptr3, GL.EntryPoints[1536]);
					}
				}
			}

			// Token: 0x060022F3 RID: 8947 RVA: 0x0005F768 File Offset: 0x0005D968
			[CLSCompliant(false)]
			public unsafe static void PrioritizeTextures(int n, uint* textures, float* priorities)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Single*), n, textures, priorities, GL.EntryPoints[1536]);
			}

			// Token: 0x060022F4 RID: 8948 RVA: 0x0005F780 File Offset: 0x0005D980
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameters4(ExtGpuProgramParameters target, int index, int count, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, ptr, GL.EntryPoints[1550]);
				}
			}

			// Token: 0x060022F5 RID: 8949 RVA: 0x0005F7B8 File Offset: 0x0005D9B8
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameters4(ExtGpuProgramParameters target, int index, int count, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, ptr, GL.EntryPoints[1550]);
				}
			}

			// Token: 0x060022F6 RID: 8950 RVA: 0x0005F7DC File Offset: 0x0005D9DC
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameters4(ExtGpuProgramParameters target, int index, int count, float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, @params, GL.EntryPoints[1550]);
			}

			// Token: 0x060022F7 RID: 8951 RVA: 0x0005F7F4 File Offset: 0x0005D9F4
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameters4(ExtGpuProgramParameters target, uint index, int count, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, ptr, GL.EntryPoints[1550]);
				}
			}

			// Token: 0x060022F8 RID: 8952 RVA: 0x0005F82C File Offset: 0x0005DA2C
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameters4(ExtGpuProgramParameters target, uint index, int count, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, ptr, GL.EntryPoints[1550]);
				}
			}

			// Token: 0x060022F9 RID: 8953 RVA: 0x0005F850 File Offset: 0x0005DA50
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameters4(ExtGpuProgramParameters target, uint index, int count, float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, @params, GL.EntryPoints[1550]);
			}

			// Token: 0x060022FA RID: 8954 RVA: 0x0005F868 File Offset: 0x0005DA68
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameters4(ExtGpuProgramParameters target, int index, int count, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, ptr, GL.EntryPoints[1561]);
				}
			}

			// Token: 0x060022FB RID: 8955 RVA: 0x0005F8A0 File Offset: 0x0005DAA0
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameters4(ExtGpuProgramParameters target, int index, int count, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, ptr, GL.EntryPoints[1561]);
				}
			}

			// Token: 0x060022FC RID: 8956 RVA: 0x0005F8C4 File Offset: 0x0005DAC4
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameters4(ExtGpuProgramParameters target, int index, int count, float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, @params, GL.EntryPoints[1561]);
			}

			// Token: 0x060022FD RID: 8957 RVA: 0x0005F8DC File Offset: 0x0005DADC
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameters4(ExtGpuProgramParameters target, uint index, int count, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, ptr, GL.EntryPoints[1561]);
				}
			}

			// Token: 0x060022FE RID: 8958 RVA: 0x0005F914 File Offset: 0x0005DB14
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameters4(ExtGpuProgramParameters target, uint index, int count, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, ptr, GL.EntryPoints[1561]);
				}
			}

			// Token: 0x060022FF RID: 8959 RVA: 0x0005F938 File Offset: 0x0005DB38
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameters4(ExtGpuProgramParameters target, uint index, int count, float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, @params, GL.EntryPoints[1561]);
			}

			// Token: 0x06002300 RID: 8960 RVA: 0x0005F950 File Offset: 0x0005DB50
			[CLSCompliant(false)]
			public static void ProgramParameter(int program, AssemblyProgramParameterArb pname, int value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[1574]);
			}

			// Token: 0x06002301 RID: 8961 RVA: 0x0005F968 File Offset: 0x0005DB68
			[CLSCompliant(false)]
			public static void ProgramParameter(uint program, AssemblyProgramParameterArb pname, int value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[1574]);
			}

			// Token: 0x06002302 RID: 8962 RVA: 0x0005F980 File Offset: 0x0005DB80
			[CLSCompliant(false)]
			public static void ProgramUniform1(int program, int location, double x)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double), program, location, x, GL.EntryPoints[1580]);
			}

			// Token: 0x06002303 RID: 8963 RVA: 0x0005F998 File Offset: 0x0005DB98
			[CLSCompliant(false)]
			public static void ProgramUniform1(uint program, int location, double x)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double), program, location, x, GL.EntryPoints[1580]);
			}

			// Token: 0x06002304 RID: 8964 RVA: 0x0005F9B0 File Offset: 0x0005DBB0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1582]);
				}
			}

			// Token: 0x06002305 RID: 8965 RVA: 0x0005F9E8 File Offset: 0x0005DBE8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1582]);
				}
			}

			// Token: 0x06002306 RID: 8966 RVA: 0x0005FA0C File Offset: 0x0005DC0C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[1582]);
			}

			// Token: 0x06002307 RID: 8967 RVA: 0x0005FA24 File Offset: 0x0005DC24
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1582]);
				}
			}

			// Token: 0x06002308 RID: 8968 RVA: 0x0005FA5C File Offset: 0x0005DC5C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1582]);
				}
			}

			// Token: 0x06002309 RID: 8969 RVA: 0x0005FA80 File Offset: 0x0005DC80
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[1582]);
			}

			// Token: 0x0600230A RID: 8970 RVA: 0x0005FA98 File Offset: 0x0005DC98
			[CLSCompliant(false)]
			public static void ProgramUniform1(int program, int location, float v0)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single), program, location, v0, GL.EntryPoints[1584]);
			}

			// Token: 0x0600230B RID: 8971 RVA: 0x0005FAB0 File Offset: 0x0005DCB0
			[CLSCompliant(false)]
			public static void ProgramUniform1(uint program, int location, float v0)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single), program, location, v0, GL.EntryPoints[1584]);
			}

			// Token: 0x0600230C RID: 8972 RVA: 0x0005FAC8 File Offset: 0x0005DCC8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1586]);
				}
			}

			// Token: 0x0600230D RID: 8973 RVA: 0x0005FB00 File Offset: 0x0005DD00
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1586]);
				}
			}

			// Token: 0x0600230E RID: 8974 RVA: 0x0005FB24 File Offset: 0x0005DD24
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[1586]);
			}

			// Token: 0x0600230F RID: 8975 RVA: 0x0005FB3C File Offset: 0x0005DD3C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1586]);
				}
			}

			// Token: 0x06002310 RID: 8976 RVA: 0x0005FB74 File Offset: 0x0005DD74
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1586]);
				}
			}

			// Token: 0x06002311 RID: 8977 RVA: 0x0005FB98 File Offset: 0x0005DD98
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[1586]);
			}

			// Token: 0x06002312 RID: 8978 RVA: 0x0005FBB0 File Offset: 0x0005DDB0
			[CLSCompliant(false)]
			public static void ProgramUniform1(int program, int location, int v0)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), program, location, v0, GL.EntryPoints[1590]);
			}

			// Token: 0x06002313 RID: 8979 RVA: 0x0005FBC8 File Offset: 0x0005DDC8
			[CLSCompliant(false)]
			public static void ProgramUniform1(uint program, int location, int v0)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), program, location, v0, GL.EntryPoints[1590]);
			}

			// Token: 0x06002314 RID: 8980 RVA: 0x0005FBE0 File Offset: 0x0005DDE0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1592]);
				}
			}

			// Token: 0x06002315 RID: 8981 RVA: 0x0005FC18 File Offset: 0x0005DE18
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1592]);
				}
			}

			// Token: 0x06002316 RID: 8982 RVA: 0x0005FC3C File Offset: 0x0005DE3C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[1592]);
			}

			// Token: 0x06002317 RID: 8983 RVA: 0x0005FC54 File Offset: 0x0005DE54
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1592]);
				}
			}

			// Token: 0x06002318 RID: 8984 RVA: 0x0005FC8C File Offset: 0x0005DE8C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1592]);
				}
			}

			// Token: 0x06002319 RID: 8985 RVA: 0x0005FCB0 File Offset: 0x0005DEB0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[1592]);
			}

			// Token: 0x0600231A RID: 8986 RVA: 0x0005FCC8 File Offset: 0x0005DEC8
			[CLSCompliant(false)]
			public static void ProgramUniform1(uint program, int location, uint v0)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32), program, location, v0, GL.EntryPoints[1596]);
			}

			// Token: 0x0600231B RID: 8987 RVA: 0x0005FCE0 File Offset: 0x0005DEE0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, uint[] value)
			{
				fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[1598]);
				}
			}

			// Token: 0x0600231C RID: 8988 RVA: 0x0005FD18 File Offset: 0x0005DF18
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, ref uint value)
			{
				fixed (uint* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[1598]);
				}
			}

			// Token: 0x0600231D RID: 8989 RVA: 0x0005FD3C File Offset: 0x0005DF3C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, uint* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, value, GL.EntryPoints[1598]);
			}

			// Token: 0x0600231E RID: 8990 RVA: 0x0005FD54 File Offset: 0x0005DF54
			[CLSCompliant(false)]
			public static void ProgramUniform2(int program, int location, double x, double y)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double), program, location, x, y, GL.EntryPoints[1600]);
			}

			// Token: 0x0600231F RID: 8991 RVA: 0x0005FD6C File Offset: 0x0005DF6C
			[CLSCompliant(false)]
			public static void ProgramUniform2(uint program, int location, double x, double y)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double), program, location, x, y, GL.EntryPoints[1600]);
			}

			// Token: 0x06002320 RID: 8992 RVA: 0x0005FD84 File Offset: 0x0005DF84
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(int program, int location, int count, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1602]);
				}
			}

			// Token: 0x06002321 RID: 8993 RVA: 0x0005FDBC File Offset: 0x0005DFBC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(int program, int location, int count, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1602]);
				}
			}

			// Token: 0x06002322 RID: 8994 RVA: 0x0005FDE0 File Offset: 0x0005DFE0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(int program, int location, int count, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[1602]);
			}

			// Token: 0x06002323 RID: 8995 RVA: 0x0005FDF8 File Offset: 0x0005DFF8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1602]);
				}
			}

			// Token: 0x06002324 RID: 8996 RVA: 0x0005FE30 File Offset: 0x0005E030
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1602]);
				}
			}

			// Token: 0x06002325 RID: 8997 RVA: 0x0005FE54 File Offset: 0x0005E054
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[1602]);
			}

			// Token: 0x06002326 RID: 8998 RVA: 0x0005FE6C File Offset: 0x0005E06C
			[CLSCompliant(false)]
			public static void ProgramUniform2(int program, int location, float v0, float v1)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single), program, location, v0, v1, GL.EntryPoints[1604]);
			}

			// Token: 0x06002327 RID: 8999 RVA: 0x0005FE84 File Offset: 0x0005E084
			[CLSCompliant(false)]
			public static void ProgramUniform2(uint program, int location, float v0, float v1)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single), program, location, v0, v1, GL.EntryPoints[1604]);
			}

			// Token: 0x06002328 RID: 9000 RVA: 0x0005FE9C File Offset: 0x0005E09C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(int program, int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1606]);
				}
			}

			// Token: 0x06002329 RID: 9001 RVA: 0x0005FED4 File Offset: 0x0005E0D4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(int program, int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1606]);
				}
			}

			// Token: 0x0600232A RID: 9002 RVA: 0x0005FEF8 File Offset: 0x0005E0F8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(int program, int location, int count, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[1606]);
			}

			// Token: 0x0600232B RID: 9003 RVA: 0x0005FF10 File Offset: 0x0005E110
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1606]);
				}
			}

			// Token: 0x0600232C RID: 9004 RVA: 0x0005FF48 File Offset: 0x0005E148
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1606]);
				}
			}

			// Token: 0x0600232D RID: 9005 RVA: 0x0005FF6C File Offset: 0x0005E16C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[1606]);
			}

			// Token: 0x0600232E RID: 9006 RVA: 0x0005FF84 File Offset: 0x0005E184
			[CLSCompliant(false)]
			public static void ProgramUniform2(int program, int location, int v0, int v1)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, GL.EntryPoints[1610]);
			}

			// Token: 0x0600232F RID: 9007 RVA: 0x0005FF9C File Offset: 0x0005E19C
			[CLSCompliant(false)]
			public static void ProgramUniform2(uint program, int location, int v0, int v1)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, GL.EntryPoints[1610]);
			}

			// Token: 0x06002330 RID: 9008 RVA: 0x0005FFB4 File Offset: 0x0005E1B4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(int program, int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1612]);
				}
			}

			// Token: 0x06002331 RID: 9009 RVA: 0x0005FFEC File Offset: 0x0005E1EC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(int program, int location, int count, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[1612]);
			}

			// Token: 0x06002332 RID: 9010 RVA: 0x00060004 File Offset: 0x0005E204
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1612]);
				}
			}

			// Token: 0x06002333 RID: 9011 RVA: 0x0006003C File Offset: 0x0005E23C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[1612]);
			}

			// Token: 0x06002334 RID: 9012 RVA: 0x00060054 File Offset: 0x0005E254
			[CLSCompliant(false)]
			public static void ProgramUniform2(uint program, int location, uint v0, uint v1)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32), program, location, v0, v1, GL.EntryPoints[1616]);
			}

			// Token: 0x06002335 RID: 9013 RVA: 0x0006006C File Offset: 0x0005E26C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, uint[] value)
			{
				fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[1618]);
				}
			}

			// Token: 0x06002336 RID: 9014 RVA: 0x000600A4 File Offset: 0x0005E2A4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, ref uint value)
			{
				fixed (uint* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[1618]);
				}
			}

			// Token: 0x06002337 RID: 9015 RVA: 0x000600C8 File Offset: 0x0005E2C8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, uint* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, value, GL.EntryPoints[1618]);
			}

			// Token: 0x06002338 RID: 9016 RVA: 0x000600E0 File Offset: 0x0005E2E0
			[CLSCompliant(false)]
			public static void ProgramUniform3(int program, int location, double x, double y, double z)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double,System.Double), program, location, x, y, z, GL.EntryPoints[1620]);
			}

			// Token: 0x06002339 RID: 9017 RVA: 0x000600F8 File Offset: 0x0005E2F8
			[CLSCompliant(false)]
			public static void ProgramUniform3(uint program, int location, double x, double y, double z)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double,System.Double), program, location, x, y, z, GL.EntryPoints[1620]);
			}

			// Token: 0x0600233A RID: 9018 RVA: 0x00060110 File Offset: 0x0005E310
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1622]);
				}
			}

			// Token: 0x0600233B RID: 9019 RVA: 0x00060148 File Offset: 0x0005E348
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1622]);
				}
			}

			// Token: 0x0600233C RID: 9020 RVA: 0x0006016C File Offset: 0x0005E36C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[1622]);
			}

			// Token: 0x0600233D RID: 9021 RVA: 0x00060184 File Offset: 0x0005E384
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1622]);
				}
			}

			// Token: 0x0600233E RID: 9022 RVA: 0x000601BC File Offset: 0x0005E3BC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1622]);
				}
			}

			// Token: 0x0600233F RID: 9023 RVA: 0x000601E0 File Offset: 0x0005E3E0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[1622]);
			}

			// Token: 0x06002340 RID: 9024 RVA: 0x000601F8 File Offset: 0x0005E3F8
			[CLSCompliant(false)]
			public static void ProgramUniform3(int program, int location, float v0, float v1, float v2)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single,System.Single), program, location, v0, v1, v2, GL.EntryPoints[1624]);
			}

			// Token: 0x06002341 RID: 9025 RVA: 0x00060210 File Offset: 0x0005E410
			[CLSCompliant(false)]
			public static void ProgramUniform3(uint program, int location, float v0, float v1, float v2)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single,System.Single), program, location, v0, v1, v2, GL.EntryPoints[1624]);
			}

			// Token: 0x06002342 RID: 9026 RVA: 0x00060228 File Offset: 0x0005E428
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1626]);
				}
			}

			// Token: 0x06002343 RID: 9027 RVA: 0x00060260 File Offset: 0x0005E460
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1626]);
				}
			}

			// Token: 0x06002344 RID: 9028 RVA: 0x00060284 File Offset: 0x0005E484
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[1626]);
			}

			// Token: 0x06002345 RID: 9029 RVA: 0x0006029C File Offset: 0x0005E49C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1626]);
				}
			}

			// Token: 0x06002346 RID: 9030 RVA: 0x000602D4 File Offset: 0x0005E4D4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1626]);
				}
			}

			// Token: 0x06002347 RID: 9031 RVA: 0x000602F8 File Offset: 0x0005E4F8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[1626]);
			}

			// Token: 0x06002348 RID: 9032 RVA: 0x00060310 File Offset: 0x0005E510
			[CLSCompliant(false)]
			public static void ProgramUniform3(int program, int location, int v0, int v1, int v2)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, v2, GL.EntryPoints[1630]);
			}

			// Token: 0x06002349 RID: 9033 RVA: 0x00060328 File Offset: 0x0005E528
			[CLSCompliant(false)]
			public static void ProgramUniform3(uint program, int location, int v0, int v1, int v2)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, v2, GL.EntryPoints[1630]);
			}

			// Token: 0x0600234A RID: 9034 RVA: 0x00060340 File Offset: 0x0005E540
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1632]);
				}
			}

			// Token: 0x0600234B RID: 9035 RVA: 0x00060378 File Offset: 0x0005E578
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1632]);
				}
			}

			// Token: 0x0600234C RID: 9036 RVA: 0x0006039C File Offset: 0x0005E59C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[1632]);
			}

			// Token: 0x0600234D RID: 9037 RVA: 0x000603B4 File Offset: 0x0005E5B4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1632]);
				}
			}

			// Token: 0x0600234E RID: 9038 RVA: 0x000603EC File Offset: 0x0005E5EC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1632]);
				}
			}

			// Token: 0x0600234F RID: 9039 RVA: 0x00060410 File Offset: 0x0005E610
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[1632]);
			}

			// Token: 0x06002350 RID: 9040 RVA: 0x00060428 File Offset: 0x0005E628
			[CLSCompliant(false)]
			public static void ProgramUniform3(uint program, int location, uint v0, uint v1, uint v2)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32), program, location, v0, v1, v2, GL.EntryPoints[1636]);
			}

			// Token: 0x06002351 RID: 9041 RVA: 0x00060440 File Offset: 0x0005E640
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, uint[] value)
			{
				fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[1638]);
				}
			}

			// Token: 0x06002352 RID: 9042 RVA: 0x00060478 File Offset: 0x0005E678
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, ref uint value)
			{
				fixed (uint* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[1638]);
				}
			}

			// Token: 0x06002353 RID: 9043 RVA: 0x0006049C File Offset: 0x0005E69C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, uint* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, value, GL.EntryPoints[1638]);
			}

			// Token: 0x06002354 RID: 9044 RVA: 0x000604B4 File Offset: 0x0005E6B4
			[CLSCompliant(false)]
			public static void ProgramUniform4(int program, int location, double x, double y, double z, double w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double,System.Double,System.Double), program, location, x, y, z, w, GL.EntryPoints[1640]);
			}

			// Token: 0x06002355 RID: 9045 RVA: 0x000604D0 File Offset: 0x0005E6D0
			[CLSCompliant(false)]
			public static void ProgramUniform4(uint program, int location, double x, double y, double z, double w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double,System.Double,System.Double,System.Double), program, location, x, y, z, w, GL.EntryPoints[1640]);
			}

			// Token: 0x06002356 RID: 9046 RVA: 0x000604EC File Offset: 0x0005E6EC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1642]);
				}
			}

			// Token: 0x06002357 RID: 9047 RVA: 0x00060524 File Offset: 0x0005E724
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1642]);
				}
			}

			// Token: 0x06002358 RID: 9048 RVA: 0x00060548 File Offset: 0x0005E748
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[1642]);
			}

			// Token: 0x06002359 RID: 9049 RVA: 0x00060560 File Offset: 0x0005E760
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1642]);
				}
			}

			// Token: 0x0600235A RID: 9050 RVA: 0x00060598 File Offset: 0x0005E798
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, ptr, GL.EntryPoints[1642]);
				}
			}

			// Token: 0x0600235B RID: 9051 RVA: 0x000605BC File Offset: 0x0005E7BC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Double*), program, location, count, value, GL.EntryPoints[1642]);
			}

			// Token: 0x0600235C RID: 9052 RVA: 0x000605D4 File Offset: 0x0005E7D4
			[CLSCompliant(false)]
			public static void ProgramUniform4(int program, int location, float v0, float v1, float v2, float v3)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single,System.Single,System.Single), program, location, v0, v1, v2, v3, GL.EntryPoints[1644]);
			}

			// Token: 0x0600235D RID: 9053 RVA: 0x000605F0 File Offset: 0x0005E7F0
			[CLSCompliant(false)]
			public static void ProgramUniform4(uint program, int location, float v0, float v1, float v2, float v3)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single,System.Single,System.Single), program, location, v0, v1, v2, v3, GL.EntryPoints[1644]);
			}

			// Token: 0x0600235E RID: 9054 RVA: 0x0006060C File Offset: 0x0005E80C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1646]);
				}
			}

			// Token: 0x0600235F RID: 9055 RVA: 0x00060644 File Offset: 0x0005E844
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1646]);
				}
			}

			// Token: 0x06002360 RID: 9056 RVA: 0x00060668 File Offset: 0x0005E868
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[1646]);
			}

			// Token: 0x06002361 RID: 9057 RVA: 0x00060680 File Offset: 0x0005E880
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1646]);
				}
			}

			// Token: 0x06002362 RID: 9058 RVA: 0x000606B8 File Offset: 0x0005E8B8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[1646]);
				}
			}

			// Token: 0x06002363 RID: 9059 RVA: 0x000606DC File Offset: 0x0005E8DC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[1646]);
			}

			// Token: 0x06002364 RID: 9060 RVA: 0x000606F4 File Offset: 0x0005E8F4
			[CLSCompliant(false)]
			public static void ProgramUniform4(int program, int location, int v0, int v1, int v2, int v3)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, v2, v3, GL.EntryPoints[1650]);
			}

			// Token: 0x06002365 RID: 9061 RVA: 0x00060710 File Offset: 0x0005E910
			[CLSCompliant(false)]
			public static void ProgramUniform4(uint program, int location, int v0, int v1, int v2, int v3)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, v2, v3, GL.EntryPoints[1650]);
			}

			// Token: 0x06002366 RID: 9062 RVA: 0x0006072C File Offset: 0x0005E92C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1652]);
				}
			}

			// Token: 0x06002367 RID: 9063 RVA: 0x00060764 File Offset: 0x0005E964
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1652]);
				}
			}

			// Token: 0x06002368 RID: 9064 RVA: 0x00060788 File Offset: 0x0005E988
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[1652]);
			}

			// Token: 0x06002369 RID: 9065 RVA: 0x000607A0 File Offset: 0x0005E9A0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1652]);
				}
			}

			// Token: 0x0600236A RID: 9066 RVA: 0x000607D8 File Offset: 0x0005E9D8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[1652]);
				}
			}

			// Token: 0x0600236B RID: 9067 RVA: 0x000607FC File Offset: 0x0005E9FC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[1652]);
			}

			// Token: 0x0600236C RID: 9068 RVA: 0x00060814 File Offset: 0x0005EA14
			[CLSCompliant(false)]
			public static void ProgramUniform4(uint program, int location, uint v0, uint v1, uint v2, uint v3)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), program, location, v0, v1, v2, v3, GL.EntryPoints[1656]);
			}

			// Token: 0x0600236D RID: 9069 RVA: 0x00060830 File Offset: 0x0005EA30
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, uint[] value)
			{
				fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[1658]);
				}
			}

			// Token: 0x0600236E RID: 9070 RVA: 0x00060868 File Offset: 0x0005EA68
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, ref uint value)
			{
				fixed (uint* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[1658]);
				}
			}

			// Token: 0x0600236F RID: 9071 RVA: 0x0006088C File Offset: 0x0005EA8C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, uint* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, value, GL.EntryPoints[1658]);
			}

			// Token: 0x06002370 RID: 9072 RVA: 0x000608A4 File Offset: 0x0005EAA4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1664]);
				}
			}

			// Token: 0x06002371 RID: 9073 RVA: 0x000608E0 File Offset: 0x0005EAE0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1664]);
				}
			}

			// Token: 0x06002372 RID: 9074 RVA: 0x00060908 File Offset: 0x0005EB08
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1664]);
			}

			// Token: 0x06002373 RID: 9075 RVA: 0x00060920 File Offset: 0x0005EB20
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1664]);
				}
			}

			// Token: 0x06002374 RID: 9076 RVA: 0x0006095C File Offset: 0x0005EB5C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1664]);
				}
			}

			// Token: 0x06002375 RID: 9077 RVA: 0x00060984 File Offset: 0x0005EB84
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1664]);
			}

			// Token: 0x06002376 RID: 9078 RVA: 0x0006099C File Offset: 0x0005EB9C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1666]);
				}
			}

			// Token: 0x06002377 RID: 9079 RVA: 0x000609D8 File Offset: 0x0005EBD8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1666]);
				}
			}

			// Token: 0x06002378 RID: 9080 RVA: 0x00060A00 File Offset: 0x0005EC00
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1666]);
			}

			// Token: 0x06002379 RID: 9081 RVA: 0x00060A18 File Offset: 0x0005EC18
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1666]);
				}
			}

			// Token: 0x0600237A RID: 9082 RVA: 0x00060A54 File Offset: 0x0005EC54
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1666]);
				}
			}

			// Token: 0x0600237B RID: 9083 RVA: 0x00060A7C File Offset: 0x0005EC7C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1666]);
			}

			// Token: 0x0600237C RID: 9084 RVA: 0x00060A94 File Offset: 0x0005EC94
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1668]);
				}
			}

			// Token: 0x0600237D RID: 9085 RVA: 0x00060AD0 File Offset: 0x0005ECD0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1668]);
				}
			}

			// Token: 0x0600237E RID: 9086 RVA: 0x00060AF8 File Offset: 0x0005ECF8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1668]);
			}

			// Token: 0x0600237F RID: 9087 RVA: 0x00060B10 File Offset: 0x0005ED10
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1668]);
				}
			}

			// Token: 0x06002380 RID: 9088 RVA: 0x00060B4C File Offset: 0x0005ED4C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1668]);
				}
			}

			// Token: 0x06002381 RID: 9089 RVA: 0x00060B74 File Offset: 0x0005ED74
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1668]);
			}

			// Token: 0x06002382 RID: 9090 RVA: 0x00060B8C File Offset: 0x0005ED8C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1670]);
				}
			}

			// Token: 0x06002383 RID: 9091 RVA: 0x00060BC8 File Offset: 0x0005EDC8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1670]);
				}
			}

			// Token: 0x06002384 RID: 9092 RVA: 0x00060BF0 File Offset: 0x0005EDF0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1670]);
			}

			// Token: 0x06002385 RID: 9093 RVA: 0x00060C08 File Offset: 0x0005EE08
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1670]);
				}
			}

			// Token: 0x06002386 RID: 9094 RVA: 0x00060C44 File Offset: 0x0005EE44
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1670]);
				}
			}

			// Token: 0x06002387 RID: 9095 RVA: 0x00060C6C File Offset: 0x0005EE6C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1670]);
			}

			// Token: 0x06002388 RID: 9096 RVA: 0x00060C84 File Offset: 0x0005EE84
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1672]);
				}
			}

			// Token: 0x06002389 RID: 9097 RVA: 0x00060CC0 File Offset: 0x0005EEC0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1672]);
				}
			}

			// Token: 0x0600238A RID: 9098 RVA: 0x00060CE8 File Offset: 0x0005EEE8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1672]);
			}

			// Token: 0x0600238B RID: 9099 RVA: 0x00060D00 File Offset: 0x0005EF00
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1672]);
				}
			}

			// Token: 0x0600238C RID: 9100 RVA: 0x00060D3C File Offset: 0x0005EF3C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1672]);
				}
			}

			// Token: 0x0600238D RID: 9101 RVA: 0x00060D64 File Offset: 0x0005EF64
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1672]);
			}

			// Token: 0x0600238E RID: 9102 RVA: 0x00060D7C File Offset: 0x0005EF7C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1674]);
				}
			}

			// Token: 0x0600238F RID: 9103 RVA: 0x00060DB8 File Offset: 0x0005EFB8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1674]);
				}
			}

			// Token: 0x06002390 RID: 9104 RVA: 0x00060DE0 File Offset: 0x0005EFE0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1674]);
			}

			// Token: 0x06002391 RID: 9105 RVA: 0x00060DF8 File Offset: 0x0005EFF8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1674]);
				}
			}

			// Token: 0x06002392 RID: 9106 RVA: 0x00060E34 File Offset: 0x0005F034
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1674]);
				}
			}

			// Token: 0x06002393 RID: 9107 RVA: 0x00060E5C File Offset: 0x0005F05C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1674]);
			}

			// Token: 0x06002394 RID: 9108 RVA: 0x00060E74 File Offset: 0x0005F074
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1676]);
				}
			}

			// Token: 0x06002395 RID: 9109 RVA: 0x00060EB0 File Offset: 0x0005F0B0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1676]);
				}
			}

			// Token: 0x06002396 RID: 9110 RVA: 0x00060ED8 File Offset: 0x0005F0D8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1676]);
			}

			// Token: 0x06002397 RID: 9111 RVA: 0x00060EF0 File Offset: 0x0005F0F0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1676]);
				}
			}

			// Token: 0x06002398 RID: 9112 RVA: 0x00060F2C File Offset: 0x0005F12C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1676]);
				}
			}

			// Token: 0x06002399 RID: 9113 RVA: 0x00060F54 File Offset: 0x0005F154
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1676]);
			}

			// Token: 0x0600239A RID: 9114 RVA: 0x00060F6C File Offset: 0x0005F16C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1678]);
				}
			}

			// Token: 0x0600239B RID: 9115 RVA: 0x00060FA8 File Offset: 0x0005F1A8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1678]);
				}
			}

			// Token: 0x0600239C RID: 9116 RVA: 0x00060FD0 File Offset: 0x0005F1D0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1678]);
			}

			// Token: 0x0600239D RID: 9117 RVA: 0x00060FE8 File Offset: 0x0005F1E8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1678]);
				}
			}

			// Token: 0x0600239E RID: 9118 RVA: 0x00061024 File Offset: 0x0005F224
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1678]);
				}
			}

			// Token: 0x0600239F RID: 9119 RVA: 0x0006104C File Offset: 0x0005F24C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1678]);
			}

			// Token: 0x060023A0 RID: 9120 RVA: 0x00061064 File Offset: 0x0005F264
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1680]);
				}
			}

			// Token: 0x060023A1 RID: 9121 RVA: 0x000610A0 File Offset: 0x0005F2A0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1680]);
				}
			}

			// Token: 0x060023A2 RID: 9122 RVA: 0x000610C8 File Offset: 0x0005F2C8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1680]);
			}

			// Token: 0x060023A3 RID: 9123 RVA: 0x000610E0 File Offset: 0x0005F2E0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1680]);
				}
			}

			// Token: 0x060023A4 RID: 9124 RVA: 0x0006111C File Offset: 0x0005F31C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1680]);
				}
			}

			// Token: 0x060023A5 RID: 9125 RVA: 0x00061144 File Offset: 0x0005F344
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1680]);
			}

			// Token: 0x060023A6 RID: 9126 RVA: 0x0006115C File Offset: 0x0005F35C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1682]);
				}
			}

			// Token: 0x060023A7 RID: 9127 RVA: 0x00061198 File Offset: 0x0005F398
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1682]);
				}
			}

			// Token: 0x060023A8 RID: 9128 RVA: 0x000611C0 File Offset: 0x0005F3C0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1682]);
			}

			// Token: 0x060023A9 RID: 9129 RVA: 0x000611D8 File Offset: 0x0005F3D8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1682]);
				}
			}

			// Token: 0x060023AA RID: 9130 RVA: 0x00061214 File Offset: 0x0005F414
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1682]);
				}
			}

			// Token: 0x060023AB RID: 9131 RVA: 0x0006123C File Offset: 0x0005F43C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1682]);
			}

			// Token: 0x060023AC RID: 9132 RVA: 0x00061254 File Offset: 0x0005F454
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1684]);
				}
			}

			// Token: 0x060023AD RID: 9133 RVA: 0x00061290 File Offset: 0x0005F490
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1684]);
				}
			}

			// Token: 0x060023AE RID: 9134 RVA: 0x000612B8 File Offset: 0x0005F4B8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1684]);
			}

			// Token: 0x060023AF RID: 9135 RVA: 0x000612D0 File Offset: 0x0005F4D0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1684]);
				}
			}

			// Token: 0x060023B0 RID: 9136 RVA: 0x0006130C File Offset: 0x0005F50C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1684]);
				}
			}

			// Token: 0x060023B1 RID: 9137 RVA: 0x00061334 File Offset: 0x0005F534
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1684]);
			}

			// Token: 0x060023B2 RID: 9138 RVA: 0x0006134C File Offset: 0x0005F54C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1686]);
				}
			}

			// Token: 0x060023B3 RID: 9139 RVA: 0x00061388 File Offset: 0x0005F588
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1686]);
				}
			}

			// Token: 0x060023B4 RID: 9140 RVA: 0x000613B0 File Offset: 0x0005F5B0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1686]);
			}

			// Token: 0x060023B5 RID: 9141 RVA: 0x000613C8 File Offset: 0x0005F5C8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1686]);
				}
			}

			// Token: 0x060023B6 RID: 9142 RVA: 0x00061404 File Offset: 0x0005F604
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1686]);
				}
			}

			// Token: 0x060023B7 RID: 9143 RVA: 0x0006142C File Offset: 0x0005F62C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1686]);
			}

			// Token: 0x060023B8 RID: 9144 RVA: 0x00061444 File Offset: 0x0005F644
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1688]);
				}
			}

			// Token: 0x060023B9 RID: 9145 RVA: 0x00061480 File Offset: 0x0005F680
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1688]);
				}
			}

			// Token: 0x060023BA RID: 9146 RVA: 0x000614A8 File Offset: 0x0005F6A8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1688]);
			}

			// Token: 0x060023BB RID: 9147 RVA: 0x000614C0 File Offset: 0x0005F6C0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1688]);
				}
			}

			// Token: 0x060023BC RID: 9148 RVA: 0x000614FC File Offset: 0x0005F6FC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1688]);
				}
			}

			// Token: 0x060023BD RID: 9149 RVA: 0x00061524 File Offset: 0x0005F724
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1688]);
			}

			// Token: 0x060023BE RID: 9150 RVA: 0x0006153C File Offset: 0x0005F73C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1690]);
				}
			}

			// Token: 0x060023BF RID: 9151 RVA: 0x00061578 File Offset: 0x0005F778
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1690]);
				}
			}

			// Token: 0x060023C0 RID: 9152 RVA: 0x000615A0 File Offset: 0x0005F7A0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1690]);
			}

			// Token: 0x060023C1 RID: 9153 RVA: 0x000615B8 File Offset: 0x0005F7B8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1690]);
				}
			}

			// Token: 0x060023C2 RID: 9154 RVA: 0x000615F4 File Offset: 0x0005F7F4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1690]);
				}
			}

			// Token: 0x060023C3 RID: 9155 RVA: 0x0006161C File Offset: 0x0005F81C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1690]);
			}

			// Token: 0x060023C4 RID: 9156 RVA: 0x00061634 File Offset: 0x0005F834
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1692]);
				}
			}

			// Token: 0x060023C5 RID: 9157 RVA: 0x00061670 File Offset: 0x0005F870
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1692]);
				}
			}

			// Token: 0x060023C6 RID: 9158 RVA: 0x00061698 File Offset: 0x0005F898
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1692]);
			}

			// Token: 0x060023C7 RID: 9159 RVA: 0x000616B0 File Offset: 0x0005F8B0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1692]);
				}
			}

			// Token: 0x060023C8 RID: 9160 RVA: 0x000616EC File Offset: 0x0005F8EC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1692]);
				}
			}

			// Token: 0x060023C9 RID: 9161 RVA: 0x00061714 File Offset: 0x0005F914
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1692]);
			}

			// Token: 0x060023CA RID: 9162 RVA: 0x0006172C File Offset: 0x0005F92C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1694]);
				}
			}

			// Token: 0x060023CB RID: 9163 RVA: 0x00061768 File Offset: 0x0005F968
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1694]);
				}
			}

			// Token: 0x060023CC RID: 9164 RVA: 0x00061790 File Offset: 0x0005F990
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1694]);
			}

			// Token: 0x060023CD RID: 9165 RVA: 0x000617A8 File Offset: 0x0005F9A8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1694]);
				}
			}

			// Token: 0x060023CE RID: 9166 RVA: 0x000617E4 File Offset: 0x0005F9E4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1694]);
				}
			}

			// Token: 0x060023CF RID: 9167 RVA: 0x0006180C File Offset: 0x0005FA0C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1694]);
			}

			// Token: 0x060023D0 RID: 9168 RVA: 0x00061824 File Offset: 0x0005FA24
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1696]);
				}
			}

			// Token: 0x060023D1 RID: 9169 RVA: 0x00061860 File Offset: 0x0005FA60
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1696]);
				}
			}

			// Token: 0x060023D2 RID: 9170 RVA: 0x00061888 File Offset: 0x0005FA88
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1696]);
			}

			// Token: 0x060023D3 RID: 9171 RVA: 0x000618A0 File Offset: 0x0005FAA0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, double[] value)
			{
				fixed (double* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1696]);
				}
			}

			// Token: 0x060023D4 RID: 9172 RVA: 0x000618DC File Offset: 0x0005FADC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, ref double value)
			{
				fixed (double* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, ptr, GL.EntryPoints[1696]);
				}
			}

			// Token: 0x060023D5 RID: 9173 RVA: 0x00061904 File Offset: 0x0005FB04
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, double* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double*), program, location, count, transpose, value, GL.EntryPoints[1696]);
			}

			// Token: 0x060023D6 RID: 9174 RVA: 0x0006191C File Offset: 0x0005FB1C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1698]);
				}
			}

			// Token: 0x060023D7 RID: 9175 RVA: 0x00061958 File Offset: 0x0005FB58
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1698]);
				}
			}

			// Token: 0x060023D8 RID: 9176 RVA: 0x00061980 File Offset: 0x0005FB80
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1698]);
			}

			// Token: 0x060023D9 RID: 9177 RVA: 0x00061998 File Offset: 0x0005FB98
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1698]);
				}
			}

			// Token: 0x060023DA RID: 9178 RVA: 0x000619D4 File Offset: 0x0005FBD4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[1698]);
				}
			}

			// Token: 0x060023DB RID: 9179 RVA: 0x000619FC File Offset: 0x0005FBFC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[1698]);
			}

			// Token: 0x060023DC RID: 9180 RVA: 0x00061A14 File Offset: 0x0005FC14
			public static void ProvokingVertex(ExtProvokingVertex mode)
			{
				calli(System.Void(System.Int32), mode, GL.EntryPoints[1703]);
			}

			// Token: 0x060023DD RID: 9181 RVA: 0x00061A28 File Offset: 0x0005FC28
			public static void PushClientAttribDefault(ClientAttribMask mask)
			{
				calli(System.Void(System.Int32), mask, GL.EntryPoints[1706]);
			}

			// Token: 0x060023DE RID: 9182 RVA: 0x00061A3C File Offset: 0x0005FC3C
			public static void PushGroupMarker(int length, string marker)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(marker);
				calli(System.Void(System.Int32,System.IntPtr), length, intPtr, GL.EntryPoints[1709]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x060023DF RID: 9183 RVA: 0x00061A68 File Offset: 0x0005FC68
			public static void RenderbufferStorage(RenderbufferTarget target, RenderbufferStorage internalformat, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, width, height, GL.EntryPoints[1762]);
			}

			// Token: 0x060023E0 RID: 9184 RVA: 0x00061A80 File Offset: 0x0005FC80
			[Obsolete("Use RenderbufferTarget overload instead")]
			public static void RenderbufferStorageMultisample(ExtFramebufferMultisample target, int samples, ExtFramebufferMultisample internalformat, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, samples, internalformat, width, height, GL.EntryPoints[1765]);
			}

			// Token: 0x060023E1 RID: 9185 RVA: 0x00061A98 File Offset: 0x0005FC98
			public static void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, RenderbufferStorage internalformat, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, samples, internalformat, width, height, GL.EntryPoints[1765]);
			}

			// Token: 0x060023E2 RID: 9186 RVA: 0x00061AB0 File Offset: 0x0005FCB0
			[Obsolete("Use HistogramTargetExt overload instead")]
			public static void ResetHistogram(ExtHistogram target)
			{
				calli(System.Void(System.Int32), target, GL.EntryPoints[1792]);
			}

			// Token: 0x060023E3 RID: 9187 RVA: 0x00061AC4 File Offset: 0x0005FCC4
			public static void ResetHistogram(HistogramTargetExt target)
			{
				calli(System.Void(System.Int32), target, GL.EntryPoints[1792]);
			}

			// Token: 0x060023E4 RID: 9188 RVA: 0x00061AD8 File Offset: 0x0005FCD8
			[Obsolete("Use MinmaxTargetExt overload instead")]
			public static void ResetMinmax(ExtHistogram target)
			{
				calli(System.Void(System.Int32), target, GL.EntryPoints[1794]);
			}

			// Token: 0x060023E5 RID: 9189 RVA: 0x00061AEC File Offset: 0x0005FCEC
			public static void ResetMinmax(MinmaxTargetExt target)
			{
				calli(System.Void(System.Int32), target, GL.EntryPoints[1794]);
			}

			// Token: 0x060023E6 RID: 9190 RVA: 0x00061B00 File Offset: 0x0005FD00
			public static void SampleMask(float value, bool invert)
			{
				calli(System.Void(System.Single,System.Boolean), value, invert, GL.EntryPoints[1806]);
			}

			// Token: 0x060023E7 RID: 9191 RVA: 0x00061B14 File Offset: 0x0005FD14
			public static void SamplePattern(ExtMultisample pattern)
			{
				calli(System.Void(System.Int32), pattern, GL.EntryPoints[1810]);
			}

			// Token: 0x060023E8 RID: 9192 RVA: 0x00061B28 File Offset: 0x0005FD28
			[CLSCompliant(false)]
			public static void SecondaryColor3(sbyte red, sbyte green, sbyte blue)
			{
				calli(System.Void(System.SByte,System.SByte,System.SByte), red, green, blue, GL.EntryPoints[1826]);
			}

			// Token: 0x060023E9 RID: 9193 RVA: 0x00061B40 File Offset: 0x0005FD40
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(sbyte[] v)
			{
				fixed (sbyte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1828]);
				}
			}

			// Token: 0x060023EA RID: 9194 RVA: 0x00061B74 File Offset: 0x0005FD74
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(ref sbyte v)
			{
				fixed (sbyte* ptr = &v)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1828]);
				}
			}

			// Token: 0x060023EB RID: 9195 RVA: 0x00061B98 File Offset: 0x0005FD98
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(sbyte* v)
			{
				calli(System.Void(System.SByte*), v, GL.EntryPoints[1828]);
			}

			// Token: 0x060023EC RID: 9196 RVA: 0x00061BAC File Offset: 0x0005FDAC
			public static void SecondaryColor3(double red, double green, double blue)
			{
				calli(System.Void(System.Double,System.Double,System.Double), red, green, blue, GL.EntryPoints[1830]);
			}

			// Token: 0x060023ED RID: 9197 RVA: 0x00061BC4 File Offset: 0x0005FDC4
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[1832]);
				}
			}

			// Token: 0x060023EE RID: 9198 RVA: 0x00061BF8 File Offset: 0x0005FDF8
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[1832]);
				}
			}

			// Token: 0x060023EF RID: 9199 RVA: 0x00061C1C File Offset: 0x0005FE1C
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(double* v)
			{
				calli(System.Void(System.Double*), v, GL.EntryPoints[1832]);
			}

			// Token: 0x060023F0 RID: 9200 RVA: 0x00061C30 File Offset: 0x0005FE30
			public static void SecondaryColor3(float red, float green, float blue)
			{
				calli(System.Void(System.Single,System.Single,System.Single), red, green, blue, GL.EntryPoints[1834]);
			}

			// Token: 0x060023F1 RID: 9201 RVA: 0x00061C48 File Offset: 0x0005FE48
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[1836]);
				}
			}

			// Token: 0x060023F2 RID: 9202 RVA: 0x00061C7C File Offset: 0x0005FE7C
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[1836]);
				}
			}

			// Token: 0x060023F3 RID: 9203 RVA: 0x00061CA0 File Offset: 0x0005FEA0
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(float* v)
			{
				calli(System.Void(System.Single*), v, GL.EntryPoints[1836]);
			}

			// Token: 0x060023F4 RID: 9204 RVA: 0x00061CB4 File Offset: 0x0005FEB4
			public static void SecondaryColor3(int red, int green, int blue)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), red, green, blue, GL.EntryPoints[1840]);
			}

			// Token: 0x060023F5 RID: 9205 RVA: 0x00061CCC File Offset: 0x0005FECC
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1842]);
				}
			}

			// Token: 0x060023F6 RID: 9206 RVA: 0x00061D00 File Offset: 0x0005FF00
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1842]);
				}
			}

			// Token: 0x060023F7 RID: 9207 RVA: 0x00061D24 File Offset: 0x0005FF24
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(int* v)
			{
				calli(System.Void(System.Int32*), v, GL.EntryPoints[1842]);
			}

			// Token: 0x060023F8 RID: 9208 RVA: 0x00061D38 File Offset: 0x0005FF38
			public static void SecondaryColor3(short red, short green, short blue)
			{
				calli(System.Void(System.Int16,System.Int16,System.Int16), red, green, blue, GL.EntryPoints[1844]);
			}

			// Token: 0x060023F9 RID: 9209 RVA: 0x00061D50 File Offset: 0x0005FF50
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1846]);
				}
			}

			// Token: 0x060023FA RID: 9210 RVA: 0x00061D84 File Offset: 0x0005FF84
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1846]);
				}
			}

			// Token: 0x060023FB RID: 9211 RVA: 0x00061DA8 File Offset: 0x0005FFA8
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(short* v)
			{
				calli(System.Void(System.Int16*), v, GL.EntryPoints[1846]);
			}

			// Token: 0x060023FC RID: 9212 RVA: 0x00061DBC File Offset: 0x0005FFBC
			public static void SecondaryColor3(byte red, byte green, byte blue)
			{
				calli(System.Void(System.Byte,System.Byte,System.Byte), red, green, blue, GL.EntryPoints[1848]);
			}

			// Token: 0x060023FD RID: 9213 RVA: 0x00061DD4 File Offset: 0x0005FFD4
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(byte[] v)
			{
				fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Byte*), ptr, GL.EntryPoints[1850]);
				}
			}

			// Token: 0x060023FE RID: 9214 RVA: 0x00061E08 File Offset: 0x00060008
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(ref byte v)
			{
				fixed (byte* ptr = &v)
				{
					calli(System.Void(System.Byte*), ptr, GL.EntryPoints[1850]);
				}
			}

			// Token: 0x060023FF RID: 9215 RVA: 0x00061E2C File Offset: 0x0006002C
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(byte* v)
			{
				calli(System.Void(System.Byte*), v, GL.EntryPoints[1850]);
			}

			// Token: 0x06002400 RID: 9216 RVA: 0x00061E40 File Offset: 0x00060040
			[CLSCompliant(false)]
			public static void SecondaryColor3(uint red, uint green, uint blue)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32), red, green, blue, GL.EntryPoints[1852]);
			}

			// Token: 0x06002401 RID: 9217 RVA: 0x00061E58 File Offset: 0x00060058
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(uint[] v)
			{
				fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[1854]);
				}
			}

			// Token: 0x06002402 RID: 9218 RVA: 0x00061E8C File Offset: 0x0006008C
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(ref uint v)
			{
				fixed (uint* ptr = &v)
				{
					calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[1854]);
				}
			}

			// Token: 0x06002403 RID: 9219 RVA: 0x00061EB0 File Offset: 0x000600B0
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(uint* v)
			{
				calli(System.Void(System.UInt32*), v, GL.EntryPoints[1854]);
			}

			// Token: 0x06002404 RID: 9220 RVA: 0x00061EC4 File Offset: 0x000600C4
			[CLSCompliant(false)]
			public static void SecondaryColor3(ushort red, ushort green, ushort blue)
			{
				calli(System.Void(System.UInt16,System.UInt16,System.UInt16), red, green, blue, GL.EntryPoints[1856]);
			}

			// Token: 0x06002405 RID: 9221 RVA: 0x00061EDC File Offset: 0x000600DC
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(ushort[] v)
			{
				fixed (ushort* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt16*), ptr, GL.EntryPoints[1858]);
				}
			}

			// Token: 0x06002406 RID: 9222 RVA: 0x00061F10 File Offset: 0x00060110
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(ref ushort v)
			{
				fixed (ushort* ptr = &v)
				{
					calli(System.Void(System.UInt16*), ptr, GL.EntryPoints[1858]);
				}
			}

			// Token: 0x06002407 RID: 9223 RVA: 0x00061F34 File Offset: 0x00060134
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3(ushort* v)
			{
				calli(System.Void(System.UInt16*), v, GL.EntryPoints[1858]);
			}

			// Token: 0x06002408 RID: 9224 RVA: 0x00061F48 File Offset: 0x00060148
			public static void SecondaryColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, pointer, GL.EntryPoints[1863]);
			}

			// Token: 0x06002409 RID: 9225 RVA: 0x00061F60 File Offset: 0x00060160
			[CLSCompliant(false)]
			public unsafe static void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, [In] [Out] T3[] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[1863]);
				}
			}

			// Token: 0x0600240A RID: 9226 RVA: 0x00061F98 File Offset: 0x00060198
			[CLSCompliant(false)]
			public unsafe static void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, [In] [Out] T3[,] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[1863]);
				}
			}

			// Token: 0x0600240B RID: 9227 RVA: 0x00061FD4 File Offset: 0x000601D4
			[CLSCompliant(false)]
			public unsafe static void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, [In] [Out] T3[,,] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[1863]);
				}
			}

			// Token: 0x0600240C RID: 9228 RVA: 0x00062010 File Offset: 0x00060210
			public unsafe static void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, [In] [Out] ref T3 pointer) where T3 : struct
			{
				fixed (T3* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[1863]);
				}
			}

			// Token: 0x0600240D RID: 9229 RVA: 0x00062034 File Offset: 0x00060234
			public static void SeparableFilter2D(SeparableTargetExt target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, row, column, GL.EntryPoints[1868]);
			}

			// Token: 0x0600240E RID: 9230 RVA: 0x00062060 File Offset: 0x00060260
			[CLSCompliant(false)]
			public unsafe static void SeparableFilter2D<T6, T7>(SeparableTargetExt target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[] row, [In] [Out] T7[] column) where T6 : struct where T7 : struct
			{
				fixed (T6* ptr = ref (row != null && row.Length != 0) ? ref row[0] : ref *null)
				{
					T6* ptr2 = ptr;
					fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1868]);
					}
				}
			}

			// Token: 0x0600240F RID: 9231 RVA: 0x000620B8 File Offset: 0x000602B8
			[CLSCompliant(false)]
			public unsafe static void SeparableFilter2D<T6, T7>(SeparableTargetExt target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,] row, [In] [Out] T7[,] column) where T6 : struct where T7 : struct
			{
				fixed (T6* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0] : ref *null)
				{
					T6* ptr2 = ptr;
					fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1868]);
					}
				}
			}

			// Token: 0x06002410 RID: 9232 RVA: 0x00062118 File Offset: 0x00060318
			[CLSCompliant(false)]
			public unsafe static void SeparableFilter2D<T6, T7>(SeparableTargetExt target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,,] row, [In] [Out] T7[,,] column) where T6 : struct where T7 : struct
			{
				fixed (T6* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0, 0] : ref *null)
				{
					T6* ptr2 = ptr;
					fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1868]);
					}
				}
			}

			// Token: 0x06002411 RID: 9233 RVA: 0x0006217C File Offset: 0x0006037C
			public unsafe static void SeparableFilter2D<T6, T7>(SeparableTargetExt target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T6 row, [In] [Out] ref T7 column) where T6 : struct where T7 : struct
			{
				fixed (T6* ptr = &row)
				{
					T6* ptr2 = ptr;
					fixed (T7* ptr3 = &column)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1868]);
					}
				}
			}

			// Token: 0x06002412 RID: 9234 RVA: 0x000621AC File Offset: 0x000603AC
			[CLSCompliant(false)]
			public static void SetInvariant(int id, ExtVertexShader type, IntPtr addr)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, addr, GL.EntryPoints[1872]);
			}

			// Token: 0x06002413 RID: 9235 RVA: 0x000621C4 File Offset: 0x000603C4
			[CLSCompliant(false)]
			public unsafe static void SetInvariant<T2>(int id, ExtVertexShader type, [In] [Out] T2[] addr) where T2 : struct
			{
				fixed (T2* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, ptr, GL.EntryPoints[1872]);
				}
			}

			// Token: 0x06002414 RID: 9236 RVA: 0x000621FC File Offset: 0x000603FC
			[CLSCompliant(false)]
			public unsafe static void SetInvariant<T2>(int id, ExtVertexShader type, [In] [Out] T2[,] addr) where T2 : struct
			{
				fixed (T2* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, ptr, GL.EntryPoints[1872]);
				}
			}

			// Token: 0x06002415 RID: 9237 RVA: 0x00062238 File Offset: 0x00060438
			[CLSCompliant(false)]
			public unsafe static void SetInvariant<T2>(int id, ExtVertexShader type, [In] [Out] T2[,,] addr) where T2 : struct
			{
				fixed (T2* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, ptr, GL.EntryPoints[1872]);
				}
			}

			// Token: 0x06002416 RID: 9238 RVA: 0x00062274 File Offset: 0x00060474
			[CLSCompliant(false)]
			public unsafe static void SetInvariant<T2>(int id, ExtVertexShader type, [In] [Out] ref T2 addr) where T2 : struct
			{
				fixed (T2* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, ptr, GL.EntryPoints[1872]);
				}
			}

			// Token: 0x06002417 RID: 9239 RVA: 0x00062298 File Offset: 0x00060498
			[CLSCompliant(false)]
			public static void SetInvariant(uint id, ExtVertexShader type, IntPtr addr)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, addr, GL.EntryPoints[1872]);
			}

			// Token: 0x06002418 RID: 9240 RVA: 0x000622B0 File Offset: 0x000604B0
			[CLSCompliant(false)]
			public unsafe static void SetInvariant<T2>(uint id, ExtVertexShader type, [In] [Out] T2[] addr) where T2 : struct
			{
				fixed (T2* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, ptr, GL.EntryPoints[1872]);
				}
			}

			// Token: 0x06002419 RID: 9241 RVA: 0x000622E8 File Offset: 0x000604E8
			[CLSCompliant(false)]
			public unsafe static void SetInvariant<T2>(uint id, ExtVertexShader type, [In] [Out] T2[,] addr) where T2 : struct
			{
				fixed (T2* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, ptr, GL.EntryPoints[1872]);
				}
			}

			// Token: 0x0600241A RID: 9242 RVA: 0x00062324 File Offset: 0x00060524
			[CLSCompliant(false)]
			public unsafe static void SetInvariant<T2>(uint id, ExtVertexShader type, [In] [Out] T2[,,] addr) where T2 : struct
			{
				fixed (T2* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, ptr, GL.EntryPoints[1872]);
				}
			}

			// Token: 0x0600241B RID: 9243 RVA: 0x00062360 File Offset: 0x00060560
			[CLSCompliant(false)]
			public unsafe static void SetInvariant<T2>(uint id, ExtVertexShader type, [In] [Out] ref T2 addr) where T2 : struct
			{
				fixed (T2* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, ptr, GL.EntryPoints[1872]);
				}
			}

			// Token: 0x0600241C RID: 9244 RVA: 0x00062384 File Offset: 0x00060584
			[CLSCompliant(false)]
			public static void SetLocalConstant(int id, ExtVertexShader type, IntPtr addr)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, addr, GL.EntryPoints[1873]);
			}

			// Token: 0x0600241D RID: 9245 RVA: 0x0006239C File Offset: 0x0006059C
			[CLSCompliant(false)]
			public unsafe static void SetLocalConstant<T2>(int id, ExtVertexShader type, [In] [Out] T2[] addr) where T2 : struct
			{
				fixed (T2* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, ptr, GL.EntryPoints[1873]);
				}
			}

			// Token: 0x0600241E RID: 9246 RVA: 0x000623D4 File Offset: 0x000605D4
			[CLSCompliant(false)]
			public unsafe static void SetLocalConstant<T2>(int id, ExtVertexShader type, [In] [Out] T2[,] addr) where T2 : struct
			{
				fixed (T2* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, ptr, GL.EntryPoints[1873]);
				}
			}

			// Token: 0x0600241F RID: 9247 RVA: 0x00062410 File Offset: 0x00060610
			[CLSCompliant(false)]
			public unsafe static void SetLocalConstant<T2>(int id, ExtVertexShader type, [In] [Out] T2[,,] addr) where T2 : struct
			{
				fixed (T2* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, ptr, GL.EntryPoints[1873]);
				}
			}

			// Token: 0x06002420 RID: 9248 RVA: 0x0006244C File Offset: 0x0006064C
			[CLSCompliant(false)]
			public unsafe static void SetLocalConstant<T2>(int id, ExtVertexShader type, [In] [Out] ref T2 addr) where T2 : struct
			{
				fixed (T2* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, ptr, GL.EntryPoints[1873]);
				}
			}

			// Token: 0x06002421 RID: 9249 RVA: 0x00062470 File Offset: 0x00060670
			[CLSCompliant(false)]
			public static void SetLocalConstant(uint id, ExtVertexShader type, IntPtr addr)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, addr, GL.EntryPoints[1873]);
			}

			// Token: 0x06002422 RID: 9250 RVA: 0x00062488 File Offset: 0x00060688
			[CLSCompliant(false)]
			public unsafe static void SetLocalConstant<T2>(uint id, ExtVertexShader type, [In] [Out] T2[] addr) where T2 : struct
			{
				fixed (T2* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, ptr, GL.EntryPoints[1873]);
				}
			}

			// Token: 0x06002423 RID: 9251 RVA: 0x000624C0 File Offset: 0x000606C0
			[CLSCompliant(false)]
			public unsafe static void SetLocalConstant<T2>(uint id, ExtVertexShader type, [In] [Out] T2[,] addr) where T2 : struct
			{
				fixed (T2* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, ptr, GL.EntryPoints[1873]);
				}
			}

			// Token: 0x06002424 RID: 9252 RVA: 0x000624FC File Offset: 0x000606FC
			[CLSCompliant(false)]
			public unsafe static void SetLocalConstant<T2>(uint id, ExtVertexShader type, [In] [Out] T2[,,] addr) where T2 : struct
			{
				fixed (T2* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, ptr, GL.EntryPoints[1873]);
				}
			}

			// Token: 0x06002425 RID: 9253 RVA: 0x00062538 File Offset: 0x00060738
			[CLSCompliant(false)]
			public unsafe static void SetLocalConstant<T2>(uint id, ExtVertexShader type, [In] [Out] ref T2 addr) where T2 : struct
			{
				fixed (T2* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), id, type, ptr, GL.EntryPoints[1873]);
				}
			}

			// Token: 0x06002426 RID: 9254 RVA: 0x0006255C File Offset: 0x0006075C
			[CLSCompliant(false)]
			public static void ShaderOp1(ExtVertexShader op, int res, int arg1)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32), op, res, arg1, GL.EntryPoints[1877]);
			}

			// Token: 0x06002427 RID: 9255 RVA: 0x00062574 File Offset: 0x00060774
			[CLSCompliant(false)]
			public static void ShaderOp1(ExtVertexShader op, uint res, uint arg1)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32), op, res, arg1, GL.EntryPoints[1877]);
			}

			// Token: 0x06002428 RID: 9256 RVA: 0x0006258C File Offset: 0x0006078C
			[CLSCompliant(false)]
			public static void ShaderOp2(ExtVertexShader op, int res, int arg1, int arg2)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32), op, res, arg1, arg2, GL.EntryPoints[1878]);
			}

			// Token: 0x06002429 RID: 9257 RVA: 0x000625A4 File Offset: 0x000607A4
			[CLSCompliant(false)]
			public static void ShaderOp2(ExtVertexShader op, uint res, uint arg1, uint arg2)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32), op, res, arg1, arg2, GL.EntryPoints[1878]);
			}

			// Token: 0x0600242A RID: 9258 RVA: 0x000625BC File Offset: 0x000607BC
			[CLSCompliant(false)]
			public static void ShaderOp3(ExtVertexShader op, int res, int arg1, int arg2, int arg3)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), op, res, arg1, arg2, arg3, GL.EntryPoints[1879]);
			}

			// Token: 0x0600242B RID: 9259 RVA: 0x000625D4 File Offset: 0x000607D4
			[CLSCompliant(false)]
			public static void ShaderOp3(ExtVertexShader op, uint res, uint arg1, uint arg2, uint arg3)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), op, res, arg1, arg2, arg3, GL.EntryPoints[1879]);
			}

			// Token: 0x0600242C RID: 9260 RVA: 0x000625EC File Offset: 0x000607EC
			[CLSCompliant(false)]
			public static void StencilClearTag(int stencilTagBits, int stencilClearTag)
			{
				calli(System.Void(System.Int32,System.UInt32), stencilTagBits, stencilClearTag, GL.EntryPoints[1889]);
			}

			// Token: 0x0600242D RID: 9261 RVA: 0x00062600 File Offset: 0x00060800
			[CLSCompliant(false)]
			public static void StencilClearTag(int stencilTagBits, uint stencilClearTag)
			{
				calli(System.Void(System.Int32,System.UInt32), stencilTagBits, stencilClearTag, GL.EntryPoints[1889]);
			}

			// Token: 0x0600242E RID: 9262 RVA: 0x00062614 File Offset: 0x00060814
			[CLSCompliant(false)]
			public static void Swizzle(int res, int @in, ExtVertexShader outX, ExtVertexShader outY, ExtVertexShader outZ, ExtVertexShader outW)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), res, @in, outX, outY, outZ, outW, GL.EntryPoints[1905]);
			}

			// Token: 0x0600242F RID: 9263 RVA: 0x00062630 File Offset: 0x00060830
			[CLSCompliant(false)]
			public static void Swizzle(uint res, uint @in, ExtVertexShader outX, ExtVertexShader outY, ExtVertexShader outZ, ExtVertexShader outW)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), res, @in, outX, outY, outZ, outW, GL.EntryPoints[1905]);
			}

			// Token: 0x06002430 RID: 9264 RVA: 0x0006264C File Offset: 0x0006084C
			[CLSCompliant(false)]
			public static void Tangent3(byte tx, byte ty, byte tz)
			{
				calli(System.Void(System.SByte,System.SByte,System.SByte), tx, ty, tz, GL.EntryPoints[1908]);
			}

			// Token: 0x06002431 RID: 9265 RVA: 0x00062664 File Offset: 0x00060864
			[CLSCompliant(false)]
			public static void Tangent3(sbyte tx, sbyte ty, sbyte tz)
			{
				calli(System.Void(System.SByte,System.SByte,System.SByte), tx, ty, tz, GL.EntryPoints[1908]);
			}

			// Token: 0x06002432 RID: 9266 RVA: 0x0006267C File Offset: 0x0006087C
			[CLSCompliant(false)]
			public unsafe static void Tangent3(byte[] v)
			{
				fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1909]);
				}
			}

			// Token: 0x06002433 RID: 9267 RVA: 0x000626B0 File Offset: 0x000608B0
			[CLSCompliant(false)]
			public unsafe static void Tangent3(ref byte v)
			{
				fixed (byte* ptr = &v)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1909]);
				}
			}

			// Token: 0x06002434 RID: 9268 RVA: 0x000626D4 File Offset: 0x000608D4
			[CLSCompliant(false)]
			public unsafe static void Tangent3(byte* v)
			{
				calli(System.Void(System.SByte*), v, GL.EntryPoints[1909]);
			}

			// Token: 0x06002435 RID: 9269 RVA: 0x000626E8 File Offset: 0x000608E8
			[CLSCompliant(false)]
			public unsafe static void Tangent3(sbyte[] v)
			{
				fixed (sbyte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1909]);
				}
			}

			// Token: 0x06002436 RID: 9270 RVA: 0x0006271C File Offset: 0x0006091C
			[CLSCompliant(false)]
			public unsafe static void Tangent3(ref sbyte v)
			{
				fixed (sbyte* ptr = &v)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1909]);
				}
			}

			// Token: 0x06002437 RID: 9271 RVA: 0x00062740 File Offset: 0x00060940
			[CLSCompliant(false)]
			public unsafe static void Tangent3(sbyte* v)
			{
				calli(System.Void(System.SByte*), v, GL.EntryPoints[1909]);
			}

			// Token: 0x06002438 RID: 9272 RVA: 0x00062754 File Offset: 0x00060954
			public static void Tangent3(double tx, double ty, double tz)
			{
				calli(System.Void(System.Double,System.Double,System.Double), tx, ty, tz, GL.EntryPoints[1910]);
			}

			// Token: 0x06002439 RID: 9273 RVA: 0x0006276C File Offset: 0x0006096C
			[CLSCompliant(false)]
			public unsafe static void Tangent3(double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[1911]);
				}
			}

			// Token: 0x0600243A RID: 9274 RVA: 0x000627A0 File Offset: 0x000609A0
			[CLSCompliant(false)]
			public unsafe static void Tangent3(ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[1911]);
				}
			}

			// Token: 0x0600243B RID: 9275 RVA: 0x000627C4 File Offset: 0x000609C4
			[CLSCompliant(false)]
			public unsafe static void Tangent3(double* v)
			{
				calli(System.Void(System.Double*), v, GL.EntryPoints[1911]);
			}

			// Token: 0x0600243C RID: 9276 RVA: 0x000627D8 File Offset: 0x000609D8
			public static void Tangent3(float tx, float ty, float tz)
			{
				calli(System.Void(System.Single,System.Single,System.Single), tx, ty, tz, GL.EntryPoints[1912]);
			}

			// Token: 0x0600243D RID: 9277 RVA: 0x000627F0 File Offset: 0x000609F0
			[CLSCompliant(false)]
			public unsafe static void Tangent3(float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[1913]);
				}
			}

			// Token: 0x0600243E RID: 9278 RVA: 0x00062824 File Offset: 0x00060A24
			[CLSCompliant(false)]
			public unsafe static void Tangent3(ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[1913]);
				}
			}

			// Token: 0x0600243F RID: 9279 RVA: 0x00062848 File Offset: 0x00060A48
			[CLSCompliant(false)]
			public unsafe static void Tangent3(float* v)
			{
				calli(System.Void(System.Single*), v, GL.EntryPoints[1913]);
			}

			// Token: 0x06002440 RID: 9280 RVA: 0x0006285C File Offset: 0x00060A5C
			public static void Tangent3(int tx, int ty, int tz)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), tx, ty, tz, GL.EntryPoints[1914]);
			}

			// Token: 0x06002441 RID: 9281 RVA: 0x00062874 File Offset: 0x00060A74
			[CLSCompliant(false)]
			public unsafe static void Tangent3(int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1915]);
				}
			}

			// Token: 0x06002442 RID: 9282 RVA: 0x000628A8 File Offset: 0x00060AA8
			[CLSCompliant(false)]
			public unsafe static void Tangent3(ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1915]);
				}
			}

			// Token: 0x06002443 RID: 9283 RVA: 0x000628CC File Offset: 0x00060ACC
			[CLSCompliant(false)]
			public unsafe static void Tangent3(int* v)
			{
				calli(System.Void(System.Int32*), v, GL.EntryPoints[1915]);
			}

			// Token: 0x06002444 RID: 9284 RVA: 0x000628E0 File Offset: 0x00060AE0
			public static void Tangent3(short tx, short ty, short tz)
			{
				calli(System.Void(System.Int16,System.Int16,System.Int16), tx, ty, tz, GL.EntryPoints[1916]);
			}

			// Token: 0x06002445 RID: 9285 RVA: 0x000628F8 File Offset: 0x00060AF8
			[CLSCompliant(false)]
			public unsafe static void Tangent3(short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1917]);
				}
			}

			// Token: 0x06002446 RID: 9286 RVA: 0x0006292C File Offset: 0x00060B2C
			[CLSCompliant(false)]
			public unsafe static void Tangent3(ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.Int16*), ptr, GL.EntryPoints[1917]);
				}
			}

			// Token: 0x06002447 RID: 9287 RVA: 0x00062950 File Offset: 0x00060B50
			[CLSCompliant(false)]
			public unsafe static void Tangent3(short* v)
			{
				calli(System.Void(System.Int16*), v, GL.EntryPoints[1917]);
			}

			// Token: 0x06002448 RID: 9288 RVA: 0x00062964 File Offset: 0x00060B64
			public static void TangentPointer(NormalPointerType type, int stride, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, pointer, GL.EntryPoints[1918]);
			}

			// Token: 0x06002449 RID: 9289 RVA: 0x0006297C File Offset: 0x00060B7C
			[CLSCompliant(false)]
			public unsafe static void TangentPointer<T2>(NormalPointerType type, int stride, [In] [Out] T2[] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[1918]);
				}
			}

			// Token: 0x0600244A RID: 9290 RVA: 0x000629B4 File Offset: 0x00060BB4
			[CLSCompliant(false)]
			public unsafe static void TangentPointer<T2>(NormalPointerType type, int stride, [In] [Out] T2[,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[1918]);
				}
			}

			// Token: 0x0600244B RID: 9291 RVA: 0x000629F0 File Offset: 0x00060BF0
			[CLSCompliant(false)]
			public unsafe static void TangentPointer<T2>(NormalPointerType type, int stride, [In] [Out] T2[,,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[1918]);
				}
			}

			// Token: 0x0600244C RID: 9292 RVA: 0x00062A2C File Offset: 0x00060C2C
			public unsafe static void TangentPointer<T2>(NormalPointerType type, int stride, [In] [Out] ref T2 pointer) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[1918]);
				}
			}

			// Token: 0x0600244D RID: 9293 RVA: 0x00062A50 File Offset: 0x00060C50
			[CLSCompliant(false)]
			public static void TexBuffer(TextureTarget target, ExtTextureBufferObject internalformat, int buffer)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32), target, internalformat, buffer, GL.EntryPoints[1927]);
			}

			// Token: 0x0600244E RID: 9294 RVA: 0x00062A68 File Offset: 0x00060C68
			[CLSCompliant(false)]
			public static void TexBuffer(TextureTarget target, ExtTextureBufferObject internalformat, uint buffer)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32), target, internalformat, buffer, GL.EntryPoints[1927]);
			}

			// Token: 0x0600244F RID: 9295 RVA: 0x00062A80 File Offset: 0x00060C80
			public static void TexCoordPointer(int size, TexCoordPointerType type, int stride, int count, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, count, pointer, GL.EntryPoints[2011]);
			}

			// Token: 0x06002450 RID: 9296 RVA: 0x00062A98 File Offset: 0x00060C98
			[CLSCompliant(false)]
			public unsafe static void TexCoordPointer<T4>(int size, TexCoordPointerType type, int stride, int count, [In] [Out] T4[] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, count, ptr, GL.EntryPoints[2011]);
				}
			}

			// Token: 0x06002451 RID: 9297 RVA: 0x00062AD4 File Offset: 0x00060CD4
			[CLSCompliant(false)]
			public unsafe static void TexCoordPointer<T4>(int size, TexCoordPointerType type, int stride, int count, [In] [Out] T4[,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, count, ptr, GL.EntryPoints[2011]);
				}
			}

			// Token: 0x06002452 RID: 9298 RVA: 0x00062B14 File Offset: 0x00060D14
			[CLSCompliant(false)]
			public unsafe static void TexCoordPointer<T4>(int size, TexCoordPointerType type, int stride, int count, [In] [Out] T4[,,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, count, ptr, GL.EntryPoints[2011]);
				}
			}

			// Token: 0x06002453 RID: 9299 RVA: 0x00062B54 File Offset: 0x00060D54
			public unsafe static void TexCoordPointer<T4>(int size, TexCoordPointerType type, int stride, int count, [In] [Out] ref T4 pointer) where T4 : struct
			{
				fixed (T4* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, count, ptr, GL.EntryPoints[2011]);
				}
			}

			// Token: 0x06002454 RID: 9300 RVA: 0x00062B7C File Offset: 0x00060D7C
			public static void TexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, pixels, GL.EntryPoints[2034]);
			}

			// Token: 0x06002455 RID: 9301 RVA: 0x00062BAC File Offset: 0x00060DAC
			[CLSCompliant(false)]
			public unsafe static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T9[] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2034]);
				}
			}

			// Token: 0x06002456 RID: 9302 RVA: 0x00062BF0 File Offset: 0x00060DF0
			[CLSCompliant(false)]
			public unsafe static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T9[,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2034]);
				}
			}

			// Token: 0x06002457 RID: 9303 RVA: 0x00062C38 File Offset: 0x00060E38
			[CLSCompliant(false)]
			public unsafe static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T9[,,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2034]);
				}
			}

			// Token: 0x06002458 RID: 9304 RVA: 0x00062C84 File Offset: 0x00060E84
			public unsafe static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] ref T9 pixels) where T9 : struct
			{
				fixed (T9* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2034]);
				}
			}

			// Token: 0x06002459 RID: 9305 RVA: 0x00062CB4 File Offset: 0x00060EB4
			[CLSCompliant(false)]
			public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[2043]);
				}
			}

			// Token: 0x0600245A RID: 9306 RVA: 0x00062CEC File Offset: 0x00060EEC
			[CLSCompliant(false)]
			public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[2043]);
				}
			}

			// Token: 0x0600245B RID: 9307 RVA: 0x00062D10 File Offset: 0x00060F10
			[CLSCompliant(false)]
			public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[2043]);
			}

			// Token: 0x0600245C RID: 9308 RVA: 0x00062D28 File Offset: 0x00060F28
			[CLSCompliant(false)]
			public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[2045]);
				}
			}

			// Token: 0x0600245D RID: 9309 RVA: 0x00062D60 File Offset: 0x00060F60
			[CLSCompliant(false)]
			public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, ref uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[2045]);
				}
			}

			// Token: 0x0600245E RID: 9310 RVA: 0x00062D84 File Offset: 0x00060F84
			[CLSCompliant(false)]
			public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, uint* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, @params, GL.EntryPoints[2045]);
			}

			// Token: 0x0600245F RID: 9311 RVA: 0x00062D9C File Offset: 0x00060F9C
			public static void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, type, pixels, GL.EntryPoints[2057]);
			}

			// Token: 0x06002460 RID: 9312 RVA: 0x00062DC4 File Offset: 0x00060FC4
			[CLSCompliant(false)]
			public unsafe static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T6[] pixels) where T6 : struct
			{
				fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, type, ptr, GL.EntryPoints[2057]);
				}
			}

			// Token: 0x06002461 RID: 9313 RVA: 0x00062E04 File Offset: 0x00061004
			[CLSCompliant(false)]
			public unsafe static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T6[,] pixels) where T6 : struct
			{
				fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, type, ptr, GL.EntryPoints[2057]);
				}
			}

			// Token: 0x06002462 RID: 9314 RVA: 0x00062E48 File Offset: 0x00061048
			[CLSCompliant(false)]
			public unsafe static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T6[,,] pixels) where T6 : struct
			{
				fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, type, ptr, GL.EntryPoints[2057]);
				}
			}

			// Token: 0x06002463 RID: 9315 RVA: 0x00062E8C File Offset: 0x0006108C
			public unsafe static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] ref T6 pixels) where T6 : struct
			{
				fixed (T6* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, width, format, type, ptr, GL.EntryPoints[2057]);
				}
			}

			// Token: 0x06002464 RID: 9316 RVA: 0x00062EB8 File Offset: 0x000610B8
			public static void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, pixels, GL.EntryPoints[2059]);
			}

			// Token: 0x06002465 RID: 9317 RVA: 0x00062EE4 File Offset: 0x000610E4
			[CLSCompliant(false)]
			public unsafe static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T8[] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[2059]);
				}
			}

			// Token: 0x06002466 RID: 9318 RVA: 0x00062F28 File Offset: 0x00061128
			[CLSCompliant(false)]
			public unsafe static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T8[,] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[2059]);
				}
			}

			// Token: 0x06002467 RID: 9319 RVA: 0x00062F70 File Offset: 0x00061170
			[CLSCompliant(false)]
			public unsafe static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T8[,,] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[2059]);
				}
			}

			// Token: 0x06002468 RID: 9320 RVA: 0x00062FB8 File Offset: 0x000611B8
			public unsafe static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T8 pixels) where T8 : struct
			{
				fixed (T8* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[2059]);
				}
			}

			// Token: 0x06002469 RID: 9321 RVA: 0x00062FE8 File Offset: 0x000611E8
			public static void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels, GL.EntryPoints[2061]);
			}

			// Token: 0x0600246A RID: 9322 RVA: 0x00063018 File Offset: 0x00061218
			[CLSCompliant(false)]
			public unsafe static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[2061]);
				}
			}

			// Token: 0x0600246B RID: 9323 RVA: 0x00063060 File Offset: 0x00061260
			[CLSCompliant(false)]
			public unsafe static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[2061]);
				}
			}

			// Token: 0x0600246C RID: 9324 RVA: 0x000630AC File Offset: 0x000612AC
			[CLSCompliant(false)]
			public unsafe static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[,,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[2061]);
				}
			}

			// Token: 0x0600246D RID: 9325 RVA: 0x000630F8 File Offset: 0x000612F8
			public unsafe static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] ref T10 pixels) where T10 : struct
			{
				fixed (T10* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[2061]);
				}
			}

			// Token: 0x0600246E RID: 9326 RVA: 0x0006312C File Offset: 0x0006132C
			[CLSCompliant(false)]
			public static void TextureBuffer(int texture, TextureTarget target, ExtDirectStateAccess internalformat, int buffer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32), texture, target, internalformat, buffer, GL.EntryPoints[2064]);
			}

			// Token: 0x0600246F RID: 9327 RVA: 0x00063144 File Offset: 0x00061344
			[CLSCompliant(false)]
			public static void TextureBuffer(uint texture, TextureTarget target, ExtDirectStateAccess internalformat, uint buffer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32), texture, target, internalformat, buffer, GL.EntryPoints[2064]);
			}

			// Token: 0x06002470 RID: 9328 RVA: 0x0006315C File Offset: 0x0006135C
			[CLSCompliant(false)]
			public static void TextureBufferRange(int texture, TextureTarget target, ExtDirectStateAccess internalformat, int buffer, IntPtr offset, IntPtr size)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32,System.IntPtr,System.IntPtr), texture, target, internalformat, buffer, offset, size, GL.EntryPoints[2065]);
			}

			// Token: 0x06002471 RID: 9329 RVA: 0x00063178 File Offset: 0x00061378
			[CLSCompliant(false)]
			public static void TextureBufferRange(uint texture, TextureTarget target, ExtDirectStateAccess internalformat, uint buffer, IntPtr offset, IntPtr size)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32,System.IntPtr,System.IntPtr), texture, target, internalformat, buffer, offset, size, GL.EntryPoints[2065]);
			}

			// Token: 0x06002472 RID: 9330 RVA: 0x00063194 File Offset: 0x00061394
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public static void TextureImage1D(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, pixels, GL.EntryPoints[2067]);
			}

			// Token: 0x06002473 RID: 9331 RVA: 0x000631C0 File Offset: 0x000613C0
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TextureImage1D<T8>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2067]);
				}
			}

			// Token: 0x06002474 RID: 9332 RVA: 0x00063204 File Offset: 0x00061404
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void TextureImage1D<T8>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[,] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2067]);
				}
			}

			// Token: 0x06002475 RID: 9333 RVA: 0x0006324C File Offset: 0x0006144C
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TextureImage1D<T8>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[,,] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2067]);
				}
			}

			// Token: 0x06002476 RID: 9334 RVA: 0x00063294 File Offset: 0x00061494
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void TextureImage1D<T8>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] ref T8 pixels) where T8 : struct
			{
				fixed (T8* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2067]);
				}
			}

			// Token: 0x06002477 RID: 9335 RVA: 0x000632C4 File Offset: 0x000614C4
			[CLSCompliant(false)]
			public static void TextureImage1D(int texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, pixels, GL.EntryPoints[2067]);
			}

			// Token: 0x06002478 RID: 9336 RVA: 0x000632F0 File Offset: 0x000614F0
			[CLSCompliant(false)]
			public unsafe static void TextureImage1D<T8>(int texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2067]);
				}
			}

			// Token: 0x06002479 RID: 9337 RVA: 0x00063334 File Offset: 0x00061534
			[CLSCompliant(false)]
			public unsafe static void TextureImage1D<T8>(int texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[,] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2067]);
				}
			}

			// Token: 0x0600247A RID: 9338 RVA: 0x0006337C File Offset: 0x0006157C
			[CLSCompliant(false)]
			public unsafe static void TextureImage1D<T8>(int texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[,,] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2067]);
				}
			}

			// Token: 0x0600247B RID: 9339 RVA: 0x000633C4 File Offset: 0x000615C4
			[CLSCompliant(false)]
			public unsafe static void TextureImage1D<T8>(int texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] ref T8 pixels) where T8 : struct
			{
				fixed (T8* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2067]);
				}
			}

			// Token: 0x0600247C RID: 9340 RVA: 0x000633F4 File Offset: 0x000615F4
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public static void TextureImage1D(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, pixels, GL.EntryPoints[2067]);
			}

			// Token: 0x0600247D RID: 9341 RVA: 0x00063420 File Offset: 0x00061620
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void TextureImage1D<T8>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2067]);
				}
			}

			// Token: 0x0600247E RID: 9342 RVA: 0x00063464 File Offset: 0x00061664
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void TextureImage1D<T8>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[,] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2067]);
				}
			}

			// Token: 0x0600247F RID: 9343 RVA: 0x000634AC File Offset: 0x000616AC
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void TextureImage1D<T8>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[,,] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2067]);
				}
			}

			// Token: 0x06002480 RID: 9344 RVA: 0x000634F4 File Offset: 0x000616F4
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void TextureImage1D<T8>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] ref T8 pixels) where T8 : struct
			{
				fixed (T8* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2067]);
				}
			}

			// Token: 0x06002481 RID: 9345 RVA: 0x00063524 File Offset: 0x00061724
			[CLSCompliant(false)]
			public static void TextureImage1D(uint texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, pixels, GL.EntryPoints[2067]);
			}

			// Token: 0x06002482 RID: 9346 RVA: 0x00063550 File Offset: 0x00061750
			[CLSCompliant(false)]
			public unsafe static void TextureImage1D<T8>(uint texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2067]);
				}
			}

			// Token: 0x06002483 RID: 9347 RVA: 0x00063594 File Offset: 0x00061794
			[CLSCompliant(false)]
			public unsafe static void TextureImage1D<T8>(uint texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[,] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2067]);
				}
			}

			// Token: 0x06002484 RID: 9348 RVA: 0x000635DC File Offset: 0x000617DC
			[CLSCompliant(false)]
			public unsafe static void TextureImage1D<T8>(uint texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] T8[,,] pixels) where T8 : struct
			{
				fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2067]);
				}
			}

			// Token: 0x06002485 RID: 9349 RVA: 0x00063624 File Offset: 0x00061824
			[CLSCompliant(false)]
			public unsafe static void TextureImage1D<T8>(uint texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, [In] [Out] ref T8 pixels) where T8 : struct
			{
				fixed (T8* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, border, format, type, ptr, GL.EntryPoints[2067]);
				}
			}

			// Token: 0x06002486 RID: 9350 RVA: 0x00063654 File Offset: 0x00061854
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public static void TextureImage2D(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, pixels, GL.EntryPoints[2068]);
			}

			// Token: 0x06002487 RID: 9351 RVA: 0x00063684 File Offset: 0x00061884
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void TextureImage2D<T9>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2068]);
				}
			}

			// Token: 0x06002488 RID: 9352 RVA: 0x000636C8 File Offset: 0x000618C8
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void TextureImage2D<T9>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2068]);
				}
			}

			// Token: 0x06002489 RID: 9353 RVA: 0x00063710 File Offset: 0x00061910
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void TextureImage2D<T9>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[,,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2068]);
				}
			}

			// Token: 0x0600248A RID: 9354 RVA: 0x0006375C File Offset: 0x0006195C
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TextureImage2D<T9>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] ref T9 pixels) where T9 : struct
			{
				fixed (T9* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2068]);
				}
			}

			// Token: 0x0600248B RID: 9355 RVA: 0x0006378C File Offset: 0x0006198C
			[CLSCompliant(false)]
			public static void TextureImage2D(int texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, pixels, GL.EntryPoints[2068]);
			}

			// Token: 0x0600248C RID: 9356 RVA: 0x000637BC File Offset: 0x000619BC
			[CLSCompliant(false)]
			public unsafe static void TextureImage2D<T9>(int texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2068]);
				}
			}

			// Token: 0x0600248D RID: 9357 RVA: 0x00063800 File Offset: 0x00061A00
			[CLSCompliant(false)]
			public unsafe static void TextureImage2D<T9>(int texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2068]);
				}
			}

			// Token: 0x0600248E RID: 9358 RVA: 0x00063848 File Offset: 0x00061A48
			[CLSCompliant(false)]
			public unsafe static void TextureImage2D<T9>(int texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[,,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2068]);
				}
			}

			// Token: 0x0600248F RID: 9359 RVA: 0x00063894 File Offset: 0x00061A94
			[CLSCompliant(false)]
			public unsafe static void TextureImage2D<T9>(int texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] ref T9 pixels) where T9 : struct
			{
				fixed (T9* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2068]);
				}
			}

			// Token: 0x06002490 RID: 9360 RVA: 0x000638C4 File Offset: 0x00061AC4
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public static void TextureImage2D(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, pixels, GL.EntryPoints[2068]);
			}

			// Token: 0x06002491 RID: 9361 RVA: 0x000638F4 File Offset: 0x00061AF4
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TextureImage2D<T9>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2068]);
				}
			}

			// Token: 0x06002492 RID: 9362 RVA: 0x00063938 File Offset: 0x00061B38
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void TextureImage2D<T9>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2068]);
				}
			}

			// Token: 0x06002493 RID: 9363 RVA: 0x00063980 File Offset: 0x00061B80
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void TextureImage2D<T9>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[,,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2068]);
				}
			}

			// Token: 0x06002494 RID: 9364 RVA: 0x000639CC File Offset: 0x00061BCC
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void TextureImage2D<T9>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] ref T9 pixels) where T9 : struct
			{
				fixed (T9* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2068]);
				}
			}

			// Token: 0x06002495 RID: 9365 RVA: 0x000639FC File Offset: 0x00061BFC
			[CLSCompliant(false)]
			public static void TextureImage2D(uint texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, pixels, GL.EntryPoints[2068]);
			}

			// Token: 0x06002496 RID: 9366 RVA: 0x00063A2C File Offset: 0x00061C2C
			[CLSCompliant(false)]
			public unsafe static void TextureImage2D<T9>(uint texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2068]);
				}
			}

			// Token: 0x06002497 RID: 9367 RVA: 0x00063A70 File Offset: 0x00061C70
			[CLSCompliant(false)]
			public unsafe static void TextureImage2D<T9>(uint texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2068]);
				}
			}

			// Token: 0x06002498 RID: 9368 RVA: 0x00063AB8 File Offset: 0x00061CB8
			[CLSCompliant(false)]
			public unsafe static void TextureImage2D<T9>(uint texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T9[,,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2068]);
				}
			}

			// Token: 0x06002499 RID: 9369 RVA: 0x00063B04 File Offset: 0x00061D04
			[CLSCompliant(false)]
			public unsafe static void TextureImage2D<T9>(uint texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] ref T9 pixels) where T9 : struct
			{
				fixed (T9* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[2068]);
				}
			}

			// Token: 0x0600249A RID: 9370 RVA: 0x00063B34 File Offset: 0x00061D34
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public static void TextureImage3D(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, pixels, GL.EntryPoints[2071]);
			}

			// Token: 0x0600249B RID: 9371 RVA: 0x00063B64 File Offset: 0x00061D64
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TextureImage3D<T10>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2071]);
				}
			}

			// Token: 0x0600249C RID: 9372 RVA: 0x00063BAC File Offset: 0x00061DAC
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TextureImage3D<T10>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2071]);
				}
			}

			// Token: 0x0600249D RID: 9373 RVA: 0x00063BF8 File Offset: 0x00061DF8
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TextureImage3D<T10>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[,,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2071]);
				}
			}

			// Token: 0x0600249E RID: 9374 RVA: 0x00063C44 File Offset: 0x00061E44
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TextureImage3D<T10>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] ref T10 pixels) where T10 : struct
			{
				fixed (T10* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2071]);
				}
			}

			// Token: 0x0600249F RID: 9375 RVA: 0x00063C78 File Offset: 0x00061E78
			[CLSCompliant(false)]
			public static void TextureImage3D(int texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, pixels, GL.EntryPoints[2071]);
			}

			// Token: 0x060024A0 RID: 9376 RVA: 0x00063CA8 File Offset: 0x00061EA8
			[CLSCompliant(false)]
			public unsafe static void TextureImage3D<T10>(int texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2071]);
				}
			}

			// Token: 0x060024A1 RID: 9377 RVA: 0x00063CF0 File Offset: 0x00061EF0
			[CLSCompliant(false)]
			public unsafe static void TextureImage3D<T10>(int texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2071]);
				}
			}

			// Token: 0x060024A2 RID: 9378 RVA: 0x00063D3C File Offset: 0x00061F3C
			[CLSCompliant(false)]
			public unsafe static void TextureImage3D<T10>(int texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[,,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2071]);
				}
			}

			// Token: 0x060024A3 RID: 9379 RVA: 0x00063D88 File Offset: 0x00061F88
			[CLSCompliant(false)]
			public unsafe static void TextureImage3D<T10>(int texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] ref T10 pixels) where T10 : struct
			{
				fixed (T10* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2071]);
				}
			}

			// Token: 0x060024A4 RID: 9380 RVA: 0x00063DBC File Offset: 0x00061FBC
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public static void TextureImage3D(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, pixels, GL.EntryPoints[2071]);
			}

			// Token: 0x060024A5 RID: 9381 RVA: 0x00063DEC File Offset: 0x00061FEC
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void TextureImage3D<T10>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2071]);
				}
			}

			// Token: 0x060024A6 RID: 9382 RVA: 0x00063E34 File Offset: 0x00062034
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TextureImage3D<T10>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2071]);
				}
			}

			// Token: 0x060024A7 RID: 9383 RVA: 0x00063E80 File Offset: 0x00062080
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TextureImage3D<T10>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[,,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2071]);
				}
			}

			// Token: 0x060024A8 RID: 9384 RVA: 0x00063ECC File Offset: 0x000620CC
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TextureImage3D<T10>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] ref T10 pixels) where T10 : struct
			{
				fixed (T10* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2071]);
				}
			}

			// Token: 0x060024A9 RID: 9385 RVA: 0x00063F00 File Offset: 0x00062100
			[CLSCompliant(false)]
			public static void TextureImage3D(uint texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, pixels, GL.EntryPoints[2071]);
			}

			// Token: 0x060024AA RID: 9386 RVA: 0x00063F30 File Offset: 0x00062130
			[CLSCompliant(false)]
			public unsafe static void TextureImage3D<T10>(uint texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2071]);
				}
			}

			// Token: 0x060024AB RID: 9387 RVA: 0x00063F78 File Offset: 0x00062178
			[CLSCompliant(false)]
			public unsafe static void TextureImage3D<T10>(uint texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2071]);
				}
			}

			// Token: 0x060024AC RID: 9388 RVA: 0x00063FC4 File Offset: 0x000621C4
			[CLSCompliant(false)]
			public unsafe static void TextureImage3D<T10>(uint texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T10[,,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2071]);
				}
			}

			// Token: 0x060024AD RID: 9389 RVA: 0x00064010 File Offset: 0x00062210
			[CLSCompliant(false)]
			public unsafe static void TextureImage3D<T10>(uint texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] ref T10 pixels) where T10 : struct
			{
				fixed (T10* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[2071]);
				}
			}

			// Token: 0x060024AE RID: 9390 RVA: 0x00064044 File Offset: 0x00062244
			public static void TextureLight(ExtLightTexture pname)
			{
				calli(System.Void(System.Int32), pname, GL.EntryPoints[2074]);
			}

			// Token: 0x060024AF RID: 9391 RVA: 0x00064058 File Offset: 0x00062258
			public static void TextureMaterial(MaterialFace face, MaterialParameter mode)
			{
				calli(System.Void(System.Int32,System.Int32), face, mode, GL.EntryPoints[2075]);
			}

			// Token: 0x060024B0 RID: 9392 RVA: 0x0006406C File Offset: 0x0006226C
			public static void TextureNormal(ExtTexturePerturbNormal mode)
			{
				calli(System.Void(System.Int32), mode, GL.EntryPoints[2076]);
			}

			// Token: 0x060024B1 RID: 9393 RVA: 0x00064080 File Offset: 0x00062280
			[CLSCompliant(false)]
			public static void TexturePageCommitment(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool resident)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), texture, level, xoffset, yoffset, zoffset, width, height, depth, resident, GL.EntryPoints[2077]);
			}

			// Token: 0x060024B2 RID: 9394 RVA: 0x000640AC File Offset: 0x000622AC
			[CLSCompliant(false)]
			public static void TexturePageCommitment(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool resident)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), texture, level, xoffset, yoffset, zoffset, width, height, depth, resident, GL.EntryPoints[2077]);
			}

			// Token: 0x060024B3 RID: 9395 RVA: 0x000640D8 File Offset: 0x000622D8
			[CLSCompliant(false)]
			public static void TextureParameter(int texture, TextureTarget target, TextureParameterName pname, float param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single), texture, target, pname, param, GL.EntryPoints[2078]);
			}

			// Token: 0x060024B4 RID: 9396 RVA: 0x000640F0 File Offset: 0x000622F0
			[CLSCompliant(false)]
			public static void TextureParameter(uint texture, TextureTarget target, TextureParameterName pname, float param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single), texture, target, pname, param, GL.EntryPoints[2078]);
			}

			// Token: 0x060024B5 RID: 9397 RVA: 0x00064108 File Offset: 0x00062308
			[CLSCompliant(false)]
			public unsafe static void TextureParameter(int texture, TextureTarget target, TextureParameterName pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), texture, target, pname, ptr, GL.EntryPoints[2079]);
				}
			}

			// Token: 0x060024B6 RID: 9398 RVA: 0x00064140 File Offset: 0x00062340
			[CLSCompliant(false)]
			public unsafe static void TextureParameter(int texture, TextureTarget target, TextureParameterName pname, float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), texture, target, pname, @params, GL.EntryPoints[2079]);
			}

			// Token: 0x060024B7 RID: 9399 RVA: 0x00064158 File Offset: 0x00062358
			[CLSCompliant(false)]
			public unsafe static void TextureParameter(uint texture, TextureTarget target, TextureParameterName pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), texture, target, pname, ptr, GL.EntryPoints[2079]);
				}
			}

			// Token: 0x060024B8 RID: 9400 RVA: 0x00064190 File Offset: 0x00062390
			[CLSCompliant(false)]
			public unsafe static void TextureParameter(uint texture, TextureTarget target, TextureParameterName pname, float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), texture, target, pname, @params, GL.EntryPoints[2079]);
			}

			// Token: 0x060024B9 RID: 9401 RVA: 0x000641A8 File Offset: 0x000623A8
			[CLSCompliant(false)]
			public static void TextureParameter(int texture, TextureTarget target, TextureParameterName pname, int param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), texture, target, pname, param, GL.EntryPoints[2080]);
			}

			// Token: 0x060024BA RID: 9402 RVA: 0x000641C0 File Offset: 0x000623C0
			[CLSCompliant(false)]
			public static void TextureParameter(uint texture, TextureTarget target, TextureParameterName pname, int param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), texture, target, pname, param, GL.EntryPoints[2080]);
			}

			// Token: 0x060024BB RID: 9403 RVA: 0x000641D8 File Offset: 0x000623D8
			[CLSCompliant(false)]
			public unsafe static void TextureParameterI(int texture, TextureTarget target, TextureParameterName pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, ptr, GL.EntryPoints[2081]);
				}
			}

			// Token: 0x060024BC RID: 9404 RVA: 0x00064210 File Offset: 0x00062410
			[CLSCompliant(false)]
			public unsafe static void TextureParameterI(int texture, TextureTarget target, TextureParameterName pname, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, ptr, GL.EntryPoints[2081]);
				}
			}

			// Token: 0x060024BD RID: 9405 RVA: 0x00064234 File Offset: 0x00062434
			[CLSCompliant(false)]
			public unsafe static void TextureParameterI(int texture, TextureTarget target, TextureParameterName pname, int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, @params, GL.EntryPoints[2081]);
			}

			// Token: 0x060024BE RID: 9406 RVA: 0x0006424C File Offset: 0x0006244C
			[CLSCompliant(false)]
			public unsafe static void TextureParameterI(uint texture, TextureTarget target, TextureParameterName pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, ptr, GL.EntryPoints[2081]);
				}
			}

			// Token: 0x060024BF RID: 9407 RVA: 0x00064284 File Offset: 0x00062484
			[CLSCompliant(false)]
			public unsafe static void TextureParameterI(uint texture, TextureTarget target, TextureParameterName pname, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, ptr, GL.EntryPoints[2081]);
				}
			}

			// Token: 0x060024C0 RID: 9408 RVA: 0x000642A8 File Offset: 0x000624A8
			[CLSCompliant(false)]
			public unsafe static void TextureParameterI(uint texture, TextureTarget target, TextureParameterName pname, int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, @params, GL.EntryPoints[2081]);
			}

			// Token: 0x060024C1 RID: 9409 RVA: 0x000642C0 File Offset: 0x000624C0
			[CLSCompliant(false)]
			public unsafe static void TextureParameterI(uint texture, TextureTarget target, TextureParameterName pname, uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), texture, target, pname, ptr, GL.EntryPoints[2082]);
				}
			}

			// Token: 0x060024C2 RID: 9410 RVA: 0x000642F8 File Offset: 0x000624F8
			[CLSCompliant(false)]
			public unsafe static void TextureParameterI(uint texture, TextureTarget target, TextureParameterName pname, ref uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), texture, target, pname, ptr, GL.EntryPoints[2082]);
				}
			}

			// Token: 0x060024C3 RID: 9411 RVA: 0x0006431C File Offset: 0x0006251C
			[CLSCompliant(false)]
			public unsafe static void TextureParameterI(uint texture, TextureTarget target, TextureParameterName pname, uint* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), texture, target, pname, @params, GL.EntryPoints[2082]);
			}

			// Token: 0x060024C4 RID: 9412 RVA: 0x00064334 File Offset: 0x00062534
			[CLSCompliant(false)]
			public unsafe static void TextureParameter(int texture, TextureTarget target, TextureParameterName pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, ptr, GL.EntryPoints[2083]);
				}
			}

			// Token: 0x060024C5 RID: 9413 RVA: 0x0006436C File Offset: 0x0006256C
			[CLSCompliant(false)]
			public unsafe static void TextureParameter(int texture, TextureTarget target, TextureParameterName pname, int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, @params, GL.EntryPoints[2083]);
			}

			// Token: 0x060024C6 RID: 9414 RVA: 0x00064384 File Offset: 0x00062584
			[CLSCompliant(false)]
			public unsafe static void TextureParameter(uint texture, TextureTarget target, TextureParameterName pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, ptr, GL.EntryPoints[2083]);
				}
			}

			// Token: 0x060024C7 RID: 9415 RVA: 0x000643BC File Offset: 0x000625BC
			[CLSCompliant(false)]
			public unsafe static void TextureParameter(uint texture, TextureTarget target, TextureParameterName pname, int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), texture, target, pname, @params, GL.EntryPoints[2083]);
			}

			// Token: 0x060024C8 RID: 9416 RVA: 0x000643D4 File Offset: 0x000625D4
			[CLSCompliant(false)]
			public static void TextureRenderbuffer(int texture, TextureTarget target, int renderbuffer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32), texture, target, renderbuffer, GL.EntryPoints[2085]);
			}

			// Token: 0x060024C9 RID: 9417 RVA: 0x000643EC File Offset: 0x000625EC
			[CLSCompliant(false)]
			public static void TextureRenderbuffer(uint texture, TextureTarget target, uint renderbuffer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32), texture, target, renderbuffer, GL.EntryPoints[2085]);
			}

			// Token: 0x060024CA RID: 9418 RVA: 0x00064404 File Offset: 0x00062604
			[CLSCompliant(false)]
			public static void TextureStorage1D(int texture, ExtDirectStateAccess target, int levels, ExtDirectStateAccess internalformat, int width)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, levels, internalformat, width, GL.EntryPoints[2086]);
			}

			// Token: 0x060024CB RID: 9419 RVA: 0x0006441C File Offset: 0x0006261C
			[CLSCompliant(false)]
			public static void TextureStorage1D(uint texture, ExtDirectStateAccess target, int levels, ExtDirectStateAccess internalformat, int width)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, levels, internalformat, width, GL.EntryPoints[2086]);
			}

			// Token: 0x060024CC RID: 9420 RVA: 0x00064434 File Offset: 0x00062634
			[CLSCompliant(false)]
			public static void TextureStorage2D(int texture, ExtDirectStateAccess target, int levels, ExtDirectStateAccess internalformat, int width, int height)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, levels, internalformat, width, height, GL.EntryPoints[2087]);
			}

			// Token: 0x060024CD RID: 9421 RVA: 0x00064450 File Offset: 0x00062650
			[CLSCompliant(false)]
			public static void TextureStorage2D(uint texture, ExtDirectStateAccess target, int levels, ExtDirectStateAccess internalformat, int width, int height)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, levels, internalformat, width, height, GL.EntryPoints[2087]);
			}

			// Token: 0x060024CE RID: 9422 RVA: 0x0006446C File Offset: 0x0006266C
			[CLSCompliant(false)]
			public static void TextureStorage2DMultisample(int texture, TextureTarget target, int samples, ExtDirectStateAccess internalformat, int width, int height, bool fixedsamplelocations)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), texture, target, samples, internalformat, width, height, fixedsamplelocations, GL.EntryPoints[2088]);
			}

			// Token: 0x060024CF RID: 9423 RVA: 0x00064494 File Offset: 0x00062694
			[CLSCompliant(false)]
			public static void TextureStorage2DMultisample(uint texture, TextureTarget target, int samples, ExtDirectStateAccess internalformat, int width, int height, bool fixedsamplelocations)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), texture, target, samples, internalformat, width, height, fixedsamplelocations, GL.EntryPoints[2088]);
			}

			// Token: 0x060024D0 RID: 9424 RVA: 0x000644BC File Offset: 0x000626BC
			[CLSCompliant(false)]
			public static void TextureStorage3D(int texture, ExtDirectStateAccess target, int levels, ExtDirectStateAccess internalformat, int width, int height, int depth)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, levels, internalformat, width, height, depth, GL.EntryPoints[2089]);
			}

			// Token: 0x060024D1 RID: 9425 RVA: 0x000644E4 File Offset: 0x000626E4
			[CLSCompliant(false)]
			public static void TextureStorage3D(uint texture, ExtDirectStateAccess target, int levels, ExtDirectStateAccess internalformat, int width, int height, int depth)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, levels, internalformat, width, height, depth, GL.EntryPoints[2089]);
			}

			// Token: 0x060024D2 RID: 9426 RVA: 0x0006450C File Offset: 0x0006270C
			[CLSCompliant(false)]
			public static void TextureStorage3DMultisample(int texture, ExtDirectStateAccess target, int samples, ExtDirectStateAccess internalformat, int width, int height, int depth, bool fixedsamplelocations)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), texture, target, samples, internalformat, width, height, depth, fixedsamplelocations, GL.EntryPoints[2090]);
			}

			// Token: 0x060024D3 RID: 9427 RVA: 0x00064538 File Offset: 0x00062738
			[CLSCompliant(false)]
			public static void TextureStorage3DMultisample(uint texture, ExtDirectStateAccess target, int samples, ExtDirectStateAccess internalformat, int width, int height, int depth, bool fixedsamplelocations)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), texture, target, samples, internalformat, width, height, depth, fixedsamplelocations, GL.EntryPoints[2090]);
			}

			// Token: 0x060024D4 RID: 9428 RVA: 0x00064564 File Offset: 0x00062764
			[CLSCompliant(false)]
			public static void TextureSubImage1D(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, type, pixels, GL.EntryPoints[2092]);
			}

			// Token: 0x060024D5 RID: 9429 RVA: 0x00064590 File Offset: 0x00062790
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage1D<T7>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T7[] pixels) where T7 : struct
			{
				fixed (T7* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, type, ptr, GL.EntryPoints[2092]);
				}
			}

			// Token: 0x060024D6 RID: 9430 RVA: 0x000645D0 File Offset: 0x000627D0
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage1D<T7>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T7[,] pixels) where T7 : struct
			{
				fixed (T7* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, type, ptr, GL.EntryPoints[2092]);
				}
			}

			// Token: 0x060024D7 RID: 9431 RVA: 0x00064614 File Offset: 0x00062814
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage1D<T7>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T7[,,] pixels) where T7 : struct
			{
				fixed (T7* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, type, ptr, GL.EntryPoints[2092]);
				}
			}

			// Token: 0x060024D8 RID: 9432 RVA: 0x0006465C File Offset: 0x0006285C
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage1D<T7>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] ref T7 pixels) where T7 : struct
			{
				fixed (T7* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, type, ptr, GL.EntryPoints[2092]);
				}
			}

			// Token: 0x060024D9 RID: 9433 RVA: 0x00064688 File Offset: 0x00062888
			[CLSCompliant(false)]
			public static void TextureSubImage1D(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, type, pixels, GL.EntryPoints[2092]);
			}

			// Token: 0x060024DA RID: 9434 RVA: 0x000646B4 File Offset: 0x000628B4
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage1D<T7>(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T7[] pixels) where T7 : struct
			{
				fixed (T7* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, type, ptr, GL.EntryPoints[2092]);
				}
			}

			// Token: 0x060024DB RID: 9435 RVA: 0x000646F4 File Offset: 0x000628F4
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage1D<T7>(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T7[,] pixels) where T7 : struct
			{
				fixed (T7* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, type, ptr, GL.EntryPoints[2092]);
				}
			}

			// Token: 0x060024DC RID: 9436 RVA: 0x00064738 File Offset: 0x00062938
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage1D<T7>(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] T7[,,] pixels) where T7 : struct
			{
				fixed (T7* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, type, ptr, GL.EntryPoints[2092]);
				}
			}

			// Token: 0x060024DD RID: 9437 RVA: 0x00064780 File Offset: 0x00062980
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage1D<T7>(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In] [Out] ref T7 pixels) where T7 : struct
			{
				fixed (T7* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, width, format, type, ptr, GL.EntryPoints[2092]);
				}
			}

			// Token: 0x060024DE RID: 9438 RVA: 0x000647AC File Offset: 0x000629AC
			[CLSCompliant(false)]
			public static void TextureSubImage2D(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, type, pixels, GL.EntryPoints[2093]);
			}

			// Token: 0x060024DF RID: 9439 RVA: 0x000647DC File Offset: 0x000629DC
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage2D<T9>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T9[] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[2093]);
				}
			}

			// Token: 0x060024E0 RID: 9440 RVA: 0x00064820 File Offset: 0x00062A20
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage2D<T9>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T9[,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[2093]);
				}
			}

			// Token: 0x060024E1 RID: 9441 RVA: 0x00064868 File Offset: 0x00062A68
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage2D<T9>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T9[,,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[2093]);
				}
			}

			// Token: 0x060024E2 RID: 9442 RVA: 0x000648B4 File Offset: 0x00062AB4
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage2D<T9>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T9 pixels) where T9 : struct
			{
				fixed (T9* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[2093]);
				}
			}

			// Token: 0x060024E3 RID: 9443 RVA: 0x000648E4 File Offset: 0x00062AE4
			[CLSCompliant(false)]
			public static void TextureSubImage2D(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, type, pixels, GL.EntryPoints[2093]);
			}

			// Token: 0x060024E4 RID: 9444 RVA: 0x00064914 File Offset: 0x00062B14
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage2D<T9>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T9[] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[2093]);
				}
			}

			// Token: 0x060024E5 RID: 9445 RVA: 0x00064958 File Offset: 0x00062B58
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage2D<T9>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T9[,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[2093]);
				}
			}

			// Token: 0x060024E6 RID: 9446 RVA: 0x000649A0 File Offset: 0x00062BA0
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage2D<T9>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T9[,,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[2093]);
				}
			}

			// Token: 0x060024E7 RID: 9447 RVA: 0x000649EC File Offset: 0x00062BEC
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage2D<T9>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T9 pixels) where T9 : struct
			{
				fixed (T9* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[2093]);
				}
			}

			// Token: 0x060024E8 RID: 9448 RVA: 0x00064A1C File Offset: 0x00062C1C
			[CLSCompliant(false)]
			public static void TextureSubImage3D(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels, GL.EntryPoints[2094]);
			}

			// Token: 0x060024E9 RID: 9449 RVA: 0x00064A50 File Offset: 0x00062C50
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage3D<T11>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T11[] pixels) where T11 : struct
			{
				fixed (T11* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[2094]);
				}
			}

			// Token: 0x060024EA RID: 9450 RVA: 0x00064A98 File Offset: 0x00062C98
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage3D<T11>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T11[,] pixels) where T11 : struct
			{
				fixed (T11* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[2094]);
				}
			}

			// Token: 0x060024EB RID: 9451 RVA: 0x00064AE4 File Offset: 0x00062CE4
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage3D<T11>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T11[,,] pixels) where T11 : struct
			{
				fixed (T11* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[2094]);
				}
			}

			// Token: 0x060024EC RID: 9452 RVA: 0x00064B34 File Offset: 0x00062D34
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage3D<T11>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] ref T11 pixels) where T11 : struct
			{
				fixed (T11* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[2094]);
				}
			}

			// Token: 0x060024ED RID: 9453 RVA: 0x00064B68 File Offset: 0x00062D68
			[CLSCompliant(false)]
			public static void TextureSubImage3D(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels, GL.EntryPoints[2094]);
			}

			// Token: 0x060024EE RID: 9454 RVA: 0x00064B9C File Offset: 0x00062D9C
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage3D<T11>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T11[] pixels) where T11 : struct
			{
				fixed (T11* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[2094]);
				}
			}

			// Token: 0x060024EF RID: 9455 RVA: 0x00064BE4 File Offset: 0x00062DE4
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage3D<T11>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T11[,] pixels) where T11 : struct
			{
				fixed (T11* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[2094]);
				}
			}

			// Token: 0x060024F0 RID: 9456 RVA: 0x00064C30 File Offset: 0x00062E30
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage3D<T11>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T11[,,] pixels) where T11 : struct
			{
				fixed (T11* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[2094]);
				}
			}

			// Token: 0x060024F1 RID: 9457 RVA: 0x00064C80 File Offset: 0x00062E80
			[CLSCompliant(false)]
			public unsafe static void TextureSubImage3D<T11>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] ref T11 pixels) where T11 : struct
			{
				fixed (T11* ptr = &pixels)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[2094]);
				}
			}

			// Token: 0x060024F2 RID: 9458 RVA: 0x00064CB4 File Offset: 0x00062EB4
			[CLSCompliant(false)]
			public static void TransformFeedbackVaryings(int program, int count, string[] varyings, ExtTransformFeedback bufferMode)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(varyings);
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, count, intPtr, bufferMode, GL.EntryPoints[2100]);
				BindingsBase.FreeStringArrayPtr(intPtr, varyings.Length);
			}

			// Token: 0x060024F3 RID: 9459 RVA: 0x00064CE8 File Offset: 0x00062EE8
			[CLSCompliant(false)]
			public static void TransformFeedbackVaryings(uint program, int count, string[] varyings, ExtTransformFeedback bufferMode)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(varyings);
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, count, intPtr, bufferMode, GL.EntryPoints[2100]);
				BindingsBase.FreeStringArrayPtr(intPtr, varyings.Length);
			}

			// Token: 0x060024F4 RID: 9460 RVA: 0x00064D1C File Offset: 0x00062F1C
			[CLSCompliant(false)]
			public static void Uniform1(int location, int v0)
			{
				calli(System.Void(System.Int32,System.UInt32), location, v0, GL.EntryPoints[2121]);
			}

			// Token: 0x060024F5 RID: 9461 RVA: 0x00064D30 File Offset: 0x00062F30
			[CLSCompliant(false)]
			public static void Uniform1(int location, uint v0)
			{
				calli(System.Void(System.Int32,System.UInt32), location, v0, GL.EntryPoints[2121]);
			}

			// Token: 0x060024F6 RID: 9462 RVA: 0x00064D44 File Offset: 0x00062F44
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2123]);
				}
			}

			// Token: 0x060024F7 RID: 9463 RVA: 0x00064D7C File Offset: 0x00062F7C
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2123]);
				}
			}

			// Token: 0x060024F8 RID: 9464 RVA: 0x00064DA0 File Offset: 0x00062FA0
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, int* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[2123]);
			}

			// Token: 0x060024F9 RID: 9465 RVA: 0x00064DB8 File Offset: 0x00062FB8
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, uint[] value)
			{
				fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2123]);
				}
			}

			// Token: 0x060024FA RID: 9466 RVA: 0x00064DF0 File Offset: 0x00062FF0
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, ref uint value)
			{
				fixed (uint* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2123]);
				}
			}

			// Token: 0x060024FB RID: 9467 RVA: 0x00064E14 File Offset: 0x00063014
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, uint* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[2123]);
			}

			// Token: 0x060024FC RID: 9468 RVA: 0x00064E2C File Offset: 0x0006302C
			[CLSCompliant(false)]
			public static void Uniform2(int location, int v0, int v1)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32), location, v0, v1, GL.EntryPoints[2139]);
			}

			// Token: 0x060024FD RID: 9469 RVA: 0x00064E44 File Offset: 0x00063044
			[CLSCompliant(false)]
			public static void Uniform2(int location, uint v0, uint v1)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32), location, v0, v1, GL.EntryPoints[2139]);
			}

			// Token: 0x060024FE RID: 9470 RVA: 0x00064E5C File Offset: 0x0006305C
			[CLSCompliant(false)]
			public unsafe static void Uniform2(int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2141]);
				}
			}

			// Token: 0x060024FF RID: 9471 RVA: 0x00064E94 File Offset: 0x00063094
			[CLSCompliant(false)]
			public unsafe static void Uniform2(int location, int count, int* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[2141]);
			}

			// Token: 0x06002500 RID: 9472 RVA: 0x00064EAC File Offset: 0x000630AC
			[CLSCompliant(false)]
			public unsafe static void Uniform2(int location, int count, uint[] value)
			{
				fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2141]);
				}
			}

			// Token: 0x06002501 RID: 9473 RVA: 0x00064EE4 File Offset: 0x000630E4
			[CLSCompliant(false)]
			public unsafe static void Uniform2(int location, int count, ref uint value)
			{
				fixed (uint* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2141]);
				}
			}

			// Token: 0x06002502 RID: 9474 RVA: 0x00064F08 File Offset: 0x00063108
			[CLSCompliant(false)]
			public unsafe static void Uniform2(int location, int count, uint* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[2141]);
			}

			// Token: 0x06002503 RID: 9475 RVA: 0x00064F20 File Offset: 0x00063120
			[CLSCompliant(false)]
			public static void Uniform3(int location, int v0, int v1, int v2)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32), location, v0, v1, v2, GL.EntryPoints[2157]);
			}

			// Token: 0x06002504 RID: 9476 RVA: 0x00064F38 File Offset: 0x00063138
			[CLSCompliant(false)]
			public static void Uniform3(int location, uint v0, uint v1, uint v2)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32), location, v0, v1, v2, GL.EntryPoints[2157]);
			}

			// Token: 0x06002505 RID: 9477 RVA: 0x00064F50 File Offset: 0x00063150
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2159]);
				}
			}

			// Token: 0x06002506 RID: 9478 RVA: 0x00064F88 File Offset: 0x00063188
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2159]);
				}
			}

			// Token: 0x06002507 RID: 9479 RVA: 0x00064FAC File Offset: 0x000631AC
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, int* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[2159]);
			}

			// Token: 0x06002508 RID: 9480 RVA: 0x00064FC4 File Offset: 0x000631C4
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, uint[] value)
			{
				fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2159]);
				}
			}

			// Token: 0x06002509 RID: 9481 RVA: 0x00064FFC File Offset: 0x000631FC
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, ref uint value)
			{
				fixed (uint* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2159]);
				}
			}

			// Token: 0x0600250A RID: 9482 RVA: 0x00065020 File Offset: 0x00063220
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, uint* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[2159]);
			}

			// Token: 0x0600250B RID: 9483 RVA: 0x00065038 File Offset: 0x00063238
			[CLSCompliant(false)]
			public static void Uniform4(int location, int v0, int v1, int v2, int v3)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), location, v0, v1, v2, v3, GL.EntryPoints[2175]);
			}

			// Token: 0x0600250C RID: 9484 RVA: 0x00065050 File Offset: 0x00063250
			[CLSCompliant(false)]
			public static void Uniform4(int location, uint v0, uint v1, uint v2, uint v3)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), location, v0, v1, v2, v3, GL.EntryPoints[2175]);
			}

			// Token: 0x0600250D RID: 9485 RVA: 0x00065068 File Offset: 0x00063268
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2177]);
				}
			}

			// Token: 0x0600250E RID: 9486 RVA: 0x000650A0 File Offset: 0x000632A0
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2177]);
				}
			}

			// Token: 0x0600250F RID: 9487 RVA: 0x000650C4 File Offset: 0x000632C4
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, int* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[2177]);
			}

			// Token: 0x06002510 RID: 9488 RVA: 0x000650DC File Offset: 0x000632DC
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, uint[] value)
			{
				fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2177]);
				}
			}

			// Token: 0x06002511 RID: 9489 RVA: 0x00065114 File Offset: 0x00063314
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, ref uint value)
			{
				fixed (uint* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[2177]);
				}
			}

			// Token: 0x06002512 RID: 9490 RVA: 0x00065138 File Offset: 0x00063338
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, uint* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[2177]);
			}

			// Token: 0x06002513 RID: 9491 RVA: 0x00065150 File Offset: 0x00063350
			[CLSCompliant(false)]
			public static void UniformBuffer(int program, int location, int buffer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32), program, location, buffer, GL.EntryPoints[2179]);
			}

			// Token: 0x06002514 RID: 9492 RVA: 0x00065168 File Offset: 0x00063368
			[CLSCompliant(false)]
			public static void UniformBuffer(uint program, int location, uint buffer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32), program, location, buffer, GL.EntryPoints[2179]);
			}

			// Token: 0x06002515 RID: 9493 RVA: 0x00065180 File Offset: 0x00063380
			public static void UnlockArrays()
			{
				calli(System.Void(), GL.EntryPoints[2208]);
			}

			// Token: 0x06002516 RID: 9494 RVA: 0x00065194 File Offset: 0x00063394
			[CLSCompliant(false)]
			public static bool UnmapNamedBuffer(int buffer)
			{
				return calli(System.Byte(System.UInt32), buffer, GL.EntryPoints[2211]);
			}

			// Token: 0x06002517 RID: 9495 RVA: 0x000651A8 File Offset: 0x000633A8
			[CLSCompliant(false)]
			public static bool UnmapNamedBuffer(uint buffer)
			{
				return calli(System.Byte(System.UInt32), buffer, GL.EntryPoints[2211]);
			}

			// Token: 0x06002518 RID: 9496 RVA: 0x000651BC File Offset: 0x000633BC
			[CLSCompliant(false)]
			public static void UseProgramStages(int pipeline, int stages, int program)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32), pipeline, stages, program, GL.EntryPoints[2218]);
			}

			// Token: 0x06002519 RID: 9497 RVA: 0x000651D4 File Offset: 0x000633D4
			[CLSCompliant(false)]
			public static void UseProgramStages(uint pipeline, uint stages, uint program)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32), pipeline, stages, program, GL.EntryPoints[2218]);
			}

			// Token: 0x0600251A RID: 9498 RVA: 0x000651EC File Offset: 0x000633EC
			[CLSCompliant(false)]
			public static void UseShaderProgram(ExtSeparateShaderObjects type, int program)
			{
				calli(System.Void(System.Int32,System.UInt32), type, program, GL.EntryPoints[2219]);
			}

			// Token: 0x0600251B RID: 9499 RVA: 0x00065200 File Offset: 0x00063400
			[CLSCompliant(false)]
			public static void UseShaderProgram(ExtSeparateShaderObjects type, uint program)
			{
				calli(System.Void(System.Int32,System.UInt32), type, program, GL.EntryPoints[2219]);
			}

			// Token: 0x0600251C RID: 9500 RVA: 0x00065214 File Offset: 0x00063414
			[CLSCompliant(false)]
			public static void ValidateProgramPipeline(int pipeline)
			{
				calli(System.Void(System.UInt32), pipeline, GL.EntryPoints[2223]);
			}

			// Token: 0x0600251D RID: 9501 RVA: 0x00065228 File Offset: 0x00063428
			[CLSCompliant(false)]
			public static void ValidateProgramPipeline(uint pipeline)
			{
				calli(System.Void(System.UInt32), pipeline, GL.EntryPoints[2223]);
			}

			// Token: 0x0600251E RID: 9502 RVA: 0x0006523C File Offset: 0x0006343C
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, sbyte[] addr)
			{
				fixed (sbyte* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.SByte*), id, ptr, GL.EntryPoints[2225]);
				}
			}

			// Token: 0x0600251F RID: 9503 RVA: 0x00065270 File Offset: 0x00063470
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, ref sbyte addr)
			{
				fixed (sbyte* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.SByte*), id, ptr, GL.EntryPoints[2225]);
				}
			}

			// Token: 0x06002520 RID: 9504 RVA: 0x00065294 File Offset: 0x00063494
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, sbyte* addr)
			{
				calli(System.Void(System.UInt32,System.SByte*), id, addr, GL.EntryPoints[2225]);
			}

			// Token: 0x06002521 RID: 9505 RVA: 0x000652A8 File Offset: 0x000634A8
			[CLSCompliant(false)]
			public unsafe static void Variant(int id, double[] addr)
			{
				fixed (double* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), id, ptr, GL.EntryPoints[2226]);
				}
			}

			// Token: 0x06002522 RID: 9506 RVA: 0x000652DC File Offset: 0x000634DC
			[CLSCompliant(false)]
			public unsafe static void Variant(int id, ref double addr)
			{
				fixed (double* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.Double*), id, ptr, GL.EntryPoints[2226]);
				}
			}

			// Token: 0x06002523 RID: 9507 RVA: 0x00065300 File Offset: 0x00063500
			[CLSCompliant(false)]
			public unsafe static void Variant(int id, double* addr)
			{
				calli(System.Void(System.UInt32,System.Double*), id, addr, GL.EntryPoints[2226]);
			}

			// Token: 0x06002524 RID: 9508 RVA: 0x00065314 File Offset: 0x00063514
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, double[] addr)
			{
				fixed (double* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), id, ptr, GL.EntryPoints[2226]);
				}
			}

			// Token: 0x06002525 RID: 9509 RVA: 0x00065348 File Offset: 0x00063548
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, ref double addr)
			{
				fixed (double* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.Double*), id, ptr, GL.EntryPoints[2226]);
				}
			}

			// Token: 0x06002526 RID: 9510 RVA: 0x0006536C File Offset: 0x0006356C
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, double* addr)
			{
				calli(System.Void(System.UInt32,System.Double*), id, addr, GL.EntryPoints[2226]);
			}

			// Token: 0x06002527 RID: 9511 RVA: 0x00065380 File Offset: 0x00063580
			[CLSCompliant(false)]
			public unsafe static void Variant(int id, float[] addr)
			{
				fixed (float* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), id, ptr, GL.EntryPoints[2227]);
				}
			}

			// Token: 0x06002528 RID: 9512 RVA: 0x000653B4 File Offset: 0x000635B4
			[CLSCompliant(false)]
			public unsafe static void Variant(int id, ref float addr)
			{
				fixed (float* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.Single*), id, ptr, GL.EntryPoints[2227]);
				}
			}

			// Token: 0x06002529 RID: 9513 RVA: 0x000653D8 File Offset: 0x000635D8
			[CLSCompliant(false)]
			public unsafe static void Variant(int id, float* addr)
			{
				calli(System.Void(System.UInt32,System.Single*), id, addr, GL.EntryPoints[2227]);
			}

			// Token: 0x0600252A RID: 9514 RVA: 0x000653EC File Offset: 0x000635EC
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, float[] addr)
			{
				fixed (float* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), id, ptr, GL.EntryPoints[2227]);
				}
			}

			// Token: 0x0600252B RID: 9515 RVA: 0x00065420 File Offset: 0x00063620
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, ref float addr)
			{
				fixed (float* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.Single*), id, ptr, GL.EntryPoints[2227]);
				}
			}

			// Token: 0x0600252C RID: 9516 RVA: 0x00065444 File Offset: 0x00063644
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, float* addr)
			{
				calli(System.Void(System.UInt32,System.Single*), id, addr, GL.EntryPoints[2227]);
			}

			// Token: 0x0600252D RID: 9517 RVA: 0x00065458 File Offset: 0x00063658
			[CLSCompliant(false)]
			public unsafe static void Variant(int id, int[] addr)
			{
				fixed (int* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32*), id, ptr, GL.EntryPoints[2228]);
				}
			}

			// Token: 0x0600252E RID: 9518 RVA: 0x0006548C File Offset: 0x0006368C
			[CLSCompliant(false)]
			public unsafe static void Variant(int id, ref int addr)
			{
				fixed (int* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.Int32*), id, ptr, GL.EntryPoints[2228]);
				}
			}

			// Token: 0x0600252F RID: 9519 RVA: 0x000654B0 File Offset: 0x000636B0
			[CLSCompliant(false)]
			public unsafe static void Variant(int id, int* addr)
			{
				calli(System.Void(System.UInt32,System.Int32*), id, addr, GL.EntryPoints[2228]);
			}

			// Token: 0x06002530 RID: 9520 RVA: 0x000654C4 File Offset: 0x000636C4
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, int[] addr)
			{
				fixed (int* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32*), id, ptr, GL.EntryPoints[2228]);
				}
			}

			// Token: 0x06002531 RID: 9521 RVA: 0x000654F8 File Offset: 0x000636F8
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, ref int addr)
			{
				fixed (int* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.Int32*), id, ptr, GL.EntryPoints[2228]);
				}
			}

			// Token: 0x06002532 RID: 9522 RVA: 0x0006551C File Offset: 0x0006371C
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, int* addr)
			{
				calli(System.Void(System.UInt32,System.Int32*), id, addr, GL.EntryPoints[2228]);
			}

			// Token: 0x06002533 RID: 9523 RVA: 0x00065530 File Offset: 0x00063730
			[CLSCompliant(false)]
			public static void VariantPointer(int id, ExtVertexShader type, int stride, IntPtr addr)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.IntPtr), id, type, stride, addr, GL.EntryPoints[2229]);
			}

			// Token: 0x06002534 RID: 9524 RVA: 0x00065548 File Offset: 0x00063748
			[CLSCompliant(false)]
			public unsafe static void VariantPointer<T3>(int id, ExtVertexShader type, int stride, [In] [Out] T3[] addr) where T3 : struct
			{
				fixed (T3* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.IntPtr), id, type, stride, ptr, GL.EntryPoints[2229]);
				}
			}

			// Token: 0x06002535 RID: 9525 RVA: 0x00065580 File Offset: 0x00063780
			[CLSCompliant(false)]
			public unsafe static void VariantPointer<T3>(int id, ExtVertexShader type, int stride, [In] [Out] T3[,] addr) where T3 : struct
			{
				fixed (T3* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.IntPtr), id, type, stride, ptr, GL.EntryPoints[2229]);
				}
			}

			// Token: 0x06002536 RID: 9526 RVA: 0x000655BC File Offset: 0x000637BC
			[CLSCompliant(false)]
			public unsafe static void VariantPointer<T3>(int id, ExtVertexShader type, int stride, [In] [Out] T3[,,] addr) where T3 : struct
			{
				fixed (T3* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.IntPtr), id, type, stride, ptr, GL.EntryPoints[2229]);
				}
			}

			// Token: 0x06002537 RID: 9527 RVA: 0x000655F8 File Offset: 0x000637F8
			[CLSCompliant(false)]
			public unsafe static void VariantPointer<T3>(int id, ExtVertexShader type, int stride, [In] [Out] ref T3 addr) where T3 : struct
			{
				fixed (T3* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.IntPtr), id, type, stride, ptr, GL.EntryPoints[2229]);
				}
			}

			// Token: 0x06002538 RID: 9528 RVA: 0x0006561C File Offset: 0x0006381C
			[CLSCompliant(false)]
			public static void VariantPointer(uint id, ExtVertexShader type, uint stride, IntPtr addr)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.IntPtr), id, type, stride, addr, GL.EntryPoints[2229]);
			}

			// Token: 0x06002539 RID: 9529 RVA: 0x00065634 File Offset: 0x00063834
			[CLSCompliant(false)]
			public unsafe static void VariantPointer<T3>(uint id, ExtVertexShader type, uint stride, [In] [Out] T3[] addr) where T3 : struct
			{
				fixed (T3* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.IntPtr), id, type, stride, ptr, GL.EntryPoints[2229]);
				}
			}

			// Token: 0x0600253A RID: 9530 RVA: 0x0006566C File Offset: 0x0006386C
			[CLSCompliant(false)]
			public unsafe static void VariantPointer<T3>(uint id, ExtVertexShader type, uint stride, [In] [Out] T3[,] addr) where T3 : struct
			{
				fixed (T3* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.IntPtr), id, type, stride, ptr, GL.EntryPoints[2229]);
				}
			}

			// Token: 0x0600253B RID: 9531 RVA: 0x000656A8 File Offset: 0x000638A8
			[CLSCompliant(false)]
			public unsafe static void VariantPointer<T3>(uint id, ExtVertexShader type, uint stride, [In] [Out] T3[,,] addr) where T3 : struct
			{
				fixed (T3* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.IntPtr), id, type, stride, ptr, GL.EntryPoints[2229]);
				}
			}

			// Token: 0x0600253C RID: 9532 RVA: 0x000656E4 File Offset: 0x000638E4
			[CLSCompliant(false)]
			public unsafe static void VariantPointer<T3>(uint id, ExtVertexShader type, uint stride, [In] [Out] ref T3 addr) where T3 : struct
			{
				fixed (T3* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.IntPtr), id, type, stride, ptr, GL.EntryPoints[2229]);
				}
			}

			// Token: 0x0600253D RID: 9533 RVA: 0x00065708 File Offset: 0x00063908
			[CLSCompliant(false)]
			public unsafe static void Variant(int id, short[] addr)
			{
				fixed (short* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), id, ptr, GL.EntryPoints[2230]);
				}
			}

			// Token: 0x0600253E RID: 9534 RVA: 0x0006573C File Offset: 0x0006393C
			[CLSCompliant(false)]
			public unsafe static void Variant(int id, ref short addr)
			{
				fixed (short* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.Int16*), id, ptr, GL.EntryPoints[2230]);
				}
			}

			// Token: 0x0600253F RID: 9535 RVA: 0x00065760 File Offset: 0x00063960
			[CLSCompliant(false)]
			public unsafe static void Variant(int id, short* addr)
			{
				calli(System.Void(System.UInt32,System.Int16*), id, addr, GL.EntryPoints[2230]);
			}

			// Token: 0x06002540 RID: 9536 RVA: 0x00065774 File Offset: 0x00063974
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, short[] addr)
			{
				fixed (short* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), id, ptr, GL.EntryPoints[2230]);
				}
			}

			// Token: 0x06002541 RID: 9537 RVA: 0x000657A8 File Offset: 0x000639A8
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, ref short addr)
			{
				fixed (short* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.Int16*), id, ptr, GL.EntryPoints[2230]);
				}
			}

			// Token: 0x06002542 RID: 9538 RVA: 0x000657CC File Offset: 0x000639CC
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, short* addr)
			{
				calli(System.Void(System.UInt32,System.Int16*), id, addr, GL.EntryPoints[2230]);
			}

			// Token: 0x06002543 RID: 9539 RVA: 0x000657E0 File Offset: 0x000639E0
			[CLSCompliant(false)]
			public unsafe static void Variant(int id, byte[] addr)
			{
				fixed (byte* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Byte*), id, ptr, GL.EntryPoints[2231]);
				}
			}

			// Token: 0x06002544 RID: 9540 RVA: 0x00065814 File Offset: 0x00063A14
			[CLSCompliant(false)]
			public unsafe static void Variant(int id, ref byte addr)
			{
				fixed (byte* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.Byte*), id, ptr, GL.EntryPoints[2231]);
				}
			}

			// Token: 0x06002545 RID: 9541 RVA: 0x00065838 File Offset: 0x00063A38
			[CLSCompliant(false)]
			public unsafe static void Variant(int id, byte* addr)
			{
				calli(System.Void(System.UInt32,System.Byte*), id, addr, GL.EntryPoints[2231]);
			}

			// Token: 0x06002546 RID: 9542 RVA: 0x0006584C File Offset: 0x00063A4C
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, byte[] addr)
			{
				fixed (byte* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Byte*), id, ptr, GL.EntryPoints[2231]);
				}
			}

			// Token: 0x06002547 RID: 9543 RVA: 0x00065880 File Offset: 0x00063A80
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, ref byte addr)
			{
				fixed (byte* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.Byte*), id, ptr, GL.EntryPoints[2231]);
				}
			}

			// Token: 0x06002548 RID: 9544 RVA: 0x000658A4 File Offset: 0x00063AA4
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, byte* addr)
			{
				calli(System.Void(System.UInt32,System.Byte*), id, addr, GL.EntryPoints[2231]);
			}

			// Token: 0x06002549 RID: 9545 RVA: 0x000658B8 File Offset: 0x00063AB8
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, uint[] addr)
			{
				fixed (uint* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32*), id, ptr, GL.EntryPoints[2232]);
				}
			}

			// Token: 0x0600254A RID: 9546 RVA: 0x000658EC File Offset: 0x00063AEC
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, ref uint addr)
			{
				fixed (uint* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.UInt32*), id, ptr, GL.EntryPoints[2232]);
				}
			}

			// Token: 0x0600254B RID: 9547 RVA: 0x00065910 File Offset: 0x00063B10
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, uint* addr)
			{
				calli(System.Void(System.UInt32,System.UInt32*), id, addr, GL.EntryPoints[2232]);
			}

			// Token: 0x0600254C RID: 9548 RVA: 0x00065924 File Offset: 0x00063B24
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, ushort[] addr)
			{
				fixed (ushort* ptr = ref (addr != null && addr.Length != 0) ? ref addr[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt16*), id, ptr, GL.EntryPoints[2233]);
				}
			}

			// Token: 0x0600254D RID: 9549 RVA: 0x00065958 File Offset: 0x00063B58
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, ref ushort addr)
			{
				fixed (ushort* ptr = &addr)
				{
					calli(System.Void(System.UInt32,System.UInt16*), id, ptr, GL.EntryPoints[2233]);
				}
			}

			// Token: 0x0600254E RID: 9550 RVA: 0x0006597C File Offset: 0x00063B7C
			[CLSCompliant(false)]
			public unsafe static void Variant(uint id, ushort* addr)
			{
				calli(System.Void(System.UInt32,System.UInt16*), id, addr, GL.EntryPoints[2233]);
			}

			// Token: 0x0600254F RID: 9551 RVA: 0x00065990 File Offset: 0x00063B90
			[CLSCompliant(false)]
			public static void VertexArrayBindVertexBuffer(int vaobj, int bindingindex, int buffer, IntPtr offset, int stride)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.Int32), vaobj, bindingindex, buffer, offset, stride, GL.EntryPoints[2286]);
			}

			// Token: 0x06002550 RID: 9552 RVA: 0x000659A8 File Offset: 0x00063BA8
			[CLSCompliant(false)]
			public static void VertexArrayBindVertexBuffer(uint vaobj, uint bindingindex, uint buffer, IntPtr offset, int stride)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.Int32), vaobj, bindingindex, buffer, offset, stride, GL.EntryPoints[2286]);
			}

			// Token: 0x06002551 RID: 9553 RVA: 0x000659C0 File Offset: 0x00063BC0
			[CLSCompliant(false)]
			public static void VertexArrayColorOffset(int vaobj, int buffer, int size, ColorPointerType type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, size, type, stride, offset, GL.EntryPoints[2287]);
			}

			// Token: 0x06002552 RID: 9554 RVA: 0x000659DC File Offset: 0x00063BDC
			[CLSCompliant(false)]
			public static void VertexArrayColorOffset(uint vaobj, uint buffer, int size, ColorPointerType type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, size, type, stride, offset, GL.EntryPoints[2287]);
			}

			// Token: 0x06002553 RID: 9555 RVA: 0x000659F8 File Offset: 0x00063BF8
			[CLSCompliant(false)]
			public static void VertexArrayEdgeFlagOffset(int vaobj, int buffer, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), vaobj, buffer, stride, offset, GL.EntryPoints[2288]);
			}

			// Token: 0x06002554 RID: 9556 RVA: 0x00065A10 File Offset: 0x00063C10
			[CLSCompliant(false)]
			public static void VertexArrayEdgeFlagOffset(uint vaobj, uint buffer, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), vaobj, buffer, stride, offset, GL.EntryPoints[2288]);
			}

			// Token: 0x06002555 RID: 9557 RVA: 0x00065A28 File Offset: 0x00063C28
			[CLSCompliant(false)]
			public static void VertexArrayFogCoordOffset(int vaobj, int buffer, FogPointerType type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, type, stride, offset, GL.EntryPoints[2289]);
			}

			// Token: 0x06002556 RID: 9558 RVA: 0x00065A40 File Offset: 0x00063C40
			[CLSCompliant(false)]
			public static void VertexArrayFogCoordOffset(uint vaobj, uint buffer, FogPointerType type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, type, stride, offset, GL.EntryPoints[2289]);
			}

			// Token: 0x06002557 RID: 9559 RVA: 0x00065A58 File Offset: 0x00063C58
			[CLSCompliant(false)]
			public static void VertexArrayIndexOffset(int vaobj, int buffer, IndexPointerType type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, type, stride, offset, GL.EntryPoints[2290]);
			}

			// Token: 0x06002558 RID: 9560 RVA: 0x00065A70 File Offset: 0x00063C70
			[CLSCompliant(false)]
			public static void VertexArrayIndexOffset(uint vaobj, uint buffer, IndexPointerType type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, type, stride, offset, GL.EntryPoints[2290]);
			}

			// Token: 0x06002559 RID: 9561 RVA: 0x00065A88 File Offset: 0x00063C88
			[CLSCompliant(false)]
			public static void VertexArrayMultiTexCoordOffset(int vaobj, int buffer, ExtDirectStateAccess texunit, int size, TexCoordPointerType type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, texunit, size, type, stride, offset, GL.EntryPoints[2291]);
			}

			// Token: 0x0600255A RID: 9562 RVA: 0x00065AB0 File Offset: 0x00063CB0
			[CLSCompliant(false)]
			public static void VertexArrayMultiTexCoordOffset(uint vaobj, uint buffer, ExtDirectStateAccess texunit, int size, TexCoordPointerType type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, texunit, size, type, stride, offset, GL.EntryPoints[2291]);
			}

			// Token: 0x0600255B RID: 9563 RVA: 0x00065AD8 File Offset: 0x00063CD8
			[CLSCompliant(false)]
			public static void VertexArrayNormalOffset(int vaobj, int buffer, NormalPointerType type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, type, stride, offset, GL.EntryPoints[2292]);
			}

			// Token: 0x0600255C RID: 9564 RVA: 0x00065AF0 File Offset: 0x00063CF0
			[CLSCompliant(false)]
			public static void VertexArrayNormalOffset(uint vaobj, uint buffer, NormalPointerType type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, type, stride, offset, GL.EntryPoints[2292]);
			}

			// Token: 0x0600255D RID: 9565 RVA: 0x00065B08 File Offset: 0x00063D08
			[CLSCompliant(false)]
			public static void VertexArraySecondaryColorOffset(int vaobj, int buffer, int size, ColorPointerType type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, size, type, stride, offset, GL.EntryPoints[2296]);
			}

			// Token: 0x0600255E RID: 9566 RVA: 0x00065B24 File Offset: 0x00063D24
			[CLSCompliant(false)]
			public static void VertexArraySecondaryColorOffset(uint vaobj, uint buffer, int size, ColorPointerType type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, size, type, stride, offset, GL.EntryPoints[2296]);
			}

			// Token: 0x0600255F RID: 9567 RVA: 0x00065B40 File Offset: 0x00063D40
			[CLSCompliant(false)]
			public static void VertexArrayTexCoordOffset(int vaobj, int buffer, int size, TexCoordPointerType type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, size, type, stride, offset, GL.EntryPoints[2297]);
			}

			// Token: 0x06002560 RID: 9568 RVA: 0x00065B5C File Offset: 0x00063D5C
			[CLSCompliant(false)]
			public static void VertexArrayTexCoordOffset(uint vaobj, uint buffer, int size, TexCoordPointerType type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, size, type, stride, offset, GL.EntryPoints[2297]);
			}

			// Token: 0x06002561 RID: 9569 RVA: 0x00065B78 File Offset: 0x00063D78
			[CLSCompliant(false)]
			public static void VertexArrayVertexAttribBinding(int vaobj, int attribindex, int bindingindex)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32), vaobj, attribindex, bindingindex, GL.EntryPoints[2298]);
			}

			// Token: 0x06002562 RID: 9570 RVA: 0x00065B90 File Offset: 0x00063D90
			[CLSCompliant(false)]
			public static void VertexArrayVertexAttribBinding(uint vaobj, uint attribindex, uint bindingindex)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32), vaobj, attribindex, bindingindex, GL.EntryPoints[2298]);
			}

			// Token: 0x06002563 RID: 9571 RVA: 0x00065BA8 File Offset: 0x00063DA8
			[CLSCompliant(false)]
			public static void VertexArrayVertexAttribDivisor(int vaobj, int index, int divisor)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32), vaobj, index, divisor, GL.EntryPoints[2299]);
			}

			// Token: 0x06002564 RID: 9572 RVA: 0x00065BC0 File Offset: 0x00063DC0
			[CLSCompliant(false)]
			public static void VertexArrayVertexAttribDivisor(uint vaobj, uint index, uint divisor)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32), vaobj, index, divisor, GL.EntryPoints[2299]);
			}

			// Token: 0x06002565 RID: 9573 RVA: 0x00065BD8 File Offset: 0x00063DD8
			[CLSCompliant(false)]
			public static void VertexArrayVertexAttribFormat(int vaobj, int attribindex, int size, ExtDirectStateAccess type, bool normalized, int relativeoffset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Boolean,System.UInt32), vaobj, attribindex, size, type, normalized, relativeoffset, GL.EntryPoints[2300]);
			}

			// Token: 0x06002566 RID: 9574 RVA: 0x00065BF4 File Offset: 0x00063DF4
			[CLSCompliant(false)]
			public static void VertexArrayVertexAttribFormat(uint vaobj, uint attribindex, int size, ExtDirectStateAccess type, bool normalized, uint relativeoffset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Boolean,System.UInt32), vaobj, attribindex, size, type, normalized, relativeoffset, GL.EntryPoints[2300]);
			}

			// Token: 0x06002567 RID: 9575 RVA: 0x00065C10 File Offset: 0x00063E10
			[CLSCompliant(false)]
			public static void VertexArrayVertexAttribIFormat(int vaobj, int attribindex, int size, ExtDirectStateAccess type, int relativeoffset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32), vaobj, attribindex, size, type, relativeoffset, GL.EntryPoints[2301]);
			}

			// Token: 0x06002568 RID: 9576 RVA: 0x00065C28 File Offset: 0x00063E28
			[CLSCompliant(false)]
			public static void VertexArrayVertexAttribIFormat(uint vaobj, uint attribindex, int size, ExtDirectStateAccess type, uint relativeoffset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32), vaobj, attribindex, size, type, relativeoffset, GL.EntryPoints[2301]);
			}

			// Token: 0x06002569 RID: 9577 RVA: 0x00065C40 File Offset: 0x00063E40
			[CLSCompliant(false)]
			public static void VertexArrayVertexAttribIOffset(int vaobj, int buffer, int index, int size, ExtDirectStateAccess type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, index, size, type, stride, offset, GL.EntryPoints[2302]);
			}

			// Token: 0x0600256A RID: 9578 RVA: 0x00065C68 File Offset: 0x00063E68
			[CLSCompliant(false)]
			public static void VertexArrayVertexAttribIOffset(uint vaobj, uint buffer, uint index, int size, ExtDirectStateAccess type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, index, size, type, stride, offset, GL.EntryPoints[2302]);
			}

			// Token: 0x0600256B RID: 9579 RVA: 0x00065C90 File Offset: 0x00063E90
			[CLSCompliant(false)]
			public static void VertexArrayVertexAttribLFormat(int vaobj, int attribindex, int size, ExtDirectStateAccess type, int relativeoffset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32), vaobj, attribindex, size, type, relativeoffset, GL.EntryPoints[2303]);
			}

			// Token: 0x0600256C RID: 9580 RVA: 0x00065CA8 File Offset: 0x00063EA8
			[CLSCompliant(false)]
			public static void VertexArrayVertexAttribLFormat(uint vaobj, uint attribindex, int size, ExtDirectStateAccess type, uint relativeoffset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32), vaobj, attribindex, size, type, relativeoffset, GL.EntryPoints[2303]);
			}

			// Token: 0x0600256D RID: 9581 RVA: 0x00065CC0 File Offset: 0x00063EC0
			[CLSCompliant(false)]
			public static void VertexArrayVertexAttribLOffset(int vaobj, int buffer, int index, int size, ExtDirectStateAccess type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, index, size, type, stride, offset, GL.EntryPoints[2304]);
			}

			// Token: 0x0600256E RID: 9582 RVA: 0x00065CE8 File Offset: 0x00063EE8
			[CLSCompliant(false)]
			[Obsolete("Use ExtDirectStateAccess overload instead")]
			public static void VertexArrayVertexAttribLOffset(int vaobj, int buffer, int index, int size, ExtVertexAttrib64bit type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, index, size, type, stride, offset, GL.EntryPoints[2304]);
			}

			// Token: 0x0600256F RID: 9583 RVA: 0x00065D10 File Offset: 0x00063F10
			[CLSCompliant(false)]
			public static void VertexArrayVertexAttribLOffset(uint vaobj, uint buffer, uint index, int size, ExtDirectStateAccess type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, index, size, type, stride, offset, GL.EntryPoints[2304]);
			}

			// Token: 0x06002570 RID: 9584 RVA: 0x00065D38 File Offset: 0x00063F38
			[CLSCompliant(false)]
			[Obsolete("Use ExtDirectStateAccess overload instead")]
			public static void VertexArrayVertexAttribLOffset(uint vaobj, uint buffer, uint index, int size, ExtVertexAttrib64bit type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, index, size, type, stride, offset, GL.EntryPoints[2304]);
			}

			// Token: 0x06002571 RID: 9585 RVA: 0x00065D60 File Offset: 0x00063F60
			[CLSCompliant(false)]
			public static void VertexArrayVertexAttribOffset(int vaobj, int buffer, int index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), vaobj, buffer, index, size, type, normalized, stride, offset, GL.EntryPoints[2305]);
			}

			// Token: 0x06002572 RID: 9586 RVA: 0x00065D8C File Offset: 0x00063F8C
			[CLSCompliant(false)]
			public static void VertexArrayVertexAttribOffset(uint vaobj, uint buffer, uint index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), vaobj, buffer, index, size, type, normalized, stride, offset, GL.EntryPoints[2305]);
			}

			// Token: 0x06002573 RID: 9587 RVA: 0x00065DB8 File Offset: 0x00063FB8
			[CLSCompliant(false)]
			public static void VertexArrayVertexBindingDivisor(int vaobj, int bindingindex, int divisor)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32), vaobj, bindingindex, divisor, GL.EntryPoints[2306]);
			}

			// Token: 0x06002574 RID: 9588 RVA: 0x00065DD0 File Offset: 0x00063FD0
			[CLSCompliant(false)]
			public static void VertexArrayVertexBindingDivisor(uint vaobj, uint bindingindex, uint divisor)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32), vaobj, bindingindex, divisor, GL.EntryPoints[2306]);
			}

			// Token: 0x06002575 RID: 9589 RVA: 0x00065DE8 File Offset: 0x00063FE8
			[CLSCompliant(false)]
			public static void VertexArrayVertexOffset(int vaobj, int buffer, int size, VertexPointerType type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, size, type, stride, offset, GL.EntryPoints[2307]);
			}

			// Token: 0x06002576 RID: 9590 RVA: 0x00065E04 File Offset: 0x00064004
			[CLSCompliant(false)]
			public static void VertexArrayVertexOffset(uint vaobj, uint buffer, int size, VertexPointerType type, int stride, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), vaobj, buffer, size, type, stride, offset, GL.EntryPoints[2307]);
			}

			// Token: 0x06002577 RID: 9591 RVA: 0x00065E20 File Offset: 0x00064020
			[CLSCompliant(false)]
			public static void VertexAttribI1(int index, int x)
			{
				calli(System.Void(System.UInt32,System.Int32), index, x, GL.EntryPoints[2421]);
			}

			// Token: 0x06002578 RID: 9592 RVA: 0x00065E34 File Offset: 0x00064034
			[CLSCompliant(false)]
			public static void VertexAttribI1(uint index, int x)
			{
				calli(System.Void(System.UInt32,System.Int32), index, x, GL.EntryPoints[2421]);
			}

			// Token: 0x06002579 RID: 9593 RVA: 0x00065E48 File Offset: 0x00064048
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI1(int index, int* v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2423]);
			}

			// Token: 0x0600257A RID: 9594 RVA: 0x00065E5C File Offset: 0x0006405C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI1(uint index, int* v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2423]);
			}

			// Token: 0x0600257B RID: 9595 RVA: 0x00065E70 File Offset: 0x00064070
			[CLSCompliant(false)]
			public static void VertexAttribI1(uint index, uint x)
			{
				calli(System.Void(System.UInt32,System.UInt32), index, x, GL.EntryPoints[2425]);
			}

			// Token: 0x0600257C RID: 9596 RVA: 0x00065E84 File Offset: 0x00064084
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI1(uint index, uint* v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[2427]);
			}

			// Token: 0x0600257D RID: 9597 RVA: 0x00065E98 File Offset: 0x00064098
			[CLSCompliant(false)]
			public static void VertexAttribI2(int index, int x, int y)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), index, x, y, GL.EntryPoints[2429]);
			}

			// Token: 0x0600257E RID: 9598 RVA: 0x00065EB0 File Offset: 0x000640B0
			[CLSCompliant(false)]
			public static void VertexAttribI2(uint index, int x, int y)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), index, x, y, GL.EntryPoints[2429]);
			}

			// Token: 0x0600257F RID: 9599 RVA: 0x00065EC8 File Offset: 0x000640C8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI2(int index, int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2431]);
				}
			}

			// Token: 0x06002580 RID: 9600 RVA: 0x00065EFC File Offset: 0x000640FC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI2(int index, ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2431]);
				}
			}

			// Token: 0x06002581 RID: 9601 RVA: 0x00065F20 File Offset: 0x00064120
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI2(int index, int* v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2431]);
			}

			// Token: 0x06002582 RID: 9602 RVA: 0x00065F34 File Offset: 0x00064134
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI2(uint index, int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2431]);
				}
			}

			// Token: 0x06002583 RID: 9603 RVA: 0x00065F68 File Offset: 0x00064168
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI2(uint index, ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2431]);
				}
			}

			// Token: 0x06002584 RID: 9604 RVA: 0x00065F8C File Offset: 0x0006418C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI2(uint index, int* v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2431]);
			}

			// Token: 0x06002585 RID: 9605 RVA: 0x00065FA0 File Offset: 0x000641A0
			[CLSCompliant(false)]
			public static void VertexAttribI2(uint index, uint x, uint y)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32), index, x, y, GL.EntryPoints[2433]);
			}

			// Token: 0x06002586 RID: 9606 RVA: 0x00065FB8 File Offset: 0x000641B8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI2(uint index, uint[] v)
			{
				fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2435]);
				}
			}

			// Token: 0x06002587 RID: 9607 RVA: 0x00065FEC File Offset: 0x000641EC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI2(uint index, ref uint v)
			{
				fixed (uint* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2435]);
				}
			}

			// Token: 0x06002588 RID: 9608 RVA: 0x00066010 File Offset: 0x00064210
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI2(uint index, uint* v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[2435]);
			}

			// Token: 0x06002589 RID: 9609 RVA: 0x00066024 File Offset: 0x00064224
			[CLSCompliant(false)]
			public static void VertexAttribI3(int index, int x, int y, int z)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), index, x, y, z, GL.EntryPoints[2437]);
			}

			// Token: 0x0600258A RID: 9610 RVA: 0x0006603C File Offset: 0x0006423C
			[CLSCompliant(false)]
			public static void VertexAttribI3(uint index, int x, int y, int z)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), index, x, y, z, GL.EntryPoints[2437]);
			}

			// Token: 0x0600258B RID: 9611 RVA: 0x00066054 File Offset: 0x00064254
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI3(int index, int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2439]);
				}
			}

			// Token: 0x0600258C RID: 9612 RVA: 0x00066088 File Offset: 0x00064288
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI3(int index, ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2439]);
				}
			}

			// Token: 0x0600258D RID: 9613 RVA: 0x000660AC File Offset: 0x000642AC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI3(int index, int* v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2439]);
			}

			// Token: 0x0600258E RID: 9614 RVA: 0x000660C0 File Offset: 0x000642C0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI3(uint index, int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2439]);
				}
			}

			// Token: 0x0600258F RID: 9615 RVA: 0x000660F4 File Offset: 0x000642F4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI3(uint index, ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2439]);
				}
			}

			// Token: 0x06002590 RID: 9616 RVA: 0x00066118 File Offset: 0x00064318
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI3(uint index, int* v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2439]);
			}

			// Token: 0x06002591 RID: 9617 RVA: 0x0006612C File Offset: 0x0006432C
			[CLSCompliant(false)]
			public static void VertexAttribI3(uint index, uint x, uint y, uint z)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.UInt32), index, x, y, z, GL.EntryPoints[2441]);
			}

			// Token: 0x06002592 RID: 9618 RVA: 0x00066144 File Offset: 0x00064344
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI3(uint index, uint[] v)
			{
				fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2443]);
				}
			}

			// Token: 0x06002593 RID: 9619 RVA: 0x00066178 File Offset: 0x00064378
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI3(uint index, ref uint v)
			{
				fixed (uint* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2443]);
				}
			}

			// Token: 0x06002594 RID: 9620 RVA: 0x0006619C File Offset: 0x0006439C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI3(uint index, uint* v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[2443]);
			}

			// Token: 0x06002595 RID: 9621 RVA: 0x000661B0 File Offset: 0x000643B0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, sbyte[] v)
			{
				fixed (sbyte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[2445]);
				}
			}

			// Token: 0x06002596 RID: 9622 RVA: 0x000661E4 File Offset: 0x000643E4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, ref sbyte v)
			{
				fixed (sbyte* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.SByte*), index, ptr, GL.EntryPoints[2445]);
				}
			}

			// Token: 0x06002597 RID: 9623 RVA: 0x00066208 File Offset: 0x00064408
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, sbyte* v)
			{
				calli(System.Void(System.UInt32,System.SByte*), index, v, GL.EntryPoints[2445]);
			}

			// Token: 0x06002598 RID: 9624 RVA: 0x0006621C File Offset: 0x0006441C
			[CLSCompliant(false)]
			public static void VertexAttribI4(int index, int x, int y, int z, int w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), index, x, y, z, w, GL.EntryPoints[2447]);
			}

			// Token: 0x06002599 RID: 9625 RVA: 0x00066234 File Offset: 0x00064434
			[CLSCompliant(false)]
			public static void VertexAttribI4(uint index, int x, int y, int z, int w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), index, x, y, z, w, GL.EntryPoints[2447]);
			}

			// Token: 0x0600259A RID: 9626 RVA: 0x0006624C File Offset: 0x0006444C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(int index, int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2449]);
				}
			}

			// Token: 0x0600259B RID: 9627 RVA: 0x00066280 File Offset: 0x00064480
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(int index, ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2449]);
				}
			}

			// Token: 0x0600259C RID: 9628 RVA: 0x000662A4 File Offset: 0x000644A4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(int index, int* v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2449]);
			}

			// Token: 0x0600259D RID: 9629 RVA: 0x000662B8 File Offset: 0x000644B8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2449]);
				}
			}

			// Token: 0x0600259E RID: 9630 RVA: 0x000662EC File Offset: 0x000644EC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[2449]);
				}
			}

			// Token: 0x0600259F RID: 9631 RVA: 0x00066310 File Offset: 0x00064510
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, int* v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[2449]);
			}

			// Token: 0x060025A0 RID: 9632 RVA: 0x00066324 File Offset: 0x00064524
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(int index, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2451]);
				}
			}

			// Token: 0x060025A1 RID: 9633 RVA: 0x00066358 File Offset: 0x00064558
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(int index, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2451]);
				}
			}

			// Token: 0x060025A2 RID: 9634 RVA: 0x0006637C File Offset: 0x0006457C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(int index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2451]);
			}

			// Token: 0x060025A3 RID: 9635 RVA: 0x00066390 File Offset: 0x00064590
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2451]);
				}
			}

			// Token: 0x060025A4 RID: 9636 RVA: 0x000663C4 File Offset: 0x000645C4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2451]);
				}
			}

			// Token: 0x060025A5 RID: 9637 RVA: 0x000663E8 File Offset: 0x000645E8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2451]);
			}

			// Token: 0x060025A6 RID: 9638 RVA: 0x000663FC File Offset: 0x000645FC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(int index, byte[] v)
			{
				fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2453]);
				}
			}

			// Token: 0x060025A7 RID: 9639 RVA: 0x00066430 File Offset: 0x00064630
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(int index, ref byte v)
			{
				fixed (byte* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2453]);
				}
			}

			// Token: 0x060025A8 RID: 9640 RVA: 0x00066454 File Offset: 0x00064654
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(int index, byte* v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[2453]);
			}

			// Token: 0x060025A9 RID: 9641 RVA: 0x00066468 File Offset: 0x00064668
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, byte[] v)
			{
				fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2453]);
				}
			}

			// Token: 0x060025AA RID: 9642 RVA: 0x0006649C File Offset: 0x0006469C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, ref byte v)
			{
				fixed (byte* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2453]);
				}
			}

			// Token: 0x060025AB RID: 9643 RVA: 0x000664C0 File Offset: 0x000646C0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, byte* v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[2453]);
			}

			// Token: 0x060025AC RID: 9644 RVA: 0x000664D4 File Offset: 0x000646D4
			[CLSCompliant(false)]
			public static void VertexAttribI4(uint index, uint x, uint y, uint z, uint w)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), index, x, y, z, w, GL.EntryPoints[2455]);
			}

			// Token: 0x060025AD RID: 9645 RVA: 0x000664EC File Offset: 0x000646EC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, uint[] v)
			{
				fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2457]);
				}
			}

			// Token: 0x060025AE RID: 9646 RVA: 0x00066520 File Offset: 0x00064720
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, ref uint v)
			{
				fixed (uint* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[2457]);
				}
			}

			// Token: 0x060025AF RID: 9647 RVA: 0x00066544 File Offset: 0x00064744
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, uint* v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[2457]);
			}

			// Token: 0x060025B0 RID: 9648 RVA: 0x00066558 File Offset: 0x00064758
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, ushort[] v)
			{
				fixed (ushort* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[2459]);
				}
			}

			// Token: 0x060025B1 RID: 9649 RVA: 0x0006658C File Offset: 0x0006478C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, ref ushort v)
			{
				fixed (ushort* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.UInt16*), index, ptr, GL.EntryPoints[2459]);
				}
			}

			// Token: 0x060025B2 RID: 9650 RVA: 0x000665B0 File Offset: 0x000647B0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribI4(uint index, ushort* v)
			{
				calli(System.Void(System.UInt32,System.UInt16*), index, v, GL.EntryPoints[2459]);
			}

			// Token: 0x060025B3 RID: 9651 RVA: 0x000665C4 File Offset: 0x000647C4
			[CLSCompliant(false)]
			public static void VertexAttribIPointer(int index, int size, NvVertexProgram4 type, int stride, IntPtr pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[2463]);
			}

			// Token: 0x060025B4 RID: 9652 RVA: 0x000665DC File Offset: 0x000647DC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribIPointer<T4>(int index, int size, NvVertexProgram4 type, int stride, [In] [Out] T4[] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2463]);
				}
			}

			// Token: 0x060025B5 RID: 9653 RVA: 0x00066618 File Offset: 0x00064818
			[CLSCompliant(false)]
			public unsafe static void VertexAttribIPointer<T4>(int index, int size, NvVertexProgram4 type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2463]);
				}
			}

			// Token: 0x060025B6 RID: 9654 RVA: 0x00066658 File Offset: 0x00064858
			[CLSCompliant(false)]
			public unsafe static void VertexAttribIPointer<T4>(int index, int size, NvVertexProgram4 type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2463]);
				}
			}

			// Token: 0x060025B7 RID: 9655 RVA: 0x00066698 File Offset: 0x00064898
			[CLSCompliant(false)]
			public unsafe static void VertexAttribIPointer<T4>(int index, int size, NvVertexProgram4 type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
			{
				fixed (T4* ptr = &pointer)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2463]);
				}
			}

			// Token: 0x060025B8 RID: 9656 RVA: 0x000666C0 File Offset: 0x000648C0
			[CLSCompliant(false)]
			public static void VertexAttribIPointer(uint index, int size, NvVertexProgram4 type, int stride, IntPtr pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[2463]);
			}

			// Token: 0x060025B9 RID: 9657 RVA: 0x000666D8 File Offset: 0x000648D8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribIPointer<T4>(uint index, int size, NvVertexProgram4 type, int stride, [In] [Out] T4[] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2463]);
				}
			}

			// Token: 0x060025BA RID: 9658 RVA: 0x00066714 File Offset: 0x00064914
			[CLSCompliant(false)]
			public unsafe static void VertexAttribIPointer<T4>(uint index, int size, NvVertexProgram4 type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2463]);
				}
			}

			// Token: 0x060025BB RID: 9659 RVA: 0x00066754 File Offset: 0x00064954
			[CLSCompliant(false)]
			public unsafe static void VertexAttribIPointer<T4>(uint index, int size, NvVertexProgram4 type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2463]);
				}
			}

			// Token: 0x060025BC RID: 9660 RVA: 0x00066794 File Offset: 0x00064994
			[CLSCompliant(false)]
			public unsafe static void VertexAttribIPointer<T4>(uint index, int size, NvVertexProgram4 type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
			{
				fixed (T4* ptr = &pointer)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2463]);
				}
			}

			// Token: 0x060025BD RID: 9661 RVA: 0x000667BC File Offset: 0x000649BC
			[CLSCompliant(false)]
			public static void VertexAttribL1(int index, double x)
			{
				calli(System.Void(System.UInt32,System.Double), index, x, GL.EntryPoints[2465]);
			}

			// Token: 0x060025BE RID: 9662 RVA: 0x000667D0 File Offset: 0x000649D0
			[CLSCompliant(false)]
			public static void VertexAttribL1(uint index, double x)
			{
				calli(System.Void(System.UInt32,System.Double), index, x, GL.EntryPoints[2465]);
			}

			// Token: 0x060025BF RID: 9663 RVA: 0x000667E4 File Offset: 0x000649E4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL1(int index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2467]);
			}

			// Token: 0x060025C0 RID: 9664 RVA: 0x000667F8 File Offset: 0x000649F8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL1(uint index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2467]);
			}

			// Token: 0x060025C1 RID: 9665 RVA: 0x0006680C File Offset: 0x00064A0C
			[CLSCompliant(false)]
			public static void VertexAttribL2(int index, double x, double y)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double), index, x, y, GL.EntryPoints[2475]);
			}

			// Token: 0x060025C2 RID: 9666 RVA: 0x00066824 File Offset: 0x00064A24
			[CLSCompliant(false)]
			public static void VertexAttribL2(uint index, double x, double y)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double), index, x, y, GL.EntryPoints[2475]);
			}

			// Token: 0x060025C3 RID: 9667 RVA: 0x0006683C File Offset: 0x00064A3C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL2(int index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2477]);
				}
			}

			// Token: 0x060025C4 RID: 9668 RVA: 0x00066870 File Offset: 0x00064A70
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL2(int index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2477]);
				}
			}

			// Token: 0x060025C5 RID: 9669 RVA: 0x00066894 File Offset: 0x00064A94
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL2(int index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2477]);
			}

			// Token: 0x060025C6 RID: 9670 RVA: 0x000668A8 File Offset: 0x00064AA8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL2(uint index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2477]);
				}
			}

			// Token: 0x060025C7 RID: 9671 RVA: 0x000668DC File Offset: 0x00064ADC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL2(uint index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2477]);
				}
			}

			// Token: 0x060025C8 RID: 9672 RVA: 0x00066900 File Offset: 0x00064B00
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL2(uint index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2477]);
			}

			// Token: 0x060025C9 RID: 9673 RVA: 0x00066914 File Offset: 0x00064B14
			[CLSCompliant(false)]
			public static void VertexAttribL3(int index, double x, double y, double z)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double,System.Double), index, x, y, z, GL.EntryPoints[2483]);
			}

			// Token: 0x060025CA RID: 9674 RVA: 0x0006692C File Offset: 0x00064B2C
			[CLSCompliant(false)]
			public static void VertexAttribL3(uint index, double x, double y, double z)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double,System.Double), index, x, y, z, GL.EntryPoints[2483]);
			}

			// Token: 0x060025CB RID: 9675 RVA: 0x00066944 File Offset: 0x00064B44
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL3(int index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2485]);
				}
			}

			// Token: 0x060025CC RID: 9676 RVA: 0x00066978 File Offset: 0x00064B78
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL3(int index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2485]);
				}
			}

			// Token: 0x060025CD RID: 9677 RVA: 0x0006699C File Offset: 0x00064B9C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL3(int index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2485]);
			}

			// Token: 0x060025CE RID: 9678 RVA: 0x000669B0 File Offset: 0x00064BB0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL3(uint index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2485]);
				}
			}

			// Token: 0x060025CF RID: 9679 RVA: 0x000669E4 File Offset: 0x00064BE4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL3(uint index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2485]);
				}
			}

			// Token: 0x060025D0 RID: 9680 RVA: 0x00066A08 File Offset: 0x00064C08
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL3(uint index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2485]);
			}

			// Token: 0x060025D1 RID: 9681 RVA: 0x00066A1C File Offset: 0x00064C1C
			[CLSCompliant(false)]
			public static void VertexAttribL4(int index, double x, double y, double z, double w)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double,System.Double,System.Double), index, x, y, z, w, GL.EntryPoints[2491]);
			}

			// Token: 0x060025D2 RID: 9682 RVA: 0x00066A34 File Offset: 0x00064C34
			[CLSCompliant(false)]
			public static void VertexAttribL4(uint index, double x, double y, double z, double w)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double,System.Double,System.Double), index, x, y, z, w, GL.EntryPoints[2491]);
			}

			// Token: 0x060025D3 RID: 9683 RVA: 0x00066A4C File Offset: 0x00064C4C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL4(int index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2493]);
				}
			}

			// Token: 0x060025D4 RID: 9684 RVA: 0x00066A80 File Offset: 0x00064C80
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL4(int index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2493]);
				}
			}

			// Token: 0x060025D5 RID: 9685 RVA: 0x00066AA4 File Offset: 0x00064CA4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL4(int index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2493]);
			}

			// Token: 0x060025D6 RID: 9686 RVA: 0x00066AB8 File Offset: 0x00064CB8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL4(uint index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2493]);
				}
			}

			// Token: 0x060025D7 RID: 9687 RVA: 0x00066AEC File Offset: 0x00064CEC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL4(uint index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2493]);
				}
			}

			// Token: 0x060025D8 RID: 9688 RVA: 0x00066B10 File Offset: 0x00064D10
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL4(uint index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2493]);
			}

			// Token: 0x060025D9 RID: 9689 RVA: 0x00066B24 File Offset: 0x00064D24
			[CLSCompliant(false)]
			public static void VertexAttribLPointer(int index, int size, ExtVertexAttrib64bit type, int stride, IntPtr pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[2501]);
			}

			// Token: 0x060025DA RID: 9690 RVA: 0x00066B3C File Offset: 0x00064D3C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribLPointer<T4>(int index, int size, ExtVertexAttrib64bit type, int stride, [In] [Out] T4[] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2501]);
				}
			}

			// Token: 0x060025DB RID: 9691 RVA: 0x00066B78 File Offset: 0x00064D78
			[CLSCompliant(false)]
			public unsafe static void VertexAttribLPointer<T4>(int index, int size, ExtVertexAttrib64bit type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2501]);
				}
			}

			// Token: 0x060025DC RID: 9692 RVA: 0x00066BB8 File Offset: 0x00064DB8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribLPointer<T4>(int index, int size, ExtVertexAttrib64bit type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2501]);
				}
			}

			// Token: 0x060025DD RID: 9693 RVA: 0x00066BF8 File Offset: 0x00064DF8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribLPointer<T4>(int index, int size, ExtVertexAttrib64bit type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
			{
				fixed (T4* ptr = &pointer)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2501]);
				}
			}

			// Token: 0x060025DE RID: 9694 RVA: 0x00066C20 File Offset: 0x00064E20
			[CLSCompliant(false)]
			public static void VertexAttribLPointer(uint index, int size, ExtVertexAttrib64bit type, int stride, IntPtr pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[2501]);
			}

			// Token: 0x060025DF RID: 9695 RVA: 0x00066C38 File Offset: 0x00064E38
			[CLSCompliant(false)]
			public unsafe static void VertexAttribLPointer<T4>(uint index, int size, ExtVertexAttrib64bit type, int stride, [In] [Out] T4[] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2501]);
				}
			}

			// Token: 0x060025E0 RID: 9696 RVA: 0x00066C74 File Offset: 0x00064E74
			[CLSCompliant(false)]
			public unsafe static void VertexAttribLPointer<T4>(uint index, int size, ExtVertexAttrib64bit type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2501]);
				}
			}

			// Token: 0x060025E1 RID: 9697 RVA: 0x00066CB4 File Offset: 0x00064EB4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribLPointer<T4>(uint index, int size, ExtVertexAttrib64bit type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2501]);
				}
			}

			// Token: 0x060025E2 RID: 9698 RVA: 0x00066CF4 File Offset: 0x00064EF4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribLPointer<T4>(uint index, int size, ExtVertexAttrib64bit type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
			{
				fixed (T4* ptr = &pointer)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[2501]);
				}
			}

			// Token: 0x060025E3 RID: 9699 RVA: 0x00066D1C File Offset: 0x00064F1C
			public static void VertexPointer(int size, VertexPointerType type, int stride, int count, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, count, pointer, GL.EntryPoints[2543]);
			}

			// Token: 0x060025E4 RID: 9700 RVA: 0x00066D34 File Offset: 0x00064F34
			[CLSCompliant(false)]
			public unsafe static void VertexPointer<T4>(int size, VertexPointerType type, int stride, int count, [In] [Out] T4[] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, count, ptr, GL.EntryPoints[2543]);
				}
			}

			// Token: 0x060025E5 RID: 9701 RVA: 0x00066D70 File Offset: 0x00064F70
			[CLSCompliant(false)]
			public unsafe static void VertexPointer<T4>(int size, VertexPointerType type, int stride, int count, [In] [Out] T4[,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, count, ptr, GL.EntryPoints[2543]);
				}
			}

			// Token: 0x060025E6 RID: 9702 RVA: 0x00066DB0 File Offset: 0x00064FB0
			[CLSCompliant(false)]
			public unsafe static void VertexPointer<T4>(int size, VertexPointerType type, int stride, int count, [In] [Out] T4[,,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, count, ptr, GL.EntryPoints[2543]);
				}
			}

			// Token: 0x060025E7 RID: 9703 RVA: 0x00066DF0 File Offset: 0x00064FF0
			public unsafe static void VertexPointer<T4>(int size, VertexPointerType type, int stride, int count, [In] [Out] ref T4 pointer) where T4 : struct
			{
				fixed (T4* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, count, ptr, GL.EntryPoints[2543]);
				}
			}

			// Token: 0x060025E8 RID: 9704 RVA: 0x00066E18 File Offset: 0x00065018
			public static void VertexWeight(float weight)
			{
				calli(System.Void(System.Single), weight, GL.EntryPoints[2578]);
			}

			// Token: 0x060025E9 RID: 9705 RVA: 0x00066E2C File Offset: 0x0006502C
			[CLSCompliant(false)]
			public unsafe static void VertexWeight(float* weight)
			{
				calli(System.Void(System.Single*), weight, GL.EntryPoints[2579]);
			}

			// Token: 0x060025EA RID: 9706 RVA: 0x00066E40 File Offset: 0x00065040
			public static void VertexWeightPointer(int size, ExtVertexWeighting type, int stride, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, pointer, GL.EntryPoints[2582]);
			}

			// Token: 0x060025EB RID: 9707 RVA: 0x00066E58 File Offset: 0x00065058
			[CLSCompliant(false)]
			public unsafe static void VertexWeightPointer<T3>(int size, ExtVertexWeighting type, int stride, [In] [Out] T3[] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[2582]);
				}
			}

			// Token: 0x060025EC RID: 9708 RVA: 0x00066E90 File Offset: 0x00065090
			[CLSCompliant(false)]
			public unsafe static void VertexWeightPointer<T3>(int size, ExtVertexWeighting type, int stride, [In] [Out] T3[,] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[2582]);
				}
			}

			// Token: 0x060025ED RID: 9709 RVA: 0x00066ECC File Offset: 0x000650CC
			[CLSCompliant(false)]
			public unsafe static void VertexWeightPointer<T3>(int size, ExtVertexWeighting type, int stride, [In] [Out] T3[,,] pointer) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[2582]);
				}
			}

			// Token: 0x060025EE RID: 9710 RVA: 0x00066F08 File Offset: 0x00065108
			public unsafe static void VertexWeightPointer<T3>(int size, ExtVertexWeighting type, int stride, [In] [Out] ref T3 pointer) where T3 : struct
			{
				fixed (T3* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), size, type, stride, ptr, GL.EntryPoints[2582]);
				}
			}

			// Token: 0x060025EF RID: 9711 RVA: 0x00066F2C File Offset: 0x0006512C
			[CLSCompliant(false)]
			public static void WriteMask(int res, int @in, ExtVertexShader outX, ExtVertexShader outY, ExtVertexShader outZ, ExtVertexShader outW)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), res, @in, outX, outY, outZ, outW, GL.EntryPoints[2658]);
			}

			// Token: 0x060025F0 RID: 9712 RVA: 0x00066F48 File Offset: 0x00065148
			[CLSCompliant(false)]
			public static void WriteMask(uint res, uint @in, ExtVertexShader outX, ExtVertexShader outY, ExtVertexShader outZ, ExtVertexShader outW)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), res, @in, outX, outY, outZ, outW, GL.EntryPoints[2658]);
			}

			// Token: 0x060025F1 RID: 9713 RVA: 0x00066F64 File Offset: 0x00065164
			[Obsolete("Use ClearNamedBufferSubData(..., format, type, data) instead.")]
			public static void ClearNamedBufferSubData(int buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, IntPtr offset, IntPtr size, IntPtr data)
			{
				GL.Ext.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);
			}

			// Token: 0x060025F2 RID: 9714 RVA: 0x00066F78 File Offset: 0x00065178
			[CLSCompliant(false)]
			[Obsolete("Use ClearNamedBufferSubData(..., format, type, data) instead.")]
			public static void ClearNamedBufferSubData<T6>(int buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, IntPtr offset, IntPtr size, [In] [Out] T6[] data) where T6 : struct
			{
				GL.Ext.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);
			}

			// Token: 0x060025F3 RID: 9715 RVA: 0x00066F8C File Offset: 0x0006518C
			[CLSCompliant(false)]
			[Obsolete("Use ClearNamedBufferSubData(..., format, type, data) instead.")]
			public static void ClearNamedBufferSubData<T6>(int buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, IntPtr offset, IntPtr size, [In] [Out] T6[,] data) where T6 : struct
			{
				GL.Ext.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);
			}

			// Token: 0x060025F4 RID: 9716 RVA: 0x00066FA0 File Offset: 0x000651A0
			[Obsolete("Use ClearNamedBufferSubData(..., format, type, data) instead.")]
			[CLSCompliant(false)]
			public static void ClearNamedBufferSubData<T6>(int buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, IntPtr offset, IntPtr size, [In] [Out] T6[,,] data) where T6 : struct
			{
				GL.Ext.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);
			}

			// Token: 0x060025F5 RID: 9717 RVA: 0x00066FB4 File Offset: 0x000651B4
			[Obsolete("Use ClearNamedBufferSubData(..., format, type, data) instead.")]
			[CLSCompliant(false)]
			public static void ClearNamedBufferSubData<T6>(int buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, IntPtr offset, IntPtr size, [In] [Out] ref T6 data) where T6 : struct
			{
				GL.Ext.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, ref data);
			}

			// Token: 0x060025F6 RID: 9718 RVA: 0x00066FC8 File Offset: 0x000651C8
			[CLSCompliant(false)]
			[Obsolete("Use ClearNamedBufferSubData(..., format, type, data) instead.")]
			public static void ClearNamedBufferSubData(uint buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, IntPtr offset, IntPtr size, IntPtr data)
			{
				GL.Ext.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);
			}

			// Token: 0x060025F7 RID: 9719 RVA: 0x00066FDC File Offset: 0x000651DC
			[CLSCompliant(false)]
			[Obsolete("Use ClearNamedBufferSubData(..., format, type, data) instead.")]
			public static void ClearNamedBufferSubData<T6>(uint buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, IntPtr offset, IntPtr size, [In] [Out] T6[] data) where T6 : struct
			{
				GL.Ext.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);
			}

			// Token: 0x060025F8 RID: 9720 RVA: 0x00066FF0 File Offset: 0x000651F0
			[Obsolete("Use ClearNamedBufferSubData(..., format, type, data) instead.")]
			[CLSCompliant(false)]
			public static void ClearNamedBufferSubData<T6>(uint buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, IntPtr offset, IntPtr size, [In] [Out] T6[,] data) where T6 : struct
			{
				GL.Ext.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);
			}

			// Token: 0x060025F9 RID: 9721 RVA: 0x00067004 File Offset: 0x00065204
			[Obsolete("Use ClearNamedBufferSubData(..., format, type, data) instead.")]
			[CLSCompliant(false)]
			public static void ClearNamedBufferSubData<T6>(uint buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, IntPtr offset, IntPtr size, [In] [Out] T6[,,] data) where T6 : struct
			{
				GL.Ext.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);
			}

			// Token: 0x060025FA RID: 9722 RVA: 0x00067018 File Offset: 0x00065218
			[CLSCompliant(false)]
			[Obsolete("Use ClearNamedBufferSubData(..., format, type, data) instead.")]
			public static void ClearNamedBufferSubData<T6>(uint buffer, ExtDirectStateAccess internalformat, PixelFormat format, PixelType type, IntPtr offset, IntPtr size, [In] [Out] ref T6 data) where T6 : struct
			{
				GL.Ext.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, ref data);
			}

			// Token: 0x060025FB RID: 9723 RVA: 0x0006702C File Offset: 0x0006522C
			[Obsolete("Use ProgramParameter(..., AssemblyProgramParameterArb, ...) instead.")]
			public static void ProgramParameter(int program, ExtGeometryShader4 pname, int value)
			{
				GL.Ext.ProgramParameter(program, (AssemblyProgramParameterArb)pname, value);
			}

			// Token: 0x060025FC RID: 9724 RVA: 0x00067038 File Offset: 0x00065238
			[CLSCompliant(false)]
			[Obsolete("Use ProgramParameter(..., AssemblyProgramParameterArb, ...) instead.")]
			public static void ProgramParameter(uint program, ExtGeometryShader4 pname, int value)
			{
				GL.Ext.ProgramParameter(program, (AssemblyProgramParameterArb)pname, value);
			}

			// Token: 0x060025FD RID: 9725 RVA: 0x00067044 File Offset: 0x00065244
			[Obsolete("Use GetQueryObject overload instead")]
			public unsafe static void GetQueryObjecti64(int id, ExtTimerQuery pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[906]);
				}
			}

			// Token: 0x060025FE RID: 9726 RVA: 0x0006707C File Offset: 0x0006527C
			[Obsolete("Use GetQueryObject overload instead")]
			public unsafe static void GetQueryObjecti64(int id, ExtTimerQuery pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[906]);
				}
			}

			// Token: 0x060025FF RID: 9727 RVA: 0x000670A0 File Offset: 0x000652A0
			[CLSCompliant(false)]
			[Obsolete("Use GetQueryObject overload instead")]
			public unsafe static void GetQueryObjecti64(int id, ExtTimerQuery pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, @params, GL.EntryPoints[906]);
			}

			// Token: 0x06002600 RID: 9728 RVA: 0x000670B8 File Offset: 0x000652B8
			[CLSCompliant(false)]
			[Obsolete("Use GetQueryObject overload instead")]
			public unsafe static void GetQueryObjecti64(uint id, ExtTimerQuery pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[906]);
				}
			}

			// Token: 0x06002601 RID: 9729 RVA: 0x000670F0 File Offset: 0x000652F0
			[Obsolete("Use GetQueryObject overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetQueryObjecti64(uint id, ExtTimerQuery pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[906]);
				}
			}

			// Token: 0x06002602 RID: 9730 RVA: 0x00067114 File Offset: 0x00065314
			[CLSCompliant(false)]
			[Obsolete("Use GetQueryObject overload instead")]
			public unsafe static void GetQueryObjecti64(uint id, ExtTimerQuery pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, @params, GL.EntryPoints[906]);
			}

			// Token: 0x06002603 RID: 9731 RVA: 0x0006712C File Offset: 0x0006532C
			[Obsolete("Use GetQueryObject overload instead")]
			public unsafe static void GetQueryObjectui64(int id, ExtTimerQuery pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, ptr, GL.EntryPoints[910]);
				}
			}

			// Token: 0x06002604 RID: 9732 RVA: 0x00067164 File Offset: 0x00065364
			[Obsolete("Use GetQueryObject overload instead")]
			public unsafe static void GetQueryObjectui64(int id, ExtTimerQuery pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, ptr, GL.EntryPoints[910]);
				}
			}

			// Token: 0x06002605 RID: 9733 RVA: 0x00067188 File Offset: 0x00065388
			[CLSCompliant(false)]
			[Obsolete("Use GetQueryObject overload instead")]
			public unsafe static void GetQueryObjectui64(int id, ExtTimerQuery pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, @params, GL.EntryPoints[910]);
			}

			// Token: 0x06002606 RID: 9734 RVA: 0x000671A0 File Offset: 0x000653A0
			[CLSCompliant(false)]
			[Obsolete("Use GetQueryObject overload instead")]
			public unsafe static void GetQueryObjectui64(uint id, ExtTimerQuery pname, [Out] ulong[] @params)
			{
				fixed (ulong* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, ptr, GL.EntryPoints[910]);
				}
			}

			// Token: 0x06002607 RID: 9735 RVA: 0x000671D8 File Offset: 0x000653D8
			[CLSCompliant(false)]
			[Obsolete("Use GetQueryObject overload instead")]
			public unsafe static void GetQueryObjectui64(uint id, ExtTimerQuery pname, out ulong @params)
			{
				fixed (ulong* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, ptr, GL.EntryPoints[910]);
				}
			}

			// Token: 0x06002608 RID: 9736 RVA: 0x000671FC File Offset: 0x000653FC
			[CLSCompliant(false)]
			[Obsolete("Use GetQueryObject overload instead")]
			public unsafe static void GetQueryObjectui64(uint id, ExtTimerQuery pname, [Out] ulong* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, @params, GL.EntryPoints[910]);
			}

			// Token: 0x06002609 RID: 9737 RVA: 0x00067214 File Offset: 0x00065414
			[Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
			public static void GetSeparableFilter(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In] [Out] IntPtr span)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, column, span, GL.EntryPoints[920]);
			}

			// Token: 0x0600260A RID: 9738 RVA: 0x00067230 File Offset: 0x00065430
			[Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
			public unsafe static void GetSeparableFilter<T4, T5, T6>(ExtConvolution target, PixelFormat format, PixelType type, ref T4 row, ref T5 column, ref T6 span) where T4 : struct where T5 : struct where T6 : struct
			{
				fixed (T4* ptr = &row)
				{
					T4* ptr2 = ptr;
					fixed (T5* ptr3 = &column)
					{
						T5* ptr4 = ptr3;
						fixed (T6* ptr5 = &span)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[920]);
						}
					}
				}
			}

			// Token: 0x0600260B RID: 9739 RVA: 0x00067260 File Offset: 0x00065460
			[Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
			[CLSCompliant(false)]
			public unsafe static void GetSeparableFilter<T4, T5, T6>(ExtConvolution target, PixelFormat format, PixelType type, [Out] T4[] row, [Out] T5[] column, [In] [Out] T6[] span) where T4 : struct where T5 : struct where T6 : struct
			{
				fixed (T4* ptr = ref (row != null && row.Length != 0) ? ref row[0] : ref *null)
				{
					T4* ptr2 = ptr;
					fixed (T5* ptr3 = ref (column != null && column.Length != 0) ? ref column[0] : ref *null)
					{
						T5* ptr4 = ptr3;
						fixed (T6* ptr5 = ref (span != null && span.Length != 0) ? ref span[0] : ref *null)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[920]);
						}
					}
				}
			}

			// Token: 0x0600260C RID: 9740 RVA: 0x000672C8 File Offset: 0x000654C8
			[Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
			[CLSCompliant(false)]
			public unsafe static void GetSeparableFilter<T4, T5, T6>(ExtConvolution target, PixelFormat format, PixelType type, [Out] T4[,] row, [Out] T5[,] column, [In] [Out] T6[,] span) where T4 : struct where T5 : struct where T6 : struct
			{
				fixed (T4* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0] : ref *null)
				{
					T4* ptr2 = ptr;
					fixed (T5* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0] : ref *null)
					{
						T5* ptr4 = ptr3;
						fixed (T6* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0] : ref *null)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[920]);
						}
					}
				}
			}

			// Token: 0x0600260D RID: 9741 RVA: 0x0006733C File Offset: 0x0006553C
			[CLSCompliant(false)]
			[Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
			public unsafe static void GetSeparableFilter<T4, T5, T6>(ExtConvolution target, PixelFormat format, PixelType type, [Out] T4[,,] row, [Out] T5[,,] column, [In] [Out] T6[,,] span) where T4 : struct where T5 : struct where T6 : struct
			{
				fixed (T4* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0, 0] : ref *null)
				{
					T4* ptr2 = ptr;
					fixed (T5* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
					{
						T5* ptr4 = ptr3;
						fixed (T6* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[920]);
						}
					}
				}
			}

			// Token: 0x0600260E RID: 9742 RVA: 0x000673B4 File Offset: 0x000655B4
			[Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
			[CLSCompliant(false)]
			public unsafe static void GetSeparableFilter<T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In] [Out] T5[] span) where T5 : struct
			{
				fixed (T5* ptr = ref (span != null && span.Length != 0) ? ref span[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, column, ptr, GL.EntryPoints[920]);
				}
			}

			// Token: 0x0600260F RID: 9743 RVA: 0x000673F0 File Offset: 0x000655F0
			[CLSCompliant(false)]
			[Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
			public unsafe static void GetSeparableFilter<T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In] [Out] T5[,] span) where T5 : struct
			{
				fixed (T5* ptr = ref (span != null && span.Length != 0) ? ref span[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, column, ptr, GL.EntryPoints[920]);
				}
			}

			// Token: 0x06002610 RID: 9744 RVA: 0x00067430 File Offset: 0x00065630
			[Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
			[CLSCompliant(false)]
			public unsafe static void GetSeparableFilter<T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In] [Out] T5[,,] span) where T5 : struct
			{
				fixed (T5* ptr = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, column, ptr, GL.EntryPoints[920]);
				}
			}

			// Token: 0x06002611 RID: 9745 RVA: 0x00067474 File Offset: 0x00065674
			[Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
			public unsafe static void GetSeparableFilter<T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In] [Out] ref T5 span) where T5 : struct
			{
				fixed (T5* ptr = &span)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, column, ptr, GL.EntryPoints[920]);
				}
			}

			// Token: 0x06002612 RID: 9746 RVA: 0x0006749C File Offset: 0x0006569C
			[Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
			[CLSCompliant(false)]
			public unsafe static void GetSeparableFilter<T4, T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [In] [Out] T4[] column, [In] [Out] T5[,,] span) where T4 : struct where T5 : struct
			{
				fixed (T4* ptr = ref (column != null && column.Length != 0) ? ref column[0] : ref *null)
				{
					T4* ptr2 = ptr;
					fixed (T5* ptr3 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, ptr2, ptr3, GL.EntryPoints[920]);
					}
				}
			}

			// Token: 0x06002613 RID: 9747 RVA: 0x000674F4 File Offset: 0x000656F4
			[CLSCompliant(false)]
			[Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
			public unsafe static void GetSeparableFilter<T4, T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [In] [Out] T4[,] column, [In] [Out] T5[,,] span) where T4 : struct where T5 : struct
			{
				fixed (T4* ptr = ref (column != null && column.Length != 0) ? ref column[0, 0] : ref *null)
				{
					T4* ptr2 = ptr;
					fixed (T5* ptr3 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, ptr2, ptr3, GL.EntryPoints[920]);
					}
				}
			}

			// Token: 0x06002614 RID: 9748 RVA: 0x00067550 File Offset: 0x00065750
			[CLSCompliant(false)]
			[Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
			public unsafe static void GetSeparableFilter<T4, T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span) where T4 : struct where T5 : struct
			{
				fixed (T4* ptr = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
				{
					T4* ptr2 = ptr;
					fixed (T5* ptr3 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, ptr2, ptr3, GL.EntryPoints[920]);
					}
				}
			}

			// Token: 0x06002615 RID: 9749 RVA: 0x000675B0 File Offset: 0x000657B0
			[Obsolete("Use GetSeparableFilter<T4, T5, T6> overloads instead")]
			public unsafe static void GetSeparableFilter<T4, T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [In] [Out] ref T4 column, [In] [Out] T5[,,] span) where T4 : struct where T5 : struct
			{
				fixed (T4* ptr = &column)
				{
					T4* ptr2 = ptr;
					fixed (T5* ptr3 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, row, ptr2, ptr3, GL.EntryPoints[920]);
					}
				}
			}

			// Token: 0x06002616 RID: 9750 RVA: 0x000675F4 File Offset: 0x000657F4
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overloads instead")]
			public unsafe static void GetSeparableFilter<T3, T4, T5>(ExtConvolution target, PixelFormat format, PixelType type, [In] [Out] T3[] row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
			{
				fixed (T3* ptr = ref (row != null && row.Length != 0) ? ref row[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (T4* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
					{
						T4* ptr4 = ptr3;
						fixed (T5* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[920]);
						}
					}
				}
			}

			// Token: 0x06002617 RID: 9751 RVA: 0x00067668 File Offset: 0x00065868
			[Obsolete("Use ref/array overloads instead")]
			[CLSCompliant(false)]
			public unsafe static void GetSeparableFilter<T3, T4, T5>(ExtConvolution target, PixelFormat format, PixelType type, [In] [Out] T3[,] row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
			{
				fixed (T3* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (T4* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
					{
						T4* ptr4 = ptr3;
						fixed (T5* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[920]);
						}
					}
				}
			}

			// Token: 0x06002618 RID: 9752 RVA: 0x000676E0 File Offset: 0x000658E0
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overloads instead")]
			public unsafe static void GetSeparableFilter<T3, T4, T5>(ExtConvolution target, PixelFormat format, PixelType type, [In] [Out] ref T3 row, [In] [Out] T4[,,] column, [In] [Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
			{
				fixed (T3* ptr = &row)
				{
					T3* ptr2 = ptr;
					fixed (T4* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
					{
						T4* ptr4 = ptr3;
						fixed (T5* ptr5 = ref (span != null && span.Length != 0) ? ref span[0, 0, 0] : ref *null)
						{
							calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, format, type, ptr2, ptr4, ptr5, GL.EntryPoints[920]);
						}
					}
				}
			}

			// Token: 0x06002619 RID: 9753 RVA: 0x00067740 File Offset: 0x00065940
			[Obsolete("Use SeparableFilter2D<T6, T7> overloads instead")]
			public static void SeparableFilter2D(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] IntPtr column)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, row, column, GL.EntryPoints[1868]);
			}

			// Token: 0x0600261A RID: 9754 RVA: 0x0006776C File Offset: 0x0006596C
			[Obsolete("Use ref/array overloads instead")]
			public unsafe static void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T6 row, [In] [Out] ref T7 column) where T6 : struct where T7 : struct
			{
				fixed (T6* ptr = &row)
				{
					T6* ptr2 = ptr;
					fixed (T7* ptr3 = &column)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1868]);
					}
				}
			}

			// Token: 0x0600261B RID: 9755 RVA: 0x0006779C File Offset: 0x0006599C
			[Obsolete("Use ref/array overloads instead")]
			[CLSCompliant(false)]
			public unsafe static void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[] row, [In] [Out] T7[] column) where T6 : struct where T7 : struct
			{
				fixed (T6* ptr = ref (row != null && row.Length != 0) ? ref row[0] : ref *null)
				{
					T6* ptr2 = ptr;
					fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1868]);
					}
				}
			}

			// Token: 0x0600261C RID: 9756 RVA: 0x000677F4 File Offset: 0x000659F4
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overloads instead")]
			public unsafe static void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,] row, [In] [Out] T7[,] column) where T6 : struct where T7 : struct
			{
				fixed (T6* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0] : ref *null)
				{
					T6* ptr2 = ptr;
					fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1868]);
					}
				}
			}

			// Token: 0x0600261D RID: 9757 RVA: 0x00067854 File Offset: 0x00065A54
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overloads instead")]
			public unsafe static void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,,] row, [In] [Out] T7[,,] column) where T6 : struct where T7 : struct
			{
				fixed (T6* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0, 0] : ref *null)
				{
					T6* ptr2 = ptr;
					fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1868]);
					}
				}
			}

			// Token: 0x0600261E RID: 9758 RVA: 0x000678B8 File Offset: 0x00065AB8
			[Obsolete("Use SeparableFilter2D<T6, T7> overloads instead")]
			[CLSCompliant(false)]
			public unsafe static void SeparableFilter2D<T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] T7[] column) where T7 : struct
			{
				fixed (T7* ptr = ref (column != null && column.Length != 0) ? ref column[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, row, ptr, GL.EntryPoints[1868]);
				}
			}

			// Token: 0x0600261F RID: 9759 RVA: 0x000678F8 File Offset: 0x00065AF8
			[CLSCompliant(false)]
			[Obsolete("Use SeparableFilter2D<T6, T7> overloads instead")]
			public unsafe static void SeparableFilter2D<T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] T7[,] column) where T7 : struct
			{
				fixed (T7* ptr = ref (column != null && column.Length != 0) ? ref column[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, row, ptr, GL.EntryPoints[1868]);
				}
			}

			// Token: 0x06002620 RID: 9760 RVA: 0x0006793C File Offset: 0x00065B3C
			[Obsolete("Use SeparableFilter2D<T6, T7> overloads instead")]
			[CLSCompliant(false)]
			public unsafe static void SeparableFilter2D<T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] T7[,,] column) where T7 : struct
			{
				fixed (T7* ptr = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, row, ptr, GL.EntryPoints[1868]);
				}
			}

			// Token: 0x06002621 RID: 9761 RVA: 0x00067984 File Offset: 0x00065B84
			[Obsolete("Use SeparableFilter2D<T6, T7> overloads instead")]
			public unsafe static void SeparableFilter2D<T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In] [Out] ref T7 column) where T7 : struct
			{
				fixed (T7* ptr = &column)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, row, ptr, GL.EntryPoints[1868]);
				}
			}

			// Token: 0x06002622 RID: 9762 RVA: 0x000679B0 File Offset: 0x00065BB0
			[Obsolete("Use ref/array overloads instead")]
			[CLSCompliant(false)]
			public unsafe static void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[] row, [In] [Out] T7[,,] column) where T6 : struct where T7 : struct
			{
				fixed (T6* ptr = ref (row != null && row.Length != 0) ? ref row[0] : ref *null)
				{
					T6* ptr2 = ptr;
					fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1868]);
					}
				}
			}

			// Token: 0x06002623 RID: 9763 RVA: 0x00067A0C File Offset: 0x00065C0C
			[Obsolete("Use ref/array overloads instead")]
			public unsafe static void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,] row, [In] [Out] T7[,,] column) where T6 : struct where T7 : struct
			{
				fixed (T6* ptr = ref (row != null && row.Length != 0) ? ref row[0, 0] : ref *null)
				{
					T6* ptr2 = ptr;
					fixed (T7* ptr3 = ref (column != null && column.Length != 0) ? ref column[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr), target, internalformat, width, height, format, type, ptr2, ptr3, GL.EntryPoints[1868]);
					}
				}
			}
		}

		// Token: 0x020004BC RID: 1212
		public static class Gremedy
		{
			// Token: 0x06002624 RID: 9764 RVA: 0x00067A6C File Offset: 0x00065C6C
			public static void FrameTerminator()
			{
				calli(System.Void(), GL.EntryPoints[589]);
			}

			// Token: 0x06002625 RID: 9765 RVA: 0x00067A80 File Offset: 0x00065C80
			public static void StringMarker(int len, IntPtr @string)
			{
				calli(System.Void(System.Int32,System.IntPtr), len, @string, GL.EntryPoints[1904]);
			}

			// Token: 0x06002626 RID: 9766 RVA: 0x00067A94 File Offset: 0x00065C94
			[CLSCompliant(false)]
			public unsafe static void StringMarker<T1>(int len, [In] [Out] T1[] @string) where T1 : struct
			{
				fixed (T1* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), len, ptr, GL.EntryPoints[1904]);
				}
			}

			// Token: 0x06002627 RID: 9767 RVA: 0x00067AC8 File Offset: 0x00065CC8
			[CLSCompliant(false)]
			public unsafe static void StringMarker<T1>(int len, [In] [Out] T1[,] @string) where T1 : struct
			{
				fixed (T1* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), len, ptr, GL.EntryPoints[1904]);
				}
			}

			// Token: 0x06002628 RID: 9768 RVA: 0x00067B00 File Offset: 0x00065D00
			[CLSCompliant(false)]
			public unsafe static void StringMarker<T1>(int len, [In] [Out] T1[,,] @string) where T1 : struct
			{
				fixed (T1* ptr = ref (@string != null && @string.Length != 0) ? ref @string[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), len, ptr, GL.EntryPoints[1904]);
				}
			}

			// Token: 0x06002629 RID: 9769 RVA: 0x00067B3C File Offset: 0x00065D3C
			public unsafe static void StringMarker<T1>(int len, [In] [Out] ref T1 @string) where T1 : struct
			{
				fixed (T1* ptr = &@string)
				{
					calli(System.Void(System.Int32,System.IntPtr), len, ptr, GL.EntryPoints[1904]);
				}
			}
		}

		// Token: 0x020004BD RID: 1213
		public static class HP
		{
			// Token: 0x0600262A RID: 9770 RVA: 0x00067B60 File Offset: 0x00065D60
			[CLSCompliant(false)]
			public unsafe static void GetImageTransformParameter(HpImageTransform target, HpImageTransform pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[730]);
				}
			}

			// Token: 0x0600262B RID: 9771 RVA: 0x00067B98 File Offset: 0x00065D98
			[CLSCompliant(false)]
			public unsafe static void GetImageTransformParameter(HpImageTransform target, HpImageTransform pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[730]);
				}
			}

			// Token: 0x0600262C RID: 9772 RVA: 0x00067BBC File Offset: 0x00065DBC
			[CLSCompliant(false)]
			public unsafe static void GetImageTransformParameter(HpImageTransform target, HpImageTransform pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[730]);
			}

			// Token: 0x0600262D RID: 9773 RVA: 0x00067BD4 File Offset: 0x00065DD4
			[CLSCompliant(false)]
			public unsafe static void GetImageTransformParameter(HpImageTransform target, HpImageTransform pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[731]);
				}
			}

			// Token: 0x0600262E RID: 9774 RVA: 0x00067C0C File Offset: 0x00065E0C
			[CLSCompliant(false)]
			public unsafe static void GetImageTransformParameter(HpImageTransform target, HpImageTransform pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[731]);
				}
			}

			// Token: 0x0600262F RID: 9775 RVA: 0x00067C30 File Offset: 0x00065E30
			[CLSCompliant(false)]
			public unsafe static void GetImageTransformParameter(HpImageTransform target, HpImageTransform pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[731]);
			}

			// Token: 0x06002630 RID: 9776 RVA: 0x00067C48 File Offset: 0x00065E48
			public static void ImageTransformParameter(HpImageTransform target, HpImageTransform pname, float param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single), target, pname, param, GL.EntryPoints[1040]);
			}

			// Token: 0x06002631 RID: 9777 RVA: 0x00067C60 File Offset: 0x00065E60
			[CLSCompliant(false)]
			public unsafe static void ImageTransformParameter(HpImageTransform target, HpImageTransform pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[1041]);
				}
			}

			// Token: 0x06002632 RID: 9778 RVA: 0x00067C98 File Offset: 0x00065E98
			[CLSCompliant(false)]
			public unsafe static void ImageTransformParameter(HpImageTransform target, HpImageTransform pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[1041]);
			}

			// Token: 0x06002633 RID: 9779 RVA: 0x00067CB0 File Offset: 0x00065EB0
			public static void ImageTransformParameter(HpImageTransform target, HpImageTransform pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, param, GL.EntryPoints[1042]);
			}

			// Token: 0x06002634 RID: 9780 RVA: 0x00067CC8 File Offset: 0x00065EC8
			[CLSCompliant(false)]
			public unsafe static void ImageTransformParameter(HpImageTransform target, HpImageTransform pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[1043]);
				}
			}

			// Token: 0x06002635 RID: 9781 RVA: 0x00067D00 File Offset: 0x00065F00
			[CLSCompliant(false)]
			public unsafe static void ImageTransformParameter(HpImageTransform target, HpImageTransform pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[1043]);
			}
		}

		// Token: 0x020004BE RID: 1214
		public static class Ibm
		{
			// Token: 0x06002636 RID: 9782 RVA: 0x00067D18 File Offset: 0x00065F18
			public static void ColorPointerList(int size, ColorPointerType type, int stride, IntPtr pointer, int ptrstride)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, pointer, ptrstride, GL.EntryPoints[237]);
			}

			// Token: 0x06002637 RID: 9783 RVA: 0x00067D30 File Offset: 0x00065F30
			[CLSCompliant(false)]
			public unsafe static void ColorPointerList<T3>(int size, ColorPointerType type, int stride, [In] [Out] T3[] pointer, int ptrstride) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, ptr, ptrstride, GL.EntryPoints[237]);
				}
			}

			// Token: 0x06002638 RID: 9784 RVA: 0x00067D68 File Offset: 0x00065F68
			[CLSCompliant(false)]
			public unsafe static void ColorPointerList<T3>(int size, ColorPointerType type, int stride, [In] [Out] T3[,] pointer, int ptrstride) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, ptr, ptrstride, GL.EntryPoints[237]);
				}
			}

			// Token: 0x06002639 RID: 9785 RVA: 0x00067DA4 File Offset: 0x00065FA4
			[CLSCompliant(false)]
			public unsafe static void ColorPointerList<T3>(int size, ColorPointerType type, int stride, [In] [Out] T3[,,] pointer, int ptrstride) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, ptr, ptrstride, GL.EntryPoints[237]);
				}
			}

			// Token: 0x0600263A RID: 9786 RVA: 0x00067DE4 File Offset: 0x00065FE4
			public unsafe static void ColorPointerList<T3>(int size, ColorPointerType type, int stride, [In] [Out] ref T3 pointer, int ptrstride) where T3 : struct
			{
				fixed (T3* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, ptr, ptrstride, GL.EntryPoints[237]);
				}
			}

			// Token: 0x0600263B RID: 9787 RVA: 0x00067E0C File Offset: 0x0006600C
			[CLSCompliant(false)]
			public unsafe static void EdgeFlagPointerList(int stride, bool*[] pointer, int ptrstride)
			{
				fixed (bool* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *(bool**)null)
				{
					calli(System.Void(System.Int32,System.Boolean**,System.Int32), stride, ptr, ptrstride, GL.EntryPoints[464]);
				}
			}

			// Token: 0x0600263C RID: 9788 RVA: 0x00067E44 File Offset: 0x00066044
			[CLSCompliant(false)]
			public unsafe static void EdgeFlagPointerList(int stride, ref bool* pointer, int ptrstride)
			{
				fixed (bool** ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Boolean**,System.Int32), stride, ptr, ptrstride, GL.EntryPoints[464]);
				}
			}

			// Token: 0x0600263D RID: 9789 RVA: 0x00067E68 File Offset: 0x00066068
			[CLSCompliant(false)]
			public unsafe static void EdgeFlagPointerList(int stride, bool** pointer, int ptrstride)
			{
				calli(System.Void(System.Int32,System.Boolean**,System.Int32), stride, pointer, ptrstride, GL.EntryPoints[464]);
			}

			// Token: 0x0600263E RID: 9790 RVA: 0x00067E80 File Offset: 0x00066080
			public static void FlushStaticData(IbmStaticData target)
			{
				calli(System.Void(System.Int32), target, GL.EntryPoints[532]);
			}

			// Token: 0x0600263F RID: 9791 RVA: 0x00067E94 File Offset: 0x00066094
			public static void FogCoordPointerList(FogPointerType type, int stride, IntPtr pointer, int ptrstride)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, pointer, ptrstride, GL.EntryPoints[548]);
			}

			// Token: 0x06002640 RID: 9792 RVA: 0x00067EAC File Offset: 0x000660AC
			[CLSCompliant(false)]
			public unsafe static void FogCoordPointerList<T2>(FogPointerType type, int stride, [In] [Out] T2[] pointer, int ptrstride) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, ptr, ptrstride, GL.EntryPoints[548]);
				}
			}

			// Token: 0x06002641 RID: 9793 RVA: 0x00067EE4 File Offset: 0x000660E4
			[CLSCompliant(false)]
			public unsafe static void FogCoordPointerList<T2>(FogPointerType type, int stride, [In] [Out] T2[,] pointer, int ptrstride) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, ptr, ptrstride, GL.EntryPoints[548]);
				}
			}

			// Token: 0x06002642 RID: 9794 RVA: 0x00067F20 File Offset: 0x00066120
			[CLSCompliant(false)]
			public unsafe static void FogCoordPointerList<T2>(FogPointerType type, int stride, [In] [Out] T2[,,] pointer, int ptrstride) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, ptr, ptrstride, GL.EntryPoints[548]);
				}
			}

			// Token: 0x06002643 RID: 9795 RVA: 0x00067F5C File Offset: 0x0006615C
			public unsafe static void FogCoordPointerList<T2>(FogPointerType type, int stride, [In] [Out] ref T2 pointer, int ptrstride) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, ptr, ptrstride, GL.EntryPoints[548]);
				}
			}

			// Token: 0x06002644 RID: 9796 RVA: 0x00067F80 File Offset: 0x00066180
			[Obsolete("Use FogPointerType overload instead")]
			public static void FogCoordPointerList(IbmVertexArrayLists type, int stride, IntPtr pointer, int ptrstride)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, pointer, ptrstride, GL.EntryPoints[548]);
			}

			// Token: 0x06002645 RID: 9797 RVA: 0x00067F98 File Offset: 0x00066198
			[CLSCompliant(false)]
			[Obsolete("Use FogPointerType overload instead")]
			public unsafe static void FogCoordPointerList<T2>(IbmVertexArrayLists type, int stride, [In] [Out] T2[] pointer, int ptrstride) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, ptr, ptrstride, GL.EntryPoints[548]);
				}
			}

			// Token: 0x06002646 RID: 9798 RVA: 0x00067FD0 File Offset: 0x000661D0
			[CLSCompliant(false)]
			[Obsolete("Use FogPointerType overload instead")]
			public unsafe static void FogCoordPointerList<T2>(IbmVertexArrayLists type, int stride, [In] [Out] T2[,] pointer, int ptrstride) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, ptr, ptrstride, GL.EntryPoints[548]);
				}
			}

			// Token: 0x06002647 RID: 9799 RVA: 0x0006800C File Offset: 0x0006620C
			[CLSCompliant(false)]
			[Obsolete("Use FogPointerType overload instead")]
			public unsafe static void FogCoordPointerList<T2>(IbmVertexArrayLists type, int stride, [In] [Out] T2[,,] pointer, int ptrstride) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, ptr, ptrstride, GL.EntryPoints[548]);
				}
			}

			// Token: 0x06002648 RID: 9800 RVA: 0x00068048 File Offset: 0x00066248
			[Obsolete("Use FogPointerType overload instead")]
			public unsafe static void FogCoordPointerList<T2>(IbmVertexArrayLists type, int stride, [In] [Out] ref T2 pointer, int ptrstride) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, ptr, ptrstride, GL.EntryPoints[548]);
				}
			}

			// Token: 0x06002649 RID: 9801 RVA: 0x0006806C File Offset: 0x0006626C
			public static void IndexPointerList(IndexPointerType type, int stride, IntPtr pointer, int ptrstride)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, pointer, ptrstride, GL.EntryPoints[1057]);
			}

			// Token: 0x0600264A RID: 9802 RVA: 0x00068084 File Offset: 0x00066284
			[CLSCompliant(false)]
			public unsafe static void IndexPointerList<T2>(IndexPointerType type, int stride, [In] [Out] T2[] pointer, int ptrstride) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, ptr, ptrstride, GL.EntryPoints[1057]);
				}
			}

			// Token: 0x0600264B RID: 9803 RVA: 0x000680BC File Offset: 0x000662BC
			[CLSCompliant(false)]
			public unsafe static void IndexPointerList<T2>(IndexPointerType type, int stride, [In] [Out] T2[,] pointer, int ptrstride) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, ptr, ptrstride, GL.EntryPoints[1057]);
				}
			}

			// Token: 0x0600264C RID: 9804 RVA: 0x000680F8 File Offset: 0x000662F8
			[CLSCompliant(false)]
			public unsafe static void IndexPointerList<T2>(IndexPointerType type, int stride, [In] [Out] T2[,,] pointer, int ptrstride) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, ptr, ptrstride, GL.EntryPoints[1057]);
				}
			}

			// Token: 0x0600264D RID: 9805 RVA: 0x00068134 File Offset: 0x00066334
			public unsafe static void IndexPointerList<T2>(IndexPointerType type, int stride, [In] [Out] ref T2 pointer, int ptrstride) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, ptr, ptrstride, GL.EntryPoints[1057]);
				}
			}

			// Token: 0x0600264E RID: 9806 RVA: 0x00068158 File Offset: 0x00066358
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawArrays(PrimitiveType[] mode, int[] first, int[] count, int primcount, int modestride)
			{
				fixed (PrimitiveType* ptr = ref (mode != null && mode.Length != 0) ? ref mode[0] : ref *null)
				{
					PrimitiveType* ptr2 = ptr;
					fixed (int* ptr3 = ref (first != null && first.Length != 0) ? ref first[0] : ref *null)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32*,System.Int32,System.Int32), ptr2, ptr4, ptr5, primcount, modestride, GL.EntryPoints[1247]);
						}
					}
				}
			}

			// Token: 0x0600264F RID: 9807 RVA: 0x000681BC File Offset: 0x000663BC
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawArrays(ref PrimitiveType mode, ref int first, ref int count, int primcount, int modestride)
			{
				fixed (PrimitiveType* ptr = &mode)
				{
					PrimitiveType* ptr2 = ptr;
					fixed (int* ptr3 = &first)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = &count)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32*,System.Int32,System.Int32), ptr2, ptr4, ptr5, primcount, modestride, GL.EntryPoints[1247]);
						}
					}
				}
			}

			// Token: 0x06002650 RID: 9808 RVA: 0x000681E8 File Offset: 0x000663E8
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawArrays(PrimitiveType* mode, int* first, int* count, int primcount, int modestride)
			{
				calli(System.Void(System.Int32*,System.Int32*,System.Int32*,System.Int32,System.Int32), mode, first, count, primcount, modestride, GL.EntryPoints[1247]);
			}

			// Token: 0x06002651 RID: 9809 RVA: 0x00068200 File Offset: 0x00066400
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements(PrimitiveType[] mode, int[] count, DrawElementsType type, IntPtr indices, int primcount, int modestride)
			{
				fixed (PrimitiveType* ptr = ref (mode != null && mode.Length != 0) ? ref mode[0] : ref *null)
				{
					PrimitiveType* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr3, type, indices, primcount, modestride, GL.EntryPoints[1248]);
					}
				}
			}

			// Token: 0x06002652 RID: 9810 RVA: 0x00068250 File Offset: 0x00066450
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(PrimitiveType[] mode, int[] count, DrawElementsType type, [In] [Out] T3[] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (PrimitiveType* ptr = ref (mode != null && mode.Length != 0) ? ref mode[0] : ref *null)
				{
					PrimitiveType* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						int* ptr4 = ptr3;
						fixed (T3* ptr5 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr4, type, ptr5, primcount, modestride, GL.EntryPoints[1248]);
						}
					}
				}
			}

			// Token: 0x06002653 RID: 9811 RVA: 0x000682B4 File Offset: 0x000664B4
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(PrimitiveType[] mode, int[] count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (PrimitiveType* ptr = ref (mode != null && mode.Length != 0) ? ref mode[0] : ref *null)
				{
					PrimitiveType* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						int* ptr4 = ptr3;
						fixed (T3* ptr5 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr4, type, ptr5, primcount, modestride, GL.EntryPoints[1248]);
						}
					}
				}
			}

			// Token: 0x06002654 RID: 9812 RVA: 0x0006831C File Offset: 0x0006651C
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(PrimitiveType[] mode, int[] count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (PrimitiveType* ptr = ref (mode != null && mode.Length != 0) ? ref mode[0] : ref *null)
				{
					PrimitiveType* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						int* ptr4 = ptr3;
						fixed (T3* ptr5 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr4, type, ptr5, primcount, modestride, GL.EntryPoints[1248]);
						}
					}
				}
			}

			// Token: 0x06002655 RID: 9813 RVA: 0x00068388 File Offset: 0x00066588
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(PrimitiveType[] mode, int[] count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount, int modestride) where T3 : struct
			{
				fixed (PrimitiveType* ptr = ref (mode != null && mode.Length != 0) ? ref mode[0] : ref *null)
				{
					PrimitiveType* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						int* ptr4 = ptr3;
						fixed (T3* ptr5 = &indices)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr4, type, ptr5, primcount, modestride, GL.EntryPoints[1248]);
						}
					}
				}
			}

			// Token: 0x06002656 RID: 9814 RVA: 0x000683DC File Offset: 0x000665DC
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements(ref PrimitiveType mode, ref int count, DrawElementsType type, IntPtr indices, int primcount, int modestride)
			{
				fixed (PrimitiveType* ptr = &mode)
				{
					PrimitiveType* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr3, type, indices, primcount, modestride, GL.EntryPoints[1248]);
					}
				}
			}

			// Token: 0x06002657 RID: 9815 RVA: 0x00068408 File Offset: 0x00066608
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(ref PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (PrimitiveType* ptr = &mode)
				{
					PrimitiveType* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						int* ptr4 = ptr3;
						fixed (T3* ptr5 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr4, type, ptr5, primcount, modestride, GL.EntryPoints[1248]);
						}
					}
				}
			}

			// Token: 0x06002658 RID: 9816 RVA: 0x00068448 File Offset: 0x00066648
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(ref PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (PrimitiveType* ptr = &mode)
				{
					PrimitiveType* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						int* ptr4 = ptr3;
						fixed (T3* ptr5 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr4, type, ptr5, primcount, modestride, GL.EntryPoints[1248]);
						}
					}
				}
			}

			// Token: 0x06002659 RID: 9817 RVA: 0x0006848C File Offset: 0x0006668C
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(ref PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (PrimitiveType* ptr = &mode)
				{
					PrimitiveType* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						int* ptr4 = ptr3;
						fixed (T3* ptr5 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr4, type, ptr5, primcount, modestride, GL.EntryPoints[1248]);
						}
					}
				}
			}

			// Token: 0x0600265A RID: 9818 RVA: 0x000684D4 File Offset: 0x000666D4
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(ref PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount, int modestride) where T3 : struct
			{
				fixed (PrimitiveType* ptr = &mode)
				{
					PrimitiveType* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						int* ptr4 = ptr3;
						fixed (T3* ptr5 = &indices)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr4, type, ptr5, primcount, modestride, GL.EntryPoints[1248]);
						}
					}
				}
			}

			// Token: 0x0600265B RID: 9819 RVA: 0x00068504 File Offset: 0x00066704
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements(PrimitiveType* mode, int* count, DrawElementsType type, IntPtr indices, int primcount, int modestride)
			{
				calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, indices, primcount, modestride, GL.EntryPoints[1248]);
			}

			// Token: 0x0600265C RID: 9820 RVA: 0x00068520 File Offset: 0x00066720
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(PrimitiveType* mode, int* count, DrawElementsType type, [In] [Out] T3[] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, primcount, modestride, GL.EntryPoints[1248]);
				}
			}

			// Token: 0x0600265D RID: 9821 RVA: 0x0006855C File Offset: 0x0006675C
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(PrimitiveType* mode, int* count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, primcount, modestride, GL.EntryPoints[1248]);
				}
			}

			// Token: 0x0600265E RID: 9822 RVA: 0x0006859C File Offset: 0x0006679C
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(PrimitiveType* mode, int* count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, primcount, modestride, GL.EntryPoints[1248]);
				}
			}

			// Token: 0x0600265F RID: 9823 RVA: 0x000685DC File Offset: 0x000667DC
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(PrimitiveType* mode, int* count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount, int modestride) where T3 : struct
			{
				fixed (T3* ptr = &indices)
				{
					calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, primcount, modestride, GL.EntryPoints[1248]);
				}
			}

			// Token: 0x06002660 RID: 9824 RVA: 0x00068604 File Offset: 0x00066804
			public static void NormalPointerList(NormalPointerType type, int stride, IntPtr pointer, int ptrstride)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, pointer, ptrstride, GL.EntryPoints[1429]);
			}

			// Token: 0x06002661 RID: 9825 RVA: 0x0006861C File Offset: 0x0006681C
			[CLSCompliant(false)]
			public unsafe static void NormalPointerList<T2>(NormalPointerType type, int stride, [In] [Out] T2[] pointer, int ptrstride) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, ptr, ptrstride, GL.EntryPoints[1429]);
				}
			}

			// Token: 0x06002662 RID: 9826 RVA: 0x00068654 File Offset: 0x00066854
			[CLSCompliant(false)]
			public unsafe static void NormalPointerList<T2>(NormalPointerType type, int stride, [In] [Out] T2[,] pointer, int ptrstride) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, ptr, ptrstride, GL.EntryPoints[1429]);
				}
			}

			// Token: 0x06002663 RID: 9827 RVA: 0x00068690 File Offset: 0x00066890
			[CLSCompliant(false)]
			public unsafe static void NormalPointerList<T2>(NormalPointerType type, int stride, [In] [Out] T2[,,] pointer, int ptrstride) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, ptr, ptrstride, GL.EntryPoints[1429]);
				}
			}

			// Token: 0x06002664 RID: 9828 RVA: 0x000686CC File Offset: 0x000668CC
			public unsafe static void NormalPointerList<T2>(NormalPointerType type, int stride, [In] [Out] ref T2 pointer, int ptrstride) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32), type, stride, ptr, ptrstride, GL.EntryPoints[1429]);
				}
			}

			// Token: 0x06002665 RID: 9829 RVA: 0x000686F0 File Offset: 0x000668F0
			public static void SecondaryColorPointerList(int size, IbmVertexArrayLists type, int stride, IntPtr pointer, int ptrstride)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, pointer, ptrstride, GL.EntryPoints[1864]);
			}

			// Token: 0x06002666 RID: 9830 RVA: 0x00068708 File Offset: 0x00066908
			[CLSCompliant(false)]
			public unsafe static void SecondaryColorPointerList<T3>(int size, IbmVertexArrayLists type, int stride, [In] [Out] T3[] pointer, int ptrstride) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, ptr, ptrstride, GL.EntryPoints[1864]);
				}
			}

			// Token: 0x06002667 RID: 9831 RVA: 0x00068740 File Offset: 0x00066940
			[CLSCompliant(false)]
			public unsafe static void SecondaryColorPointerList<T3>(int size, IbmVertexArrayLists type, int stride, [In] [Out] T3[,] pointer, int ptrstride) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, ptr, ptrstride, GL.EntryPoints[1864]);
				}
			}

			// Token: 0x06002668 RID: 9832 RVA: 0x0006877C File Offset: 0x0006697C
			[CLSCompliant(false)]
			public unsafe static void SecondaryColorPointerList<T3>(int size, IbmVertexArrayLists type, int stride, [In] [Out] T3[,,] pointer, int ptrstride) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, ptr, ptrstride, GL.EntryPoints[1864]);
				}
			}

			// Token: 0x06002669 RID: 9833 RVA: 0x000687BC File Offset: 0x000669BC
			public unsafe static void SecondaryColorPointerList<T3>(int size, IbmVertexArrayLists type, int stride, [In] [Out] ref T3 pointer, int ptrstride) where T3 : struct
			{
				fixed (T3* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, ptr, ptrstride, GL.EntryPoints[1864]);
				}
			}

			// Token: 0x0600266A RID: 9834 RVA: 0x000687E4 File Offset: 0x000669E4
			public static void TexCoordPointerList(int size, TexCoordPointerType type, int stride, IntPtr pointer, int ptrstride)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, pointer, ptrstride, GL.EntryPoints[2012]);
			}

			// Token: 0x0600266B RID: 9835 RVA: 0x000687FC File Offset: 0x000669FC
			[CLSCompliant(false)]
			public unsafe static void TexCoordPointerList<T3>(int size, TexCoordPointerType type, int stride, [In] [Out] T3[] pointer, int ptrstride) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, ptr, ptrstride, GL.EntryPoints[2012]);
				}
			}

			// Token: 0x0600266C RID: 9836 RVA: 0x00068834 File Offset: 0x00066A34
			[CLSCompliant(false)]
			public unsafe static void TexCoordPointerList<T3>(int size, TexCoordPointerType type, int stride, [In] [Out] T3[,] pointer, int ptrstride) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, ptr, ptrstride, GL.EntryPoints[2012]);
				}
			}

			// Token: 0x0600266D RID: 9837 RVA: 0x00068870 File Offset: 0x00066A70
			[CLSCompliant(false)]
			public unsafe static void TexCoordPointerList<T3>(int size, TexCoordPointerType type, int stride, [In] [Out] T3[,,] pointer, int ptrstride) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, ptr, ptrstride, GL.EntryPoints[2012]);
				}
			}

			// Token: 0x0600266E RID: 9838 RVA: 0x000688B0 File Offset: 0x00066AB0
			public unsafe static void TexCoordPointerList<T3>(int size, TexCoordPointerType type, int stride, [In] [Out] ref T3 pointer, int ptrstride) where T3 : struct
			{
				fixed (T3* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, ptr, ptrstride, GL.EntryPoints[2012]);
				}
			}

			// Token: 0x0600266F RID: 9839 RVA: 0x000688D8 File Offset: 0x00066AD8
			public static void VertexPointerList(int size, VertexPointerType type, int stride, IntPtr pointer, int ptrstride)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, pointer, ptrstride, GL.EntryPoints[2544]);
			}

			// Token: 0x06002670 RID: 9840 RVA: 0x000688F0 File Offset: 0x00066AF0
			[CLSCompliant(false)]
			public unsafe static void VertexPointerList<T3>(int size, VertexPointerType type, int stride, [In] [Out] T3[] pointer, int ptrstride) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, ptr, ptrstride, GL.EntryPoints[2544]);
				}
			}

			// Token: 0x06002671 RID: 9841 RVA: 0x00068928 File Offset: 0x00066B28
			[CLSCompliant(false)]
			public unsafe static void VertexPointerList<T3>(int size, VertexPointerType type, int stride, [In] [Out] T3[,] pointer, int ptrstride) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, ptr, ptrstride, GL.EntryPoints[2544]);
				}
			}

			// Token: 0x06002672 RID: 9842 RVA: 0x00068964 File Offset: 0x00066B64
			[CLSCompliant(false)]
			public unsafe static void VertexPointerList<T3>(int size, VertexPointerType type, int stride, [In] [Out] T3[,,] pointer, int ptrstride) where T3 : struct
			{
				fixed (T3* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, ptr, ptrstride, GL.EntryPoints[2544]);
				}
			}

			// Token: 0x06002673 RID: 9843 RVA: 0x000689A4 File Offset: 0x00066BA4
			public unsafe static void VertexPointerList<T3>(int size, VertexPointerType type, int stride, [In] [Out] ref T3 pointer, int ptrstride) where T3 : struct
			{
				fixed (T3* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), size, type, stride, ptr, ptrstride, GL.EntryPoints[2544]);
				}
			}

			// Token: 0x06002674 RID: 9844 RVA: 0x000689CC File Offset: 0x00066BCC
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiModeDrawArrays(BeginMode[] mode, int[] first, int[] count, int primcount, int modestride)
			{
				fixed (BeginMode* ptr = ref (mode != null && mode.Length != 0) ? ref mode[0] : ref *null)
				{
					BeginMode* ptr2 = ptr;
					fixed (int* ptr3 = ref (first != null && first.Length != 0) ? ref first[0] : ref *null)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32*,System.Int32,System.Int32), ptr2, ptr4, ptr5, primcount, modestride, GL.EntryPoints[1247]);
						}
					}
				}
			}

			// Token: 0x06002675 RID: 9845 RVA: 0x00068A30 File Offset: 0x00066C30
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiModeDrawArrays(ref BeginMode mode, ref int first, ref int count, int primcount, int modestride)
			{
				fixed (BeginMode* ptr = &mode)
				{
					BeginMode* ptr2 = ptr;
					fixed (int* ptr3 = &first)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = &count)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32*,System.Int32,System.Int32), ptr2, ptr4, ptr5, primcount, modestride, GL.EntryPoints[1247]);
						}
					}
				}
			}

			// Token: 0x06002676 RID: 9846 RVA: 0x00068A5C File Offset: 0x00066C5C
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawArrays(BeginMode* mode, int* first, int* count, int primcount, int modestride)
			{
				calli(System.Void(System.Int32*,System.Int32*,System.Int32*,System.Int32,System.Int32), mode, first, count, primcount, modestride, GL.EntryPoints[1247]);
			}

			// Token: 0x06002677 RID: 9847 RVA: 0x00068A74 File Offset: 0x00066C74
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiModeDrawElements(BeginMode[] mode, int[] count, DrawElementsType type, IntPtr indices, int primcount, int modestride)
			{
				fixed (BeginMode* ptr = ref (mode != null && mode.Length != 0) ? ref mode[0] : ref *null)
				{
					BeginMode* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr3, type, indices, primcount, modestride, GL.EntryPoints[1248]);
					}
				}
			}

			// Token: 0x06002678 RID: 9848 RVA: 0x00068AC4 File Offset: 0x00066CC4
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiModeDrawElements<T3>(BeginMode[] mode, int[] count, DrawElementsType type, [In] [Out] T3[] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (BeginMode* ptr = ref (mode != null && mode.Length != 0) ? ref mode[0] : ref *null)
				{
					BeginMode* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						int* ptr4 = ptr3;
						fixed (T3* ptr5 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr4, type, ptr5, primcount, modestride, GL.EntryPoints[1248]);
						}
					}
				}
			}

			// Token: 0x06002679 RID: 9849 RVA: 0x00068B28 File Offset: 0x00066D28
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(BeginMode[] mode, int[] count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (BeginMode* ptr = ref (mode != null && mode.Length != 0) ? ref mode[0] : ref *null)
				{
					BeginMode* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						int* ptr4 = ptr3;
						fixed (T3* ptr5 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr4, type, ptr5, primcount, modestride, GL.EntryPoints[1248]);
						}
					}
				}
			}

			// Token: 0x0600267A RID: 9850 RVA: 0x00068B90 File Offset: 0x00066D90
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(BeginMode[] mode, int[] count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (BeginMode* ptr = ref (mode != null && mode.Length != 0) ? ref mode[0] : ref *null)
				{
					BeginMode* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						int* ptr4 = ptr3;
						fixed (T3* ptr5 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr4, type, ptr5, primcount, modestride, GL.EntryPoints[1248]);
						}
					}
				}
			}

			// Token: 0x0600267B RID: 9851 RVA: 0x00068BFC File Offset: 0x00066DFC
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiModeDrawElements<T3>(BeginMode[] mode, int[] count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount, int modestride) where T3 : struct
			{
				fixed (BeginMode* ptr = ref (mode != null && mode.Length != 0) ? ref mode[0] : ref *null)
				{
					BeginMode* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						int* ptr4 = ptr3;
						fixed (T3* ptr5 = &indices)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr4, type, ptr5, primcount, modestride, GL.EntryPoints[1248]);
						}
					}
				}
			}

			// Token: 0x0600267C RID: 9852 RVA: 0x00068C50 File Offset: 0x00066E50
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiModeDrawElements(ref BeginMode mode, ref int count, DrawElementsType type, IntPtr indices, int primcount, int modestride)
			{
				fixed (BeginMode* ptr = &mode)
				{
					BeginMode* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr3, type, indices, primcount, modestride, GL.EntryPoints[1248]);
					}
				}
			}

			// Token: 0x0600267D RID: 9853 RVA: 0x00068C7C File Offset: 0x00066E7C
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(ref BeginMode mode, ref int count, DrawElementsType type, [In] [Out] T3[] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (BeginMode* ptr = &mode)
				{
					BeginMode* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						int* ptr4 = ptr3;
						fixed (T3* ptr5 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr4, type, ptr5, primcount, modestride, GL.EntryPoints[1248]);
						}
					}
				}
			}

			// Token: 0x0600267E RID: 9854 RVA: 0x00068CBC File Offset: 0x00066EBC
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(ref BeginMode mode, ref int count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (BeginMode* ptr = &mode)
				{
					BeginMode* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						int* ptr4 = ptr3;
						fixed (T3* ptr5 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr4, type, ptr5, primcount, modestride, GL.EntryPoints[1248]);
						}
					}
				}
			}

			// Token: 0x0600267F RID: 9855 RVA: 0x00068D00 File Offset: 0x00066F00
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(ref BeginMode mode, ref int count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (BeginMode* ptr = &mode)
				{
					BeginMode* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						int* ptr4 = ptr3;
						fixed (T3* ptr5 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr4, type, ptr5, primcount, modestride, GL.EntryPoints[1248]);
						}
					}
				}
			}

			// Token: 0x06002680 RID: 9856 RVA: 0x00068D48 File Offset: 0x00066F48
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiModeDrawElements<T3>(ref BeginMode mode, ref int count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount, int modestride) where T3 : struct
			{
				fixed (BeginMode* ptr = &mode)
				{
					BeginMode* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						int* ptr4 = ptr3;
						fixed (T3* ptr5 = &indices)
						{
							calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), ptr2, ptr4, type, ptr5, primcount, modestride, GL.EntryPoints[1248]);
						}
					}
				}
			}

			// Token: 0x06002681 RID: 9857 RVA: 0x00068D78 File Offset: 0x00066F78
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements(BeginMode* mode, int* count, DrawElementsType type, IntPtr indices, int primcount, int modestride)
			{
				calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, indices, primcount, modestride, GL.EntryPoints[1248]);
			}

			// Token: 0x06002682 RID: 9858 RVA: 0x00068D94 File Offset: 0x00066F94
			[CLSCompliant(false)]
			[Obsolete("Use PrimitiveType overload instead")]
			public unsafe static void MultiModeDrawElements<T3>(BeginMode* mode, int* count, DrawElementsType type, [In] [Out] T3[] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, primcount, modestride, GL.EntryPoints[1248]);
				}
			}

			// Token: 0x06002683 RID: 9859 RVA: 0x00068DD0 File Offset: 0x00066FD0
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(BeginMode* mode, int* count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, primcount, modestride, GL.EntryPoints[1248]);
				}
			}

			// Token: 0x06002684 RID: 9860 RVA: 0x00068E10 File Offset: 0x00067010
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(BeginMode* mode, int* count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount, int modestride) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, primcount, modestride, GL.EntryPoints[1248]);
				}
			}

			// Token: 0x06002685 RID: 9861 RVA: 0x00068E50 File Offset: 0x00067050
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiModeDrawElements<T3>(BeginMode* mode, int* count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount, int modestride) where T3 : struct
			{
				fixed (T3* ptr = &indices)
				{
					calli(System.Void(System.Int32*,System.Int32*,System.Int32,System.IntPtr,System.Int32,System.Int32), mode, count, type, ptr, primcount, modestride, GL.EntryPoints[1248]);
				}
			}
		}

		// Token: 0x020004BF RID: 1215
		public static class Ingr
		{
			// Token: 0x06002686 RID: 9862 RVA: 0x00068E78 File Offset: 0x00067078
			[Obsolete("Use IngrBlendFuncSeparate overload instead")]
			public static void BlendFuncSeparate(All sfactorRGB, All dfactorRGB, All sfactorAlpha, All dfactorAlpha)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha, GL.EntryPoints[125]);
			}

			// Token: 0x06002687 RID: 9863 RVA: 0x00068E8C File Offset: 0x0006708C
			public static void BlendFuncSeparate(IngrBlendFuncSeparate sfactorRGB, IngrBlendFuncSeparate dfactorRGB, IngrBlendFuncSeparate sfactorAlpha, IngrBlendFuncSeparate dfactorAlpha)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha, GL.EntryPoints[125]);
			}
		}

		// Token: 0x020004C0 RID: 1216
		public static class Intel
		{
			// Token: 0x06002688 RID: 9864 RVA: 0x00068EA0 File Offset: 0x000670A0
			[CLSCompliant(false)]
			public static void BeginPerfQuery(int queryHandle)
			{
				calli(System.Void(System.UInt32), queryHandle, GL.EntryPoints[31]);
			}

			// Token: 0x06002689 RID: 9865 RVA: 0x00068EB0 File Offset: 0x000670B0
			[CLSCompliant(false)]
			public static void BeginPerfQuery(uint queryHandle)
			{
				calli(System.Void(System.UInt32), queryHandle, GL.EntryPoints[31]);
			}

			// Token: 0x0600268A RID: 9866 RVA: 0x00068EC0 File Offset: 0x000670C0
			public static void ColorPointer(int size, VertexPointerType type, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), size, type, pointer, GL.EntryPoints[238]);
			}

			// Token: 0x0600268B RID: 9867 RVA: 0x00068ED8 File Offset: 0x000670D8
			[CLSCompliant(false)]
			public unsafe static void ColorPointer<T2>(int size, VertexPointerType type, [In] [Out] T2[] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), size, type, ptr, GL.EntryPoints[238]);
				}
			}

			// Token: 0x0600268C RID: 9868 RVA: 0x00068F10 File Offset: 0x00067110
			[CLSCompliant(false)]
			public unsafe static void ColorPointer<T2>(int size, VertexPointerType type, [In] [Out] T2[,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), size, type, ptr, GL.EntryPoints[238]);
				}
			}

			// Token: 0x0600268D RID: 9869 RVA: 0x00068F4C File Offset: 0x0006714C
			[CLSCompliant(false)]
			public unsafe static void ColorPointer<T2>(int size, VertexPointerType type, [In] [Out] T2[,,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), size, type, ptr, GL.EntryPoints[238]);
				}
			}

			// Token: 0x0600268E RID: 9870 RVA: 0x00068F88 File Offset: 0x00067188
			public unsafe static void ColorPointer<T2>(int size, VertexPointerType type, [In] [Out] ref T2 pointer) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), size, type, ptr, GL.EntryPoints[238]);
				}
			}

			// Token: 0x0600268F RID: 9871 RVA: 0x00068FAC File Offset: 0x000671AC
			[CLSCompliant(false)]
			public unsafe static void CreatePerfQuery(int queryId, [Out] int[] queryHandle)
			{
				fixed (int* ptr = ref (queryHandle != null && queryHandle.Length != 0) ? ref queryHandle[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32*), queryId, ptr, GL.EntryPoints[333]);
				}
			}

			// Token: 0x06002690 RID: 9872 RVA: 0x00068FE0 File Offset: 0x000671E0
			[CLSCompliant(false)]
			public unsafe static void CreatePerfQuery(int queryId, out int queryHandle)
			{
				fixed (int* ptr = &queryHandle)
				{
					calli(System.Void(System.UInt32,System.UInt32*), queryId, ptr, GL.EntryPoints[333]);
				}
			}

			// Token: 0x06002691 RID: 9873 RVA: 0x00069004 File Offset: 0x00067204
			[CLSCompliant(false)]
			public unsafe static void CreatePerfQuery(int queryId, [Out] int* queryHandle)
			{
				calli(System.Void(System.UInt32,System.UInt32*), queryId, queryHandle, GL.EntryPoints[333]);
			}

			// Token: 0x06002692 RID: 9874 RVA: 0x00069018 File Offset: 0x00067218
			[CLSCompliant(false)]
			public unsafe static void CreatePerfQuery(uint queryId, [Out] uint[] queryHandle)
			{
				fixed (uint* ptr = ref (queryHandle != null && queryHandle.Length != 0) ? ref queryHandle[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32*), queryId, ptr, GL.EntryPoints[333]);
				}
			}

			// Token: 0x06002693 RID: 9875 RVA: 0x0006904C File Offset: 0x0006724C
			[CLSCompliant(false)]
			public unsafe static void CreatePerfQuery(uint queryId, out uint queryHandle)
			{
				fixed (uint* ptr = &queryHandle)
				{
					calli(System.Void(System.UInt32,System.UInt32*), queryId, ptr, GL.EntryPoints[333]);
				}
			}

			// Token: 0x06002694 RID: 9876 RVA: 0x00069070 File Offset: 0x00067270
			[CLSCompliant(false)]
			public unsafe static void CreatePerfQuery(uint queryId, [Out] uint* queryHandle)
			{
				calli(System.Void(System.UInt32,System.UInt32*), queryId, queryHandle, GL.EntryPoints[333]);
			}

			// Token: 0x06002695 RID: 9877 RVA: 0x00069084 File Offset: 0x00067284
			[CLSCompliant(false)]
			public static void DeletePerfQuery(int queryHandle)
			{
				calli(System.Void(System.UInt32), queryHandle, GL.EntryPoints[376]);
			}

			// Token: 0x06002696 RID: 9878 RVA: 0x00069098 File Offset: 0x00067298
			[CLSCompliant(false)]
			public static void DeletePerfQuery(uint queryHandle)
			{
				calli(System.Void(System.UInt32), queryHandle, GL.EntryPoints[376]);
			}

			// Token: 0x06002697 RID: 9879 RVA: 0x000690AC File Offset: 0x000672AC
			[CLSCompliant(false)]
			public static void EndPerfQuery(int queryHandle)
			{
				calli(System.Void(System.UInt32), queryHandle, GL.EntryPoints[488]);
			}

			// Token: 0x06002698 RID: 9880 RVA: 0x000690C0 File Offset: 0x000672C0
			[CLSCompliant(false)]
			public static void EndPerfQuery(uint queryHandle)
			{
				calli(System.Void(System.UInt32), queryHandle, GL.EntryPoints[488]);
			}

			// Token: 0x06002699 RID: 9881 RVA: 0x000690D4 File Offset: 0x000672D4
			[CLSCompliant(false)]
			public static int GetFirstPerfQueryI()
			{
				int result;
				calli(System.Void(System.UInt32*), ref result, GL.EntryPoints[701]);
				return result;
			}

			// Token: 0x0600269A RID: 9882 RVA: 0x000690F4 File Offset: 0x000672F4
			[CLSCompliant(false)]
			public unsafe static void GetFirstPerfQueryI([Out] int[] queryId)
			{
				fixed (int* ptr = ref (queryId != null && queryId.Length != 0) ? ref queryId[0] : ref *null)
				{
					calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[701]);
				}
			}

			// Token: 0x0600269B RID: 9883 RVA: 0x00069128 File Offset: 0x00067328
			[CLSCompliant(false)]
			public unsafe static void GetFirstPerfQueryI(out int queryId)
			{
				fixed (int* ptr = &queryId)
				{
					calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[701]);
				}
			}

			// Token: 0x0600269C RID: 9884 RVA: 0x0006914C File Offset: 0x0006734C
			[CLSCompliant(false)]
			public unsafe static void GetFirstPerfQueryI([Out] int* queryId)
			{
				calli(System.Void(System.UInt32*), queryId, GL.EntryPoints[701]);
			}

			// Token: 0x0600269D RID: 9885 RVA: 0x00069160 File Offset: 0x00067360
			[CLSCompliant(false)]
			public unsafe static void GetFirstPerfQueryI([Out] uint[] queryId)
			{
				fixed (uint* ptr = ref (queryId != null && queryId.Length != 0) ? ref queryId[0] : ref *null)
				{
					calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[701]);
				}
			}

			// Token: 0x0600269E RID: 9886 RVA: 0x00069194 File Offset: 0x00067394
			[CLSCompliant(false)]
			public unsafe static void GetFirstPerfQueryI(out uint queryId)
			{
				fixed (uint* ptr = &queryId)
				{
					calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[701]);
				}
			}

			// Token: 0x0600269F RID: 9887 RVA: 0x000691B8 File Offset: 0x000673B8
			[CLSCompliant(false)]
			public unsafe static void GetFirstPerfQueryI([Out] uint* queryId)
			{
				calli(System.Void(System.UInt32*), queryId, GL.EntryPoints[701]);
			}

			// Token: 0x060026A0 RID: 9888 RVA: 0x000691CC File Offset: 0x000673CC
			[CLSCompliant(false)]
			public static int GetNextPerfQueryI(int queryId)
			{
				int result;
				calli(System.Void(System.UInt32,System.UInt32*), queryId, ref result, GL.EntryPoints[806]);
				return result;
			}

			// Token: 0x060026A1 RID: 9889 RVA: 0x000691F0 File Offset: 0x000673F0
			[CLSCompliant(false)]
			public static int GetNextPerfQueryI(uint queryId)
			{
				int result;
				calli(System.Void(System.UInt32,System.UInt32*), queryId, ref result, GL.EntryPoints[806]);
				return result;
			}

			// Token: 0x060026A2 RID: 9890 RVA: 0x00069214 File Offset: 0x00067414
			[CLSCompliant(false)]
			public unsafe static void GetNextPerfQueryI(int queryId, [Out] int[] nextQueryId)
			{
				fixed (int* ptr = ref (nextQueryId != null && nextQueryId.Length != 0) ? ref nextQueryId[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32*), queryId, ptr, GL.EntryPoints[806]);
				}
			}

			// Token: 0x060026A3 RID: 9891 RVA: 0x00069248 File Offset: 0x00067448
			[CLSCompliant(false)]
			public unsafe static void GetNextPerfQueryI(int queryId, out int nextQueryId)
			{
				fixed (int* ptr = &nextQueryId)
				{
					calli(System.Void(System.UInt32,System.UInt32*), queryId, ptr, GL.EntryPoints[806]);
				}
			}

			// Token: 0x060026A4 RID: 9892 RVA: 0x0006926C File Offset: 0x0006746C
			[CLSCompliant(false)]
			public unsafe static void GetNextPerfQueryI(int queryId, [Out] int* nextQueryId)
			{
				calli(System.Void(System.UInt32,System.UInt32*), queryId, nextQueryId, GL.EntryPoints[806]);
			}

			// Token: 0x060026A5 RID: 9893 RVA: 0x00069280 File Offset: 0x00067480
			[CLSCompliant(false)]
			public unsafe static void GetNextPerfQueryI(uint queryId, [Out] uint[] nextQueryId)
			{
				fixed (uint* ptr = ref (nextQueryId != null && nextQueryId.Length != 0) ? ref nextQueryId[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32*), queryId, ptr, GL.EntryPoints[806]);
				}
			}

			// Token: 0x060026A6 RID: 9894 RVA: 0x000692B4 File Offset: 0x000674B4
			[CLSCompliant(false)]
			public unsafe static void GetNextPerfQueryI(uint queryId, out uint nextQueryId)
			{
				fixed (uint* ptr = &nextQueryId)
				{
					calli(System.Void(System.UInt32,System.UInt32*), queryId, ptr, GL.EntryPoints[806]);
				}
			}

			// Token: 0x060026A7 RID: 9895 RVA: 0x000692D8 File Offset: 0x000674D8
			[CLSCompliant(false)]
			public unsafe static void GetNextPerfQueryI(uint queryId, [Out] uint* nextQueryId)
			{
				calli(System.Void(System.UInt32,System.UInt32*), queryId, nextQueryId, GL.EntryPoints[806]);
			}

			// Token: 0x060026A8 RID: 9896 RVA: 0x000692EC File Offset: 0x000674EC
			[CLSCompliant(false)]
			public unsafe static void GetPerfCounterInfo(int queryId, int counterId, int counterNameLength, [Out] StringBuilder counterName, int counterDescLength, [Out] StringBuilder counterDesc, [Out] int[] counterOffset, [Out] int[] counterDataSize, [Out] int[] counterTypeEnum, [Out] int[] counterDataTypeEnum, [Out] long[] rawCounterMaxValue)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterName.Capacity);
				IntPtr intPtr2 = intPtr;
				IntPtr intPtr3 = Marshal.AllocHGlobal((IntPtr)counterDesc.Capacity);
				IntPtr intPtr4 = intPtr3;
				fixed (int* ptr = ref (counterOffset != null && counterOffset.Length != 0) ? ref counterOffset[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (counterDataSize != null && counterDataSize.Length != 0) ? ref counterDataSize[0] : ref *null)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = ref (counterTypeEnum != null && counterTypeEnum.Length != 0) ? ref counterTypeEnum[0] : ref *null)
						{
							int* ptr6 = ptr5;
							fixed (int* ptr7 = ref (counterDataTypeEnum != null && counterDataTypeEnum.Length != 0) ? ref counterDataTypeEnum[0] : ref *null)
							{
								int* ptr8 = ptr7;
								fixed (long* ptr9 = ref (rawCounterMaxValue != null && rawCounterMaxValue.Length != 0) ? ref rawCounterMaxValue[0] : ref *null)
								{
									calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt64*), queryId, counterId, counterNameLength, intPtr2, counterDescLength, intPtr4, ptr2, ptr4, ptr6, ptr8, ptr9, GL.EntryPoints[847]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, counterName);
									Marshal.FreeHGlobal(intPtr);
									BindingsBase.MarshalPtrToStringBuilder(intPtr3, counterDesc);
									Marshal.FreeHGlobal(intPtr3);
								}
							}
						}
					}
				}
			}

			// Token: 0x060026A9 RID: 9897 RVA: 0x000693C8 File Offset: 0x000675C8
			[CLSCompliant(false)]
			public unsafe static void GetPerfCounterInfo(int queryId, int counterId, int counterNameLength, [Out] StringBuilder counterName, int counterDescLength, [Out] StringBuilder counterDesc, out int counterOffset, out int counterDataSize, out int counterTypeEnum, out int counterDataTypeEnum, out long rawCounterMaxValue)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterName.Capacity);
				IntPtr intPtr2 = intPtr;
				IntPtr intPtr3 = Marshal.AllocHGlobal((IntPtr)counterDesc.Capacity);
				IntPtr intPtr4 = intPtr3;
				fixed (int* ptr = &counterOffset)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &counterDataSize)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = &counterTypeEnum)
						{
							int* ptr6 = ptr5;
							fixed (int* ptr7 = &counterDataTypeEnum)
							{
								int* ptr8 = ptr7;
								fixed (long* ptr9 = &rawCounterMaxValue)
								{
									calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt64*), queryId, counterId, counterNameLength, intPtr2, counterDescLength, intPtr4, ptr2, ptr4, ptr6, ptr8, ptr9, GL.EntryPoints[847]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, counterName);
									Marshal.FreeHGlobal(intPtr);
									BindingsBase.MarshalPtrToStringBuilder(intPtr3, counterDesc);
									Marshal.FreeHGlobal(intPtr3);
								}
							}
						}
					}
				}
			}

			// Token: 0x060026AA RID: 9898 RVA: 0x00069440 File Offset: 0x00067640
			[CLSCompliant(false)]
			public unsafe static void GetPerfCounterInfo(int queryId, int counterId, int counterNameLength, [Out] StringBuilder counterName, int counterDescLength, [Out] StringBuilder counterDesc, [Out] int* counterOffset, [Out] int* counterDataSize, [Out] int* counterTypeEnum, [Out] int* counterDataTypeEnum, [Out] long* rawCounterMaxValue)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterName.Capacity);
				IntPtr intPtr2 = intPtr;
				IntPtr intPtr3 = Marshal.AllocHGlobal((IntPtr)counterDesc.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt64*), queryId, counterId, counterNameLength, intPtr2, counterDescLength, intPtr3, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue, GL.EntryPoints[847]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, counterName);
				Marshal.FreeHGlobal(intPtr);
				BindingsBase.MarshalPtrToStringBuilder(intPtr3, counterDesc);
				Marshal.FreeHGlobal(intPtr3);
			}

			// Token: 0x060026AB RID: 9899 RVA: 0x000694A4 File Offset: 0x000676A4
			[CLSCompliant(false)]
			public unsafe static void GetPerfCounterInfo(uint queryId, uint counterId, uint counterNameLength, [Out] StringBuilder counterName, uint counterDescLength, [Out] StringBuilder counterDesc, [Out] uint[] counterOffset, [Out] uint[] counterDataSize, [Out] uint[] counterTypeEnum, [Out] uint[] counterDataTypeEnum, [Out] ulong[] rawCounterMaxValue)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterName.Capacity);
				IntPtr intPtr2 = intPtr;
				IntPtr intPtr3 = Marshal.AllocHGlobal((IntPtr)counterDesc.Capacity);
				IntPtr intPtr4 = intPtr3;
				fixed (uint* ptr = ref (counterOffset != null && counterOffset.Length != 0) ? ref counterOffset[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (uint* ptr3 = ref (counterDataSize != null && counterDataSize.Length != 0) ? ref counterDataSize[0] : ref *null)
					{
						uint* ptr4 = ptr3;
						fixed (uint* ptr5 = ref (counterTypeEnum != null && counterTypeEnum.Length != 0) ? ref counterTypeEnum[0] : ref *null)
						{
							uint* ptr6 = ptr5;
							fixed (uint* ptr7 = ref (counterDataTypeEnum != null && counterDataTypeEnum.Length != 0) ? ref counterDataTypeEnum[0] : ref *null)
							{
								uint* ptr8 = ptr7;
								fixed (ulong* ptr9 = ref (rawCounterMaxValue != null && rawCounterMaxValue.Length != 0) ? ref rawCounterMaxValue[0] : ref *null)
								{
									calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt64*), queryId, counterId, counterNameLength, intPtr2, counterDescLength, intPtr4, ptr2, ptr4, ptr6, ptr8, ptr9, GL.EntryPoints[847]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, counterName);
									Marshal.FreeHGlobal(intPtr);
									BindingsBase.MarshalPtrToStringBuilder(intPtr3, counterDesc);
									Marshal.FreeHGlobal(intPtr3);
								}
							}
						}
					}
				}
			}

			// Token: 0x060026AC RID: 9900 RVA: 0x00069580 File Offset: 0x00067780
			[CLSCompliant(false)]
			public unsafe static void GetPerfCounterInfo(uint queryId, uint counterId, uint counterNameLength, [Out] StringBuilder counterName, uint counterDescLength, [Out] StringBuilder counterDesc, out uint counterOffset, out uint counterDataSize, out uint counterTypeEnum, out uint counterDataTypeEnum, out ulong rawCounterMaxValue)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterName.Capacity);
				IntPtr intPtr2 = intPtr;
				IntPtr intPtr3 = Marshal.AllocHGlobal((IntPtr)counterDesc.Capacity);
				IntPtr intPtr4 = intPtr3;
				fixed (uint* ptr = &counterOffset)
				{
					uint* ptr2 = ptr;
					fixed (uint* ptr3 = &counterDataSize)
					{
						uint* ptr4 = ptr3;
						fixed (uint* ptr5 = &counterTypeEnum)
						{
							uint* ptr6 = ptr5;
							fixed (uint* ptr7 = &counterDataTypeEnum)
							{
								uint* ptr8 = ptr7;
								fixed (ulong* ptr9 = &rawCounterMaxValue)
								{
									calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt64*), queryId, counterId, counterNameLength, intPtr2, counterDescLength, intPtr4, ptr2, ptr4, ptr6, ptr8, ptr9, GL.EntryPoints[847]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, counterName);
									Marshal.FreeHGlobal(intPtr);
									BindingsBase.MarshalPtrToStringBuilder(intPtr3, counterDesc);
									Marshal.FreeHGlobal(intPtr3);
								}
							}
						}
					}
				}
			}

			// Token: 0x060026AD RID: 9901 RVA: 0x000695F8 File Offset: 0x000677F8
			[CLSCompliant(false)]
			public unsafe static void GetPerfCounterInfo(uint queryId, uint counterId, uint counterNameLength, [Out] StringBuilder counterName, uint counterDescLength, [Out] StringBuilder counterDesc, [Out] uint* counterOffset, [Out] uint* counterDataSize, [Out] uint* counterTypeEnum, [Out] uint* counterDataTypeEnum, [Out] ulong* rawCounterMaxValue)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterName.Capacity);
				IntPtr intPtr2 = intPtr;
				IntPtr intPtr3 = Marshal.AllocHGlobal((IntPtr)counterDesc.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt64*), queryId, counterId, counterNameLength, intPtr2, counterDescLength, intPtr3, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue, GL.EntryPoints[847]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, counterName);
				Marshal.FreeHGlobal(intPtr);
				BindingsBase.MarshalPtrToStringBuilder(intPtr3, counterDesc);
				Marshal.FreeHGlobal(intPtr3);
			}

			// Token: 0x060026AE RID: 9902 RVA: 0x0006965C File Offset: 0x0006785C
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData(int queryHandle, int flags, int dataSize, [Out] IntPtr data, [Out] int[] bytesWritten)
			{
				fixed (int* ptr = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, data, ptr, GL.EntryPoints[854]);
				}
			}

			// Token: 0x060026AF RID: 9903 RVA: 0x00069698 File Offset: 0x00067898
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData(int queryHandle, int flags, int dataSize, [Out] IntPtr data, out int bytesWritten)
			{
				fixed (int* ptr = &bytesWritten)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, data, ptr, GL.EntryPoints[854]);
				}
			}

			// Token: 0x060026B0 RID: 9904 RVA: 0x000696C0 File Offset: 0x000678C0
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData(int queryHandle, int flags, int dataSize, [Out] IntPtr data, [Out] int* bytesWritten)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, data, bytesWritten, GL.EntryPoints[854]);
			}

			// Token: 0x060026B1 RID: 9905 RVA: 0x000696D8 File Offset: 0x000678D8
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[] data, [Out] int[] bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (int* ptr3 = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[854]);
					}
				}
			}

			// Token: 0x060026B2 RID: 9906 RVA: 0x00069728 File Offset: 0x00067928
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[] data, out int bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (int* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[854]);
					}
				}
			}

			// Token: 0x060026B3 RID: 9907 RVA: 0x00069764 File Offset: 0x00067964
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[] data, [Out] int* bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr, bytesWritten, GL.EntryPoints[854]);
				}
			}

			// Token: 0x060026B4 RID: 9908 RVA: 0x0006979C File Offset: 0x0006799C
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[,] data, [Out] int[] bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (int* ptr3 = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[854]);
					}
				}
			}

			// Token: 0x060026B5 RID: 9909 RVA: 0x000697F0 File Offset: 0x000679F0
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[,] data, out int bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (int* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[854]);
					}
				}
			}

			// Token: 0x060026B6 RID: 9910 RVA: 0x00069830 File Offset: 0x00067A30
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[,] data, [Out] int* bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr, bytesWritten, GL.EntryPoints[854]);
				}
			}

			// Token: 0x060026B7 RID: 9911 RVA: 0x0006986C File Offset: 0x00067A6C
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[,,] data, [Out] int[] bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (int* ptr3 = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[854]);
					}
				}
			}

			// Token: 0x060026B8 RID: 9912 RVA: 0x000698C0 File Offset: 0x00067AC0
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[,,] data, out int bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (int* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[854]);
					}
				}
			}

			// Token: 0x060026B9 RID: 9913 RVA: 0x00069900 File Offset: 0x00067B00
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[,,] data, [Out] int* bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr, bytesWritten, GL.EntryPoints[854]);
				}
			}

			// Token: 0x060026BA RID: 9914 RVA: 0x00069940 File Offset: 0x00067B40
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] ref T3 data, [Out] int[] bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					T3* ptr2 = ptr;
					fixed (int* ptr3 = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[854]);
					}
				}
			}

			// Token: 0x060026BB RID: 9915 RVA: 0x00069980 File Offset: 0x00067B80
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] ref T3 data, out int bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					T3* ptr2 = ptr;
					fixed (int* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[854]);
					}
				}
			}

			// Token: 0x060026BC RID: 9916 RVA: 0x000699AC File Offset: 0x00067BAC
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] ref T3 data, [Out] int* bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr, bytesWritten, GL.EntryPoints[854]);
				}
			}

			// Token: 0x060026BD RID: 9917 RVA: 0x000699D4 File Offset: 0x00067BD4
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData(uint queryHandle, uint flags, int dataSize, [Out] IntPtr data, [Out] uint[] bytesWritten)
			{
				fixed (uint* ptr = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, data, ptr, GL.EntryPoints[854]);
				}
			}

			// Token: 0x060026BE RID: 9918 RVA: 0x00069A10 File Offset: 0x00067C10
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData(uint queryHandle, uint flags, int dataSize, [Out] IntPtr data, out uint bytesWritten)
			{
				fixed (uint* ptr = &bytesWritten)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, data, ptr, GL.EntryPoints[854]);
				}
			}

			// Token: 0x060026BF RID: 9919 RVA: 0x00069A38 File Offset: 0x00067C38
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData(uint queryHandle, uint flags, int dataSize, [Out] IntPtr data, [Out] uint* bytesWritten)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, data, bytesWritten, GL.EntryPoints[854]);
			}

			// Token: 0x060026C0 RID: 9920 RVA: 0x00069A50 File Offset: 0x00067C50
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[] data, [Out] uint[] bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (uint* ptr3 = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[854]);
					}
				}
			}

			// Token: 0x060026C1 RID: 9921 RVA: 0x00069AA0 File Offset: 0x00067CA0
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[] data, out uint bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (uint* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[854]);
					}
				}
			}

			// Token: 0x060026C2 RID: 9922 RVA: 0x00069ADC File Offset: 0x00067CDC
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[] data, [Out] uint* bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr, bytesWritten, GL.EntryPoints[854]);
				}
			}

			// Token: 0x060026C3 RID: 9923 RVA: 0x00069B14 File Offset: 0x00067D14
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[,] data, [Out] uint[] bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (uint* ptr3 = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[854]);
					}
				}
			}

			// Token: 0x060026C4 RID: 9924 RVA: 0x00069B68 File Offset: 0x00067D68
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[,] data, out uint bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (uint* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[854]);
					}
				}
			}

			// Token: 0x060026C5 RID: 9925 RVA: 0x00069BA8 File Offset: 0x00067DA8
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[,] data, [Out] uint* bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr, bytesWritten, GL.EntryPoints[854]);
				}
			}

			// Token: 0x060026C6 RID: 9926 RVA: 0x00069BE4 File Offset: 0x00067DE4
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[,,] data, [Out] uint[] bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (uint* ptr3 = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[854]);
					}
				}
			}

			// Token: 0x060026C7 RID: 9927 RVA: 0x00069C38 File Offset: 0x00067E38
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[,,] data, out uint bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (uint* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[854]);
					}
				}
			}

			// Token: 0x060026C8 RID: 9928 RVA: 0x00069C78 File Offset: 0x00067E78
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[,,] data, [Out] uint* bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr, bytesWritten, GL.EntryPoints[854]);
				}
			}

			// Token: 0x060026C9 RID: 9929 RVA: 0x00069CB8 File Offset: 0x00067EB8
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] ref T3 data, [Out] uint[] bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					T3* ptr2 = ptr;
					fixed (uint* ptr3 = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[854]);
					}
				}
			}

			// Token: 0x060026CA RID: 9930 RVA: 0x00069CF8 File Offset: 0x00067EF8
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] ref T3 data, out uint bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					T3* ptr2 = ptr;
					fixed (uint* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[854]);
					}
				}
			}

			// Token: 0x060026CB RID: 9931 RVA: 0x00069D24 File Offset: 0x00067F24
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] ref T3 data, [Out] uint* bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr, bytesWritten, GL.EntryPoints[854]);
				}
			}

			// Token: 0x060026CC RID: 9932 RVA: 0x00069D4C File Offset: 0x00067F4C
			[CLSCompliant(false)]
			public static int GetPerfQueryIdByName([Out] StringBuilder queryName)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				calli(System.Void(System.IntPtr,System.UInt32*), intPtr, ref intPtr, GL.EntryPoints[855]);
				int result = (int)intPtr;
				BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
				Marshal.FreeHGlobal(intPtr);
				return result;
			}

			// Token: 0x060026CD RID: 9933 RVA: 0x00069D88 File Offset: 0x00067F88
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryIdByName([Out] StringBuilder queryName, [Out] int[] queryId)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = ref (queryId != null && queryId.Length != 0) ? ref queryId[0] : ref *null)
				{
					calli(System.Void(System.IntPtr,System.UInt32*), intPtr2, ptr, GL.EntryPoints[855]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060026CE RID: 9934 RVA: 0x00069DD8 File Offset: 0x00067FD8
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryIdByName([Out] StringBuilder queryName, out int queryId)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = &queryId)
				{
					calli(System.Void(System.IntPtr,System.UInt32*), intPtr2, ptr, GL.EntryPoints[855]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060026CF RID: 9935 RVA: 0x00069E14 File Offset: 0x00068014
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryIdByName([Out] StringBuilder queryName, [Out] int* queryId)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				calli(System.Void(System.IntPtr,System.UInt32*), intPtr, queryId, GL.EntryPoints[855]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x060026D0 RID: 9936 RVA: 0x00069E4C File Offset: 0x0006804C
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryIdByName([Out] StringBuilder queryName, [Out] uint[] queryId)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (uint* ptr = ref (queryId != null && queryId.Length != 0) ? ref queryId[0] : ref *null)
				{
					calli(System.Void(System.IntPtr,System.UInt32*), intPtr2, ptr, GL.EntryPoints[855]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060026D1 RID: 9937 RVA: 0x00069E9C File Offset: 0x0006809C
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryIdByName([Out] StringBuilder queryName, out uint queryId)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (uint* ptr = &queryId)
				{
					calli(System.Void(System.IntPtr,System.UInt32*), intPtr2, ptr, GL.EntryPoints[855]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x060026D2 RID: 9938 RVA: 0x00069ED8 File Offset: 0x000680D8
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryIdByName([Out] StringBuilder queryName, [Out] uint* queryId)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				calli(System.Void(System.IntPtr,System.UInt32*), intPtr, queryId, GL.EntryPoints[855]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x060026D3 RID: 9939 RVA: 0x00069F10 File Offset: 0x00068110
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryInfo(int queryId, int queryNameLength, [Out] StringBuilder queryName, [Out] int[] dataSize, [Out] int[] noCounters, [Out] int[] noInstances, [Out] int[] capsMask)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = ref (dataSize != null && dataSize.Length != 0) ? ref dataSize[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (noCounters != null && noCounters.Length != 0) ? ref noCounters[0] : ref *null)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = ref (noInstances != null && noInstances.Length != 0) ? ref noInstances[0] : ref *null)
						{
							int* ptr6 = ptr5;
							fixed (int* ptr7 = ref (capsMask != null && capsMask.Length != 0) ? ref capsMask[0] : ref *null)
							{
								calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*), queryId, queryNameLength, intPtr2, ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[856]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
								Marshal.FreeHGlobal(intPtr);
							}
						}
					}
				}
			}

			// Token: 0x060026D4 RID: 9940 RVA: 0x00069FAC File Offset: 0x000681AC
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryInfo(int queryId, int queryNameLength, [Out] StringBuilder queryName, out int dataSize, out int noCounters, out int noInstances, out int capsMask)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = &dataSize)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &noCounters)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = &noInstances)
						{
							int* ptr6 = ptr5;
							fixed (int* ptr7 = &capsMask)
							{
								calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*), queryId, queryNameLength, intPtr2, ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[856]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
								Marshal.FreeHGlobal(intPtr);
							}
						}
					}
				}
			}

			// Token: 0x060026D5 RID: 9941 RVA: 0x00069FFC File Offset: 0x000681FC
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryInfo(int queryId, int queryNameLength, [Out] StringBuilder queryName, [Out] int* dataSize, [Out] int* noCounters, [Out] int* noInstances, [Out] int* capsMask)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*), queryId, queryNameLength, intPtr, dataSize, noCounters, noInstances, capsMask, GL.EntryPoints[856]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x060026D6 RID: 9942 RVA: 0x0006A03C File Offset: 0x0006823C
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryInfo(uint queryId, uint queryNameLength, [Out] StringBuilder queryName, [Out] uint[] dataSize, [Out] uint[] noCounters, [Out] uint[] noInstances, [Out] uint[] capsMask)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (uint* ptr = ref (dataSize != null && dataSize.Length != 0) ? ref dataSize[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (uint* ptr3 = ref (noCounters != null && noCounters.Length != 0) ? ref noCounters[0] : ref *null)
					{
						uint* ptr4 = ptr3;
						fixed (uint* ptr5 = ref (noInstances != null && noInstances.Length != 0) ? ref noInstances[0] : ref *null)
						{
							uint* ptr6 = ptr5;
							fixed (uint* ptr7 = ref (capsMask != null && capsMask.Length != 0) ? ref capsMask[0] : ref *null)
							{
								calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*), queryId, queryNameLength, intPtr2, ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[856]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
								Marshal.FreeHGlobal(intPtr);
							}
						}
					}
				}
			}

			// Token: 0x060026D7 RID: 9943 RVA: 0x0006A0D8 File Offset: 0x000682D8
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryInfo(uint queryId, uint queryNameLength, [Out] StringBuilder queryName, out uint dataSize, out uint noCounters, out uint noInstances, out uint capsMask)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (uint* ptr = &dataSize)
				{
					uint* ptr2 = ptr;
					fixed (uint* ptr3 = &noCounters)
					{
						uint* ptr4 = ptr3;
						fixed (uint* ptr5 = &noInstances)
						{
							uint* ptr6 = ptr5;
							fixed (uint* ptr7 = &capsMask)
							{
								calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*), queryId, queryNameLength, intPtr2, ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[856]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
								Marshal.FreeHGlobal(intPtr);
							}
						}
					}
				}
			}

			// Token: 0x060026D8 RID: 9944 RVA: 0x0006A128 File Offset: 0x00068328
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryInfo(uint queryId, uint queryNameLength, [Out] StringBuilder queryName, [Out] uint* dataSize, [Out] uint* noCounters, [Out] uint* noInstances, [Out] uint* capsMask)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*), queryId, queryNameLength, intPtr, dataSize, noCounters, noInstances, capsMask, GL.EntryPoints[856]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x060026D9 RID: 9945 RVA: 0x0006A168 File Offset: 0x00068368
			[CLSCompliant(false)]
			public unsafe static IntPtr MapTexture2D(int texture, int level, int access, out int stride, out IntelMapTexture layout)
			{
				fixed (int* ptr = &stride)
				{
					int* ptr2 = ptr;
					fixed (IntelMapTexture* ptr3 = &layout)
					{
						return calli(System.IntPtr(System.UInt32,System.Int32,System.UInt32,System.Int32*,System.Int32*), texture, level, access, ptr2, ptr3, GL.EntryPoints[1191]);
					}
				}
			}

			// Token: 0x060026DA RID: 9946 RVA: 0x0006A194 File Offset: 0x00068394
			[CLSCompliant(false)]
			public unsafe static IntPtr MapTexture2D(int texture, int level, int access, [Out] int* stride, [Out] IntelMapTexture* layout)
			{
				return calli(System.IntPtr(System.UInt32,System.Int32,System.UInt32,System.Int32*,System.Int32*), texture, level, access, stride, layout, GL.EntryPoints[1191]);
			}

			// Token: 0x060026DB RID: 9947 RVA: 0x0006A1AC File Offset: 0x000683AC
			[CLSCompliant(false)]
			public unsafe static IntPtr MapTexture2D(uint texture, int level, uint access, out int stride, out IntelMapTexture layout)
			{
				fixed (int* ptr = &stride)
				{
					int* ptr2 = ptr;
					fixed (IntelMapTexture* ptr3 = &layout)
					{
						return calli(System.IntPtr(System.UInt32,System.Int32,System.UInt32,System.Int32*,System.Int32*), texture, level, access, ptr2, ptr3, GL.EntryPoints[1191]);
					}
				}
			}

			// Token: 0x060026DC RID: 9948 RVA: 0x0006A1D8 File Offset: 0x000683D8
			[CLSCompliant(false)]
			public unsafe static IntPtr MapTexture2D(uint texture, int level, uint access, [Out] int* stride, [Out] IntelMapTexture* layout)
			{
				return calli(System.IntPtr(System.UInt32,System.Int32,System.UInt32,System.Int32*,System.Int32*), texture, level, access, stride, layout, GL.EntryPoints[1191]);
			}

			// Token: 0x060026DD RID: 9949 RVA: 0x0006A1F0 File Offset: 0x000683F0
			public static void NormalPointer(NormalPointerType type, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.IntPtr), type, pointer, GL.EntryPoints[1430]);
			}

			// Token: 0x060026DE RID: 9950 RVA: 0x0006A204 File Offset: 0x00068404
			[CLSCompliant(false)]
			public unsafe static void NormalPointer<T1>(NormalPointerType type, [In] [Out] T1[] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), type, ptr, GL.EntryPoints[1430]);
				}
			}

			// Token: 0x060026DF RID: 9951 RVA: 0x0006A238 File Offset: 0x00068438
			[CLSCompliant(false)]
			public unsafe static void NormalPointer<T1>(NormalPointerType type, [In] [Out] T1[,] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), type, ptr, GL.EntryPoints[1430]);
				}
			}

			// Token: 0x060026E0 RID: 9952 RVA: 0x0006A270 File Offset: 0x00068470
			[CLSCompliant(false)]
			public unsafe static void NormalPointer<T1>(NormalPointerType type, [In] [Out] T1[,,] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), type, ptr, GL.EntryPoints[1430]);
				}
			}

			// Token: 0x060026E1 RID: 9953 RVA: 0x0006A2AC File Offset: 0x000684AC
			public unsafe static void NormalPointer<T1>(NormalPointerType type, [In] [Out] ref T1 pointer) where T1 : struct
			{
				fixed (T1* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.IntPtr), type, ptr, GL.EntryPoints[1430]);
				}
			}

			// Token: 0x060026E2 RID: 9954 RVA: 0x0006A2D0 File Offset: 0x000684D0
			[CLSCompliant(false)]
			public static void SyncTexture(int texture)
			{
				calli(System.Void(System.UInt32), texture, GL.EntryPoints[1906]);
			}

			// Token: 0x060026E3 RID: 9955 RVA: 0x0006A2E4 File Offset: 0x000684E4
			[CLSCompliant(false)]
			public static void SyncTexture(uint texture)
			{
				calli(System.Void(System.UInt32), texture, GL.EntryPoints[1906]);
			}

			// Token: 0x060026E4 RID: 9956 RVA: 0x0006A2F8 File Offset: 0x000684F8
			public static void TexCoordPointer(int size, VertexPointerType type, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), size, type, pointer, GL.EntryPoints[2013]);
			}

			// Token: 0x060026E5 RID: 9957 RVA: 0x0006A310 File Offset: 0x00068510
			[CLSCompliant(false)]
			public unsafe static void TexCoordPointer<T2>(int size, VertexPointerType type, [In] [Out] T2[] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), size, type, ptr, GL.EntryPoints[2013]);
				}
			}

			// Token: 0x060026E6 RID: 9958 RVA: 0x0006A348 File Offset: 0x00068548
			[CLSCompliant(false)]
			public unsafe static void TexCoordPointer<T2>(int size, VertexPointerType type, [In] [Out] T2[,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), size, type, ptr, GL.EntryPoints[2013]);
				}
			}

			// Token: 0x060026E7 RID: 9959 RVA: 0x0006A384 File Offset: 0x00068584
			[CLSCompliant(false)]
			public unsafe static void TexCoordPointer<T2>(int size, VertexPointerType type, [In] [Out] T2[,,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), size, type, ptr, GL.EntryPoints[2013]);
				}
			}

			// Token: 0x060026E8 RID: 9960 RVA: 0x0006A3C0 File Offset: 0x000685C0
			public unsafe static void TexCoordPointer<T2>(int size, VertexPointerType type, [In] [Out] ref T2 pointer) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), size, type, ptr, GL.EntryPoints[2013]);
				}
			}

			// Token: 0x060026E9 RID: 9961 RVA: 0x0006A3E4 File Offset: 0x000685E4
			[CLSCompliant(false)]
			public static void UnmapTexture2D(int texture, int level)
			{
				calli(System.Void(System.UInt32,System.Int32), texture, level, GL.EntryPoints[2213]);
			}

			// Token: 0x060026EA RID: 9962 RVA: 0x0006A3F8 File Offset: 0x000685F8
			[CLSCompliant(false)]
			public static void UnmapTexture2D(uint texture, int level)
			{
				calli(System.Void(System.UInt32,System.Int32), texture, level, GL.EntryPoints[2213]);
			}

			// Token: 0x060026EB RID: 9963 RVA: 0x0006A40C File Offset: 0x0006860C
			public static void VertexPointer(int size, VertexPointerType type, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), size, type, pointer, GL.EntryPoints[2545]);
			}

			// Token: 0x060026EC RID: 9964 RVA: 0x0006A424 File Offset: 0x00068624
			[CLSCompliant(false)]
			public unsafe static void VertexPointer<T2>(int size, VertexPointerType type, [In] [Out] T2[] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), size, type, ptr, GL.EntryPoints[2545]);
				}
			}

			// Token: 0x060026ED RID: 9965 RVA: 0x0006A45C File Offset: 0x0006865C
			[CLSCompliant(false)]
			public unsafe static void VertexPointer<T2>(int size, VertexPointerType type, [In] [Out] T2[,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), size, type, ptr, GL.EntryPoints[2545]);
				}
			}

			// Token: 0x060026EE RID: 9966 RVA: 0x0006A498 File Offset: 0x00068698
			[CLSCompliant(false)]
			public unsafe static void VertexPointer<T2>(int size, VertexPointerType type, [In] [Out] T2[,,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), size, type, ptr, GL.EntryPoints[2545]);
				}
			}

			// Token: 0x060026EF RID: 9967 RVA: 0x0006A4D4 File Offset: 0x000686D4
			public unsafe static void VertexPointer<T2>(int size, VertexPointerType type, [In] [Out] ref T2 pointer) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), size, type, ptr, GL.EntryPoints[2545]);
				}
			}
		}

		// Token: 0x020004C1 RID: 1217
		public static class Khr
		{
			// Token: 0x060026F0 RID: 9968 RVA: 0x0006A4F8 File Offset: 0x000686F8
			public static void DebugMessageCallback(DebugProcKhr callback, IntPtr userParam)
			{
				calli(System.Void(OpenTK.Graphics.OpenGL.DebugProcKhr,System.IntPtr), callback, userParam, GL.EntryPoints[349]);
			}

			// Token: 0x060026F1 RID: 9969 RVA: 0x0006A50C File Offset: 0x0006870C
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcKhr callback, [In] [Out] T1[] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL.DebugProcKhr,System.IntPtr), callback, ptr, GL.EntryPoints[349]);
				}
			}

			// Token: 0x060026F2 RID: 9970 RVA: 0x0006A540 File Offset: 0x00068740
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcKhr callback, [In] [Out] T1[,] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL.DebugProcKhr,System.IntPtr), callback, ptr, GL.EntryPoints[349]);
				}
			}

			// Token: 0x060026F3 RID: 9971 RVA: 0x0006A578 File Offset: 0x00068778
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcKhr callback, [In] [Out] T1[,,] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0, 0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL.DebugProcKhr,System.IntPtr), callback, ptr, GL.EntryPoints[349]);
				}
			}

			// Token: 0x060026F4 RID: 9972 RVA: 0x0006A5B4 File Offset: 0x000687B4
			public unsafe static void DebugMessageCallback<T1>(DebugProcKhr callback, [In] [Out] ref T1 userParam) where T1 : struct
			{
				fixed (T1* ptr = &userParam)
				{
					calli(System.Void(OpenTK.Graphics.OpenGL.DebugProcKhr,System.IntPtr), callback, ptr, GL.EntryPoints[349]);
				}
			}

			// Token: 0x060026F5 RID: 9973 RVA: 0x0006A5D8 File Offset: 0x000687D8
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(KhrDebug source, KhrDebug type, KhrDebug severity, int count, int[] ids, bool enabled)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[352]);
				}
			}

			// Token: 0x060026F6 RID: 9974 RVA: 0x0006A614 File Offset: 0x00068814
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(KhrDebug source, KhrDebug type, KhrDebug severity, int count, ref int ids, bool enabled)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[352]);
				}
			}

			// Token: 0x060026F7 RID: 9975 RVA: 0x0006A63C File Offset: 0x0006883C
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(KhrDebug source, KhrDebug type, KhrDebug severity, int count, int* ids, bool enabled)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[352]);
			}

			// Token: 0x060026F8 RID: 9976 RVA: 0x0006A658 File Offset: 0x00068858
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(KhrDebug source, KhrDebug type, KhrDebug severity, int count, uint[] ids, bool enabled)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[352]);
				}
			}

			// Token: 0x060026F9 RID: 9977 RVA: 0x0006A694 File Offset: 0x00068894
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(KhrDebug source, KhrDebug type, KhrDebug severity, int count, ref uint ids, bool enabled)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[352]);
				}
			}

			// Token: 0x060026FA RID: 9978 RVA: 0x0006A6BC File Offset: 0x000688BC
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(KhrDebug source, KhrDebug type, KhrDebug severity, int count, uint* ids, bool enabled)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[352]);
			}

			// Token: 0x060026FB RID: 9979 RVA: 0x0006A6D8 File Offset: 0x000688D8
			[CLSCompliant(false)]
			public static void DebugMessageInsert(KhrDebug source, KhrDebug type, int id, KhrDebug severity, int length, string buf)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[357]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x060026FC RID: 9980 RVA: 0x0006A70C File Offset: 0x0006890C
			[CLSCompliant(false)]
			public static void DebugMessageInsert(KhrDebug source, KhrDebug type, uint id, KhrDebug severity, int length, string buf)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[357]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x060026FD RID: 9981 RVA: 0x0006A740 File Offset: 0x00068940
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] KhrDebug[] sources, [Out] KhrDebug[] types, [Out] int[] ids, [Out] KhrDebug[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
			{
				fixed (KhrDebug* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
				{
					KhrDebug* ptr2 = ptr;
					fixed (KhrDebug* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
					{
						KhrDebug* ptr4 = ptr3;
						fixed (int* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
						{
							int* ptr6 = ptr5;
							fixed (KhrDebug* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
							{
								KhrDebug* ptr8 = ptr7;
								fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[691]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x060026FE RID: 9982 RVA: 0x0006A7F8 File Offset: 0x000689F8
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, out KhrDebug sources, out KhrDebug types, out int ids, out KhrDebug severities, out int lengths, [Out] StringBuilder messageLog)
			{
				fixed (KhrDebug* ptr = &sources)
				{
					KhrDebug* ptr2 = ptr;
					fixed (KhrDebug* ptr3 = &types)
					{
						KhrDebug* ptr4 = ptr3;
						fixed (int* ptr5 = &ids)
						{
							int* ptr6 = ptr5;
							fixed (KhrDebug* ptr7 = &severities)
							{
								KhrDebug* ptr8 = ptr7;
								fixed (int* ptr9 = &lengths)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[691]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x060026FF RID: 9983 RVA: 0x0006A850 File Offset: 0x00068A50
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] KhrDebug* sources, [Out] KhrDebug* types, [Out] int* ids, [Out] KhrDebug* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
				int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[691]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
				Marshal.FreeHGlobal(intPtr);
				return result;
			}

			// Token: 0x06002700 RID: 9984 RVA: 0x0006A894 File Offset: 0x00068A94
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] KhrDebug[] sources, [Out] KhrDebug[] types, [Out] uint[] ids, [Out] KhrDebug[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
			{
				fixed (KhrDebug* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
				{
					KhrDebug* ptr2 = ptr;
					fixed (KhrDebug* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
					{
						KhrDebug* ptr4 = ptr3;
						fixed (uint* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
						{
							uint* ptr6 = ptr5;
							fixed (KhrDebug* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
							{
								KhrDebug* ptr8 = ptr7;
								fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[691]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x06002701 RID: 9985 RVA: 0x0006A94C File Offset: 0x00068B4C
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, out KhrDebug sources, out KhrDebug types, out uint ids, out KhrDebug severities, out int lengths, [Out] StringBuilder messageLog)
			{
				fixed (KhrDebug* ptr = &sources)
				{
					KhrDebug* ptr2 = ptr;
					fixed (KhrDebug* ptr3 = &types)
					{
						KhrDebug* ptr4 = ptr3;
						fixed (uint* ptr5 = &ids)
						{
							uint* ptr6 = ptr5;
							fixed (KhrDebug* ptr7 = &severities)
							{
								KhrDebug* ptr8 = ptr7;
								fixed (int* ptr9 = &lengths)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[691]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x06002702 RID: 9986 RVA: 0x0006A9A4 File Offset: 0x00068BA4
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] KhrDebug* sources, [Out] KhrDebug* types, [Out] uint* ids, [Out] KhrDebug* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
				int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[691]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
				Marshal.FreeHGlobal(intPtr);
				return result;
			}

			// Token: 0x06002703 RID: 9987 RVA: 0x0006A9E8 File Offset: 0x00068BE8
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(KhrDebug identifier, int name, int bufSize, [Out] int[] length, [Out] StringBuilder label)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[826]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06002704 RID: 9988 RVA: 0x0006AA3C File Offset: 0x00068C3C
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(KhrDebug identifier, int name, int bufSize, out int length, [Out] StringBuilder label)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[826]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06002705 RID: 9989 RVA: 0x0006AA7C File Offset: 0x00068C7C
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(KhrDebug identifier, int name, int bufSize, [Out] int* length, [Out] StringBuilder label)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, length, intPtr, GL.EntryPoints[826]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06002706 RID: 9990 RVA: 0x0006AABC File Offset: 0x00068CBC
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(KhrDebug identifier, uint name, int bufSize, [Out] int[] length, [Out] StringBuilder label)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[826]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06002707 RID: 9991 RVA: 0x0006AB10 File Offset: 0x00068D10
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(KhrDebug identifier, uint name, int bufSize, out int length, [Out] StringBuilder label)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[826]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06002708 RID: 9992 RVA: 0x0006AB50 File Offset: 0x00068D50
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(KhrDebug identifier, uint name, int bufSize, [Out] int* length, [Out] StringBuilder label)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, length, intPtr, GL.EntryPoints[826]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06002709 RID: 9993 RVA: 0x0006AB90 File Offset: 0x00068D90
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label)
			{
				fixed (int* ptr2 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, ptr3, intPtr, GL.EntryPoints[831]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x0600270A RID: 9994 RVA: 0x0006ABE0 File Offset: 0x00068DE0
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, out int length, [Out] StringBuilder label)
			{
				fixed (int* ptr2 = &length)
				{
					int* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, ptr3, intPtr, GL.EntryPoints[831]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x0600270B RID: 9995 RVA: 0x0006AC20 File Offset: 0x00068E20
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [Out] int* length, [Out] StringBuilder label)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, length, intPtr, GL.EntryPoints[831]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x0600270C RID: 9996 RVA: 0x0006AC5C File Offset: 0x00068E5C
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[831]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x0600270D RID: 9997 RVA: 0x0006ACC0 File Offset: 0x00068EC0
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = &length)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[831]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x0600270E RID: 9998 RVA: 0x0006AD14 File Offset: 0x00068F14
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[831]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x0600270F RID: 9999 RVA: 0x0006AD64 File Offset: 0x00068F64
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[831]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x06002710 RID: 10000 RVA: 0x0006ADCC File Offset: 0x00068FCC
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = &length)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[831]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x06002711 RID: 10001 RVA: 0x0006AE24 File Offset: 0x00069024
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[831]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06002712 RID: 10002 RVA: 0x0006AE78 File Offset: 0x00069078
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[831]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x06002713 RID: 10003 RVA: 0x0006AEE4 File Offset: 0x000690E4
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = &length)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[831]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x06002714 RID: 10004 RVA: 0x0006AF3C File Offset: 0x0006913C
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[831]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06002715 RID: 10005 RVA: 0x0006AF90 File Offset: 0x00069190
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = &ptr)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[831]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x06002716 RID: 10006 RVA: 0x0006AFE4 File Offset: 0x000691E4
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = &ptr)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = &length)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[831]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x06002717 RID: 10007 RVA: 0x0006B024 File Offset: 0x00069224
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = &ptr)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[831]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06002718 RID: 10008 RVA: 0x0006B064 File Offset: 0x00069264
			public static void GetPointer(KhrDebug pname, [Out] IntPtr @params)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, @params, GL.EntryPoints[869]);
			}

			// Token: 0x06002719 RID: 10009 RVA: 0x0006B078 File Offset: 0x00069278
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T1>(KhrDebug pname, [In] [Out] T1[] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[869]);
				}
			}

			// Token: 0x0600271A RID: 10010 RVA: 0x0006B0AC File Offset: 0x000692AC
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T1>(KhrDebug pname, [In] [Out] T1[,] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[869]);
				}
			}

			// Token: 0x0600271B RID: 10011 RVA: 0x0006B0E4 File Offset: 0x000692E4
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T1>(KhrDebug pname, [In] [Out] T1[,,] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[869]);
				}
			}

			// Token: 0x0600271C RID: 10012 RVA: 0x0006B120 File Offset: 0x00069320
			public unsafe static void GetPointer<T1>(KhrDebug pname, [In] [Out] ref T1 @params) where T1 : struct
			{
				fixed (T1* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[869]);
				}
			}

			// Token: 0x0600271D RID: 10013 RVA: 0x0006B144 File Offset: 0x00069344
			[CLSCompliant(false)]
			public static void ObjectLabel(KhrDebug identifier, int name, int length, string label)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), identifier, name, length, intPtr, GL.EntryPoints[1442]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x0600271E RID: 10014 RVA: 0x0006B174 File Offset: 0x00069374
			[CLSCompliant(false)]
			public static void ObjectLabel(KhrDebug identifier, uint name, int length, string label)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), identifier, name, length, intPtr, GL.EntryPoints[1442]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x0600271F RID: 10015 RVA: 0x0006B1A4 File Offset: 0x000693A4
			public static void ObjectPtrLabel(IntPtr ptr, int length, string label)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr, length, intPtr, GL.EntryPoints[1444]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06002720 RID: 10016 RVA: 0x0006B1D4 File Offset: 0x000693D4
			[CLSCompliant(false)]
			public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[] ptr, int length, string label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
					calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[1444]);
					BindingsBase.FreeStringPtr(intPtr);
				}
			}

			// Token: 0x06002721 RID: 10017 RVA: 0x0006B218 File Offset: 0x00069418
			[CLSCompliant(false)]
			public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int length, string label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
					calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[1444]);
					BindingsBase.FreeStringPtr(intPtr);
				}
			}

			// Token: 0x06002722 RID: 10018 RVA: 0x0006B260 File Offset: 0x00069460
			[CLSCompliant(false)]
			public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int length, string label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
					calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[1444]);
					BindingsBase.FreeStringPtr(intPtr);
				}
			}

			// Token: 0x06002723 RID: 10019 RVA: 0x0006B2A8 File Offset: 0x000694A8
			public unsafe static void ObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int length, string label) where T0 : struct
			{
				fixed (T0* ptr2 = &ptr)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
					calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[1444]);
					BindingsBase.FreeStringPtr(intPtr);
				}
			}

			// Token: 0x06002724 RID: 10020 RVA: 0x0006B2D8 File Offset: 0x000694D8
			public static void PopDebugGroup()
			{
				calli(System.Void(), GL.EntryPoints[1526]);
			}

			// Token: 0x06002725 RID: 10021 RVA: 0x0006B2EC File Offset: 0x000694EC
			[CLSCompliant(false)]
			public static void PushDebugGroup(KhrDebug source, int id, int length, string message)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(message);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), source, id, length, intPtr, GL.EntryPoints[1708]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06002726 RID: 10022 RVA: 0x0006B31C File Offset: 0x0006951C
			[CLSCompliant(false)]
			public static void PushDebugGroup(KhrDebug source, uint id, int length, string message)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(message);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), source, id, length, intPtr, GL.EntryPoints[1708]);
				BindingsBase.FreeStringPtr(intPtr);
			}
		}

		// Token: 0x020004C2 RID: 1218
		public static class Mesa
		{
			// Token: 0x06002727 RID: 10023 RVA: 0x0006B34C File Offset: 0x0006954C
			public static void ResizeBuffers()
			{
				calli(System.Void(), GL.EntryPoints[1795]);
			}

			// Token: 0x06002728 RID: 10024 RVA: 0x0006B360 File Offset: 0x00069560
			public static void WindowPos2(double x, double y)
			{
				calli(System.Void(System.Double,System.Double), x, y, GL.EntryPoints[2604]);
			}

			// Token: 0x06002729 RID: 10025 RVA: 0x0006B374 File Offset: 0x00069574
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[2607]);
				}
			}

			// Token: 0x0600272A RID: 10026 RVA: 0x0006B3A8 File Offset: 0x000695A8
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[2607]);
				}
			}

			// Token: 0x0600272B RID: 10027 RVA: 0x0006B3CC File Offset: 0x000695CC
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(double* v)
			{
				calli(System.Void(System.Double*), v, GL.EntryPoints[2607]);
			}

			// Token: 0x0600272C RID: 10028 RVA: 0x0006B3E0 File Offset: 0x000695E0
			public static void WindowPos2(float x, float y)
			{
				calli(System.Void(System.Single,System.Single), x, y, GL.EntryPoints[2610]);
			}

			// Token: 0x0600272D RID: 10029 RVA: 0x0006B3F4 File Offset: 0x000695F4
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[2613]);
				}
			}

			// Token: 0x0600272E RID: 10030 RVA: 0x0006B428 File Offset: 0x00069628
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[2613]);
				}
			}

			// Token: 0x0600272F RID: 10031 RVA: 0x0006B44C File Offset: 0x0006964C
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(float* v)
			{
				calli(System.Void(System.Single*), v, GL.EntryPoints[2613]);
			}

			// Token: 0x06002730 RID: 10032 RVA: 0x0006B460 File Offset: 0x00069660
			public static void WindowPos2(int x, int y)
			{
				calli(System.Void(System.Int32,System.Int32), x, y, GL.EntryPoints[2616]);
			}

			// Token: 0x06002731 RID: 10033 RVA: 0x0006B474 File Offset: 0x00069674
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2619]);
				}
			}

			// Token: 0x06002732 RID: 10034 RVA: 0x0006B4A8 File Offset: 0x000696A8
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2619]);
				}
			}

			// Token: 0x06002733 RID: 10035 RVA: 0x0006B4CC File Offset: 0x000696CC
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(int* v)
			{
				calli(System.Void(System.Int32*), v, GL.EntryPoints[2619]);
			}

			// Token: 0x06002734 RID: 10036 RVA: 0x0006B4E0 File Offset: 0x000696E0
			public static void WindowPos2(short x, short y)
			{
				calli(System.Void(System.Int16,System.Int16), x, y, GL.EntryPoints[2622]);
			}

			// Token: 0x06002735 RID: 10037 RVA: 0x0006B4F4 File Offset: 0x000696F4
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2625]);
				}
			}

			// Token: 0x06002736 RID: 10038 RVA: 0x0006B528 File Offset: 0x00069728
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2625]);
				}
			}

			// Token: 0x06002737 RID: 10039 RVA: 0x0006B54C File Offset: 0x0006974C
			[CLSCompliant(false)]
			public unsafe static void WindowPos2(short* v)
			{
				calli(System.Void(System.Int16*), v, GL.EntryPoints[2625]);
			}

			// Token: 0x06002738 RID: 10040 RVA: 0x0006B560 File Offset: 0x00069760
			public static void WindowPos3(double x, double y, double z)
			{
				calli(System.Void(System.Double,System.Double,System.Double), x, y, z, GL.EntryPoints[2628]);
			}

			// Token: 0x06002739 RID: 10041 RVA: 0x0006B578 File Offset: 0x00069778
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[2631]);
				}
			}

			// Token: 0x0600273A RID: 10042 RVA: 0x0006B5AC File Offset: 0x000697AC
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[2631]);
				}
			}

			// Token: 0x0600273B RID: 10043 RVA: 0x0006B5D0 File Offset: 0x000697D0
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(double* v)
			{
				calli(System.Void(System.Double*), v, GL.EntryPoints[2631]);
			}

			// Token: 0x0600273C RID: 10044 RVA: 0x0006B5E4 File Offset: 0x000697E4
			public static void WindowPos3(float x, float y, float z)
			{
				calli(System.Void(System.Single,System.Single,System.Single), x, y, z, GL.EntryPoints[2634]);
			}

			// Token: 0x0600273D RID: 10045 RVA: 0x0006B5FC File Offset: 0x000697FC
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[2637]);
				}
			}

			// Token: 0x0600273E RID: 10046 RVA: 0x0006B630 File Offset: 0x00069830
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[2637]);
				}
			}

			// Token: 0x0600273F RID: 10047 RVA: 0x0006B654 File Offset: 0x00069854
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(float* v)
			{
				calli(System.Void(System.Single*), v, GL.EntryPoints[2637]);
			}

			// Token: 0x06002740 RID: 10048 RVA: 0x0006B668 File Offset: 0x00069868
			public static void WindowPos3(int x, int y, int z)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), x, y, z, GL.EntryPoints[2640]);
			}

			// Token: 0x06002741 RID: 10049 RVA: 0x0006B680 File Offset: 0x00069880
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2643]);
				}
			}

			// Token: 0x06002742 RID: 10050 RVA: 0x0006B6B4 File Offset: 0x000698B4
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2643]);
				}
			}

			// Token: 0x06002743 RID: 10051 RVA: 0x0006B6D8 File Offset: 0x000698D8
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(int* v)
			{
				calli(System.Void(System.Int32*), v, GL.EntryPoints[2643]);
			}

			// Token: 0x06002744 RID: 10052 RVA: 0x0006B6EC File Offset: 0x000698EC
			public static void WindowPos3(short x, short y, short z)
			{
				calli(System.Void(System.Int16,System.Int16,System.Int16), x, y, z, GL.EntryPoints[2646]);
			}

			// Token: 0x06002745 RID: 10053 RVA: 0x0006B704 File Offset: 0x00069904
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2649]);
				}
			}

			// Token: 0x06002746 RID: 10054 RVA: 0x0006B738 File Offset: 0x00069938
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2649]);
				}
			}

			// Token: 0x06002747 RID: 10055 RVA: 0x0006B75C File Offset: 0x0006995C
			[CLSCompliant(false)]
			public unsafe static void WindowPos3(short* v)
			{
				calli(System.Void(System.Int16*), v, GL.EntryPoints[2649]);
			}

			// Token: 0x06002748 RID: 10056 RVA: 0x0006B770 File Offset: 0x00069970
			public static void WindowPos4(double x, double y, double z, double w)
			{
				calli(System.Void(System.Double,System.Double,System.Double,System.Double), x, y, z, w, GL.EntryPoints[2650]);
			}

			// Token: 0x06002749 RID: 10057 RVA: 0x0006B788 File Offset: 0x00069988
			[CLSCompliant(false)]
			public unsafe static void WindowPos4(double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[2651]);
				}
			}

			// Token: 0x0600274A RID: 10058 RVA: 0x0006B7BC File Offset: 0x000699BC
			[CLSCompliant(false)]
			public unsafe static void WindowPos4(ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[2651]);
				}
			}

			// Token: 0x0600274B RID: 10059 RVA: 0x0006B7E0 File Offset: 0x000699E0
			[CLSCompliant(false)]
			public unsafe static void WindowPos4(double* v)
			{
				calli(System.Void(System.Double*), v, GL.EntryPoints[2651]);
			}

			// Token: 0x0600274C RID: 10060 RVA: 0x0006B7F4 File Offset: 0x000699F4
			public static void WindowPos4(float x, float y, float z, float w)
			{
				calli(System.Void(System.Single,System.Single,System.Single,System.Single), x, y, z, w, GL.EntryPoints[2652]);
			}

			// Token: 0x0600274D RID: 10061 RVA: 0x0006B80C File Offset: 0x00069A0C
			[CLSCompliant(false)]
			public unsafe static void WindowPos4(float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[2653]);
				}
			}

			// Token: 0x0600274E RID: 10062 RVA: 0x0006B840 File Offset: 0x00069A40
			[CLSCompliant(false)]
			public unsafe static void WindowPos4(ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[2653]);
				}
			}

			// Token: 0x0600274F RID: 10063 RVA: 0x0006B864 File Offset: 0x00069A64
			[CLSCompliant(false)]
			public unsafe static void WindowPos4(float* v)
			{
				calli(System.Void(System.Single*), v, GL.EntryPoints[2653]);
			}

			// Token: 0x06002750 RID: 10064 RVA: 0x0006B878 File Offset: 0x00069A78
			public static void WindowPos4(int x, int y, int z, int w)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), x, y, z, w, GL.EntryPoints[2654]);
			}

			// Token: 0x06002751 RID: 10065 RVA: 0x0006B890 File Offset: 0x00069A90
			[CLSCompliant(false)]
			public unsafe static void WindowPos4(int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2655]);
				}
			}

			// Token: 0x06002752 RID: 10066 RVA: 0x0006B8C4 File Offset: 0x00069AC4
			[CLSCompliant(false)]
			public unsafe static void WindowPos4(ref int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2655]);
				}
			}

			// Token: 0x06002753 RID: 10067 RVA: 0x0006B8E8 File Offset: 0x00069AE8
			[CLSCompliant(false)]
			public unsafe static void WindowPos4(int* v)
			{
				calli(System.Void(System.Int32*), v, GL.EntryPoints[2655]);
			}

			// Token: 0x06002754 RID: 10068 RVA: 0x0006B8FC File Offset: 0x00069AFC
			public static void WindowPos4(short x, short y, short z, short w)
			{
				calli(System.Void(System.Int16,System.Int16,System.Int16,System.Int16), x, y, z, w, GL.EntryPoints[2656]);
			}

			// Token: 0x06002755 RID: 10069 RVA: 0x0006B914 File Offset: 0x00069B14
			[CLSCompliant(false)]
			public unsafe static void WindowPos4(short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2657]);
				}
			}

			// Token: 0x06002756 RID: 10070 RVA: 0x0006B948 File Offset: 0x00069B48
			[CLSCompliant(false)]
			public unsafe static void WindowPos4(ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.Int16*), ptr, GL.EntryPoints[2657]);
				}
			}

			// Token: 0x06002757 RID: 10071 RVA: 0x0006B96C File Offset: 0x00069B6C
			[CLSCompliant(false)]
			public unsafe static void WindowPos4(short* v)
			{
				calli(System.Void(System.Int16*), v, GL.EntryPoints[2657]);
			}
		}

		// Token: 0x020004C3 RID: 1219
		public static class NV
		{
			// Token: 0x06002758 RID: 10072 RVA: 0x0006B980 File Offset: 0x00069B80
			[CLSCompliant(false)]
			public static void ActiveVarying(int program, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				calli(System.Void(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[8]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06002759 RID: 10073 RVA: 0x0006B9A8 File Offset: 0x00069BA8
			[CLSCompliant(false)]
			public static void ActiveVarying(uint program, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				calli(System.Void(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[8]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x0600275A RID: 10074 RVA: 0x0006B9D0 File Offset: 0x00069BD0
			[CLSCompliant(false)]
			public unsafe static bool AreProgramsResident(int n, int[] programs, [Out] bool[] residences)
			{
				fixed (int* ptr = ref (programs != null && programs.Length != 0) ? ref programs[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (bool* ptr3 = ref (residences != null && residences.Length != 0) ? ref residences[0] : ref *null)
					{
						return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, ptr2, ptr3, GL.EntryPoints[15]);
					}
				}
			}

			// Token: 0x0600275B RID: 10075 RVA: 0x0006BA18 File Offset: 0x00069C18
			[CLSCompliant(false)]
			public unsafe static bool AreProgramsResident(int n, ref int programs, out bool residences)
			{
				fixed (int* ptr = &programs)
				{
					int* ptr2 = ptr;
					fixed (bool* ptr3 = &residences)
					{
						return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, ptr2, ptr3, GL.EntryPoints[15]);
					}
				}
			}

			// Token: 0x0600275C RID: 10076 RVA: 0x0006BA3C File Offset: 0x00069C3C
			[CLSCompliant(false)]
			public unsafe static bool AreProgramsResident(int n, int* programs, [Out] bool* residences)
			{
				return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, programs, residences, GL.EntryPoints[15]);
			}

			// Token: 0x0600275D RID: 10077 RVA: 0x0006BA50 File Offset: 0x00069C50
			[CLSCompliant(false)]
			public unsafe static bool AreProgramsResident(int n, uint[] programs, [Out] bool[] residences)
			{
				fixed (uint* ptr = ref (programs != null && programs.Length != 0) ? ref programs[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (bool* ptr3 = ref (residences != null && residences.Length != 0) ? ref residences[0] : ref *null)
					{
						return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, ptr2, ptr3, GL.EntryPoints[15]);
					}
				}
			}

			// Token: 0x0600275E RID: 10078 RVA: 0x0006BA98 File Offset: 0x00069C98
			[CLSCompliant(false)]
			public unsafe static bool AreProgramsResident(int n, ref uint programs, out bool residences)
			{
				fixed (uint* ptr = &programs)
				{
					uint* ptr2 = ptr;
					fixed (bool* ptr3 = &residences)
					{
						return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, ptr2, ptr3, GL.EntryPoints[15]);
					}
				}
			}

			// Token: 0x0600275F RID: 10079 RVA: 0x0006BABC File Offset: 0x00069CBC
			[CLSCompliant(false)]
			public unsafe static bool AreProgramsResident(int n, uint* programs, [Out] bool* residences)
			{
				return calli(System.Byte(System.Int32,System.UInt32*,System.Boolean*), n, programs, residences, GL.EntryPoints[15]);
			}

			// Token: 0x06002760 RID: 10080 RVA: 0x0006BAD0 File Offset: 0x00069CD0
			[CLSCompliant(false)]
			public static void BeginConditionalRender(int id, NvConditionalRender mode)
			{
				calli(System.Void(System.UInt32,System.Int32), id, mode, GL.EntryPoints[26]);
			}

			// Token: 0x06002761 RID: 10081 RVA: 0x0006BAE4 File Offset: 0x00069CE4
			[CLSCompliant(false)]
			public static void BeginConditionalRender(uint id, NvConditionalRender mode)
			{
				calli(System.Void(System.UInt32,System.Int32), id, mode, GL.EntryPoints[26]);
			}

			// Token: 0x06002762 RID: 10082 RVA: 0x0006BAF8 File Offset: 0x00069CF8
			[CLSCompliant(false)]
			public static void BeginOcclusionQuery(int id)
			{
				calli(System.Void(System.UInt32), id, GL.EntryPoints[29]);
			}

			// Token: 0x06002763 RID: 10083 RVA: 0x0006BB08 File Offset: 0x00069D08
			[CLSCompliant(false)]
			public static void BeginOcclusionQuery(uint id)
			{
				calli(System.Void(System.UInt32), id, GL.EntryPoints[29]);
			}

			// Token: 0x06002764 RID: 10084 RVA: 0x0006BB18 File Offset: 0x00069D18
			public static void BeginTransformFeedback(NvTransformFeedback primitiveMode)
			{
				calli(System.Void(System.Int32), primitiveMode, GL.EntryPoints[37]);
			}

			// Token: 0x06002765 RID: 10085 RVA: 0x0006BB28 File Offset: 0x00069D28
			[CLSCompliant(false)]
			public static void BeginVideoCapture(int video_capture_slot)
			{
				calli(System.Void(System.UInt32), video_capture_slot, GL.EntryPoints[39]);
			}

			// Token: 0x06002766 RID: 10086 RVA: 0x0006BB38 File Offset: 0x00069D38
			[CLSCompliant(false)]
			public static void BeginVideoCapture(uint video_capture_slot)
			{
				calli(System.Void(System.UInt32), video_capture_slot, GL.EntryPoints[39]);
			}

			// Token: 0x06002767 RID: 10087 RVA: 0x0006BB48 File Offset: 0x00069D48
			[CLSCompliant(false)]
			public static void BindBufferBase(NvTransformFeedback target, int index, int buffer)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, buffer, GL.EntryPoints[46]);
			}

			// Token: 0x06002768 RID: 10088 RVA: 0x0006BB5C File Offset: 0x00069D5C
			[CLSCompliant(false)]
			public static void BindBufferBase(NvTransformFeedback target, uint index, uint buffer)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, buffer, GL.EntryPoints[46]);
			}

			// Token: 0x06002769 RID: 10089 RVA: 0x0006BB70 File Offset: 0x00069D70
			[CLSCompliant(false)]
			public static void BindBufferOffset(NvTransformFeedback target, int index, int buffer, IntPtr offset)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr), target, index, buffer, offset, GL.EntryPoints[48]);
			}

			// Token: 0x0600276A RID: 10090 RVA: 0x0006BB84 File Offset: 0x00069D84
			[CLSCompliant(false)]
			public static void BindBufferOffset(NvTransformFeedback target, uint index, uint buffer, IntPtr offset)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr), target, index, buffer, offset, GL.EntryPoints[48]);
			}

			// Token: 0x0600276B RID: 10091 RVA: 0x0006BB98 File Offset: 0x00069D98
			[CLSCompliant(false)]
			public static void BindBufferRange(NvTransformFeedback target, int index, int buffer, IntPtr offset, IntPtr size)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr), target, index, buffer, offset, size, GL.EntryPoints[51]);
			}

			// Token: 0x0600276C RID: 10092 RVA: 0x0006BBB0 File Offset: 0x00069DB0
			[CLSCompliant(false)]
			public static void BindBufferRange(NvTransformFeedback target, uint index, uint buffer, IntPtr offset, IntPtr size)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr), target, index, buffer, offset, size, GL.EntryPoints[51]);
			}

			// Token: 0x0600276D RID: 10093 RVA: 0x0006BBC8 File Offset: 0x00069DC8
			[CLSCompliant(false)]
			public static void BindProgram(AssemblyProgramTargetArb target, int id)
			{
				calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[68]);
			}

			// Token: 0x0600276E RID: 10094 RVA: 0x0006BBDC File Offset: 0x00069DDC
			[CLSCompliant(false)]
			public static void BindProgram(AssemblyProgramTargetArb target, uint id)
			{
				calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[68]);
			}

			// Token: 0x0600276F RID: 10095 RVA: 0x0006BBF0 File Offset: 0x00069DF0
			[CLSCompliant(false)]
			public static void BindTransformFeedback(BufferTargetArb target, int id)
			{
				calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[81]);
			}

			// Token: 0x06002770 RID: 10096 RVA: 0x0006BC04 File Offset: 0x00069E04
			[CLSCompliant(false)]
			public static void BindTransformFeedback(BufferTargetArb target, uint id)
			{
				calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[81]);
			}

			// Token: 0x06002771 RID: 10097 RVA: 0x0006BC18 File Offset: 0x00069E18
			[Obsolete("Use BufferTargetArb overload instead")]
			[CLSCompliant(false)]
			public static void BindTransformFeedback(NvTransformFeedback2 target, int id)
			{
				calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[81]);
			}

			// Token: 0x06002772 RID: 10098 RVA: 0x0006BC2C File Offset: 0x00069E2C
			[Obsolete("Use BufferTargetArb overload instead")]
			[CLSCompliant(false)]
			public static void BindTransformFeedback(NvTransformFeedback2 target, uint id)
			{
				calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[81]);
			}

			// Token: 0x06002773 RID: 10099 RVA: 0x0006BC40 File Offset: 0x00069E40
			[CLSCompliant(false)]
			public static void BindVideoCaptureStreamBuffer(int video_capture_slot, int stream, NvVideoCapture frame_region, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), video_capture_slot, stream, frame_region, offset, GL.EntryPoints[87]);
			}

			// Token: 0x06002774 RID: 10100 RVA: 0x0006BC54 File Offset: 0x00069E54
			[CLSCompliant(false)]
			public static void BindVideoCaptureStreamBuffer(uint video_capture_slot, uint stream, NvVideoCapture frame_region, IntPtr offset)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), video_capture_slot, stream, frame_region, offset, GL.EntryPoints[87]);
			}

			// Token: 0x06002775 RID: 10101 RVA: 0x0006BC68 File Offset: 0x00069E68
			[CLSCompliant(false)]
			public static void BindVideoCaptureStreamTexture(int video_capture_slot, int stream, NvVideoCapture frame_region, NvVideoCapture target, int texture)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32), video_capture_slot, stream, frame_region, target, texture, GL.EntryPoints[88]);
			}

			// Token: 0x06002776 RID: 10102 RVA: 0x0006BC80 File Offset: 0x00069E80
			[CLSCompliant(false)]
			public static void BindVideoCaptureStreamTexture(uint video_capture_slot, uint stream, NvVideoCapture frame_region, NvVideoCapture target, uint texture)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32), video_capture_slot, stream, frame_region, target, texture, GL.EntryPoints[88]);
			}

			// Token: 0x06002777 RID: 10103 RVA: 0x0006BC98 File Offset: 0x00069E98
			public static void BlendBarrier()
			{
				calli(System.Void(), GL.EntryPoints[102]);
			}

			// Token: 0x06002778 RID: 10104 RVA: 0x0006BCA8 File Offset: 0x00069EA8
			public static void BlendParameter(NvBlendEquationAdvanced pname, int value)
			{
				calli(System.Void(System.Int32,System.Int32), pname, value, GL.EntryPoints[126]);
			}

			// Token: 0x06002779 RID: 10105 RVA: 0x0006BCBC File Offset: 0x00069EBC
			[CLSCompliant(false)]
			public static void BufferAddressRange(NvVertexBufferUnifiedMemory pname, int index, long address, IntPtr length)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt64,System.IntPtr), pname, index, address, length, GL.EntryPoints[129]);
			}

			// Token: 0x0600277A RID: 10106 RVA: 0x0006BCD4 File Offset: 0x00069ED4
			[CLSCompliant(false)]
			public static void BufferAddressRange(NvVertexBufferUnifiedMemory pname, uint index, ulong address, IntPtr length)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt64,System.IntPtr), pname, index, address, length, GL.EntryPoints[129]);
			}

			// Token: 0x0600277B RID: 10107 RVA: 0x0006BCEC File Offset: 0x00069EEC
			public static void ClearDepth(double depth)
			{
				calli(System.Void(System.Double), depth, GL.EntryPoints[157]);
			}

			// Token: 0x0600277C RID: 10108 RVA: 0x0006BD00 File Offset: 0x00069F00
			public static void Color3h(Half red, Half green, Half blue)
			{
				calli(System.Void(OpenTK.Half,OpenTK.Half,OpenTK.Half), red, green, blue, GL.EntryPoints[183]);
			}

			// Token: 0x0600277D RID: 10109 RVA: 0x0006BD18 File Offset: 0x00069F18
			[CLSCompliant(false)]
			public unsafe static void Color3h(Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[184]);
				}
			}

			// Token: 0x0600277E RID: 10110 RVA: 0x0006BD4C File Offset: 0x00069F4C
			[CLSCompliant(false)]
			public unsafe static void Color3h(ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[184]);
				}
			}

			// Token: 0x0600277F RID: 10111 RVA: 0x0006BD70 File Offset: 0x00069F70
			[CLSCompliant(false)]
			public unsafe static void Color3h(Half* v)
			{
				calli(System.Void(OpenTK.Half*), v, GL.EntryPoints[184]);
			}

			// Token: 0x06002780 RID: 10112 RVA: 0x0006BD84 File Offset: 0x00069F84
			public static void Color4h(Half red, Half green, Half blue, Half alpha)
			{
				calli(System.Void(OpenTK.Half,OpenTK.Half,OpenTK.Half,OpenTK.Half), red, green, blue, alpha, GL.EntryPoints[205]);
			}

			// Token: 0x06002781 RID: 10113 RVA: 0x0006BD9C File Offset: 0x00069F9C
			[CLSCompliant(false)]
			public unsafe static void Color4h(Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[206]);
				}
			}

			// Token: 0x06002782 RID: 10114 RVA: 0x0006BDD0 File Offset: 0x00069FD0
			[CLSCompliant(false)]
			public unsafe static void Color4h(ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[206]);
				}
			}

			// Token: 0x06002783 RID: 10115 RVA: 0x0006BDF4 File Offset: 0x00069FF4
			[CLSCompliant(false)]
			public unsafe static void Color4h(Half* v)
			{
				calli(System.Void(OpenTK.Half*), v, GL.EntryPoints[206]);
			}

			// Token: 0x06002784 RID: 10116 RVA: 0x0006BE08 File Offset: 0x0006A008
			public static void ColorFormat(int size, NvVertexBufferUnifiedMemory type, int stride)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), size, type, stride, GL.EntryPoints[223]);
			}

			// Token: 0x06002785 RID: 10117 RVA: 0x0006BE20 File Offset: 0x0006A020
			public static void CombinerInput(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners input, NvRegisterCombiners mapping, NvRegisterCombiners componentUsage)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), stage, portion, variable, input, mapping, componentUsage, GL.EntryPoints[248]);
			}

			// Token: 0x06002786 RID: 10118 RVA: 0x0006BE3C File Offset: 0x0006A03C
			public static void CombinerOutput(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners abOutput, NvRegisterCombiners cdOutput, NvRegisterCombiners sumOutput, NvRegisterCombiners scale, NvRegisterCombiners bias, bool abDotProduct, bool cdDotProduct, bool muxSum)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean), stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum, GL.EntryPoints[249]);
			}

			// Token: 0x06002787 RID: 10119 RVA: 0x0006BE6C File Offset: 0x0006A06C
			public static void CombinerParameter(NvRegisterCombiners pname, float param)
			{
				calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[250]);
			}

			// Token: 0x06002788 RID: 10120 RVA: 0x0006BE80 File Offset: 0x0006A080
			[CLSCompliant(false)]
			public unsafe static void CombinerParameter(NvRegisterCombiners pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[251]);
				}
			}

			// Token: 0x06002789 RID: 10121 RVA: 0x0006BEB4 File Offset: 0x0006A0B4
			[CLSCompliant(false)]
			public unsafe static void CombinerParameter(NvRegisterCombiners pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Single*), pname, @params, GL.EntryPoints[251]);
			}

			// Token: 0x0600278A RID: 10122 RVA: 0x0006BEC8 File Offset: 0x0006A0C8
			public static void CombinerParameter(NvRegisterCombiners pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[252]);
			}

			// Token: 0x0600278B RID: 10123 RVA: 0x0006BEDC File Offset: 0x0006A0DC
			[CLSCompliant(false)]
			public unsafe static void CombinerParameter(NvRegisterCombiners pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[253]);
				}
			}

			// Token: 0x0600278C RID: 10124 RVA: 0x0006BF10 File Offset: 0x0006A110
			[CLSCompliant(false)]
			public unsafe static void CombinerParameter(NvRegisterCombiners pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, @params, GL.EntryPoints[253]);
			}

			// Token: 0x0600278D RID: 10125 RVA: 0x0006BF24 File Offset: 0x0006A124
			[CLSCompliant(false)]
			public unsafe static void CombinerStageParameter(NvRegisterCombiners2 stage, NvRegisterCombiners2 pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), stage, pname, ptr, GL.EntryPoints[254]);
				}
			}

			// Token: 0x0600278E RID: 10126 RVA: 0x0006BF5C File Offset: 0x0006A15C
			[CLSCompliant(false)]
			public unsafe static void CombinerStageParameter(NvRegisterCombiners2 stage, NvRegisterCombiners2 pname, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), stage, pname, ptr, GL.EntryPoints[254]);
				}
			}

			// Token: 0x0600278F RID: 10127 RVA: 0x0006BF80 File Offset: 0x0006A180
			[CLSCompliant(false)]
			public unsafe static void CombinerStageParameter(NvRegisterCombiners2 stage, NvRegisterCombiners2 pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), stage, pname, @params, GL.EntryPoints[254]);
			}

			// Token: 0x06002790 RID: 10128 RVA: 0x0006BF98 File Offset: 0x0006A198
			[CLSCompliant(false)]
			public static void CopyImageSubData(int srcName, NvCopyImage srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, NvCopyImage dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth, GL.EntryPoints[306]);
			}

			// Token: 0x06002791 RID: 10129 RVA: 0x0006BFD0 File Offset: 0x0006A1D0
			[CLSCompliant(false)]
			public static void CopyImageSubData(uint srcName, NvCopyImage srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, NvCopyImage dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth, GL.EntryPoints[306]);
			}

			// Token: 0x06002792 RID: 10130 RVA: 0x0006C008 File Offset: 0x0006A208
			[CLSCompliant(false)]
			public static void CopyPath(int resultPath, int srcPath)
			{
				calli(System.Void(System.UInt32,System.UInt32), resultPath, srcPath, GL.EntryPoints[312]);
			}

			// Token: 0x06002793 RID: 10131 RVA: 0x0006C01C File Offset: 0x0006A21C
			[CLSCompliant(false)]
			public static void CopyPath(uint resultPath, uint srcPath)
			{
				calli(System.Void(System.UInt32,System.UInt32), resultPath, srcPath, GL.EntryPoints[312]);
			}

			// Token: 0x06002794 RID: 10132 RVA: 0x0006C030 File Offset: 0x0006A230
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues)
			{
				fixed (float* ptr = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, coverMode, transformType, ptr, GL.EntryPoints[329]);
				}
			}

			// Token: 0x06002795 RID: 10133 RVA: 0x0006C070 File Offset: 0x0006A270
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues)
			{
				fixed (float* ptr = &transformValues)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, coverMode, transformType, ptr, GL.EntryPoints[329]);
				}
			}

			// Token: 0x06002796 RID: 10134 RVA: 0x0006C09C File Offset: 0x0006A29C
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[329]);
			}

			// Token: 0x06002797 RID: 10135 RVA: 0x0006C0C4 File Offset: 0x0006A2C4
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues)
			{
				fixed (float* ptr = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, coverMode, transformType, ptr, GL.EntryPoints[329]);
				}
			}

			// Token: 0x06002798 RID: 10136 RVA: 0x0006C104 File Offset: 0x0006A304
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues)
			{
				fixed (float* ptr = &transformValues)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, coverMode, transformType, ptr, GL.EntryPoints[329]);
				}
			}

			// Token: 0x06002799 RID: 10137 RVA: 0x0006C130 File Offset: 0x0006A330
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[329]);
			}

			// Token: 0x0600279A RID: 10138 RVA: 0x0006C158 File Offset: 0x0006A358
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[329]);
					}
				}
			}

			// Token: 0x0600279B RID: 10139 RVA: 0x0006C1AC File Offset: 0x0006A3AC
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[329]);
					}
				}
			}

			// Token: 0x0600279C RID: 10140 RVA: 0x0006C1EC File Offset: 0x0006A3EC
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[329]);
				}
			}

			// Token: 0x0600279D RID: 10141 RVA: 0x0006C228 File Offset: 0x0006A428
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[329]);
					}
				}
			}

			// Token: 0x0600279E RID: 10142 RVA: 0x0006C27C File Offset: 0x0006A47C
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[329]);
					}
				}
			}

			// Token: 0x0600279F RID: 10143 RVA: 0x0006C2BC File Offset: 0x0006A4BC
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[329]);
				}
			}

			// Token: 0x060027A0 RID: 10144 RVA: 0x0006C2F8 File Offset: 0x0006A4F8
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[329]);
					}
				}
			}

			// Token: 0x060027A1 RID: 10145 RVA: 0x0006C350 File Offset: 0x0006A550
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[329]);
					}
				}
			}

			// Token: 0x060027A2 RID: 10146 RVA: 0x0006C394 File Offset: 0x0006A594
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[329]);
				}
			}

			// Token: 0x060027A3 RID: 10147 RVA: 0x0006C3D4 File Offset: 0x0006A5D4
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[329]);
					}
				}
			}

			// Token: 0x060027A4 RID: 10148 RVA: 0x0006C42C File Offset: 0x0006A62C
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[329]);
					}
				}
			}

			// Token: 0x060027A5 RID: 10149 RVA: 0x0006C470 File Offset: 0x0006A670
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[329]);
				}
			}

			// Token: 0x060027A6 RID: 10150 RVA: 0x0006C4B0 File Offset: 0x0006A6B0
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[329]);
					}
				}
			}

			// Token: 0x060027A7 RID: 10151 RVA: 0x0006C508 File Offset: 0x0006A708
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[329]);
					}
				}
			}

			// Token: 0x060027A8 RID: 10152 RVA: 0x0006C54C File Offset: 0x0006A74C
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[329]);
				}
			}

			// Token: 0x060027A9 RID: 10153 RVA: 0x0006C590 File Offset: 0x0006A790
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[329]);
					}
				}
			}

			// Token: 0x060027AA RID: 10154 RVA: 0x0006C5E8 File Offset: 0x0006A7E8
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[329]);
					}
				}
			}

			// Token: 0x060027AB RID: 10155 RVA: 0x0006C62C File Offset: 0x0006A82C
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[329]);
				}
			}

			// Token: 0x060027AC RID: 10156 RVA: 0x0006C670 File Offset: 0x0006A870
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[329]);
					}
				}
			}

			// Token: 0x060027AD RID: 10157 RVA: 0x0006C6B4 File Offset: 0x0006A8B4
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[329]);
					}
				}
			}

			// Token: 0x060027AE RID: 10158 RVA: 0x0006C6E4 File Offset: 0x0006A8E4
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[329]);
				}
			}

			// Token: 0x060027AF RID: 10159 RVA: 0x0006C710 File Offset: 0x0006A910
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[329]);
					}
				}
			}

			// Token: 0x060027B0 RID: 10160 RVA: 0x0006C754 File Offset: 0x0006A954
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[329]);
					}
				}
			}

			// Token: 0x060027B1 RID: 10161 RVA: 0x0006C784 File Offset: 0x0006A984
			[CLSCompliant(false)]
			public unsafe static void CoverFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[329]);
				}
			}

			// Token: 0x060027B2 RID: 10162 RVA: 0x0006C7B0 File Offset: 0x0006A9B0
			[CLSCompliant(false)]
			public static void CoverFillPath(int path, NvPathRendering coverMode)
			{
				calli(System.Void(System.UInt32,System.Int32), path, coverMode, GL.EntryPoints[330]);
			}

			// Token: 0x060027B3 RID: 10163 RVA: 0x0006C7C4 File Offset: 0x0006A9C4
			[CLSCompliant(false)]
			public static void CoverFillPath(uint path, NvPathRendering coverMode)
			{
				calli(System.Void(System.UInt32,System.Int32), path, coverMode, GL.EntryPoints[330]);
			}

			// Token: 0x060027B4 RID: 10164 RVA: 0x0006C7D8 File Offset: 0x0006A9D8
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues)
			{
				fixed (float* ptr = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, coverMode, transformType, ptr, GL.EntryPoints[331]);
				}
			}

			// Token: 0x060027B5 RID: 10165 RVA: 0x0006C818 File Offset: 0x0006AA18
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues)
			{
				fixed (float* ptr = &transformValues)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, coverMode, transformType, ptr, GL.EntryPoints[331]);
				}
			}

			// Token: 0x060027B6 RID: 10166 RVA: 0x0006C844 File Offset: 0x0006AA44
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[331]);
			}

			// Token: 0x060027B7 RID: 10167 RVA: 0x0006C86C File Offset: 0x0006AA6C
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues)
			{
				fixed (float* ptr = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, coverMode, transformType, ptr, GL.EntryPoints[331]);
				}
			}

			// Token: 0x060027B8 RID: 10168 RVA: 0x0006C8AC File Offset: 0x0006AAAC
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues)
			{
				fixed (float* ptr = &transformValues)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, coverMode, transformType, ptr, GL.EntryPoints[331]);
				}
			}

			// Token: 0x060027B9 RID: 10169 RVA: 0x0006C8D8 File Offset: 0x0006AAD8
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[331]);
			}

			// Token: 0x060027BA RID: 10170 RVA: 0x0006C900 File Offset: 0x0006AB00
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[331]);
					}
				}
			}

			// Token: 0x060027BB RID: 10171 RVA: 0x0006C954 File Offset: 0x0006AB54
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[331]);
					}
				}
			}

			// Token: 0x060027BC RID: 10172 RVA: 0x0006C994 File Offset: 0x0006AB94
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[331]);
				}
			}

			// Token: 0x060027BD RID: 10173 RVA: 0x0006C9D0 File Offset: 0x0006ABD0
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[331]);
					}
				}
			}

			// Token: 0x060027BE RID: 10174 RVA: 0x0006CA24 File Offset: 0x0006AC24
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[331]);
					}
				}
			}

			// Token: 0x060027BF RID: 10175 RVA: 0x0006CA64 File Offset: 0x0006AC64
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[331]);
				}
			}

			// Token: 0x060027C0 RID: 10176 RVA: 0x0006CAA0 File Offset: 0x0006ACA0
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[331]);
					}
				}
			}

			// Token: 0x060027C1 RID: 10177 RVA: 0x0006CAF8 File Offset: 0x0006ACF8
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[331]);
					}
				}
			}

			// Token: 0x060027C2 RID: 10178 RVA: 0x0006CB3C File Offset: 0x0006AD3C
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[331]);
				}
			}

			// Token: 0x060027C3 RID: 10179 RVA: 0x0006CB7C File Offset: 0x0006AD7C
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[331]);
					}
				}
			}

			// Token: 0x060027C4 RID: 10180 RVA: 0x0006CBD4 File Offset: 0x0006ADD4
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[331]);
					}
				}
			}

			// Token: 0x060027C5 RID: 10181 RVA: 0x0006CC18 File Offset: 0x0006AE18
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[331]);
				}
			}

			// Token: 0x060027C6 RID: 10182 RVA: 0x0006CC58 File Offset: 0x0006AE58
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[331]);
					}
				}
			}

			// Token: 0x060027C7 RID: 10183 RVA: 0x0006CCB0 File Offset: 0x0006AEB0
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[331]);
					}
				}
			}

			// Token: 0x060027C8 RID: 10184 RVA: 0x0006CCF4 File Offset: 0x0006AEF4
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[331]);
				}
			}

			// Token: 0x060027C9 RID: 10185 RVA: 0x0006CD38 File Offset: 0x0006AF38
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[331]);
					}
				}
			}

			// Token: 0x060027CA RID: 10186 RVA: 0x0006CD90 File Offset: 0x0006AF90
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[331]);
					}
				}
			}

			// Token: 0x060027CB RID: 10187 RVA: 0x0006CDD4 File Offset: 0x0006AFD4
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[331]);
				}
			}

			// Token: 0x060027CC RID: 10188 RVA: 0x0006CE18 File Offset: 0x0006B018
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[331]);
					}
				}
			}

			// Token: 0x060027CD RID: 10189 RVA: 0x0006CE5C File Offset: 0x0006B05C
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[331]);
					}
				}
			}

			// Token: 0x060027CE RID: 10190 RVA: 0x0006CE8C File Offset: 0x0006B08C
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, int pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[331]);
				}
			}

			// Token: 0x060027CF RID: 10191 RVA: 0x0006CEB8 File Offset: 0x0006B0B8
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[331]);
					}
				}
			}

			// Token: 0x060027D0 RID: 10192 RVA: 0x0006CEFC File Offset: 0x0006B0FC
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, coverMode, transformType, ptr3, GL.EntryPoints[331]);
					}
				}
			}

			// Token: 0x060027D1 RID: 10193 RVA: 0x0006CF2C File Offset: 0x0006B12C
			[CLSCompliant(false)]
			public unsafe static void CoverStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, uint pathBase, NvPathRendering coverMode, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, coverMode, transformType, transformValues, GL.EntryPoints[331]);
				}
			}

			// Token: 0x060027D2 RID: 10194 RVA: 0x0006CF58 File Offset: 0x0006B158
			[CLSCompliant(false)]
			public static void CoverStrokePath(int path, NvPathRendering coverMode)
			{
				calli(System.Void(System.UInt32,System.Int32), path, coverMode, GL.EntryPoints[332]);
			}

			// Token: 0x060027D3 RID: 10195 RVA: 0x0006CF6C File Offset: 0x0006B16C
			[CLSCompliant(false)]
			public static void CoverStrokePath(uint path, NvPathRendering coverMode)
			{
				calli(System.Void(System.UInt32,System.Int32), path, coverMode, GL.EntryPoints[332]);
			}

			// Token: 0x060027D4 RID: 10196 RVA: 0x0006CF80 File Offset: 0x0006B180
			[CLSCompliant(false)]
			public static void DeleteFence(int fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref fences, GL.EntryPoints[365]);
			}

			// Token: 0x060027D5 RID: 10197 RVA: 0x0006CF98 File Offset: 0x0006B198
			[CLSCompliant(false)]
			public static void DeleteFence(uint fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref fences, GL.EntryPoints[365]);
			}

			// Token: 0x060027D6 RID: 10198 RVA: 0x0006CFB0 File Offset: 0x0006B1B0
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, int[] fences)
			{
				fixed (int* ptr = ref (fences != null && fences.Length != 0) ? ref fences[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[365]);
				}
			}

			// Token: 0x060027D7 RID: 10199 RVA: 0x0006CFE4 File Offset: 0x0006B1E4
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, ref int fences)
			{
				fixed (int* ptr = &fences)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[365]);
				}
			}

			// Token: 0x060027D8 RID: 10200 RVA: 0x0006D008 File Offset: 0x0006B208
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, int* fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, fences, GL.EntryPoints[365]);
			}

			// Token: 0x060027D9 RID: 10201 RVA: 0x0006D01C File Offset: 0x0006B21C
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, uint[] fences)
			{
				fixed (uint* ptr = ref (fences != null && fences.Length != 0) ? ref fences[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[365]);
				}
			}

			// Token: 0x060027DA RID: 10202 RVA: 0x0006D050 File Offset: 0x0006B250
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, ref uint fences)
			{
				fixed (uint* ptr = &fences)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[365]);
				}
			}

			// Token: 0x060027DB RID: 10203 RVA: 0x0006D074 File Offset: 0x0006B274
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, uint* fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, fences, GL.EntryPoints[365]);
			}

			// Token: 0x060027DC RID: 10204 RVA: 0x0006D088 File Offset: 0x0006B288
			[CLSCompliant(false)]
			public static void DeleteOcclusionQuery(int ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[373]);
			}

			// Token: 0x060027DD RID: 10205 RVA: 0x0006D0A0 File Offset: 0x0006B2A0
			[CLSCompliant(false)]
			public static void DeleteOcclusionQuery(uint ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[373]);
			}

			// Token: 0x060027DE RID: 10206 RVA: 0x0006D0B8 File Offset: 0x0006B2B8
			[CLSCompliant(false)]
			public unsafe static void DeleteOcclusionQueries(int n, int[] ids)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[373]);
				}
			}

			// Token: 0x060027DF RID: 10207 RVA: 0x0006D0EC File Offset: 0x0006B2EC
			[CLSCompliant(false)]
			public unsafe static void DeleteOcclusionQueries(int n, ref int ids)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[373]);
				}
			}

			// Token: 0x060027E0 RID: 10208 RVA: 0x0006D110 File Offset: 0x0006B310
			[CLSCompliant(false)]
			public unsafe static void DeleteOcclusionQueries(int n, int* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[373]);
			}

			// Token: 0x060027E1 RID: 10209 RVA: 0x0006D124 File Offset: 0x0006B324
			[CLSCompliant(false)]
			public unsafe static void DeleteOcclusionQueries(int n, uint[] ids)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[373]);
				}
			}

			// Token: 0x060027E2 RID: 10210 RVA: 0x0006D158 File Offset: 0x0006B358
			[CLSCompliant(false)]
			public unsafe static void DeleteOcclusionQueries(int n, ref uint ids)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[373]);
				}
			}

			// Token: 0x060027E3 RID: 10211 RVA: 0x0006D17C File Offset: 0x0006B37C
			[CLSCompliant(false)]
			public unsafe static void DeleteOcclusionQueries(int n, uint* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[373]);
			}

			// Token: 0x060027E4 RID: 10212 RVA: 0x0006D190 File Offset: 0x0006B390
			[CLSCompliant(false)]
			public static void DeletePath(int path, int range)
			{
				calli(System.Void(System.UInt32,System.Int32), path, range, GL.EntryPoints[374]);
			}

			// Token: 0x060027E5 RID: 10213 RVA: 0x0006D1A4 File Offset: 0x0006B3A4
			[CLSCompliant(false)]
			public static void DeletePath(uint path, int range)
			{
				calli(System.Void(System.UInt32,System.Int32), path, range, GL.EntryPoints[374]);
			}

			// Token: 0x060027E6 RID: 10214 RVA: 0x0006D1B8 File Offset: 0x0006B3B8
			[CLSCompliant(false)]
			public static void DeleteProgram(int programs)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref programs, GL.EntryPoints[381]);
			}

			// Token: 0x060027E7 RID: 10215 RVA: 0x0006D1D0 File Offset: 0x0006B3D0
			[CLSCompliant(false)]
			public static void DeleteProgram(uint programs)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref programs, GL.EntryPoints[381]);
			}

			// Token: 0x060027E8 RID: 10216 RVA: 0x0006D1E8 File Offset: 0x0006B3E8
			[CLSCompliant(false)]
			public unsafe static void DeleteProgram(int n, int[] programs)
			{
				fixed (int* ptr = ref (programs != null && programs.Length != 0) ? ref programs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[381]);
				}
			}

			// Token: 0x060027E9 RID: 10217 RVA: 0x0006D21C File Offset: 0x0006B41C
			[CLSCompliant(false)]
			public unsafe static void DeleteProgram(int n, ref int programs)
			{
				fixed (int* ptr = &programs)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[381]);
				}
			}

			// Token: 0x060027EA RID: 10218 RVA: 0x0006D240 File Offset: 0x0006B440
			[CLSCompliant(false)]
			public unsafe static void DeleteProgram(int n, int* programs)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, programs, GL.EntryPoints[381]);
			}

			// Token: 0x060027EB RID: 10219 RVA: 0x0006D254 File Offset: 0x0006B454
			[CLSCompliant(false)]
			public unsafe static void DeleteProgram(int n, uint[] programs)
			{
				fixed (uint* ptr = ref (programs != null && programs.Length != 0) ? ref programs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[381]);
				}
			}

			// Token: 0x060027EC RID: 10220 RVA: 0x0006D288 File Offset: 0x0006B488
			[CLSCompliant(false)]
			public unsafe static void DeleteProgram(int n, ref uint programs)
			{
				fixed (uint* ptr = &programs)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[381]);
				}
			}

			// Token: 0x060027ED RID: 10221 RVA: 0x0006D2AC File Offset: 0x0006B4AC
			[CLSCompliant(false)]
			public unsafe static void DeleteProgram(int n, uint* programs)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, programs, GL.EntryPoints[381]);
			}

			// Token: 0x060027EE RID: 10222 RVA: 0x0006D2C0 File Offset: 0x0006B4C0
			[CLSCompliant(false)]
			public static void DeleteTransformFeedback(int ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[392]);
			}

			// Token: 0x060027EF RID: 10223 RVA: 0x0006D2D8 File Offset: 0x0006B4D8
			[CLSCompliant(false)]
			public static void DeleteTransformFeedback(uint ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[392]);
			}

			// Token: 0x060027F0 RID: 10224 RVA: 0x0006D2F0 File Offset: 0x0006B4F0
			[CLSCompliant(false)]
			public unsafe static void DeleteTransformFeedbacks(int n, int[] ids)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[392]);
				}
			}

			// Token: 0x060027F1 RID: 10225 RVA: 0x0006D324 File Offset: 0x0006B524
			[CLSCompliant(false)]
			public unsafe static void DeleteTransformFeedbacks(int n, ref int ids)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[392]);
				}
			}

			// Token: 0x060027F2 RID: 10226 RVA: 0x0006D348 File Offset: 0x0006B548
			[CLSCompliant(false)]
			public unsafe static void DeleteTransformFeedbacks(int n, int* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[392]);
			}

			// Token: 0x060027F3 RID: 10227 RVA: 0x0006D35C File Offset: 0x0006B55C
			[CLSCompliant(false)]
			public unsafe static void DeleteTransformFeedbacks(int n, uint[] ids)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[392]);
				}
			}

			// Token: 0x060027F4 RID: 10228 RVA: 0x0006D390 File Offset: 0x0006B590
			[CLSCompliant(false)]
			public unsafe static void DeleteTransformFeedbacks(int n, ref uint ids)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[392]);
				}
			}

			// Token: 0x060027F5 RID: 10229 RVA: 0x0006D3B4 File Offset: 0x0006B5B4
			[CLSCompliant(false)]
			public unsafe static void DeleteTransformFeedbacks(int n, uint* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[392]);
			}

			// Token: 0x060027F6 RID: 10230 RVA: 0x0006D3C8 File Offset: 0x0006B5C8
			public static void DepthBounds(double zmin, double zmax)
			{
				calli(System.Void(System.Double,System.Double), zmin, zmax, GL.EntryPoints[396]);
			}

			// Token: 0x060027F7 RID: 10231 RVA: 0x0006D3DC File Offset: 0x0006B5DC
			public static void DepthRange(double zNear, double zFar)
			{
				calli(System.Void(System.Double,System.Double), zNear, zFar, GL.EntryPoints[402]);
			}

			// Token: 0x060027F8 RID: 10232 RVA: 0x0006D3F0 File Offset: 0x0006B5F0
			[CLSCompliant(false)]
			public static void DrawTexture(int texture, int sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1, GL.EntryPoints[454]);
			}

			// Token: 0x060027F9 RID: 10233 RVA: 0x0006D420 File Offset: 0x0006B620
			[CLSCompliant(false)]
			public static void DrawTexture(uint texture, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1, GL.EntryPoints[454]);
			}

			// Token: 0x060027FA RID: 10234 RVA: 0x0006D450 File Offset: 0x0006B650
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public static void DrawTransformFeedback(NvTransformFeedback2 mode, int id)
			{
				calli(System.Void(System.Int32,System.UInt32), mode, id, GL.EntryPoints[457]);
			}

			// Token: 0x060027FB RID: 10235 RVA: 0x0006D464 File Offset: 0x0006B664
			[Obsolete("Use PrimitiveType overload instead")]
			[CLSCompliant(false)]
			public static void DrawTransformFeedback(NvTransformFeedback2 mode, uint id)
			{
				calli(System.Void(System.Int32,System.UInt32), mode, id, GL.EntryPoints[457]);
			}

			// Token: 0x060027FC RID: 10236 RVA: 0x0006D478 File Offset: 0x0006B678
			[CLSCompliant(false)]
			public static void DrawTransformFeedback(PrimitiveType mode, int id)
			{
				calli(System.Void(System.Int32,System.UInt32), mode, id, GL.EntryPoints[457]);
			}

			// Token: 0x060027FD RID: 10237 RVA: 0x0006D48C File Offset: 0x0006B68C
			[CLSCompliant(false)]
			public static void DrawTransformFeedback(PrimitiveType mode, uint id)
			{
				calli(System.Void(System.Int32,System.UInt32), mode, id, GL.EntryPoints[457]);
			}

			// Token: 0x060027FE RID: 10238 RVA: 0x0006D4A0 File Offset: 0x0006B6A0
			public static void EdgeFlagFormat(int stride)
			{
				calli(System.Void(System.Int32), stride, GL.EntryPoints[461]);
			}

			// Token: 0x060027FF RID: 10239 RVA: 0x0006D4B4 File Offset: 0x0006B6B4
			public static void EndConditionalRender()
			{
				calli(System.Void(), GL.EntryPoints[482]);
			}

			// Token: 0x06002800 RID: 10240 RVA: 0x0006D4C8 File Offset: 0x0006B6C8
			public static void EndOcclusionQuery()
			{
				calli(System.Void(), GL.EntryPoints[486]);
			}

			// Token: 0x06002801 RID: 10241 RVA: 0x0006D4DC File Offset: 0x0006B6DC
			public static void EndTransformFeedback()
			{
				calli(System.Void(), GL.EntryPoints[494]);
			}

			// Token: 0x06002802 RID: 10242 RVA: 0x0006D4F0 File Offset: 0x0006B6F0
			[CLSCompliant(false)]
			public static void EndVideoCapture(int video_capture_slot)
			{
				calli(System.Void(System.UInt32), video_capture_slot, GL.EntryPoints[496]);
			}

			// Token: 0x06002803 RID: 10243 RVA: 0x0006D504 File Offset: 0x0006B704
			[CLSCompliant(false)]
			public static void EndVideoCapture(uint video_capture_slot)
			{
				calli(System.Void(System.UInt32), video_capture_slot, GL.EntryPoints[496]);
			}

			// Token: 0x06002804 RID: 10244 RVA: 0x0006D518 File Offset: 0x0006B718
			public static void EvalMap(NvEvaluators target, NvEvaluators mode)
			{
				calli(System.Void(System.Int32,System.Int32), target, mode, GL.EntryPoints[509]);
			}

			// Token: 0x06002805 RID: 10245 RVA: 0x0006D52C File Offset: 0x0006B72C
			[CLSCompliant(false)]
			public unsafe static void ExecuteProgram(AssemblyProgramTargetArb target, int id, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, id, ptr, GL.EntryPoints[514]);
				}
			}

			// Token: 0x06002806 RID: 10246 RVA: 0x0006D564 File Offset: 0x0006B764
			[CLSCompliant(false)]
			public unsafe static void ExecuteProgram(AssemblyProgramTargetArb target, int id, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, id, ptr, GL.EntryPoints[514]);
				}
			}

			// Token: 0x06002807 RID: 10247 RVA: 0x0006D588 File Offset: 0x0006B788
			[CLSCompliant(false)]
			public unsafe static void ExecuteProgram(AssemblyProgramTargetArb target, int id, float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, id, @params, GL.EntryPoints[514]);
			}

			// Token: 0x06002808 RID: 10248 RVA: 0x0006D5A0 File Offset: 0x0006B7A0
			[CLSCompliant(false)]
			public unsafe static void ExecuteProgram(AssemblyProgramTargetArb target, uint id, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, id, ptr, GL.EntryPoints[514]);
				}
			}

			// Token: 0x06002809 RID: 10249 RVA: 0x0006D5D8 File Offset: 0x0006B7D8
			[CLSCompliant(false)]
			public unsafe static void ExecuteProgram(AssemblyProgramTargetArb target, uint id, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, id, ptr, GL.EntryPoints[514]);
				}
			}

			// Token: 0x0600280A RID: 10250 RVA: 0x0006D5FC File Offset: 0x0006B7FC
			[CLSCompliant(false)]
			public unsafe static void ExecuteProgram(AssemblyProgramTargetArb target, uint id, float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, id, @params, GL.EntryPoints[514]);
			}

			// Token: 0x0600280B RID: 10251 RVA: 0x0006D614 File Offset: 0x0006B814
			public static void FinalCombinerInput(NvRegisterCombiners variable, NvRegisterCombiners input, NvRegisterCombiners mapping, NvRegisterCombiners componentUsage)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), variable, input, mapping, componentUsage, GL.EntryPoints[519]);
			}

			// Token: 0x0600280C RID: 10252 RVA: 0x0006D62C File Offset: 0x0006B82C
			[CLSCompliant(false)]
			public static void FinishFence(int fence)
			{
				calli(System.Void(System.UInt32), fence, GL.EntryPoints[523]);
			}

			// Token: 0x0600280D RID: 10253 RVA: 0x0006D640 File Offset: 0x0006B840
			[CLSCompliant(false)]
			public static void FinishFence(uint fence)
			{
				calli(System.Void(System.UInt32), fence, GL.EntryPoints[523]);
			}

			// Token: 0x0600280E RID: 10254 RVA: 0x0006D654 File Offset: 0x0006B854
			public static void FlushPixelDataRange(NvPixelDataRange target)
			{
				calli(System.Void(System.Int32), target, GL.EntryPoints[530]);
			}

			// Token: 0x0600280F RID: 10255 RVA: 0x0006D668 File Offset: 0x0006B868
			public static void FlushVertexArrayRange()
			{
				calli(System.Void(), GL.EntryPoints[534]);
			}

			// Token: 0x06002810 RID: 10256 RVA: 0x0006D67C File Offset: 0x0006B87C
			public static void FogCoordFormat(NvVertexBufferUnifiedMemory type, int stride)
			{
				calli(System.Void(System.Int32,System.Int32), type, stride, GL.EntryPoints[541]);
			}

			// Token: 0x06002811 RID: 10257 RVA: 0x0006D690 File Offset: 0x0006B890
			public static void FogCoordh(Half fog)
			{
				calli(System.Void(OpenTK.Half), fog, GL.EntryPoints[544]);
			}

			// Token: 0x06002812 RID: 10258 RVA: 0x0006D6A4 File Offset: 0x0006B8A4
			[CLSCompliant(false)]
			public unsafe static void FogCoordh(Half* fog)
			{
				calli(System.Void(OpenTK.Half*), fog, GL.EntryPoints[545]);
			}

			// Token: 0x06002813 RID: 10259 RVA: 0x0006D6B8 File Offset: 0x0006B8B8
			[CLSCompliant(false)]
			public static int GenFence()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[604]);
				return result;
			}

			// Token: 0x06002814 RID: 10260 RVA: 0x0006D6DC File Offset: 0x0006B8DC
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, [Out] int[] fences)
			{
				fixed (int* ptr = ref (fences != null && fences.Length != 0) ? ref fences[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[604]);
				}
			}

			// Token: 0x06002815 RID: 10261 RVA: 0x0006D710 File Offset: 0x0006B910
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, out int fences)
			{
				fixed (int* ptr = &fences)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[604]);
				}
			}

			// Token: 0x06002816 RID: 10262 RVA: 0x0006D734 File Offset: 0x0006B934
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, [Out] int* fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, fences, GL.EntryPoints[604]);
			}

			// Token: 0x06002817 RID: 10263 RVA: 0x0006D748 File Offset: 0x0006B948
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, [Out] uint[] fences)
			{
				fixed (uint* ptr = ref (fences != null && fences.Length != 0) ? ref fences[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[604]);
				}
			}

			// Token: 0x06002818 RID: 10264 RVA: 0x0006D77C File Offset: 0x0006B97C
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, out uint fences)
			{
				fixed (uint* ptr = &fences)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[604]);
				}
			}

			// Token: 0x06002819 RID: 10265 RVA: 0x0006D7A0 File Offset: 0x0006B9A0
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, [Out] uint* fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, fences, GL.EntryPoints[604]);
			}

			// Token: 0x0600281A RID: 10266 RVA: 0x0006D7B4 File Offset: 0x0006B9B4
			[CLSCompliant(false)]
			public static int GenOcclusionQuery()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[610]);
				return result;
			}

			// Token: 0x0600281B RID: 10267 RVA: 0x0006D7D8 File Offset: 0x0006B9D8
			[CLSCompliant(false)]
			public unsafe static void GenOcclusionQueries(int n, [Out] int[] ids)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[610]);
				}
			}

			// Token: 0x0600281C RID: 10268 RVA: 0x0006D80C File Offset: 0x0006BA0C
			[CLSCompliant(false)]
			public unsafe static void GenOcclusionQueries(int n, out int ids)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[610]);
				}
			}

			// Token: 0x0600281D RID: 10269 RVA: 0x0006D830 File Offset: 0x0006BA30
			[CLSCompliant(false)]
			public unsafe static void GenOcclusionQueries(int n, [Out] int* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[610]);
			}

			// Token: 0x0600281E RID: 10270 RVA: 0x0006D844 File Offset: 0x0006BA44
			[CLSCompliant(false)]
			public unsafe static void GenOcclusionQueries(int n, [Out] uint[] ids)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[610]);
				}
			}

			// Token: 0x0600281F RID: 10271 RVA: 0x0006D878 File Offset: 0x0006BA78
			[CLSCompliant(false)]
			public unsafe static void GenOcclusionQueries(int n, out uint ids)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[610]);
				}
			}

			// Token: 0x06002820 RID: 10272 RVA: 0x0006D89C File Offset: 0x0006BA9C
			[CLSCompliant(false)]
			public unsafe static void GenOcclusionQueries(int n, [Out] uint* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[610]);
			}

			// Token: 0x06002821 RID: 10273 RVA: 0x0006D8B0 File Offset: 0x0006BAB0
			public static int GenPath(int range)
			{
				return calli(System.Int32(System.Int32), range, GL.EntryPoints[611]);
			}

			// Token: 0x06002822 RID: 10274 RVA: 0x0006D8C4 File Offset: 0x0006BAC4
			[CLSCompliant(false)]
			public static int GenProgram()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[616]);
				return result;
			}

			// Token: 0x06002823 RID: 10275 RVA: 0x0006D8E8 File Offset: 0x0006BAE8
			[CLSCompliant(false)]
			public unsafe static void GenProgram(int n, [Out] int[] programs)
			{
				fixed (int* ptr = ref (programs != null && programs.Length != 0) ? ref programs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[616]);
				}
			}

			// Token: 0x06002824 RID: 10276 RVA: 0x0006D91C File Offset: 0x0006BB1C
			[CLSCompliant(false)]
			public unsafe static void GenProgram(int n, out int programs)
			{
				fixed (int* ptr = &programs)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[616]);
				}
			}

			// Token: 0x06002825 RID: 10277 RVA: 0x0006D940 File Offset: 0x0006BB40
			[CLSCompliant(false)]
			public unsafe static void GenProgram(int n, [Out] int* programs)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, programs, GL.EntryPoints[616]);
			}

			// Token: 0x06002826 RID: 10278 RVA: 0x0006D954 File Offset: 0x0006BB54
			[CLSCompliant(false)]
			public unsafe static void GenProgram(int n, [Out] uint[] programs)
			{
				fixed (uint* ptr = ref (programs != null && programs.Length != 0) ? ref programs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[616]);
				}
			}

			// Token: 0x06002827 RID: 10279 RVA: 0x0006D988 File Offset: 0x0006BB88
			[CLSCompliant(false)]
			public unsafe static void GenProgram(int n, out uint programs)
			{
				fixed (uint* ptr = &programs)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[616]);
				}
			}

			// Token: 0x06002828 RID: 10280 RVA: 0x0006D9AC File Offset: 0x0006BBAC
			[CLSCompliant(false)]
			public unsafe static void GenProgram(int n, [Out] uint* programs)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, programs, GL.EntryPoints[616]);
			}

			// Token: 0x06002829 RID: 10281 RVA: 0x0006D9C0 File Offset: 0x0006BBC0
			[CLSCompliant(false)]
			public static int GenTransformFeedback()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[626]);
				return result;
			}

			// Token: 0x0600282A RID: 10282 RVA: 0x0006D9E4 File Offset: 0x0006BBE4
			[CLSCompliant(false)]
			public unsafe static void GenTransformFeedbacks(int n, [Out] int[] ids)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[626]);
				}
			}

			// Token: 0x0600282B RID: 10283 RVA: 0x0006DA18 File Offset: 0x0006BC18
			[CLSCompliant(false)]
			public unsafe static void GenTransformFeedbacks(int n, out int ids)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[626]);
				}
			}

			// Token: 0x0600282C RID: 10284 RVA: 0x0006DA3C File Offset: 0x0006BC3C
			[CLSCompliant(false)]
			public unsafe static void GenTransformFeedbacks(int n, [Out] int* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[626]);
			}

			// Token: 0x0600282D RID: 10285 RVA: 0x0006DA50 File Offset: 0x0006BC50
			[CLSCompliant(false)]
			public unsafe static void GenTransformFeedbacks(int n, [Out] uint[] ids)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[626]);
				}
			}

			// Token: 0x0600282E RID: 10286 RVA: 0x0006DA84 File Offset: 0x0006BC84
			[CLSCompliant(false)]
			public unsafe static void GenTransformFeedbacks(int n, out uint ids)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[626]);
				}
			}

			// Token: 0x0600282F RID: 10287 RVA: 0x0006DAA8 File Offset: 0x0006BCA8
			[CLSCompliant(false)]
			public unsafe static void GenTransformFeedbacks(int n, [Out] uint* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[626]);
			}

			// Token: 0x06002830 RID: 10288 RVA: 0x0006DABC File Offset: 0x0006BCBC
			[CLSCompliant(false)]
			public unsafe static void GetActiveVarying(int program, int index, int bufSize, out int length, out int size, out NvTransformFeedback type, [Out] StringBuilder name)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &size)
					{
						int* ptr4 = ptr3;
						fixed (NvTransformFeedback* ptr5 = &type)
						{
							NvTransformFeedback* ptr6 = ptr5;
							IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
							calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[642]);
							BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
							Marshal.FreeHGlobal(intPtr);
						}
					}
				}
			}

			// Token: 0x06002831 RID: 10289 RVA: 0x0006DB08 File Offset: 0x0006BD08
			[CLSCompliant(false)]
			public unsafe static void GetActiveVarying(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] NvTransformFeedback* type, [Out] StringBuilder name)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[642]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06002832 RID: 10290 RVA: 0x0006DB4C File Offset: 0x0006BD4C
			[CLSCompliant(false)]
			public unsafe static void GetActiveVarying(uint program, uint index, int bufSize, out int length, out int size, out NvTransformFeedback type, [Out] StringBuilder name)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &size)
					{
						int* ptr4 = ptr3;
						fixed (NvTransformFeedback* ptr5 = &type)
						{
							NvTransformFeedback* ptr6 = ptr5;
							IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
							calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[642]);
							BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
							Marshal.FreeHGlobal(intPtr);
						}
					}
				}
			}

			// Token: 0x06002833 RID: 10291 RVA: 0x0006DB98 File Offset: 0x0006BD98
			[CLSCompliant(false)]
			public unsafe static void GetActiveVarying(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] NvTransformFeedback* type, [Out] StringBuilder name)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[642]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06002834 RID: 10292 RVA: 0x0006DBDC File Offset: 0x0006BDDC
			[CLSCompliant(false)]
			public unsafe static void GetBufferParameter(NvShaderBufferLoad target, NvShaderBufferLoad pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), target, pname, ptr, GL.EntryPoints[655]);
				}
			}

			// Token: 0x06002835 RID: 10293 RVA: 0x0006DC14 File Offset: 0x0006BE14
			[CLSCompliant(false)]
			public unsafe static void GetBufferParameter(NvShaderBufferLoad target, NvShaderBufferLoad pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), target, pname, ptr, GL.EntryPoints[655]);
				}
			}

			// Token: 0x06002836 RID: 10294 RVA: 0x0006DC38 File Offset: 0x0006BE38
			[CLSCompliant(false)]
			public unsafe static void GetBufferParameter(NvShaderBufferLoad target, NvShaderBufferLoad pname, [Out] long* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt64*), target, pname, @params, GL.EntryPoints[655]);
			}

			// Token: 0x06002837 RID: 10295 RVA: 0x0006DC50 File Offset: 0x0006BE50
			[CLSCompliant(false)]
			public unsafe static void GetBufferParameter(NvShaderBufferLoad target, NvShaderBufferLoad pname, [Out] ulong[] @params)
			{
				fixed (ulong* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), target, pname, ptr, GL.EntryPoints[655]);
				}
			}

			// Token: 0x06002838 RID: 10296 RVA: 0x0006DC88 File Offset: 0x0006BE88
			[CLSCompliant(false)]
			public unsafe static void GetBufferParameter(NvShaderBufferLoad target, NvShaderBufferLoad pname, out ulong @params)
			{
				fixed (ulong* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), target, pname, ptr, GL.EntryPoints[655]);
				}
			}

			// Token: 0x06002839 RID: 10297 RVA: 0x0006DCAC File Offset: 0x0006BEAC
			[CLSCompliant(false)]
			public unsafe static void GetBufferParameter(NvShaderBufferLoad target, NvShaderBufferLoad pname, [Out] ulong* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt64*), target, pname, @params, GL.EntryPoints[655]);
			}

			// Token: 0x0600283A RID: 10298 RVA: 0x0006DCC4 File Offset: 0x0006BEC4
			[CLSCompliant(false)]
			public unsafe static void GetCombinerInputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Single*), stage, portion, variable, pname, ptr, GL.EntryPoints[672]);
				}
			}

			// Token: 0x0600283B RID: 10299 RVA: 0x0006DD00 File Offset: 0x0006BF00
			[CLSCompliant(false)]
			public unsafe static void GetCombinerInputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Single*), stage, portion, variable, pname, ptr, GL.EntryPoints[672]);
				}
			}

			// Token: 0x0600283C RID: 10300 RVA: 0x0006DD28 File Offset: 0x0006BF28
			[CLSCompliant(false)]
			public unsafe static void GetCombinerInputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Single*), stage, portion, variable, pname, @params, GL.EntryPoints[672]);
			}

			// Token: 0x0600283D RID: 10301 RVA: 0x0006DD40 File Offset: 0x0006BF40
			[CLSCompliant(false)]
			public unsafe static void GetCombinerInputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), stage, portion, variable, pname, ptr, GL.EntryPoints[673]);
				}
			}

			// Token: 0x0600283E RID: 10302 RVA: 0x0006DD7C File Offset: 0x0006BF7C
			[CLSCompliant(false)]
			public unsafe static void GetCombinerInputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), stage, portion, variable, pname, ptr, GL.EntryPoints[673]);
				}
			}

			// Token: 0x0600283F RID: 10303 RVA: 0x0006DDA4 File Offset: 0x0006BFA4
			[CLSCompliant(false)]
			public unsafe static void GetCombinerInputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), stage, portion, variable, pname, @params, GL.EntryPoints[673]);
			}

			// Token: 0x06002840 RID: 10304 RVA: 0x0006DDBC File Offset: 0x0006BFBC
			[CLSCompliant(false)]
			public unsafe static void GetCombinerOutputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), stage, portion, pname, ptr, GL.EntryPoints[674]);
				}
			}

			// Token: 0x06002841 RID: 10305 RVA: 0x0006DDF4 File Offset: 0x0006BFF4
			[CLSCompliant(false)]
			public unsafe static void GetCombinerOutputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), stage, portion, pname, ptr, GL.EntryPoints[674]);
				}
			}

			// Token: 0x06002842 RID: 10306 RVA: 0x0006DE18 File Offset: 0x0006C018
			[CLSCompliant(false)]
			public unsafe static void GetCombinerOutputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), stage, portion, pname, @params, GL.EntryPoints[674]);
			}

			// Token: 0x06002843 RID: 10307 RVA: 0x0006DE30 File Offset: 0x0006C030
			[CLSCompliant(false)]
			public unsafe static void GetCombinerOutputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), stage, portion, pname, ptr, GL.EntryPoints[675]);
				}
			}

			// Token: 0x06002844 RID: 10308 RVA: 0x0006DE68 File Offset: 0x0006C068
			[CLSCompliant(false)]
			public unsafe static void GetCombinerOutputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), stage, portion, pname, ptr, GL.EntryPoints[675]);
				}
			}

			// Token: 0x06002845 RID: 10309 RVA: 0x0006DE8C File Offset: 0x0006C08C
			[CLSCompliant(false)]
			public unsafe static void GetCombinerOutputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), stage, portion, pname, @params, GL.EntryPoints[675]);
			}

			// Token: 0x06002846 RID: 10310 RVA: 0x0006DEA4 File Offset: 0x0006C0A4
			[CLSCompliant(false)]
			public unsafe static void GetCombinerStageParameter(NvRegisterCombiners2 stage, NvRegisterCombiners2 pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), stage, pname, ptr, GL.EntryPoints[676]);
				}
			}

			// Token: 0x06002847 RID: 10311 RVA: 0x0006DEDC File Offset: 0x0006C0DC
			[CLSCompliant(false)]
			public unsafe static void GetCombinerStageParameter(NvRegisterCombiners2 stage, NvRegisterCombiners2 pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), stage, pname, ptr, GL.EntryPoints[676]);
				}
			}

			// Token: 0x06002848 RID: 10312 RVA: 0x0006DF00 File Offset: 0x0006C100
			[CLSCompliant(false)]
			public unsafe static void GetCombinerStageParameter(NvRegisterCombiners2 stage, NvRegisterCombiners2 pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), stage, pname, @params, GL.EntryPoints[676]);
			}

			// Token: 0x06002849 RID: 10313 RVA: 0x0006DF18 File Offset: 0x0006C118
			[CLSCompliant(false)]
			public unsafe static void GetFence(int fence, NvFence pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), fence, pname, ptr, GL.EntryPoints[698]);
				}
			}

			// Token: 0x0600284A RID: 10314 RVA: 0x0006DF50 File Offset: 0x0006C150
			[CLSCompliant(false)]
			public unsafe static void GetFence(int fence, NvFence pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), fence, pname, ptr, GL.EntryPoints[698]);
				}
			}

			// Token: 0x0600284B RID: 10315 RVA: 0x0006DF74 File Offset: 0x0006C174
			[CLSCompliant(false)]
			public unsafe static void GetFence(int fence, NvFence pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), fence, pname, @params, GL.EntryPoints[698]);
			}

			// Token: 0x0600284C RID: 10316 RVA: 0x0006DF8C File Offset: 0x0006C18C
			[CLSCompliant(false)]
			public unsafe static void GetFence(uint fence, NvFence pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), fence, pname, ptr, GL.EntryPoints[698]);
				}
			}

			// Token: 0x0600284D RID: 10317 RVA: 0x0006DFC4 File Offset: 0x0006C1C4
			[CLSCompliant(false)]
			public unsafe static void GetFence(uint fence, NvFence pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), fence, pname, ptr, GL.EntryPoints[698]);
				}
			}

			// Token: 0x0600284E RID: 10318 RVA: 0x0006DFE8 File Offset: 0x0006C1E8
			[CLSCompliant(false)]
			public unsafe static void GetFence(uint fence, NvFence pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), fence, pname, @params, GL.EntryPoints[698]);
			}

			// Token: 0x0600284F RID: 10319 RVA: 0x0006E000 File Offset: 0x0006C200
			[CLSCompliant(false)]
			public unsafe static void GetFinalCombinerInputParameter(NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), variable, pname, ptr, GL.EntryPoints[699]);
				}
			}

			// Token: 0x06002850 RID: 10320 RVA: 0x0006E038 File Offset: 0x0006C238
			[CLSCompliant(false)]
			public unsafe static void GetFinalCombinerInputParameter(NvRegisterCombiners variable, NvRegisterCombiners pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), variable, pname, ptr, GL.EntryPoints[699]);
				}
			}

			// Token: 0x06002851 RID: 10321 RVA: 0x0006E05C File Offset: 0x0006C25C
			[CLSCompliant(false)]
			public unsafe static void GetFinalCombinerInputParameter(NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), variable, pname, @params, GL.EntryPoints[699]);
			}

			// Token: 0x06002852 RID: 10322 RVA: 0x0006E074 File Offset: 0x0006C274
			[CLSCompliant(false)]
			public unsafe static void GetFinalCombinerInputParameter(NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), variable, pname, ptr, GL.EntryPoints[700]);
				}
			}

			// Token: 0x06002853 RID: 10323 RVA: 0x0006E0AC File Offset: 0x0006C2AC
			[CLSCompliant(false)]
			public unsafe static void GetFinalCombinerInputParameter(NvRegisterCombiners variable, NvRegisterCombiners pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), variable, pname, ptr, GL.EntryPoints[700]);
				}
			}

			// Token: 0x06002854 RID: 10324 RVA: 0x0006E0D0 File Offset: 0x0006C2D0
			[CLSCompliant(false)]
			public unsafe static void GetFinalCombinerInputParameter(NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), variable, pname, @params, GL.EntryPoints[700]);
			}

			// Token: 0x06002855 RID: 10325 RVA: 0x0006E0E8 File Offset: 0x0006C2E8
			[CLSCompliant(false)]
			public static long GetImageHandle(int texture, int level, bool layered, int layer, NvBindlessTexture format)
			{
				return calli(System.Int64(System.UInt32,System.Int32,System.Boolean,System.Int32,System.Int32), texture, level, layered, layer, format, GL.EntryPoints[729]);
			}

			// Token: 0x06002856 RID: 10326 RVA: 0x0006E100 File Offset: 0x0006C300
			[CLSCompliant(false)]
			public static long GetImageHandle(uint texture, int level, bool layered, int layer, NvBindlessTexture format)
			{
				return calli(System.Int64(System.UInt32,System.Int32,System.Boolean,System.Int32,System.Int32), texture, level, layered, layer, format, GL.EntryPoints[729]);
			}

			// Token: 0x06002857 RID: 10327 RVA: 0x0006E118 File Offset: 0x0006C318
			[CLSCompliant(false)]
			public unsafe static void GetIntegerui64(NvVertexBufferUnifiedMemory value, int index, [Out] long[] result)
			{
				fixed (long* ptr = ref (result != null && result.Length != 0) ? ref result[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt64*), value, index, ptr, GL.EntryPoints[738]);
				}
			}

			// Token: 0x06002858 RID: 10328 RVA: 0x0006E150 File Offset: 0x0006C350
			[CLSCompliant(false)]
			public unsafe static void GetIntegerui64(NvVertexBufferUnifiedMemory value, int index, out long result)
			{
				fixed (long* ptr = &result)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt64*), value, index, ptr, GL.EntryPoints[738]);
				}
			}

			// Token: 0x06002859 RID: 10329 RVA: 0x0006E174 File Offset: 0x0006C374
			[CLSCompliant(false)]
			public unsafe static void GetIntegerui64(NvVertexBufferUnifiedMemory value, int index, [Out] long* result)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt64*), value, index, result, GL.EntryPoints[738]);
			}

			// Token: 0x0600285A RID: 10330 RVA: 0x0006E18C File Offset: 0x0006C38C
			[CLSCompliant(false)]
			public unsafe static void GetIntegerui64(NvVertexBufferUnifiedMemory value, uint index, [Out] ulong[] result)
			{
				fixed (ulong* ptr = ref (result != null && result.Length != 0) ? ref result[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt64*), value, index, ptr, GL.EntryPoints[738]);
				}
			}

			// Token: 0x0600285B RID: 10331 RVA: 0x0006E1C4 File Offset: 0x0006C3C4
			[CLSCompliant(false)]
			public unsafe static void GetIntegerui64(NvVertexBufferUnifiedMemory value, uint index, out ulong result)
			{
				fixed (ulong* ptr = &result)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt64*), value, index, ptr, GL.EntryPoints[738]);
				}
			}

			// Token: 0x0600285C RID: 10332 RVA: 0x0006E1E8 File Offset: 0x0006C3E8
			[CLSCompliant(false)]
			public unsafe static void GetIntegerui64(NvVertexBufferUnifiedMemory value, uint index, [Out] ulong* result)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt64*), value, index, result, GL.EntryPoints[738]);
			}

			// Token: 0x0600285D RID: 10333 RVA: 0x0006E200 File Offset: 0x0006C400
			[CLSCompliant(false)]
			public static long GetInteger(NvShaderBufferLoad value)
			{
				long result;
				calli(System.Void(System.Int32,System.UInt64*), value, ref result, GL.EntryPoints[739]);
				return result;
			}

			// Token: 0x0600285E RID: 10334 RVA: 0x0006E224 File Offset: 0x0006C424
			[CLSCompliant(false)]
			public unsafe static void GetInteger(NvShaderBufferLoad value, [Out] long[] result)
			{
				fixed (long* ptr = ref (result != null && result.Length != 0) ? ref result[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt64*), value, ptr, GL.EntryPoints[739]);
				}
			}

			// Token: 0x0600285F RID: 10335 RVA: 0x0006E258 File Offset: 0x0006C458
			[CLSCompliant(false)]
			public unsafe static void GetInteger(NvShaderBufferLoad value, out long result)
			{
				fixed (long* ptr = &result)
				{
					calli(System.Void(System.Int32,System.UInt64*), value, ptr, GL.EntryPoints[739]);
				}
			}

			// Token: 0x06002860 RID: 10336 RVA: 0x0006E27C File Offset: 0x0006C47C
			[CLSCompliant(false)]
			public unsafe static void GetInteger(NvShaderBufferLoad value, [Out] long* result)
			{
				calli(System.Void(System.Int32,System.UInt64*), value, result, GL.EntryPoints[739]);
			}

			// Token: 0x06002861 RID: 10337 RVA: 0x0006E290 File Offset: 0x0006C490
			[CLSCompliant(false)]
			public unsafe static void GetInteger(NvShaderBufferLoad value, [Out] ulong[] result)
			{
				fixed (ulong* ptr = ref (result != null && result.Length != 0) ? ref result[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt64*), value, ptr, GL.EntryPoints[739]);
				}
			}

			// Token: 0x06002862 RID: 10338 RVA: 0x0006E2C4 File Offset: 0x0006C4C4
			[CLSCompliant(false)]
			public unsafe static void GetInteger(NvShaderBufferLoad value, out ulong result)
			{
				fixed (ulong* ptr = &result)
				{
					calli(System.Void(System.Int32,System.UInt64*), value, ptr, GL.EntryPoints[739]);
				}
			}

			// Token: 0x06002863 RID: 10339 RVA: 0x0006E2E8 File Offset: 0x0006C4E8
			[CLSCompliant(false)]
			public unsafe static void GetInteger(NvShaderBufferLoad value, [Out] ulong* result)
			{
				calli(System.Void(System.Int32,System.UInt64*), value, result, GL.EntryPoints[739]);
			}

			// Token: 0x06002864 RID: 10340 RVA: 0x0006E2FC File Offset: 0x0006C4FC
			[CLSCompliant(false)]
			public unsafe static void GetMapAttribParameter(NvEvaluators target, int index, NvEvaluators pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, pname, ptr, GL.EntryPoints[755]);
				}
			}

			// Token: 0x06002865 RID: 10341 RVA: 0x0006E334 File Offset: 0x0006C534
			[CLSCompliant(false)]
			public unsafe static void GetMapAttribParameter(NvEvaluators target, int index, NvEvaluators pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, pname, ptr, GL.EntryPoints[755]);
				}
			}

			// Token: 0x06002866 RID: 10342 RVA: 0x0006E358 File Offset: 0x0006C558
			[CLSCompliant(false)]
			public unsafe static void GetMapAttribParameter(NvEvaluators target, int index, NvEvaluators pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, pname, @params, GL.EntryPoints[755]);
			}

			// Token: 0x06002867 RID: 10343 RVA: 0x0006E370 File Offset: 0x0006C570
			[CLSCompliant(false)]
			public unsafe static void GetMapAttribParameter(NvEvaluators target, uint index, NvEvaluators pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, pname, ptr, GL.EntryPoints[755]);
				}
			}

			// Token: 0x06002868 RID: 10344 RVA: 0x0006E3A8 File Offset: 0x0006C5A8
			[CLSCompliant(false)]
			public unsafe static void GetMapAttribParameter(NvEvaluators target, uint index, NvEvaluators pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, pname, ptr, GL.EntryPoints[755]);
				}
			}

			// Token: 0x06002869 RID: 10345 RVA: 0x0006E3CC File Offset: 0x0006C5CC
			[CLSCompliant(false)]
			public unsafe static void GetMapAttribParameter(NvEvaluators target, uint index, NvEvaluators pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, pname, @params, GL.EntryPoints[755]);
			}

			// Token: 0x0600286A RID: 10346 RVA: 0x0006E3E4 File Offset: 0x0006C5E4
			[CLSCompliant(false)]
			public unsafe static void GetMapAttribParameter(NvEvaluators target, int index, NvEvaluators pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, ptr, GL.EntryPoints[756]);
				}
			}

			// Token: 0x0600286B RID: 10347 RVA: 0x0006E41C File Offset: 0x0006C61C
			[CLSCompliant(false)]
			public unsafe static void GetMapAttribParameter(NvEvaluators target, int index, NvEvaluators pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, ptr, GL.EntryPoints[756]);
				}
			}

			// Token: 0x0600286C RID: 10348 RVA: 0x0006E440 File Offset: 0x0006C640
			[CLSCompliant(false)]
			public unsafe static void GetMapAttribParameter(NvEvaluators target, int index, NvEvaluators pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, @params, GL.EntryPoints[756]);
			}

			// Token: 0x0600286D RID: 10349 RVA: 0x0006E458 File Offset: 0x0006C658
			[CLSCompliant(false)]
			public unsafe static void GetMapAttribParameter(NvEvaluators target, uint index, NvEvaluators pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, ptr, GL.EntryPoints[756]);
				}
			}

			// Token: 0x0600286E RID: 10350 RVA: 0x0006E490 File Offset: 0x0006C690
			[CLSCompliant(false)]
			public unsafe static void GetMapAttribParameter(NvEvaluators target, uint index, NvEvaluators pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, ptr, GL.EntryPoints[756]);
				}
			}

			// Token: 0x0600286F RID: 10351 RVA: 0x0006E4B4 File Offset: 0x0006C6B4
			[CLSCompliant(false)]
			public unsafe static void GetMapAttribParameter(NvEvaluators target, uint index, NvEvaluators pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, pname, @params, GL.EntryPoints[756]);
			}

			// Token: 0x06002870 RID: 10352 RVA: 0x0006E4CC File Offset: 0x0006C6CC
			[CLSCompliant(false)]
			public static void GetMapControlPoints(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, bool packed, [Out] IntPtr points)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, packed, points, GL.EntryPoints[757]);
			}

			// Token: 0x06002871 RID: 10353 RVA: 0x0006E4F4 File Offset: 0x0006C6F4
			[CLSCompliant(false)]
			public unsafe static void GetMapControlPoints<T6>(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, bool packed, [In] [Out] T6[] points) where T6 : struct
			{
				fixed (T6* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, packed, ptr, GL.EntryPoints[757]);
				}
			}

			// Token: 0x06002872 RID: 10354 RVA: 0x0006E534 File Offset: 0x0006C734
			[CLSCompliant(false)]
			public unsafe static void GetMapControlPoints<T6>(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, bool packed, [In] [Out] T6[,] points) where T6 : struct
			{
				fixed (T6* ptr = ref (points != null && points.Length != 0) ? ref points[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, packed, ptr, GL.EntryPoints[757]);
				}
			}

			// Token: 0x06002873 RID: 10355 RVA: 0x0006E578 File Offset: 0x0006C778
			[CLSCompliant(false)]
			public unsafe static void GetMapControlPoints<T6>(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, bool packed, [In] [Out] T6[,,] points) where T6 : struct
			{
				fixed (T6* ptr = ref (points != null && points.Length != 0) ? ref points[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, packed, ptr, GL.EntryPoints[757]);
				}
			}

			// Token: 0x06002874 RID: 10356 RVA: 0x0006E5BC File Offset: 0x0006C7BC
			[CLSCompliant(false)]
			public unsafe static void GetMapControlPoints<T6>(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, bool packed, [In] [Out] ref T6 points) where T6 : struct
			{
				fixed (T6* ptr = &points)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, packed, ptr, GL.EntryPoints[757]);
				}
			}

			// Token: 0x06002875 RID: 10357 RVA: 0x0006E5E8 File Offset: 0x0006C7E8
			[CLSCompliant(false)]
			public static void GetMapControlPoints(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, bool packed, [Out] IntPtr points)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, packed, points, GL.EntryPoints[757]);
			}

			// Token: 0x06002876 RID: 10358 RVA: 0x0006E610 File Offset: 0x0006C810
			[CLSCompliant(false)]
			public unsafe static void GetMapControlPoints<T6>(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, bool packed, [In] [Out] T6[] points) where T6 : struct
			{
				fixed (T6* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, packed, ptr, GL.EntryPoints[757]);
				}
			}

			// Token: 0x06002877 RID: 10359 RVA: 0x0006E650 File Offset: 0x0006C850
			[CLSCompliant(false)]
			public unsafe static void GetMapControlPoints<T6>(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, bool packed, [In] [Out] T6[,] points) where T6 : struct
			{
				fixed (T6* ptr = ref (points != null && points.Length != 0) ? ref points[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, packed, ptr, GL.EntryPoints[757]);
				}
			}

			// Token: 0x06002878 RID: 10360 RVA: 0x0006E694 File Offset: 0x0006C894
			[CLSCompliant(false)]
			public unsafe static void GetMapControlPoints<T6>(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, bool packed, [In] [Out] T6[,,] points) where T6 : struct
			{
				fixed (T6* ptr = ref (points != null && points.Length != 0) ? ref points[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, packed, ptr, GL.EntryPoints[757]);
				}
			}

			// Token: 0x06002879 RID: 10361 RVA: 0x0006E6D8 File Offset: 0x0006C8D8
			[CLSCompliant(false)]
			public unsafe static void GetMapControlPoints<T6>(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, bool packed, [In] [Out] ref T6 points) where T6 : struct
			{
				fixed (T6* ptr = &points)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, packed, ptr, GL.EntryPoints[757]);
				}
			}

			// Token: 0x0600287A RID: 10362 RVA: 0x0006E704 File Offset: 0x0006C904
			[CLSCompliant(false)]
			public unsafe static void GetMapParameter(NvEvaluators target, NvEvaluators pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[761]);
				}
			}

			// Token: 0x0600287B RID: 10363 RVA: 0x0006E73C File Offset: 0x0006C93C
			[CLSCompliant(false)]
			public unsafe static void GetMapParameter(NvEvaluators target, NvEvaluators pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[761]);
				}
			}

			// Token: 0x0600287C RID: 10364 RVA: 0x0006E760 File Offset: 0x0006C960
			[CLSCompliant(false)]
			public unsafe static void GetMapParameter(NvEvaluators target, NvEvaluators pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[761]);
			}

			// Token: 0x0600287D RID: 10365 RVA: 0x0006E778 File Offset: 0x0006C978
			[CLSCompliant(false)]
			public unsafe static void GetMapParameter(NvEvaluators target, NvEvaluators pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[762]);
				}
			}

			// Token: 0x0600287E RID: 10366 RVA: 0x0006E7B0 File Offset: 0x0006C9B0
			[CLSCompliant(false)]
			public unsafe static void GetMapParameter(NvEvaluators target, NvEvaluators pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[762]);
				}
			}

			// Token: 0x0600287F RID: 10367 RVA: 0x0006E7D4 File Offset: 0x0006C9D4
			[CLSCompliant(false)]
			public unsafe static void GetMapParameter(NvEvaluators target, NvEvaluators pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[762]);
			}

			// Token: 0x06002880 RID: 10368 RVA: 0x0006E7EC File Offset: 0x0006C9EC
			[CLSCompliant(false)]
			public unsafe static void GetMultisample(NvExplicitMultisample pname, int index, [Out] float[] val)
			{
				fixed (float* ptr = ref (val != null && val.Length != 0) ? ref val[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[775]);
				}
			}

			// Token: 0x06002881 RID: 10369 RVA: 0x0006E824 File Offset: 0x0006CA24
			[CLSCompliant(false)]
			public unsafe static void GetMultisample(NvExplicitMultisample pname, int index, out float val)
			{
				fixed (float* ptr = &val)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[775]);
				}
			}

			// Token: 0x06002882 RID: 10370 RVA: 0x0006E848 File Offset: 0x0006CA48
			[CLSCompliant(false)]
			public unsafe static void GetMultisample(NvExplicitMultisample pname, int index, [Out] float* val)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, val, GL.EntryPoints[775]);
			}

			// Token: 0x06002883 RID: 10371 RVA: 0x0006E860 File Offset: 0x0006CA60
			[CLSCompliant(false)]
			public unsafe static void GetMultisample(NvExplicitMultisample pname, uint index, [Out] float[] val)
			{
				fixed (float* ptr = ref (val != null && val.Length != 0) ? ref val[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[775]);
				}
			}

			// Token: 0x06002884 RID: 10372 RVA: 0x0006E898 File Offset: 0x0006CA98
			[CLSCompliant(false)]
			public unsafe static void GetMultisample(NvExplicitMultisample pname, uint index, out float val)
			{
				fixed (float* ptr = &val)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, ptr, GL.EntryPoints[775]);
				}
			}

			// Token: 0x06002885 RID: 10373 RVA: 0x0006E8BC File Offset: 0x0006CABC
			[CLSCompliant(false)]
			public unsafe static void GetMultisample(NvExplicitMultisample pname, uint index, [Out] float* val)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), pname, index, val, GL.EntryPoints[775]);
			}

			// Token: 0x06002886 RID: 10374 RVA: 0x0006E8D4 File Offset: 0x0006CAD4
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferParameter(int buffer, NvShaderBufferLoad pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), buffer, pname, ptr, GL.EntryPoints[789]);
				}
			}

			// Token: 0x06002887 RID: 10375 RVA: 0x0006E90C File Offset: 0x0006CB0C
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferParameter(int buffer, NvShaderBufferLoad pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), buffer, pname, ptr, GL.EntryPoints[789]);
				}
			}

			// Token: 0x06002888 RID: 10376 RVA: 0x0006E930 File Offset: 0x0006CB30
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferParameter(int buffer, NvShaderBufferLoad pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), buffer, pname, @params, GL.EntryPoints[789]);
			}

			// Token: 0x06002889 RID: 10377 RVA: 0x0006E948 File Offset: 0x0006CB48
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferParameter(uint buffer, NvShaderBufferLoad pname, [Out] ulong[] @params)
			{
				fixed (ulong* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), buffer, pname, ptr, GL.EntryPoints[789]);
				}
			}

			// Token: 0x0600288A RID: 10378 RVA: 0x0006E980 File Offset: 0x0006CB80
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferParameter(uint buffer, NvShaderBufferLoad pname, out ulong @params)
			{
				fixed (ulong* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), buffer, pname, ptr, GL.EntryPoints[789]);
				}
			}

			// Token: 0x0600288B RID: 10379 RVA: 0x0006E9A4 File Offset: 0x0006CBA4
			[CLSCompliant(false)]
			public unsafe static void GetNamedBufferParameter(uint buffer, NvShaderBufferLoad pname, [Out] ulong* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), buffer, pname, @params, GL.EntryPoints[789]);
			}

			// Token: 0x0600288C RID: 10380 RVA: 0x0006E9BC File Offset: 0x0006CBBC
			[CLSCompliant(false)]
			public unsafe static void GetOcclusionQuery(int id, NvOcclusionQuery pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[832]);
				}
			}

			// Token: 0x0600288D RID: 10381 RVA: 0x0006E9F4 File Offset: 0x0006CBF4
			[CLSCompliant(false)]
			public unsafe static void GetOcclusionQuery(int id, NvOcclusionQuery pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[832]);
				}
			}

			// Token: 0x0600288E RID: 10382 RVA: 0x0006EA18 File Offset: 0x0006CC18
			[CLSCompliant(false)]
			public unsafe static void GetOcclusionQuery(int id, NvOcclusionQuery pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, @params, GL.EntryPoints[832]);
			}

			// Token: 0x0600288F RID: 10383 RVA: 0x0006EA30 File Offset: 0x0006CC30
			[CLSCompliant(false)]
			public unsafe static void GetOcclusionQuery(uint id, NvOcclusionQuery pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[832]);
				}
			}

			// Token: 0x06002890 RID: 10384 RVA: 0x0006EA68 File Offset: 0x0006CC68
			[CLSCompliant(false)]
			public unsafe static void GetOcclusionQuery(uint id, NvOcclusionQuery pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[832]);
				}
			}

			// Token: 0x06002891 RID: 10385 RVA: 0x0006EA8C File Offset: 0x0006CC8C
			[CLSCompliant(false)]
			public unsafe static void GetOcclusionQuery(uint id, NvOcclusionQuery pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, @params, GL.EntryPoints[832]);
			}

			// Token: 0x06002892 RID: 10386 RVA: 0x0006EAA4 File Offset: 0x0006CCA4
			[CLSCompliant(false)]
			public unsafe static void GetOcclusionQuery(uint id, NvOcclusionQuery pname, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[833]);
				}
			}

			// Token: 0x06002893 RID: 10387 RVA: 0x0006EADC File Offset: 0x0006CCDC
			[CLSCompliant(false)]
			public unsafe static void GetOcclusionQuery(uint id, NvOcclusionQuery pname, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[833]);
				}
			}

			// Token: 0x06002894 RID: 10388 RVA: 0x0006EB00 File Offset: 0x0006CD00
			[CLSCompliant(false)]
			public unsafe static void GetOcclusionQuery(uint id, NvOcclusionQuery pname, [Out] uint* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, @params, GL.EntryPoints[833]);
			}

			// Token: 0x06002895 RID: 10389 RVA: 0x0006EB18 File Offset: 0x0006CD18
			[CLSCompliant(false)]
			public unsafe static void GetPathColorGen(NvPathRendering color, NvPathRendering pname, [Out] float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), color, pname, ptr, GL.EntryPoints[834]);
				}
			}

			// Token: 0x06002896 RID: 10390 RVA: 0x0006EB50 File Offset: 0x0006CD50
			[CLSCompliant(false)]
			public unsafe static void GetPathColorGen(NvPathRendering color, NvPathRendering pname, out float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), color, pname, ptr, GL.EntryPoints[834]);
				}
			}

			// Token: 0x06002897 RID: 10391 RVA: 0x0006EB74 File Offset: 0x0006CD74
			[CLSCompliant(false)]
			public unsafe static void GetPathColorGen(NvPathRendering color, NvPathRendering pname, [Out] float* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), color, pname, value, GL.EntryPoints[834]);
			}

			// Token: 0x06002898 RID: 10392 RVA: 0x0006EB8C File Offset: 0x0006CD8C
			[CLSCompliant(false)]
			public unsafe static void GetPathColorGen(NvPathRendering color, NvPathRendering pname, [Out] int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), color, pname, ptr, GL.EntryPoints[835]);
				}
			}

			// Token: 0x06002899 RID: 10393 RVA: 0x0006EBC4 File Offset: 0x0006CDC4
			[CLSCompliant(false)]
			public unsafe static void GetPathColorGen(NvPathRendering color, NvPathRendering pname, out int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), color, pname, ptr, GL.EntryPoints[835]);
				}
			}

			// Token: 0x0600289A RID: 10394 RVA: 0x0006EBE8 File Offset: 0x0006CDE8
			[CLSCompliant(false)]
			public unsafe static void GetPathColorGen(NvPathRendering color, NvPathRendering pname, [Out] int* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), color, pname, value, GL.EntryPoints[835]);
			}

			// Token: 0x0600289B RID: 10395 RVA: 0x0006EC00 File Offset: 0x0006CE00
			[CLSCompliant(false)]
			public static byte GetPathCommand(int path)
			{
				byte result;
				calli(System.Void(System.UInt32,System.Byte*), path, ref result, GL.EntryPoints[836]);
				return result;
			}

			// Token: 0x0600289C RID: 10396 RVA: 0x0006EC24 File Offset: 0x0006CE24
			[CLSCompliant(false)]
			public static byte GetPathCommand(uint path)
			{
				byte result;
				calli(System.Void(System.UInt32,System.Byte*), path, ref result, GL.EntryPoints[836]);
				return result;
			}

			// Token: 0x0600289D RID: 10397 RVA: 0x0006EC48 File Offset: 0x0006CE48
			[CLSCompliant(false)]
			public unsafe static void GetPathCommands(int path, [Out] byte[] commands)
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Byte*), path, ptr, GL.EntryPoints[836]);
				}
			}

			// Token: 0x0600289E RID: 10398 RVA: 0x0006EC7C File Offset: 0x0006CE7C
			[CLSCompliant(false)]
			public unsafe static void GetPathCommands(int path, out byte commands)
			{
				fixed (byte* ptr = &commands)
				{
					calli(System.Void(System.UInt32,System.Byte*), path, ptr, GL.EntryPoints[836]);
				}
			}

			// Token: 0x0600289F RID: 10399 RVA: 0x0006ECA0 File Offset: 0x0006CEA0
			[CLSCompliant(false)]
			public unsafe static void GetPathCommands(int path, [Out] byte* commands)
			{
				calli(System.Void(System.UInt32,System.Byte*), path, commands, GL.EntryPoints[836]);
			}

			// Token: 0x060028A0 RID: 10400 RVA: 0x0006ECB4 File Offset: 0x0006CEB4
			[CLSCompliant(false)]
			public unsafe static void GetPathCommands(uint path, [Out] byte[] commands)
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Byte*), path, ptr, GL.EntryPoints[836]);
				}
			}

			// Token: 0x060028A1 RID: 10401 RVA: 0x0006ECE8 File Offset: 0x0006CEE8
			[CLSCompliant(false)]
			public unsafe static void GetPathCommands(uint path, out byte commands)
			{
				fixed (byte* ptr = &commands)
				{
					calli(System.Void(System.UInt32,System.Byte*), path, ptr, GL.EntryPoints[836]);
				}
			}

			// Token: 0x060028A2 RID: 10402 RVA: 0x0006ED0C File Offset: 0x0006CF0C
			[CLSCompliant(false)]
			public unsafe static void GetPathCommands(uint path, [Out] byte* commands)
			{
				calli(System.Void(System.UInt32,System.Byte*), path, commands, GL.EntryPoints[836]);
			}

			// Token: 0x060028A3 RID: 10403 RVA: 0x0006ED20 File Offset: 0x0006CF20
			[CLSCompliant(false)]
			public static float GetPathCoord(int path)
			{
				float result;
				calli(System.Void(System.UInt32,System.Single*), path, ref result, GL.EntryPoints[837]);
				return result;
			}

			// Token: 0x060028A4 RID: 10404 RVA: 0x0006ED44 File Offset: 0x0006CF44
			[CLSCompliant(false)]
			public static float GetPathCoord(uint path)
			{
				float result;
				calli(System.Void(System.UInt32,System.Single*), path, ref result, GL.EntryPoints[837]);
				return result;
			}

			// Token: 0x060028A5 RID: 10405 RVA: 0x0006ED68 File Offset: 0x0006CF68
			[CLSCompliant(false)]
			public unsafe static void GetPathCoords(int path, [Out] float[] coords)
			{
				fixed (float* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), path, ptr, GL.EntryPoints[837]);
				}
			}

			// Token: 0x060028A6 RID: 10406 RVA: 0x0006ED9C File Offset: 0x0006CF9C
			[CLSCompliant(false)]
			public unsafe static void GetPathCoords(int path, out float coords)
			{
				fixed (float* ptr = &coords)
				{
					calli(System.Void(System.UInt32,System.Single*), path, ptr, GL.EntryPoints[837]);
				}
			}

			// Token: 0x060028A7 RID: 10407 RVA: 0x0006EDC0 File Offset: 0x0006CFC0
			[CLSCompliant(false)]
			public unsafe static void GetPathCoords(int path, [Out] float* coords)
			{
				calli(System.Void(System.UInt32,System.Single*), path, coords, GL.EntryPoints[837]);
			}

			// Token: 0x060028A8 RID: 10408 RVA: 0x0006EDD4 File Offset: 0x0006CFD4
			[CLSCompliant(false)]
			public unsafe static void GetPathCoords(uint path, [Out] float[] coords)
			{
				fixed (float* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), path, ptr, GL.EntryPoints[837]);
				}
			}

			// Token: 0x060028A9 RID: 10409 RVA: 0x0006EE08 File Offset: 0x0006D008
			[CLSCompliant(false)]
			public unsafe static void GetPathCoords(uint path, out float coords)
			{
				fixed (float* ptr = &coords)
				{
					calli(System.Void(System.UInt32,System.Single*), path, ptr, GL.EntryPoints[837]);
				}
			}

			// Token: 0x060028AA RID: 10410 RVA: 0x0006EE2C File Offset: 0x0006D02C
			[CLSCompliant(false)]
			public unsafe static void GetPathCoords(uint path, [Out] float* coords)
			{
				calli(System.Void(System.UInt32,System.Single*), path, coords, GL.EntryPoints[837]);
			}

			// Token: 0x060028AB RID: 10411 RVA: 0x0006EE40 File Offset: 0x0006D040
			[CLSCompliant(false)]
			public static float GetPathDashArray(int path)
			{
				float result;
				calli(System.Void(System.UInt32,System.Single*), path, ref result, GL.EntryPoints[838]);
				return result;
			}

			// Token: 0x060028AC RID: 10412 RVA: 0x0006EE64 File Offset: 0x0006D064
			[CLSCompliant(false)]
			public static float GetPathDashArray(uint path)
			{
				float result;
				calli(System.Void(System.UInt32,System.Single*), path, ref result, GL.EntryPoints[838]);
				return result;
			}

			// Token: 0x060028AD RID: 10413 RVA: 0x0006EE88 File Offset: 0x0006D088
			[CLSCompliant(false)]
			public unsafe static void GetPathDashArray(int path, [Out] float[] dashArray)
			{
				fixed (float* ptr = ref (dashArray != null && dashArray.Length != 0) ? ref dashArray[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), path, ptr, GL.EntryPoints[838]);
				}
			}

			// Token: 0x060028AE RID: 10414 RVA: 0x0006EEBC File Offset: 0x0006D0BC
			[CLSCompliant(false)]
			public unsafe static void GetPathDashArray(int path, out float dashArray)
			{
				fixed (float* ptr = &dashArray)
				{
					calli(System.Void(System.UInt32,System.Single*), path, ptr, GL.EntryPoints[838]);
				}
			}

			// Token: 0x060028AF RID: 10415 RVA: 0x0006EEE0 File Offset: 0x0006D0E0
			[CLSCompliant(false)]
			public unsafe static void GetPathDashArray(int path, [Out] float* dashArray)
			{
				calli(System.Void(System.UInt32,System.Single*), path, dashArray, GL.EntryPoints[838]);
			}

			// Token: 0x060028B0 RID: 10416 RVA: 0x0006EEF4 File Offset: 0x0006D0F4
			[CLSCompliant(false)]
			public unsafe static void GetPathDashArray(uint path, [Out] float[] dashArray)
			{
				fixed (float* ptr = ref (dashArray != null && dashArray.Length != 0) ? ref dashArray[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), path, ptr, GL.EntryPoints[838]);
				}
			}

			// Token: 0x060028B1 RID: 10417 RVA: 0x0006EF28 File Offset: 0x0006D128
			[CLSCompliant(false)]
			public unsafe static void GetPathDashArray(uint path, out float dashArray)
			{
				fixed (float* ptr = &dashArray)
				{
					calli(System.Void(System.UInt32,System.Single*), path, ptr, GL.EntryPoints[838]);
				}
			}

			// Token: 0x060028B2 RID: 10418 RVA: 0x0006EF4C File Offset: 0x0006D14C
			[CLSCompliant(false)]
			public unsafe static void GetPathDashArray(uint path, [Out] float* dashArray)
			{
				calli(System.Void(System.UInt32,System.Single*), path, dashArray, GL.EntryPoints[838]);
			}

			// Token: 0x060028B3 RID: 10419 RVA: 0x0006EF60 File Offset: 0x0006D160
			[CLSCompliant(false)]
			public static float GetPathLength(int path, int startSegment, int numSegments)
			{
				return calli(System.Single(System.UInt32,System.Int32,System.Int32), path, startSegment, numSegments, GL.EntryPoints[839]);
			}

			// Token: 0x060028B4 RID: 10420 RVA: 0x0006EF78 File Offset: 0x0006D178
			[CLSCompliant(false)]
			public static float GetPathLength(uint path, int startSegment, int numSegments)
			{
				return calli(System.Single(System.UInt32,System.Int32,System.Int32), path, startSegment, numSegments, GL.EntryPoints[839]);
			}

			// Token: 0x060028B5 RID: 10421 RVA: 0x0006EF90 File Offset: 0x0006D190
			[CLSCompliant(false)]
			public unsafe static void GetPathMetricRange(int metricQueryMask, int firstPathName, int numPaths, int stride, [Out] float[] metrics)
			{
				fixed (float* ptr = ref (metrics != null && metrics.Length != 0) ? ref metrics[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Single*), metricQueryMask, firstPathName, numPaths, stride, ptr, GL.EntryPoints[840]);
				}
			}

			// Token: 0x060028B6 RID: 10422 RVA: 0x0006EFCC File Offset: 0x0006D1CC
			[CLSCompliant(false)]
			public unsafe static void GetPathMetricRange(int metricQueryMask, int firstPathName, int numPaths, int stride, out float metrics)
			{
				fixed (float* ptr = &metrics)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Single*), metricQueryMask, firstPathName, numPaths, stride, ptr, GL.EntryPoints[840]);
				}
			}

			// Token: 0x060028B7 RID: 10423 RVA: 0x0006EFF4 File Offset: 0x0006D1F4
			[CLSCompliant(false)]
			public unsafe static void GetPathMetricRange(int metricQueryMask, int firstPathName, int numPaths, int stride, [Out] float* metrics)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Single*), metricQueryMask, firstPathName, numPaths, stride, metrics, GL.EntryPoints[840]);
			}

			// Token: 0x060028B8 RID: 10424 RVA: 0x0006F00C File Offset: 0x0006D20C
			[CLSCompliant(false)]
			public unsafe static void GetPathMetricRange(uint metricQueryMask, uint firstPathName, int numPaths, int stride, [Out] float[] metrics)
			{
				fixed (float* ptr = ref (metrics != null && metrics.Length != 0) ? ref metrics[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Single*), metricQueryMask, firstPathName, numPaths, stride, ptr, GL.EntryPoints[840]);
				}
			}

			// Token: 0x060028B9 RID: 10425 RVA: 0x0006F048 File Offset: 0x0006D248
			[CLSCompliant(false)]
			public unsafe static void GetPathMetricRange(uint metricQueryMask, uint firstPathName, int numPaths, int stride, out float metrics)
			{
				fixed (float* ptr = &metrics)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Single*), metricQueryMask, firstPathName, numPaths, stride, ptr, GL.EntryPoints[840]);
				}
			}

			// Token: 0x060028BA RID: 10426 RVA: 0x0006F070 File Offset: 0x0006D270
			[CLSCompliant(false)]
			public unsafe static void GetPathMetricRange(uint metricQueryMask, uint firstPathName, int numPaths, int stride, [Out] float* metrics)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Single*), metricQueryMask, firstPathName, numPaths, stride, metrics, GL.EntryPoints[840]);
			}

			// Token: 0x060028BB RID: 10427 RVA: 0x0006F088 File Offset: 0x0006D288
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric(int metricQueryMask, int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, int stride, [Out] float[] metrics)
			{
				fixed (float* ptr = ref (metrics != null && metrics.Length != 0) ? ref metrics[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, ptr, GL.EntryPoints[841]);
				}
			}

			// Token: 0x060028BC RID: 10428 RVA: 0x0006F0C8 File Offset: 0x0006D2C8
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric(int metricQueryMask, int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, int stride, out float metrics)
			{
				fixed (float* ptr = &metrics)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, ptr, GL.EntryPoints[841]);
				}
			}

			// Token: 0x060028BD RID: 10429 RVA: 0x0006F0F4 File Offset: 0x0006D2F4
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric(int metricQueryMask, int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, int stride, [Out] float* metrics)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics, GL.EntryPoints[841]);
			}

			// Token: 0x060028BE RID: 10430 RVA: 0x0006F11C File Offset: 0x0006D31C
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(int metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[] paths, int pathBase, int stride, [Out] float[] metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = ref (metrics != null && metrics.Length != 0) ? ref metrics[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr2, pathBase, stride, ptr3, GL.EntryPoints[841]);
					}
				}
			}

			// Token: 0x060028BF RID: 10431 RVA: 0x0006F170 File Offset: 0x0006D370
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(int metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[] paths, int pathBase, int stride, out float metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = &metrics)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr2, pathBase, stride, ptr3, GL.EntryPoints[841]);
					}
				}
			}

			// Token: 0x060028C0 RID: 10432 RVA: 0x0006F1B0 File Offset: 0x0006D3B0
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(int metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[] paths, int pathBase, int stride, [Out] float* metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr, pathBase, stride, metrics, GL.EntryPoints[841]);
				}
			}

			// Token: 0x060028C1 RID: 10433 RVA: 0x0006F1EC File Offset: 0x0006D3EC
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(int metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,] paths, int pathBase, int stride, [Out] float[] metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = ref (metrics != null && metrics.Length != 0) ? ref metrics[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr2, pathBase, stride, ptr3, GL.EntryPoints[841]);
					}
				}
			}

			// Token: 0x060028C2 RID: 10434 RVA: 0x0006F244 File Offset: 0x0006D444
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(int metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,] paths, int pathBase, int stride, out float metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = &metrics)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr2, pathBase, stride, ptr3, GL.EntryPoints[841]);
					}
				}
			}

			// Token: 0x060028C3 RID: 10435 RVA: 0x0006F288 File Offset: 0x0006D488
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(int metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,] paths, int pathBase, int stride, [Out] float* metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr, pathBase, stride, metrics, GL.EntryPoints[841]);
				}
			}

			// Token: 0x060028C4 RID: 10436 RVA: 0x0006F2C8 File Offset: 0x0006D4C8
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(int metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,,] paths, int pathBase, int stride, [Out] float[] metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = ref (metrics != null && metrics.Length != 0) ? ref metrics[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr2, pathBase, stride, ptr3, GL.EntryPoints[841]);
					}
				}
			}

			// Token: 0x060028C5 RID: 10437 RVA: 0x0006F320 File Offset: 0x0006D520
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(int metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,,] paths, int pathBase, int stride, out float metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = &metrics)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr2, pathBase, stride, ptr3, GL.EntryPoints[841]);
					}
				}
			}

			// Token: 0x060028C6 RID: 10438 RVA: 0x0006F364 File Offset: 0x0006D564
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(int metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,,] paths, int pathBase, int stride, [Out] float* metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr, pathBase, stride, metrics, GL.EntryPoints[841]);
				}
			}

			// Token: 0x060028C7 RID: 10439 RVA: 0x0006F3A8 File Offset: 0x0006D5A8
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(int metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] ref T3 paths, int pathBase, int stride, [Out] float[] metrics) where T3 : struct
			{
				fixed (T3* ptr = &paths)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = ref (metrics != null && metrics.Length != 0) ? ref metrics[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr2, pathBase, stride, ptr3, GL.EntryPoints[841]);
					}
				}
			}

			// Token: 0x060028C8 RID: 10440 RVA: 0x0006F3EC File Offset: 0x0006D5EC
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(int metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] ref T3 paths, int pathBase, int stride, out float metrics) where T3 : struct
			{
				fixed (T3* ptr = &paths)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = &metrics)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr2, pathBase, stride, ptr3, GL.EntryPoints[841]);
					}
				}
			}

			// Token: 0x060028C9 RID: 10441 RVA: 0x0006F41C File Offset: 0x0006D61C
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(int metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] ref T3 paths, int pathBase, int stride, [Out] float* metrics) where T3 : struct
			{
				fixed (T3* ptr = &paths)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr, pathBase, stride, metrics, GL.EntryPoints[841]);
				}
			}

			// Token: 0x060028CA RID: 10442 RVA: 0x0006F448 File Offset: 0x0006D648
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric(uint metricQueryMask, int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, int stride, [Out] float[] metrics)
			{
				fixed (float* ptr = ref (metrics != null && metrics.Length != 0) ? ref metrics[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, ptr, GL.EntryPoints[841]);
				}
			}

			// Token: 0x060028CB RID: 10443 RVA: 0x0006F488 File Offset: 0x0006D688
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric(uint metricQueryMask, int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, int stride, out float metrics)
			{
				fixed (float* ptr = &metrics)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, ptr, GL.EntryPoints[841]);
				}
			}

			// Token: 0x060028CC RID: 10444 RVA: 0x0006F4B4 File Offset: 0x0006D6B4
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric(uint metricQueryMask, int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, int stride, [Out] float* metrics)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics, GL.EntryPoints[841]);
			}

			// Token: 0x060028CD RID: 10445 RVA: 0x0006F4DC File Offset: 0x0006D6DC
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(uint metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[] paths, uint pathBase, int stride, [Out] float[] metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = ref (metrics != null && metrics.Length != 0) ? ref metrics[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr2, pathBase, stride, ptr3, GL.EntryPoints[841]);
					}
				}
			}

			// Token: 0x060028CE RID: 10446 RVA: 0x0006F530 File Offset: 0x0006D730
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(uint metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[] paths, uint pathBase, int stride, out float metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = &metrics)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr2, pathBase, stride, ptr3, GL.EntryPoints[841]);
					}
				}
			}

			// Token: 0x060028CF RID: 10447 RVA: 0x0006F570 File Offset: 0x0006D770
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(uint metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[] paths, uint pathBase, int stride, [Out] float* metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr, pathBase, stride, metrics, GL.EntryPoints[841]);
				}
			}

			// Token: 0x060028D0 RID: 10448 RVA: 0x0006F5AC File Offset: 0x0006D7AC
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(uint metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,] paths, uint pathBase, int stride, [Out] float[] metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = ref (metrics != null && metrics.Length != 0) ? ref metrics[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr2, pathBase, stride, ptr3, GL.EntryPoints[841]);
					}
				}
			}

			// Token: 0x060028D1 RID: 10449 RVA: 0x0006F604 File Offset: 0x0006D804
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(uint metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,] paths, uint pathBase, int stride, out float metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = &metrics)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr2, pathBase, stride, ptr3, GL.EntryPoints[841]);
					}
				}
			}

			// Token: 0x060028D2 RID: 10450 RVA: 0x0006F648 File Offset: 0x0006D848
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(uint metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,] paths, uint pathBase, int stride, [Out] float* metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr, pathBase, stride, metrics, GL.EntryPoints[841]);
				}
			}

			// Token: 0x060028D3 RID: 10451 RVA: 0x0006F688 File Offset: 0x0006D888
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(uint metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,,] paths, uint pathBase, int stride, [Out] float[] metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = ref (metrics != null && metrics.Length != 0) ? ref metrics[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr2, pathBase, stride, ptr3, GL.EntryPoints[841]);
					}
				}
			}

			// Token: 0x060028D4 RID: 10452 RVA: 0x0006F6E0 File Offset: 0x0006D8E0
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(uint metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,,] paths, uint pathBase, int stride, out float metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = &metrics)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr2, pathBase, stride, ptr3, GL.EntryPoints[841]);
					}
				}
			}

			// Token: 0x060028D5 RID: 10453 RVA: 0x0006F724 File Offset: 0x0006D924
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(uint metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,,] paths, uint pathBase, int stride, [Out] float* metrics) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr, pathBase, stride, metrics, GL.EntryPoints[841]);
				}
			}

			// Token: 0x060028D6 RID: 10454 RVA: 0x0006F768 File Offset: 0x0006D968
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(uint metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] ref T3 paths, uint pathBase, int stride, [Out] float[] metrics) where T3 : struct
			{
				fixed (T3* ptr = &paths)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = ref (metrics != null && metrics.Length != 0) ? ref metrics[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr2, pathBase, stride, ptr3, GL.EntryPoints[841]);
					}
				}
			}

			// Token: 0x060028D7 RID: 10455 RVA: 0x0006F7AC File Offset: 0x0006D9AC
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(uint metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] ref T3 paths, uint pathBase, int stride, out float metrics) where T3 : struct
			{
				fixed (T3* ptr = &paths)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = &metrics)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr2, pathBase, stride, ptr3, GL.EntryPoints[841]);
					}
				}
			}

			// Token: 0x060028D8 RID: 10456 RVA: 0x0006F7DC File Offset: 0x0006D9DC
			[CLSCompliant(false)]
			public unsafe static void GetPathMetric<T3>(uint metricQueryMask, int numPaths, NvPathRendering pathNameType, [In] [Out] ref T3 paths, uint pathBase, int stride, [Out] float* metrics) where T3 : struct
			{
				fixed (T3* ptr = &paths)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Single*), metricQueryMask, numPaths, pathNameType, ptr, pathBase, stride, metrics, GL.EntryPoints[841]);
				}
			}

			// Token: 0x060028D9 RID: 10457 RVA: 0x0006F808 File Offset: 0x0006DA08
			[CLSCompliant(false)]
			public unsafe static void GetPathParameter(int path, NvPathRendering pname, [Out] float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), path, pname, ptr, GL.EntryPoints[842]);
				}
			}

			// Token: 0x060028DA RID: 10458 RVA: 0x0006F840 File Offset: 0x0006DA40
			[CLSCompliant(false)]
			public unsafe static void GetPathParameter(int path, NvPathRendering pname, out float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), path, pname, ptr, GL.EntryPoints[842]);
				}
			}

			// Token: 0x060028DB RID: 10459 RVA: 0x0006F864 File Offset: 0x0006DA64
			[CLSCompliant(false)]
			public unsafe static void GetPathParameter(int path, NvPathRendering pname, [Out] float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), path, pname, value, GL.EntryPoints[842]);
			}

			// Token: 0x060028DC RID: 10460 RVA: 0x0006F87C File Offset: 0x0006DA7C
			[CLSCompliant(false)]
			public unsafe static void GetPathParameter(uint path, NvPathRendering pname, [Out] float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), path, pname, ptr, GL.EntryPoints[842]);
				}
			}

			// Token: 0x060028DD RID: 10461 RVA: 0x0006F8B4 File Offset: 0x0006DAB4
			[CLSCompliant(false)]
			public unsafe static void GetPathParameter(uint path, NvPathRendering pname, out float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), path, pname, ptr, GL.EntryPoints[842]);
				}
			}

			// Token: 0x060028DE RID: 10462 RVA: 0x0006F8D8 File Offset: 0x0006DAD8
			[CLSCompliant(false)]
			public unsafe static void GetPathParameter(uint path, NvPathRendering pname, [Out] float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), path, pname, value, GL.EntryPoints[842]);
			}

			// Token: 0x060028DF RID: 10463 RVA: 0x0006F8F0 File Offset: 0x0006DAF0
			[CLSCompliant(false)]
			public unsafe static void GetPathParameter(int path, NvPathRendering pname, [Out] int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), path, pname, ptr, GL.EntryPoints[843]);
				}
			}

			// Token: 0x060028E0 RID: 10464 RVA: 0x0006F928 File Offset: 0x0006DB28
			[CLSCompliant(false)]
			public unsafe static void GetPathParameter(int path, NvPathRendering pname, out int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), path, pname, ptr, GL.EntryPoints[843]);
				}
			}

			// Token: 0x060028E1 RID: 10465 RVA: 0x0006F94C File Offset: 0x0006DB4C
			[CLSCompliant(false)]
			public unsafe static void GetPathParameter(int path, NvPathRendering pname, [Out] int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), path, pname, value, GL.EntryPoints[843]);
			}

			// Token: 0x060028E2 RID: 10466 RVA: 0x0006F964 File Offset: 0x0006DB64
			[CLSCompliant(false)]
			public unsafe static void GetPathParameter(uint path, NvPathRendering pname, [Out] int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), path, pname, ptr, GL.EntryPoints[843]);
				}
			}

			// Token: 0x060028E3 RID: 10467 RVA: 0x0006F99C File Offset: 0x0006DB9C
			[CLSCompliant(false)]
			public unsafe static void GetPathParameter(uint path, NvPathRendering pname, out int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), path, pname, ptr, GL.EntryPoints[843]);
				}
			}

			// Token: 0x060028E4 RID: 10468 RVA: 0x0006F9C0 File Offset: 0x0006DBC0
			[CLSCompliant(false)]
			public unsafe static void GetPathParameter(uint path, NvPathRendering pname, [Out] int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), path, pname, value, GL.EntryPoints[843]);
			}

			// Token: 0x060028E5 RID: 10469 RVA: 0x0006F9D8 File Offset: 0x0006DBD8
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float[] returnedSpacing)
			{
				fixed (float* ptr = ref (returnedSpacing != null && returnedSpacing.Length != 0) ? ref returnedSpacing[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, ptr, GL.EntryPoints[844]);
				}
			}

			// Token: 0x060028E6 RID: 10470 RVA: 0x0006FA1C File Offset: 0x0006DC1C
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, out float returnedSpacing)
			{
				fixed (float* ptr = &returnedSpacing)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, ptr, GL.EntryPoints[844]);
				}
			}

			// Token: 0x060028E7 RID: 10471 RVA: 0x0006FA4C File Offset: 0x0006DC4C
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float* returnedSpacing)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing, GL.EntryPoints[844]);
			}

			// Token: 0x060028E8 RID: 10472 RVA: 0x0006FA78 File Offset: 0x0006DC78
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float[] returnedSpacing)
			{
				fixed (float* ptr = ref (returnedSpacing != null && returnedSpacing.Length != 0) ? ref returnedSpacing[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, ptr, GL.EntryPoints[844]);
				}
			}

			// Token: 0x060028E9 RID: 10473 RVA: 0x0006FABC File Offset: 0x0006DCBC
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, out float returnedSpacing)
			{
				fixed (float* ptr = &returnedSpacing)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, ptr, GL.EntryPoints[844]);
				}
			}

			// Token: 0x060028EA RID: 10474 RVA: 0x0006FAEC File Offset: 0x0006DCEC
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float* returnedSpacing)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing, GL.EntryPoints[844]);
			}

			// Token: 0x060028EB RID: 10475 RVA: 0x0006FB18 File Offset: 0x0006DD18
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[] paths, int pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float[] returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = ref (returnedSpacing != null && returnedSpacing.Length != 0) ? ref returnedSpacing[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr2, pathBase, advanceScale, kerningScale, transformType, ptr3, GL.EntryPoints[844]);
					}
				}
			}

			// Token: 0x060028EC RID: 10476 RVA: 0x0006FB70 File Offset: 0x0006DD70
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[] paths, int pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, out float returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = &returnedSpacing)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr2, pathBase, advanceScale, kerningScale, transformType, ptr3, GL.EntryPoints[844]);
					}
				}
			}

			// Token: 0x060028ED RID: 10477 RVA: 0x0006FBB4 File Offset: 0x0006DDB4
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[] paths, int pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float* returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing, GL.EntryPoints[844]);
				}
			}

			// Token: 0x060028EE RID: 10478 RVA: 0x0006FBF4 File Offset: 0x0006DDF4
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[] paths, uint pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float[] returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = ref (returnedSpacing != null && returnedSpacing.Length != 0) ? ref returnedSpacing[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr2, pathBase, advanceScale, kerningScale, transformType, ptr3, GL.EntryPoints[844]);
					}
				}
			}

			// Token: 0x060028EF RID: 10479 RVA: 0x0006FC4C File Offset: 0x0006DE4C
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[] paths, uint pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, out float returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = &returnedSpacing)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr2, pathBase, advanceScale, kerningScale, transformType, ptr3, GL.EntryPoints[844]);
					}
				}
			}

			// Token: 0x060028F0 RID: 10480 RVA: 0x0006FC90 File Offset: 0x0006DE90
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[] paths, uint pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float* returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing, GL.EntryPoints[844]);
				}
			}

			// Token: 0x060028F1 RID: 10481 RVA: 0x0006FCD0 File Offset: 0x0006DED0
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,] paths, int pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float[] returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = ref (returnedSpacing != null && returnedSpacing.Length != 0) ? ref returnedSpacing[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr2, pathBase, advanceScale, kerningScale, transformType, ptr3, GL.EntryPoints[844]);
					}
				}
			}

			// Token: 0x060028F2 RID: 10482 RVA: 0x0006FD2C File Offset: 0x0006DF2C
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,] paths, int pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, out float returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = &returnedSpacing)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr2, pathBase, advanceScale, kerningScale, transformType, ptr3, GL.EntryPoints[844]);
					}
				}
			}

			// Token: 0x060028F3 RID: 10483 RVA: 0x0006FD74 File Offset: 0x0006DF74
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,] paths, int pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float* returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing, GL.EntryPoints[844]);
				}
			}

			// Token: 0x060028F4 RID: 10484 RVA: 0x0006FDB8 File Offset: 0x0006DFB8
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,] paths, uint pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float[] returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = ref (returnedSpacing != null && returnedSpacing.Length != 0) ? ref returnedSpacing[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr2, pathBase, advanceScale, kerningScale, transformType, ptr3, GL.EntryPoints[844]);
					}
				}
			}

			// Token: 0x060028F5 RID: 10485 RVA: 0x0006FE14 File Offset: 0x0006E014
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,] paths, uint pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, out float returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = &returnedSpacing)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr2, pathBase, advanceScale, kerningScale, transformType, ptr3, GL.EntryPoints[844]);
					}
				}
			}

			// Token: 0x060028F6 RID: 10486 RVA: 0x0006FE5C File Offset: 0x0006E05C
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,] paths, uint pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float* returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing, GL.EntryPoints[844]);
				}
			}

			// Token: 0x060028F7 RID: 10487 RVA: 0x0006FEA0 File Offset: 0x0006E0A0
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,,] paths, int pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float[] returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = ref (returnedSpacing != null && returnedSpacing.Length != 0) ? ref returnedSpacing[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr2, pathBase, advanceScale, kerningScale, transformType, ptr3, GL.EntryPoints[844]);
					}
				}
			}

			// Token: 0x060028F8 RID: 10488 RVA: 0x0006FEFC File Offset: 0x0006E0FC
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,,] paths, int pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, out float returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = &returnedSpacing)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr2, pathBase, advanceScale, kerningScale, transformType, ptr3, GL.EntryPoints[844]);
					}
				}
			}

			// Token: 0x060028F9 RID: 10489 RVA: 0x0006FF44 File Offset: 0x0006E144
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,,] paths, int pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float* returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing, GL.EntryPoints[844]);
				}
			}

			// Token: 0x060028FA RID: 10490 RVA: 0x0006FF8C File Offset: 0x0006E18C
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,,] paths, uint pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float[] returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = ref (returnedSpacing != null && returnedSpacing.Length != 0) ? ref returnedSpacing[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr2, pathBase, advanceScale, kerningScale, transformType, ptr3, GL.EntryPoints[844]);
					}
				}
			}

			// Token: 0x060028FB RID: 10491 RVA: 0x0006FFE8 File Offset: 0x0006E1E8
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,,] paths, uint pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, out float returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = &returnedSpacing)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr2, pathBase, advanceScale, kerningScale, transformType, ptr3, GL.EntryPoints[844]);
					}
				}
			}

			// Token: 0x060028FC RID: 10492 RVA: 0x00070030 File Offset: 0x0006E230
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] T3[,,] paths, uint pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float* returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing, GL.EntryPoints[844]);
				}
			}

			// Token: 0x060028FD RID: 10493 RVA: 0x00070078 File Offset: 0x0006E278
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] ref T3 paths, int pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float[] returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = &paths)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = ref (returnedSpacing != null && returnedSpacing.Length != 0) ? ref returnedSpacing[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr2, pathBase, advanceScale, kerningScale, transformType, ptr3, GL.EntryPoints[844]);
					}
				}
			}

			// Token: 0x060028FE RID: 10494 RVA: 0x000700C0 File Offset: 0x0006E2C0
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] ref T3 paths, int pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, out float returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = &paths)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = &returnedSpacing)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr2, pathBase, advanceScale, kerningScale, transformType, ptr3, GL.EntryPoints[844]);
					}
				}
			}

			// Token: 0x060028FF RID: 10495 RVA: 0x000700F4 File Offset: 0x0006E2F4
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] ref T3 paths, int pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float* returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = &paths)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing, GL.EntryPoints[844]);
				}
			}

			// Token: 0x06002900 RID: 10496 RVA: 0x00070124 File Offset: 0x0006E324
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] ref T3 paths, uint pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float[] returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = &paths)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = ref (returnedSpacing != null && returnedSpacing.Length != 0) ? ref returnedSpacing[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr2, pathBase, advanceScale, kerningScale, transformType, ptr3, GL.EntryPoints[844]);
					}
				}
			}

			// Token: 0x06002901 RID: 10497 RVA: 0x0007016C File Offset: 0x0006E36C
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] ref T3 paths, uint pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, out float returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = &paths)
				{
					T3* ptr2 = ptr;
					fixed (float* ptr3 = &returnedSpacing)
					{
						calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr2, pathBase, advanceScale, kerningScale, transformType, ptr3, GL.EntryPoints[844]);
					}
				}
			}

			// Token: 0x06002902 RID: 10498 RVA: 0x000701A0 File Offset: 0x0006E3A0
			[CLSCompliant(false)]
			public unsafe static void GetPathSpacing<T3>(NvPathRendering pathListMode, int numPaths, NvPathRendering pathNameType, [In] [Out] ref T3 paths, uint pathBase, float advanceScale, float kerningScale, NvPathRendering transformType, [Out] float* returnedSpacing) where T3 : struct
			{
				fixed (T3* ptr = &paths)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Single,System.Single,System.Int32,System.Single*), pathListMode, numPaths, pathNameType, ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing, GL.EntryPoints[844]);
				}
			}

			// Token: 0x06002903 RID: 10499 RVA: 0x000701D0 File Offset: 0x0006E3D0
			[CLSCompliant(false)]
			public unsafe static void GetPathTexGen(TextureUnit texCoordSet, NvPathRendering pname, [Out] float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), texCoordSet, pname, ptr, GL.EntryPoints[845]);
				}
			}

			// Token: 0x06002904 RID: 10500 RVA: 0x00070208 File Offset: 0x0006E408
			[CLSCompliant(false)]
			public unsafe static void GetPathTexGen(TextureUnit texCoordSet, NvPathRendering pname, out float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), texCoordSet, pname, ptr, GL.EntryPoints[845]);
				}
			}

			// Token: 0x06002905 RID: 10501 RVA: 0x0007022C File Offset: 0x0006E42C
			[CLSCompliant(false)]
			public unsafe static void GetPathTexGen(TextureUnit texCoordSet, NvPathRendering pname, [Out] float* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), texCoordSet, pname, value, GL.EntryPoints[845]);
			}

			// Token: 0x06002906 RID: 10502 RVA: 0x00070244 File Offset: 0x0006E444
			[CLSCompliant(false)]
			public unsafe static void GetPathTexGen(TextureUnit texCoordSet, NvPathRendering pname, [Out] int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), texCoordSet, pname, ptr, GL.EntryPoints[846]);
				}
			}

			// Token: 0x06002907 RID: 10503 RVA: 0x0007027C File Offset: 0x0006E47C
			[CLSCompliant(false)]
			public unsafe static void GetPathTexGen(TextureUnit texCoordSet, NvPathRendering pname, out int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), texCoordSet, pname, ptr, GL.EntryPoints[846]);
				}
			}

			// Token: 0x06002908 RID: 10504 RVA: 0x000702A0 File Offset: 0x0006E4A0
			[CLSCompliant(false)]
			public unsafe static void GetPathTexGen(TextureUnit texCoordSet, NvPathRendering pname, [Out] int* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), texCoordSet, pname, value, GL.EntryPoints[846]);
			}

			// Token: 0x06002909 RID: 10505 RVA: 0x000702B8 File Offset: 0x0006E4B8
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameterI(NvGpuProgram4 target, int index, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[874]);
				}
			}

			// Token: 0x0600290A RID: 10506 RVA: 0x000702F0 File Offset: 0x0006E4F0
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameterI(NvGpuProgram4 target, int index, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[874]);
				}
			}

			// Token: 0x0600290B RID: 10507 RVA: 0x00070314 File Offset: 0x0006E514
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameterI(NvGpuProgram4 target, int index, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, @params, GL.EntryPoints[874]);
			}

			// Token: 0x0600290C RID: 10508 RVA: 0x0007032C File Offset: 0x0006E52C
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameterI(NvGpuProgram4 target, uint index, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[874]);
				}
			}

			// Token: 0x0600290D RID: 10509 RVA: 0x00070364 File Offset: 0x0006E564
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameterI(NvGpuProgram4 target, uint index, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[874]);
				}
			}

			// Token: 0x0600290E RID: 10510 RVA: 0x00070388 File Offset: 0x0006E588
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameterI(NvGpuProgram4 target, uint index, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, @params, GL.EntryPoints[874]);
			}

			// Token: 0x0600290F RID: 10511 RVA: 0x000703A0 File Offset: 0x0006E5A0
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameterI(NvGpuProgram4 target, uint index, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, ptr, GL.EntryPoints[875]);
				}
			}

			// Token: 0x06002910 RID: 10512 RVA: 0x000703D8 File Offset: 0x0006E5D8
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameterI(NvGpuProgram4 target, uint index, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, ptr, GL.EntryPoints[875]);
				}
			}

			// Token: 0x06002911 RID: 10513 RVA: 0x000703FC File Offset: 0x0006E5FC
			[CLSCompliant(false)]
			public unsafe static void GetProgramEnvParameterI(NvGpuProgram4 target, uint index, [Out] uint* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, @params, GL.EntryPoints[875]);
			}

			// Token: 0x06002912 RID: 10514 RVA: 0x00070414 File Offset: 0x0006E614
			[CLSCompliant(false)]
			public unsafe static void GetProgram(int id, NvVertexProgram pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[880]);
				}
			}

			// Token: 0x06002913 RID: 10515 RVA: 0x0007044C File Offset: 0x0006E64C
			[CLSCompliant(false)]
			public unsafe static void GetProgram(int id, NvVertexProgram pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[880]);
				}
			}

			// Token: 0x06002914 RID: 10516 RVA: 0x00070470 File Offset: 0x0006E670
			[CLSCompliant(false)]
			public unsafe static void GetProgram(int id, NvVertexProgram pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, @params, GL.EntryPoints[880]);
			}

			// Token: 0x06002915 RID: 10517 RVA: 0x00070488 File Offset: 0x0006E688
			[CLSCompliant(false)]
			public unsafe static void GetProgram(uint id, NvVertexProgram pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[880]);
				}
			}

			// Token: 0x06002916 RID: 10518 RVA: 0x000704C0 File Offset: 0x0006E6C0
			[CLSCompliant(false)]
			public unsafe static void GetProgram(uint id, NvVertexProgram pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[880]);
				}
			}

			// Token: 0x06002917 RID: 10519 RVA: 0x000704E4 File Offset: 0x0006E6E4
			[CLSCompliant(false)]
			public unsafe static void GetProgram(uint id, NvVertexProgram pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, @params, GL.EntryPoints[880]);
			}

			// Token: 0x06002918 RID: 10520 RVA: 0x000704FC File Offset: 0x0006E6FC
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameterI(NvGpuProgram4 target, int index, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[883]);
				}
			}

			// Token: 0x06002919 RID: 10521 RVA: 0x00070534 File Offset: 0x0006E734
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameterI(NvGpuProgram4 target, int index, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[883]);
				}
			}

			// Token: 0x0600291A RID: 10522 RVA: 0x00070558 File Offset: 0x0006E758
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameterI(NvGpuProgram4 target, int index, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, @params, GL.EntryPoints[883]);
			}

			// Token: 0x0600291B RID: 10523 RVA: 0x00070570 File Offset: 0x0006E770
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameterI(NvGpuProgram4 target, uint index, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[883]);
				}
			}

			// Token: 0x0600291C RID: 10524 RVA: 0x000705A8 File Offset: 0x0006E7A8
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameterI(NvGpuProgram4 target, uint index, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[883]);
				}
			}

			// Token: 0x0600291D RID: 10525 RVA: 0x000705CC File Offset: 0x0006E7CC
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameterI(NvGpuProgram4 target, uint index, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, @params, GL.EntryPoints[883]);
			}

			// Token: 0x0600291E RID: 10526 RVA: 0x000705E4 File Offset: 0x0006E7E4
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameterI(NvGpuProgram4 target, uint index, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, ptr, GL.EntryPoints[884]);
				}
			}

			// Token: 0x0600291F RID: 10527 RVA: 0x0007061C File Offset: 0x0006E81C
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameterI(NvGpuProgram4 target, uint index, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, ptr, GL.EntryPoints[884]);
				}
			}

			// Token: 0x06002920 RID: 10528 RVA: 0x00070640 File Offset: 0x0006E840
			[CLSCompliant(false)]
			public unsafe static void GetProgramLocalParameterI(NvGpuProgram4 target, uint index, [Out] uint* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, @params, GL.EntryPoints[884]);
			}

			// Token: 0x06002921 RID: 10529 RVA: 0x00070658 File Offset: 0x0006E858
			[CLSCompliant(false)]
			public unsafe static void GetProgramNamedParameter(int id, int len, ref byte name, [Out] double[] @params)
			{
				fixed (byte* ptr = &name)
				{
					byte* ptr2 = ptr;
					fixed (double* ptr3 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double*), id, len, ptr2, ptr3, GL.EntryPoints[885]);
					}
				}
			}

			// Token: 0x06002922 RID: 10530 RVA: 0x00070694 File Offset: 0x0006E894
			[CLSCompliant(false)]
			public unsafe static void GetProgramNamedParameter(int id, int len, ref byte name, out double @params)
			{
				fixed (byte* ptr = &name)
				{
					byte* ptr2 = ptr;
					fixed (double* ptr3 = &@params)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double*), id, len, ptr2, ptr3, GL.EntryPoints[885]);
					}
				}
			}

			// Token: 0x06002923 RID: 10531 RVA: 0x000706BC File Offset: 0x0006E8BC
			[CLSCompliant(false)]
			public unsafe static void GetProgramNamedParameter(int id, int len, byte* name, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double*), id, len, name, @params, GL.EntryPoints[885]);
			}

			// Token: 0x06002924 RID: 10532 RVA: 0x000706D4 File Offset: 0x0006E8D4
			[CLSCompliant(false)]
			public unsafe static void GetProgramNamedParameter(uint id, int len, ref byte name, [Out] double[] @params)
			{
				fixed (byte* ptr = &name)
				{
					byte* ptr2 = ptr;
					fixed (double* ptr3 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double*), id, len, ptr2, ptr3, GL.EntryPoints[885]);
					}
				}
			}

			// Token: 0x06002925 RID: 10533 RVA: 0x00070710 File Offset: 0x0006E910
			[CLSCompliant(false)]
			public unsafe static void GetProgramNamedParameter(uint id, int len, ref byte name, out double @params)
			{
				fixed (byte* ptr = &name)
				{
					byte* ptr2 = ptr;
					fixed (double* ptr3 = &@params)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double*), id, len, ptr2, ptr3, GL.EntryPoints[885]);
					}
				}
			}

			// Token: 0x06002926 RID: 10534 RVA: 0x00070738 File Offset: 0x0006E938
			[CLSCompliant(false)]
			public unsafe static void GetProgramNamedParameter(uint id, int len, byte* name, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double*), id, len, name, @params, GL.EntryPoints[885]);
			}

			// Token: 0x06002927 RID: 10535 RVA: 0x00070750 File Offset: 0x0006E950
			[CLSCompliant(false)]
			public unsafe static void GetProgramNamedParameter(int id, int len, ref byte name, [Out] float[] @params)
			{
				fixed (byte* ptr = &name)
				{
					byte* ptr2 = ptr;
					fixed (float* ptr3 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single*), id, len, ptr2, ptr3, GL.EntryPoints[886]);
					}
				}
			}

			// Token: 0x06002928 RID: 10536 RVA: 0x0007078C File Offset: 0x0006E98C
			[CLSCompliant(false)]
			public unsafe static void GetProgramNamedParameter(int id, int len, ref byte name, out float @params)
			{
				fixed (byte* ptr = &name)
				{
					byte* ptr2 = ptr;
					fixed (float* ptr3 = &@params)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single*), id, len, ptr2, ptr3, GL.EntryPoints[886]);
					}
				}
			}

			// Token: 0x06002929 RID: 10537 RVA: 0x000707B4 File Offset: 0x0006E9B4
			[CLSCompliant(false)]
			public unsafe static void GetProgramNamedParameter(int id, int len, byte* name, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single*), id, len, name, @params, GL.EntryPoints[886]);
			}

			// Token: 0x0600292A RID: 10538 RVA: 0x000707CC File Offset: 0x0006E9CC
			[CLSCompliant(false)]
			public unsafe static void GetProgramNamedParameter(uint id, int len, ref byte name, [Out] float[] @params)
			{
				fixed (byte* ptr = &name)
				{
					byte* ptr2 = ptr;
					fixed (float* ptr3 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single*), id, len, ptr2, ptr3, GL.EntryPoints[886]);
					}
				}
			}

			// Token: 0x0600292B RID: 10539 RVA: 0x00070808 File Offset: 0x0006EA08
			[CLSCompliant(false)]
			public unsafe static void GetProgramNamedParameter(uint id, int len, ref byte name, out float @params)
			{
				fixed (byte* ptr = &name)
				{
					byte* ptr2 = ptr;
					fixed (float* ptr3 = &@params)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single*), id, len, ptr2, ptr3, GL.EntryPoints[886]);
					}
				}
			}

			// Token: 0x0600292C RID: 10540 RVA: 0x00070830 File Offset: 0x0006EA30
			[CLSCompliant(false)]
			public unsafe static void GetProgramNamedParameter(uint id, int len, byte* name, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single*), id, len, name, @params, GL.EntryPoints[886]);
			}

			// Token: 0x0600292D RID: 10541 RVA: 0x00070848 File Offset: 0x0006EA48
			[CLSCompliant(false)]
			public unsafe static void GetProgramParameter(AssemblyProgramTargetArb target, int index, AssemblyProgramParameterArb pname, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Double*), target, index, pname, ptr, GL.EntryPoints[887]);
				}
			}

			// Token: 0x0600292E RID: 10542 RVA: 0x00070880 File Offset: 0x0006EA80
			[CLSCompliant(false)]
			public unsafe static void GetProgramParameter(AssemblyProgramTargetArb target, int index, AssemblyProgramParameterArb pname, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Double*), target, index, pname, ptr, GL.EntryPoints[887]);
				}
			}

			// Token: 0x0600292F RID: 10543 RVA: 0x000708A4 File Offset: 0x0006EAA4
			[CLSCompliant(false)]
			public unsafe static void GetProgramParameter(AssemblyProgramTargetArb target, int index, AssemblyProgramParameterArb pname, [Out] double* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Double*), target, index, pname, @params, GL.EntryPoints[887]);
			}

			// Token: 0x06002930 RID: 10544 RVA: 0x000708BC File Offset: 0x0006EABC
			[CLSCompliant(false)]
			public unsafe static void GetProgramParameter(AssemblyProgramTargetArb target, uint index, AssemblyProgramParameterArb pname, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Double*), target, index, pname, ptr, GL.EntryPoints[887]);
				}
			}

			// Token: 0x06002931 RID: 10545 RVA: 0x000708F4 File Offset: 0x0006EAF4
			[CLSCompliant(false)]
			public unsafe static void GetProgramParameter(AssemblyProgramTargetArb target, uint index, AssemblyProgramParameterArb pname, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Double*), target, index, pname, ptr, GL.EntryPoints[887]);
				}
			}

			// Token: 0x06002932 RID: 10546 RVA: 0x00070918 File Offset: 0x0006EB18
			[CLSCompliant(false)]
			public unsafe static void GetProgramParameter(AssemblyProgramTargetArb target, uint index, AssemblyProgramParameterArb pname, [Out] double* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Double*), target, index, pname, @params, GL.EntryPoints[887]);
			}

			// Token: 0x06002933 RID: 10547 RVA: 0x00070930 File Offset: 0x0006EB30
			[CLSCompliant(false)]
			public unsafe static void GetProgramParameter(AssemblyProgramTargetArb target, int index, AssemblyProgramParameterArb pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, pname, ptr, GL.EntryPoints[888]);
				}
			}

			// Token: 0x06002934 RID: 10548 RVA: 0x00070968 File Offset: 0x0006EB68
			[CLSCompliant(false)]
			public unsafe static void GetProgramParameter(AssemblyProgramTargetArb target, int index, AssemblyProgramParameterArb pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, pname, ptr, GL.EntryPoints[888]);
				}
			}

			// Token: 0x06002935 RID: 10549 RVA: 0x0007098C File Offset: 0x0006EB8C
			[CLSCompliant(false)]
			public unsafe static void GetProgramParameter(AssemblyProgramTargetArb target, int index, AssemblyProgramParameterArb pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, pname, @params, GL.EntryPoints[888]);
			}

			// Token: 0x06002936 RID: 10550 RVA: 0x000709A4 File Offset: 0x0006EBA4
			[CLSCompliant(false)]
			public unsafe static void GetProgramParameter(AssemblyProgramTargetArb target, uint index, AssemblyProgramParameterArb pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, pname, ptr, GL.EntryPoints[888]);
				}
			}

			// Token: 0x06002937 RID: 10551 RVA: 0x000709DC File Offset: 0x0006EBDC
			[CLSCompliant(false)]
			public unsafe static void GetProgramParameter(AssemblyProgramTargetArb target, uint index, AssemblyProgramParameterArb pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, pname, ptr, GL.EntryPoints[888]);
				}
			}

			// Token: 0x06002938 RID: 10552 RVA: 0x00070A00 File Offset: 0x0006EC00
			[CLSCompliant(false)]
			public unsafe static void GetProgramParameter(AssemblyProgramTargetArb target, uint index, AssemblyProgramParameterArb pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, pname, @params, GL.EntryPoints[888]);
			}

			// Token: 0x06002939 RID: 10553 RVA: 0x00070A18 File Offset: 0x0006EC18
			[CLSCompliant(false)]
			public unsafe static void GetProgramString(int id, NvVertexProgram pname, [Out] byte[] program)
			{
				fixed (byte* ptr = ref (program != null && program.Length != 0) ? ref program[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*), id, pname, ptr, GL.EntryPoints[900]);
				}
			}

			// Token: 0x0600293A RID: 10554 RVA: 0x00070A50 File Offset: 0x0006EC50
			[CLSCompliant(false)]
			public unsafe static void GetProgramString(int id, NvVertexProgram pname, out byte program)
			{
				fixed (byte* ptr = &program)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*), id, pname, ptr, GL.EntryPoints[900]);
				}
			}

			// Token: 0x0600293B RID: 10555 RVA: 0x00070A74 File Offset: 0x0006EC74
			[CLSCompliant(false)]
			public unsafe static void GetProgramString(int id, NvVertexProgram pname, [Out] byte* program)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*), id, pname, program, GL.EntryPoints[900]);
			}

			// Token: 0x0600293C RID: 10556 RVA: 0x00070A8C File Offset: 0x0006EC8C
			[CLSCompliant(false)]
			public unsafe static void GetProgramString(uint id, NvVertexProgram pname, [Out] byte[] program)
			{
				fixed (byte* ptr = ref (program != null && program.Length != 0) ? ref program[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*), id, pname, ptr, GL.EntryPoints[900]);
				}
			}

			// Token: 0x0600293D RID: 10557 RVA: 0x00070AC4 File Offset: 0x0006ECC4
			[CLSCompliant(false)]
			public unsafe static void GetProgramString(uint id, NvVertexProgram pname, out byte program)
			{
				fixed (byte* ptr = &program)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*), id, pname, ptr, GL.EntryPoints[900]);
				}
			}

			// Token: 0x0600293E RID: 10558 RVA: 0x00070AE8 File Offset: 0x0006ECE8
			[CLSCompliant(false)]
			public unsafe static void GetProgramString(uint id, NvVertexProgram pname, [Out] byte* program)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*), id, pname, program, GL.EntryPoints[900]);
			}

			// Token: 0x0600293F RID: 10559 RVA: 0x00070B00 File Offset: 0x0006ED00
			[CLSCompliant(false)]
			public unsafe static void GetProgramSubroutineParameter(NvGpuProgram5 target, int index, [Out] int[] param)
			{
				fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, ptr, GL.EntryPoints[901]);
				}
			}

			// Token: 0x06002940 RID: 10560 RVA: 0x00070B38 File Offset: 0x0006ED38
			[CLSCompliant(false)]
			public unsafe static void GetProgramSubroutineParameter(NvGpuProgram5 target, int index, out int param)
			{
				fixed (int* ptr = &param)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, ptr, GL.EntryPoints[901]);
				}
			}

			// Token: 0x06002941 RID: 10561 RVA: 0x00070B5C File Offset: 0x0006ED5C
			[CLSCompliant(false)]
			public unsafe static void GetProgramSubroutineParameter(NvGpuProgram5 target, int index, [Out] int* param)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, param, GL.EntryPoints[901]);
			}

			// Token: 0x06002942 RID: 10562 RVA: 0x00070B74 File Offset: 0x0006ED74
			[CLSCompliant(false)]
			public unsafe static void GetProgramSubroutineParameter(NvGpuProgram5 target, uint index, [Out] uint[] param)
			{
				fixed (uint* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, ptr, GL.EntryPoints[901]);
				}
			}

			// Token: 0x06002943 RID: 10563 RVA: 0x00070BAC File Offset: 0x0006EDAC
			[CLSCompliant(false)]
			public unsafe static void GetProgramSubroutineParameter(NvGpuProgram5 target, uint index, out uint param)
			{
				fixed (uint* ptr = &param)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, ptr, GL.EntryPoints[901]);
				}
			}

			// Token: 0x06002944 RID: 10564 RVA: 0x00070BD0 File Offset: 0x0006EDD0
			[CLSCompliant(false)]
			public unsafe static void GetProgramSubroutineParameter(NvGpuProgram5 target, uint index, [Out] uint* param)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, param, GL.EntryPoints[901]);
			}

			// Token: 0x06002945 RID: 10565 RVA: 0x00070BE8 File Offset: 0x0006EDE8
			[CLSCompliant(false)]
			public static long GetTextureHandle(int texture)
			{
				return calli(System.Int64(System.UInt32), texture, GL.EntryPoints[955]);
			}

			// Token: 0x06002946 RID: 10566 RVA: 0x00070BFC File Offset: 0x0006EDFC
			[CLSCompliant(false)]
			public static long GetTextureHandle(uint texture)
			{
				return calli(System.Int64(System.UInt32), texture, GL.EntryPoints[955]);
			}

			// Token: 0x06002947 RID: 10567 RVA: 0x00070C10 File Offset: 0x0006EE10
			[CLSCompliant(false)]
			public static long GetTextureSamplerHandle(int texture, int sampler)
			{
				return calli(System.Int64(System.UInt32,System.UInt32), texture, sampler, GL.EntryPoints[964]);
			}

			// Token: 0x06002948 RID: 10568 RVA: 0x00070C24 File Offset: 0x0006EE24
			[CLSCompliant(false)]
			public static long GetTextureSamplerHandle(uint texture, uint sampler)
			{
				return calli(System.Int64(System.UInt32,System.UInt32), texture, sampler, GL.EntryPoints[964]);
			}

			// Token: 0x06002949 RID: 10569 RVA: 0x00070C38 File Offset: 0x0006EE38
			[CLSCompliant(false)]
			public unsafe static void GetTrackMatrix(AssemblyProgramTargetArb target, int address, AssemblyProgramParameterArb pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, address, pname, ptr, GL.EntryPoints[965]);
				}
			}

			// Token: 0x0600294A RID: 10570 RVA: 0x00070C5C File Offset: 0x0006EE5C
			[CLSCompliant(false)]
			public unsafe static void GetTrackMatrix(AssemblyProgramTargetArb target, int address, AssemblyProgramParameterArb pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, address, pname, @params, GL.EntryPoints[965]);
			}

			// Token: 0x0600294B RID: 10571 RVA: 0x00070C74 File Offset: 0x0006EE74
			[CLSCompliant(false)]
			public unsafe static void GetTrackMatrix(AssemblyProgramTargetArb target, uint address, AssemblyProgramParameterArb pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, address, pname, ptr, GL.EntryPoints[965]);
				}
			}

			// Token: 0x0600294C RID: 10572 RVA: 0x00070C98 File Offset: 0x0006EE98
			[CLSCompliant(false)]
			public unsafe static void GetTrackMatrix(AssemblyProgramTargetArb target, uint address, AssemblyProgramParameterArb pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, address, pname, @params, GL.EntryPoints[965]);
			}

			// Token: 0x0600294D RID: 10573 RVA: 0x00070CB0 File Offset: 0x0006EEB0
			[CLSCompliant(false)]
			public unsafe static void GetTransformFeedbackVarying(int program, int index, out int location)
			{
				fixed (int* ptr = &location)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32*), program, index, ptr, GL.EntryPoints[968]);
				}
			}

			// Token: 0x0600294E RID: 10574 RVA: 0x00070CD4 File Offset: 0x0006EED4
			[CLSCompliant(false)]
			public unsafe static void GetTransformFeedbackVarying(int program, int index, [Out] int* location)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32*), program, index, location, GL.EntryPoints[968]);
			}

			// Token: 0x0600294F RID: 10575 RVA: 0x00070CEC File Offset: 0x0006EEEC
			[CLSCompliant(false)]
			public unsafe static void GetTransformFeedbackVarying(uint program, uint index, out int location)
			{
				fixed (int* ptr = &location)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32*), program, index, ptr, GL.EntryPoints[968]);
				}
			}

			// Token: 0x06002950 RID: 10576 RVA: 0x00070D10 File Offset: 0x0006EF10
			[CLSCompliant(false)]
			public unsafe static void GetTransformFeedbackVarying(uint program, uint index, [Out] int* location)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32*), program, index, location, GL.EntryPoints[968]);
			}

			// Token: 0x06002951 RID: 10577 RVA: 0x00070D28 File Offset: 0x0006EF28
			[CLSCompliant(false)]
			public unsafe static void GetUniform(int program, int location, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), program, location, ptr, GL.EntryPoints[974]);
				}
			}

			// Token: 0x06002952 RID: 10578 RVA: 0x00070D60 File Offset: 0x0006EF60
			[CLSCompliant(false)]
			public unsafe static void GetUniform(int program, int location, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), program, location, ptr, GL.EntryPoints[974]);
				}
			}

			// Token: 0x06002953 RID: 10579 RVA: 0x00070D84 File Offset: 0x0006EF84
			[CLSCompliant(false)]
			public unsafe static void GetUniform(int program, int location, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), program, location, @params, GL.EntryPoints[974]);
			}

			// Token: 0x06002954 RID: 10580 RVA: 0x00070D9C File Offset: 0x0006EF9C
			[CLSCompliant(false)]
			public unsafe static void GetUniform(uint program, int location, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), program, location, ptr, GL.EntryPoints[974]);
				}
			}

			// Token: 0x06002955 RID: 10581 RVA: 0x00070DD4 File Offset: 0x0006EFD4
			[CLSCompliant(false)]
			public unsafe static void GetUniform(uint program, int location, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), program, location, ptr, GL.EntryPoints[974]);
				}
			}

			// Token: 0x06002956 RID: 10582 RVA: 0x00070DF8 File Offset: 0x0006EFF8
			[CLSCompliant(false)]
			public unsafe static void GetUniform(uint program, int location, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), program, location, @params, GL.EntryPoints[974]);
			}

			// Token: 0x06002957 RID: 10583 RVA: 0x00070E10 File Offset: 0x0006F010
			[CLSCompliant(false)]
			public unsafe static void GetUniform(uint program, int location, [Out] ulong[] @params)
			{
				fixed (ulong* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), program, location, ptr, GL.EntryPoints[982]);
				}
			}

			// Token: 0x06002958 RID: 10584 RVA: 0x00070E48 File Offset: 0x0006F048
			[CLSCompliant(false)]
			public unsafe static void GetUniform(uint program, int location, out ulong @params)
			{
				fixed (ulong* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), program, location, ptr, GL.EntryPoints[982]);
				}
			}

			// Token: 0x06002959 RID: 10585 RVA: 0x00070E6C File Offset: 0x0006F06C
			[CLSCompliant(false)]
			public unsafe static void GetUniform(uint program, int location, [Out] ulong* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), program, location, @params, GL.EntryPoints[982]);
			}

			// Token: 0x0600295A RID: 10586 RVA: 0x00070E84 File Offset: 0x0006F084
			[CLSCompliant(false)]
			public static int GetVaryingLocation(int program, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[991]);
				BindingsBase.FreeStringPtr(intPtr);
				return result;
			}

			// Token: 0x0600295B RID: 10587 RVA: 0x00070EB0 File Offset: 0x0006F0B0
			[CLSCompliant(false)]
			public static int GetVaryingLocation(uint program, string name)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
				int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[991]);
				BindingsBase.FreeStringPtr(intPtr);
				return result;
			}

			// Token: 0x0600295C RID: 10588 RVA: 0x00070EDC File Offset: 0x0006F0DC
			[Obsolete("Use NvVertexProgram overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, NvVertexAttribInteger64bit pname, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[1000]);
				}
			}

			// Token: 0x0600295D RID: 10589 RVA: 0x00070F00 File Offset: 0x0006F100
			[CLSCompliant(false)]
			[Obsolete("Use NvVertexProgram overload instead")]
			public unsafe static void GetVertexAttrib(int index, NvVertexAttribInteger64bit pname, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, @params, GL.EntryPoints[1000]);
			}

			// Token: 0x0600295E RID: 10590 RVA: 0x00070F18 File Offset: 0x0006F118
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, NvVertexProgram pname, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[1000]);
				}
			}

			// Token: 0x0600295F RID: 10591 RVA: 0x00070F3C File Offset: 0x0006F13C
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, NvVertexProgram pname, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, @params, GL.EntryPoints[1000]);
			}

			// Token: 0x06002960 RID: 10592 RVA: 0x00070F54 File Offset: 0x0006F154
			[CLSCompliant(false)]
			[Obsolete("Use NvVertexProgram overload instead")]
			public unsafe static void GetVertexAttrib(uint index, NvVertexAttribInteger64bit pname, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[1000]);
				}
			}

			// Token: 0x06002961 RID: 10593 RVA: 0x00070F78 File Offset: 0x0006F178
			[Obsolete("Use NvVertexProgram overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(uint index, NvVertexAttribInteger64bit pname, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, @params, GL.EntryPoints[1000]);
			}

			// Token: 0x06002962 RID: 10594 RVA: 0x00070F90 File Offset: 0x0006F190
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(uint index, NvVertexProgram pname, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, ptr, GL.EntryPoints[1000]);
				}
			}

			// Token: 0x06002963 RID: 10595 RVA: 0x00070FB4 File Offset: 0x0006F1B4
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(uint index, NvVertexProgram pname, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, pname, @params, GL.EntryPoints[1000]);
			}

			// Token: 0x06002964 RID: 10596 RVA: 0x00070FCC File Offset: 0x0006F1CC
			[CLSCompliant(false)]
			[Obsolete("Use NvVertexProgram overload instead")]
			public unsafe static void GetVertexAttrib(int index, NvVertexAttribInteger64bit pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[1003]);
				}
			}

			// Token: 0x06002965 RID: 10597 RVA: 0x00070FF0 File Offset: 0x0006F1F0
			[CLSCompliant(false)]
			[Obsolete("Use NvVertexProgram overload instead")]
			public unsafe static void GetVertexAttrib(int index, NvVertexAttribInteger64bit pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, @params, GL.EntryPoints[1003]);
			}

			// Token: 0x06002966 RID: 10598 RVA: 0x00071008 File Offset: 0x0006F208
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, NvVertexProgram pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[1003]);
				}
			}

			// Token: 0x06002967 RID: 10599 RVA: 0x0007102C File Offset: 0x0006F22C
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, NvVertexProgram pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, @params, GL.EntryPoints[1003]);
			}

			// Token: 0x06002968 RID: 10600 RVA: 0x00071044 File Offset: 0x0006F244
			[CLSCompliant(false)]
			[Obsolete("Use NvVertexProgram overload instead")]
			public unsafe static void GetVertexAttrib(uint index, NvVertexAttribInteger64bit pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[1003]);
				}
			}

			// Token: 0x06002969 RID: 10601 RVA: 0x00071068 File Offset: 0x0006F268
			[CLSCompliant(false)]
			[Obsolete("Use NvVertexProgram overload instead")]
			public unsafe static void GetVertexAttrib(uint index, NvVertexAttribInteger64bit pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, @params, GL.EntryPoints[1003]);
			}

			// Token: 0x0600296A RID: 10602 RVA: 0x00071080 File Offset: 0x0006F280
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(uint index, NvVertexProgram pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[1003]);
				}
			}

			// Token: 0x0600296B RID: 10603 RVA: 0x000710A4 File Offset: 0x0006F2A4
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(uint index, NvVertexProgram pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, @params, GL.EntryPoints[1003]);
			}

			// Token: 0x0600296C RID: 10604 RVA: 0x000710BC File Offset: 0x0006F2BC
			[CLSCompliant(false)]
			[Obsolete("Use NvVertexProgram overload instead")]
			public unsafe static void GetVertexAttrib(int index, NvVertexAttribInteger64bit pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[1010]);
				}
			}

			// Token: 0x0600296D RID: 10605 RVA: 0x000710E0 File Offset: 0x0006F2E0
			[Obsolete("Use NvVertexProgram overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, NvVertexAttribInteger64bit pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[1010]);
			}

			// Token: 0x0600296E RID: 10606 RVA: 0x000710F8 File Offset: 0x0006F2F8
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, NvVertexProgram pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[1010]);
				}
			}

			// Token: 0x0600296F RID: 10607 RVA: 0x0007111C File Offset: 0x0006F31C
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(int index, NvVertexProgram pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[1010]);
			}

			// Token: 0x06002970 RID: 10608 RVA: 0x00071134 File Offset: 0x0006F334
			[CLSCompliant(false)]
			[Obsolete("Use NvVertexProgram overload instead")]
			public unsafe static void GetVertexAttrib(uint index, NvVertexAttribInteger64bit pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[1010]);
				}
			}

			// Token: 0x06002971 RID: 10609 RVA: 0x00071158 File Offset: 0x0006F358
			[CLSCompliant(false)]
			[Obsolete("Use NvVertexProgram overload instead")]
			public unsafe static void GetVertexAttrib(uint index, NvVertexAttribInteger64bit pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[1010]);
			}

			// Token: 0x06002972 RID: 10610 RVA: 0x00071170 File Offset: 0x0006F370
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(uint index, NvVertexProgram pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[1010]);
				}
			}

			// Token: 0x06002973 RID: 10611 RVA: 0x00071194 File Offset: 0x0006F394
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttrib(uint index, NvVertexProgram pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[1010]);
			}

			// Token: 0x06002974 RID: 10612 RVA: 0x000711AC File Offset: 0x0006F3AC
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(int index, NvVertexAttribInteger64bit pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), index, pname, ptr, GL.EntryPoints[1013]);
				}
			}

			// Token: 0x06002975 RID: 10613 RVA: 0x000711E4 File Offset: 0x0006F3E4
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(int index, NvVertexAttribInteger64bit pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), index, pname, ptr, GL.EntryPoints[1013]);
				}
			}

			// Token: 0x06002976 RID: 10614 RVA: 0x00071208 File Offset: 0x0006F408
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(int index, NvVertexAttribInteger64bit pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), index, pname, @params, GL.EntryPoints[1013]);
			}

			// Token: 0x06002977 RID: 10615 RVA: 0x00071220 File Offset: 0x0006F420
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(uint index, NvVertexAttribInteger64bit pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), index, pname, ptr, GL.EntryPoints[1013]);
				}
			}

			// Token: 0x06002978 RID: 10616 RVA: 0x00071258 File Offset: 0x0006F458
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(uint index, NvVertexAttribInteger64bit pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), index, pname, ptr, GL.EntryPoints[1013]);
				}
			}

			// Token: 0x06002979 RID: 10617 RVA: 0x0007127C File Offset: 0x0006F47C
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(uint index, NvVertexAttribInteger64bit pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), index, pname, @params, GL.EntryPoints[1013]);
			}

			// Token: 0x0600297A RID: 10618 RVA: 0x00071294 File Offset: 0x0006F494
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(uint index, NvVertexAttribInteger64bit pname, [Out] ulong[] @params)
			{
				fixed (ulong* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), index, pname, ptr, GL.EntryPoints[1015]);
				}
			}

			// Token: 0x0600297B RID: 10619 RVA: 0x000712CC File Offset: 0x0006F4CC
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(uint index, NvVertexAttribInteger64bit pname, out ulong @params)
			{
				fixed (ulong* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), index, pname, ptr, GL.EntryPoints[1015]);
				}
			}

			// Token: 0x0600297C RID: 10620 RVA: 0x000712F0 File Offset: 0x0006F4F0
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribL(uint index, NvVertexAttribInteger64bit pname, [Out] ulong* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), index, pname, @params, GL.EntryPoints[1015]);
			}

			// Token: 0x0600297D RID: 10621 RVA: 0x00071308 File Offset: 0x0006F508
			[CLSCompliant(false)]
			public static void GetVertexAttribPointer(int index, NvVertexProgram pname, [Out] IntPtr pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, pointer, GL.EntryPoints[1018]);
			}

			// Token: 0x0600297E RID: 10622 RVA: 0x00071320 File Offset: 0x0006F520
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribPointer<T2>(int index, NvVertexProgram pname, [In] [Out] T2[] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1018]);
				}
			}

			// Token: 0x0600297F RID: 10623 RVA: 0x00071358 File Offset: 0x0006F558
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribPointer<T2>(int index, NvVertexProgram pname, [In] [Out] T2[,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1018]);
				}
			}

			// Token: 0x06002980 RID: 10624 RVA: 0x00071394 File Offset: 0x0006F594
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribPointer<T2>(int index, NvVertexProgram pname, [In] [Out] T2[,,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1018]);
				}
			}

			// Token: 0x06002981 RID: 10625 RVA: 0x000713D0 File Offset: 0x0006F5D0
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribPointer<T2>(int index, NvVertexProgram pname, [In] [Out] ref T2 pointer) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1018]);
				}
			}

			// Token: 0x06002982 RID: 10626 RVA: 0x000713F4 File Offset: 0x0006F5F4
			[CLSCompliant(false)]
			public static void GetVertexAttribPointer(uint index, NvVertexProgram pname, [Out] IntPtr pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, pointer, GL.EntryPoints[1018]);
			}

			// Token: 0x06002983 RID: 10627 RVA: 0x0007140C File Offset: 0x0006F60C
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribPointer<T2>(uint index, NvVertexProgram pname, [In] [Out] T2[] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1018]);
				}
			}

			// Token: 0x06002984 RID: 10628 RVA: 0x00071444 File Offset: 0x0006F644
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribPointer<T2>(uint index, NvVertexProgram pname, [In] [Out] T2[,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1018]);
				}
			}

			// Token: 0x06002985 RID: 10629 RVA: 0x00071480 File Offset: 0x0006F680
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribPointer<T2>(uint index, NvVertexProgram pname, [In] [Out] T2[,,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1018]);
				}
			}

			// Token: 0x06002986 RID: 10630 RVA: 0x000714BC File Offset: 0x0006F6BC
			[CLSCompliant(false)]
			public unsafe static void GetVertexAttribPointer<T2>(uint index, NvVertexProgram pname, [In] [Out] ref T2 pointer) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[1018]);
				}
			}

			// Token: 0x06002987 RID: 10631 RVA: 0x000714E0 File Offset: 0x0006F6E0
			[CLSCompliant(false)]
			public unsafe static void GetVideoCapture(int video_capture_slot, NvVideoCapture pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), video_capture_slot, pname, ptr, GL.EntryPoints[1019]);
				}
			}

			// Token: 0x06002988 RID: 10632 RVA: 0x00071518 File Offset: 0x0006F718
			[CLSCompliant(false)]
			public unsafe static void GetVideoCapture(int video_capture_slot, NvVideoCapture pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), video_capture_slot, pname, ptr, GL.EntryPoints[1019]);
				}
			}

			// Token: 0x06002989 RID: 10633 RVA: 0x0007153C File Offset: 0x0006F73C
			[CLSCompliant(false)]
			public unsafe static void GetVideoCapture(int video_capture_slot, NvVideoCapture pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), video_capture_slot, pname, @params, GL.EntryPoints[1019]);
			}

			// Token: 0x0600298A RID: 10634 RVA: 0x00071554 File Offset: 0x0006F754
			[CLSCompliant(false)]
			public unsafe static void GetVideoCapture(uint video_capture_slot, NvVideoCapture pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), video_capture_slot, pname, ptr, GL.EntryPoints[1019]);
				}
			}

			// Token: 0x0600298B RID: 10635 RVA: 0x0007158C File Offset: 0x0006F78C
			[CLSCompliant(false)]
			public unsafe static void GetVideoCapture(uint video_capture_slot, NvVideoCapture pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), video_capture_slot, pname, ptr, GL.EntryPoints[1019]);
				}
			}

			// Token: 0x0600298C RID: 10636 RVA: 0x000715B0 File Offset: 0x0006F7B0
			[CLSCompliant(false)]
			public unsafe static void GetVideoCapture(uint video_capture_slot, NvVideoCapture pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), video_capture_slot, pname, @params, GL.EntryPoints[1019]);
			}

			// Token: 0x0600298D RID: 10637 RVA: 0x000715C8 File Offset: 0x0006F7C8
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Double*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[1020]);
				}
			}

			// Token: 0x0600298E RID: 10638 RVA: 0x00071600 File Offset: 0x0006F800
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Double*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[1020]);
				}
			}

			// Token: 0x0600298F RID: 10639 RVA: 0x00071624 File Offset: 0x0006F824
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Double*), video_capture_slot, stream, pname, @params, GL.EntryPoints[1020]);
			}

			// Token: 0x06002990 RID: 10640 RVA: 0x0007163C File Offset: 0x0006F83C
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Double*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[1020]);
				}
			}

			// Token: 0x06002991 RID: 10641 RVA: 0x00071674 File Offset: 0x0006F874
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, out double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Double*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[1020]);
				}
			}

			// Token: 0x06002992 RID: 10642 RVA: 0x00071698 File Offset: 0x0006F898
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] double* @params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Double*), video_capture_slot, stream, pname, @params, GL.EntryPoints[1020]);
			}

			// Token: 0x06002993 RID: 10643 RVA: 0x000716B0 File Offset: 0x0006F8B0
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[1021]);
				}
			}

			// Token: 0x06002994 RID: 10644 RVA: 0x000716E8 File Offset: 0x0006F8E8
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[1021]);
				}
			}

			// Token: 0x06002995 RID: 10645 RVA: 0x0007170C File Offset: 0x0006F90C
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), video_capture_slot, stream, pname, @params, GL.EntryPoints[1021]);
			}

			// Token: 0x06002996 RID: 10646 RVA: 0x00071724 File Offset: 0x0006F924
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[1021]);
				}
			}

			// Token: 0x06002997 RID: 10647 RVA: 0x0007175C File Offset: 0x0006F95C
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[1021]);
				}
			}

			// Token: 0x06002998 RID: 10648 RVA: 0x00071780 File Offset: 0x0006F980
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), video_capture_slot, stream, pname, @params, GL.EntryPoints[1021]);
			}

			// Token: 0x06002999 RID: 10649 RVA: 0x00071798 File Offset: 0x0006F998
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[1022]);
				}
			}

			// Token: 0x0600299A RID: 10650 RVA: 0x000717D0 File Offset: 0x0006F9D0
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[1022]);
				}
			}

			// Token: 0x0600299B RID: 10651 RVA: 0x000717F4 File Offset: 0x0006F9F4
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), video_capture_slot, stream, pname, @params, GL.EntryPoints[1022]);
			}

			// Token: 0x0600299C RID: 10652 RVA: 0x0007180C File Offset: 0x0006FA0C
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[1022]);
				}
			}

			// Token: 0x0600299D RID: 10653 RVA: 0x00071844 File Offset: 0x0006FA44
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[1022]);
				}
			}

			// Token: 0x0600299E RID: 10654 RVA: 0x00071868 File Offset: 0x0006FA68
			[CLSCompliant(false)]
			public unsafe static void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), video_capture_slot, stream, pname, @params, GL.EntryPoints[1022]);
			}

			// Token: 0x0600299F RID: 10655 RVA: 0x00071880 File Offset: 0x0006FA80
			[CLSCompliant(false)]
			public unsafe static void GetVideo(int video_slot, NvPresentVideo pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), video_slot, pname, ptr, GL.EntryPoints[1023]);
				}
			}

			// Token: 0x060029A0 RID: 10656 RVA: 0x000718B8 File Offset: 0x0006FAB8
			[CLSCompliant(false)]
			public unsafe static void GetVideo(int video_slot, NvPresentVideo pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), video_slot, pname, ptr, GL.EntryPoints[1023]);
				}
			}

			// Token: 0x060029A1 RID: 10657 RVA: 0x000718DC File Offset: 0x0006FADC
			[CLSCompliant(false)]
			public unsafe static void GetVideo(int video_slot, NvPresentVideo pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), video_slot, pname, @params, GL.EntryPoints[1023]);
			}

			// Token: 0x060029A2 RID: 10658 RVA: 0x000718F4 File Offset: 0x0006FAF4
			[CLSCompliant(false)]
			public unsafe static void GetVideo(uint video_slot, NvPresentVideo pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), video_slot, pname, ptr, GL.EntryPoints[1023]);
				}
			}

			// Token: 0x060029A3 RID: 10659 RVA: 0x0007192C File Offset: 0x0006FB2C
			[CLSCompliant(false)]
			public unsafe static void GetVideo(uint video_slot, NvPresentVideo pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), video_slot, pname, ptr, GL.EntryPoints[1023]);
				}
			}

			// Token: 0x060029A4 RID: 10660 RVA: 0x00071950 File Offset: 0x0006FB50
			[CLSCompliant(false)]
			public unsafe static void GetVideo(uint video_slot, NvPresentVideo pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), video_slot, pname, @params, GL.EntryPoints[1023]);
			}

			// Token: 0x060029A5 RID: 10661 RVA: 0x00071968 File Offset: 0x0006FB68
			[CLSCompliant(false)]
			public unsafe static void GetVideo(int video_slot, NvPresentVideo pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), video_slot, pname, ptr, GL.EntryPoints[1024]);
				}
			}

			// Token: 0x060029A6 RID: 10662 RVA: 0x000719A0 File Offset: 0x0006FBA0
			[CLSCompliant(false)]
			public unsafe static void GetVideo(int video_slot, NvPresentVideo pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), video_slot, pname, ptr, GL.EntryPoints[1024]);
				}
			}

			// Token: 0x060029A7 RID: 10663 RVA: 0x000719C4 File Offset: 0x0006FBC4
			[CLSCompliant(false)]
			public unsafe static void GetVideo(int video_slot, NvPresentVideo pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), video_slot, pname, @params, GL.EntryPoints[1024]);
			}

			// Token: 0x060029A8 RID: 10664 RVA: 0x000719DC File Offset: 0x0006FBDC
			[CLSCompliant(false)]
			public unsafe static void GetVideo(uint video_slot, NvPresentVideo pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), video_slot, pname, ptr, GL.EntryPoints[1024]);
				}
			}

			// Token: 0x060029A9 RID: 10665 RVA: 0x00071A14 File Offset: 0x0006FC14
			[CLSCompliant(false)]
			public unsafe static void GetVideo(uint video_slot, NvPresentVideo pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), video_slot, pname, ptr, GL.EntryPoints[1024]);
				}
			}

			// Token: 0x060029AA RID: 10666 RVA: 0x00071A38 File Offset: 0x0006FC38
			[CLSCompliant(false)]
			public unsafe static void GetVideo(uint video_slot, NvPresentVideo pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), video_slot, pname, @params, GL.EntryPoints[1024]);
			}

			// Token: 0x060029AB RID: 10667 RVA: 0x00071A50 File Offset: 0x0006FC50
			[CLSCompliant(false)]
			public unsafe static void GetVideo(uint video_slot, NvPresentVideo pname, [Out] ulong[] @params)
			{
				fixed (ulong* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), video_slot, pname, ptr, GL.EntryPoints[1025]);
				}
			}

			// Token: 0x060029AC RID: 10668 RVA: 0x00071A88 File Offset: 0x0006FC88
			[CLSCompliant(false)]
			public unsafe static void GetVideo(uint video_slot, NvPresentVideo pname, out ulong @params)
			{
				fixed (ulong* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), video_slot, pname, ptr, GL.EntryPoints[1025]);
				}
			}

			// Token: 0x060029AD RID: 10669 RVA: 0x00071AAC File Offset: 0x0006FCAC
			[CLSCompliant(false)]
			public unsafe static void GetVideo(uint video_slot, NvPresentVideo pname, [Out] ulong* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), video_slot, pname, @params, GL.EntryPoints[1025]);
			}

			// Token: 0x060029AE RID: 10670 RVA: 0x00071AC4 File Offset: 0x0006FCC4
			[CLSCompliant(false)]
			public unsafe static void GetVideo(uint video_slot, NvPresentVideo pname, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), video_slot, pname, ptr, GL.EntryPoints[1026]);
				}
			}

			// Token: 0x060029AF RID: 10671 RVA: 0x00071AFC File Offset: 0x0006FCFC
			[CLSCompliant(false)]
			public unsafe static void GetVideo(uint video_slot, NvPresentVideo pname, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), video_slot, pname, ptr, GL.EntryPoints[1026]);
				}
			}

			// Token: 0x060029B0 RID: 10672 RVA: 0x00071B20 File Offset: 0x0006FD20
			[CLSCompliant(false)]
			public unsafe static void GetVideo(uint video_slot, NvPresentVideo pname, [Out] uint* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), video_slot, pname, @params, GL.EntryPoints[1026]);
			}

			// Token: 0x060029B1 RID: 10673 RVA: 0x00071B38 File Offset: 0x0006FD38
			public static void IndexFormat(NvVertexBufferUnifiedMemory type, int stride)
			{
				calli(System.Void(System.Int32,System.Int32), type, stride, GL.EntryPoints[1048]);
			}

			// Token: 0x060029B2 RID: 10674 RVA: 0x00071B4C File Offset: 0x0006FD4C
			[CLSCompliant(false)]
			public static void InterpolatePath(int resultPath, int pathA, int pathB, float weight)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.Single), resultPath, pathA, pathB, weight, GL.EntryPoints[1069]);
			}

			// Token: 0x060029B3 RID: 10675 RVA: 0x00071B64 File Offset: 0x0006FD64
			[CLSCompliant(false)]
			public static void InterpolatePath(uint resultPath, uint pathA, uint pathB, float weight)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.Single), resultPath, pathA, pathB, weight, GL.EntryPoints[1069]);
			}

			// Token: 0x060029B4 RID: 10676 RVA: 0x00071B7C File Offset: 0x0006FD7C
			public static bool IsBufferResident(NvShaderBufferLoad target)
			{
				return calli(System.Byte(System.Int32), target, GL.EntryPoints[1079]);
			}

			// Token: 0x060029B5 RID: 10677 RVA: 0x00071B90 File Offset: 0x0006FD90
			[CLSCompliant(false)]
			public static bool IsFence(int fence)
			{
				return calli(System.Byte(System.UInt32), fence, GL.EntryPoints[1084]);
			}

			// Token: 0x060029B6 RID: 10678 RVA: 0x00071BA4 File Offset: 0x0006FDA4
			[CLSCompliant(false)]
			public static bool IsFence(uint fence)
			{
				return calli(System.Byte(System.UInt32), fence, GL.EntryPoints[1084]);
			}

			// Token: 0x060029B7 RID: 10679 RVA: 0x00071BB8 File Offset: 0x0006FDB8
			[CLSCompliant(false)]
			public static bool IsImageHandleResident(long handle)
			{
				return calli(System.Byte(System.UInt64), handle, GL.EntryPoints[1088]);
			}

			// Token: 0x060029B8 RID: 10680 RVA: 0x00071BCC File Offset: 0x0006FDCC
			[CLSCompliant(false)]
			public static bool IsImageHandleResident(ulong handle)
			{
				return calli(System.Byte(System.UInt64), handle, GL.EntryPoints[1088]);
			}

			// Token: 0x060029B9 RID: 10681 RVA: 0x00071BE0 File Offset: 0x0006FDE0
			[CLSCompliant(false)]
			public static bool IsNamedBufferResident(int buffer)
			{
				return calli(System.Byte(System.UInt32), buffer, GL.EntryPoints[1091]);
			}

			// Token: 0x060029BA RID: 10682 RVA: 0x00071BF4 File Offset: 0x0006FDF4
			[CLSCompliant(false)]
			public static bool IsNamedBufferResident(uint buffer)
			{
				return calli(System.Byte(System.UInt32), buffer, GL.EntryPoints[1091]);
			}

			// Token: 0x060029BB RID: 10683 RVA: 0x00071C08 File Offset: 0x0006FE08
			[CLSCompliant(false)]
			public static bool IsOcclusionQuery(int id)
			{
				return calli(System.Byte(System.UInt32), id, GL.EntryPoints[1094]);
			}

			// Token: 0x060029BC RID: 10684 RVA: 0x00071C1C File Offset: 0x0006FE1C
			[CLSCompliant(false)]
			public static bool IsOcclusionQuery(uint id)
			{
				return calli(System.Byte(System.UInt32), id, GL.EntryPoints[1094]);
			}

			// Token: 0x060029BD RID: 10685 RVA: 0x00071C30 File Offset: 0x0006FE30
			[CLSCompliant(false)]
			public static bool IsPath(int path)
			{
				return calli(System.Byte(System.UInt32), path, GL.EntryPoints[1095]);
			}

			// Token: 0x060029BE RID: 10686 RVA: 0x00071C44 File Offset: 0x0006FE44
			[CLSCompliant(false)]
			public static bool IsPath(uint path)
			{
				return calli(System.Byte(System.UInt32), path, GL.EntryPoints[1095]);
			}

			// Token: 0x060029BF RID: 10687 RVA: 0x00071C58 File Offset: 0x0006FE58
			[CLSCompliant(false)]
			public static bool IsPointInFillPath(int path, int mask, float x, float y)
			{
				return calli(System.Byte(System.UInt32,System.UInt32,System.Single,System.Single), path, mask, x, y, GL.EntryPoints[1096]);
			}

			// Token: 0x060029C0 RID: 10688 RVA: 0x00071C70 File Offset: 0x0006FE70
			[CLSCompliant(false)]
			public static bool IsPointInFillPath(uint path, uint mask, float x, float y)
			{
				return calli(System.Byte(System.UInt32,System.UInt32,System.Single,System.Single), path, mask, x, y, GL.EntryPoints[1096]);
			}

			// Token: 0x060029C1 RID: 10689 RVA: 0x00071C88 File Offset: 0x0006FE88
			[CLSCompliant(false)]
			public static bool IsPointInStrokePath(int path, float x, float y)
			{
				return calli(System.Byte(System.UInt32,System.Single,System.Single), path, x, y, GL.EntryPoints[1097]);
			}

			// Token: 0x060029C2 RID: 10690 RVA: 0x00071CA0 File Offset: 0x0006FEA0
			[CLSCompliant(false)]
			public static bool IsPointInStrokePath(uint path, float x, float y)
			{
				return calli(System.Byte(System.UInt32,System.Single,System.Single), path, x, y, GL.EntryPoints[1097]);
			}

			// Token: 0x060029C3 RID: 10691 RVA: 0x00071CB8 File Offset: 0x0006FEB8
			[CLSCompliant(false)]
			public static bool IsProgram(int id)
			{
				return calli(System.Byte(System.UInt32), id, GL.EntryPoints[1100]);
			}

			// Token: 0x060029C4 RID: 10692 RVA: 0x00071CCC File Offset: 0x0006FECC
			[CLSCompliant(false)]
			public static bool IsProgram(uint id)
			{
				return calli(System.Byte(System.UInt32), id, GL.EntryPoints[1100]);
			}

			// Token: 0x060029C5 RID: 10693 RVA: 0x00071CE0 File Offset: 0x0006FEE0
			[CLSCompliant(false)]
			public static bool IsTextureHandleResident(long handle)
			{
				return calli(System.Byte(System.UInt64), handle, GL.EntryPoints[1113]);
			}

			// Token: 0x060029C6 RID: 10694 RVA: 0x00071CF4 File Offset: 0x0006FEF4
			[CLSCompliant(false)]
			public static bool IsTextureHandleResident(ulong handle)
			{
				return calli(System.Byte(System.UInt64), handle, GL.EntryPoints[1113]);
			}

			// Token: 0x060029C7 RID: 10695 RVA: 0x00071D08 File Offset: 0x0006FF08
			[CLSCompliant(false)]
			public static bool IsTransformFeedback(int id)
			{
				return calli(System.Byte(System.UInt32), id, GL.EntryPoints[1115]);
			}

			// Token: 0x060029C8 RID: 10696 RVA: 0x00071D1C File Offset: 0x0006FF1C
			[CLSCompliant(false)]
			public static bool IsTransformFeedback(uint id)
			{
				return calli(System.Byte(System.UInt32), id, GL.EntryPoints[1115]);
			}

			// Token: 0x060029C9 RID: 10697 RVA: 0x00071D30 File Offset: 0x0006FF30
			[CLSCompliant(false)]
			public unsafe static void LoadProgram(AssemblyProgramTargetArb target, int id, int len, byte[] program)
			{
				fixed (byte* ptr = ref (program != null && program.Length != 0) ? ref program[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Byte*), target, id, len, ptr, GL.EntryPoints[1150]);
				}
			}

			// Token: 0x060029CA RID: 10698 RVA: 0x00071D68 File Offset: 0x0006FF68
			[CLSCompliant(false)]
			public unsafe static void LoadProgram(AssemblyProgramTargetArb target, int id, int len, ref byte program)
			{
				fixed (byte* ptr = &program)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Byte*), target, id, len, ptr, GL.EntryPoints[1150]);
				}
			}

			// Token: 0x060029CB RID: 10699 RVA: 0x00071D8C File Offset: 0x0006FF8C
			[CLSCompliant(false)]
			public unsafe static void LoadProgram(AssemblyProgramTargetArb target, int id, int len, byte* program)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Byte*), target, id, len, program, GL.EntryPoints[1150]);
			}

			// Token: 0x060029CC RID: 10700 RVA: 0x00071DA4 File Offset: 0x0006FFA4
			[CLSCompliant(false)]
			public unsafe static void LoadProgram(AssemblyProgramTargetArb target, uint id, int len, byte[] program)
			{
				fixed (byte* ptr = ref (program != null && program.Length != 0) ? ref program[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Byte*), target, id, len, ptr, GL.EntryPoints[1150]);
				}
			}

			// Token: 0x060029CD RID: 10701 RVA: 0x00071DDC File Offset: 0x0006FFDC
			[CLSCompliant(false)]
			public unsafe static void LoadProgram(AssemblyProgramTargetArb target, uint id, int len, ref byte program)
			{
				fixed (byte* ptr = &program)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Byte*), target, id, len, ptr, GL.EntryPoints[1150]);
				}
			}

			// Token: 0x060029CE RID: 10702 RVA: 0x00071E00 File Offset: 0x00070000
			[CLSCompliant(false)]
			public unsafe static void LoadProgram(AssemblyProgramTargetArb target, uint id, int len, byte* program)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Byte*), target, id, len, program, GL.EntryPoints[1150]);
			}

			// Token: 0x060029CF RID: 10703 RVA: 0x00071E18 File Offset: 0x00070018
			public static void MakeBufferNonResident(NvShaderBufferLoad target)
			{
				calli(System.Void(System.Int32), target, GL.EntryPoints[1158]);
			}

			// Token: 0x060029D0 RID: 10704 RVA: 0x00071E2C File Offset: 0x0007002C
			public static void MakeBufferResident(NvShaderBufferLoad target, NvShaderBufferLoad access)
			{
				calli(System.Void(System.Int32,System.Int32), target, access, GL.EntryPoints[1159]);
			}

			// Token: 0x060029D1 RID: 10705 RVA: 0x00071E40 File Offset: 0x00070040
			[CLSCompliant(false)]
			public static void MakeImageHandleNonResident(long handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[1161]);
			}

			// Token: 0x060029D2 RID: 10706 RVA: 0x00071E54 File Offset: 0x00070054
			[CLSCompliant(false)]
			public static void MakeImageHandleNonResident(ulong handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[1161]);
			}

			// Token: 0x060029D3 RID: 10707 RVA: 0x00071E68 File Offset: 0x00070068
			[CLSCompliant(false)]
			public static void MakeImageHandleResident(long handle, NvBindlessTexture access)
			{
				calli(System.Void(System.UInt64,System.Int32), handle, access, GL.EntryPoints[1163]);
			}

			// Token: 0x060029D4 RID: 10708 RVA: 0x00071E7C File Offset: 0x0007007C
			[CLSCompliant(false)]
			public static void MakeImageHandleResident(ulong handle, NvBindlessTexture access)
			{
				calli(System.Void(System.UInt64,System.Int32), handle, access, GL.EntryPoints[1163]);
			}

			// Token: 0x060029D5 RID: 10709 RVA: 0x00071E90 File Offset: 0x00070090
			[CLSCompliant(false)]
			public static void MakeNamedBufferNonResident(int buffer)
			{
				calli(System.Void(System.UInt32), buffer, GL.EntryPoints[1164]);
			}

			// Token: 0x060029D6 RID: 10710 RVA: 0x00071EA4 File Offset: 0x000700A4
			[CLSCompliant(false)]
			public static void MakeNamedBufferNonResident(uint buffer)
			{
				calli(System.Void(System.UInt32), buffer, GL.EntryPoints[1164]);
			}

			// Token: 0x060029D7 RID: 10711 RVA: 0x00071EB8 File Offset: 0x000700B8
			[CLSCompliant(false)]
			public static void MakeNamedBufferResident(int buffer, NvShaderBufferLoad access)
			{
				calli(System.Void(System.UInt32,System.Int32), buffer, access, GL.EntryPoints[1165]);
			}

			// Token: 0x060029D8 RID: 10712 RVA: 0x00071ECC File Offset: 0x000700CC
			[CLSCompliant(false)]
			public static void MakeNamedBufferResident(uint buffer, NvShaderBufferLoad access)
			{
				calli(System.Void(System.UInt32,System.Int32), buffer, access, GL.EntryPoints[1165]);
			}

			// Token: 0x060029D9 RID: 10713 RVA: 0x00071EE0 File Offset: 0x000700E0
			[CLSCompliant(false)]
			public static void MakeTextureHandleNonResident(long handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[1167]);
			}

			// Token: 0x060029DA RID: 10714 RVA: 0x00071EF4 File Offset: 0x000700F4
			[CLSCompliant(false)]
			public static void MakeTextureHandleNonResident(ulong handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[1167]);
			}

			// Token: 0x060029DB RID: 10715 RVA: 0x00071F08 File Offset: 0x00070108
			[CLSCompliant(false)]
			public static void MakeTextureHandleResident(long handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[1169]);
			}

			// Token: 0x060029DC RID: 10716 RVA: 0x00071F1C File Offset: 0x0007011C
			[CLSCompliant(false)]
			public static void MakeTextureHandleResident(ulong handle)
			{
				calli(System.Void(System.UInt64), handle, GL.EntryPoints[1169]);
			}

			// Token: 0x060029DD RID: 10717 RVA: 0x00071F30 File Offset: 0x00070130
			[CLSCompliant(false)]
			public static void MapControlPoints(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, uorder, vorder, packed, points, GL.EntryPoints[1179]);
			}

			// Token: 0x060029DE RID: 10718 RVA: 0x00071F5C File Offset: 0x0007015C
			[CLSCompliant(false)]
			public unsafe static void MapControlPoints<T8>(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [In] [Out] T8[] points) where T8 : struct
			{
				fixed (T8* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, uorder, vorder, packed, ptr, GL.EntryPoints[1179]);
				}
			}

			// Token: 0x060029DF RID: 10719 RVA: 0x00071FA0 File Offset: 0x000701A0
			[CLSCompliant(false)]
			public unsafe static void MapControlPoints<T8>(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [In] [Out] T8[,] points) where T8 : struct
			{
				fixed (T8* ptr = ref (points != null && points.Length != 0) ? ref points[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, uorder, vorder, packed, ptr, GL.EntryPoints[1179]);
				}
			}

			// Token: 0x060029E0 RID: 10720 RVA: 0x00071FE8 File Offset: 0x000701E8
			[CLSCompliant(false)]
			public unsafe static void MapControlPoints<T8>(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [In] [Out] T8[,,] points) where T8 : struct
			{
				fixed (T8* ptr = ref (points != null && points.Length != 0) ? ref points[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, uorder, vorder, packed, ptr, GL.EntryPoints[1179]);
				}
			}

			// Token: 0x060029E1 RID: 10721 RVA: 0x00072030 File Offset: 0x00070230
			[CLSCompliant(false)]
			public unsafe static void MapControlPoints<T8>(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [In] [Out] ref T8 points) where T8 : struct
			{
				fixed (T8* ptr = &points)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, uorder, vorder, packed, ptr, GL.EntryPoints[1179]);
				}
			}

			// Token: 0x060029E2 RID: 10722 RVA: 0x00072060 File Offset: 0x00070260
			[CLSCompliant(false)]
			public static void MapControlPoints(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, uorder, vorder, packed, points, GL.EntryPoints[1179]);
			}

			// Token: 0x060029E3 RID: 10723 RVA: 0x0007208C File Offset: 0x0007028C
			[CLSCompliant(false)]
			public unsafe static void MapControlPoints<T8>(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [In] [Out] T8[] points) where T8 : struct
			{
				fixed (T8* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, uorder, vorder, packed, ptr, GL.EntryPoints[1179]);
				}
			}

			// Token: 0x060029E4 RID: 10724 RVA: 0x000720D0 File Offset: 0x000702D0
			[CLSCompliant(false)]
			public unsafe static void MapControlPoints<T8>(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [In] [Out] T8[,] points) where T8 : struct
			{
				fixed (T8* ptr = ref (points != null && points.Length != 0) ? ref points[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, uorder, vorder, packed, ptr, GL.EntryPoints[1179]);
				}
			}

			// Token: 0x060029E5 RID: 10725 RVA: 0x00072118 File Offset: 0x00070318
			[CLSCompliant(false)]
			public unsafe static void MapControlPoints<T8>(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [In] [Out] T8[,,] points) where T8 : struct
			{
				fixed (T8* ptr = ref (points != null && points.Length != 0) ? ref points[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, uorder, vorder, packed, ptr, GL.EntryPoints[1179]);
				}
			}

			// Token: 0x060029E6 RID: 10726 RVA: 0x00072160 File Offset: 0x00070360
			[CLSCompliant(false)]
			public unsafe static void MapControlPoints<T8>(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [In] [Out] ref T8 points) where T8 : struct
			{
				fixed (T8* ptr = &points)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.IntPtr), target, index, type, ustride, vstride, uorder, vorder, packed, ptr, GL.EntryPoints[1179]);
				}
			}

			// Token: 0x060029E7 RID: 10727 RVA: 0x00072190 File Offset: 0x00070390
			[CLSCompliant(false)]
			public unsafe static void MapParameter(NvEvaluators target, NvEvaluators pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[1189]);
				}
			}

			// Token: 0x060029E8 RID: 10728 RVA: 0x000721C8 File Offset: 0x000703C8
			[CLSCompliant(false)]
			public unsafe static void MapParameter(NvEvaluators target, NvEvaluators pname, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[1189]);
				}
			}

			// Token: 0x060029E9 RID: 10729 RVA: 0x000721EC File Offset: 0x000703EC
			[CLSCompliant(false)]
			public unsafe static void MapParameter(NvEvaluators target, NvEvaluators pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[1189]);
			}

			// Token: 0x060029EA RID: 10730 RVA: 0x00072204 File Offset: 0x00070404
			[CLSCompliant(false)]
			public unsafe static void MapParameter(NvEvaluators target, NvEvaluators pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[1190]);
				}
			}

			// Token: 0x060029EB RID: 10731 RVA: 0x0007223C File Offset: 0x0007043C
			[CLSCompliant(false)]
			public unsafe static void MapParameter(NvEvaluators target, NvEvaluators pname, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[1190]);
				}
			}

			// Token: 0x060029EC RID: 10732 RVA: 0x00072260 File Offset: 0x00070460
			[CLSCompliant(false)]
			public unsafe static void MapParameter(NvEvaluators target, NvEvaluators pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[1190]);
			}

			// Token: 0x060029ED RID: 10733 RVA: 0x00072278 File Offset: 0x00070478
			public static void MultiDrawArraysIndirectBindles(NvBindlessMultiDrawIndirect mode, IntPtr indirect, int drawCount, int stride, int vertexBufferCount)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32), mode, indirect, drawCount, stride, vertexBufferCount, GL.EntryPoints[1236]);
			}

			// Token: 0x060029EE RID: 10734 RVA: 0x00072290 File Offset: 0x00070490
			[CLSCompliant(false)]
			public unsafe static void MultiDrawArraysIndirectBindles<T1>(NvBindlessMultiDrawIndirect mode, [In] [Out] T1[] indirect, int drawCount, int stride, int vertexBufferCount) where T1 : struct
			{
				fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32), mode, ptr, drawCount, stride, vertexBufferCount, GL.EntryPoints[1236]);
				}
			}

			// Token: 0x060029EF RID: 10735 RVA: 0x000722C8 File Offset: 0x000704C8
			[CLSCompliant(false)]
			public unsafe static void MultiDrawArraysIndirectBindles<T1>(NvBindlessMultiDrawIndirect mode, [In] [Out] T1[,] indirect, int drawCount, int stride, int vertexBufferCount) where T1 : struct
			{
				fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32), mode, ptr, drawCount, stride, vertexBufferCount, GL.EntryPoints[1236]);
				}
			}

			// Token: 0x060029F0 RID: 10736 RVA: 0x00072304 File Offset: 0x00070504
			[CLSCompliant(false)]
			public unsafe static void MultiDrawArraysIndirectBindles<T1>(NvBindlessMultiDrawIndirect mode, [In] [Out] T1[,,] indirect, int drawCount, int stride, int vertexBufferCount) where T1 : struct
			{
				fixed (T1* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32), mode, ptr, drawCount, stride, vertexBufferCount, GL.EntryPoints[1236]);
				}
			}

			// Token: 0x060029F1 RID: 10737 RVA: 0x00072344 File Offset: 0x00070544
			public unsafe static void MultiDrawArraysIndirectBindles<T1>(NvBindlessMultiDrawIndirect mode, [In] [Out] ref T1 indirect, int drawCount, int stride, int vertexBufferCount) where T1 : struct
			{
				fixed (T1* ptr = &indirect)
				{
					calli(System.Void(System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32), mode, ptr, drawCount, stride, vertexBufferCount, GL.EntryPoints[1236]);
				}
			}

			// Token: 0x060029F2 RID: 10738 RVA: 0x0007236C File Offset: 0x0007056C
			public static void MultiDrawElementsIndirectBindles(NvBindlessMultiDrawIndirect mode, NvBindlessMultiDrawIndirect type, IntPtr indirect, int drawCount, int stride, int vertexBufferCount)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32), mode, type, indirect, drawCount, stride, vertexBufferCount, GL.EntryPoints[1244]);
			}

			// Token: 0x060029F3 RID: 10739 RVA: 0x00072388 File Offset: 0x00070588
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElementsIndirectBindles<T2>(NvBindlessMultiDrawIndirect mode, NvBindlessMultiDrawIndirect type, [In] [Out] T2[] indirect, int drawCount, int stride, int vertexBufferCount) where T2 : struct
			{
				fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32), mode, type, ptr, drawCount, stride, vertexBufferCount, GL.EntryPoints[1244]);
				}
			}

			// Token: 0x060029F4 RID: 10740 RVA: 0x000723C4 File Offset: 0x000705C4
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElementsIndirectBindles<T2>(NvBindlessMultiDrawIndirect mode, NvBindlessMultiDrawIndirect type, [In] [Out] T2[,] indirect, int drawCount, int stride, int vertexBufferCount) where T2 : struct
			{
				fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32), mode, type, ptr, drawCount, stride, vertexBufferCount, GL.EntryPoints[1244]);
				}
			}

			// Token: 0x060029F5 RID: 10741 RVA: 0x00072404 File Offset: 0x00070604
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElementsIndirectBindles<T2>(NvBindlessMultiDrawIndirect mode, NvBindlessMultiDrawIndirect type, [In] [Out] T2[,,] indirect, int drawCount, int stride, int vertexBufferCount) where T2 : struct
			{
				fixed (T2* ptr = ref (indirect != null && indirect.Length != 0) ? ref indirect[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32), mode, type, ptr, drawCount, stride, vertexBufferCount, GL.EntryPoints[1244]);
				}
			}

			// Token: 0x060029F6 RID: 10742 RVA: 0x00072444 File Offset: 0x00070644
			public unsafe static void MultiDrawElementsIndirectBindles<T2>(NvBindlessMultiDrawIndirect mode, NvBindlessMultiDrawIndirect type, [In] [Out] ref T2 indirect, int drawCount, int stride, int vertexBufferCount) where T2 : struct
			{
				fixed (T2* ptr = &indirect)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32), mode, type, ptr, drawCount, stride, vertexBufferCount, GL.EntryPoints[1244]);
				}
			}

			// Token: 0x060029F7 RID: 10743 RVA: 0x0007246C File Offset: 0x0007066C
			public static void MultiTexCoord1h(TextureUnit target, Half s)
			{
				calli(System.Void(System.Int32,OpenTK.Half), target, s, GL.EntryPoints[1260]);
			}

			// Token: 0x060029F8 RID: 10744 RVA: 0x00072480 File Offset: 0x00070680
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord1h(TextureUnit target, Half* v)
			{
				calli(System.Void(System.Int32,OpenTK.Half*), target, v, GL.EntryPoints[1261]);
			}

			// Token: 0x060029F9 RID: 10745 RVA: 0x00072494 File Offset: 0x00070694
			public static void MultiTexCoord2h(TextureUnit target, Half s, Half t)
			{
				calli(System.Void(System.Int32,OpenTK.Half,OpenTK.Half), target, s, t, GL.EntryPoints[1282]);
			}

			// Token: 0x060029FA RID: 10746 RVA: 0x000724AC File Offset: 0x000706AC
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2h(TextureUnit target, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,OpenTK.Half*), target, ptr, GL.EntryPoints[1283]);
				}
			}

			// Token: 0x060029FB RID: 10747 RVA: 0x000724E0 File Offset: 0x000706E0
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2h(TextureUnit target, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.Int32,OpenTK.Half*), target, ptr, GL.EntryPoints[1283]);
				}
			}

			// Token: 0x060029FC RID: 10748 RVA: 0x00072504 File Offset: 0x00070704
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2h(TextureUnit target, Half* v)
			{
				calli(System.Void(System.Int32,OpenTK.Half*), target, v, GL.EntryPoints[1283]);
			}

			// Token: 0x060029FD RID: 10749 RVA: 0x00072518 File Offset: 0x00070718
			public static void MultiTexCoord3h(TextureUnit target, Half s, Half t, Half r)
			{
				calli(System.Void(System.Int32,OpenTK.Half,OpenTK.Half,OpenTK.Half), target, s, t, r, GL.EntryPoints[1304]);
			}

			// Token: 0x060029FE RID: 10750 RVA: 0x00072530 File Offset: 0x00070730
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3h(TextureUnit target, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,OpenTK.Half*), target, ptr, GL.EntryPoints[1305]);
				}
			}

			// Token: 0x060029FF RID: 10751 RVA: 0x00072564 File Offset: 0x00070764
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3h(TextureUnit target, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.Int32,OpenTK.Half*), target, ptr, GL.EntryPoints[1305]);
				}
			}

			// Token: 0x06002A00 RID: 10752 RVA: 0x00072588 File Offset: 0x00070788
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3h(TextureUnit target, Half* v)
			{
				calli(System.Void(System.Int32,OpenTK.Half*), target, v, GL.EntryPoints[1305]);
			}

			// Token: 0x06002A01 RID: 10753 RVA: 0x0007259C File Offset: 0x0007079C
			public static void MultiTexCoord4h(TextureUnit target, Half s, Half t, Half r, Half q)
			{
				calli(System.Void(System.Int32,OpenTK.Half,OpenTK.Half,OpenTK.Half,OpenTK.Half), target, s, t, r, q, GL.EntryPoints[1326]);
			}

			// Token: 0x06002A02 RID: 10754 RVA: 0x000725B4 File Offset: 0x000707B4
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4h(TextureUnit target, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,OpenTK.Half*), target, ptr, GL.EntryPoints[1327]);
				}
			}

			// Token: 0x06002A03 RID: 10755 RVA: 0x000725E8 File Offset: 0x000707E8
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4h(TextureUnit target, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.Int32,OpenTK.Half*), target, ptr, GL.EntryPoints[1327]);
				}
			}

			// Token: 0x06002A04 RID: 10756 RVA: 0x0007260C File Offset: 0x0007080C
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4h(TextureUnit target, Half* v)
			{
				calli(System.Void(System.Int32,OpenTK.Half*), target, v, GL.EntryPoints[1327]);
			}

			// Token: 0x06002A05 RID: 10757 RVA: 0x00072620 File Offset: 0x00070820
			public static void Normal3h(Half nx, Half ny, Half nz)
			{
				calli(System.Void(OpenTK.Half,OpenTK.Half,OpenTK.Half), nx, ny, nz, GL.EntryPoints[1416]);
			}

			// Token: 0x06002A06 RID: 10758 RVA: 0x00072638 File Offset: 0x00070838
			[CLSCompliant(false)]
			public unsafe static void Normal3h(Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[1417]);
				}
			}

			// Token: 0x06002A07 RID: 10759 RVA: 0x0007266C File Offset: 0x0007086C
			[CLSCompliant(false)]
			public unsafe static void Normal3h(ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[1417]);
				}
			}

			// Token: 0x06002A08 RID: 10760 RVA: 0x00072690 File Offset: 0x00070890
			[CLSCompliant(false)]
			public unsafe static void Normal3h(Half* v)
			{
				calli(System.Void(OpenTK.Half*), v, GL.EntryPoints[1417]);
			}

			// Token: 0x06002A09 RID: 10761 RVA: 0x000726A4 File Offset: 0x000708A4
			public static void NormalFormat(NvVertexBufferUnifiedMemory type, int stride)
			{
				calli(System.Void(System.Int32,System.Int32), type, stride, GL.EntryPoints[1424]);
			}

			// Token: 0x06002A0A RID: 10762 RVA: 0x000726B8 File Offset: 0x000708B8
			[CLSCompliant(false)]
			public unsafe static void PathColorGen(NvPathRendering color, NvPathRendering genMode, NvPathRendering colorFormat, float[] coeffs)
			{
				fixed (float* ptr = ref (coeffs != null && coeffs.Length != 0) ? ref coeffs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), color, genMode, colorFormat, ptr, GL.EntryPoints[1455]);
				}
			}

			// Token: 0x06002A0B RID: 10763 RVA: 0x000726F0 File Offset: 0x000708F0
			[CLSCompliant(false)]
			public unsafe static void PathColorGen(NvPathRendering color, NvPathRendering genMode, NvPathRendering colorFormat, ref float coeffs)
			{
				fixed (float* ptr = &coeffs)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), color, genMode, colorFormat, ptr, GL.EntryPoints[1455]);
				}
			}

			// Token: 0x06002A0C RID: 10764 RVA: 0x00072714 File Offset: 0x00070914
			[CLSCompliant(false)]
			public unsafe static void PathColorGen(NvPathRendering color, NvPathRendering genMode, NvPathRendering colorFormat, float* coeffs)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), color, genMode, colorFormat, coeffs, GL.EntryPoints[1455]);
			}

			// Token: 0x06002A0D RID: 10765 RVA: 0x0007272C File Offset: 0x0007092C
			[CLSCompliant(false)]
			public unsafe static void PathCommands(int path, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, IntPtr coords)
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr, numCoords, coordType, coords, GL.EntryPoints[1456]);
				}
			}

			// Token: 0x06002A0E RID: 10766 RVA: 0x00072768 File Offset: 0x00070968
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(int path, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[] coords) where T5 : struct
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (T5* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1456]);
					}
				}
			}

			// Token: 0x06002A0F RID: 10767 RVA: 0x000727BC File Offset: 0x000709BC
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(int path, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[,] coords) where T5 : struct
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (T5* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1456]);
					}
				}
			}

			// Token: 0x06002A10 RID: 10768 RVA: 0x00072814 File Offset: 0x00070A14
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(int path, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[,,] coords) where T5 : struct
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (T5* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1456]);
					}
				}
			}

			// Token: 0x06002A11 RID: 10769 RVA: 0x0007286C File Offset: 0x00070A6C
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(int path, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, [In] [Out] ref T5 coords) where T5 : struct
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (T5* ptr3 = &coords)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1456]);
					}
				}
			}

			// Token: 0x06002A12 RID: 10770 RVA: 0x000728AC File Offset: 0x00070AAC
			[CLSCompliant(false)]
			public unsafe static void PathCommands(int path, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, IntPtr coords)
			{
				fixed (byte* ptr = &commands)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr, numCoords, coordType, coords, GL.EntryPoints[1456]);
				}
			}

			// Token: 0x06002A13 RID: 10771 RVA: 0x000728D4 File Offset: 0x00070AD4
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(int path, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[] coords) where T5 : struct
			{
				fixed (byte* ptr = &commands)
				{
					byte* ptr2 = ptr;
					fixed (T5* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1456]);
					}
				}
			}

			// Token: 0x06002A14 RID: 10772 RVA: 0x00072914 File Offset: 0x00070B14
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(int path, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[,] coords) where T5 : struct
			{
				fixed (byte* ptr = &commands)
				{
					byte* ptr2 = ptr;
					fixed (T5* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1456]);
					}
				}
			}

			// Token: 0x06002A15 RID: 10773 RVA: 0x00072958 File Offset: 0x00070B58
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(int path, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[,,] coords) where T5 : struct
			{
				fixed (byte* ptr = &commands)
				{
					byte* ptr2 = ptr;
					fixed (T5* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1456]);
					}
				}
			}

			// Token: 0x06002A16 RID: 10774 RVA: 0x0007299C File Offset: 0x00070B9C
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(int path, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, [In] [Out] ref T5 coords) where T5 : struct
			{
				fixed (byte* ptr = &commands)
				{
					byte* ptr2 = ptr;
					fixed (T5* ptr3 = &coords)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1456]);
					}
				}
			}

			// Token: 0x06002A17 RID: 10775 RVA: 0x000729C8 File Offset: 0x00070BC8
			[CLSCompliant(false)]
			public unsafe static void PathCommands(int path, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, IntPtr coords)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, commands, numCoords, coordType, coords, GL.EntryPoints[1456]);
			}

			// Token: 0x06002A18 RID: 10776 RVA: 0x000729E4 File Offset: 0x00070BE4
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(int path, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[] coords) where T5 : struct
			{
				fixed (T5* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, commands, numCoords, coordType, ptr, GL.EntryPoints[1456]);
				}
			}

			// Token: 0x06002A19 RID: 10777 RVA: 0x00072A20 File Offset: 0x00070C20
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(int path, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[,] coords) where T5 : struct
			{
				fixed (T5* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, commands, numCoords, coordType, ptr, GL.EntryPoints[1456]);
				}
			}

			// Token: 0x06002A1A RID: 10778 RVA: 0x00072A60 File Offset: 0x00070C60
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(int path, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[,,] coords) where T5 : struct
			{
				fixed (T5* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, commands, numCoords, coordType, ptr, GL.EntryPoints[1456]);
				}
			}

			// Token: 0x06002A1B RID: 10779 RVA: 0x00072AA4 File Offset: 0x00070CA4
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(int path, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, [In] [Out] ref T5 coords) where T5 : struct
			{
				fixed (T5* ptr = &coords)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, commands, numCoords, coordType, ptr, GL.EntryPoints[1456]);
				}
			}

			// Token: 0x06002A1C RID: 10780 RVA: 0x00072ACC File Offset: 0x00070CCC
			[CLSCompliant(false)]
			public unsafe static void PathCommands(uint path, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, IntPtr coords)
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr, numCoords, coordType, coords, GL.EntryPoints[1456]);
				}
			}

			// Token: 0x06002A1D RID: 10781 RVA: 0x00072B08 File Offset: 0x00070D08
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(uint path, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[] coords) where T5 : struct
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (T5* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1456]);
					}
				}
			}

			// Token: 0x06002A1E RID: 10782 RVA: 0x00072B5C File Offset: 0x00070D5C
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(uint path, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[,] coords) where T5 : struct
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (T5* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1456]);
					}
				}
			}

			// Token: 0x06002A1F RID: 10783 RVA: 0x00072BB4 File Offset: 0x00070DB4
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(uint path, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[,,] coords) where T5 : struct
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (T5* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1456]);
					}
				}
			}

			// Token: 0x06002A20 RID: 10784 RVA: 0x00072C0C File Offset: 0x00070E0C
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(uint path, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, [In] [Out] ref T5 coords) where T5 : struct
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (T5* ptr3 = &coords)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1456]);
					}
				}
			}

			// Token: 0x06002A21 RID: 10785 RVA: 0x00072C4C File Offset: 0x00070E4C
			[CLSCompliant(false)]
			public unsafe static void PathCommands(uint path, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, IntPtr coords)
			{
				fixed (byte* ptr = &commands)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr, numCoords, coordType, coords, GL.EntryPoints[1456]);
				}
			}

			// Token: 0x06002A22 RID: 10786 RVA: 0x00072C74 File Offset: 0x00070E74
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(uint path, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[] coords) where T5 : struct
			{
				fixed (byte* ptr = &commands)
				{
					byte* ptr2 = ptr;
					fixed (T5* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1456]);
					}
				}
			}

			// Token: 0x06002A23 RID: 10787 RVA: 0x00072CB4 File Offset: 0x00070EB4
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(uint path, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[,] coords) where T5 : struct
			{
				fixed (byte* ptr = &commands)
				{
					byte* ptr2 = ptr;
					fixed (T5* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1456]);
					}
				}
			}

			// Token: 0x06002A24 RID: 10788 RVA: 0x00072CF8 File Offset: 0x00070EF8
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(uint path, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[,,] coords) where T5 : struct
			{
				fixed (byte* ptr = &commands)
				{
					byte* ptr2 = ptr;
					fixed (T5* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1456]);
					}
				}
			}

			// Token: 0x06002A25 RID: 10789 RVA: 0x00072D3C File Offset: 0x00070F3C
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(uint path, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, [In] [Out] ref T5 coords) where T5 : struct
			{
				fixed (byte* ptr = &commands)
				{
					byte* ptr2 = ptr;
					fixed (T5* ptr3 = &coords)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1456]);
					}
				}
			}

			// Token: 0x06002A26 RID: 10790 RVA: 0x00072D68 File Offset: 0x00070F68
			[CLSCompliant(false)]
			public unsafe static void PathCommands(uint path, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, IntPtr coords)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, commands, numCoords, coordType, coords, GL.EntryPoints[1456]);
			}

			// Token: 0x06002A27 RID: 10791 RVA: 0x00072D84 File Offset: 0x00070F84
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(uint path, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[] coords) where T5 : struct
			{
				fixed (T5* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, commands, numCoords, coordType, ptr, GL.EntryPoints[1456]);
				}
			}

			// Token: 0x06002A28 RID: 10792 RVA: 0x00072DC0 File Offset: 0x00070FC0
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(uint path, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[,] coords) where T5 : struct
			{
				fixed (T5* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, commands, numCoords, coordType, ptr, GL.EntryPoints[1456]);
				}
			}

			// Token: 0x06002A29 RID: 10793 RVA: 0x00072E00 File Offset: 0x00071000
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(uint path, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, [In] [Out] T5[,,] coords) where T5 : struct
			{
				fixed (T5* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, commands, numCoords, coordType, ptr, GL.EntryPoints[1456]);
				}
			}

			// Token: 0x06002A2A RID: 10794 RVA: 0x00072E44 File Offset: 0x00071044
			[CLSCompliant(false)]
			public unsafe static void PathCommands<T5>(uint path, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, [In] [Out] ref T5 coords) where T5 : struct
			{
				fixed (T5* ptr = &coords)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, numCommands, commands, numCoords, coordType, ptr, GL.EntryPoints[1456]);
				}
			}

			// Token: 0x06002A2B RID: 10795 RVA: 0x00072E6C File Offset: 0x0007106C
			[CLSCompliant(false)]
			public static void PathCoords(int path, int numCoords, NvPathRendering coordType, IntPtr coords)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, numCoords, coordType, coords, GL.EntryPoints[1457]);
			}

			// Token: 0x06002A2C RID: 10796 RVA: 0x00072E84 File Offset: 0x00071084
			[CLSCompliant(false)]
			public unsafe static void PathCoords<T3>(int path, int numCoords, NvPathRendering coordType, [In] [Out] T3[] coords) where T3 : struct
			{
				fixed (T3* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, numCoords, coordType, ptr, GL.EntryPoints[1457]);
				}
			}

			// Token: 0x06002A2D RID: 10797 RVA: 0x00072EBC File Offset: 0x000710BC
			[CLSCompliant(false)]
			public unsafe static void PathCoords<T3>(int path, int numCoords, NvPathRendering coordType, [In] [Out] T3[,] coords) where T3 : struct
			{
				fixed (T3* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, numCoords, coordType, ptr, GL.EntryPoints[1457]);
				}
			}

			// Token: 0x06002A2E RID: 10798 RVA: 0x00072EF8 File Offset: 0x000710F8
			[CLSCompliant(false)]
			public unsafe static void PathCoords<T3>(int path, int numCoords, NvPathRendering coordType, [In] [Out] T3[,,] coords) where T3 : struct
			{
				fixed (T3* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, numCoords, coordType, ptr, GL.EntryPoints[1457]);
				}
			}

			// Token: 0x06002A2F RID: 10799 RVA: 0x00072F34 File Offset: 0x00071134
			[CLSCompliant(false)]
			public unsafe static void PathCoords<T3>(int path, int numCoords, NvPathRendering coordType, [In] [Out] ref T3 coords) where T3 : struct
			{
				fixed (T3* ptr = &coords)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, numCoords, coordType, ptr, GL.EntryPoints[1457]);
				}
			}

			// Token: 0x06002A30 RID: 10800 RVA: 0x00072F58 File Offset: 0x00071158
			[CLSCompliant(false)]
			public static void PathCoords(uint path, int numCoords, NvPathRendering coordType, IntPtr coords)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, numCoords, coordType, coords, GL.EntryPoints[1457]);
			}

			// Token: 0x06002A31 RID: 10801 RVA: 0x00072F70 File Offset: 0x00071170
			[CLSCompliant(false)]
			public unsafe static void PathCoords<T3>(uint path, int numCoords, NvPathRendering coordType, [In] [Out] T3[] coords) where T3 : struct
			{
				fixed (T3* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, numCoords, coordType, ptr, GL.EntryPoints[1457]);
				}
			}

			// Token: 0x06002A32 RID: 10802 RVA: 0x00072FA8 File Offset: 0x000711A8
			[CLSCompliant(false)]
			public unsafe static void PathCoords<T3>(uint path, int numCoords, NvPathRendering coordType, [In] [Out] T3[,] coords) where T3 : struct
			{
				fixed (T3* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, numCoords, coordType, ptr, GL.EntryPoints[1457]);
				}
			}

			// Token: 0x06002A33 RID: 10803 RVA: 0x00072FE4 File Offset: 0x000711E4
			[CLSCompliant(false)]
			public unsafe static void PathCoords<T3>(uint path, int numCoords, NvPathRendering coordType, [In] [Out] T3[,,] coords) where T3 : struct
			{
				fixed (T3* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, numCoords, coordType, ptr, GL.EntryPoints[1457]);
				}
			}

			// Token: 0x06002A34 RID: 10804 RVA: 0x00073020 File Offset: 0x00071220
			[CLSCompliant(false)]
			public unsafe static void PathCoords<T3>(uint path, int numCoords, NvPathRendering coordType, [In] [Out] ref T3 coords) where T3 : struct
			{
				fixed (T3* ptr = &coords)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, numCoords, coordType, ptr, GL.EntryPoints[1457]);
				}
			}

			// Token: 0x06002A35 RID: 10805 RVA: 0x00073044 File Offset: 0x00071244
			public static void PathCoverDepthFunc(DepthFunction func)
			{
				calli(System.Void(System.Int32), func, GL.EntryPoints[1458]);
			}

			// Token: 0x06002A36 RID: 10806 RVA: 0x00073058 File Offset: 0x00071258
			[CLSCompliant(false)]
			public unsafe static void PathDashArray(int path, int dashCount, float[] dashArray)
			{
				fixed (float* ptr = ref (dashArray != null && dashArray.Length != 0) ? ref dashArray[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), path, dashCount, ptr, GL.EntryPoints[1459]);
				}
			}

			// Token: 0x06002A37 RID: 10807 RVA: 0x00073090 File Offset: 0x00071290
			[CLSCompliant(false)]
			public unsafe static void PathDashArray(int path, int dashCount, ref float dashArray)
			{
				fixed (float* ptr = &dashArray)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), path, dashCount, ptr, GL.EntryPoints[1459]);
				}
			}

			// Token: 0x06002A38 RID: 10808 RVA: 0x000730B4 File Offset: 0x000712B4
			[CLSCompliant(false)]
			public unsafe static void PathDashArray(int path, int dashCount, float* dashArray)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), path, dashCount, dashArray, GL.EntryPoints[1459]);
			}

			// Token: 0x06002A39 RID: 10809 RVA: 0x000730CC File Offset: 0x000712CC
			[CLSCompliant(false)]
			public unsafe static void PathDashArray(uint path, int dashCount, float[] dashArray)
			{
				fixed (float* ptr = ref (dashArray != null && dashArray.Length != 0) ? ref dashArray[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), path, dashCount, ptr, GL.EntryPoints[1459]);
				}
			}

			// Token: 0x06002A3A RID: 10810 RVA: 0x00073104 File Offset: 0x00071304
			[CLSCompliant(false)]
			public unsafe static void PathDashArray(uint path, int dashCount, ref float dashArray)
			{
				fixed (float* ptr = &dashArray)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), path, dashCount, ptr, GL.EntryPoints[1459]);
				}
			}

			// Token: 0x06002A3B RID: 10811 RVA: 0x00073128 File Offset: 0x00071328
			[CLSCompliant(false)]
			public unsafe static void PathDashArray(uint path, int dashCount, float* dashArray)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), path, dashCount, dashArray, GL.EntryPoints[1459]);
			}

			// Token: 0x06002A3C RID: 10812 RVA: 0x00073140 File Offset: 0x00071340
			public static void PathFogGen(NvPathRendering genMode)
			{
				calli(System.Void(System.Int32), genMode, GL.EntryPoints[1460]);
			}

			// Token: 0x06002A3D RID: 10813 RVA: 0x00073154 File Offset: 0x00071354
			[CLSCompliant(false)]
			public static void PathGlyphRange(int firstPathName, NvPathRendering fontTarget, IntPtr fontName, int fontStyle, int firstGlyph, int numGlyphs, NvPathRendering handleMissingGlyphs, int pathParameterTemplate, float emScale)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1461]);
			}

			// Token: 0x06002A3E RID: 10814 RVA: 0x00073180 File Offset: 0x00071380
			[CLSCompliant(false)]
			public unsafe static void PathGlyphRange<T2>(int firstPathName, NvPathRendering fontTarget, [In] [Out] T2[] fontName, int fontStyle, int firstGlyph, int numGlyphs, NvPathRendering handleMissingGlyphs, int pathParameterTemplate, float emScale) where T2 : struct
			{
				fixed (T2* ptr = ref (fontName != null && fontName.Length != 0) ? ref fontName[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1461]);
				}
			}

			// Token: 0x06002A3F RID: 10815 RVA: 0x000731C0 File Offset: 0x000713C0
			[CLSCompliant(false)]
			public unsafe static void PathGlyphRange<T2>(int firstPathName, NvPathRendering fontTarget, [In] [Out] T2[,] fontName, int fontStyle, int firstGlyph, int numGlyphs, NvPathRendering handleMissingGlyphs, int pathParameterTemplate, float emScale) where T2 : struct
			{
				fixed (T2* ptr = ref (fontName != null && fontName.Length != 0) ? ref fontName[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1461]);
				}
			}

			// Token: 0x06002A40 RID: 10816 RVA: 0x00073204 File Offset: 0x00071404
			[CLSCompliant(false)]
			public unsafe static void PathGlyphRange<T2>(int firstPathName, NvPathRendering fontTarget, [In] [Out] T2[,,] fontName, int fontStyle, int firstGlyph, int numGlyphs, NvPathRendering handleMissingGlyphs, int pathParameterTemplate, float emScale) where T2 : struct
			{
				fixed (T2* ptr = ref (fontName != null && fontName.Length != 0) ? ref fontName[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1461]);
				}
			}

			// Token: 0x06002A41 RID: 10817 RVA: 0x0007324C File Offset: 0x0007144C
			[CLSCompliant(false)]
			public unsafe static void PathGlyphRange<T2>(int firstPathName, NvPathRendering fontTarget, [In] [Out] ref T2 fontName, int fontStyle, int firstGlyph, int numGlyphs, NvPathRendering handleMissingGlyphs, int pathParameterTemplate, float emScale) where T2 : struct
			{
				fixed (T2* ptr = &fontName)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1461]);
				}
			}

			// Token: 0x06002A42 RID: 10818 RVA: 0x0007327C File Offset: 0x0007147C
			[CLSCompliant(false)]
			public static void PathGlyphRange(uint firstPathName, NvPathRendering fontTarget, IntPtr fontName, uint fontStyle, uint firstGlyph, int numGlyphs, NvPathRendering handleMissingGlyphs, uint pathParameterTemplate, float emScale)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1461]);
			}

			// Token: 0x06002A43 RID: 10819 RVA: 0x000732A8 File Offset: 0x000714A8
			[CLSCompliant(false)]
			public unsafe static void PathGlyphRange<T2>(uint firstPathName, NvPathRendering fontTarget, [In] [Out] T2[] fontName, uint fontStyle, uint firstGlyph, int numGlyphs, NvPathRendering handleMissingGlyphs, uint pathParameterTemplate, float emScale) where T2 : struct
			{
				fixed (T2* ptr = ref (fontName != null && fontName.Length != 0) ? ref fontName[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1461]);
				}
			}

			// Token: 0x06002A44 RID: 10820 RVA: 0x000732E8 File Offset: 0x000714E8
			[CLSCompliant(false)]
			public unsafe static void PathGlyphRange<T2>(uint firstPathName, NvPathRendering fontTarget, [In] [Out] T2[,] fontName, uint fontStyle, uint firstGlyph, int numGlyphs, NvPathRendering handleMissingGlyphs, uint pathParameterTemplate, float emScale) where T2 : struct
			{
				fixed (T2* ptr = ref (fontName != null && fontName.Length != 0) ? ref fontName[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1461]);
				}
			}

			// Token: 0x06002A45 RID: 10821 RVA: 0x0007332C File Offset: 0x0007152C
			[CLSCompliant(false)]
			public unsafe static void PathGlyphRange<T2>(uint firstPathName, NvPathRendering fontTarget, [In] [Out] T2[,,] fontName, uint fontStyle, uint firstGlyph, int numGlyphs, NvPathRendering handleMissingGlyphs, uint pathParameterTemplate, float emScale) where T2 : struct
			{
				fixed (T2* ptr = ref (fontName != null && fontName.Length != 0) ? ref fontName[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1461]);
				}
			}

			// Token: 0x06002A46 RID: 10822 RVA: 0x00073374 File Offset: 0x00071574
			[CLSCompliant(false)]
			public unsafe static void PathGlyphRange<T2>(uint firstPathName, NvPathRendering fontTarget, [In] [Out] ref T2 fontName, uint fontStyle, uint firstGlyph, int numGlyphs, NvPathRendering handleMissingGlyphs, uint pathParameterTemplate, float emScale) where T2 : struct
			{
				fixed (T2* ptr = &fontName)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1461]);
				}
			}

			// Token: 0x06002A47 RID: 10823 RVA: 0x000733A4 File Offset: 0x000715A4
			[CLSCompliant(false)]
			public static void PathGlyph(int firstPathName, NvPathRendering fontTarget, IntPtr fontName, int fontStyle, int numGlyphs, NvPathRendering type, IntPtr charcodes, NvPathRendering handleMissingGlyphs, int pathParameterTemplate, float emScale)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1462]);
			}

			// Token: 0x06002A48 RID: 10824 RVA: 0x000733D4 File Offset: 0x000715D4
			[CLSCompliant(false)]
			public unsafe static void PathGlyph<T2, T6>(int firstPathName, NvPathRendering fontTarget, [In] [Out] T2[] fontName, int fontStyle, int numGlyphs, NvPathRendering type, [In] [Out] T6[] charcodes, NvPathRendering handleMissingGlyphs, int pathParameterTemplate, float emScale) where T2 : struct where T6 : struct
			{
				fixed (T2* ptr = ref (fontName != null && fontName.Length != 0) ? ref fontName[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (T6* ptr3 = ref (charcodes != null && charcodes.Length != 0) ? ref charcodes[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, ptr2, fontStyle, numGlyphs, type, ptr3, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1462]);
					}
				}
			}

			// Token: 0x06002A49 RID: 10825 RVA: 0x00073430 File Offset: 0x00071630
			[CLSCompliant(false)]
			public unsafe static void PathGlyph<T2, T6>(int firstPathName, NvPathRendering fontTarget, [In] [Out] T2[,] fontName, int fontStyle, int numGlyphs, NvPathRendering type, [In] [Out] T6[,] charcodes, NvPathRendering handleMissingGlyphs, int pathParameterTemplate, float emScale) where T2 : struct where T6 : struct
			{
				fixed (T2* ptr = ref (fontName != null && fontName.Length != 0) ? ref fontName[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (T6* ptr3 = ref (charcodes != null && charcodes.Length != 0) ? ref charcodes[0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, ptr2, fontStyle, numGlyphs, type, ptr3, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1462]);
					}
				}
			}

			// Token: 0x06002A4A RID: 10826 RVA: 0x00073494 File Offset: 0x00071694
			[CLSCompliant(false)]
			public unsafe static void PathGlyph<T2, T6>(int firstPathName, NvPathRendering fontTarget, [In] [Out] T2[,,] fontName, int fontStyle, int numGlyphs, NvPathRendering type, [In] [Out] T6[,,] charcodes, NvPathRendering handleMissingGlyphs, int pathParameterTemplate, float emScale) where T2 : struct where T6 : struct
			{
				fixed (T2* ptr = ref (fontName != null && fontName.Length != 0) ? ref fontName[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (T6* ptr3 = ref (charcodes != null && charcodes.Length != 0) ? ref charcodes[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, ptr2, fontStyle, numGlyphs, type, ptr3, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1462]);
					}
				}
			}

			// Token: 0x06002A4B RID: 10827 RVA: 0x000734F8 File Offset: 0x000716F8
			[CLSCompliant(false)]
			public unsafe static void PathGlyph<T2, T6>(int firstPathName, NvPathRendering fontTarget, [In] [Out] ref T2 fontName, int fontStyle, int numGlyphs, NvPathRendering type, [In] [Out] ref T6 charcodes, NvPathRendering handleMissingGlyphs, int pathParameterTemplate, float emScale) where T2 : struct where T6 : struct
			{
				fixed (T2* ptr = &fontName)
				{
					T2* ptr2 = ptr;
					fixed (T6* ptr3 = &charcodes)
					{
						calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, ptr2, fontStyle, numGlyphs, type, ptr3, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1462]);
					}
				}
			}

			// Token: 0x06002A4C RID: 10828 RVA: 0x0007352C File Offset: 0x0007172C
			[CLSCompliant(false)]
			public static void PathGlyph(uint firstPathName, NvPathRendering fontTarget, IntPtr fontName, uint fontStyle, int numGlyphs, NvPathRendering type, IntPtr charcodes, NvPathRendering handleMissingGlyphs, uint pathParameterTemplate, float emScale)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1462]);
			}

			// Token: 0x06002A4D RID: 10829 RVA: 0x0007355C File Offset: 0x0007175C
			[CLSCompliant(false)]
			public unsafe static void PathGlyph<T2, T6>(uint firstPathName, NvPathRendering fontTarget, [In] [Out] T2[] fontName, uint fontStyle, int numGlyphs, NvPathRendering type, [In] [Out] T6[] charcodes, NvPathRendering handleMissingGlyphs, uint pathParameterTemplate, float emScale) where T2 : struct where T6 : struct
			{
				fixed (T2* ptr = ref (fontName != null && fontName.Length != 0) ? ref fontName[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (T6* ptr3 = ref (charcodes != null && charcodes.Length != 0) ? ref charcodes[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, ptr2, fontStyle, numGlyphs, type, ptr3, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1462]);
					}
				}
			}

			// Token: 0x06002A4E RID: 10830 RVA: 0x000735B8 File Offset: 0x000717B8
			[CLSCompliant(false)]
			public unsafe static void PathGlyph<T2, T6>(uint firstPathName, NvPathRendering fontTarget, [In] [Out] T2[,] fontName, uint fontStyle, int numGlyphs, NvPathRendering type, [In] [Out] T6[,] charcodes, NvPathRendering handleMissingGlyphs, uint pathParameterTemplate, float emScale) where T2 : struct where T6 : struct
			{
				fixed (T2* ptr = ref (fontName != null && fontName.Length != 0) ? ref fontName[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (T6* ptr3 = ref (charcodes != null && charcodes.Length != 0) ? ref charcodes[0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, ptr2, fontStyle, numGlyphs, type, ptr3, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1462]);
					}
				}
			}

			// Token: 0x06002A4F RID: 10831 RVA: 0x0007361C File Offset: 0x0007181C
			[CLSCompliant(false)]
			public unsafe static void PathGlyph<T2, T6>(uint firstPathName, NvPathRendering fontTarget, [In] [Out] T2[,,] fontName, uint fontStyle, int numGlyphs, NvPathRendering type, [In] [Out] T6[,,] charcodes, NvPathRendering handleMissingGlyphs, uint pathParameterTemplate, float emScale) where T2 : struct where T6 : struct
			{
				fixed (T2* ptr = ref (fontName != null && fontName.Length != 0) ? ref fontName[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (T6* ptr3 = ref (charcodes != null && charcodes.Length != 0) ? ref charcodes[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, ptr2, fontStyle, numGlyphs, type, ptr3, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1462]);
					}
				}
			}

			// Token: 0x06002A50 RID: 10832 RVA: 0x00073680 File Offset: 0x00071880
			[CLSCompliant(false)]
			public unsafe static void PathGlyph<T2, T6>(uint firstPathName, NvPathRendering fontTarget, [In] [Out] ref T2 fontName, uint fontStyle, int numGlyphs, NvPathRendering type, [In] [Out] ref T6 charcodes, NvPathRendering handleMissingGlyphs, uint pathParameterTemplate, float emScale) where T2 : struct where T6 : struct
			{
				fixed (T2* ptr = &fontName)
				{
					T2* ptr2 = ptr;
					fixed (T6* ptr3 = &charcodes)
					{
						calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32,System.Single), firstPathName, fontTarget, ptr2, fontStyle, numGlyphs, type, ptr3, handleMissingGlyphs, pathParameterTemplate, emScale, GL.EntryPoints[1462]);
					}
				}
			}

			// Token: 0x06002A51 RID: 10833 RVA: 0x000736B4 File Offset: 0x000718B4
			[CLSCompliant(false)]
			public static void PathParameter(int path, NvPathRendering pname, float value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single), path, pname, value, GL.EntryPoints[1463]);
			}

			// Token: 0x06002A52 RID: 10834 RVA: 0x000736CC File Offset: 0x000718CC
			[CLSCompliant(false)]
			public static void PathParameter(uint path, NvPathRendering pname, float value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single), path, pname, value, GL.EntryPoints[1463]);
			}

			// Token: 0x06002A53 RID: 10835 RVA: 0x000736E4 File Offset: 0x000718E4
			[CLSCompliant(false)]
			public unsafe static void PathParameter(int path, NvPathRendering pname, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), path, pname, ptr, GL.EntryPoints[1464]);
				}
			}

			// Token: 0x06002A54 RID: 10836 RVA: 0x0007371C File Offset: 0x0007191C
			[CLSCompliant(false)]
			public unsafe static void PathParameter(int path, NvPathRendering pname, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), path, pname, value, GL.EntryPoints[1464]);
			}

			// Token: 0x06002A55 RID: 10837 RVA: 0x00073734 File Offset: 0x00071934
			[CLSCompliant(false)]
			public unsafe static void PathParameter(uint path, NvPathRendering pname, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), path, pname, ptr, GL.EntryPoints[1464]);
				}
			}

			// Token: 0x06002A56 RID: 10838 RVA: 0x0007376C File Offset: 0x0007196C
			[CLSCompliant(false)]
			public unsafe static void PathParameter(uint path, NvPathRendering pname, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), path, pname, value, GL.EntryPoints[1464]);
			}

			// Token: 0x06002A57 RID: 10839 RVA: 0x00073784 File Offset: 0x00071984
			[CLSCompliant(false)]
			public static void PathParameter(int path, NvPathRendering pname, int value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), path, pname, value, GL.EntryPoints[1465]);
			}

			// Token: 0x06002A58 RID: 10840 RVA: 0x0007379C File Offset: 0x0007199C
			[CLSCompliant(false)]
			public static void PathParameter(uint path, NvPathRendering pname, int value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), path, pname, value, GL.EntryPoints[1465]);
			}

			// Token: 0x06002A59 RID: 10841 RVA: 0x000737B4 File Offset: 0x000719B4
			[CLSCompliant(false)]
			public unsafe static void PathParameter(int path, NvPathRendering pname, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), path, pname, ptr, GL.EntryPoints[1466]);
				}
			}

			// Token: 0x06002A5A RID: 10842 RVA: 0x000737EC File Offset: 0x000719EC
			[CLSCompliant(false)]
			public unsafe static void PathParameter(int path, NvPathRendering pname, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), path, pname, value, GL.EntryPoints[1466]);
			}

			// Token: 0x06002A5B RID: 10843 RVA: 0x00073804 File Offset: 0x00071A04
			[CLSCompliant(false)]
			public unsafe static void PathParameter(uint path, NvPathRendering pname, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), path, pname, ptr, GL.EntryPoints[1466]);
				}
			}

			// Token: 0x06002A5C RID: 10844 RVA: 0x0007383C File Offset: 0x00071A3C
			[CLSCompliant(false)]
			public unsafe static void PathParameter(uint path, NvPathRendering pname, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), path, pname, value, GL.EntryPoints[1466]);
			}

			// Token: 0x06002A5D RID: 10845 RVA: 0x00073854 File Offset: 0x00071A54
			public static void PathStencilDepthOffset(float factor, float units)
			{
				calli(System.Void(System.Single,System.Single), factor, units, GL.EntryPoints[1467]);
			}

			// Token: 0x06002A5E RID: 10846 RVA: 0x00073868 File Offset: 0x00071A68
			[CLSCompliant(false)]
			public static void PathStencilFunc(StencilFunction func, int @ref, int mask)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32), func, @ref, mask, GL.EntryPoints[1468]);
			}

			// Token: 0x06002A5F RID: 10847 RVA: 0x00073880 File Offset: 0x00071A80
			[CLSCompliant(false)]
			public static void PathStencilFunc(StencilFunction func, int @ref, uint mask)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32), func, @ref, mask, GL.EntryPoints[1468]);
			}

			// Token: 0x06002A60 RID: 10848 RVA: 0x00073898 File Offset: 0x00071A98
			[CLSCompliant(false)]
			public static void PathString(int path, NvPathRendering format, int length, IntPtr pathString)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, format, length, pathString, GL.EntryPoints[1469]);
			}

			// Token: 0x06002A61 RID: 10849 RVA: 0x000738B0 File Offset: 0x00071AB0
			[CLSCompliant(false)]
			public unsafe static void PathString<T3>(int path, NvPathRendering format, int length, [In] [Out] T3[] pathString) where T3 : struct
			{
				fixed (T3* ptr = ref (pathString != null && pathString.Length != 0) ? ref pathString[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, format, length, ptr, GL.EntryPoints[1469]);
				}
			}

			// Token: 0x06002A62 RID: 10850 RVA: 0x000738E8 File Offset: 0x00071AE8
			[CLSCompliant(false)]
			public unsafe static void PathString<T3>(int path, NvPathRendering format, int length, [In] [Out] T3[,] pathString) where T3 : struct
			{
				fixed (T3* ptr = ref (pathString != null && pathString.Length != 0) ? ref pathString[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, format, length, ptr, GL.EntryPoints[1469]);
				}
			}

			// Token: 0x06002A63 RID: 10851 RVA: 0x00073924 File Offset: 0x00071B24
			[CLSCompliant(false)]
			public unsafe static void PathString<T3>(int path, NvPathRendering format, int length, [In] [Out] T3[,,] pathString) where T3 : struct
			{
				fixed (T3* ptr = ref (pathString != null && pathString.Length != 0) ? ref pathString[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, format, length, ptr, GL.EntryPoints[1469]);
				}
			}

			// Token: 0x06002A64 RID: 10852 RVA: 0x00073960 File Offset: 0x00071B60
			[CLSCompliant(false)]
			public unsafe static void PathString<T3>(int path, NvPathRendering format, int length, [In] [Out] ref T3 pathString) where T3 : struct
			{
				fixed (T3* ptr = &pathString)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, format, length, ptr, GL.EntryPoints[1469]);
				}
			}

			// Token: 0x06002A65 RID: 10853 RVA: 0x00073984 File Offset: 0x00071B84
			[CLSCompliant(false)]
			public static void PathString(uint path, NvPathRendering format, int length, IntPtr pathString)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, format, length, pathString, GL.EntryPoints[1469]);
			}

			// Token: 0x06002A66 RID: 10854 RVA: 0x0007399C File Offset: 0x00071B9C
			[CLSCompliant(false)]
			public unsafe static void PathString<T3>(uint path, NvPathRendering format, int length, [In] [Out] T3[] pathString) where T3 : struct
			{
				fixed (T3* ptr = ref (pathString != null && pathString.Length != 0) ? ref pathString[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, format, length, ptr, GL.EntryPoints[1469]);
				}
			}

			// Token: 0x06002A67 RID: 10855 RVA: 0x000739D4 File Offset: 0x00071BD4
			[CLSCompliant(false)]
			public unsafe static void PathString<T3>(uint path, NvPathRendering format, int length, [In] [Out] T3[,] pathString) where T3 : struct
			{
				fixed (T3* ptr = ref (pathString != null && pathString.Length != 0) ? ref pathString[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, format, length, ptr, GL.EntryPoints[1469]);
				}
			}

			// Token: 0x06002A68 RID: 10856 RVA: 0x00073A10 File Offset: 0x00071C10
			[CLSCompliant(false)]
			public unsafe static void PathString<T3>(uint path, NvPathRendering format, int length, [In] [Out] T3[,,] pathString) where T3 : struct
			{
				fixed (T3* ptr = ref (pathString != null && pathString.Length != 0) ? ref pathString[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, format, length, ptr, GL.EntryPoints[1469]);
				}
			}

			// Token: 0x06002A69 RID: 10857 RVA: 0x00073A4C File Offset: 0x00071C4C
			[CLSCompliant(false)]
			public unsafe static void PathString<T3>(uint path, NvPathRendering format, int length, [In] [Out] ref T3 pathString) where T3 : struct
			{
				fixed (T3* ptr = &pathString)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.IntPtr), path, format, length, ptr, GL.EntryPoints[1469]);
				}
			}

			// Token: 0x06002A6A RID: 10858 RVA: 0x00073A70 File Offset: 0x00071C70
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands(int path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, IntPtr coords)
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr, numCoords, coordType, coords, GL.EntryPoints[1470]);
				}
			}

			// Token: 0x06002A6B RID: 10859 RVA: 0x00073AB0 File Offset: 0x00071CB0
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(int path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[] coords) where T7 : struct
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (T7* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1470]);
					}
				}
			}

			// Token: 0x06002A6C RID: 10860 RVA: 0x00073B08 File Offset: 0x00071D08
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(int path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[,] coords) where T7 : struct
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (T7* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1470]);
					}
				}
			}

			// Token: 0x06002A6D RID: 10861 RVA: 0x00073B64 File Offset: 0x00071D64
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(int path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[,,] coords) where T7 : struct
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (T7* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1470]);
					}
				}
			}

			// Token: 0x06002A6E RID: 10862 RVA: 0x00073BC0 File Offset: 0x00071DC0
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(int path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, [In] [Out] ref T7 coords) where T7 : struct
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (T7* ptr3 = &coords)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1470]);
					}
				}
			}

			// Token: 0x06002A6F RID: 10863 RVA: 0x00073C04 File Offset: 0x00071E04
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands(int path, int commandStart, int commandsToDelete, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, IntPtr coords)
			{
				fixed (byte* ptr = &commands)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr, numCoords, coordType, coords, GL.EntryPoints[1470]);
				}
			}

			// Token: 0x06002A70 RID: 10864 RVA: 0x00073C30 File Offset: 0x00071E30
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(int path, int commandStart, int commandsToDelete, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[] coords) where T7 : struct
			{
				fixed (byte* ptr = &commands)
				{
					byte* ptr2 = ptr;
					fixed (T7* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1470]);
					}
				}
			}

			// Token: 0x06002A71 RID: 10865 RVA: 0x00073C74 File Offset: 0x00071E74
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(int path, int commandStart, int commandsToDelete, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[,] coords) where T7 : struct
			{
				fixed (byte* ptr = &commands)
				{
					byte* ptr2 = ptr;
					fixed (T7* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1470]);
					}
				}
			}

			// Token: 0x06002A72 RID: 10866 RVA: 0x00073CBC File Offset: 0x00071EBC
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(int path, int commandStart, int commandsToDelete, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[,,] coords) where T7 : struct
			{
				fixed (byte* ptr = &commands)
				{
					byte* ptr2 = ptr;
					fixed (T7* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1470]);
					}
				}
			}

			// Token: 0x06002A73 RID: 10867 RVA: 0x00073D04 File Offset: 0x00071F04
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(int path, int commandStart, int commandsToDelete, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, [In] [Out] ref T7 coords) where T7 : struct
			{
				fixed (byte* ptr = &commands)
				{
					byte* ptr2 = ptr;
					fixed (T7* ptr3 = &coords)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1470]);
					}
				}
			}

			// Token: 0x06002A74 RID: 10868 RVA: 0x00073D34 File Offset: 0x00071F34
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands(int path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, IntPtr coords)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords, GL.EntryPoints[1470]);
			}

			// Token: 0x06002A75 RID: 10869 RVA: 0x00073D60 File Offset: 0x00071F60
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(int path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[] coords) where T7 : struct
			{
				fixed (T7* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, ptr, GL.EntryPoints[1470]);
				}
			}

			// Token: 0x06002A76 RID: 10870 RVA: 0x00073DA0 File Offset: 0x00071FA0
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(int path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[,] coords) where T7 : struct
			{
				fixed (T7* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, ptr, GL.EntryPoints[1470]);
				}
			}

			// Token: 0x06002A77 RID: 10871 RVA: 0x00073DE4 File Offset: 0x00071FE4
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(int path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[,,] coords) where T7 : struct
			{
				fixed (T7* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, ptr, GL.EntryPoints[1470]);
				}
			}

			// Token: 0x06002A78 RID: 10872 RVA: 0x00073E2C File Offset: 0x0007202C
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(int path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, [In] [Out] ref T7 coords) where T7 : struct
			{
				fixed (T7* ptr = &coords)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, ptr, GL.EntryPoints[1470]);
				}
			}

			// Token: 0x06002A79 RID: 10873 RVA: 0x00073E58 File Offset: 0x00072058
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands(uint path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, IntPtr coords)
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr, numCoords, coordType, coords, GL.EntryPoints[1470]);
				}
			}

			// Token: 0x06002A7A RID: 10874 RVA: 0x00073E98 File Offset: 0x00072098
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[] coords) where T7 : struct
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (T7* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1470]);
					}
				}
			}

			// Token: 0x06002A7B RID: 10875 RVA: 0x00073EF0 File Offset: 0x000720F0
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[,] coords) where T7 : struct
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (T7* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1470]);
					}
				}
			}

			// Token: 0x06002A7C RID: 10876 RVA: 0x00073F4C File Offset: 0x0007214C
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[,,] coords) where T7 : struct
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (T7* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1470]);
					}
				}
			}

			// Token: 0x06002A7D RID: 10877 RVA: 0x00073FA8 File Offset: 0x000721A8
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, NvPathRendering coordType, [In] [Out] ref T7 coords) where T7 : struct
			{
				fixed (byte* ptr = ref (commands != null && commands.Length != 0) ? ref commands[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (T7* ptr3 = &coords)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1470]);
					}
				}
			}

			// Token: 0x06002A7E RID: 10878 RVA: 0x00073FEC File Offset: 0x000721EC
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands(uint path, int commandStart, int commandsToDelete, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, IntPtr coords)
			{
				fixed (byte* ptr = &commands)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr, numCoords, coordType, coords, GL.EntryPoints[1470]);
				}
			}

			// Token: 0x06002A7F RID: 10879 RVA: 0x00074018 File Offset: 0x00072218
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[] coords) where T7 : struct
			{
				fixed (byte* ptr = &commands)
				{
					byte* ptr2 = ptr;
					fixed (T7* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1470]);
					}
				}
			}

			// Token: 0x06002A80 RID: 10880 RVA: 0x0007405C File Offset: 0x0007225C
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[,] coords) where T7 : struct
			{
				fixed (byte* ptr = &commands)
				{
					byte* ptr2 = ptr;
					fixed (T7* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1470]);
					}
				}
			}

			// Token: 0x06002A81 RID: 10881 RVA: 0x000740A4 File Offset: 0x000722A4
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[,,] coords) where T7 : struct
			{
				fixed (byte* ptr = &commands)
				{
					byte* ptr2 = ptr;
					fixed (T7* ptr3 = ref (coords != null && coords.Length != 0) ? ref coords[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1470]);
					}
				}
			}

			// Token: 0x06002A82 RID: 10882 RVA: 0x000740EC File Offset: 0x000722EC
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, ref byte commands, int numCoords, NvPathRendering coordType, [In] [Out] ref T7 coords) where T7 : struct
			{
				fixed (byte* ptr = &commands)
				{
					byte* ptr2 = ptr;
					fixed (T7* ptr3 = &coords)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, ptr2, numCoords, coordType, ptr3, GL.EntryPoints[1470]);
					}
				}
			}

			// Token: 0x06002A83 RID: 10883 RVA: 0x0007411C File Offset: 0x0007231C
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands(uint path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, IntPtr coords)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords, GL.EntryPoints[1470]);
			}

			// Token: 0x06002A84 RID: 10884 RVA: 0x00074148 File Offset: 0x00072348
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[] coords) where T7 : struct
			{
				fixed (T7* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, ptr, GL.EntryPoints[1470]);
				}
			}

			// Token: 0x06002A85 RID: 10885 RVA: 0x00074188 File Offset: 0x00072388
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[,] coords) where T7 : struct
			{
				fixed (T7* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, ptr, GL.EntryPoints[1470]);
				}
			}

			// Token: 0x06002A86 RID: 10886 RVA: 0x000741CC File Offset: 0x000723CC
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, [In] [Out] T7[,,] coords) where T7 : struct
			{
				fixed (T7* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, ptr, GL.EntryPoints[1470]);
				}
			}

			// Token: 0x06002A87 RID: 10887 RVA: 0x00074214 File Offset: 0x00072414
			[CLSCompliant(false)]
			public unsafe static void PathSubCommands<T7>(uint path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, NvPathRendering coordType, [In] [Out] ref T7 coords) where T7 : struct
			{
				fixed (T7* ptr = &coords)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32,System.IntPtr), path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, ptr, GL.EntryPoints[1470]);
				}
			}

			// Token: 0x06002A88 RID: 10888 RVA: 0x00074240 File Offset: 0x00072440
			[CLSCompliant(false)]
			public static void PathSubCoords(int path, int coordStart, int numCoords, NvPathRendering coordType, IntPtr coords)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), path, coordStart, numCoords, coordType, coords, GL.EntryPoints[1471]);
			}

			// Token: 0x06002A89 RID: 10889 RVA: 0x00074258 File Offset: 0x00072458
			[CLSCompliant(false)]
			public unsafe static void PathSubCoords<T4>(int path, int coordStart, int numCoords, NvPathRendering coordType, [In] [Out] T4[] coords) where T4 : struct
			{
				fixed (T4* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), path, coordStart, numCoords, coordType, ptr, GL.EntryPoints[1471]);
				}
			}

			// Token: 0x06002A8A RID: 10890 RVA: 0x00074294 File Offset: 0x00072494
			[CLSCompliant(false)]
			public unsafe static void PathSubCoords<T4>(int path, int coordStart, int numCoords, NvPathRendering coordType, [In] [Out] T4[,] coords) where T4 : struct
			{
				fixed (T4* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), path, coordStart, numCoords, coordType, ptr, GL.EntryPoints[1471]);
				}
			}

			// Token: 0x06002A8B RID: 10891 RVA: 0x000742D4 File Offset: 0x000724D4
			[CLSCompliant(false)]
			public unsafe static void PathSubCoords<T4>(int path, int coordStart, int numCoords, NvPathRendering coordType, [In] [Out] T4[,,] coords) where T4 : struct
			{
				fixed (T4* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), path, coordStart, numCoords, coordType, ptr, GL.EntryPoints[1471]);
				}
			}

			// Token: 0x06002A8C RID: 10892 RVA: 0x00074314 File Offset: 0x00072514
			[CLSCompliant(false)]
			public unsafe static void PathSubCoords<T4>(int path, int coordStart, int numCoords, NvPathRendering coordType, [In] [Out] ref T4 coords) where T4 : struct
			{
				fixed (T4* ptr = &coords)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), path, coordStart, numCoords, coordType, ptr, GL.EntryPoints[1471]);
				}
			}

			// Token: 0x06002A8D RID: 10893 RVA: 0x0007433C File Offset: 0x0007253C
			[CLSCompliant(false)]
			public static void PathSubCoords(uint path, int coordStart, int numCoords, NvPathRendering coordType, IntPtr coords)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), path, coordStart, numCoords, coordType, coords, GL.EntryPoints[1471]);
			}

			// Token: 0x06002A8E RID: 10894 RVA: 0x00074354 File Offset: 0x00072554
			[CLSCompliant(false)]
			public unsafe static void PathSubCoords<T4>(uint path, int coordStart, int numCoords, NvPathRendering coordType, [In] [Out] T4[] coords) where T4 : struct
			{
				fixed (T4* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), path, coordStart, numCoords, coordType, ptr, GL.EntryPoints[1471]);
				}
			}

			// Token: 0x06002A8F RID: 10895 RVA: 0x00074390 File Offset: 0x00072590
			[CLSCompliant(false)]
			public unsafe static void PathSubCoords<T4>(uint path, int coordStart, int numCoords, NvPathRendering coordType, [In] [Out] T4[,] coords) where T4 : struct
			{
				fixed (T4* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), path, coordStart, numCoords, coordType, ptr, GL.EntryPoints[1471]);
				}
			}

			// Token: 0x06002A90 RID: 10896 RVA: 0x000743D0 File Offset: 0x000725D0
			[CLSCompliant(false)]
			public unsafe static void PathSubCoords<T4>(uint path, int coordStart, int numCoords, NvPathRendering coordType, [In] [Out] T4[,,] coords) where T4 : struct
			{
				fixed (T4* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), path, coordStart, numCoords, coordType, ptr, GL.EntryPoints[1471]);
				}
			}

			// Token: 0x06002A91 RID: 10897 RVA: 0x00074410 File Offset: 0x00072610
			[CLSCompliant(false)]
			public unsafe static void PathSubCoords<T4>(uint path, int coordStart, int numCoords, NvPathRendering coordType, [In] [Out] ref T4 coords) where T4 : struct
			{
				fixed (T4* ptr = &coords)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), path, coordStart, numCoords, coordType, ptr, GL.EntryPoints[1471]);
				}
			}

			// Token: 0x06002A92 RID: 10898 RVA: 0x00074438 File Offset: 0x00072638
			[CLSCompliant(false)]
			public unsafe static void PathTexGen(NvPathRendering texCoordSet, NvPathRendering genMode, int components, float[] coeffs)
			{
				fixed (float* ptr = ref (coeffs != null && coeffs.Length != 0) ? ref coeffs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texCoordSet, genMode, components, ptr, GL.EntryPoints[1472]);
				}
			}

			// Token: 0x06002A93 RID: 10899 RVA: 0x00074470 File Offset: 0x00072670
			[CLSCompliant(false)]
			public unsafe static void PathTexGen(NvPathRendering texCoordSet, NvPathRendering genMode, int components, ref float coeffs)
			{
				fixed (float* ptr = &coeffs)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texCoordSet, genMode, components, ptr, GL.EntryPoints[1472]);
				}
			}

			// Token: 0x06002A94 RID: 10900 RVA: 0x00074494 File Offset: 0x00072694
			[CLSCompliant(false)]
			public unsafe static void PathTexGen(NvPathRendering texCoordSet, NvPathRendering genMode, int components, float* coeffs)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), texCoordSet, genMode, components, coeffs, GL.EntryPoints[1472]);
			}

			// Token: 0x06002A95 RID: 10901 RVA: 0x000744AC File Offset: 0x000726AC
			public static void PauseTransformFeedback()
			{
				calli(System.Void(), GL.EntryPoints[1474]);
			}

			// Token: 0x06002A96 RID: 10902 RVA: 0x000744C0 File Offset: 0x000726C0
			public static void PixelDataRange(NvPixelDataRange target, int length, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, length, pointer, GL.EntryPoints[1475]);
			}

			// Token: 0x06002A97 RID: 10903 RVA: 0x000744D8 File Offset: 0x000726D8
			[CLSCompliant(false)]
			public unsafe static void PixelDataRange<T2>(NvPixelDataRange target, int length, [In] [Out] T2[] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, length, ptr, GL.EntryPoints[1475]);
				}
			}

			// Token: 0x06002A98 RID: 10904 RVA: 0x00074510 File Offset: 0x00072710
			[CLSCompliant(false)]
			public unsafe static void PixelDataRange<T2>(NvPixelDataRange target, int length, [In] [Out] T2[,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, length, ptr, GL.EntryPoints[1475]);
				}
			}

			// Token: 0x06002A99 RID: 10905 RVA: 0x0007454C File Offset: 0x0007274C
			[CLSCompliant(false)]
			public unsafe static void PixelDataRange<T2>(NvPixelDataRange target, int length, [In] [Out] T2[,,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, length, ptr, GL.EntryPoints[1475]);
				}
			}

			// Token: 0x06002A9A RID: 10906 RVA: 0x00074588 File Offset: 0x00072788
			public unsafe static void PixelDataRange<T2>(NvPixelDataRange target, int length, [In] [Out] ref T2 pointer) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, length, ptr, GL.EntryPoints[1475]);
				}
			}

			// Token: 0x06002A9B RID: 10907 RVA: 0x000745AC File Offset: 0x000727AC
			[CLSCompliant(false)]
			public unsafe static bool PointAlongPath(int path, int startSegment, int numSegments, float distance, out float x, out float y, out float tangentX, out float tangentY)
			{
				fixed (float* ptr = &x)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = &y)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &tangentX)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = &tangentY)
							{
								return calli(System.Byte(System.UInt32,System.Int32,System.Int32,System.Single,System.Single*,System.Single*,System.Single*,System.Single*), path, startSegment, numSegments, distance, ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[1499]);
							}
						}
					}
				}
			}

			// Token: 0x06002A9C RID: 10908 RVA: 0x000745E4 File Offset: 0x000727E4
			[CLSCompliant(false)]
			public unsafe static bool PointAlongPath(int path, int startSegment, int numSegments, float distance, [Out] float* x, [Out] float* y, [Out] float* tangentX, [Out] float* tangentY)
			{
				return calli(System.Byte(System.UInt32,System.Int32,System.Int32,System.Single,System.Single*,System.Single*,System.Single*,System.Single*), path, startSegment, numSegments, distance, x, y, tangentX, tangentY, GL.EntryPoints[1499]);
			}

			// Token: 0x06002A9D RID: 10909 RVA: 0x00074610 File Offset: 0x00072810
			[CLSCompliant(false)]
			public unsafe static bool PointAlongPath(uint path, int startSegment, int numSegments, float distance, out float x, out float y, out float tangentX, out float tangentY)
			{
				fixed (float* ptr = &x)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = &y)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &tangentX)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = &tangentY)
							{
								return calli(System.Byte(System.UInt32,System.Int32,System.Int32,System.Single,System.Single*,System.Single*,System.Single*,System.Single*), path, startSegment, numSegments, distance, ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[1499]);
							}
						}
					}
				}
			}

			// Token: 0x06002A9E RID: 10910 RVA: 0x00074648 File Offset: 0x00072848
			[CLSCompliant(false)]
			public unsafe static bool PointAlongPath(uint path, int startSegment, int numSegments, float distance, [Out] float* x, [Out] float* y, [Out] float* tangentX, [Out] float* tangentY)
			{
				return calli(System.Byte(System.UInt32,System.Int32,System.Int32,System.Single,System.Single*,System.Single*,System.Single*,System.Single*), path, startSegment, numSegments, distance, x, y, tangentX, tangentY, GL.EntryPoints[1499]);
			}

			// Token: 0x06002A9F RID: 10911 RVA: 0x00074674 File Offset: 0x00072874
			public static void PointParameter(NvPointSprite pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[1509]);
			}

			// Token: 0x06002AA0 RID: 10912 RVA: 0x00074688 File Offset: 0x00072888
			[CLSCompliant(false)]
			public unsafe static void PointParameter(NvPointSprite pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[1511]);
				}
			}

			// Token: 0x06002AA1 RID: 10913 RVA: 0x000746BC File Offset: 0x000728BC
			[CLSCompliant(false)]
			public unsafe static void PointParameter(NvPointSprite pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, @params, GL.EntryPoints[1511]);
			}

			// Token: 0x06002AA2 RID: 10914 RVA: 0x000746D0 File Offset: 0x000728D0
			[CLSCompliant(false)]
			public static void PresentFrameDualFill(int video_slot, long minPresentTime, int beginPresentTimeId, int presentDurationId, NvPresentVideo type, NvPresentVideo target0, int fill0, NvPresentVideo target1, int fill1, NvPresentVideo target2, int fill2, NvPresentVideo target3, int fill3)
			{
				calli(System.Void(System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.Int32,System.UInt32,System.Int32,System.UInt32,System.Int32,System.UInt32), video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3, GL.EntryPoints[1530]);
			}

			// Token: 0x06002AA3 RID: 10915 RVA: 0x00074704 File Offset: 0x00072904
			[CLSCompliant(false)]
			public static void PresentFrameDualFill(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, NvPresentVideo type, NvPresentVideo target0, uint fill0, NvPresentVideo target1, uint fill1, NvPresentVideo target2, uint fill2, NvPresentVideo target3, uint fill3)
			{
				calli(System.Void(System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.Int32,System.UInt32,System.Int32,System.UInt32,System.Int32,System.UInt32), video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3, GL.EntryPoints[1530]);
			}

			// Token: 0x06002AA4 RID: 10916 RVA: 0x00074738 File Offset: 0x00072938
			[CLSCompliant(false)]
			public static void PresentFrameKeye(int video_slot, long minPresentTime, int beginPresentTimeId, int presentDurationId, NvPresentVideo type, NvPresentVideo target0, int fill0, int key0, NvPresentVideo target1, int fill1, int key1)
			{
				calli(System.Void(System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.UInt32,System.UInt32), video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1, GL.EntryPoints[1531]);
			}

			// Token: 0x06002AA5 RID: 10917 RVA: 0x00074768 File Offset: 0x00072968
			[CLSCompliant(false)]
			public static void PresentFrameKeye(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, NvPresentVideo type, NvPresentVideo target0, uint fill0, uint key0, NvPresentVideo target1, uint fill1, uint key1)
			{
				calli(System.Void(System.UInt32,System.UInt64,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.UInt32,System.UInt32), video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1, GL.EntryPoints[1531]);
			}

			// Token: 0x06002AA6 RID: 10918 RVA: 0x00074798 File Offset: 0x00072998
			[CLSCompliant(false)]
			public static void PrimitiveRestartIndex(int index)
			{
				calli(System.Void(System.UInt32), index, GL.EntryPoints[1533]);
			}

			// Token: 0x06002AA7 RID: 10919 RVA: 0x000747AC File Offset: 0x000729AC
			[CLSCompliant(false)]
			public static void PrimitiveRestartIndex(uint index)
			{
				calli(System.Void(System.UInt32), index, GL.EntryPoints[1533]);
			}

			// Token: 0x06002AA8 RID: 10920 RVA: 0x000747C0 File Offset: 0x000729C0
			public static void PrimitiveRestart()
			{
				calli(System.Void(), GL.EntryPoints[1534]);
			}

			// Token: 0x06002AA9 RID: 10921 RVA: 0x000747D4 File Offset: 0x000729D4
			[CLSCompliant(false)]
			public unsafe static void ProgramBufferParameters(NvParameterBufferObject target, int bindingIndex, int wordIndex, int count, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Single*), target, bindingIndex, wordIndex, count, ptr, GL.EntryPoints[1539]);
				}
			}

			// Token: 0x06002AAA RID: 10922 RVA: 0x00074810 File Offset: 0x00072A10
			[CLSCompliant(false)]
			public unsafe static void ProgramBufferParameters(NvParameterBufferObject target, int bindingIndex, int wordIndex, int count, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Single*), target, bindingIndex, wordIndex, count, ptr, GL.EntryPoints[1539]);
				}
			}

			// Token: 0x06002AAB RID: 10923 RVA: 0x00074838 File Offset: 0x00072A38
			[CLSCompliant(false)]
			public unsafe static void ProgramBufferParameters(NvParameterBufferObject target, int bindingIndex, int wordIndex, int count, float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Single*), target, bindingIndex, wordIndex, count, @params, GL.EntryPoints[1539]);
			}

			// Token: 0x06002AAC RID: 10924 RVA: 0x00074850 File Offset: 0x00072A50
			[CLSCompliant(false)]
			public unsafe static void ProgramBufferParameters(NvParameterBufferObject target, uint bindingIndex, uint wordIndex, int count, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Single*), target, bindingIndex, wordIndex, count, ptr, GL.EntryPoints[1539]);
				}
			}

			// Token: 0x06002AAD RID: 10925 RVA: 0x0007488C File Offset: 0x00072A8C
			[CLSCompliant(false)]
			public unsafe static void ProgramBufferParameters(NvParameterBufferObject target, uint bindingIndex, uint wordIndex, int count, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Single*), target, bindingIndex, wordIndex, count, ptr, GL.EntryPoints[1539]);
				}
			}

			// Token: 0x06002AAE RID: 10926 RVA: 0x000748B4 File Offset: 0x00072AB4
			[CLSCompliant(false)]
			public unsafe static void ProgramBufferParameters(NvParameterBufferObject target, uint bindingIndex, uint wordIndex, int count, float* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Single*), target, bindingIndex, wordIndex, count, @params, GL.EntryPoints[1539]);
			}

			// Token: 0x06002AAF RID: 10927 RVA: 0x000748CC File Offset: 0x00072ACC
			[CLSCompliant(false)]
			public unsafe static void ProgramBufferParametersI(NvParameterBufferObject target, int bindingIndex, int wordIndex, int count, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32*), target, bindingIndex, wordIndex, count, ptr, GL.EntryPoints[1540]);
				}
			}

			// Token: 0x06002AB0 RID: 10928 RVA: 0x00074908 File Offset: 0x00072B08
			[CLSCompliant(false)]
			public unsafe static void ProgramBufferParametersI(NvParameterBufferObject target, int bindingIndex, int wordIndex, int count, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32*), target, bindingIndex, wordIndex, count, ptr, GL.EntryPoints[1540]);
				}
			}

			// Token: 0x06002AB1 RID: 10929 RVA: 0x00074930 File Offset: 0x00072B30
			[CLSCompliant(false)]
			public unsafe static void ProgramBufferParametersI(NvParameterBufferObject target, int bindingIndex, int wordIndex, int count, int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32*), target, bindingIndex, wordIndex, count, @params, GL.EntryPoints[1540]);
			}

			// Token: 0x06002AB2 RID: 10930 RVA: 0x00074948 File Offset: 0x00072B48
			[CLSCompliant(false)]
			public unsafe static void ProgramBufferParametersI(NvParameterBufferObject target, uint bindingIndex, uint wordIndex, int count, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32*), target, bindingIndex, wordIndex, count, ptr, GL.EntryPoints[1540]);
				}
			}

			// Token: 0x06002AB3 RID: 10931 RVA: 0x00074984 File Offset: 0x00072B84
			[CLSCompliant(false)]
			public unsafe static void ProgramBufferParametersI(NvParameterBufferObject target, uint bindingIndex, uint wordIndex, int count, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32*), target, bindingIndex, wordIndex, count, ptr, GL.EntryPoints[1540]);
				}
			}

			// Token: 0x06002AB4 RID: 10932 RVA: 0x000749AC File Offset: 0x00072BAC
			[CLSCompliant(false)]
			public unsafe static void ProgramBufferParametersI(NvParameterBufferObject target, uint bindingIndex, uint wordIndex, int count, int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32*), target, bindingIndex, wordIndex, count, @params, GL.EntryPoints[1540]);
			}

			// Token: 0x06002AB5 RID: 10933 RVA: 0x000749C4 File Offset: 0x00072BC4
			[CLSCompliant(false)]
			public unsafe static void ProgramBufferParametersI(NvParameterBufferObject target, uint bindingIndex, uint wordIndex, int count, uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.UInt32*), target, bindingIndex, wordIndex, count, ptr, GL.EntryPoints[1541]);
				}
			}

			// Token: 0x06002AB6 RID: 10934 RVA: 0x00074A00 File Offset: 0x00072C00
			[CLSCompliant(false)]
			public unsafe static void ProgramBufferParametersI(NvParameterBufferObject target, uint bindingIndex, uint wordIndex, int count, ref uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.UInt32*), target, bindingIndex, wordIndex, count, ptr, GL.EntryPoints[1541]);
				}
			}

			// Token: 0x06002AB7 RID: 10935 RVA: 0x00074A28 File Offset: 0x00072C28
			[CLSCompliant(false)]
			public unsafe static void ProgramBufferParametersI(NvParameterBufferObject target, uint bindingIndex, uint wordIndex, int count, uint* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.UInt32*), target, bindingIndex, wordIndex, count, @params, GL.EntryPoints[1541]);
			}

			// Token: 0x06002AB8 RID: 10936 RVA: 0x00074A40 File Offset: 0x00072C40
			[CLSCompliant(false)]
			public static void ProgramEnvParameterI4(NvGpuProgram4 target, int index, int x, int y, int z, int w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), target, index, x, y, z, w, GL.EntryPoints[1546]);
			}

			// Token: 0x06002AB9 RID: 10937 RVA: 0x00074A5C File Offset: 0x00072C5C
			[CLSCompliant(false)]
			public static void ProgramEnvParameterI4(NvGpuProgram4 target, uint index, int x, int y, int z, int w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), target, index, x, y, z, w, GL.EntryPoints[1546]);
			}

			// Token: 0x06002ABA RID: 10938 RVA: 0x00074A78 File Offset: 0x00072C78
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameterI4(NvGpuProgram4 target, int index, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[1547]);
				}
			}

			// Token: 0x06002ABB RID: 10939 RVA: 0x00074AB0 File Offset: 0x00072CB0
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameterI4(NvGpuProgram4 target, int index, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[1547]);
				}
			}

			// Token: 0x06002ABC RID: 10940 RVA: 0x00074AD4 File Offset: 0x00072CD4
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameterI4(NvGpuProgram4 target, int index, int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, @params, GL.EntryPoints[1547]);
			}

			// Token: 0x06002ABD RID: 10941 RVA: 0x00074AEC File Offset: 0x00072CEC
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameterI4(NvGpuProgram4 target, uint index, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[1547]);
				}
			}

			// Token: 0x06002ABE RID: 10942 RVA: 0x00074B24 File Offset: 0x00072D24
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameterI4(NvGpuProgram4 target, uint index, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[1547]);
				}
			}

			// Token: 0x06002ABF RID: 10943 RVA: 0x00074B48 File Offset: 0x00072D48
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameterI4(NvGpuProgram4 target, uint index, int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, @params, GL.EntryPoints[1547]);
			}

			// Token: 0x06002AC0 RID: 10944 RVA: 0x00074B60 File Offset: 0x00072D60
			[CLSCompliant(false)]
			public static void ProgramEnvParameterI4(NvGpuProgram4 target, uint index, uint x, uint y, uint z, uint w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), target, index, x, y, z, w, GL.EntryPoints[1548]);
			}

			// Token: 0x06002AC1 RID: 10945 RVA: 0x00074B7C File Offset: 0x00072D7C
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameterI4(NvGpuProgram4 target, uint index, uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, ptr, GL.EntryPoints[1549]);
				}
			}

			// Token: 0x06002AC2 RID: 10946 RVA: 0x00074BB4 File Offset: 0x00072DB4
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameterI4(NvGpuProgram4 target, uint index, ref uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, ptr, GL.EntryPoints[1549]);
				}
			}

			// Token: 0x06002AC3 RID: 10947 RVA: 0x00074BD8 File Offset: 0x00072DD8
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParameterI4(NvGpuProgram4 target, uint index, uint* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, @params, GL.EntryPoints[1549]);
			}

			// Token: 0x06002AC4 RID: 10948 RVA: 0x00074BF0 File Offset: 0x00072DF0
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParametersI4(NvGpuProgram4 target, int index, int count, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, count, ptr, GL.EntryPoints[1551]);
				}
			}

			// Token: 0x06002AC5 RID: 10949 RVA: 0x00074C28 File Offset: 0x00072E28
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParametersI4(NvGpuProgram4 target, int index, int count, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, count, ptr, GL.EntryPoints[1551]);
				}
			}

			// Token: 0x06002AC6 RID: 10950 RVA: 0x00074C4C File Offset: 0x00072E4C
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParametersI4(NvGpuProgram4 target, int index, int count, int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, count, @params, GL.EntryPoints[1551]);
			}

			// Token: 0x06002AC7 RID: 10951 RVA: 0x00074C64 File Offset: 0x00072E64
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParametersI4(NvGpuProgram4 target, uint index, int count, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, count, ptr, GL.EntryPoints[1551]);
				}
			}

			// Token: 0x06002AC8 RID: 10952 RVA: 0x00074C9C File Offset: 0x00072E9C
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParametersI4(NvGpuProgram4 target, uint index, int count, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, count, ptr, GL.EntryPoints[1551]);
				}
			}

			// Token: 0x06002AC9 RID: 10953 RVA: 0x00074CC0 File Offset: 0x00072EC0
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParametersI4(NvGpuProgram4 target, uint index, int count, int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, count, @params, GL.EntryPoints[1551]);
			}

			// Token: 0x06002ACA RID: 10954 RVA: 0x00074CD8 File Offset: 0x00072ED8
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParametersI4(NvGpuProgram4 target, uint index, int count, uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, index, count, ptr, GL.EntryPoints[1552]);
				}
			}

			// Token: 0x06002ACB RID: 10955 RVA: 0x00074D10 File Offset: 0x00072F10
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParametersI4(NvGpuProgram4 target, uint index, int count, ref uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, index, count, ptr, GL.EntryPoints[1552]);
				}
			}

			// Token: 0x06002ACC RID: 10956 RVA: 0x00074D34 File Offset: 0x00072F34
			[CLSCompliant(false)]
			public unsafe static void ProgramEnvParametersI4(NvGpuProgram4 target, uint index, int count, uint* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, index, count, @params, GL.EntryPoints[1552]);
			}

			// Token: 0x06002ACD RID: 10957 RVA: 0x00074D4C File Offset: 0x00072F4C
			[CLSCompliant(false)]
			public static void ProgramLocalParameterI4(NvGpuProgram4 target, int index, int x, int y, int z, int w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), target, index, x, y, z, w, GL.EntryPoints[1557]);
			}

			// Token: 0x06002ACE RID: 10958 RVA: 0x00074D68 File Offset: 0x00072F68
			[CLSCompliant(false)]
			public static void ProgramLocalParameterI4(NvGpuProgram4 target, uint index, int x, int y, int z, int w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), target, index, x, y, z, w, GL.EntryPoints[1557]);
			}

			// Token: 0x06002ACF RID: 10959 RVA: 0x00074D84 File Offset: 0x00072F84
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameterI4(NvGpuProgram4 target, int index, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[1558]);
				}
			}

			// Token: 0x06002AD0 RID: 10960 RVA: 0x00074DBC File Offset: 0x00072FBC
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameterI4(NvGpuProgram4 target, int index, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[1558]);
				}
			}

			// Token: 0x06002AD1 RID: 10961 RVA: 0x00074DE0 File Offset: 0x00072FE0
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameterI4(NvGpuProgram4 target, int index, int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, @params, GL.EntryPoints[1558]);
			}

			// Token: 0x06002AD2 RID: 10962 RVA: 0x00074DF8 File Offset: 0x00072FF8
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameterI4(NvGpuProgram4 target, uint index, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[1558]);
				}
			}

			// Token: 0x06002AD3 RID: 10963 RVA: 0x00074E30 File Offset: 0x00073030
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameterI4(NvGpuProgram4 target, uint index, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[1558]);
				}
			}

			// Token: 0x06002AD4 RID: 10964 RVA: 0x00074E54 File Offset: 0x00073054
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameterI4(NvGpuProgram4 target, uint index, int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, @params, GL.EntryPoints[1558]);
			}

			// Token: 0x06002AD5 RID: 10965 RVA: 0x00074E6C File Offset: 0x0007306C
			[CLSCompliant(false)]
			public static void ProgramLocalParameterI4(NvGpuProgram4 target, uint index, uint x, uint y, uint z, uint w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), target, index, x, y, z, w, GL.EntryPoints[1559]);
			}

			// Token: 0x06002AD6 RID: 10966 RVA: 0x00074E88 File Offset: 0x00073088
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameterI4(NvGpuProgram4 target, uint index, uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, ptr, GL.EntryPoints[1560]);
				}
			}

			// Token: 0x06002AD7 RID: 10967 RVA: 0x00074EC0 File Offset: 0x000730C0
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameterI4(NvGpuProgram4 target, uint index, ref uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, ptr, GL.EntryPoints[1560]);
				}
			}

			// Token: 0x06002AD8 RID: 10968 RVA: 0x00074EE4 File Offset: 0x000730E4
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParameterI4(NvGpuProgram4 target, uint index, uint* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32*), target, index, @params, GL.EntryPoints[1560]);
			}

			// Token: 0x06002AD9 RID: 10969 RVA: 0x00074EFC File Offset: 0x000730FC
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParametersI4(NvGpuProgram4 target, int index, int count, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, count, ptr, GL.EntryPoints[1562]);
				}
			}

			// Token: 0x06002ADA RID: 10970 RVA: 0x00074F34 File Offset: 0x00073134
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParametersI4(NvGpuProgram4 target, int index, int count, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, count, ptr, GL.EntryPoints[1562]);
				}
			}

			// Token: 0x06002ADB RID: 10971 RVA: 0x00074F58 File Offset: 0x00073158
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParametersI4(NvGpuProgram4 target, int index, int count, int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, count, @params, GL.EntryPoints[1562]);
			}

			// Token: 0x06002ADC RID: 10972 RVA: 0x00074F70 File Offset: 0x00073170
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParametersI4(NvGpuProgram4 target, uint index, int count, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, count, ptr, GL.EntryPoints[1562]);
				}
			}

			// Token: 0x06002ADD RID: 10973 RVA: 0x00074FA8 File Offset: 0x000731A8
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParametersI4(NvGpuProgram4 target, uint index, int count, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, count, ptr, GL.EntryPoints[1562]);
				}
			}

			// Token: 0x06002ADE RID: 10974 RVA: 0x00074FCC File Offset: 0x000731CC
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParametersI4(NvGpuProgram4 target, uint index, int count, int* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*), target, index, count, @params, GL.EntryPoints[1562]);
			}

			// Token: 0x06002ADF RID: 10975 RVA: 0x00074FE4 File Offset: 0x000731E4
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParametersI4(NvGpuProgram4 target, uint index, int count, uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, index, count, ptr, GL.EntryPoints[1563]);
				}
			}

			// Token: 0x06002AE0 RID: 10976 RVA: 0x0007501C File Offset: 0x0007321C
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParametersI4(NvGpuProgram4 target, uint index, int count, ref uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, index, count, ptr, GL.EntryPoints[1563]);
				}
			}

			// Token: 0x06002AE1 RID: 10977 RVA: 0x00075040 File Offset: 0x00073240
			[CLSCompliant(false)]
			public unsafe static void ProgramLocalParametersI4(NvGpuProgram4 target, uint index, int count, uint* @params)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.UInt32*), target, index, count, @params, GL.EntryPoints[1563]);
			}

			// Token: 0x06002AE2 RID: 10978 RVA: 0x00075058 File Offset: 0x00073258
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(int id, int len, ref byte name, double x, double y, double z, double w)
			{
				fixed (byte* ptr = &name)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double,System.Double,System.Double,System.Double), id, len, ptr, x, y, z, w, GL.EntryPoints[1564]);
				}
			}

			// Token: 0x06002AE3 RID: 10979 RVA: 0x00075084 File Offset: 0x00073284
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(int id, int len, byte* name, double x, double y, double z, double w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double,System.Double,System.Double,System.Double), id, len, name, x, y, z, w, GL.EntryPoints[1564]);
			}

			// Token: 0x06002AE4 RID: 10980 RVA: 0x000750AC File Offset: 0x000732AC
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(uint id, int len, ref byte name, double x, double y, double z, double w)
			{
				fixed (byte* ptr = &name)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double,System.Double,System.Double,System.Double), id, len, ptr, x, y, z, w, GL.EntryPoints[1564]);
				}
			}

			// Token: 0x06002AE5 RID: 10981 RVA: 0x000750D8 File Offset: 0x000732D8
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(uint id, int len, byte* name, double x, double y, double z, double w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double,System.Double,System.Double,System.Double), id, len, name, x, y, z, w, GL.EntryPoints[1564]);
			}

			// Token: 0x06002AE6 RID: 10982 RVA: 0x00075100 File Offset: 0x00073300
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(int id, int len, ref byte name, double[] v)
			{
				fixed (byte* ptr = &name)
				{
					byte* ptr2 = ptr;
					fixed (double* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double*), id, len, ptr2, ptr3, GL.EntryPoints[1565]);
					}
				}
			}

			// Token: 0x06002AE7 RID: 10983 RVA: 0x0007513C File Offset: 0x0007333C
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(int id, int len, ref byte name, ref double v)
			{
				fixed (byte* ptr = &name)
				{
					byte* ptr2 = ptr;
					fixed (double* ptr3 = &v)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double*), id, len, ptr2, ptr3, GL.EntryPoints[1565]);
					}
				}
			}

			// Token: 0x06002AE8 RID: 10984 RVA: 0x00075164 File Offset: 0x00073364
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(int id, int len, byte* name, double* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double*), id, len, name, v, GL.EntryPoints[1565]);
			}

			// Token: 0x06002AE9 RID: 10985 RVA: 0x0007517C File Offset: 0x0007337C
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(uint id, int len, ref byte name, double[] v)
			{
				fixed (byte* ptr = &name)
				{
					byte* ptr2 = ptr;
					fixed (double* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double*), id, len, ptr2, ptr3, GL.EntryPoints[1565]);
					}
				}
			}

			// Token: 0x06002AEA RID: 10986 RVA: 0x000751B8 File Offset: 0x000733B8
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(uint id, int len, ref byte name, ref double v)
			{
				fixed (byte* ptr = &name)
				{
					byte* ptr2 = ptr;
					fixed (double* ptr3 = &v)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double*), id, len, ptr2, ptr3, GL.EntryPoints[1565]);
					}
				}
			}

			// Token: 0x06002AEB RID: 10987 RVA: 0x000751E0 File Offset: 0x000733E0
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(uint id, int len, byte* name, double* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double*), id, len, name, v, GL.EntryPoints[1565]);
			}

			// Token: 0x06002AEC RID: 10988 RVA: 0x000751F8 File Offset: 0x000733F8
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(int id, int len, ref byte name, float x, float y, float z, float w)
			{
				fixed (byte* ptr = &name)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single,System.Single,System.Single,System.Single), id, len, ptr, x, y, z, w, GL.EntryPoints[1566]);
				}
			}

			// Token: 0x06002AED RID: 10989 RVA: 0x00075224 File Offset: 0x00073424
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(int id, int len, byte* name, float x, float y, float z, float w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single,System.Single,System.Single,System.Single), id, len, name, x, y, z, w, GL.EntryPoints[1566]);
			}

			// Token: 0x06002AEE RID: 10990 RVA: 0x0007524C File Offset: 0x0007344C
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(uint id, int len, ref byte name, float x, float y, float z, float w)
			{
				fixed (byte* ptr = &name)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single,System.Single,System.Single,System.Single), id, len, ptr, x, y, z, w, GL.EntryPoints[1566]);
				}
			}

			// Token: 0x06002AEF RID: 10991 RVA: 0x00075278 File Offset: 0x00073478
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(uint id, int len, byte* name, float x, float y, float z, float w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single,System.Single,System.Single,System.Single), id, len, name, x, y, z, w, GL.EntryPoints[1566]);
			}

			// Token: 0x06002AF0 RID: 10992 RVA: 0x000752A0 File Offset: 0x000734A0
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(int id, int len, ref byte name, float[] v)
			{
				fixed (byte* ptr = &name)
				{
					byte* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single*), id, len, ptr2, ptr3, GL.EntryPoints[1567]);
					}
				}
			}

			// Token: 0x06002AF1 RID: 10993 RVA: 0x000752DC File Offset: 0x000734DC
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(int id, int len, ref byte name, ref float v)
			{
				fixed (byte* ptr = &name)
				{
					byte* ptr2 = ptr;
					fixed (float* ptr3 = &v)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single*), id, len, ptr2, ptr3, GL.EntryPoints[1567]);
					}
				}
			}

			// Token: 0x06002AF2 RID: 10994 RVA: 0x00075304 File Offset: 0x00073504
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(int id, int len, byte* name, float* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single*), id, len, name, v, GL.EntryPoints[1567]);
			}

			// Token: 0x06002AF3 RID: 10995 RVA: 0x0007531C File Offset: 0x0007351C
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(uint id, int len, ref byte name, float[] v)
			{
				fixed (byte* ptr = &name)
				{
					byte* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single*), id, len, ptr2, ptr3, GL.EntryPoints[1567]);
					}
				}
			}

			// Token: 0x06002AF4 RID: 10996 RVA: 0x00075358 File Offset: 0x00073558
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(uint id, int len, ref byte name, ref float v)
			{
				fixed (byte* ptr = &name)
				{
					byte* ptr2 = ptr;
					fixed (float* ptr3 = &v)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single*), id, len, ptr2, ptr3, GL.EntryPoints[1567]);
					}
				}
			}

			// Token: 0x06002AF5 RID: 10997 RVA: 0x00075380 File Offset: 0x00073580
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(uint id, int len, byte* name, float* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single*), id, len, name, v, GL.EntryPoints[1567]);
			}

			// Token: 0x06002AF6 RID: 10998 RVA: 0x00075398 File Offset: 0x00073598
			[CLSCompliant(false)]
			public static void ProgramParameter4(AssemblyProgramTargetArb target, int index, double x, double y, double z, double w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double,System.Double,System.Double,System.Double), target, index, x, y, z, w, GL.EntryPoints[1568]);
			}

			// Token: 0x06002AF7 RID: 10999 RVA: 0x000753B4 File Offset: 0x000735B4
			[CLSCompliant(false)]
			public static void ProgramParameter4(AssemblyProgramTargetArb target, uint index, double x, double y, double z, double w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double,System.Double,System.Double,System.Double), target, index, x, y, z, w, GL.EntryPoints[1568]);
			}

			// Token: 0x06002AF8 RID: 11000 RVA: 0x000753D0 File Offset: 0x000735D0
			[CLSCompliant(false)]
			public unsafe static void ProgramParameter4(AssemblyProgramTargetArb target, int index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[1569]);
				}
			}

			// Token: 0x06002AF9 RID: 11001 RVA: 0x00075408 File Offset: 0x00073608
			[CLSCompliant(false)]
			public unsafe static void ProgramParameter4(AssemblyProgramTargetArb target, int index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[1569]);
				}
			}

			// Token: 0x06002AFA RID: 11002 RVA: 0x0007542C File Offset: 0x0007362C
			[CLSCompliant(false)]
			public unsafe static void ProgramParameter4(AssemblyProgramTargetArb target, int index, double* v)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, v, GL.EntryPoints[1569]);
			}

			// Token: 0x06002AFB RID: 11003 RVA: 0x00075444 File Offset: 0x00073644
			[CLSCompliant(false)]
			public unsafe static void ProgramParameter4(AssemblyProgramTargetArb target, uint index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[1569]);
				}
			}

			// Token: 0x06002AFC RID: 11004 RVA: 0x0007547C File Offset: 0x0007367C
			[CLSCompliant(false)]
			public unsafe static void ProgramParameter4(AssemblyProgramTargetArb target, uint index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, ptr, GL.EntryPoints[1569]);
				}
			}

			// Token: 0x06002AFD RID: 11005 RVA: 0x000754A0 File Offset: 0x000736A0
			[CLSCompliant(false)]
			public unsafe static void ProgramParameter4(AssemblyProgramTargetArb target, uint index, double* v)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Double*), target, index, v, GL.EntryPoints[1569]);
			}

			// Token: 0x06002AFE RID: 11006 RVA: 0x000754B8 File Offset: 0x000736B8
			[CLSCompliant(false)]
			public static void ProgramParameter4(AssemblyProgramTargetArb target, int index, float x, float y, float z, float w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single,System.Single,System.Single,System.Single), target, index, x, y, z, w, GL.EntryPoints[1570]);
			}

			// Token: 0x06002AFF RID: 11007 RVA: 0x000754D4 File Offset: 0x000736D4
			[CLSCompliant(false)]
			public static void ProgramParameter4(AssemblyProgramTargetArb target, uint index, float x, float y, float z, float w)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single,System.Single,System.Single,System.Single), target, index, x, y, z, w, GL.EntryPoints[1570]);
			}

			// Token: 0x06002B00 RID: 11008 RVA: 0x000754F0 File Offset: 0x000736F0
			[CLSCompliant(false)]
			public unsafe static void ProgramParameter4(AssemblyProgramTargetArb target, int index, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[1571]);
				}
			}

			// Token: 0x06002B01 RID: 11009 RVA: 0x00075528 File Offset: 0x00073728
			[CLSCompliant(false)]
			public unsafe static void ProgramParameter4(AssemblyProgramTargetArb target, int index, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[1571]);
				}
			}

			// Token: 0x06002B02 RID: 11010 RVA: 0x0007554C File Offset: 0x0007374C
			[CLSCompliant(false)]
			public unsafe static void ProgramParameter4(AssemblyProgramTargetArb target, int index, float* v)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, v, GL.EntryPoints[1571]);
			}

			// Token: 0x06002B03 RID: 11011 RVA: 0x00075564 File Offset: 0x00073764
			[CLSCompliant(false)]
			public unsafe static void ProgramParameter4(AssemblyProgramTargetArb target, uint index, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[1571]);
				}
			}

			// Token: 0x06002B04 RID: 11012 RVA: 0x0007559C File Offset: 0x0007379C
			[CLSCompliant(false)]
			public unsafe static void ProgramParameter4(AssemblyProgramTargetArb target, uint index, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, ptr, GL.EntryPoints[1571]);
				}
			}

			// Token: 0x06002B05 RID: 11013 RVA: 0x000755C0 File Offset: 0x000737C0
			[CLSCompliant(false)]
			public unsafe static void ProgramParameter4(AssemblyProgramTargetArb target, uint index, float* v)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Single*), target, index, v, GL.EntryPoints[1571]);
			}

			// Token: 0x06002B06 RID: 11014 RVA: 0x000755D8 File Offset: 0x000737D8
			[CLSCompliant(false)]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, int index, int count, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Double*), target, index, count, ptr, GL.EntryPoints[1575]);
				}
			}

			// Token: 0x06002B07 RID: 11015 RVA: 0x00075610 File Offset: 0x00073810
			[CLSCompliant(false)]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, int index, int count, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Double*), target, index, count, ptr, GL.EntryPoints[1575]);
				}
			}

			// Token: 0x06002B08 RID: 11016 RVA: 0x00075634 File Offset: 0x00073834
			[CLSCompliant(false)]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, int index, int count, double* v)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Double*), target, index, count, v, GL.EntryPoints[1575]);
			}

			// Token: 0x06002B09 RID: 11017 RVA: 0x0007564C File Offset: 0x0007384C
			[CLSCompliant(false)]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, uint index, int count, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Double*), target, index, count, ptr, GL.EntryPoints[1575]);
				}
			}

			// Token: 0x06002B0A RID: 11018 RVA: 0x00075684 File Offset: 0x00073884
			[CLSCompliant(false)]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, uint index, int count, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Double*), target, index, count, ptr, GL.EntryPoints[1575]);
				}
			}

			// Token: 0x06002B0B RID: 11019 RVA: 0x000756A8 File Offset: 0x000738A8
			[CLSCompliant(false)]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, uint index, int count, double* v)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Double*), target, index, count, v, GL.EntryPoints[1575]);
			}

			// Token: 0x06002B0C RID: 11020 RVA: 0x000756C0 File Offset: 0x000738C0
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, uint index, uint count, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Double*), target, index, count, ptr, GL.EntryPoints[1575]);
				}
			}

			// Token: 0x06002B0D RID: 11021 RVA: 0x000756F8 File Offset: 0x000738F8
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, uint index, uint count, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Double*), target, index, count, ptr, GL.EntryPoints[1575]);
				}
			}

			// Token: 0x06002B0E RID: 11022 RVA: 0x0007571C File Offset: 0x0007391C
			[CLSCompliant(false)]
			[Obsolete("Use int overload instead")]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, uint index, uint count, double* v)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Double*), target, index, count, v, GL.EntryPoints[1575]);
			}

			// Token: 0x06002B0F RID: 11023 RVA: 0x00075734 File Offset: 0x00073934
			[CLSCompliant(false)]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, int index, int count, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, ptr, GL.EntryPoints[1576]);
				}
			}

			// Token: 0x06002B10 RID: 11024 RVA: 0x0007576C File Offset: 0x0007396C
			[CLSCompliant(false)]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, int index, int count, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, ptr, GL.EntryPoints[1576]);
				}
			}

			// Token: 0x06002B11 RID: 11025 RVA: 0x00075790 File Offset: 0x00073990
			[CLSCompliant(false)]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, int index, int count, float* v)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, v, GL.EntryPoints[1576]);
			}

			// Token: 0x06002B12 RID: 11026 RVA: 0x000757A8 File Offset: 0x000739A8
			[CLSCompliant(false)]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, uint index, int count, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, ptr, GL.EntryPoints[1576]);
				}
			}

			// Token: 0x06002B13 RID: 11027 RVA: 0x000757E0 File Offset: 0x000739E0
			[CLSCompliant(false)]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, uint index, int count, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, ptr, GL.EntryPoints[1576]);
				}
			}

			// Token: 0x06002B14 RID: 11028 RVA: 0x00075804 File Offset: 0x00073A04
			[CLSCompliant(false)]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, uint index, int count, float* v)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, v, GL.EntryPoints[1576]);
			}

			// Token: 0x06002B15 RID: 11029 RVA: 0x0007581C File Offset: 0x00073A1C
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, uint index, uint count, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, ptr, GL.EntryPoints[1576]);
				}
			}

			// Token: 0x06002B16 RID: 11030 RVA: 0x00075854 File Offset: 0x00073A54
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, uint index, uint count, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, ptr, GL.EntryPoints[1576]);
				}
			}

			// Token: 0x06002B17 RID: 11031 RVA: 0x00075878 File Offset: 0x00073A78
			[Obsolete("Use int overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ProgramParameters4(AssemblyProgramTargetArb target, uint index, uint count, float* v)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Single*), target, index, count, v, GL.EntryPoints[1576]);
			}

			// Token: 0x06002B18 RID: 11032 RVA: 0x00075890 File Offset: 0x00073A90
			[CLSCompliant(false)]
			public unsafe static void ProgramSubroutineParameters(NvGpuProgram5 target, int count, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, count, ptr, GL.EntryPoints[1578]);
				}
			}

			// Token: 0x06002B19 RID: 11033 RVA: 0x000758C8 File Offset: 0x00073AC8
			[CLSCompliant(false)]
			public unsafe static void ProgramSubroutineParameters(NvGpuProgram5 target, int count, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, count, ptr, GL.EntryPoints[1578]);
				}
			}

			// Token: 0x06002B1A RID: 11034 RVA: 0x000758EC File Offset: 0x00073AEC
			[CLSCompliant(false)]
			public unsafe static void ProgramSubroutineParameters(NvGpuProgram5 target, int count, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, count, @params, GL.EntryPoints[1578]);
			}

			// Token: 0x06002B1B RID: 11035 RVA: 0x00075904 File Offset: 0x00073B04
			[CLSCompliant(false)]
			public unsafe static void ProgramSubroutineParameters(NvGpuProgram5 target, int count, uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, count, ptr, GL.EntryPoints[1578]);
				}
			}

			// Token: 0x06002B1C RID: 11036 RVA: 0x0007593C File Offset: 0x00073B3C
			[CLSCompliant(false)]
			public unsafe static void ProgramSubroutineParameters(NvGpuProgram5 target, int count, ref uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, count, ptr, GL.EntryPoints[1578]);
				}
			}

			// Token: 0x06002B1D RID: 11037 RVA: 0x00075960 File Offset: 0x00073B60
			[CLSCompliant(false)]
			public unsafe static void ProgramSubroutineParameters(NvGpuProgram5 target, int count, uint* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, count, @params, GL.EntryPoints[1578]);
			}

			// Token: 0x06002B1E RID: 11038 RVA: 0x00075978 File Offset: 0x00073B78
			[CLSCompliant(false)]
			public static void ProgramUniform1(int program, int location, long x)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64), program, location, x, GL.EntryPoints[1588]);
			}

			// Token: 0x06002B1F RID: 11039 RVA: 0x00075990 File Offset: 0x00073B90
			[CLSCompliant(false)]
			public static void ProgramUniform1(uint program, int location, long x)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64), program, location, x, GL.EntryPoints[1588]);
			}

			// Token: 0x06002B20 RID: 11040 RVA: 0x000759A8 File Offset: 0x00073BA8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, ptr, GL.EntryPoints[1589]);
				}
			}

			// Token: 0x06002B21 RID: 11041 RVA: 0x000759E0 File Offset: 0x00073BE0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, ptr, GL.EntryPoints[1589]);
				}
			}

			// Token: 0x06002B22 RID: 11042 RVA: 0x00075A04 File Offset: 0x00073C04
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, long* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, value, GL.EntryPoints[1589]);
			}

			// Token: 0x06002B23 RID: 11043 RVA: 0x00075A1C File Offset: 0x00073C1C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, ptr, GL.EntryPoints[1589]);
				}
			}

			// Token: 0x06002B24 RID: 11044 RVA: 0x00075A54 File Offset: 0x00073C54
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, ptr, GL.EntryPoints[1589]);
				}
			}

			// Token: 0x06002B25 RID: 11045 RVA: 0x00075A78 File Offset: 0x00073C78
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, long* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, value, GL.EntryPoints[1589]);
			}

			// Token: 0x06002B26 RID: 11046 RVA: 0x00075A90 File Offset: 0x00073C90
			[CLSCompliant(false)]
			public static void ProgramUniform1(uint program, int location, ulong x)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64), program, location, x, GL.EntryPoints[1594]);
			}

			// Token: 0x06002B27 RID: 11047 RVA: 0x00075AA8 File Offset: 0x00073CA8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, ulong[] value)
			{
				fixed (ulong* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1595]);
				}
			}

			// Token: 0x06002B28 RID: 11048 RVA: 0x00075AE0 File Offset: 0x00073CE0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, ref ulong value)
			{
				fixed (ulong* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1595]);
				}
			}

			// Token: 0x06002B29 RID: 11049 RVA: 0x00075B04 File Offset: 0x00073D04
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, ulong* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, value, GL.EntryPoints[1595]);
			}

			// Token: 0x06002B2A RID: 11050 RVA: 0x00075B1C File Offset: 0x00073D1C
			[CLSCompliant(false)]
			public static void ProgramUniform2(int program, int location, long x, long y)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64,System.Int64), program, location, x, y, GL.EntryPoints[1608]);
			}

			// Token: 0x06002B2B RID: 11051 RVA: 0x00075B34 File Offset: 0x00073D34
			[CLSCompliant(false)]
			public static void ProgramUniform2(uint program, int location, long x, long y)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64,System.Int64), program, location, x, y, GL.EntryPoints[1608]);
			}

			// Token: 0x06002B2C RID: 11052 RVA: 0x00075B4C File Offset: 0x00073D4C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(int program, int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, ptr, GL.EntryPoints[1609]);
				}
			}

			// Token: 0x06002B2D RID: 11053 RVA: 0x00075B84 File Offset: 0x00073D84
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(int program, int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, ptr, GL.EntryPoints[1609]);
				}
			}

			// Token: 0x06002B2E RID: 11054 RVA: 0x00075BA8 File Offset: 0x00073DA8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(int program, int location, int count, long* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, value, GL.EntryPoints[1609]);
			}

			// Token: 0x06002B2F RID: 11055 RVA: 0x00075BC0 File Offset: 0x00073DC0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, ptr, GL.EntryPoints[1609]);
				}
			}

			// Token: 0x06002B30 RID: 11056 RVA: 0x00075BF8 File Offset: 0x00073DF8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, ptr, GL.EntryPoints[1609]);
				}
			}

			// Token: 0x06002B31 RID: 11057 RVA: 0x00075C1C File Offset: 0x00073E1C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, long* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, value, GL.EntryPoints[1609]);
			}

			// Token: 0x06002B32 RID: 11058 RVA: 0x00075C34 File Offset: 0x00073E34
			[CLSCompliant(false)]
			public static void ProgramUniform2(uint program, int location, ulong x, ulong y)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64,System.UInt64), program, location, x, y, GL.EntryPoints[1614]);
			}

			// Token: 0x06002B33 RID: 11059 RVA: 0x00075C4C File Offset: 0x00073E4C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, ulong[] value)
			{
				fixed (ulong* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1615]);
				}
			}

			// Token: 0x06002B34 RID: 11060 RVA: 0x00075C84 File Offset: 0x00073E84
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, ref ulong value)
			{
				fixed (ulong* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1615]);
				}
			}

			// Token: 0x06002B35 RID: 11061 RVA: 0x00075CA8 File Offset: 0x00073EA8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, ulong* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, value, GL.EntryPoints[1615]);
			}

			// Token: 0x06002B36 RID: 11062 RVA: 0x00075CC0 File Offset: 0x00073EC0
			[CLSCompliant(false)]
			public static void ProgramUniform3(int program, int location, long x, long y, long z)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64,System.Int64,System.Int64), program, location, x, y, z, GL.EntryPoints[1628]);
			}

			// Token: 0x06002B37 RID: 11063 RVA: 0x00075CD8 File Offset: 0x00073ED8
			[CLSCompliant(false)]
			public static void ProgramUniform3(uint program, int location, long x, long y, long z)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64,System.Int64,System.Int64), program, location, x, y, z, GL.EntryPoints[1628]);
			}

			// Token: 0x06002B38 RID: 11064 RVA: 0x00075CF0 File Offset: 0x00073EF0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, ptr, GL.EntryPoints[1629]);
				}
			}

			// Token: 0x06002B39 RID: 11065 RVA: 0x00075D28 File Offset: 0x00073F28
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, ptr, GL.EntryPoints[1629]);
				}
			}

			// Token: 0x06002B3A RID: 11066 RVA: 0x00075D4C File Offset: 0x00073F4C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, long* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, value, GL.EntryPoints[1629]);
			}

			// Token: 0x06002B3B RID: 11067 RVA: 0x00075D64 File Offset: 0x00073F64
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, ptr, GL.EntryPoints[1629]);
				}
			}

			// Token: 0x06002B3C RID: 11068 RVA: 0x00075D9C File Offset: 0x00073F9C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, ptr, GL.EntryPoints[1629]);
				}
			}

			// Token: 0x06002B3D RID: 11069 RVA: 0x00075DC0 File Offset: 0x00073FC0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, long* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, value, GL.EntryPoints[1629]);
			}

			// Token: 0x06002B3E RID: 11070 RVA: 0x00075DD8 File Offset: 0x00073FD8
			[CLSCompliant(false)]
			public static void ProgramUniform3(uint program, int location, ulong x, ulong y, ulong z)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64,System.UInt64,System.UInt64), program, location, x, y, z, GL.EntryPoints[1634]);
			}

			// Token: 0x06002B3F RID: 11071 RVA: 0x00075DF0 File Offset: 0x00073FF0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, ulong[] value)
			{
				fixed (ulong* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1635]);
				}
			}

			// Token: 0x06002B40 RID: 11072 RVA: 0x00075E28 File Offset: 0x00074028
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, ref ulong value)
			{
				fixed (ulong* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1635]);
				}
			}

			// Token: 0x06002B41 RID: 11073 RVA: 0x00075E4C File Offset: 0x0007404C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, ulong* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, value, GL.EntryPoints[1635]);
			}

			// Token: 0x06002B42 RID: 11074 RVA: 0x00075E64 File Offset: 0x00074064
			[CLSCompliant(false)]
			public static void ProgramUniform4(int program, int location, long x, long y, long z, long w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64), program, location, x, y, z, w, GL.EntryPoints[1648]);
			}

			// Token: 0x06002B43 RID: 11075 RVA: 0x00075E80 File Offset: 0x00074080
			[CLSCompliant(false)]
			public static void ProgramUniform4(uint program, int location, long x, long y, long z, long w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64), program, location, x, y, z, w, GL.EntryPoints[1648]);
			}

			// Token: 0x06002B44 RID: 11076 RVA: 0x00075E9C File Offset: 0x0007409C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, ptr, GL.EntryPoints[1649]);
				}
			}

			// Token: 0x06002B45 RID: 11077 RVA: 0x00075ED4 File Offset: 0x000740D4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, ptr, GL.EntryPoints[1649]);
				}
			}

			// Token: 0x06002B46 RID: 11078 RVA: 0x00075EF8 File Offset: 0x000740F8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, long* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, value, GL.EntryPoints[1649]);
			}

			// Token: 0x06002B47 RID: 11079 RVA: 0x00075F10 File Offset: 0x00074110
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, ptr, GL.EntryPoints[1649]);
				}
			}

			// Token: 0x06002B48 RID: 11080 RVA: 0x00075F48 File Offset: 0x00074148
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, ptr, GL.EntryPoints[1649]);
				}
			}

			// Token: 0x06002B49 RID: 11081 RVA: 0x00075F6C File Offset: 0x0007416C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, long* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int64*), program, location, count, value, GL.EntryPoints[1649]);
			}

			// Token: 0x06002B4A RID: 11082 RVA: 0x00075F84 File Offset: 0x00074184
			[CLSCompliant(false)]
			public static void ProgramUniform4(uint program, int location, ulong x, ulong y, ulong z, ulong w)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64,System.UInt64,System.UInt64,System.UInt64), program, location, x, y, z, w, GL.EntryPoints[1654]);
			}

			// Token: 0x06002B4B RID: 11083 RVA: 0x00075FA0 File Offset: 0x000741A0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, ulong[] value)
			{
				fixed (ulong* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1655]);
				}
			}

			// Token: 0x06002B4C RID: 11084 RVA: 0x00075FD8 File Offset: 0x000741D8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, ref ulong value)
			{
				fixed (ulong* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1655]);
				}
			}

			// Token: 0x06002B4D RID: 11085 RVA: 0x00075FFC File Offset: 0x000741FC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, ulong* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, value, GL.EntryPoints[1655]);
			}

			// Token: 0x06002B4E RID: 11086 RVA: 0x00076014 File Offset: 0x00074214
			[CLSCompliant(false)]
			public static void ProgramUniformHandle(int program, int location, long value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64), program, location, value, GL.EntryPoints[1660]);
			}

			// Token: 0x06002B4F RID: 11087 RVA: 0x0007602C File Offset: 0x0007422C
			[CLSCompliant(false)]
			public static void ProgramUniformHandle(uint program, int location, ulong value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64), program, location, value, GL.EntryPoints[1660]);
			}

			// Token: 0x06002B50 RID: 11088 RVA: 0x00076044 File Offset: 0x00074244
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(int program, int location, int count, long[] values)
			{
				fixed (long* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1662]);
				}
			}

			// Token: 0x06002B51 RID: 11089 RVA: 0x0007607C File Offset: 0x0007427C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(int program, int location, int count, ref long values)
			{
				fixed (long* ptr = &values)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1662]);
				}
			}

			// Token: 0x06002B52 RID: 11090 RVA: 0x000760A0 File Offset: 0x000742A0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(int program, int location, int count, long* values)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, values, GL.EntryPoints[1662]);
			}

			// Token: 0x06002B53 RID: 11091 RVA: 0x000760B8 File Offset: 0x000742B8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(uint program, int location, int count, ulong[] values)
			{
				fixed (ulong* ptr = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1662]);
				}
			}

			// Token: 0x06002B54 RID: 11092 RVA: 0x000760F0 File Offset: 0x000742F0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(uint program, int location, int count, ref ulong values)
			{
				fixed (ulong* ptr = &values)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1662]);
				}
			}

			// Token: 0x06002B55 RID: 11093 RVA: 0x00076114 File Offset: 0x00074314
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformHandle(uint program, int location, int count, ulong* values)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, values, GL.EntryPoints[1662]);
			}

			// Token: 0x06002B56 RID: 11094 RVA: 0x0007612C File Offset: 0x0007432C
			[CLSCompliant(false)]
			public static void ProgramUniform(int program, int location, long value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64), program, location, value, GL.EntryPoints[1699]);
			}

			// Token: 0x06002B57 RID: 11095 RVA: 0x00076144 File Offset: 0x00074344
			[CLSCompliant(false)]
			public static void ProgramUniform(uint program, int location, ulong value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64), program, location, value, GL.EntryPoints[1699]);
			}

			// Token: 0x06002B58 RID: 11096 RVA: 0x0007615C File Offset: 0x0007435C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform(int program, int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1700]);
				}
			}

			// Token: 0x06002B59 RID: 11097 RVA: 0x00076194 File Offset: 0x00074394
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform(int program, int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1700]);
				}
			}

			// Token: 0x06002B5A RID: 11098 RVA: 0x000761B8 File Offset: 0x000743B8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform(int program, int location, int count, long* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, value, GL.EntryPoints[1700]);
			}

			// Token: 0x06002B5B RID: 11099 RVA: 0x000761D0 File Offset: 0x000743D0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform(uint program, int location, int count, ulong[] value)
			{
				fixed (ulong* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1700]);
				}
			}

			// Token: 0x06002B5C RID: 11100 RVA: 0x00076208 File Offset: 0x00074408
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform(uint program, int location, int count, ref ulong value)
			{
				fixed (ulong* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, ptr, GL.EntryPoints[1700]);
				}
			}

			// Token: 0x06002B5D RID: 11101 RVA: 0x0007622C File Offset: 0x0007442C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform(uint program, int location, int count, ulong* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt64*), program, location, count, value, GL.EntryPoints[1700]);
			}

			// Token: 0x06002B5E RID: 11102 RVA: 0x00076244 File Offset: 0x00074444
			public static void ProgramVertexLimit(NvGeometryProgram4 target, int limit)
			{
				calli(System.Void(System.Int32,System.Int32), target, limit, GL.EntryPoints[1701]);
			}

			// Token: 0x06002B5F RID: 11103 RVA: 0x00076258 File Offset: 0x00074458
			public static void RenderbufferStorageMultisampleCoverage(RenderbufferTarget target, int coverageSamples, int colorSamples, PixelInternalFormat internalformat, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, coverageSamples, colorSamples, internalformat, width, height, GL.EntryPoints[1764]);
			}

			// Token: 0x06002B60 RID: 11104 RVA: 0x00076274 File Offset: 0x00074474
			[CLSCompliant(false)]
			public unsafe static void RequestResidentProgram(int n, int[] programs)
			{
				fixed (int* ptr = ref (programs != null && programs.Length != 0) ? ref programs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[1790]);
				}
			}

			// Token: 0x06002B61 RID: 11105 RVA: 0x000762A8 File Offset: 0x000744A8
			[CLSCompliant(false)]
			public unsafe static void RequestResidentProgram(int n, ref int programs)
			{
				fixed (int* ptr = &programs)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[1790]);
				}
			}

			// Token: 0x06002B62 RID: 11106 RVA: 0x000762CC File Offset: 0x000744CC
			[CLSCompliant(false)]
			public unsafe static void RequestResidentProgram(int n, int* programs)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, programs, GL.EntryPoints[1790]);
			}

			// Token: 0x06002B63 RID: 11107 RVA: 0x000762E0 File Offset: 0x000744E0
			[CLSCompliant(false)]
			public unsafe static void RequestResidentProgram(int n, uint[] programs)
			{
				fixed (uint* ptr = ref (programs != null && programs.Length != 0) ? ref programs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[1790]);
				}
			}

			// Token: 0x06002B64 RID: 11108 RVA: 0x00076314 File Offset: 0x00074514
			[CLSCompliant(false)]
			public unsafe static void RequestResidentProgram(int n, ref uint programs)
			{
				fixed (uint* ptr = &programs)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[1790]);
				}
			}

			// Token: 0x06002B65 RID: 11109 RVA: 0x00076338 File Offset: 0x00074538
			[CLSCompliant(false)]
			public unsafe static void RequestResidentProgram(int n, uint* programs)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, programs, GL.EntryPoints[1790]);
			}

			// Token: 0x06002B66 RID: 11110 RVA: 0x0007634C File Offset: 0x0007454C
			public static void ResumeTransformFeedback()
			{
				calli(System.Void(), GL.EntryPoints[1797]);
			}

			// Token: 0x06002B67 RID: 11111 RVA: 0x00076360 File Offset: 0x00074560
			[CLSCompliant(false)]
			public static void SampleMaskIndexed(int index, int mask)
			{
				calli(System.Void(System.UInt32,System.UInt32), index, mask, GL.EntryPoints[1808]);
			}

			// Token: 0x06002B68 RID: 11112 RVA: 0x00076374 File Offset: 0x00074574
			[CLSCompliant(false)]
			public static void SampleMaskIndexed(uint index, uint mask)
			{
				calli(System.Void(System.UInt32,System.UInt32), index, mask, GL.EntryPoints[1808]);
			}

			// Token: 0x06002B69 RID: 11113 RVA: 0x00076388 File Offset: 0x00074588
			public static void SecondaryColor3h(Half red, Half green, Half blue)
			{
				calli(System.Void(OpenTK.Half,OpenTK.Half,OpenTK.Half), red, green, blue, GL.EntryPoints[1837]);
			}

			// Token: 0x06002B6A RID: 11114 RVA: 0x000763A0 File Offset: 0x000745A0
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3h(Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[1838]);
				}
			}

			// Token: 0x06002B6B RID: 11115 RVA: 0x000763D4 File Offset: 0x000745D4
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3h(ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[1838]);
				}
			}

			// Token: 0x06002B6C RID: 11116 RVA: 0x000763F8 File Offset: 0x000745F8
			[CLSCompliant(false)]
			public unsafe static void SecondaryColor3h(Half* v)
			{
				calli(System.Void(OpenTK.Half*), v, GL.EntryPoints[1838]);
			}

			// Token: 0x06002B6D RID: 11117 RVA: 0x0007640C File Offset: 0x0007460C
			public static void SecondaryColorFormat(int size, NvVertexBufferUnifiedMemory type, int stride)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), size, type, stride, GL.EntryPoints[1859]);
			}

			// Token: 0x06002B6E RID: 11118 RVA: 0x00076424 File Offset: 0x00074624
			[CLSCompliant(false)]
			public static void SetFence(int fence, NvFence condition)
			{
				calli(System.Void(System.UInt32,System.Int32), fence, condition, GL.EntryPoints[1870]);
			}

			// Token: 0x06002B6F RID: 11119 RVA: 0x00076438 File Offset: 0x00074638
			[CLSCompliant(false)]
			public static void SetFence(uint fence, NvFence condition)
			{
				calli(System.Void(System.UInt32,System.Int32), fence, condition, GL.EntryPoints[1870]);
			}

			// Token: 0x06002B70 RID: 11120 RVA: 0x0007644C File Offset: 0x0007464C
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, NvPathRendering fillMode, int mask, NvPathRendering transformType, float[] transformValues)
			{
				fixed (float* ptr = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, ptr, GL.EntryPoints[1890]);
				}
			}

			// Token: 0x06002B71 RID: 11121 RVA: 0x0007648C File Offset: 0x0007468C
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, NvPathRendering fillMode, int mask, NvPathRendering transformType, ref float transformValues)
			{
				fixed (float* ptr = &transformValues)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, ptr, GL.EntryPoints[1890]);
				}
			}

			// Token: 0x06002B72 RID: 11122 RVA: 0x000764B8 File Offset: 0x000746B8
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, NvPathRendering fillMode, int mask, NvPathRendering transformType, float* transformValues)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues, GL.EntryPoints[1890]);
			}

			// Token: 0x06002B73 RID: 11123 RVA: 0x000764E4 File Offset: 0x000746E4
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, NvPathRendering fillMode, uint mask, NvPathRendering transformType, float[] transformValues)
			{
				fixed (float* ptr = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, ptr, GL.EntryPoints[1890]);
				}
			}

			// Token: 0x06002B74 RID: 11124 RVA: 0x00076524 File Offset: 0x00074724
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, NvPathRendering fillMode, uint mask, NvPathRendering transformType, ref float transformValues)
			{
				fixed (float* ptr = &transformValues)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, ptr, GL.EntryPoints[1890]);
				}
			}

			// Token: 0x06002B75 RID: 11125 RVA: 0x00076550 File Offset: 0x00074750
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, NvPathRendering fillMode, uint mask, NvPathRendering transformType, float* transformValues)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues, GL.EntryPoints[1890]);
			}

			// Token: 0x06002B76 RID: 11126 RVA: 0x0007657C File Offset: 0x0007477C
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, int pathBase, NvPathRendering fillMode, int mask, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, fillMode, mask, transformType, ptr3, GL.EntryPoints[1890]);
					}
				}
			}

			// Token: 0x06002B77 RID: 11127 RVA: 0x000765D4 File Offset: 0x000747D4
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, int pathBase, NvPathRendering fillMode, int mask, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, fillMode, mask, transformType, ptr3, GL.EntryPoints[1890]);
					}
				}
			}

			// Token: 0x06002B78 RID: 11128 RVA: 0x00076618 File Offset: 0x00074818
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, int pathBase, NvPathRendering fillMode, int mask, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, fillMode, mask, transformType, transformValues, GL.EntryPoints[1890]);
				}
			}

			// Token: 0x06002B79 RID: 11129 RVA: 0x00076658 File Offset: 0x00074858
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, uint pathBase, NvPathRendering fillMode, uint mask, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, fillMode, mask, transformType, ptr3, GL.EntryPoints[1890]);
					}
				}
			}

			// Token: 0x06002B7A RID: 11130 RVA: 0x000766B0 File Offset: 0x000748B0
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, uint pathBase, NvPathRendering fillMode, uint mask, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, fillMode, mask, transformType, ptr3, GL.EntryPoints[1890]);
					}
				}
			}

			// Token: 0x06002B7B RID: 11131 RVA: 0x000766F4 File Offset: 0x000748F4
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, uint pathBase, NvPathRendering fillMode, uint mask, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, fillMode, mask, transformType, transformValues, GL.EntryPoints[1890]);
				}
			}

			// Token: 0x06002B7C RID: 11132 RVA: 0x00076734 File Offset: 0x00074934
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, int pathBase, NvPathRendering fillMode, int mask, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, fillMode, mask, transformType, ptr3, GL.EntryPoints[1890]);
					}
				}
			}

			// Token: 0x06002B7D RID: 11133 RVA: 0x00076790 File Offset: 0x00074990
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, int pathBase, NvPathRendering fillMode, int mask, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, fillMode, mask, transformType, ptr3, GL.EntryPoints[1890]);
					}
				}
			}

			// Token: 0x06002B7E RID: 11134 RVA: 0x000767D8 File Offset: 0x000749D8
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, int pathBase, NvPathRendering fillMode, int mask, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, fillMode, mask, transformType, transformValues, GL.EntryPoints[1890]);
				}
			}

			// Token: 0x06002B7F RID: 11135 RVA: 0x0007681C File Offset: 0x00074A1C
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, uint pathBase, NvPathRendering fillMode, uint mask, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, fillMode, mask, transformType, ptr3, GL.EntryPoints[1890]);
					}
				}
			}

			// Token: 0x06002B80 RID: 11136 RVA: 0x00076878 File Offset: 0x00074A78
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, uint pathBase, NvPathRendering fillMode, uint mask, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, fillMode, mask, transformType, ptr3, GL.EntryPoints[1890]);
					}
				}
			}

			// Token: 0x06002B81 RID: 11137 RVA: 0x000768C0 File Offset: 0x00074AC0
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, uint pathBase, NvPathRendering fillMode, uint mask, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, fillMode, mask, transformType, transformValues, GL.EntryPoints[1890]);
				}
			}

			// Token: 0x06002B82 RID: 11138 RVA: 0x00076904 File Offset: 0x00074B04
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, int pathBase, NvPathRendering fillMode, int mask, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, fillMode, mask, transformType, ptr3, GL.EntryPoints[1890]);
					}
				}
			}

			// Token: 0x06002B83 RID: 11139 RVA: 0x00076960 File Offset: 0x00074B60
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, int pathBase, NvPathRendering fillMode, int mask, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, fillMode, mask, transformType, ptr3, GL.EntryPoints[1890]);
					}
				}
			}

			// Token: 0x06002B84 RID: 11140 RVA: 0x000769A8 File Offset: 0x00074BA8
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, int pathBase, NvPathRendering fillMode, int mask, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, fillMode, mask, transformType, transformValues, GL.EntryPoints[1890]);
				}
			}

			// Token: 0x06002B85 RID: 11141 RVA: 0x000769EC File Offset: 0x00074BEC
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, uint pathBase, NvPathRendering fillMode, uint mask, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, fillMode, mask, transformType, ptr3, GL.EntryPoints[1890]);
					}
				}
			}

			// Token: 0x06002B86 RID: 11142 RVA: 0x00076A48 File Offset: 0x00074C48
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, uint pathBase, NvPathRendering fillMode, uint mask, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, fillMode, mask, transformType, ptr3, GL.EntryPoints[1890]);
					}
				}
			}

			// Token: 0x06002B87 RID: 11143 RVA: 0x00076A90 File Offset: 0x00074C90
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, uint pathBase, NvPathRendering fillMode, uint mask, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, fillMode, mask, transformType, transformValues, GL.EntryPoints[1890]);
				}
			}

			// Token: 0x06002B88 RID: 11144 RVA: 0x00076AD4 File Offset: 0x00074CD4
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, int pathBase, NvPathRendering fillMode, int mask, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, fillMode, mask, transformType, ptr3, GL.EntryPoints[1890]);
					}
				}
			}

			// Token: 0x06002B89 RID: 11145 RVA: 0x00076B18 File Offset: 0x00074D18
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, int pathBase, NvPathRendering fillMode, int mask, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, fillMode, mask, transformType, ptr3, GL.EntryPoints[1890]);
					}
				}
			}

			// Token: 0x06002B8A RID: 11146 RVA: 0x00076B48 File Offset: 0x00074D48
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, int pathBase, NvPathRendering fillMode, int mask, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, fillMode, mask, transformType, transformValues, GL.EntryPoints[1890]);
				}
			}

			// Token: 0x06002B8B RID: 11147 RVA: 0x00076B74 File Offset: 0x00074D74
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, uint pathBase, NvPathRendering fillMode, uint mask, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, fillMode, mask, transformType, ptr3, GL.EntryPoints[1890]);
					}
				}
			}

			// Token: 0x06002B8C RID: 11148 RVA: 0x00076BB8 File Offset: 0x00074DB8
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, uint pathBase, NvPathRendering fillMode, uint mask, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, fillMode, mask, transformType, ptr3, GL.EntryPoints[1890]);
					}
				}
			}

			// Token: 0x06002B8D RID: 11149 RVA: 0x00076BE8 File Offset: 0x00074DE8
			[CLSCompliant(false)]
			public unsafe static void StencilFillPathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, uint pathBase, NvPathRendering fillMode, uint mask, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, fillMode, mask, transformType, transformValues, GL.EntryPoints[1890]);
				}
			}

			// Token: 0x06002B8E RID: 11150 RVA: 0x00076C14 File Offset: 0x00074E14
			[CLSCompliant(false)]
			public static void StencilFillPath(int path, NvPathRendering fillMode, int mask)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32), path, fillMode, mask, GL.EntryPoints[1891]);
			}

			// Token: 0x06002B8F RID: 11151 RVA: 0x00076C2C File Offset: 0x00074E2C
			[CLSCompliant(false)]
			public static void StencilFillPath(uint path, NvPathRendering fillMode, uint mask)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32), path, fillMode, mask, GL.EntryPoints[1891]);
			}

			// Token: 0x06002B90 RID: 11152 RVA: 0x00076C44 File Offset: 0x00074E44
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, int reference, int mask, NvPathRendering transformType, float[] transformValues)
			{
				fixed (float* ptr = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, reference, mask, transformType, ptr, GL.EntryPoints[1901]);
				}
			}

			// Token: 0x06002B91 RID: 11153 RVA: 0x00076C84 File Offset: 0x00074E84
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, int reference, int mask, NvPathRendering transformType, ref float transformValues)
			{
				fixed (float* ptr = &transformValues)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, reference, mask, transformType, ptr, GL.EntryPoints[1901]);
				}
			}

			// Token: 0x06002B92 RID: 11154 RVA: 0x00076CB0 File Offset: 0x00074EB0
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, int pathBase, int reference, int mask, NvPathRendering transformType, float* transformValues)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues, GL.EntryPoints[1901]);
			}

			// Token: 0x06002B93 RID: 11155 RVA: 0x00076CDC File Offset: 0x00074EDC
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, NvPathRendering transformType, float[] transformValues)
			{
				fixed (float* ptr = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, reference, mask, transformType, ptr, GL.EntryPoints[1901]);
				}
			}

			// Token: 0x06002B94 RID: 11156 RVA: 0x00076D1C File Offset: 0x00074F1C
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, NvPathRendering transformType, ref float transformValues)
			{
				fixed (float* ptr = &transformValues)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, reference, mask, transformType, ptr, GL.EntryPoints[1901]);
				}
			}

			// Token: 0x06002B95 RID: 11157 RVA: 0x00076D48 File Offset: 0x00074F48
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced(int numPaths, NvPathRendering pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, NvPathRendering transformType, float* transformValues)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues, GL.EntryPoints[1901]);
			}

			// Token: 0x06002B96 RID: 11158 RVA: 0x00076D74 File Offset: 0x00074F74
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, int pathBase, int reference, int mask, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, reference, mask, transformType, ptr3, GL.EntryPoints[1901]);
					}
				}
			}

			// Token: 0x06002B97 RID: 11159 RVA: 0x00076DCC File Offset: 0x00074FCC
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, int pathBase, int reference, int mask, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, reference, mask, transformType, ptr3, GL.EntryPoints[1901]);
					}
				}
			}

			// Token: 0x06002B98 RID: 11160 RVA: 0x00076E10 File Offset: 0x00075010
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, int pathBase, int reference, int mask, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, reference, mask, transformType, transformValues, GL.EntryPoints[1901]);
				}
			}

			// Token: 0x06002B99 RID: 11161 RVA: 0x00076E50 File Offset: 0x00075050
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, uint pathBase, int reference, uint mask, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, reference, mask, transformType, ptr3, GL.EntryPoints[1901]);
					}
				}
			}

			// Token: 0x06002B9A RID: 11162 RVA: 0x00076EA8 File Offset: 0x000750A8
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, uint pathBase, int reference, uint mask, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, reference, mask, transformType, ptr3, GL.EntryPoints[1901]);
					}
				}
			}

			// Token: 0x06002B9B RID: 11163 RVA: 0x00076EEC File Offset: 0x000750EC
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[] paths, uint pathBase, int reference, uint mask, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, reference, mask, transformType, transformValues, GL.EntryPoints[1901]);
				}
			}

			// Token: 0x06002B9C RID: 11164 RVA: 0x00076F2C File Offset: 0x0007512C
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, int pathBase, int reference, int mask, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, reference, mask, transformType, ptr3, GL.EntryPoints[1901]);
					}
				}
			}

			// Token: 0x06002B9D RID: 11165 RVA: 0x00076F88 File Offset: 0x00075188
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, int pathBase, int reference, int mask, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, reference, mask, transformType, ptr3, GL.EntryPoints[1901]);
					}
				}
			}

			// Token: 0x06002B9E RID: 11166 RVA: 0x00076FD0 File Offset: 0x000751D0
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, int pathBase, int reference, int mask, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, reference, mask, transformType, transformValues, GL.EntryPoints[1901]);
				}
			}

			// Token: 0x06002B9F RID: 11167 RVA: 0x00077014 File Offset: 0x00075214
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, uint pathBase, int reference, uint mask, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, reference, mask, transformType, ptr3, GL.EntryPoints[1901]);
					}
				}
			}

			// Token: 0x06002BA0 RID: 11168 RVA: 0x00077070 File Offset: 0x00075270
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, uint pathBase, int reference, uint mask, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, reference, mask, transformType, ptr3, GL.EntryPoints[1901]);
					}
				}
			}

			// Token: 0x06002BA1 RID: 11169 RVA: 0x000770B8 File Offset: 0x000752B8
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,] paths, uint pathBase, int reference, uint mask, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, reference, mask, transformType, transformValues, GL.EntryPoints[1901]);
				}
			}

			// Token: 0x06002BA2 RID: 11170 RVA: 0x000770FC File Offset: 0x000752FC
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, int pathBase, int reference, int mask, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, reference, mask, transformType, ptr3, GL.EntryPoints[1901]);
					}
				}
			}

			// Token: 0x06002BA3 RID: 11171 RVA: 0x00077158 File Offset: 0x00075358
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, int pathBase, int reference, int mask, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, reference, mask, transformType, ptr3, GL.EntryPoints[1901]);
					}
				}
			}

			// Token: 0x06002BA4 RID: 11172 RVA: 0x000771A0 File Offset: 0x000753A0
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, int pathBase, int reference, int mask, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, reference, mask, transformType, transformValues, GL.EntryPoints[1901]);
				}
			}

			// Token: 0x06002BA5 RID: 11173 RVA: 0x000771E4 File Offset: 0x000753E4
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, uint pathBase, int reference, uint mask, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, reference, mask, transformType, ptr3, GL.EntryPoints[1901]);
					}
				}
			}

			// Token: 0x06002BA6 RID: 11174 RVA: 0x00077240 File Offset: 0x00075440
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, uint pathBase, int reference, uint mask, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, reference, mask, transformType, ptr3, GL.EntryPoints[1901]);
					}
				}
			}

			// Token: 0x06002BA7 RID: 11175 RVA: 0x00077288 File Offset: 0x00075488
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] T2[,,] paths, uint pathBase, int reference, uint mask, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, reference, mask, transformType, transformValues, GL.EntryPoints[1901]);
				}
			}

			// Token: 0x06002BA8 RID: 11176 RVA: 0x000772CC File Offset: 0x000754CC
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, int pathBase, int reference, int mask, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, reference, mask, transformType, ptr3, GL.EntryPoints[1901]);
					}
				}
			}

			// Token: 0x06002BA9 RID: 11177 RVA: 0x00077310 File Offset: 0x00075510
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, int pathBase, int reference, int mask, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, reference, mask, transformType, ptr3, GL.EntryPoints[1901]);
					}
				}
			}

			// Token: 0x06002BAA RID: 11178 RVA: 0x00077340 File Offset: 0x00075540
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, int pathBase, int reference, int mask, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, reference, mask, transformType, transformValues, GL.EntryPoints[1901]);
				}
			}

			// Token: 0x06002BAB RID: 11179 RVA: 0x0007736C File Offset: 0x0007556C
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, uint pathBase, int reference, uint mask, NvPathRendering transformType, float[] transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, reference, mask, transformType, ptr3, GL.EntryPoints[1901]);
					}
				}
			}

			// Token: 0x06002BAC RID: 11180 RVA: 0x000773B0 File Offset: 0x000755B0
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, uint pathBase, int reference, uint mask, NvPathRendering transformType, ref float transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					T2* ptr2 = ptr;
					fixed (float* ptr3 = &transformValues)
					{
						calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr2, pathBase, reference, mask, transformType, ptr3, GL.EntryPoints[1901]);
					}
				}
			}

			// Token: 0x06002BAD RID: 11181 RVA: 0x000773E0 File Offset: 0x000755E0
			[CLSCompliant(false)]
			public unsafe static void StencilStrokePathInstanced<T2>(int numPaths, NvPathRendering pathNameType, [In] [Out] ref T2 paths, uint pathBase, int reference, uint mask, NvPathRendering transformType, float* transformValues) where T2 : struct
			{
				fixed (T2* ptr = &paths)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.UInt32,System.Int32,System.UInt32,System.Int32,System.Single*), numPaths, pathNameType, ptr, pathBase, reference, mask, transformType, transformValues, GL.EntryPoints[1901]);
				}
			}

			// Token: 0x06002BAE RID: 11182 RVA: 0x0007740C File Offset: 0x0007560C
			[CLSCompliant(false)]
			public static void StencilStrokePath(int path, int reference, int mask)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32), path, reference, mask, GL.EntryPoints[1902]);
			}

			// Token: 0x06002BAF RID: 11183 RVA: 0x00077424 File Offset: 0x00075624
			[CLSCompliant(false)]
			public static void StencilStrokePath(uint path, int reference, uint mask)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32), path, reference, mask, GL.EntryPoints[1902]);
			}

			// Token: 0x06002BB0 RID: 11184 RVA: 0x0007743C File Offset: 0x0007563C
			[CLSCompliant(false)]
			public static bool TestFence(int fence)
			{
				return calli(System.Byte(System.UInt32), fence, GL.EntryPoints[1923]);
			}

			// Token: 0x06002BB1 RID: 11185 RVA: 0x00077450 File Offset: 0x00075650
			[CLSCompliant(false)]
			public static bool TestFence(uint fence)
			{
				return calli(System.Byte(System.UInt32), fence, GL.EntryPoints[1923]);
			}

			// Token: 0x06002BB2 RID: 11186 RVA: 0x00077464 File Offset: 0x00075664
			public static void TexCoord1h(Half s)
			{
				calli(System.Void(OpenTK.Half), s, GL.EntryPoints[1937]);
			}

			// Token: 0x06002BB3 RID: 11187 RVA: 0x00077478 File Offset: 0x00075678
			[CLSCompliant(false)]
			public unsafe static void TexCoord1h(Half* v)
			{
				calli(System.Void(OpenTK.Half*), v, GL.EntryPoints[1938]);
			}

			// Token: 0x06002BB4 RID: 11188 RVA: 0x0007748C File Offset: 0x0007568C
			public static void TexCoord2h(Half s, Half t)
			{
				calli(System.Void(OpenTK.Half,OpenTK.Half), s, t, GL.EntryPoints[1961]);
			}

			// Token: 0x06002BB5 RID: 11189 RVA: 0x000774A0 File Offset: 0x000756A0
			[CLSCompliant(false)]
			public unsafe static void TexCoord2h(Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[1962]);
				}
			}

			// Token: 0x06002BB6 RID: 11190 RVA: 0x000774D4 File Offset: 0x000756D4
			[CLSCompliant(false)]
			public unsafe static void TexCoord2h(ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[1962]);
				}
			}

			// Token: 0x06002BB7 RID: 11191 RVA: 0x000774F8 File Offset: 0x000756F8
			[CLSCompliant(false)]
			public unsafe static void TexCoord2h(Half* v)
			{
				calli(System.Void(OpenTK.Half*), v, GL.EntryPoints[1962]);
			}

			// Token: 0x06002BB8 RID: 11192 RVA: 0x0007750C File Offset: 0x0007570C
			public static void TexCoord3h(Half s, Half t, Half r)
			{
				calli(System.Void(OpenTK.Half,OpenTK.Half,OpenTK.Half), s, t, r, GL.EntryPoints[1975]);
			}

			// Token: 0x06002BB9 RID: 11193 RVA: 0x00077524 File Offset: 0x00075724
			[CLSCompliant(false)]
			public unsafe static void TexCoord3h(Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[1976]);
				}
			}

			// Token: 0x06002BBA RID: 11194 RVA: 0x00077558 File Offset: 0x00075758
			[CLSCompliant(false)]
			public unsafe static void TexCoord3h(ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[1976]);
				}
			}

			// Token: 0x06002BBB RID: 11195 RVA: 0x0007757C File Offset: 0x0007577C
			[CLSCompliant(false)]
			public unsafe static void TexCoord3h(Half* v)
			{
				calli(System.Void(OpenTK.Half*), v, GL.EntryPoints[1976]);
			}

			// Token: 0x06002BBC RID: 11196 RVA: 0x00077590 File Offset: 0x00075790
			public static void TexCoord4h(Half s, Half t, Half r, Half q)
			{
				calli(System.Void(OpenTK.Half,OpenTK.Half,OpenTK.Half,OpenTK.Half), s, t, r, q, GL.EntryPoints[1993]);
			}

			// Token: 0x06002BBD RID: 11197 RVA: 0x000775A8 File Offset: 0x000757A8
			[CLSCompliant(false)]
			public unsafe static void TexCoord4h(Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[1994]);
				}
			}

			// Token: 0x06002BBE RID: 11198 RVA: 0x000775DC File Offset: 0x000757DC
			[CLSCompliant(false)]
			public unsafe static void TexCoord4h(ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[1994]);
				}
			}

			// Token: 0x06002BBF RID: 11199 RVA: 0x00077600 File Offset: 0x00075800
			[CLSCompliant(false)]
			public unsafe static void TexCoord4h(Half* v)
			{
				calli(System.Void(OpenTK.Half*), v, GL.EntryPoints[1994]);
			}

			// Token: 0x06002BC0 RID: 11200 RVA: 0x00077614 File Offset: 0x00075814
			public static void TexCoordFormat(int size, NvVertexBufferUnifiedMemory type, int stride)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), size, type, stride, GL.EntryPoints[2001]);
			}

			// Token: 0x06002BC1 RID: 11201 RVA: 0x0007762C File Offset: 0x0007582C
			public static void TexImage2DMultisampleCoverage(NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations, GL.EntryPoints[2032]);
			}

			// Token: 0x06002BC2 RID: 11202 RVA: 0x00077654 File Offset: 0x00075854
			public static void TexImage3DMultisampleCoverage(NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations, GL.EntryPoints[2036]);
			}

			// Token: 0x06002BC3 RID: 11203 RVA: 0x00077680 File Offset: 0x00075880
			[CLSCompliant(false)]
			public static void TexRenderbuffer(TextureTarget target, int renderbuffer)
			{
				calli(System.Void(System.Int32,System.UInt32), target, renderbuffer, GL.EntryPoints[2049]);
			}

			// Token: 0x06002BC4 RID: 11204 RVA: 0x00077694 File Offset: 0x00075894
			[CLSCompliant(false)]
			public static void TexRenderbuffer(TextureTarget target, uint renderbuffer)
			{
				calli(System.Void(System.Int32,System.UInt32), target, renderbuffer, GL.EntryPoints[2049]);
			}

			// Token: 0x06002BC5 RID: 11205 RVA: 0x000776A8 File Offset: 0x000758A8
			public static void TextureBarrier()
			{
				calli(System.Void(), GL.EntryPoints[2063]);
			}

			// Token: 0x06002BC6 RID: 11206 RVA: 0x000776BC File Offset: 0x000758BC
			[CLSCompliant(false)]
			public static void TextureImage2DMultisampleCoverage(int texture, NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations, GL.EntryPoints[2069]);
			}

			// Token: 0x06002BC7 RID: 11207 RVA: 0x000776E8 File Offset: 0x000758E8
			[CLSCompliant(false)]
			public static void TextureImage2DMultisampleCoverage(uint texture, NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations, GL.EntryPoints[2069]);
			}

			// Token: 0x06002BC8 RID: 11208 RVA: 0x00077714 File Offset: 0x00075914
			[CLSCompliant(false)]
			public static void TextureImage2DMultisample(int texture, NvTextureMultisample target, int samples, int internalFormat, int width, int height, bool fixedSampleLocations)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), texture, target, samples, internalFormat, width, height, fixedSampleLocations, GL.EntryPoints[2070]);
			}

			// Token: 0x06002BC9 RID: 11209 RVA: 0x0007773C File Offset: 0x0007593C
			[CLSCompliant(false)]
			public static void TextureImage2DMultisample(uint texture, NvTextureMultisample target, int samples, int internalFormat, int width, int height, bool fixedSampleLocations)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), texture, target, samples, internalFormat, width, height, fixedSampleLocations, GL.EntryPoints[2070]);
			}

			// Token: 0x06002BCA RID: 11210 RVA: 0x00077764 File Offset: 0x00075964
			[CLSCompliant(false)]
			public static void TextureImage3DMultisampleCoverage(int texture, NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations, GL.EntryPoints[2072]);
			}

			// Token: 0x06002BCB RID: 11211 RVA: 0x00077790 File Offset: 0x00075990
			[CLSCompliant(false)]
			public static void TextureImage3DMultisampleCoverage(uint texture, NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations, GL.EntryPoints[2072]);
			}

			// Token: 0x06002BCC RID: 11212 RVA: 0x000777BC File Offset: 0x000759BC
			[CLSCompliant(false)]
			public static void TextureImage3DMultisample(int texture, NvTextureMultisample target, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations, GL.EntryPoints[2073]);
			}

			// Token: 0x06002BCD RID: 11213 RVA: 0x000777E8 File Offset: 0x000759E8
			[CLSCompliant(false)]
			public static void TextureImage3DMultisample(uint texture, NvTextureMultisample target, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations, GL.EntryPoints[2073]);
			}

			// Token: 0x06002BCE RID: 11214 RVA: 0x00077814 File Offset: 0x00075A14
			[CLSCompliant(false)]
			public static void TrackMatrix(AssemblyProgramTargetArb target, int address, NvVertexProgram matrix, NvVertexProgram transform)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32), target, address, matrix, transform, GL.EntryPoints[2096]);
			}

			// Token: 0x06002BCF RID: 11215 RVA: 0x0007782C File Offset: 0x00075A2C
			[CLSCompliant(false)]
			public static void TrackMatrix(AssemblyProgramTargetArb target, uint address, NvVertexProgram matrix, NvVertexProgram transform)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32), target, address, matrix, transform, GL.EntryPoints[2096]);
			}

			// Token: 0x06002BD0 RID: 11216 RVA: 0x00077844 File Offset: 0x00075A44
			[CLSCompliant(false)]
			public unsafe static void TransformFeedbackAttrib(int count, int[] attribs, NvTransformFeedback bufferMode)
			{
				fixed (int* ptr = ref (attribs != null && attribs.Length != 0) ? ref attribs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32), count, ptr, bufferMode, GL.EntryPoints[2097]);
				}
			}

			// Token: 0x06002BD1 RID: 11217 RVA: 0x0007787C File Offset: 0x00075A7C
			[CLSCompliant(false)]
			public unsafe static void TransformFeedbackAttrib(int count, ref int attribs, NvTransformFeedback bufferMode)
			{
				fixed (int* ptr = &attribs)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32), count, ptr, bufferMode, GL.EntryPoints[2097]);
				}
			}

			// Token: 0x06002BD2 RID: 11218 RVA: 0x000778A0 File Offset: 0x00075AA0
			[CLSCompliant(false)]
			public unsafe static void TransformFeedbackAttrib(int count, int* attribs, NvTransformFeedback bufferMode)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32), count, attribs, bufferMode, GL.EntryPoints[2097]);
			}

			// Token: 0x06002BD3 RID: 11219 RVA: 0x000778B8 File Offset: 0x00075AB8
			[CLSCompliant(false)]
			public unsafe static void TransformFeedbackStreamAttrib(int count, int[] attribs, int nbuffers, int[] bufstreams, NvTransformFeedback bufferMode)
			{
				fixed (int* ptr = ref (attribs != null && attribs.Length != 0) ? ref attribs[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (bufstreams != null && bufstreams.Length != 0) ? ref bufstreams[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32), count, ptr2, nbuffers, ptr3, bufferMode, GL.EntryPoints[2098]);
					}
				}
			}

			// Token: 0x06002BD4 RID: 11220 RVA: 0x00077908 File Offset: 0x00075B08
			[CLSCompliant(false)]
			public unsafe static void TransformFeedbackStreamAttrib(int count, ref int attribs, int nbuffers, ref int bufstreams, NvTransformFeedback bufferMode)
			{
				fixed (int* ptr = &attribs)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &bufstreams)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32), count, ptr2, nbuffers, ptr3, bufferMode, GL.EntryPoints[2098]);
					}
				}
			}

			// Token: 0x06002BD5 RID: 11221 RVA: 0x00077934 File Offset: 0x00075B34
			[CLSCompliant(false)]
			public unsafe static void TransformFeedbackStreamAttrib(int count, int* attribs, int nbuffers, int* bufstreams, NvTransformFeedback bufferMode)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.Int32*,System.Int32), count, attribs, nbuffers, bufstreams, bufferMode, GL.EntryPoints[2098]);
			}

			// Token: 0x06002BD6 RID: 11222 RVA: 0x0007794C File Offset: 0x00075B4C
			[CLSCompliant(false)]
			public unsafe static void TransformFeedbackVaryings(int program, int count, int[] locations, NvTransformFeedback bufferMode)
			{
				fixed (int* ptr = ref (locations != null && locations.Length != 0) ? ref locations[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32), program, count, ptr, bufferMode, GL.EntryPoints[2101]);
				}
			}

			// Token: 0x06002BD7 RID: 11223 RVA: 0x00077984 File Offset: 0x00075B84
			[CLSCompliant(false)]
			public unsafe static void TransformFeedbackVaryings(int program, int count, ref int locations, NvTransformFeedback bufferMode)
			{
				fixed (int* ptr = &locations)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32), program, count, ptr, bufferMode, GL.EntryPoints[2101]);
				}
			}

			// Token: 0x06002BD8 RID: 11224 RVA: 0x000779A8 File Offset: 0x00075BA8
			[CLSCompliant(false)]
			public unsafe static void TransformFeedbackVaryings(int program, int count, int* locations, NvTransformFeedback bufferMode)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32), program, count, locations, bufferMode, GL.EntryPoints[2101]);
			}

			// Token: 0x06002BD9 RID: 11225 RVA: 0x000779C0 File Offset: 0x00075BC0
			[CLSCompliant(false)]
			public unsafe static void TransformFeedbackVaryings(uint program, int count, int[] locations, NvTransformFeedback bufferMode)
			{
				fixed (int* ptr = ref (locations != null && locations.Length != 0) ? ref locations[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32), program, count, ptr, bufferMode, GL.EntryPoints[2101]);
				}
			}

			// Token: 0x06002BDA RID: 11226 RVA: 0x000779F8 File Offset: 0x00075BF8
			[CLSCompliant(false)]
			public unsafe static void TransformFeedbackVaryings(uint program, int count, ref int locations, NvTransformFeedback bufferMode)
			{
				fixed (int* ptr = &locations)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32), program, count, ptr, bufferMode, GL.EntryPoints[2101]);
				}
			}

			// Token: 0x06002BDB RID: 11227 RVA: 0x00077A1C File Offset: 0x00075C1C
			[CLSCompliant(false)]
			public unsafe static void TransformFeedbackVaryings(uint program, int count, int* locations, NvTransformFeedback bufferMode)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32), program, count, locations, bufferMode, GL.EntryPoints[2101]);
			}

			// Token: 0x06002BDC RID: 11228 RVA: 0x00077A34 File Offset: 0x00075C34
			[CLSCompliant(false)]
			public unsafe static void TransformPath(int resultPath, int srcPath, NvPathRendering transformType, float[] transformValues)
			{
				fixed (float* ptr = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), resultPath, srcPath, transformType, ptr, GL.EntryPoints[2102]);
				}
			}

			// Token: 0x06002BDD RID: 11229 RVA: 0x00077A6C File Offset: 0x00075C6C
			[CLSCompliant(false)]
			public unsafe static void TransformPath(int resultPath, int srcPath, NvPathRendering transformType, ref float transformValues)
			{
				fixed (float* ptr = &transformValues)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), resultPath, srcPath, transformType, ptr, GL.EntryPoints[2102]);
				}
			}

			// Token: 0x06002BDE RID: 11230 RVA: 0x00077A90 File Offset: 0x00075C90
			[CLSCompliant(false)]
			public unsafe static void TransformPath(int resultPath, int srcPath, NvPathRendering transformType, float* transformValues)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), resultPath, srcPath, transformType, transformValues, GL.EntryPoints[2102]);
			}

			// Token: 0x06002BDF RID: 11231 RVA: 0x00077AA8 File Offset: 0x00075CA8
			[CLSCompliant(false)]
			public unsafe static void TransformPath(uint resultPath, uint srcPath, NvPathRendering transformType, float[] transformValues)
			{
				fixed (float* ptr = ref (transformValues != null && transformValues.Length != 0) ? ref transformValues[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), resultPath, srcPath, transformType, ptr, GL.EntryPoints[2102]);
				}
			}

			// Token: 0x06002BE0 RID: 11232 RVA: 0x00077AE0 File Offset: 0x00075CE0
			[CLSCompliant(false)]
			public unsafe static void TransformPath(uint resultPath, uint srcPath, NvPathRendering transformType, ref float transformValues)
			{
				fixed (float* ptr = &transformValues)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), resultPath, srcPath, transformType, ptr, GL.EntryPoints[2102]);
				}
			}

			// Token: 0x06002BE1 RID: 11233 RVA: 0x00077B04 File Offset: 0x00075D04
			[CLSCompliant(false)]
			public unsafe static void TransformPath(uint resultPath, uint srcPath, NvPathRendering transformType, float* transformValues)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), resultPath, srcPath, transformType, transformValues, GL.EntryPoints[2102]);
			}

			// Token: 0x06002BE2 RID: 11234 RVA: 0x00077B1C File Offset: 0x00075D1C
			public static void Uniform1(int location, long x)
			{
				calli(System.Void(System.Int32,System.Int64), location, x, GL.EntryPoints[2113]);
			}

			// Token: 0x06002BE3 RID: 11235 RVA: 0x00077B30 File Offset: 0x00075D30
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int64*), location, count, ptr, GL.EntryPoints[2114]);
				}
			}

			// Token: 0x06002BE4 RID: 11236 RVA: 0x00077B68 File Offset: 0x00075D68
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int64*), location, count, ptr, GL.EntryPoints[2114]);
				}
			}

			// Token: 0x06002BE5 RID: 11237 RVA: 0x00077B8C File Offset: 0x00075D8C
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, long* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int64*), location, count, value, GL.EntryPoints[2114]);
			}

			// Token: 0x06002BE6 RID: 11238 RVA: 0x00077BA4 File Offset: 0x00075DA4
			[CLSCompliant(false)]
			public static void Uniform1(int location, ulong x)
			{
				calli(System.Void(System.Int32,System.UInt64), location, x, GL.EntryPoints[2119]);
			}

			// Token: 0x06002BE7 RID: 11239 RVA: 0x00077BB8 File Offset: 0x00075DB8
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, ulong[] value)
			{
				fixed (ulong* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2120]);
				}
			}

			// Token: 0x06002BE8 RID: 11240 RVA: 0x00077BF0 File Offset: 0x00075DF0
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, ref ulong value)
			{
				fixed (ulong* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2120]);
				}
			}

			// Token: 0x06002BE9 RID: 11241 RVA: 0x00077C14 File Offset: 0x00075E14
			[CLSCompliant(false)]
			public unsafe static void Uniform1(int location, int count, ulong* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, value, GL.EntryPoints[2120]);
			}

			// Token: 0x06002BEA RID: 11242 RVA: 0x00077C2C File Offset: 0x00075E2C
			public static void Uniform2(int location, long x, long y)
			{
				calli(System.Void(System.Int32,System.Int64,System.Int64), location, x, y, GL.EntryPoints[2131]);
			}

			// Token: 0x06002BEB RID: 11243 RVA: 0x00077C44 File Offset: 0x00075E44
			[CLSCompliant(false)]
			public unsafe static void Uniform2(int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int64*), location, count, ptr, GL.EntryPoints[2132]);
				}
			}

			// Token: 0x06002BEC RID: 11244 RVA: 0x00077C7C File Offset: 0x00075E7C
			[CLSCompliant(false)]
			public unsafe static void Uniform2(int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int64*), location, count, ptr, GL.EntryPoints[2132]);
				}
			}

			// Token: 0x06002BED RID: 11245 RVA: 0x00077CA0 File Offset: 0x00075EA0
			[CLSCompliant(false)]
			public unsafe static void Uniform2(int location, int count, long* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int64*), location, count, value, GL.EntryPoints[2132]);
			}

			// Token: 0x06002BEE RID: 11246 RVA: 0x00077CB8 File Offset: 0x00075EB8
			[CLSCompliant(false)]
			public static void Uniform2(int location, ulong x, ulong y)
			{
				calli(System.Void(System.Int32,System.UInt64,System.UInt64), location, x, y, GL.EntryPoints[2137]);
			}

			// Token: 0x06002BEF RID: 11247 RVA: 0x00077CD0 File Offset: 0x00075ED0
			[CLSCompliant(false)]
			public unsafe static void Uniform2(int location, int count, ulong[] value)
			{
				fixed (ulong* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2138]);
				}
			}

			// Token: 0x06002BF0 RID: 11248 RVA: 0x00077D08 File Offset: 0x00075F08
			[CLSCompliant(false)]
			public unsafe static void Uniform2(int location, int count, ref ulong value)
			{
				fixed (ulong* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2138]);
				}
			}

			// Token: 0x06002BF1 RID: 11249 RVA: 0x00077D2C File Offset: 0x00075F2C
			[CLSCompliant(false)]
			public unsafe static void Uniform2(int location, int count, ulong* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, value, GL.EntryPoints[2138]);
			}

			// Token: 0x06002BF2 RID: 11250 RVA: 0x00077D44 File Offset: 0x00075F44
			public static void Uniform3(int location, long x, long y, long z)
			{
				calli(System.Void(System.Int32,System.Int64,System.Int64,System.Int64), location, x, y, z, GL.EntryPoints[2149]);
			}

			// Token: 0x06002BF3 RID: 11251 RVA: 0x00077D5C File Offset: 0x00075F5C
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int64*), location, count, ptr, GL.EntryPoints[2150]);
				}
			}

			// Token: 0x06002BF4 RID: 11252 RVA: 0x00077D94 File Offset: 0x00075F94
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int64*), location, count, ptr, GL.EntryPoints[2150]);
				}
			}

			// Token: 0x06002BF5 RID: 11253 RVA: 0x00077DB8 File Offset: 0x00075FB8
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, long* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int64*), location, count, value, GL.EntryPoints[2150]);
			}

			// Token: 0x06002BF6 RID: 11254 RVA: 0x00077DD0 File Offset: 0x00075FD0
			[CLSCompliant(false)]
			public static void Uniform3(int location, ulong x, ulong y, ulong z)
			{
				calli(System.Void(System.Int32,System.UInt64,System.UInt64,System.UInt64), location, x, y, z, GL.EntryPoints[2155]);
			}

			// Token: 0x06002BF7 RID: 11255 RVA: 0x00077DE8 File Offset: 0x00075FE8
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, ulong[] value)
			{
				fixed (ulong* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2156]);
				}
			}

			// Token: 0x06002BF8 RID: 11256 RVA: 0x00077E20 File Offset: 0x00076020
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, ref ulong value)
			{
				fixed (ulong* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2156]);
				}
			}

			// Token: 0x06002BF9 RID: 11257 RVA: 0x00077E44 File Offset: 0x00076044
			[CLSCompliant(false)]
			public unsafe static void Uniform3(int location, int count, ulong* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, value, GL.EntryPoints[2156]);
			}

			// Token: 0x06002BFA RID: 11258 RVA: 0x00077E5C File Offset: 0x0007605C
			public static void Uniform4(int location, long x, long y, long z, long w)
			{
				calli(System.Void(System.Int32,System.Int64,System.Int64,System.Int64,System.Int64), location, x, y, z, w, GL.EntryPoints[2167]);
			}

			// Token: 0x06002BFB RID: 11259 RVA: 0x00077E74 File Offset: 0x00076074
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int64*), location, count, ptr, GL.EntryPoints[2168]);
				}
			}

			// Token: 0x06002BFC RID: 11260 RVA: 0x00077EAC File Offset: 0x000760AC
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int64*), location, count, ptr, GL.EntryPoints[2168]);
				}
			}

			// Token: 0x06002BFD RID: 11261 RVA: 0x00077ED0 File Offset: 0x000760D0
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, long* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int64*), location, count, value, GL.EntryPoints[2168]);
			}

			// Token: 0x06002BFE RID: 11262 RVA: 0x00077EE8 File Offset: 0x000760E8
			[CLSCompliant(false)]
			public static void Uniform4(int location, ulong x, ulong y, ulong z, ulong w)
			{
				calli(System.Void(System.Int32,System.UInt64,System.UInt64,System.UInt64,System.UInt64), location, x, y, z, w, GL.EntryPoints[2173]);
			}

			// Token: 0x06002BFF RID: 11263 RVA: 0x00077F00 File Offset: 0x00076100
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, ulong[] value)
			{
				fixed (ulong* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2174]);
				}
			}

			// Token: 0x06002C00 RID: 11264 RVA: 0x00077F38 File Offset: 0x00076138
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, ref ulong value)
			{
				fixed (ulong* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2174]);
				}
			}

			// Token: 0x06002C01 RID: 11265 RVA: 0x00077F5C File Offset: 0x0007615C
			[CLSCompliant(false)]
			public unsafe static void Uniform4(int location, int count, ulong* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, value, GL.EntryPoints[2174]);
			}

			// Token: 0x06002C02 RID: 11266 RVA: 0x00077F74 File Offset: 0x00076174
			[CLSCompliant(false)]
			public static void UniformHandle(int location, long value)
			{
				calli(System.Void(System.Int32,System.UInt64), location, value, GL.EntryPoints[2181]);
			}

			// Token: 0x06002C03 RID: 11267 RVA: 0x00077F88 File Offset: 0x00076188
			[CLSCompliant(false)]
			public static void UniformHandle(int location, ulong value)
			{
				calli(System.Void(System.Int32,System.UInt64), location, value, GL.EntryPoints[2181]);
			}

			// Token: 0x06002C04 RID: 11268 RVA: 0x00077F9C File Offset: 0x0007619C
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2183]);
				}
			}

			// Token: 0x06002C05 RID: 11269 RVA: 0x00077FD4 File Offset: 0x000761D4
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2183]);
				}
			}

			// Token: 0x06002C06 RID: 11270 RVA: 0x00077FF8 File Offset: 0x000761F8
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, long* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, value, GL.EntryPoints[2183]);
			}

			// Token: 0x06002C07 RID: 11271 RVA: 0x00078010 File Offset: 0x00076210
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, ulong[] value)
			{
				fixed (ulong* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2183]);
				}
			}

			// Token: 0x06002C08 RID: 11272 RVA: 0x00078048 File Offset: 0x00076248
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, ref ulong value)
			{
				fixed (ulong* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2183]);
				}
			}

			// Token: 0x06002C09 RID: 11273 RVA: 0x0007806C File Offset: 0x0007626C
			[CLSCompliant(false)]
			public unsafe static void UniformHandle(int location, int count, ulong* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, value, GL.EntryPoints[2183]);
			}

			// Token: 0x06002C0A RID: 11274 RVA: 0x00078084 File Offset: 0x00076284
			[CLSCompliant(false)]
			public static void Uniform(int location, long value)
			{
				calli(System.Void(System.Int32,System.UInt64), location, value, GL.EntryPoints[2206]);
			}

			// Token: 0x06002C0B RID: 11275 RVA: 0x00078098 File Offset: 0x00076298
			[CLSCompliant(false)]
			public static void Uniform(int location, ulong value)
			{
				calli(System.Void(System.Int32,System.UInt64), location, value, GL.EntryPoints[2206]);
			}

			// Token: 0x06002C0C RID: 11276 RVA: 0x000780AC File Offset: 0x000762AC
			[CLSCompliant(false)]
			public unsafe static void Uniform(int location, int count, long[] value)
			{
				fixed (long* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2207]);
				}
			}

			// Token: 0x06002C0D RID: 11277 RVA: 0x000780E4 File Offset: 0x000762E4
			[CLSCompliant(false)]
			public unsafe static void Uniform(int location, int count, ref long value)
			{
				fixed (long* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2207]);
				}
			}

			// Token: 0x06002C0E RID: 11278 RVA: 0x00078108 File Offset: 0x00076308
			[CLSCompliant(false)]
			public unsafe static void Uniform(int location, int count, long* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, value, GL.EntryPoints[2207]);
			}

			// Token: 0x06002C0F RID: 11279 RVA: 0x00078120 File Offset: 0x00076320
			[CLSCompliant(false)]
			public unsafe static void Uniform(int location, int count, ulong[] value)
			{
				fixed (ulong* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2207]);
				}
			}

			// Token: 0x06002C10 RID: 11280 RVA: 0x00078158 File Offset: 0x00076358
			[CLSCompliant(false)]
			public unsafe static void Uniform(int location, int count, ref ulong value)
			{
				fixed (ulong* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, ptr, GL.EntryPoints[2207]);
				}
			}

			// Token: 0x06002C11 RID: 11281 RVA: 0x0007817C File Offset: 0x0007637C
			[CLSCompliant(false)]
			public unsafe static void Uniform(int location, int count, ulong* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt64*), location, count, value, GL.EntryPoints[2207]);
			}

			// Token: 0x06002C12 RID: 11282 RVA: 0x00078194 File Offset: 0x00076394
			public static void VDPAUFin()
			{
				calli(System.Void(), GL.EntryPoints[2234]);
			}

			// Token: 0x06002C13 RID: 11283 RVA: 0x000781A8 File Offset: 0x000763A8
			[CLSCompliant(false)]
			public unsafe static void VDPAUGetSurface(IntPtr surface, NvVdpauInterop pname, int bufSize, [Out] int[] length, [Out] int[] values)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
					{
						calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), surface, pname, bufSize, ptr2, ptr3, GL.EntryPoints[2235]);
					}
				}
			}

			// Token: 0x06002C14 RID: 11284 RVA: 0x000781F8 File Offset: 0x000763F8
			[CLSCompliant(false)]
			public unsafe static void VDPAUGetSurface(IntPtr surface, NvVdpauInterop pname, int bufSize, out int length, out int values)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &values)
					{
						calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), surface, pname, bufSize, ptr2, ptr3, GL.EntryPoints[2235]);
					}
				}
			}

			// Token: 0x06002C15 RID: 11285 RVA: 0x00078224 File Offset: 0x00076424
			[CLSCompliant(false)]
			public unsafe static void VDPAUGetSurface(IntPtr surface, NvVdpauInterop pname, int bufSize, [Out] int* length, [Out] int* values)
			{
				calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), surface, pname, bufSize, length, values, GL.EntryPoints[2235]);
			}

			// Token: 0x06002C16 RID: 11286 RVA: 0x0007823C File Offset: 0x0007643C
			public static void VDPAUInit(IntPtr vdpDevice, IntPtr getProcAddress)
			{
				calli(System.Void(System.IntPtr,System.IntPtr), vdpDevice, getProcAddress, GL.EntryPoints[2236]);
			}

			// Token: 0x06002C17 RID: 11287 RVA: 0x00078250 File Offset: 0x00076450
			[CLSCompliant(false)]
			public unsafe static void VDPAUInit<T0, T1>([In] [Out] T0[] vdpDevice, [In] [Out] T1[] getProcAddress) where T0 : struct where T1 : struct
			{
				fixed (T0* ptr = ref (vdpDevice != null && vdpDevice.Length != 0) ? ref vdpDevice[0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (T1* ptr3 = ref (getProcAddress != null && getProcAddress.Length != 0) ? ref getProcAddress[0] : ref *null)
					{
						calli(System.Void(System.IntPtr,System.IntPtr), ptr2, ptr3, GL.EntryPoints[2236]);
					}
				}
			}

			// Token: 0x06002C18 RID: 11288 RVA: 0x0007829C File Offset: 0x0007649C
			[CLSCompliant(false)]
			public unsafe static void VDPAUInit<T0, T1>([In] [Out] T0[,] vdpDevice, [In] [Out] T1[,] getProcAddress) where T0 : struct where T1 : struct
			{
				fixed (T0* ptr = ref (vdpDevice != null && vdpDevice.Length != 0) ? ref vdpDevice[0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (T1* ptr3 = ref (getProcAddress != null && getProcAddress.Length != 0) ? ref getProcAddress[0, 0] : ref *null)
					{
						calli(System.Void(System.IntPtr,System.IntPtr), ptr2, ptr3, GL.EntryPoints[2236]);
					}
				}
			}

			// Token: 0x06002C19 RID: 11289 RVA: 0x000782F0 File Offset: 0x000764F0
			[CLSCompliant(false)]
			public unsafe static void VDPAUInit<T0, T1>([In] [Out] T0[,,] vdpDevice, [In] [Out] T1[,,] getProcAddress) where T0 : struct where T1 : struct
			{
				fixed (T0* ptr = ref (vdpDevice != null && vdpDevice.Length != 0) ? ref vdpDevice[0, 0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (T1* ptr3 = ref (getProcAddress != null && getProcAddress.Length != 0) ? ref getProcAddress[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.IntPtr,System.IntPtr), ptr2, ptr3, GL.EntryPoints[2236]);
					}
				}
			}

			// Token: 0x06002C1A RID: 11290 RVA: 0x00078344 File Offset: 0x00076544
			public unsafe static void VDPAUInit<T0, T1>([In] [Out] ref T0 vdpDevice, [In] [Out] ref T1 getProcAddress) where T0 : struct where T1 : struct
			{
				fixed (T0* ptr = &vdpDevice)
				{
					T0* ptr2 = ptr;
					fixed (T1* ptr3 = &getProcAddress)
					{
						calli(System.Void(System.IntPtr,System.IntPtr), ptr2, ptr3, GL.EntryPoints[2236]);
					}
				}
			}

			// Token: 0x06002C1B RID: 11291 RVA: 0x0007836C File Offset: 0x0007656C
			public static bool VDPAUIsSurface(IntPtr surface)
			{
				return calli(System.Byte(System.IntPtr), surface, GL.EntryPoints[2237]);
			}

			// Token: 0x06002C1C RID: 11292 RVA: 0x00078380 File Offset: 0x00076580
			[CLSCompliant(false)]
			public unsafe static void VDPAUMapSurfaces(int numSurfaces, IntPtr[] surfaces)
			{
				fixed (IntPtr* ptr = ref (surfaces != null && surfaces.Length != 0) ? ref surfaces[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr*), numSurfaces, ptr, GL.EntryPoints[2238]);
				}
			}

			// Token: 0x06002C1D RID: 11293 RVA: 0x000783B4 File Offset: 0x000765B4
			[CLSCompliant(false)]
			public unsafe static void VDPAUMapSurfaces(int numSurfaces, ref IntPtr surfaces)
			{
				fixed (IntPtr* ptr = &surfaces)
				{
					calli(System.Void(System.Int32,System.IntPtr*), numSurfaces, ptr, GL.EntryPoints[2238]);
				}
			}

			// Token: 0x06002C1E RID: 11294 RVA: 0x000783D8 File Offset: 0x000765D8
			[CLSCompliant(false)]
			public unsafe static void VDPAUMapSurfaces(int numSurfaces, IntPtr* surfaces)
			{
				calli(System.Void(System.Int32,System.IntPtr*), numSurfaces, surfaces, GL.EntryPoints[2238]);
			}

			// Token: 0x06002C1F RID: 11295 RVA: 0x000783EC File Offset: 0x000765EC
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface(IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames)
			{
				fixed (int* ptr = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), vdpSurface, target, numTextureNames, ptr, GL.EntryPoints[2239]);
				}
			}

			// Token: 0x06002C20 RID: 11296 RVA: 0x00078424 File Offset: 0x00076624
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface(IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames)
			{
				fixed (int* ptr = &textureNames)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), vdpSurface, target, numTextureNames, ptr, GL.EntryPoints[2239]);
				}
			}

			// Token: 0x06002C21 RID: 11297 RVA: 0x00078448 File Offset: 0x00076648
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface(IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames)
			{
				return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), vdpSurface, target, numTextureNames, textureNames, GL.EntryPoints[2239]);
			}

			// Token: 0x06002C22 RID: 11298 RVA: 0x00078460 File Offset: 0x00076660
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface(IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames)
			{
				fixed (uint* ptr = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), vdpSurface, target, numTextureNames, ptr, GL.EntryPoints[2239]);
				}
			}

			// Token: 0x06002C23 RID: 11299 RVA: 0x00078498 File Offset: 0x00076698
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface(IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames)
			{
				fixed (uint* ptr = &textureNames)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), vdpSurface, target, numTextureNames, ptr, GL.EntryPoints[2239]);
				}
			}

			// Token: 0x06002C24 RID: 11300 RVA: 0x000784BC File Offset: 0x000766BC
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface(IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames)
			{
				return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), vdpSurface, target, numTextureNames, textureNames, GL.EntryPoints[2239]);
			}

			// Token: 0x06002C25 RID: 11301 RVA: 0x000784D4 File Offset: 0x000766D4
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (int* ptr3 = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2239]);
					}
				}
			}

			// Token: 0x06002C26 RID: 11302 RVA: 0x00078520 File Offset: 0x00076720
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (int* ptr3 = &textureNames)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2239]);
					}
				}
			}

			// Token: 0x06002C27 RID: 11303 RVA: 0x0007855C File Offset: 0x0007675C
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0] : ref *null)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr, target, numTextureNames, textureNames, GL.EntryPoints[2239]);
				}
			}

			// Token: 0x06002C28 RID: 11304 RVA: 0x00078594 File Offset: 0x00076794
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (uint* ptr3 = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2239]);
					}
				}
			}

			// Token: 0x06002C29 RID: 11305 RVA: 0x000785E0 File Offset: 0x000767E0
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (uint* ptr3 = &textureNames)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2239]);
					}
				}
			}

			// Token: 0x06002C2A RID: 11306 RVA: 0x0007861C File Offset: 0x0007681C
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0] : ref *null)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr, target, numTextureNames, textureNames, GL.EntryPoints[2239]);
				}
			}

			// Token: 0x06002C2B RID: 11307 RVA: 0x00078654 File Offset: 0x00076854
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (int* ptr3 = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2239]);
					}
				}
			}

			// Token: 0x06002C2C RID: 11308 RVA: 0x000786A4 File Offset: 0x000768A4
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (int* ptr3 = &textureNames)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2239]);
					}
				}
			}

			// Token: 0x06002C2D RID: 11309 RVA: 0x000786E4 File Offset: 0x000768E4
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0] : ref *null)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr, target, numTextureNames, textureNames, GL.EntryPoints[2239]);
				}
			}

			// Token: 0x06002C2E RID: 11310 RVA: 0x00078720 File Offset: 0x00076920
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (uint* ptr3 = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2239]);
					}
				}
			}

			// Token: 0x06002C2F RID: 11311 RVA: 0x00078770 File Offset: 0x00076970
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (uint* ptr3 = &textureNames)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2239]);
					}
				}
			}

			// Token: 0x06002C30 RID: 11312 RVA: 0x000787B0 File Offset: 0x000769B0
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0] : ref *null)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr, target, numTextureNames, textureNames, GL.EntryPoints[2239]);
				}
			}

			// Token: 0x06002C31 RID: 11313 RVA: 0x000787EC File Offset: 0x000769EC
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (int* ptr3 = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2239]);
					}
				}
			}

			// Token: 0x06002C32 RID: 11314 RVA: 0x0007883C File Offset: 0x00076A3C
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (int* ptr3 = &textureNames)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2239]);
					}
				}
			}

			// Token: 0x06002C33 RID: 11315 RVA: 0x0007887C File Offset: 0x00076A7C
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0, 0] : ref *null)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr, target, numTextureNames, textureNames, GL.EntryPoints[2239]);
				}
			}

			// Token: 0x06002C34 RID: 11316 RVA: 0x000788B8 File Offset: 0x00076AB8
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (uint* ptr3 = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2239]);
					}
				}
			}

			// Token: 0x06002C35 RID: 11317 RVA: 0x00078908 File Offset: 0x00076B08
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (uint* ptr3 = &textureNames)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2239]);
					}
				}
			}

			// Token: 0x06002C36 RID: 11318 RVA: 0x00078948 File Offset: 0x00076B48
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0, 0] : ref *null)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr, target, numTextureNames, textureNames, GL.EntryPoints[2239]);
				}
			}

			// Token: 0x06002C37 RID: 11319 RVA: 0x00078984 File Offset: 0x00076B84
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames) where T0 : struct
			{
				fixed (T0* ptr = &vdpSurface)
				{
					T0* ptr2 = ptr;
					fixed (int* ptr3 = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2239]);
					}
				}
			}

			// Token: 0x06002C38 RID: 11320 RVA: 0x000789C0 File Offset: 0x00076BC0
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames) where T0 : struct
			{
				fixed (T0* ptr = &vdpSurface)
				{
					T0* ptr2 = ptr;
					fixed (int* ptr3 = &textureNames)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2239]);
					}
				}
			}

			// Token: 0x06002C39 RID: 11321 RVA: 0x000789E8 File Offset: 0x00076BE8
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames) where T0 : struct
			{
				fixed (T0* ptr = &vdpSurface)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr, target, numTextureNames, textureNames, GL.EntryPoints[2239]);
				}
			}

			// Token: 0x06002C3A RID: 11322 RVA: 0x00078A0C File Offset: 0x00076C0C
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames) where T0 : struct
			{
				fixed (T0* ptr = &vdpSurface)
				{
					T0* ptr2 = ptr;
					fixed (uint* ptr3 = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2239]);
					}
				}
			}

			// Token: 0x06002C3B RID: 11323 RVA: 0x00078A48 File Offset: 0x00076C48
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames) where T0 : struct
			{
				fixed (T0* ptr = &vdpSurface)
				{
					T0* ptr2 = ptr;
					fixed (uint* ptr3 = &textureNames)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2239]);
					}
				}
			}

			// Token: 0x06002C3C RID: 11324 RVA: 0x00078A70 File Offset: 0x00076C70
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterOutputSurface<T0>([In] [Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames) where T0 : struct
			{
				fixed (T0* ptr = &vdpSurface)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr, target, numTextureNames, textureNames, GL.EntryPoints[2239]);
				}
			}

			// Token: 0x06002C3D RID: 11325 RVA: 0x00078A94 File Offset: 0x00076C94
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface(IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames)
			{
				fixed (int* ptr = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), vdpSurface, target, numTextureNames, ptr, GL.EntryPoints[2240]);
				}
			}

			// Token: 0x06002C3E RID: 11326 RVA: 0x00078ACC File Offset: 0x00076CCC
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface(IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames)
			{
				fixed (int* ptr = &textureNames)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), vdpSurface, target, numTextureNames, ptr, GL.EntryPoints[2240]);
				}
			}

			// Token: 0x06002C3F RID: 11327 RVA: 0x00078AF0 File Offset: 0x00076CF0
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface(IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames)
			{
				return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), vdpSurface, target, numTextureNames, textureNames, GL.EntryPoints[2240]);
			}

			// Token: 0x06002C40 RID: 11328 RVA: 0x00078B08 File Offset: 0x00076D08
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface(IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames)
			{
				fixed (uint* ptr = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), vdpSurface, target, numTextureNames, ptr, GL.EntryPoints[2240]);
				}
			}

			// Token: 0x06002C41 RID: 11329 RVA: 0x00078B40 File Offset: 0x00076D40
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface(IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames)
			{
				fixed (uint* ptr = &textureNames)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), vdpSurface, target, numTextureNames, ptr, GL.EntryPoints[2240]);
				}
			}

			// Token: 0x06002C42 RID: 11330 RVA: 0x00078B64 File Offset: 0x00076D64
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface(IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames)
			{
				return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), vdpSurface, target, numTextureNames, textureNames, GL.EntryPoints[2240]);
			}

			// Token: 0x06002C43 RID: 11331 RVA: 0x00078B7C File Offset: 0x00076D7C
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (int* ptr3 = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2240]);
					}
				}
			}

			// Token: 0x06002C44 RID: 11332 RVA: 0x00078BC8 File Offset: 0x00076DC8
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (int* ptr3 = &textureNames)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2240]);
					}
				}
			}

			// Token: 0x06002C45 RID: 11333 RVA: 0x00078C04 File Offset: 0x00076E04
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0] : ref *null)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr, target, numTextureNames, textureNames, GL.EntryPoints[2240]);
				}
			}

			// Token: 0x06002C46 RID: 11334 RVA: 0x00078C3C File Offset: 0x00076E3C
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (uint* ptr3 = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2240]);
					}
				}
			}

			// Token: 0x06002C47 RID: 11335 RVA: 0x00078C88 File Offset: 0x00076E88
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (uint* ptr3 = &textureNames)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2240]);
					}
				}
			}

			// Token: 0x06002C48 RID: 11336 RVA: 0x00078CC4 File Offset: 0x00076EC4
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0] : ref *null)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr, target, numTextureNames, textureNames, GL.EntryPoints[2240]);
				}
			}

			// Token: 0x06002C49 RID: 11337 RVA: 0x00078CFC File Offset: 0x00076EFC
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (int* ptr3 = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2240]);
					}
				}
			}

			// Token: 0x06002C4A RID: 11338 RVA: 0x00078D4C File Offset: 0x00076F4C
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (int* ptr3 = &textureNames)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2240]);
					}
				}
			}

			// Token: 0x06002C4B RID: 11339 RVA: 0x00078D8C File Offset: 0x00076F8C
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0] : ref *null)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr, target, numTextureNames, textureNames, GL.EntryPoints[2240]);
				}
			}

			// Token: 0x06002C4C RID: 11340 RVA: 0x00078DC8 File Offset: 0x00076FC8
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (uint* ptr3 = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2240]);
					}
				}
			}

			// Token: 0x06002C4D RID: 11341 RVA: 0x00078E18 File Offset: 0x00077018
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (uint* ptr3 = &textureNames)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2240]);
					}
				}
			}

			// Token: 0x06002C4E RID: 11342 RVA: 0x00078E58 File Offset: 0x00077058
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0] : ref *null)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr, target, numTextureNames, textureNames, GL.EntryPoints[2240]);
				}
			}

			// Token: 0x06002C4F RID: 11343 RVA: 0x00078E94 File Offset: 0x00077094
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (int* ptr3 = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2240]);
					}
				}
			}

			// Token: 0x06002C50 RID: 11344 RVA: 0x00078EE4 File Offset: 0x000770E4
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (int* ptr3 = &textureNames)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2240]);
					}
				}
			}

			// Token: 0x06002C51 RID: 11345 RVA: 0x00078F24 File Offset: 0x00077124
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0, 0] : ref *null)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr, target, numTextureNames, textureNames, GL.EntryPoints[2240]);
				}
			}

			// Token: 0x06002C52 RID: 11346 RVA: 0x00078F60 File Offset: 0x00077160
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (uint* ptr3 = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2240]);
					}
				}
			}

			// Token: 0x06002C53 RID: 11347 RVA: 0x00078FB0 File Offset: 0x000771B0
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0, 0] : ref *null)
				{
					T0* ptr2 = ptr;
					fixed (uint* ptr3 = &textureNames)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2240]);
					}
				}
			}

			// Token: 0x06002C54 RID: 11348 RVA: 0x00078FF0 File Offset: 0x000771F0
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames) where T0 : struct
			{
				fixed (T0* ptr = ref (vdpSurface != null && vdpSurface.Length != 0) ? ref vdpSurface[0, 0, 0] : ref *null)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr, target, numTextureNames, textureNames, GL.EntryPoints[2240]);
				}
			}

			// Token: 0x06002C55 RID: 11349 RVA: 0x0007902C File Offset: 0x0007722C
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames) where T0 : struct
			{
				fixed (T0* ptr = &vdpSurface)
				{
					T0* ptr2 = ptr;
					fixed (int* ptr3 = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2240]);
					}
				}
			}

			// Token: 0x06002C56 RID: 11350 RVA: 0x00079068 File Offset: 0x00077268
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames) where T0 : struct
			{
				fixed (T0* ptr = &vdpSurface)
				{
					T0* ptr2 = ptr;
					fixed (int* ptr3 = &textureNames)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2240]);
					}
				}
			}

			// Token: 0x06002C57 RID: 11351 RVA: 0x00079090 File Offset: 0x00077290
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames) where T0 : struct
			{
				fixed (T0* ptr = &vdpSurface)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr, target, numTextureNames, textureNames, GL.EntryPoints[2240]);
				}
			}

			// Token: 0x06002C58 RID: 11352 RVA: 0x000790B4 File Offset: 0x000772B4
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames) where T0 : struct
			{
				fixed (T0* ptr = &vdpSurface)
				{
					T0* ptr2 = ptr;
					fixed (uint* ptr3 = ref (textureNames != null && textureNames.Length != 0) ? ref textureNames[0] : ref *null)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2240]);
					}
				}
			}

			// Token: 0x06002C59 RID: 11353 RVA: 0x000790F0 File Offset: 0x000772F0
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames) where T0 : struct
			{
				fixed (T0* ptr = &vdpSurface)
				{
					T0* ptr2 = ptr;
					fixed (uint* ptr3 = &textureNames)
					{
						return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr2, target, numTextureNames, ptr3, GL.EntryPoints[2240]);
					}
				}
			}

			// Token: 0x06002C5A RID: 11354 RVA: 0x00079118 File Offset: 0x00077318
			[CLSCompliant(false)]
			public unsafe static IntPtr VDPAURegisterVideoSurface<T0>([In] [Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames) where T0 : struct
			{
				fixed (T0* ptr = &vdpSurface)
				{
					return calli(System.IntPtr(System.IntPtr,System.Int32,System.Int32,System.UInt32*), ptr, target, numTextureNames, textureNames, GL.EntryPoints[2240]);
				}
			}

			// Token: 0x06002C5B RID: 11355 RVA: 0x0007913C File Offset: 0x0007733C
			public static void VDPAUSurfaceAccess(IntPtr surface, NvVdpauInterop access)
			{
				calli(System.Void(System.IntPtr,System.Int32), surface, access, GL.EntryPoints[2241]);
			}

			// Token: 0x06002C5C RID: 11356 RVA: 0x00079150 File Offset: 0x00077350
			[CLSCompliant(false)]
			public unsafe static void VDPAUUnmapSurfaces(int numSurface, IntPtr[] surfaces)
			{
				fixed (IntPtr* ptr = ref (surfaces != null && surfaces.Length != 0) ? ref surfaces[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr*), numSurface, ptr, GL.EntryPoints[2242]);
				}
			}

			// Token: 0x06002C5D RID: 11357 RVA: 0x00079184 File Offset: 0x00077384
			[CLSCompliant(false)]
			public unsafe static void VDPAUUnmapSurfaces(int numSurface, ref IntPtr surfaces)
			{
				fixed (IntPtr* ptr = &surfaces)
				{
					calli(System.Void(System.Int32,System.IntPtr*), numSurface, ptr, GL.EntryPoints[2242]);
				}
			}

			// Token: 0x06002C5E RID: 11358 RVA: 0x000791A8 File Offset: 0x000773A8
			[CLSCompliant(false)]
			public unsafe static void VDPAUUnmapSurfaces(int numSurface, IntPtr* surfaces)
			{
				calli(System.Void(System.Int32,System.IntPtr*), numSurface, surfaces, GL.EntryPoints[2242]);
			}

			// Token: 0x06002C5F RID: 11359 RVA: 0x000791BC File Offset: 0x000773BC
			public static void VDPAUUnregisterSurface(IntPtr surface)
			{
				calli(System.Void(System.IntPtr), surface, GL.EntryPoints[2243]);
			}

			// Token: 0x06002C60 RID: 11360 RVA: 0x000791D0 File Offset: 0x000773D0
			public static void Vertex2h(Half x, Half y)
			{
				calli(System.Void(OpenTK.Half,OpenTK.Half), x, y, GL.EntryPoints[2250]);
			}

			// Token: 0x06002C61 RID: 11361 RVA: 0x000791E4 File Offset: 0x000773E4
			[CLSCompliant(false)]
			public unsafe static void Vertex2h(Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[2251]);
				}
			}

			// Token: 0x06002C62 RID: 11362 RVA: 0x00079218 File Offset: 0x00077418
			[CLSCompliant(false)]
			public unsafe static void Vertex2h(ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[2251]);
				}
			}

			// Token: 0x06002C63 RID: 11363 RVA: 0x0007923C File Offset: 0x0007743C
			[CLSCompliant(false)]
			public unsafe static void Vertex2h(Half* v)
			{
				calli(System.Void(OpenTK.Half*), v, GL.EntryPoints[2251]);
			}

			// Token: 0x06002C64 RID: 11364 RVA: 0x00079250 File Offset: 0x00077450
			public static void Vertex3h(Half x, Half y, Half z)
			{
				calli(System.Void(OpenTK.Half,OpenTK.Half,OpenTK.Half), x, y, z, GL.EntryPoints[2264]);
			}

			// Token: 0x06002C65 RID: 11365 RVA: 0x00079268 File Offset: 0x00077468
			[CLSCompliant(false)]
			public unsafe static void Vertex3h(Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[2265]);
				}
			}

			// Token: 0x06002C66 RID: 11366 RVA: 0x0007929C File Offset: 0x0007749C
			[CLSCompliant(false)]
			public unsafe static void Vertex3h(ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[2265]);
				}
			}

			// Token: 0x06002C67 RID: 11367 RVA: 0x000792C0 File Offset: 0x000774C0
			[CLSCompliant(false)]
			public unsafe static void Vertex3h(Half* v)
			{
				calli(System.Void(OpenTK.Half*), v, GL.EntryPoints[2265]);
			}

			// Token: 0x06002C68 RID: 11368 RVA: 0x000792D4 File Offset: 0x000774D4
			public static void Vertex4h(Half x, Half y, Half z, Half w)
			{
				calli(System.Void(OpenTK.Half,OpenTK.Half,OpenTK.Half,OpenTK.Half), x, y, z, w, GL.EntryPoints[2278]);
			}

			// Token: 0x06002C69 RID: 11369 RVA: 0x000792EC File Offset: 0x000774EC
			[CLSCompliant(false)]
			public unsafe static void Vertex4h(Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[2279]);
				}
			}

			// Token: 0x06002C6A RID: 11370 RVA: 0x00079320 File Offset: 0x00077520
			[CLSCompliant(false)]
			public unsafe static void Vertex4h(ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(OpenTK.Half*), ptr, GL.EntryPoints[2279]);
				}
			}

			// Token: 0x06002C6B RID: 11371 RVA: 0x00079344 File Offset: 0x00077544
			[CLSCompliant(false)]
			public unsafe static void Vertex4h(Half* v)
			{
				calli(System.Void(OpenTK.Half*), v, GL.EntryPoints[2279]);
			}

			// Token: 0x06002C6C RID: 11372 RVA: 0x00079358 File Offset: 0x00077558
			public static void VertexArrayRange(int length, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.IntPtr), length, pointer, GL.EntryPoints[2295]);
			}

			// Token: 0x06002C6D RID: 11373 RVA: 0x0007936C File Offset: 0x0007756C
			[CLSCompliant(false)]
			public unsafe static void VertexArrayRange<T1>(int length, [In] [Out] T1[] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), length, ptr, GL.EntryPoints[2295]);
				}
			}

			// Token: 0x06002C6E RID: 11374 RVA: 0x000793A0 File Offset: 0x000775A0
			[CLSCompliant(false)]
			public unsafe static void VertexArrayRange<T1>(int length, [In] [Out] T1[,] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), length, ptr, GL.EntryPoints[2295]);
				}
			}

			// Token: 0x06002C6F RID: 11375 RVA: 0x000793D8 File Offset: 0x000775D8
			[CLSCompliant(false)]
			public unsafe static void VertexArrayRange<T1>(int length, [In] [Out] T1[,,] pointer) where T1 : struct
			{
				fixed (T1* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), length, ptr, GL.EntryPoints[2295]);
				}
			}

			// Token: 0x06002C70 RID: 11376 RVA: 0x00079414 File Offset: 0x00077614
			public unsafe static void VertexArrayRange<T1>(int length, [In] [Out] ref T1 pointer) where T1 : struct
			{
				fixed (T1* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.IntPtr), length, ptr, GL.EntryPoints[2295]);
				}
			}

			// Token: 0x06002C71 RID: 11377 RVA: 0x00079438 File Offset: 0x00077638
			[CLSCompliant(false)]
			public static void VertexAttrib1(int index, double x)
			{
				calli(System.Void(System.UInt32,System.Double), index, x, GL.EntryPoints[2310]);
			}

			// Token: 0x06002C72 RID: 11378 RVA: 0x0007944C File Offset: 0x0007764C
			[CLSCompliant(false)]
			public static void VertexAttrib1(uint index, double x)
			{
				calli(System.Void(System.UInt32,System.Double), index, x, GL.EntryPoints[2310]);
			}

			// Token: 0x06002C73 RID: 11379 RVA: 0x00079460 File Offset: 0x00077660
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib1(int index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2313]);
			}

			// Token: 0x06002C74 RID: 11380 RVA: 0x00079474 File Offset: 0x00077674
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib1(uint index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2313]);
			}

			// Token: 0x06002C75 RID: 11381 RVA: 0x00079488 File Offset: 0x00077688
			[CLSCompliant(false)]
			public static void VertexAttrib1(int index, float x)
			{
				calli(System.Void(System.UInt32,System.Single), index, x, GL.EntryPoints[2316]);
			}

			// Token: 0x06002C76 RID: 11382 RVA: 0x0007949C File Offset: 0x0007769C
			[CLSCompliant(false)]
			public static void VertexAttrib1(uint index, float x)
			{
				calli(System.Void(System.UInt32,System.Single), index, x, GL.EntryPoints[2316]);
			}

			// Token: 0x06002C77 RID: 11383 RVA: 0x000794B0 File Offset: 0x000776B0
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib1(int index, float* v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2319]);
			}

			// Token: 0x06002C78 RID: 11384 RVA: 0x000794C4 File Offset: 0x000776C4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib1(uint index, float* v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2319]);
			}

			// Token: 0x06002C79 RID: 11385 RVA: 0x000794D8 File Offset: 0x000776D8
			[CLSCompliant(false)]
			public static void VertexAttrib1h(int index, Half x)
			{
				calli(System.Void(System.UInt32,OpenTK.Half), index, x, GL.EntryPoints[2320]);
			}

			// Token: 0x06002C7A RID: 11386 RVA: 0x000794EC File Offset: 0x000776EC
			[CLSCompliant(false)]
			public static void VertexAttrib1h(uint index, Half x)
			{
				calli(System.Void(System.UInt32,OpenTK.Half), index, x, GL.EntryPoints[2320]);
			}

			// Token: 0x06002C7B RID: 11387 RVA: 0x00079500 File Offset: 0x00077700
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib1h(int index, Half* v)
			{
				calli(System.Void(System.UInt32,OpenTK.Half*), index, v, GL.EntryPoints[2321]);
			}

			// Token: 0x06002C7C RID: 11388 RVA: 0x00079514 File Offset: 0x00077714
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib1h(uint index, Half* v)
			{
				calli(System.Void(System.UInt32,OpenTK.Half*), index, v, GL.EntryPoints[2321]);
			}

			// Token: 0x06002C7D RID: 11389 RVA: 0x00079528 File Offset: 0x00077728
			[CLSCompliant(false)]
			public static void VertexAttrib1(int index, short x)
			{
				calli(System.Void(System.UInt32,System.Int16), index, x, GL.EntryPoints[2324]);
			}

			// Token: 0x06002C7E RID: 11390 RVA: 0x0007953C File Offset: 0x0007773C
			[CLSCompliant(false)]
			public static void VertexAttrib1(uint index, short x)
			{
				calli(System.Void(System.UInt32,System.Int16), index, x, GL.EntryPoints[2324]);
			}

			// Token: 0x06002C7F RID: 11391 RVA: 0x00079550 File Offset: 0x00077750
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib1(int index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2327]);
			}

			// Token: 0x06002C80 RID: 11392 RVA: 0x00079564 File Offset: 0x00077764
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib1(uint index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2327]);
			}

			// Token: 0x06002C81 RID: 11393 RVA: 0x00079578 File Offset: 0x00077778
			[CLSCompliant(false)]
			public static void VertexAttrib2(int index, double x, double y)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double), index, x, y, GL.EntryPoints[2330]);
			}

			// Token: 0x06002C82 RID: 11394 RVA: 0x00079590 File Offset: 0x00077790
			[CLSCompliant(false)]
			public static void VertexAttrib2(uint index, double x, double y)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double), index, x, y, GL.EntryPoints[2330]);
			}

			// Token: 0x06002C83 RID: 11395 RVA: 0x000795A8 File Offset: 0x000777A8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2333]);
				}
			}

			// Token: 0x06002C84 RID: 11396 RVA: 0x000795DC File Offset: 0x000777DC
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2333]);
				}
			}

			// Token: 0x06002C85 RID: 11397 RVA: 0x00079600 File Offset: 0x00077800
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2333]);
			}

			// Token: 0x06002C86 RID: 11398 RVA: 0x00079614 File Offset: 0x00077814
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2333]);
				}
			}

			// Token: 0x06002C87 RID: 11399 RVA: 0x00079648 File Offset: 0x00077848
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2333]);
				}
			}

			// Token: 0x06002C88 RID: 11400 RVA: 0x0007966C File Offset: 0x0007786C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2333]);
			}

			// Token: 0x06002C89 RID: 11401 RVA: 0x00079680 File Offset: 0x00077880
			[CLSCompliant(false)]
			public static void VertexAttrib2(int index, float x, float y)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single), index, x, y, GL.EntryPoints[2336]);
			}

			// Token: 0x06002C8A RID: 11402 RVA: 0x00079698 File Offset: 0x00077898
			[CLSCompliant(false)]
			public static void VertexAttrib2(uint index, float x, float y)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single), index, x, y, GL.EntryPoints[2336]);
			}

			// Token: 0x06002C8B RID: 11403 RVA: 0x000796B0 File Offset: 0x000778B0
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2339]);
				}
			}

			// Token: 0x06002C8C RID: 11404 RVA: 0x000796E4 File Offset: 0x000778E4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2339]);
				}
			}

			// Token: 0x06002C8D RID: 11405 RVA: 0x00079708 File Offset: 0x00077908
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, float* v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2339]);
			}

			// Token: 0x06002C8E RID: 11406 RVA: 0x0007971C File Offset: 0x0007791C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2339]);
				}
			}

			// Token: 0x06002C8F RID: 11407 RVA: 0x00079750 File Offset: 0x00077950
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2339]);
				}
			}

			// Token: 0x06002C90 RID: 11408 RVA: 0x00079774 File Offset: 0x00077974
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, float* v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2339]);
			}

			// Token: 0x06002C91 RID: 11409 RVA: 0x00079788 File Offset: 0x00077988
			[CLSCompliant(false)]
			public static void VertexAttrib2h(int index, Half x, Half y)
			{
				calli(System.Void(System.UInt32,OpenTK.Half,OpenTK.Half), index, x, y, GL.EntryPoints[2340]);
			}

			// Token: 0x06002C92 RID: 11410 RVA: 0x000797A0 File Offset: 0x000779A0
			[CLSCompliant(false)]
			public static void VertexAttrib2h(uint index, Half x, Half y)
			{
				calli(System.Void(System.UInt32,OpenTK.Half,OpenTK.Half), index, x, y, GL.EntryPoints[2340]);
			}

			// Token: 0x06002C93 RID: 11411 RVA: 0x000797B8 File Offset: 0x000779B8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2h(int index, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,OpenTK.Half*), index, ptr, GL.EntryPoints[2341]);
				}
			}

			// Token: 0x06002C94 RID: 11412 RVA: 0x000797EC File Offset: 0x000779EC
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2h(int index, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.UInt32,OpenTK.Half*), index, ptr, GL.EntryPoints[2341]);
				}
			}

			// Token: 0x06002C95 RID: 11413 RVA: 0x00079810 File Offset: 0x00077A10
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2h(int index, Half* v)
			{
				calli(System.Void(System.UInt32,OpenTK.Half*), index, v, GL.EntryPoints[2341]);
			}

			// Token: 0x06002C96 RID: 11414 RVA: 0x00079824 File Offset: 0x00077A24
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2h(uint index, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,OpenTK.Half*), index, ptr, GL.EntryPoints[2341]);
				}
			}

			// Token: 0x06002C97 RID: 11415 RVA: 0x00079858 File Offset: 0x00077A58
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2h(uint index, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.UInt32,OpenTK.Half*), index, ptr, GL.EntryPoints[2341]);
				}
			}

			// Token: 0x06002C98 RID: 11416 RVA: 0x0007987C File Offset: 0x00077A7C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2h(uint index, Half* v)
			{
				calli(System.Void(System.UInt32,OpenTK.Half*), index, v, GL.EntryPoints[2341]);
			}

			// Token: 0x06002C99 RID: 11417 RVA: 0x00079890 File Offset: 0x00077A90
			[CLSCompliant(false)]
			public static void VertexAttrib2(int index, short x, short y)
			{
				calli(System.Void(System.UInt32,System.Int16,System.Int16), index, x, y, GL.EntryPoints[2344]);
			}

			// Token: 0x06002C9A RID: 11418 RVA: 0x000798A8 File Offset: 0x00077AA8
			[CLSCompliant(false)]
			public static void VertexAttrib2(uint index, short x, short y)
			{
				calli(System.Void(System.UInt32,System.Int16,System.Int16), index, x, y, GL.EntryPoints[2344]);
			}

			// Token: 0x06002C9B RID: 11419 RVA: 0x000798C0 File Offset: 0x00077AC0
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2347]);
				}
			}

			// Token: 0x06002C9C RID: 11420 RVA: 0x000798F4 File Offset: 0x00077AF4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2347]);
				}
			}

			// Token: 0x06002C9D RID: 11421 RVA: 0x00079918 File Offset: 0x00077B18
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(int index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2347]);
			}

			// Token: 0x06002C9E RID: 11422 RVA: 0x0007992C File Offset: 0x00077B2C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2347]);
				}
			}

			// Token: 0x06002C9F RID: 11423 RVA: 0x00079960 File Offset: 0x00077B60
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2347]);
				}
			}

			// Token: 0x06002CA0 RID: 11424 RVA: 0x00079984 File Offset: 0x00077B84
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib2(uint index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2347]);
			}

			// Token: 0x06002CA1 RID: 11425 RVA: 0x00079998 File Offset: 0x00077B98
			[CLSCompliant(false)]
			public static void VertexAttrib3(int index, double x, double y, double z)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double,System.Double), index, x, y, z, GL.EntryPoints[2350]);
			}

			// Token: 0x06002CA2 RID: 11426 RVA: 0x000799B0 File Offset: 0x00077BB0
			[CLSCompliant(false)]
			public static void VertexAttrib3(uint index, double x, double y, double z)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double,System.Double), index, x, y, z, GL.EntryPoints[2350]);
			}

			// Token: 0x06002CA3 RID: 11427 RVA: 0x000799C8 File Offset: 0x00077BC8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2353]);
				}
			}

			// Token: 0x06002CA4 RID: 11428 RVA: 0x000799FC File Offset: 0x00077BFC
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2353]);
				}
			}

			// Token: 0x06002CA5 RID: 11429 RVA: 0x00079A20 File Offset: 0x00077C20
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2353]);
			}

			// Token: 0x06002CA6 RID: 11430 RVA: 0x00079A34 File Offset: 0x00077C34
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2353]);
				}
			}

			// Token: 0x06002CA7 RID: 11431 RVA: 0x00079A68 File Offset: 0x00077C68
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2353]);
				}
			}

			// Token: 0x06002CA8 RID: 11432 RVA: 0x00079A8C File Offset: 0x00077C8C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2353]);
			}

			// Token: 0x06002CA9 RID: 11433 RVA: 0x00079AA0 File Offset: 0x00077CA0
			[CLSCompliant(false)]
			public static void VertexAttrib3(int index, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single), index, x, y, z, GL.EntryPoints[2356]);
			}

			// Token: 0x06002CAA RID: 11434 RVA: 0x00079AB8 File Offset: 0x00077CB8
			[CLSCompliant(false)]
			public static void VertexAttrib3(uint index, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single), index, x, y, z, GL.EntryPoints[2356]);
			}

			// Token: 0x06002CAB RID: 11435 RVA: 0x00079AD0 File Offset: 0x00077CD0
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2359]);
				}
			}

			// Token: 0x06002CAC RID: 11436 RVA: 0x00079B04 File Offset: 0x00077D04
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2359]);
				}
			}

			// Token: 0x06002CAD RID: 11437 RVA: 0x00079B28 File Offset: 0x00077D28
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, float* v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2359]);
			}

			// Token: 0x06002CAE RID: 11438 RVA: 0x00079B3C File Offset: 0x00077D3C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2359]);
				}
			}

			// Token: 0x06002CAF RID: 11439 RVA: 0x00079B70 File Offset: 0x00077D70
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2359]);
				}
			}

			// Token: 0x06002CB0 RID: 11440 RVA: 0x00079B94 File Offset: 0x00077D94
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, float* v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2359]);
			}

			// Token: 0x06002CB1 RID: 11441 RVA: 0x00079BA8 File Offset: 0x00077DA8
			[CLSCompliant(false)]
			public static void VertexAttrib3h(int index, Half x, Half y, Half z)
			{
				calli(System.Void(System.UInt32,OpenTK.Half,OpenTK.Half,OpenTK.Half), index, x, y, z, GL.EntryPoints[2360]);
			}

			// Token: 0x06002CB2 RID: 11442 RVA: 0x00079BC0 File Offset: 0x00077DC0
			[CLSCompliant(false)]
			public static void VertexAttrib3h(uint index, Half x, Half y, Half z)
			{
				calli(System.Void(System.UInt32,OpenTK.Half,OpenTK.Half,OpenTK.Half), index, x, y, z, GL.EntryPoints[2360]);
			}

			// Token: 0x06002CB3 RID: 11443 RVA: 0x00079BD8 File Offset: 0x00077DD8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3h(int index, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,OpenTK.Half*), index, ptr, GL.EntryPoints[2361]);
				}
			}

			// Token: 0x06002CB4 RID: 11444 RVA: 0x00079C0C File Offset: 0x00077E0C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3h(int index, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.UInt32,OpenTK.Half*), index, ptr, GL.EntryPoints[2361]);
				}
			}

			// Token: 0x06002CB5 RID: 11445 RVA: 0x00079C30 File Offset: 0x00077E30
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3h(int index, Half* v)
			{
				calli(System.Void(System.UInt32,OpenTK.Half*), index, v, GL.EntryPoints[2361]);
			}

			// Token: 0x06002CB6 RID: 11446 RVA: 0x00079C44 File Offset: 0x00077E44
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3h(uint index, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,OpenTK.Half*), index, ptr, GL.EntryPoints[2361]);
				}
			}

			// Token: 0x06002CB7 RID: 11447 RVA: 0x00079C78 File Offset: 0x00077E78
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3h(uint index, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.UInt32,OpenTK.Half*), index, ptr, GL.EntryPoints[2361]);
				}
			}

			// Token: 0x06002CB8 RID: 11448 RVA: 0x00079C9C File Offset: 0x00077E9C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3h(uint index, Half* v)
			{
				calli(System.Void(System.UInt32,OpenTK.Half*), index, v, GL.EntryPoints[2361]);
			}

			// Token: 0x06002CB9 RID: 11449 RVA: 0x00079CB0 File Offset: 0x00077EB0
			[CLSCompliant(false)]
			public static void VertexAttrib3(int index, short x, short y, short z)
			{
				calli(System.Void(System.UInt32,System.Int16,System.Int16,System.Int16), index, x, y, z, GL.EntryPoints[2364]);
			}

			// Token: 0x06002CBA RID: 11450 RVA: 0x00079CC8 File Offset: 0x00077EC8
			[CLSCompliant(false)]
			public static void VertexAttrib3(uint index, short x, short y, short z)
			{
				calli(System.Void(System.UInt32,System.Int16,System.Int16,System.Int16), index, x, y, z, GL.EntryPoints[2364]);
			}

			// Token: 0x06002CBB RID: 11451 RVA: 0x00079CE0 File Offset: 0x00077EE0
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2367]);
				}
			}

			// Token: 0x06002CBC RID: 11452 RVA: 0x00079D14 File Offset: 0x00077F14
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2367]);
				}
			}

			// Token: 0x06002CBD RID: 11453 RVA: 0x00079D38 File Offset: 0x00077F38
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(int index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2367]);
			}

			// Token: 0x06002CBE RID: 11454 RVA: 0x00079D4C File Offset: 0x00077F4C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2367]);
				}
			}

			// Token: 0x06002CBF RID: 11455 RVA: 0x00079D80 File Offset: 0x00077F80
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2367]);
				}
			}

			// Token: 0x06002CC0 RID: 11456 RVA: 0x00079DA4 File Offset: 0x00077FA4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib3(uint index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2367]);
			}

			// Token: 0x06002CC1 RID: 11457 RVA: 0x00079DB8 File Offset: 0x00077FB8
			[CLSCompliant(false)]
			public static void VertexAttrib4(int index, double x, double y, double z, double w)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double,System.Double,System.Double), index, x, y, z, w, GL.EntryPoints[2372]);
			}

			// Token: 0x06002CC2 RID: 11458 RVA: 0x00079DD0 File Offset: 0x00077FD0
			[CLSCompliant(false)]
			public static void VertexAttrib4(uint index, double x, double y, double z, double w)
			{
				calli(System.Void(System.UInt32,System.Double,System.Double,System.Double,System.Double), index, x, y, z, w, GL.EntryPoints[2372]);
			}

			// Token: 0x06002CC3 RID: 11459 RVA: 0x00079DE8 File Offset: 0x00077FE8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2375]);
				}
			}

			// Token: 0x06002CC4 RID: 11460 RVA: 0x00079E1C File Offset: 0x0007801C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2375]);
				}
			}

			// Token: 0x06002CC5 RID: 11461 RVA: 0x00079E40 File Offset: 0x00078040
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2375]);
			}

			// Token: 0x06002CC6 RID: 11462 RVA: 0x00079E54 File Offset: 0x00078054
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2375]);
				}
			}

			// Token: 0x06002CC7 RID: 11463 RVA: 0x00079E88 File Offset: 0x00078088
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Double*), index, ptr, GL.EntryPoints[2375]);
				}
			}

			// Token: 0x06002CC8 RID: 11464 RVA: 0x00079EAC File Offset: 0x000780AC
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, double* v)
			{
				calli(System.Void(System.UInt32,System.Double*), index, v, GL.EntryPoints[2375]);
			}

			// Token: 0x06002CC9 RID: 11465 RVA: 0x00079EC0 File Offset: 0x000780C0
			[CLSCompliant(false)]
			public static void VertexAttrib4(int index, float x, float y, float z, float w)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single), index, x, y, z, w, GL.EntryPoints[2378]);
			}

			// Token: 0x06002CCA RID: 11466 RVA: 0x00079ED8 File Offset: 0x000780D8
			[CLSCompliant(false)]
			public static void VertexAttrib4(uint index, float x, float y, float z, float w)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single), index, x, y, z, w, GL.EntryPoints[2378]);
			}

			// Token: 0x06002CCB RID: 11467 RVA: 0x00079EF0 File Offset: 0x000780F0
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2381]);
				}
			}

			// Token: 0x06002CCC RID: 11468 RVA: 0x00079F24 File Offset: 0x00078124
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2381]);
				}
			}

			// Token: 0x06002CCD RID: 11469 RVA: 0x00079F48 File Offset: 0x00078148
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, float* v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2381]);
			}

			// Token: 0x06002CCE RID: 11470 RVA: 0x00079F5C File Offset: 0x0007815C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2381]);
				}
			}

			// Token: 0x06002CCF RID: 11471 RVA: 0x00079F90 File Offset: 0x00078190
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[2381]);
				}
			}

			// Token: 0x06002CD0 RID: 11472 RVA: 0x00079FB4 File Offset: 0x000781B4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, float* v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[2381]);
			}

			// Token: 0x06002CD1 RID: 11473 RVA: 0x00079FC8 File Offset: 0x000781C8
			[CLSCompliant(false)]
			public static void VertexAttrib4h(int index, Half x, Half y, Half z, Half w)
			{
				calli(System.Void(System.UInt32,OpenTK.Half,OpenTK.Half,OpenTK.Half,OpenTK.Half), index, x, y, z, w, GL.EntryPoints[2382]);
			}

			// Token: 0x06002CD2 RID: 11474 RVA: 0x00079FE0 File Offset: 0x000781E0
			[CLSCompliant(false)]
			public static void VertexAttrib4h(uint index, Half x, Half y, Half z, Half w)
			{
				calli(System.Void(System.UInt32,OpenTK.Half,OpenTK.Half,OpenTK.Half,OpenTK.Half), index, x, y, z, w, GL.EntryPoints[2382]);
			}

			// Token: 0x06002CD3 RID: 11475 RVA: 0x00079FF8 File Offset: 0x000781F8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4h(int index, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,OpenTK.Half*), index, ptr, GL.EntryPoints[2383]);
				}
			}

			// Token: 0x06002CD4 RID: 11476 RVA: 0x0007A02C File Offset: 0x0007822C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4h(int index, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.UInt32,OpenTK.Half*), index, ptr, GL.EntryPoints[2383]);
				}
			}

			// Token: 0x06002CD5 RID: 11477 RVA: 0x0007A050 File Offset: 0x00078250
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4h(int index, Half* v)
			{
				calli(System.Void(System.UInt32,OpenTK.Half*), index, v, GL.EntryPoints[2383]);
			}

			// Token: 0x06002CD6 RID: 11478 RVA: 0x0007A064 File Offset: 0x00078264
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4h(uint index, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,OpenTK.Half*), index, ptr, GL.EntryPoints[2383]);
				}
			}

			// Token: 0x06002CD7 RID: 11479 RVA: 0x0007A098 File Offset: 0x00078298
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4h(uint index, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.UInt32,OpenTK.Half*), index, ptr, GL.EntryPoints[2383]);
				}
			}

			// Token: 0x06002CD8 RID: 11480 RVA: 0x0007A0BC File Offset: 0x000782BC
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4h(uint index, Half* v)
			{
				calli(System.Void(System.UInt32,OpenTK.Half*), index, v, GL.EntryPoints[2383]);
			}

			// Token: 0x06002CD9 RID: 11481 RVA: 0x0007A0D0 File Offset: 0x000782D0
			[CLSCompliant(false)]
			public static void VertexAttrib4(int index, short x, short y, short z, short w)
			{
				calli(System.Void(System.UInt32,System.Int16,System.Int16,System.Int16,System.Int16), index, x, y, z, w, GL.EntryPoints[2402]);
			}

			// Token: 0x06002CDA RID: 11482 RVA: 0x0007A0E8 File Offset: 0x000782E8
			[CLSCompliant(false)]
			public static void VertexAttrib4(uint index, short x, short y, short z, short w)
			{
				calli(System.Void(System.UInt32,System.Int16,System.Int16,System.Int16,System.Int16), index, x, y, z, w, GL.EntryPoints[2402]);
			}

			// Token: 0x06002CDB RID: 11483 RVA: 0x0007A100 File Offset: 0x00078300
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2405]);
				}
			}

			// Token: 0x06002CDC RID: 11484 RVA: 0x0007A134 File Offset: 0x00078334
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2405]);
				}
			}

			// Token: 0x06002CDD RID: 11485 RVA: 0x0007A158 File Offset: 0x00078358
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2405]);
			}

			// Token: 0x06002CDE RID: 11486 RVA: 0x0007A16C File Offset: 0x0007836C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2405]);
				}
			}

			// Token: 0x06002CDF RID: 11487 RVA: 0x0007A1A0 File Offset: 0x000783A0
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int16*), index, ptr, GL.EntryPoints[2405]);
				}
			}

			// Token: 0x06002CE0 RID: 11488 RVA: 0x0007A1C4 File Offset: 0x000783C4
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, short* v)
			{
				calli(System.Void(System.UInt32,System.Int16*), index, v, GL.EntryPoints[2405]);
			}

			// Token: 0x06002CE1 RID: 11489 RVA: 0x0007A1D8 File Offset: 0x000783D8
			[CLSCompliant(false)]
			public static void VertexAttrib4(int index, byte x, byte y, byte z, byte w)
			{
				calli(System.Void(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte), index, x, y, z, w, GL.EntryPoints[2406]);
			}

			// Token: 0x06002CE2 RID: 11490 RVA: 0x0007A1F0 File Offset: 0x000783F0
			[CLSCompliant(false)]
			public static void VertexAttrib4(uint index, byte x, byte y, byte z, byte w)
			{
				calli(System.Void(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte), index, x, y, z, w, GL.EntryPoints[2406]);
			}

			// Token: 0x06002CE3 RID: 11491 RVA: 0x0007A208 File Offset: 0x00078408
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, byte[] v)
			{
				fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2409]);
				}
			}

			// Token: 0x06002CE4 RID: 11492 RVA: 0x0007A23C File Offset: 0x0007843C
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, ref byte v)
			{
				fixed (byte* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2409]);
				}
			}

			// Token: 0x06002CE5 RID: 11493 RVA: 0x0007A260 File Offset: 0x00078460
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(int index, byte* v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[2409]);
			}

			// Token: 0x06002CE6 RID: 11494 RVA: 0x0007A274 File Offset: 0x00078474
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, byte[] v)
			{
				fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2409]);
				}
			}

			// Token: 0x06002CE7 RID: 11495 RVA: 0x0007A2A8 File Offset: 0x000784A8
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, ref byte v)
			{
				fixed (byte* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Byte*), index, ptr, GL.EntryPoints[2409]);
				}
			}

			// Token: 0x06002CE8 RID: 11496 RVA: 0x0007A2CC File Offset: 0x000784CC
			[CLSCompliant(false)]
			public unsafe static void VertexAttrib4(uint index, byte* v)
			{
				calli(System.Void(System.UInt32,System.Byte*), index, v, GL.EntryPoints[2409]);
			}

			// Token: 0x06002CE9 RID: 11497 RVA: 0x0007A2E0 File Offset: 0x000784E0
			[CLSCompliant(false)]
			public static void VertexAttribFormat(int index, int size, NvVertexBufferUnifiedMemory type, bool normalized, int stride)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32), index, size, type, normalized, stride, GL.EntryPoints[2419]);
			}

			// Token: 0x06002CEA RID: 11498 RVA: 0x0007A2F8 File Offset: 0x000784F8
			[CLSCompliant(false)]
			public static void VertexAttribFormat(uint index, int size, NvVertexBufferUnifiedMemory type, bool normalized, int stride)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32), index, size, type, normalized, stride, GL.EntryPoints[2419]);
			}

			// Token: 0x06002CEB RID: 11499 RVA: 0x0007A310 File Offset: 0x00078510
			[CLSCompliant(false)]
			public static void VertexAttribIFormat(int index, int size, NvVertexBufferUnifiedMemory type, int stride)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), index, size, type, stride, GL.EntryPoints[2461]);
			}

			// Token: 0x06002CEC RID: 11500 RVA: 0x0007A328 File Offset: 0x00078528
			[CLSCompliant(false)]
			public static void VertexAttribIFormat(uint index, int size, NvVertexBufferUnifiedMemory type, int stride)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), index, size, type, stride, GL.EntryPoints[2461]);
			}

			// Token: 0x06002CED RID: 11501 RVA: 0x0007A340 File Offset: 0x00078540
			[CLSCompliant(false)]
			public static void VertexAttribL1(int index, long x)
			{
				calli(System.Void(System.UInt32,System.Int64), index, x, GL.EntryPoints[2468]);
			}

			// Token: 0x06002CEE RID: 11502 RVA: 0x0007A354 File Offset: 0x00078554
			[CLSCompliant(false)]
			public static void VertexAttribL1(uint index, long x)
			{
				calli(System.Void(System.UInt32,System.Int64), index, x, GL.EntryPoints[2468]);
			}

			// Token: 0x06002CEF RID: 11503 RVA: 0x0007A368 File Offset: 0x00078568
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL1(int index, long* v)
			{
				calli(System.Void(System.UInt32,System.Int64*), index, v, GL.EntryPoints[2469]);
			}

			// Token: 0x06002CF0 RID: 11504 RVA: 0x0007A37C File Offset: 0x0007857C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL1(uint index, long* v)
			{
				calli(System.Void(System.UInt32,System.Int64*), index, v, GL.EntryPoints[2469]);
			}

			// Token: 0x06002CF1 RID: 11505 RVA: 0x0007A390 File Offset: 0x00078590
			[CLSCompliant(false)]
			public static void VertexAttribL1(uint index, ulong x)
			{
				calli(System.Void(System.UInt32,System.UInt64), index, x, GL.EntryPoints[2471]);
			}

			// Token: 0x06002CF2 RID: 11506 RVA: 0x0007A3A4 File Offset: 0x000785A4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL1(uint index, ulong* v)
			{
				calli(System.Void(System.UInt32,System.UInt64*), index, v, GL.EntryPoints[2473]);
			}

			// Token: 0x06002CF3 RID: 11507 RVA: 0x0007A3B8 File Offset: 0x000785B8
			[CLSCompliant(false)]
			public static void VertexAttribL2(int index, long x, long y)
			{
				calli(System.Void(System.UInt32,System.Int64,System.Int64), index, x, y, GL.EntryPoints[2478]);
			}

			// Token: 0x06002CF4 RID: 11508 RVA: 0x0007A3D0 File Offset: 0x000785D0
			[CLSCompliant(false)]
			public static void VertexAttribL2(uint index, long x, long y)
			{
				calli(System.Void(System.UInt32,System.Int64,System.Int64), index, x, y, GL.EntryPoints[2478]);
			}

			// Token: 0x06002CF5 RID: 11509 RVA: 0x0007A3E8 File Offset: 0x000785E8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL2(int index, long[] v)
			{
				fixed (long* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int64*), index, ptr, GL.EntryPoints[2479]);
				}
			}

			// Token: 0x06002CF6 RID: 11510 RVA: 0x0007A41C File Offset: 0x0007861C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL2(int index, ref long v)
			{
				fixed (long* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int64*), index, ptr, GL.EntryPoints[2479]);
				}
			}

			// Token: 0x06002CF7 RID: 11511 RVA: 0x0007A440 File Offset: 0x00078640
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL2(int index, long* v)
			{
				calli(System.Void(System.UInt32,System.Int64*), index, v, GL.EntryPoints[2479]);
			}

			// Token: 0x06002CF8 RID: 11512 RVA: 0x0007A454 File Offset: 0x00078654
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL2(uint index, long[] v)
			{
				fixed (long* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int64*), index, ptr, GL.EntryPoints[2479]);
				}
			}

			// Token: 0x06002CF9 RID: 11513 RVA: 0x0007A488 File Offset: 0x00078688
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL2(uint index, ref long v)
			{
				fixed (long* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int64*), index, ptr, GL.EntryPoints[2479]);
				}
			}

			// Token: 0x06002CFA RID: 11514 RVA: 0x0007A4AC File Offset: 0x000786AC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL2(uint index, long* v)
			{
				calli(System.Void(System.UInt32,System.Int64*), index, v, GL.EntryPoints[2479]);
			}

			// Token: 0x06002CFB RID: 11515 RVA: 0x0007A4C0 File Offset: 0x000786C0
			[CLSCompliant(false)]
			public static void VertexAttribL2(uint index, ulong x, ulong y)
			{
				calli(System.Void(System.UInt32,System.UInt64,System.UInt64), index, x, y, GL.EntryPoints[2480]);
			}

			// Token: 0x06002CFC RID: 11516 RVA: 0x0007A4D8 File Offset: 0x000786D8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL2(uint index, ulong[] v)
			{
				fixed (ulong* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt64*), index, ptr, GL.EntryPoints[2481]);
				}
			}

			// Token: 0x06002CFD RID: 11517 RVA: 0x0007A50C File Offset: 0x0007870C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL2(uint index, ref ulong v)
			{
				fixed (ulong* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.UInt64*), index, ptr, GL.EntryPoints[2481]);
				}
			}

			// Token: 0x06002CFE RID: 11518 RVA: 0x0007A530 File Offset: 0x00078730
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL2(uint index, ulong* v)
			{
				calli(System.Void(System.UInt32,System.UInt64*), index, v, GL.EntryPoints[2481]);
			}

			// Token: 0x06002CFF RID: 11519 RVA: 0x0007A544 File Offset: 0x00078744
			[CLSCompliant(false)]
			public static void VertexAttribL3(int index, long x, long y, long z)
			{
				calli(System.Void(System.UInt32,System.Int64,System.Int64,System.Int64), index, x, y, z, GL.EntryPoints[2486]);
			}

			// Token: 0x06002D00 RID: 11520 RVA: 0x0007A55C File Offset: 0x0007875C
			[CLSCompliant(false)]
			public static void VertexAttribL3(uint index, long x, long y, long z)
			{
				calli(System.Void(System.UInt32,System.Int64,System.Int64,System.Int64), index, x, y, z, GL.EntryPoints[2486]);
			}

			// Token: 0x06002D01 RID: 11521 RVA: 0x0007A574 File Offset: 0x00078774
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL3(int index, long[] v)
			{
				fixed (long* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int64*), index, ptr, GL.EntryPoints[2487]);
				}
			}

			// Token: 0x06002D02 RID: 11522 RVA: 0x0007A5A8 File Offset: 0x000787A8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL3(int index, ref long v)
			{
				fixed (long* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int64*), index, ptr, GL.EntryPoints[2487]);
				}
			}

			// Token: 0x06002D03 RID: 11523 RVA: 0x0007A5CC File Offset: 0x000787CC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL3(int index, long* v)
			{
				calli(System.Void(System.UInt32,System.Int64*), index, v, GL.EntryPoints[2487]);
			}

			// Token: 0x06002D04 RID: 11524 RVA: 0x0007A5E0 File Offset: 0x000787E0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL3(uint index, long[] v)
			{
				fixed (long* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int64*), index, ptr, GL.EntryPoints[2487]);
				}
			}

			// Token: 0x06002D05 RID: 11525 RVA: 0x0007A614 File Offset: 0x00078814
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL3(uint index, ref long v)
			{
				fixed (long* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int64*), index, ptr, GL.EntryPoints[2487]);
				}
			}

			// Token: 0x06002D06 RID: 11526 RVA: 0x0007A638 File Offset: 0x00078838
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL3(uint index, long* v)
			{
				calli(System.Void(System.UInt32,System.Int64*), index, v, GL.EntryPoints[2487]);
			}

			// Token: 0x06002D07 RID: 11527 RVA: 0x0007A64C File Offset: 0x0007884C
			[CLSCompliant(false)]
			public static void VertexAttribL3(uint index, ulong x, ulong y, ulong z)
			{
				calli(System.Void(System.UInt32,System.UInt64,System.UInt64,System.UInt64), index, x, y, z, GL.EntryPoints[2488]);
			}

			// Token: 0x06002D08 RID: 11528 RVA: 0x0007A664 File Offset: 0x00078864
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL3(uint index, ulong[] v)
			{
				fixed (ulong* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt64*), index, ptr, GL.EntryPoints[2489]);
				}
			}

			// Token: 0x06002D09 RID: 11529 RVA: 0x0007A698 File Offset: 0x00078898
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL3(uint index, ref ulong v)
			{
				fixed (ulong* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.UInt64*), index, ptr, GL.EntryPoints[2489]);
				}
			}

			// Token: 0x06002D0A RID: 11530 RVA: 0x0007A6BC File Offset: 0x000788BC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL3(uint index, ulong* v)
			{
				calli(System.Void(System.UInt32,System.UInt64*), index, v, GL.EntryPoints[2489]);
			}

			// Token: 0x06002D0B RID: 11531 RVA: 0x0007A6D0 File Offset: 0x000788D0
			[CLSCompliant(false)]
			public static void VertexAttribL4(int index, long x, long y, long z, long w)
			{
				calli(System.Void(System.UInt32,System.Int64,System.Int64,System.Int64,System.Int64), index, x, y, z, w, GL.EntryPoints[2494]);
			}

			// Token: 0x06002D0C RID: 11532 RVA: 0x0007A6E8 File Offset: 0x000788E8
			[CLSCompliant(false)]
			public static void VertexAttribL4(uint index, long x, long y, long z, long w)
			{
				calli(System.Void(System.UInt32,System.Int64,System.Int64,System.Int64,System.Int64), index, x, y, z, w, GL.EntryPoints[2494]);
			}

			// Token: 0x06002D0D RID: 11533 RVA: 0x0007A700 File Offset: 0x00078900
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL4(int index, long[] v)
			{
				fixed (long* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int64*), index, ptr, GL.EntryPoints[2495]);
				}
			}

			// Token: 0x06002D0E RID: 11534 RVA: 0x0007A734 File Offset: 0x00078934
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL4(int index, ref long v)
			{
				fixed (long* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int64*), index, ptr, GL.EntryPoints[2495]);
				}
			}

			// Token: 0x06002D0F RID: 11535 RVA: 0x0007A758 File Offset: 0x00078958
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL4(int index, long* v)
			{
				calli(System.Void(System.UInt32,System.Int64*), index, v, GL.EntryPoints[2495]);
			}

			// Token: 0x06002D10 RID: 11536 RVA: 0x0007A76C File Offset: 0x0007896C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL4(uint index, long[] v)
			{
				fixed (long* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int64*), index, ptr, GL.EntryPoints[2495]);
				}
			}

			// Token: 0x06002D11 RID: 11537 RVA: 0x0007A7A0 File Offset: 0x000789A0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL4(uint index, ref long v)
			{
				fixed (long* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int64*), index, ptr, GL.EntryPoints[2495]);
				}
			}

			// Token: 0x06002D12 RID: 11538 RVA: 0x0007A7C4 File Offset: 0x000789C4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL4(uint index, long* v)
			{
				calli(System.Void(System.UInt32,System.Int64*), index, v, GL.EntryPoints[2495]);
			}

			// Token: 0x06002D13 RID: 11539 RVA: 0x0007A7D8 File Offset: 0x000789D8
			[CLSCompliant(false)]
			public static void VertexAttribL4(uint index, ulong x, ulong y, ulong z, ulong w)
			{
				calli(System.Void(System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt64), index, x, y, z, w, GL.EntryPoints[2496]);
			}

			// Token: 0x06002D14 RID: 11540 RVA: 0x0007A7F0 File Offset: 0x000789F0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL4(uint index, ulong[] v)
			{
				fixed (ulong* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt64*), index, ptr, GL.EntryPoints[2497]);
				}
			}

			// Token: 0x06002D15 RID: 11541 RVA: 0x0007A824 File Offset: 0x00078A24
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL4(uint index, ref ulong v)
			{
				fixed (ulong* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.UInt64*), index, ptr, GL.EntryPoints[2497]);
				}
			}

			// Token: 0x06002D16 RID: 11542 RVA: 0x0007A848 File Offset: 0x00078A48
			[CLSCompliant(false)]
			public unsafe static void VertexAttribL4(uint index, ulong* v)
			{
				calli(System.Void(System.UInt32,System.UInt64*), index, v, GL.EntryPoints[2497]);
			}

			// Token: 0x06002D17 RID: 11543 RVA: 0x0007A85C File Offset: 0x00078A5C
			[CLSCompliant(false)]
			public static void VertexAttribLFormat(int index, int size, NvVertexAttribInteger64bit type, int stride)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), index, size, type, stride, GL.EntryPoints[2499]);
			}

			// Token: 0x06002D18 RID: 11544 RVA: 0x0007A874 File Offset: 0x00078A74
			[CLSCompliant(false)]
			public static void VertexAttribLFormat(uint index, int size, NvVertexAttribInteger64bit type, int stride)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), index, size, type, stride, GL.EntryPoints[2499]);
			}

			// Token: 0x06002D19 RID: 11545 RVA: 0x0007A88C File Offset: 0x00078A8C
			[CLSCompliant(false)]
			public static void VertexAttribPointer(int index, int fsize, VertexAttribParameterArb type, int stride, IntPtr pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, fsize, type, stride, pointer, GL.EntryPoints[2513]);
			}

			// Token: 0x06002D1A RID: 11546 RVA: 0x0007A8A4 File Offset: 0x00078AA4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribPointer<T4>(int index, int fsize, VertexAttribParameterArb type, int stride, [In] [Out] T4[] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, fsize, type, stride, ptr, GL.EntryPoints[2513]);
				}
			}

			// Token: 0x06002D1B RID: 11547 RVA: 0x0007A8E0 File Offset: 0x00078AE0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribPointer<T4>(int index, int fsize, VertexAttribParameterArb type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, fsize, type, stride, ptr, GL.EntryPoints[2513]);
				}
			}

			// Token: 0x06002D1C RID: 11548 RVA: 0x0007A920 File Offset: 0x00078B20
			[CLSCompliant(false)]
			public unsafe static void VertexAttribPointer<T4>(int index, int fsize, VertexAttribParameterArb type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, fsize, type, stride, ptr, GL.EntryPoints[2513]);
				}
			}

			// Token: 0x06002D1D RID: 11549 RVA: 0x0007A960 File Offset: 0x00078B60
			[CLSCompliant(false)]
			public unsafe static void VertexAttribPointer<T4>(int index, int fsize, VertexAttribParameterArb type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
			{
				fixed (T4* ptr = &pointer)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, fsize, type, stride, ptr, GL.EntryPoints[2513]);
				}
			}

			// Token: 0x06002D1E RID: 11550 RVA: 0x0007A988 File Offset: 0x00078B88
			[CLSCompliant(false)]
			public static void VertexAttribPointer(uint index, int fsize, VertexAttribParameterArb type, int stride, IntPtr pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, fsize, type, stride, pointer, GL.EntryPoints[2513]);
			}

			// Token: 0x06002D1F RID: 11551 RVA: 0x0007A9A0 File Offset: 0x00078BA0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribPointer<T4>(uint index, int fsize, VertexAttribParameterArb type, int stride, [In] [Out] T4[] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, fsize, type, stride, ptr, GL.EntryPoints[2513]);
				}
			}

			// Token: 0x06002D20 RID: 11552 RVA: 0x0007A9DC File Offset: 0x00078BDC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribPointer<T4>(uint index, int fsize, VertexAttribParameterArb type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, fsize, type, stride, ptr, GL.EntryPoints[2513]);
				}
			}

			// Token: 0x06002D21 RID: 11553 RVA: 0x0007AA1C File Offset: 0x00078C1C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribPointer<T4>(uint index, int fsize, VertexAttribParameterArb type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
			{
				fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, fsize, type, stride, ptr, GL.EntryPoints[2513]);
				}
			}

			// Token: 0x06002D22 RID: 11554 RVA: 0x0007AA5C File Offset: 0x00078C5C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribPointer<T4>(uint index, int fsize, VertexAttribParameterArb type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
			{
				fixed (T4* ptr = &pointer)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, fsize, type, stride, ptr, GL.EntryPoints[2513]);
				}
			}

			// Token: 0x06002D23 RID: 11555 RVA: 0x0007AA84 File Offset: 0x00078C84
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(int index, int count, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, ptr, GL.EntryPoints[2514]);
				}
			}

			// Token: 0x06002D24 RID: 11556 RVA: 0x0007AABC File Offset: 0x00078CBC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(int index, int count, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, ptr, GL.EntryPoints[2514]);
				}
			}

			// Token: 0x06002D25 RID: 11557 RVA: 0x0007AAE0 File Offset: 0x00078CE0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(int index, int count, double* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, v, GL.EntryPoints[2514]);
			}

			// Token: 0x06002D26 RID: 11558 RVA: 0x0007AAF8 File Offset: 0x00078CF8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(uint index, int count, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, ptr, GL.EntryPoints[2514]);
				}
			}

			// Token: 0x06002D27 RID: 11559 RVA: 0x0007AB30 File Offset: 0x00078D30
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(uint index, int count, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, ptr, GL.EntryPoints[2514]);
				}
			}

			// Token: 0x06002D28 RID: 11560 RVA: 0x0007AB54 File Offset: 0x00078D54
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(uint index, int count, double* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, v, GL.EntryPoints[2514]);
			}

			// Token: 0x06002D29 RID: 11561 RVA: 0x0007AB6C File Offset: 0x00078D6C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(int index, int count, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, ptr, GL.EntryPoints[2515]);
				}
			}

			// Token: 0x06002D2A RID: 11562 RVA: 0x0007ABA4 File Offset: 0x00078DA4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(int index, int count, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, ptr, GL.EntryPoints[2515]);
				}
			}

			// Token: 0x06002D2B RID: 11563 RVA: 0x0007ABC8 File Offset: 0x00078DC8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(int index, int count, float* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, v, GL.EntryPoints[2515]);
			}

			// Token: 0x06002D2C RID: 11564 RVA: 0x0007ABE0 File Offset: 0x00078DE0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(uint index, int count, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, ptr, GL.EntryPoints[2515]);
				}
			}

			// Token: 0x06002D2D RID: 11565 RVA: 0x0007AC18 File Offset: 0x00078E18
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(uint index, int count, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, ptr, GL.EntryPoints[2515]);
				}
			}

			// Token: 0x06002D2E RID: 11566 RVA: 0x0007AC3C File Offset: 0x00078E3C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(uint index, int count, float* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, v, GL.EntryPoints[2515]);
			}

			// Token: 0x06002D2F RID: 11567 RVA: 0x0007AC54 File Offset: 0x00078E54
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1h(int index, int n, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, ptr, GL.EntryPoints[2516]);
				}
			}

			// Token: 0x06002D30 RID: 11568 RVA: 0x0007AC8C File Offset: 0x00078E8C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1h(int index, int n, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, ptr, GL.EntryPoints[2516]);
				}
			}

			// Token: 0x06002D31 RID: 11569 RVA: 0x0007ACB0 File Offset: 0x00078EB0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1h(int index, int n, Half* v)
			{
				calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, v, GL.EntryPoints[2516]);
			}

			// Token: 0x06002D32 RID: 11570 RVA: 0x0007ACC8 File Offset: 0x00078EC8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1h(uint index, int n, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, ptr, GL.EntryPoints[2516]);
				}
			}

			// Token: 0x06002D33 RID: 11571 RVA: 0x0007AD00 File Offset: 0x00078F00
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1h(uint index, int n, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, ptr, GL.EntryPoints[2516]);
				}
			}

			// Token: 0x06002D34 RID: 11572 RVA: 0x0007AD24 File Offset: 0x00078F24
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1h(uint index, int n, Half* v)
			{
				calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, v, GL.EntryPoints[2516]);
			}

			// Token: 0x06002D35 RID: 11573 RVA: 0x0007AD3C File Offset: 0x00078F3C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(int index, int count, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, ptr, GL.EntryPoints[2517]);
				}
			}

			// Token: 0x06002D36 RID: 11574 RVA: 0x0007AD74 File Offset: 0x00078F74
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(int index, int count, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, ptr, GL.EntryPoints[2517]);
				}
			}

			// Token: 0x06002D37 RID: 11575 RVA: 0x0007AD98 File Offset: 0x00078F98
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(int index, int count, short* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, v, GL.EntryPoints[2517]);
			}

			// Token: 0x06002D38 RID: 11576 RVA: 0x0007ADB0 File Offset: 0x00078FB0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(uint index, int count, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, ptr, GL.EntryPoints[2517]);
				}
			}

			// Token: 0x06002D39 RID: 11577 RVA: 0x0007ADE8 File Offset: 0x00078FE8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(uint index, int count, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, ptr, GL.EntryPoints[2517]);
				}
			}

			// Token: 0x06002D3A RID: 11578 RVA: 0x0007AE0C File Offset: 0x0007900C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs1(uint index, int count, short* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, v, GL.EntryPoints[2517]);
			}

			// Token: 0x06002D3B RID: 11579 RVA: 0x0007AE24 File Offset: 0x00079024
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(int index, int count, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, ptr, GL.EntryPoints[2518]);
				}
			}

			// Token: 0x06002D3C RID: 11580 RVA: 0x0007AE5C File Offset: 0x0007905C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(int index, int count, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, ptr, GL.EntryPoints[2518]);
				}
			}

			// Token: 0x06002D3D RID: 11581 RVA: 0x0007AE80 File Offset: 0x00079080
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(int index, int count, double* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, v, GL.EntryPoints[2518]);
			}

			// Token: 0x06002D3E RID: 11582 RVA: 0x0007AE98 File Offset: 0x00079098
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(uint index, int count, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, ptr, GL.EntryPoints[2518]);
				}
			}

			// Token: 0x06002D3F RID: 11583 RVA: 0x0007AED0 File Offset: 0x000790D0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(uint index, int count, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, ptr, GL.EntryPoints[2518]);
				}
			}

			// Token: 0x06002D40 RID: 11584 RVA: 0x0007AEF4 File Offset: 0x000790F4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(uint index, int count, double* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, v, GL.EntryPoints[2518]);
			}

			// Token: 0x06002D41 RID: 11585 RVA: 0x0007AF0C File Offset: 0x0007910C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(int index, int count, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, ptr, GL.EntryPoints[2519]);
				}
			}

			// Token: 0x06002D42 RID: 11586 RVA: 0x0007AF44 File Offset: 0x00079144
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(int index, int count, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, ptr, GL.EntryPoints[2519]);
				}
			}

			// Token: 0x06002D43 RID: 11587 RVA: 0x0007AF68 File Offset: 0x00079168
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(int index, int count, float* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, v, GL.EntryPoints[2519]);
			}

			// Token: 0x06002D44 RID: 11588 RVA: 0x0007AF80 File Offset: 0x00079180
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(uint index, int count, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, ptr, GL.EntryPoints[2519]);
				}
			}

			// Token: 0x06002D45 RID: 11589 RVA: 0x0007AFB8 File Offset: 0x000791B8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(uint index, int count, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, ptr, GL.EntryPoints[2519]);
				}
			}

			// Token: 0x06002D46 RID: 11590 RVA: 0x0007AFDC File Offset: 0x000791DC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(uint index, int count, float* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, v, GL.EntryPoints[2519]);
			}

			// Token: 0x06002D47 RID: 11591 RVA: 0x0007AFF4 File Offset: 0x000791F4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2h(int index, int n, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, ptr, GL.EntryPoints[2520]);
				}
			}

			// Token: 0x06002D48 RID: 11592 RVA: 0x0007B02C File Offset: 0x0007922C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2h(int index, int n, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, ptr, GL.EntryPoints[2520]);
				}
			}

			// Token: 0x06002D49 RID: 11593 RVA: 0x0007B050 File Offset: 0x00079250
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2h(int index, int n, Half* v)
			{
				calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, v, GL.EntryPoints[2520]);
			}

			// Token: 0x06002D4A RID: 11594 RVA: 0x0007B068 File Offset: 0x00079268
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2h(uint index, int n, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, ptr, GL.EntryPoints[2520]);
				}
			}

			// Token: 0x06002D4B RID: 11595 RVA: 0x0007B0A0 File Offset: 0x000792A0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2h(uint index, int n, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, ptr, GL.EntryPoints[2520]);
				}
			}

			// Token: 0x06002D4C RID: 11596 RVA: 0x0007B0C4 File Offset: 0x000792C4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2h(uint index, int n, Half* v)
			{
				calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, v, GL.EntryPoints[2520]);
			}

			// Token: 0x06002D4D RID: 11597 RVA: 0x0007B0DC File Offset: 0x000792DC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(int index, int count, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, ptr, GL.EntryPoints[2521]);
				}
			}

			// Token: 0x06002D4E RID: 11598 RVA: 0x0007B114 File Offset: 0x00079314
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(int index, int count, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, ptr, GL.EntryPoints[2521]);
				}
			}

			// Token: 0x06002D4F RID: 11599 RVA: 0x0007B138 File Offset: 0x00079338
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(int index, int count, short* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, v, GL.EntryPoints[2521]);
			}

			// Token: 0x06002D50 RID: 11600 RVA: 0x0007B150 File Offset: 0x00079350
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(uint index, int count, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, ptr, GL.EntryPoints[2521]);
				}
			}

			// Token: 0x06002D51 RID: 11601 RVA: 0x0007B188 File Offset: 0x00079388
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(uint index, int count, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, ptr, GL.EntryPoints[2521]);
				}
			}

			// Token: 0x06002D52 RID: 11602 RVA: 0x0007B1AC File Offset: 0x000793AC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs2(uint index, int count, short* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, v, GL.EntryPoints[2521]);
			}

			// Token: 0x06002D53 RID: 11603 RVA: 0x0007B1C4 File Offset: 0x000793C4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(int index, int count, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, ptr, GL.EntryPoints[2522]);
				}
			}

			// Token: 0x06002D54 RID: 11604 RVA: 0x0007B1FC File Offset: 0x000793FC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(int index, int count, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, ptr, GL.EntryPoints[2522]);
				}
			}

			// Token: 0x06002D55 RID: 11605 RVA: 0x0007B220 File Offset: 0x00079420
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(int index, int count, double* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, v, GL.EntryPoints[2522]);
			}

			// Token: 0x06002D56 RID: 11606 RVA: 0x0007B238 File Offset: 0x00079438
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(uint index, int count, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, ptr, GL.EntryPoints[2522]);
				}
			}

			// Token: 0x06002D57 RID: 11607 RVA: 0x0007B270 File Offset: 0x00079470
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(uint index, int count, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, ptr, GL.EntryPoints[2522]);
				}
			}

			// Token: 0x06002D58 RID: 11608 RVA: 0x0007B294 File Offset: 0x00079494
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(uint index, int count, double* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, v, GL.EntryPoints[2522]);
			}

			// Token: 0x06002D59 RID: 11609 RVA: 0x0007B2AC File Offset: 0x000794AC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(int index, int count, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, ptr, GL.EntryPoints[2523]);
				}
			}

			// Token: 0x06002D5A RID: 11610 RVA: 0x0007B2E4 File Offset: 0x000794E4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(int index, int count, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, ptr, GL.EntryPoints[2523]);
				}
			}

			// Token: 0x06002D5B RID: 11611 RVA: 0x0007B308 File Offset: 0x00079508
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(int index, int count, float* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, v, GL.EntryPoints[2523]);
			}

			// Token: 0x06002D5C RID: 11612 RVA: 0x0007B320 File Offset: 0x00079520
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(uint index, int count, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, ptr, GL.EntryPoints[2523]);
				}
			}

			// Token: 0x06002D5D RID: 11613 RVA: 0x0007B358 File Offset: 0x00079558
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(uint index, int count, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, ptr, GL.EntryPoints[2523]);
				}
			}

			// Token: 0x06002D5E RID: 11614 RVA: 0x0007B37C File Offset: 0x0007957C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(uint index, int count, float* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, v, GL.EntryPoints[2523]);
			}

			// Token: 0x06002D5F RID: 11615 RVA: 0x0007B394 File Offset: 0x00079594
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3h(int index, int n, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, ptr, GL.EntryPoints[2524]);
				}
			}

			// Token: 0x06002D60 RID: 11616 RVA: 0x0007B3CC File Offset: 0x000795CC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3h(int index, int n, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, ptr, GL.EntryPoints[2524]);
				}
			}

			// Token: 0x06002D61 RID: 11617 RVA: 0x0007B3F0 File Offset: 0x000795F0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3h(int index, int n, Half* v)
			{
				calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, v, GL.EntryPoints[2524]);
			}

			// Token: 0x06002D62 RID: 11618 RVA: 0x0007B408 File Offset: 0x00079608
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3h(uint index, int n, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, ptr, GL.EntryPoints[2524]);
				}
			}

			// Token: 0x06002D63 RID: 11619 RVA: 0x0007B440 File Offset: 0x00079640
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3h(uint index, int n, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, ptr, GL.EntryPoints[2524]);
				}
			}

			// Token: 0x06002D64 RID: 11620 RVA: 0x0007B464 File Offset: 0x00079664
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3h(uint index, int n, Half* v)
			{
				calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, v, GL.EntryPoints[2524]);
			}

			// Token: 0x06002D65 RID: 11621 RVA: 0x0007B47C File Offset: 0x0007967C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(int index, int count, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, ptr, GL.EntryPoints[2525]);
				}
			}

			// Token: 0x06002D66 RID: 11622 RVA: 0x0007B4B4 File Offset: 0x000796B4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(int index, int count, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, ptr, GL.EntryPoints[2525]);
				}
			}

			// Token: 0x06002D67 RID: 11623 RVA: 0x0007B4D8 File Offset: 0x000796D8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(int index, int count, short* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, v, GL.EntryPoints[2525]);
			}

			// Token: 0x06002D68 RID: 11624 RVA: 0x0007B4F0 File Offset: 0x000796F0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(uint index, int count, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, ptr, GL.EntryPoints[2525]);
				}
			}

			// Token: 0x06002D69 RID: 11625 RVA: 0x0007B528 File Offset: 0x00079728
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(uint index, int count, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, ptr, GL.EntryPoints[2525]);
				}
			}

			// Token: 0x06002D6A RID: 11626 RVA: 0x0007B54C File Offset: 0x0007974C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs3(uint index, int count, short* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, v, GL.EntryPoints[2525]);
			}

			// Token: 0x06002D6B RID: 11627 RVA: 0x0007B564 File Offset: 0x00079764
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(int index, int count, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, ptr, GL.EntryPoints[2526]);
				}
			}

			// Token: 0x06002D6C RID: 11628 RVA: 0x0007B59C File Offset: 0x0007979C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(int index, int count, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, ptr, GL.EntryPoints[2526]);
				}
			}

			// Token: 0x06002D6D RID: 11629 RVA: 0x0007B5C0 File Offset: 0x000797C0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(int index, int count, double* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, v, GL.EntryPoints[2526]);
			}

			// Token: 0x06002D6E RID: 11630 RVA: 0x0007B5D8 File Offset: 0x000797D8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(uint index, int count, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, ptr, GL.EntryPoints[2526]);
				}
			}

			// Token: 0x06002D6F RID: 11631 RVA: 0x0007B610 File Offset: 0x00079810
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(uint index, int count, ref double v)
			{
				fixed (double* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, ptr, GL.EntryPoints[2526]);
				}
			}

			// Token: 0x06002D70 RID: 11632 RVA: 0x0007B634 File Offset: 0x00079834
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(uint index, int count, double* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Double*), index, count, v, GL.EntryPoints[2526]);
			}

			// Token: 0x06002D71 RID: 11633 RVA: 0x0007B64C File Offset: 0x0007984C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(int index, int count, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, ptr, GL.EntryPoints[2527]);
				}
			}

			// Token: 0x06002D72 RID: 11634 RVA: 0x0007B684 File Offset: 0x00079884
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(int index, int count, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, ptr, GL.EntryPoints[2527]);
				}
			}

			// Token: 0x06002D73 RID: 11635 RVA: 0x0007B6A8 File Offset: 0x000798A8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(int index, int count, float* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, v, GL.EntryPoints[2527]);
			}

			// Token: 0x06002D74 RID: 11636 RVA: 0x0007B6C0 File Offset: 0x000798C0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(uint index, int count, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, ptr, GL.EntryPoints[2527]);
				}
			}

			// Token: 0x06002D75 RID: 11637 RVA: 0x0007B6F8 File Offset: 0x000798F8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(uint index, int count, ref float v)
			{
				fixed (float* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, ptr, GL.EntryPoints[2527]);
				}
			}

			// Token: 0x06002D76 RID: 11638 RVA: 0x0007B71C File Offset: 0x0007991C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(uint index, int count, float* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, count, v, GL.EntryPoints[2527]);
			}

			// Token: 0x06002D77 RID: 11639 RVA: 0x0007B734 File Offset: 0x00079934
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4h(int index, int n, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, ptr, GL.EntryPoints[2528]);
				}
			}

			// Token: 0x06002D78 RID: 11640 RVA: 0x0007B76C File Offset: 0x0007996C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4h(int index, int n, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, ptr, GL.EntryPoints[2528]);
				}
			}

			// Token: 0x06002D79 RID: 11641 RVA: 0x0007B790 File Offset: 0x00079990
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4h(int index, int n, Half* v)
			{
				calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, v, GL.EntryPoints[2528]);
			}

			// Token: 0x06002D7A RID: 11642 RVA: 0x0007B7A8 File Offset: 0x000799A8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4h(uint index, int n, Half[] v)
			{
				fixed (Half* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, ptr, GL.EntryPoints[2528]);
				}
			}

			// Token: 0x06002D7B RID: 11643 RVA: 0x0007B7E0 File Offset: 0x000799E0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4h(uint index, int n, ref Half v)
			{
				fixed (Half* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, ptr, GL.EntryPoints[2528]);
				}
			}

			// Token: 0x06002D7C RID: 11644 RVA: 0x0007B804 File Offset: 0x00079A04
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4h(uint index, int n, Half* v)
			{
				calli(System.Void(System.UInt32,System.Int32,OpenTK.Half*), index, n, v, GL.EntryPoints[2528]);
			}

			// Token: 0x06002D7D RID: 11645 RVA: 0x0007B81C File Offset: 0x00079A1C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(int index, int count, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, ptr, GL.EntryPoints[2529]);
				}
			}

			// Token: 0x06002D7E RID: 11646 RVA: 0x0007B854 File Offset: 0x00079A54
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(int index, int count, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, ptr, GL.EntryPoints[2529]);
				}
			}

			// Token: 0x06002D7F RID: 11647 RVA: 0x0007B878 File Offset: 0x00079A78
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(int index, int count, short* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, v, GL.EntryPoints[2529]);
			}

			// Token: 0x06002D80 RID: 11648 RVA: 0x0007B890 File Offset: 0x00079A90
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(uint index, int count, short[] v)
			{
				fixed (short* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, ptr, GL.EntryPoints[2529]);
				}
			}

			// Token: 0x06002D81 RID: 11649 RVA: 0x0007B8C8 File Offset: 0x00079AC8
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(uint index, int count, ref short v)
			{
				fixed (short* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, ptr, GL.EntryPoints[2529]);
				}
			}

			// Token: 0x06002D82 RID: 11650 RVA: 0x0007B8EC File Offset: 0x00079AEC
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(uint index, int count, short* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int16*), index, count, v, GL.EntryPoints[2529]);
			}

			// Token: 0x06002D83 RID: 11651 RVA: 0x0007B904 File Offset: 0x00079B04
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(int index, int count, byte[] v)
			{
				fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*), index, count, ptr, GL.EntryPoints[2530]);
				}
			}

			// Token: 0x06002D84 RID: 11652 RVA: 0x0007B93C File Offset: 0x00079B3C
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(int index, int count, ref byte v)
			{
				fixed (byte* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*), index, count, ptr, GL.EntryPoints[2530]);
				}
			}

			// Token: 0x06002D85 RID: 11653 RVA: 0x0007B960 File Offset: 0x00079B60
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(int index, int count, byte* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*), index, count, v, GL.EntryPoints[2530]);
			}

			// Token: 0x06002D86 RID: 11654 RVA: 0x0007B978 File Offset: 0x00079B78
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(uint index, int count, byte[] v)
			{
				fixed (byte* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*), index, count, ptr, GL.EntryPoints[2530]);
				}
			}

			// Token: 0x06002D87 RID: 11655 RVA: 0x0007B9B0 File Offset: 0x00079BB0
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(uint index, int count, ref byte v)
			{
				fixed (byte* ptr = &v)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*), index, count, ptr, GL.EntryPoints[2530]);
				}
			}

			// Token: 0x06002D88 RID: 11656 RVA: 0x0007B9D4 File Offset: 0x00079BD4
			[CLSCompliant(false)]
			public unsafe static void VertexAttribs4(uint index, int count, byte* v)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Byte*), index, count, v, GL.EntryPoints[2530]);
			}

			// Token: 0x06002D89 RID: 11657 RVA: 0x0007B9EC File Offset: 0x00079BEC
			public static void VertexFormat(int size, NvVertexBufferUnifiedMemory type, int stride)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), size, type, stride, GL.EntryPoints[2535]);
			}

			// Token: 0x06002D8A RID: 11658 RVA: 0x0007BA04 File Offset: 0x00079C04
			public static void VertexWeighth(Half weight)
			{
				calli(System.Void(OpenTK.Half), weight, GL.EntryPoints[2580]);
			}

			// Token: 0x06002D8B RID: 11659 RVA: 0x0007BA18 File Offset: 0x00079C18
			[CLSCompliant(false)]
			public unsafe static void VertexWeighth(Half* weight)
			{
				calli(System.Void(OpenTK.Half*), weight, GL.EntryPoints[2581]);
			}

			// Token: 0x06002D8C RID: 11660 RVA: 0x0007BA2C File Offset: 0x00079C2C
			[CLSCompliant(false)]
			public unsafe static NvVideoCapture VideoCapture(int video_capture_slot, [Out] int[] sequence_num, [Out] long[] capture_time)
			{
				fixed (int* ptr = ref (sequence_num != null && sequence_num.Length != 0) ? ref sequence_num[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (long* ptr3 = ref (capture_time != null && capture_time.Length != 0) ? ref capture_time[0] : ref *null)
					{
						return calli(System.Int32(System.UInt32,System.UInt32*,System.UInt64*), video_capture_slot, ptr2, ptr3, GL.EntryPoints[2583]);
					}
				}
			}

			// Token: 0x06002D8D RID: 11661 RVA: 0x0007BA78 File Offset: 0x00079C78
			[CLSCompliant(false)]
			public unsafe static NvVideoCapture VideoCapture(int video_capture_slot, out int sequence_num, out long capture_time)
			{
				fixed (int* ptr = &sequence_num)
				{
					int* ptr2 = ptr;
					fixed (long* ptr3 = &capture_time)
					{
						return calli(System.Int32(System.UInt32,System.UInt32*,System.UInt64*), video_capture_slot, ptr2, ptr3, GL.EntryPoints[2583]);
					}
				}
			}

			// Token: 0x06002D8E RID: 11662 RVA: 0x0007BAA0 File Offset: 0x00079CA0
			[CLSCompliant(false)]
			public unsafe static NvVideoCapture VideoCapture(int video_capture_slot, [Out] int* sequence_num, [Out] long* capture_time)
			{
				return calli(System.Int32(System.UInt32,System.UInt32*,System.UInt64*), video_capture_slot, sequence_num, capture_time, GL.EntryPoints[2583]);
			}

			// Token: 0x06002D8F RID: 11663 RVA: 0x0007BAB8 File Offset: 0x00079CB8
			[CLSCompliant(false)]
			public unsafe static NvVideoCapture VideoCapture(uint video_capture_slot, [Out] uint[] sequence_num, [Out] ulong[] capture_time)
			{
				fixed (uint* ptr = ref (sequence_num != null && sequence_num.Length != 0) ? ref sequence_num[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (ulong* ptr3 = ref (capture_time != null && capture_time.Length != 0) ? ref capture_time[0] : ref *null)
					{
						return calli(System.Int32(System.UInt32,System.UInt32*,System.UInt64*), video_capture_slot, ptr2, ptr3, GL.EntryPoints[2583]);
					}
				}
			}

			// Token: 0x06002D90 RID: 11664 RVA: 0x0007BB04 File Offset: 0x00079D04
			[CLSCompliant(false)]
			public unsafe static NvVideoCapture VideoCapture(uint video_capture_slot, out uint sequence_num, out ulong capture_time)
			{
				fixed (uint* ptr = &sequence_num)
				{
					uint* ptr2 = ptr;
					fixed (ulong* ptr3 = &capture_time)
					{
						return calli(System.Int32(System.UInt32,System.UInt32*,System.UInt64*), video_capture_slot, ptr2, ptr3, GL.EntryPoints[2583]);
					}
				}
			}

			// Token: 0x06002D91 RID: 11665 RVA: 0x0007BB2C File Offset: 0x00079D2C
			[CLSCompliant(false)]
			public unsafe static NvVideoCapture VideoCapture(uint video_capture_slot, [Out] uint* sequence_num, [Out] ulong* capture_time)
			{
				return calli(System.Int32(System.UInt32,System.UInt32*,System.UInt64*), video_capture_slot, sequence_num, capture_time, GL.EntryPoints[2583]);
			}

			// Token: 0x06002D92 RID: 11666 RVA: 0x0007BB44 File Offset: 0x00079D44
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Double*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[2584]);
				}
			}

			// Token: 0x06002D93 RID: 11667 RVA: 0x0007BB7C File Offset: 0x00079D7C
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, ref double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Double*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[2584]);
				}
			}

			// Token: 0x06002D94 RID: 11668 RVA: 0x0007BBA0 File Offset: 0x00079DA0
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, double* @params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Double*), video_capture_slot, stream, pname, @params, GL.EntryPoints[2584]);
			}

			// Token: 0x06002D95 RID: 11669 RVA: 0x0007BBB8 File Offset: 0x00079DB8
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Double*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[2584]);
				}
			}

			// Token: 0x06002D96 RID: 11670 RVA: 0x0007BBF0 File Offset: 0x00079DF0
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, ref double @params)
			{
				fixed (double* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Double*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[2584]);
				}
			}

			// Token: 0x06002D97 RID: 11671 RVA: 0x0007BC14 File Offset: 0x00079E14
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, double* @params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Double*), video_capture_slot, stream, pname, @params, GL.EntryPoints[2584]);
			}

			// Token: 0x06002D98 RID: 11672 RVA: 0x0007BC2C File Offset: 0x00079E2C
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[2585]);
				}
			}

			// Token: 0x06002D99 RID: 11673 RVA: 0x0007BC64 File Offset: 0x00079E64
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[2585]);
				}
			}

			// Token: 0x06002D9A RID: 11674 RVA: 0x0007BC88 File Offset: 0x00079E88
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, float* @params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), video_capture_slot, stream, pname, @params, GL.EntryPoints[2585]);
			}

			// Token: 0x06002D9B RID: 11675 RVA: 0x0007BCA0 File Offset: 0x00079EA0
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[2585]);
				}
			}

			// Token: 0x06002D9C RID: 11676 RVA: 0x0007BCD8 File Offset: 0x00079ED8
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[2585]);
				}
			}

			// Token: 0x06002D9D RID: 11677 RVA: 0x0007BCFC File Offset: 0x00079EFC
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, float* @params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Single*), video_capture_slot, stream, pname, @params, GL.EntryPoints[2585]);
			}

			// Token: 0x06002D9E RID: 11678 RVA: 0x0007BD14 File Offset: 0x00079F14
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[2586]);
				}
			}

			// Token: 0x06002D9F RID: 11679 RVA: 0x0007BD4C File Offset: 0x00079F4C
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[2586]);
				}
			}

			// Token: 0x06002DA0 RID: 11680 RVA: 0x0007BD70 File Offset: 0x00079F70
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, int* @params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), video_capture_slot, stream, pname, @params, GL.EntryPoints[2586]);
			}

			// Token: 0x06002DA1 RID: 11681 RVA: 0x0007BD88 File Offset: 0x00079F88
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[2586]);
				}
			}

			// Token: 0x06002DA2 RID: 11682 RVA: 0x0007BDC0 File Offset: 0x00079FC0
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), video_capture_slot, stream, pname, ptr, GL.EntryPoints[2586]);
				}
			}

			// Token: 0x06002DA3 RID: 11683 RVA: 0x0007BDE4 File Offset: 0x00079FE4
			[CLSCompliant(false)]
			public unsafe static void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, int* @params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), video_capture_slot, stream, pname, @params, GL.EntryPoints[2586]);
			}

			// Token: 0x06002DA4 RID: 11684 RVA: 0x0007BDFC File Offset: 0x00079FFC
			[CLSCompliant(false)]
			public unsafe static void WeightPath(int resultPath, int numPaths, int[] paths, float[] weights)
			{
				fixed (int* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = ref (weights != null && weights.Length != 0) ? ref weights[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Single*), resultPath, numPaths, ptr2, ptr3, GL.EntryPoints[2596]);
					}
				}
			}

			// Token: 0x06002DA5 RID: 11685 RVA: 0x0007BE48 File Offset: 0x0007A048
			[CLSCompliant(false)]
			public unsafe static void WeightPath(int resultPath, int numPaths, ref int paths, ref float weights)
			{
				fixed (int* ptr = &paths)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = &weights)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Single*), resultPath, numPaths, ptr2, ptr3, GL.EntryPoints[2596]);
					}
				}
			}

			// Token: 0x06002DA6 RID: 11686 RVA: 0x0007BE70 File Offset: 0x0007A070
			[CLSCompliant(false)]
			public unsafe static void WeightPath(int resultPath, int numPaths, int* paths, float* weights)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Single*), resultPath, numPaths, paths, weights, GL.EntryPoints[2596]);
			}

			// Token: 0x06002DA7 RID: 11687 RVA: 0x0007BE88 File Offset: 0x0007A088
			[CLSCompliant(false)]
			public unsafe static void WeightPath(uint resultPath, int numPaths, uint[] paths, float[] weights)
			{
				fixed (uint* ptr = ref (paths != null && paths.Length != 0) ? ref paths[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = ref (weights != null && weights.Length != 0) ? ref weights[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Single*), resultPath, numPaths, ptr2, ptr3, GL.EntryPoints[2596]);
					}
				}
			}

			// Token: 0x06002DA8 RID: 11688 RVA: 0x0007BED4 File Offset: 0x0007A0D4
			[CLSCompliant(false)]
			public unsafe static void WeightPath(uint resultPath, int numPaths, ref uint paths, ref float weights)
			{
				fixed (uint* ptr = &paths)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = &weights)
					{
						calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Single*), resultPath, numPaths, ptr2, ptr3, GL.EntryPoints[2596]);
					}
				}
			}

			// Token: 0x06002DA9 RID: 11689 RVA: 0x0007BEFC File Offset: 0x0007A0FC
			[CLSCompliant(false)]
			public unsafe static void WeightPath(uint resultPath, int numPaths, uint* paths, float* weights)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Single*), resultPath, numPaths, paths, weights, GL.EntryPoints[2596]);
			}

			// Token: 0x06002DAA RID: 11690 RVA: 0x0007BF14 File Offset: 0x0007A114
			[Obsolete("Use DeleteTransformFeedbacks overload instead")]
			public unsafe static void DeleteTransformFeedback(int n, int[] ids)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[392]);
				}
			}

			// Token: 0x06002DAB RID: 11691 RVA: 0x0007BF48 File Offset: 0x0007A148
			[Obsolete("Use DeleteTransformFeedbacks overload instead")]
			public unsafe static void DeleteTransformFeedback(int n, ref int ids)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[392]);
				}
			}

			// Token: 0x06002DAC RID: 11692 RVA: 0x0007BF6C File Offset: 0x0007A16C
			[Obsolete("Use DeleteTransformFeedbacks overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DeleteTransformFeedback(int n, int* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[392]);
			}

			// Token: 0x06002DAD RID: 11693 RVA: 0x0007BF80 File Offset: 0x0007A180
			[Obsolete("Use DeleteTransformFeedbacks overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DeleteTransformFeedback(int n, uint[] ids)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[392]);
				}
			}

			// Token: 0x06002DAE RID: 11694 RVA: 0x0007BFB4 File Offset: 0x0007A1B4
			[CLSCompliant(false)]
			[Obsolete("Use DeleteTransformFeedbacks overload instead")]
			public unsafe static void DeleteTransformFeedback(int n, ref uint ids)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[392]);
				}
			}

			// Token: 0x06002DAF RID: 11695 RVA: 0x0007BFD8 File Offset: 0x0007A1D8
			[CLSCompliant(false)]
			[Obsolete("Use DeleteTransformFeedbacks overload instead")]
			public unsafe static void DeleteTransformFeedback(int n, uint* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[392]);
			}

			// Token: 0x06002DB0 RID: 11696 RVA: 0x0007BFEC File Offset: 0x0007A1EC
			[Obsolete("Use GenTransformFeedbacks overload instead")]
			public unsafe static void GenTransformFeedback(int n, [Out] int[] ids)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[626]);
				}
			}

			// Token: 0x06002DB1 RID: 11697 RVA: 0x0007C020 File Offset: 0x0007A220
			[Obsolete("Use GenTransformFeedbacks overload instead")]
			public unsafe static void GenTransformFeedback(int n, out int ids)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[626]);
				}
			}

			// Token: 0x06002DB2 RID: 11698 RVA: 0x0007C044 File Offset: 0x0007A244
			[Obsolete("Use GenTransformFeedbacks overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GenTransformFeedback(int n, [Out] int* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[626]);
			}

			// Token: 0x06002DB3 RID: 11699 RVA: 0x0007C058 File Offset: 0x0007A258
			[Obsolete("Use GenTransformFeedbacks overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GenTransformFeedback(int n, [Out] uint[] ids)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[626]);
				}
			}

			// Token: 0x06002DB4 RID: 11700 RVA: 0x0007C08C File Offset: 0x0007A28C
			[Obsolete("Use GenTransformFeedbacks overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GenTransformFeedback(int n, out uint ids)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[626]);
				}
			}

			// Token: 0x06002DB5 RID: 11701 RVA: 0x0007C0B0 File Offset: 0x0007A2B0
			[Obsolete("Use GenTransformFeedbacks overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GenTransformFeedback(int n, [Out] uint* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[626]);
			}

			// Token: 0x06002DB6 RID: 11702 RVA: 0x0007C0C4 File Offset: 0x0007A2C4
			[Obsolete("Use ref/array overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramNamedParameter(int id, int len, byte* name, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double*), id, len, name, ptr, GL.EntryPoints[885]);
				}
			}

			// Token: 0x06002DB7 RID: 11703 RVA: 0x0007C0FC File Offset: 0x0007A2FC
			[Obsolete("Use ref/array overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramNamedParameter(uint id, int len, byte* name, [Out] double[] @params)
			{
				fixed (double* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double*), id, len, name, ptr, GL.EntryPoints[885]);
				}
			}

			// Token: 0x06002DB8 RID: 11704 RVA: 0x0007C134 File Offset: 0x0007A334
			[Obsolete("Use ref/array overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramNamedParameter(int id, int len, byte* name, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single*), id, len, name, ptr, GL.EntryPoints[886]);
				}
			}

			// Token: 0x06002DB9 RID: 11705 RVA: 0x0007C16C File Offset: 0x0007A36C
			[Obsolete("Use ref/array overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramNamedParameter(uint id, int len, byte* name, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single*), id, len, name, ptr, GL.EntryPoints[886]);
				}
			}

			// Token: 0x06002DBA RID: 11706 RVA: 0x0007C1A4 File Offset: 0x0007A3A4
			[Obsolete("Use GetVideo overload instead")]
			public unsafe static void GetVideoi64(int video_slot, NvPresentVideo pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), video_slot, pname, ptr, GL.EntryPoints[1023]);
				}
			}

			// Token: 0x06002DBB RID: 11707 RVA: 0x0007C1DC File Offset: 0x0007A3DC
			[Obsolete("Use GetVideo overload instead")]
			public unsafe static void GetVideoi64(int video_slot, NvPresentVideo pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), video_slot, pname, ptr, GL.EntryPoints[1023]);
				}
			}

			// Token: 0x06002DBC RID: 11708 RVA: 0x0007C200 File Offset: 0x0007A400
			[Obsolete("Use GetVideo overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetVideoi64(int video_slot, NvPresentVideo pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), video_slot, pname, @params, GL.EntryPoints[1023]);
			}

			// Token: 0x06002DBD RID: 11709 RVA: 0x0007C218 File Offset: 0x0007A418
			[Obsolete("Use GetVideo overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetVideoi64(uint video_slot, NvPresentVideo pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), video_slot, pname, ptr, GL.EntryPoints[1023]);
				}
			}

			// Token: 0x06002DBE RID: 11710 RVA: 0x0007C250 File Offset: 0x0007A450
			[CLSCompliant(false)]
			[Obsolete("Use GetVideo overload instead")]
			public unsafe static void GetVideoi64(uint video_slot, NvPresentVideo pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), video_slot, pname, ptr, GL.EntryPoints[1023]);
				}
			}

			// Token: 0x06002DBF RID: 11711 RVA: 0x0007C274 File Offset: 0x0007A474
			[CLSCompliant(false)]
			[Obsolete("Use GetVideo overload instead")]
			public unsafe static void GetVideoi64(uint video_slot, NvPresentVideo pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), video_slot, pname, @params, GL.EntryPoints[1023]);
			}

			// Token: 0x06002DC0 RID: 11712 RVA: 0x0007C28C File Offset: 0x0007A48C
			[Obsolete("Use GetVideo overload instead")]
			public unsafe static void GetVideoui64(int video_slot, NvPresentVideo pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), video_slot, pname, ptr, GL.EntryPoints[1025]);
				}
			}

			// Token: 0x06002DC1 RID: 11713 RVA: 0x0007C2C4 File Offset: 0x0007A4C4
			[Obsolete("Use GetVideo overload instead")]
			public unsafe static void GetVideoui64(int video_slot, NvPresentVideo pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), video_slot, pname, ptr, GL.EntryPoints[1025]);
				}
			}

			// Token: 0x06002DC2 RID: 11714 RVA: 0x0007C2E8 File Offset: 0x0007A4E8
			[Obsolete("Use GetVideo overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetVideoui64(int video_slot, NvPresentVideo pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), video_slot, pname, @params, GL.EntryPoints[1025]);
			}

			// Token: 0x06002DC3 RID: 11715 RVA: 0x0007C300 File Offset: 0x0007A500
			[Obsolete("Use GetVideo overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetVideoui64(uint video_slot, NvPresentVideo pname, [Out] ulong[] @params)
			{
				fixed (ulong* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), video_slot, pname, ptr, GL.EntryPoints[1025]);
				}
			}

			// Token: 0x06002DC4 RID: 11716 RVA: 0x0007C338 File Offset: 0x0007A538
			[Obsolete("Use GetVideo overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetVideoui64(uint video_slot, NvPresentVideo pname, out ulong @params)
			{
				fixed (ulong* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), video_slot, pname, ptr, GL.EntryPoints[1025]);
				}
			}

			// Token: 0x06002DC5 RID: 11717 RVA: 0x0007C35C File Offset: 0x0007A55C
			[CLSCompliant(false)]
			[Obsolete("Use GetVideo overload instead")]
			public unsafe static void GetVideoui64(uint video_slot, NvPresentVideo pname, [Out] ulong* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), video_slot, pname, @params, GL.EntryPoints[1025]);
			}

			// Token: 0x06002DC6 RID: 11718 RVA: 0x0007C374 File Offset: 0x0007A574
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overload instead")]
			public unsafe static void ProgramNamedParameter4(int id, int len, byte* name, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double*), id, len, name, ptr, GL.EntryPoints[1565]);
				}
			}

			// Token: 0x06002DC7 RID: 11719 RVA: 0x0007C3AC File Offset: 0x0007A5AC
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overload instead")]
			public unsafe static void ProgramNamedParameter4(uint id, int len, byte* name, double[] v)
			{
				fixed (double* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Double*), id, len, name, ptr, GL.EntryPoints[1565]);
				}
			}

			// Token: 0x06002DC8 RID: 11720 RVA: 0x0007C3E4 File Offset: 0x0007A5E4
			[Obsolete("Use ref/array overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(int id, int len, byte* name, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single*), id, len, name, ptr, GL.EntryPoints[1567]);
				}
			}

			// Token: 0x06002DC9 RID: 11721 RVA: 0x0007C41C File Offset: 0x0007A61C
			[Obsolete("Use ref/array overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ProgramNamedParameter4(uint id, int len, byte* name, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Byte*,System.Single*), id, len, name, ptr, GL.EntryPoints[1567]);
				}
			}
		}

		// Token: 0x020004C4 RID: 1220
		public static class Nvx
		{
			// Token: 0x06002DCA RID: 11722 RVA: 0x0007C454 File Offset: 0x0007A654
			[CLSCompliant(false)]
			public static void BeginConditionalRender(int id)
			{
				calli(System.Void(System.UInt32), id, GL.EntryPoints[27]);
			}

			// Token: 0x06002DCB RID: 11723 RVA: 0x0007C464 File Offset: 0x0007A664
			[CLSCompliant(false)]
			public static void BeginConditionalRender(uint id)
			{
				calli(System.Void(System.UInt32), id, GL.EntryPoints[27]);
			}

			// Token: 0x06002DCC RID: 11724 RVA: 0x0007C474 File Offset: 0x0007A674
			public static void EndConditionalRender()
			{
				calli(System.Void(), GL.EntryPoints[483]);
			}
		}

		// Token: 0x020004C5 RID: 1221
		public static class Oes
		{
			// Token: 0x06002DCD RID: 11725 RVA: 0x0007C488 File Offset: 0x0007A688
			public static void Accumx(OesFixedPoint op, int value)
			{
				calli(System.Void(System.Int32,System.Int32), op, value, GL.EntryPoints[1]);
			}

			// Token: 0x06002DCE RID: 11726 RVA: 0x0007C498 File Offset: 0x0007A698
			public static void AlphaFuncx(OesFixedPoint func, int @ref)
			{
				calli(System.Void(System.Int32,System.Int32), func, @ref, GL.EntryPoints[13]);
			}

			// Token: 0x06002DCF RID: 11727 RVA: 0x0007C4AC File Offset: 0x0007A6AC
			[CLSCompliant(false)]
			public unsafe static void Bitmapx(int width, int height, int xorig, int yorig, int xmove, int ymove, byte[] bitmap)
			{
				fixed (byte* ptr = ref (bitmap != null && bitmap.Length != 0) ? ref bitmap[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte*), width, height, xorig, yorig, xmove, ymove, ptr, GL.EntryPoints[101]);
				}
			}

			// Token: 0x06002DD0 RID: 11728 RVA: 0x0007C4E8 File Offset: 0x0007A6E8
			[CLSCompliant(false)]
			public unsafe static void Bitmapx(int width, int height, int xorig, int yorig, int xmove, int ymove, ref byte bitmap)
			{
				fixed (byte* ptr = &bitmap)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte*), width, height, xorig, yorig, xmove, ymove, ptr, GL.EntryPoints[101]);
				}
			}

			// Token: 0x06002DD1 RID: 11729 RVA: 0x0007C510 File Offset: 0x0007A710
			[CLSCompliant(false)]
			public unsafe static void Bitmapx(int width, int height, int xorig, int yorig, int xmove, int ymove, byte* bitmap)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte*), width, height, xorig, yorig, xmove, ymove, bitmap, GL.EntryPoints[101]);
			}

			// Token: 0x06002DD2 RID: 11730 RVA: 0x0007C534 File Offset: 0x0007A734
			public static void BlendColorx(int red, int green, int blue, int alpha)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), red, green, blue, alpha, GL.EntryPoints[105]);
			}

			// Token: 0x06002DD3 RID: 11731 RVA: 0x0007C548 File Offset: 0x0007A748
			public static void ClearAccumx(int red, int green, int blue, int alpha)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), red, green, blue, alpha, GL.EntryPoints[145]);
			}

			// Token: 0x06002DD4 RID: 11732 RVA: 0x0007C560 File Offset: 0x0007A760
			public static void ClearColorx(int red, int green, int blue, int alpha)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), red, green, blue, alpha, GL.EntryPoints[155]);
			}

			// Token: 0x06002DD5 RID: 11733 RVA: 0x0007C578 File Offset: 0x0007A778
			public static void ClearDepth(float depth)
			{
				calli(System.Void(System.Single), depth, GL.EntryPoints[159]);
			}

			// Token: 0x06002DD6 RID: 11734 RVA: 0x0007C58C File Offset: 0x0007A78C
			public static void ClearDepthx(int depth)
			{
				calli(System.Void(System.Int32), depth, GL.EntryPoints[160]);
			}

			// Token: 0x06002DD7 RID: 11735 RVA: 0x0007C5A0 File Offset: 0x0007A7A0
			[CLSCompliant(false)]
			public unsafe static void ClipPlane(OesSinglePrecision plane, float[] equation)
			{
				fixed (float* ptr = ref (equation != null && equation.Length != 0) ? ref equation[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), plane, ptr, GL.EntryPoints[173]);
				}
			}

			// Token: 0x06002DD8 RID: 11736 RVA: 0x0007C5D4 File Offset: 0x0007A7D4
			[CLSCompliant(false)]
			public unsafe static void ClipPlane(OesSinglePrecision plane, ref float equation)
			{
				fixed (float* ptr = &equation)
				{
					calli(System.Void(System.Int32,System.Single*), plane, ptr, GL.EntryPoints[173]);
				}
			}

			// Token: 0x06002DD9 RID: 11737 RVA: 0x0007C5F8 File Offset: 0x0007A7F8
			[CLSCompliant(false)]
			public unsafe static void ClipPlane(OesSinglePrecision plane, float* equation)
			{
				calli(System.Void(System.Int32,System.Single*), plane, equation, GL.EntryPoints[173]);
			}

			// Token: 0x06002DDA RID: 11738 RVA: 0x0007C60C File Offset: 0x0007A80C
			[CLSCompliant(false)]
			public unsafe static void ClipPlanex(OesFixedPoint plane, int[] equation)
			{
				fixed (int* ptr = ref (equation != null && equation.Length != 0) ? ref equation[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), plane, ptr, GL.EntryPoints[174]);
				}
			}

			// Token: 0x06002DDB RID: 11739 RVA: 0x0007C640 File Offset: 0x0007A840
			[CLSCompliant(false)]
			public unsafe static void ClipPlanex(OesFixedPoint plane, ref int equation)
			{
				fixed (int* ptr = &equation)
				{
					calli(System.Void(System.Int32,System.Int32*), plane, ptr, GL.EntryPoints[174]);
				}
			}

			// Token: 0x06002DDC RID: 11740 RVA: 0x0007C664 File Offset: 0x0007A864
			[CLSCompliant(false)]
			public unsafe static void ClipPlanex(OesFixedPoint plane, int* equation)
			{
				calli(System.Void(System.Int32,System.Int32*), plane, equation, GL.EntryPoints[174]);
			}

			// Token: 0x06002DDD RID: 11741 RVA: 0x0007C678 File Offset: 0x0007A878
			public static void Color3x(int red, int green, int blue)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), red, green, blue, GL.EntryPoints[195]);
			}

			// Token: 0x06002DDE RID: 11742 RVA: 0x0007C690 File Offset: 0x0007A890
			[CLSCompliant(false)]
			public unsafe static void Color3x(int[] components)
			{
				fixed (int* ptr = ref (components != null && components.Length != 0) ? ref components[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[196]);
				}
			}

			// Token: 0x06002DDF RID: 11743 RVA: 0x0007C6C4 File Offset: 0x0007A8C4
			[CLSCompliant(false)]
			public unsafe static void Color3x(ref int components)
			{
				fixed (int* ptr = &components)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[196]);
				}
			}

			// Token: 0x06002DE0 RID: 11744 RVA: 0x0007C6E8 File Offset: 0x0007A8E8
			[CLSCompliant(false)]
			public unsafe static void Color3x(int* components)
			{
				calli(System.Void(System.Int32*), components, GL.EntryPoints[196]);
			}

			// Token: 0x06002DE1 RID: 11745 RVA: 0x0007C6FC File Offset: 0x0007A8FC
			public static void Color4x(int red, int green, int blue, int alpha)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), red, green, blue, alpha, GL.EntryPoints[221]);
			}

			// Token: 0x06002DE2 RID: 11746 RVA: 0x0007C714 File Offset: 0x0007A914
			[CLSCompliant(false)]
			public unsafe static void Color4x(int[] components)
			{
				fixed (int* ptr = ref (components != null && components.Length != 0) ? ref components[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[222]);
				}
			}

			// Token: 0x06002DE3 RID: 11747 RVA: 0x0007C748 File Offset: 0x0007A948
			[CLSCompliant(false)]
			public unsafe static void Color4x(ref int components)
			{
				fixed (int* ptr = &components)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[222]);
				}
			}

			// Token: 0x06002DE4 RID: 11748 RVA: 0x0007C76C File Offset: 0x0007A96C
			[CLSCompliant(false)]
			public unsafe static void Color4x(int* components)
			{
				calli(System.Void(System.Int32*), components, GL.EntryPoints[222]);
			}

			// Token: 0x06002DE5 RID: 11749 RVA: 0x0007C780 File Offset: 0x0007A980
			public static void ConvolutionParameterx(OesFixedPoint target, OesFixedPoint pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, param, GL.EntryPoints[294]);
			}

			// Token: 0x06002DE6 RID: 11750 RVA: 0x0007C798 File Offset: 0x0007A998
			[CLSCompliant(false)]
			public unsafe static void ConvolutionParameterx(OesFixedPoint target, OesFixedPoint pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[295]);
				}
			}

			// Token: 0x06002DE7 RID: 11751 RVA: 0x0007C7D0 File Offset: 0x0007A9D0
			[CLSCompliant(false)]
			public unsafe static void ConvolutionParameterx(OesFixedPoint target, OesFixedPoint pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[295]);
			}

			// Token: 0x06002DE8 RID: 11752 RVA: 0x0007C7E8 File Offset: 0x0007A9E8
			public static void DepthRange(float n, float f)
			{
				calli(System.Void(System.Single,System.Single), n, f, GL.EntryPoints[404]);
			}

			// Token: 0x06002DE9 RID: 11753 RVA: 0x0007C7FC File Offset: 0x0007A9FC
			public static void DepthRangex(int n, int f)
			{
				calli(System.Void(System.Int32,System.Int32), n, f, GL.EntryPoints[406]);
			}

			// Token: 0x06002DEA RID: 11754 RVA: 0x0007C810 File Offset: 0x0007AA10
			public static void EvalCoord1x(int u)
			{
				calli(System.Void(System.Int32), u, GL.EntryPoints[501]);
			}

			// Token: 0x06002DEB RID: 11755 RVA: 0x0007C824 File Offset: 0x0007AA24
			[CLSCompliant(false)]
			public unsafe static void EvalCoord1x(int* coords)
			{
				calli(System.Void(System.Int32*), coords, GL.EntryPoints[502]);
			}

			// Token: 0x06002DEC RID: 11756 RVA: 0x0007C838 File Offset: 0x0007AA38
			public static void EvalCoord2x(int u, int v)
			{
				calli(System.Void(System.Int32,System.Int32), u, v, GL.EntryPoints[507]);
			}

			// Token: 0x06002DED RID: 11757 RVA: 0x0007C84C File Offset: 0x0007AA4C
			[CLSCompliant(false)]
			public unsafe static void EvalCoord2x(int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[508]);
				}
			}

			// Token: 0x06002DEE RID: 11758 RVA: 0x0007C880 File Offset: 0x0007AA80
			[CLSCompliant(false)]
			public unsafe static void EvalCoord2x(ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[508]);
				}
			}

			// Token: 0x06002DEF RID: 11759 RVA: 0x0007C8A4 File Offset: 0x0007AAA4
			[CLSCompliant(false)]
			public unsafe static void EvalCoord2x(int* coords)
			{
				calli(System.Void(System.Int32*), coords, GL.EntryPoints[508]);
			}

			// Token: 0x06002DF0 RID: 11760 RVA: 0x0007C8B8 File Offset: 0x0007AAB8
			[CLSCompliant(false)]
			public unsafe static void FeedbackBufferx(int n, OesFixedPoint type, int[] buffer)
			{
				fixed (int* ptr = ref (buffer != null && buffer.Length != 0) ? ref buffer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), n, type, ptr, GL.EntryPoints[517]);
				}
			}

			// Token: 0x06002DF1 RID: 11761 RVA: 0x0007C8F0 File Offset: 0x0007AAF0
			[CLSCompliant(false)]
			public unsafe static void FeedbackBufferx(int n, OesFixedPoint type, ref int buffer)
			{
				fixed (int* ptr = &buffer)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), n, type, ptr, GL.EntryPoints[517]);
				}
			}

			// Token: 0x06002DF2 RID: 11762 RVA: 0x0007C914 File Offset: 0x0007AB14
			[CLSCompliant(false)]
			public unsafe static void FeedbackBufferx(int n, OesFixedPoint type, int* buffer)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), n, type, buffer, GL.EntryPoints[517]);
			}

			// Token: 0x06002DF3 RID: 11763 RVA: 0x0007C92C File Offset: 0x0007AB2C
			public static void Fogx(OesFixedPoint pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[554]);
			}

			// Token: 0x06002DF4 RID: 11764 RVA: 0x0007C940 File Offset: 0x0007AB40
			[CLSCompliant(false)]
			public unsafe static void Fogx(OesFixedPoint pname, int[] param)
			{
				fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[555]);
				}
			}

			// Token: 0x06002DF5 RID: 11765 RVA: 0x0007C974 File Offset: 0x0007AB74
			[CLSCompliant(false)]
			public unsafe static void Fogx(OesFixedPoint pname, int* param)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, param, GL.EntryPoints[555]);
			}

			// Token: 0x06002DF6 RID: 11766 RVA: 0x0007C988 File Offset: 0x0007AB88
			public static void Frustum(float l, float r, float b, float t, float n, float f)
			{
				calli(System.Void(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), l, r, b, t, n, f, GL.EntryPoints[594]);
			}

			// Token: 0x06002DF7 RID: 11767 RVA: 0x0007C9A4 File Offset: 0x0007ABA4
			public static void Frustumx(int l, int r, int b, int t, int n, int f)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), l, r, b, t, n, f, GL.EntryPoints[595]);
			}

			// Token: 0x06002DF8 RID: 11768 RVA: 0x0007C9C0 File Offset: 0x0007ABC0
			[CLSCompliant(false)]
			public unsafe static void GetClipPlane(OesSinglePrecision plane, [Out] float[] equation)
			{
				fixed (float* ptr = ref (equation != null && equation.Length != 0) ? ref equation[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), plane, ptr, GL.EntryPoints[661]);
				}
			}

			// Token: 0x06002DF9 RID: 11769 RVA: 0x0007C9F4 File Offset: 0x0007ABF4
			[CLSCompliant(false)]
			public unsafe static void GetClipPlane(OesSinglePrecision plane, out float equation)
			{
				fixed (float* ptr = &equation)
				{
					calli(System.Void(System.Int32,System.Single*), plane, ptr, GL.EntryPoints[661]);
				}
			}

			// Token: 0x06002DFA RID: 11770 RVA: 0x0007CA18 File Offset: 0x0007AC18
			[CLSCompliant(false)]
			public unsafe static void GetClipPlane(OesSinglePrecision plane, [Out] float* equation)
			{
				calli(System.Void(System.Int32,System.Single*), plane, equation, GL.EntryPoints[661]);
			}

			// Token: 0x06002DFB RID: 11771 RVA: 0x0007CA2C File Offset: 0x0007AC2C
			[CLSCompliant(false)]
			public unsafe static void GetClipPlanex(OesFixedPoint plane, [Out] int[] equation)
			{
				fixed (int* ptr = ref (equation != null && equation.Length != 0) ? ref equation[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), plane, ptr, GL.EntryPoints[662]);
				}
			}

			// Token: 0x06002DFC RID: 11772 RVA: 0x0007CA60 File Offset: 0x0007AC60
			[CLSCompliant(false)]
			public unsafe static void GetClipPlanex(OesFixedPoint plane, out int equation)
			{
				fixed (int* ptr = &equation)
				{
					calli(System.Void(System.Int32,System.Int32*), plane, ptr, GL.EntryPoints[662]);
				}
			}

			// Token: 0x06002DFD RID: 11773 RVA: 0x0007CA84 File Offset: 0x0007AC84
			[CLSCompliant(false)]
			public unsafe static void GetClipPlanex(OesFixedPoint plane, [Out] int* equation)
			{
				calli(System.Void(System.Int32,System.Int32*), plane, equation, GL.EntryPoints[662]);
			}

			// Token: 0x06002DFE RID: 11774 RVA: 0x0007CA98 File Offset: 0x0007AC98
			[CLSCompliant(false)]
			public unsafe static void GetConvolutionParameterx(OesFixedPoint target, OesFixedPoint pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[687]);
				}
			}

			// Token: 0x06002DFF RID: 11775 RVA: 0x0007CAD0 File Offset: 0x0007ACD0
			[CLSCompliant(false)]
			public unsafe static void GetConvolutionParameterx(OesFixedPoint target, OesFixedPoint pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[687]);
				}
			}

			// Token: 0x06002E00 RID: 11776 RVA: 0x0007CAF4 File Offset: 0x0007ACF4
			[CLSCompliant(false)]
			public unsafe static void GetConvolutionParameterx(OesFixedPoint target, OesFixedPoint pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[687]);
			}

			// Token: 0x06002E01 RID: 11777 RVA: 0x0007CB0C File Offset: 0x0007AD0C
			[CLSCompliant(false)]
			public static int GetFixed(OesFixedPoint pname)
			{
				int result;
				calli(System.Void(System.Int32,System.Int32*), pname, ref result, GL.EntryPoints[702]);
				return result;
			}

			// Token: 0x06002E02 RID: 11778 RVA: 0x0007CB30 File Offset: 0x0007AD30
			[CLSCompliant(false)]
			public unsafe static void GetFixed(OesFixedPoint pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[702]);
				}
			}

			// Token: 0x06002E03 RID: 11779 RVA: 0x0007CB64 File Offset: 0x0007AD64
			[CLSCompliant(false)]
			public unsafe static void GetFixed(OesFixedPoint pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[702]);
				}
			}

			// Token: 0x06002E04 RID: 11780 RVA: 0x0007CB88 File Offset: 0x0007AD88
			[CLSCompliant(false)]
			public unsafe static void GetFixed(OesFixedPoint pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, @params, GL.EntryPoints[702]);
			}

			// Token: 0x06002E05 RID: 11781 RVA: 0x0007CB9C File Offset: 0x0007AD9C
			[CLSCompliant(false)]
			public unsafe static void GetHistogramParameterx(OesFixedPoint target, OesFixedPoint pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[727]);
				}
			}

			// Token: 0x06002E06 RID: 11782 RVA: 0x0007CBD4 File Offset: 0x0007ADD4
			[CLSCompliant(false)]
			public unsafe static void GetHistogramParameterx(OesFixedPoint target, OesFixedPoint pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[727]);
				}
			}

			// Token: 0x06002E07 RID: 11783 RVA: 0x0007CBF8 File Offset: 0x0007ADF8
			[CLSCompliant(false)]
			public unsafe static void GetHistogramParameterx(OesFixedPoint target, OesFixedPoint pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[727]);
			}

			// Token: 0x06002E08 RID: 11784 RVA: 0x0007CC10 File Offset: 0x0007AE10
			[CLSCompliant(false)]
			public unsafe static void GetLightx(OesFixedPoint light, OesFixedPoint pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), light, pname, ptr, GL.EntryPoints[748]);
				}
			}

			// Token: 0x06002E09 RID: 11785 RVA: 0x0007CC48 File Offset: 0x0007AE48
			[CLSCompliant(false)]
			public unsafe static void GetLightx(OesFixedPoint light, OesFixedPoint pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), light, pname, ptr, GL.EntryPoints[748]);
				}
			}

			// Token: 0x06002E0A RID: 11786 RVA: 0x0007CC6C File Offset: 0x0007AE6C
			[CLSCompliant(false)]
			public unsafe static void GetLightx(OesFixedPoint light, OesFixedPoint pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), light, pname, @params, GL.EntryPoints[748]);
			}

			// Token: 0x06002E0B RID: 11787 RVA: 0x0007CC84 File Offset: 0x0007AE84
			[CLSCompliant(false)]
			public unsafe static void GetMapx(OesFixedPoint target, OesFixedPoint query, [Out] int[] v)
			{
				fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, query, ptr, GL.EntryPoints[763]);
				}
			}

			// Token: 0x06002E0C RID: 11788 RVA: 0x0007CCBC File Offset: 0x0007AEBC
			[CLSCompliant(false)]
			public unsafe static void GetMapx(OesFixedPoint target, OesFixedPoint query, out int v)
			{
				fixed (int* ptr = &v)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, query, ptr, GL.EntryPoints[763]);
				}
			}

			// Token: 0x06002E0D RID: 11789 RVA: 0x0007CCE0 File Offset: 0x0007AEE0
			[CLSCompliant(false)]
			public unsafe static void GetMapx(OesFixedPoint target, OesFixedPoint query, [Out] int* v)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, query, v, GL.EntryPoints[763]);
			}

			// Token: 0x06002E0E RID: 11790 RVA: 0x0007CCF8 File Offset: 0x0007AEF8
			public static void GetMaterialx(OesFixedPoint face, OesFixedPoint pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), face, pname, param, GL.EntryPoints[766]);
			}

			// Token: 0x06002E0F RID: 11791 RVA: 0x0007CD10 File Offset: 0x0007AF10
			[CLSCompliant(false)]
			public unsafe static void GetMaterialx(OesFixedPoint face, OesFixedPoint pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), face, pname, ptr, GL.EntryPoints[767]);
				}
			}

			// Token: 0x06002E10 RID: 11792 RVA: 0x0007CD48 File Offset: 0x0007AF48
			[CLSCompliant(false)]
			public unsafe static void GetMaterialx(OesFixedPoint face, OesFixedPoint pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), face, pname, @params, GL.EntryPoints[767]);
			}

			// Token: 0x06002E11 RID: 11793 RVA: 0x0007CD60 File Offset: 0x0007AF60
			[CLSCompliant(false)]
			public unsafe static void GetTexEnvx(OesFixedPoint target, OesFixedPoint pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[936]);
				}
			}

			// Token: 0x06002E12 RID: 11794 RVA: 0x0007CD98 File Offset: 0x0007AF98
			[CLSCompliant(false)]
			public unsafe static void GetTexEnvx(OesFixedPoint target, OesFixedPoint pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[936]);
				}
			}

			// Token: 0x06002E13 RID: 11795 RVA: 0x0007CDBC File Offset: 0x0007AFBC
			[CLSCompliant(false)]
			public unsafe static void GetTexEnvx(OesFixedPoint target, OesFixedPoint pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[936]);
			}

			// Token: 0x06002E14 RID: 11796 RVA: 0x0007CDD4 File Offset: 0x0007AFD4
			[CLSCompliant(false)]
			public unsafe static void GetTexGenx(OesFixedPoint coord, OesFixedPoint pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), coord, pname, ptr, GL.EntryPoints[941]);
				}
			}

			// Token: 0x06002E15 RID: 11797 RVA: 0x0007CE0C File Offset: 0x0007B00C
			[CLSCompliant(false)]
			public unsafe static void GetTexGenx(OesFixedPoint coord, OesFixedPoint pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), coord, pname, ptr, GL.EntryPoints[941]);
				}
			}

			// Token: 0x06002E16 RID: 11798 RVA: 0x0007CE30 File Offset: 0x0007B030
			[CLSCompliant(false)]
			public unsafe static void GetTexGenx(OesFixedPoint coord, OesFixedPoint pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), coord, pname, @params, GL.EntryPoints[941]);
			}

			// Token: 0x06002E17 RID: 11799 RVA: 0x0007CE48 File Offset: 0x0007B048
			[CLSCompliant(false)]
			public unsafe static void GetTexLevelParameterx(OesFixedPoint target, int level, OesFixedPoint pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, level, pname, ptr, GL.EntryPoints[945]);
				}
			}

			// Token: 0x06002E18 RID: 11800 RVA: 0x0007CE80 File Offset: 0x0007B080
			[CLSCompliant(false)]
			public unsafe static void GetTexLevelParameterx(OesFixedPoint target, int level, OesFixedPoint pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, level, pname, ptr, GL.EntryPoints[945]);
				}
			}

			// Token: 0x06002E19 RID: 11801 RVA: 0x0007CEA4 File Offset: 0x0007B0A4
			[CLSCompliant(false)]
			public unsafe static void GetTexLevelParameterx(OesFixedPoint target, int level, OesFixedPoint pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, level, pname, @params, GL.EntryPoints[945]);
			}

			// Token: 0x06002E1A RID: 11802 RVA: 0x0007CEBC File Offset: 0x0007B0BC
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterx(OesFixedPoint target, OesFixedPoint pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[953]);
				}
			}

			// Token: 0x06002E1B RID: 11803 RVA: 0x0007CEF4 File Offset: 0x0007B0F4
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterx(OesFixedPoint target, OesFixedPoint pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[953]);
				}
			}

			// Token: 0x06002E1C RID: 11804 RVA: 0x0007CF18 File Offset: 0x0007B118
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterx(OesFixedPoint target, OesFixedPoint pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[953]);
			}

			// Token: 0x06002E1D RID: 11805 RVA: 0x0007CF30 File Offset: 0x0007B130
			public static void Indexx(int component)
			{
				calli(System.Void(System.Int32), component, GL.EntryPoints[1062]);
			}

			// Token: 0x06002E1E RID: 11806 RVA: 0x0007CF44 File Offset: 0x0007B144
			[CLSCompliant(false)]
			public unsafe static void Indexx(int* component)
			{
				calli(System.Void(System.Int32*), component, GL.EntryPoints[1063]);
			}

			// Token: 0x06002E1F RID: 11807 RVA: 0x0007CF58 File Offset: 0x0007B158
			public static void LightModelx(OesFixedPoint pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[1130]);
			}

			// Token: 0x06002E20 RID: 11808 RVA: 0x0007CF6C File Offset: 0x0007B16C
			[CLSCompliant(false)]
			public unsafe static void LightModelx(OesFixedPoint pname, int[] param)
			{
				fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[1131]);
				}
			}

			// Token: 0x06002E21 RID: 11809 RVA: 0x0007CFA0 File Offset: 0x0007B1A0
			[CLSCompliant(false)]
			public unsafe static void LightModelx(OesFixedPoint pname, int* param)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, param, GL.EntryPoints[1131]);
			}

			// Token: 0x06002E22 RID: 11810 RVA: 0x0007CFB4 File Offset: 0x0007B1B4
			public static void Lightx(OesFixedPoint light, OesFixedPoint pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), light, pname, param, GL.EntryPoints[1132]);
			}

			// Token: 0x06002E23 RID: 11811 RVA: 0x0007CFCC File Offset: 0x0007B1CC
			[CLSCompliant(false)]
			public unsafe static void Lightx(OesFixedPoint light, OesFixedPoint pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), light, pname, ptr, GL.EntryPoints[1133]);
				}
			}

			// Token: 0x06002E24 RID: 11812 RVA: 0x0007D004 File Offset: 0x0007B204
			[CLSCompliant(false)]
			public unsafe static void Lightx(OesFixedPoint light, OesFixedPoint pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), light, pname, @params, GL.EntryPoints[1133]);
			}

			// Token: 0x06002E25 RID: 11813 RVA: 0x0007D01C File Offset: 0x0007B21C
			public static void LineWidthx(int width)
			{
				calli(System.Void(System.Int32), width, GL.EntryPoints[1136]);
			}

			// Token: 0x06002E26 RID: 11814 RVA: 0x0007D030 File Offset: 0x0007B230
			[CLSCompliant(false)]
			public unsafe static void LoadMatrixx(int[] m)
			{
				fixed (int* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1148]);
				}
			}

			// Token: 0x06002E27 RID: 11815 RVA: 0x0007D064 File Offset: 0x0007B264
			[CLSCompliant(false)]
			public unsafe static void LoadMatrixx(ref int m)
			{
				fixed (int* ptr = &m)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1148]);
				}
			}

			// Token: 0x06002E28 RID: 11816 RVA: 0x0007D088 File Offset: 0x0007B288
			[CLSCompliant(false)]
			public unsafe static void LoadMatrixx(int* m)
			{
				calli(System.Void(System.Int32*), m, GL.EntryPoints[1148]);
			}

			// Token: 0x06002E29 RID: 11817 RVA: 0x0007D09C File Offset: 0x0007B29C
			[CLSCompliant(false)]
			public unsafe static void LoadTransposeMatrixx(int[] m)
			{
				fixed (int* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1155]);
				}
			}

			// Token: 0x06002E2A RID: 11818 RVA: 0x0007D0D0 File Offset: 0x0007B2D0
			[CLSCompliant(false)]
			public unsafe static void LoadTransposeMatrixx(ref int m)
			{
				fixed (int* ptr = &m)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1155]);
				}
			}

			// Token: 0x06002E2B RID: 11819 RVA: 0x0007D0F4 File Offset: 0x0007B2F4
			[CLSCompliant(false)]
			public unsafe static void LoadTransposeMatrixx(int* m)
			{
				calli(System.Void(System.Int32*), m, GL.EntryPoints[1155]);
			}

			// Token: 0x06002E2C RID: 11820 RVA: 0x0007D108 File Offset: 0x0007B308
			public static void Map1x(OesFixedPoint target, int u1, int u2, int stride, int order, int points)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, u1, u2, stride, order, points, GL.EntryPoints[1172]);
			}

			// Token: 0x06002E2D RID: 11821 RVA: 0x0007D124 File Offset: 0x0007B324
			public static void Map2x(OesFixedPoint target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points, GL.EntryPoints[1175]);
			}

			// Token: 0x06002E2E RID: 11822 RVA: 0x0007D154 File Offset: 0x0007B354
			public static void MapGrid1x(int n, int u1, int u2)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), n, u1, u2, GL.EntryPoints[1182]);
			}

			// Token: 0x06002E2F RID: 11823 RVA: 0x0007D16C File Offset: 0x0007B36C
			public static void MapGrid2x(int n, int u1, int u2, int v1, int v2)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), n, u1, u2, v1, v2, GL.EntryPoints[1185]);
			}

			// Token: 0x06002E30 RID: 11824 RVA: 0x0007D184 File Offset: 0x0007B384
			public static void Materialx(OesFixedPoint face, OesFixedPoint pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), face, pname, param, GL.EntryPoints[1200]);
			}

			// Token: 0x06002E31 RID: 11825 RVA: 0x0007D19C File Offset: 0x0007B39C
			[CLSCompliant(false)]
			public unsafe static void Materialx(OesFixedPoint face, OesFixedPoint pname, int[] param)
			{
				fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), face, pname, ptr, GL.EntryPoints[1201]);
				}
			}

			// Token: 0x06002E32 RID: 11826 RVA: 0x0007D1D4 File Offset: 0x0007B3D4
			[CLSCompliant(false)]
			public unsafe static void Materialx(OesFixedPoint face, OesFixedPoint pname, int* param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), face, pname, param, GL.EntryPoints[1201]);
			}

			// Token: 0x06002E33 RID: 11827 RVA: 0x0007D1EC File Offset: 0x0007B3EC
			[CLSCompliant(false)]
			public static void MultiTexCoord1(OesByteCoordinates texture, byte s)
			{
				calli(System.Void(System.Int32,System.SByte), texture, s, GL.EntryPoints[1250]);
			}

			// Token: 0x06002E34 RID: 11828 RVA: 0x0007D200 File Offset: 0x0007B400
			[CLSCompliant(false)]
			public static void MultiTexCoord1(OesByteCoordinates texture, sbyte s)
			{
				calli(System.Void(System.Int32,System.SByte), texture, s, GL.EntryPoints[1250]);
			}

			// Token: 0x06002E35 RID: 11829 RVA: 0x0007D214 File Offset: 0x0007B414
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord1(OesByteCoordinates texture, byte* coords)
			{
				calli(System.Void(System.Int32,System.SByte*), texture, coords, GL.EntryPoints[1251]);
			}

			// Token: 0x06002E36 RID: 11830 RVA: 0x0007D228 File Offset: 0x0007B428
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord1(OesByteCoordinates texture, sbyte* coords)
			{
				calli(System.Void(System.Int32,System.SByte*), texture, coords, GL.EntryPoints[1251]);
			}

			// Token: 0x06002E37 RID: 11831 RVA: 0x0007D23C File Offset: 0x0007B43C
			public static void MultiTexCoord1x(OesFixedPoint texture, int s)
			{
				calli(System.Void(System.Int32,System.Int32), texture, s, GL.EntryPoints[1270]);
			}

			// Token: 0x06002E38 RID: 11832 RVA: 0x0007D250 File Offset: 0x0007B450
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord1x(OesFixedPoint texture, int* coords)
			{
				calli(System.Void(System.Int32,System.Int32*), texture, coords, GL.EntryPoints[1271]);
			}

			// Token: 0x06002E39 RID: 11833 RVA: 0x0007D264 File Offset: 0x0007B464
			[CLSCompliant(false)]
			public static void MultiTexCoord2(OesByteCoordinates texture, byte s, byte t)
			{
				calli(System.Void(System.Int32,System.SByte,System.SByte), texture, s, t, GL.EntryPoints[1272]);
			}

			// Token: 0x06002E3A RID: 11834 RVA: 0x0007D27C File Offset: 0x0007B47C
			[CLSCompliant(false)]
			public static void MultiTexCoord2(OesByteCoordinates texture, sbyte s, sbyte t)
			{
				calli(System.Void(System.Int32,System.SByte,System.SByte), texture, s, t, GL.EntryPoints[1272]);
			}

			// Token: 0x06002E3B RID: 11835 RVA: 0x0007D294 File Offset: 0x0007B494
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(OesByteCoordinates texture, byte[] coords)
			{
				fixed (byte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.SByte*), texture, ptr, GL.EntryPoints[1273]);
				}
			}

			// Token: 0x06002E3C RID: 11836 RVA: 0x0007D2C8 File Offset: 0x0007B4C8
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(OesByteCoordinates texture, ref byte coords)
			{
				fixed (byte* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.SByte*), texture, ptr, GL.EntryPoints[1273]);
				}
			}

			// Token: 0x06002E3D RID: 11837 RVA: 0x0007D2EC File Offset: 0x0007B4EC
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(OesByteCoordinates texture, byte* coords)
			{
				calli(System.Void(System.Int32,System.SByte*), texture, coords, GL.EntryPoints[1273]);
			}

			// Token: 0x06002E3E RID: 11838 RVA: 0x0007D300 File Offset: 0x0007B500
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(OesByteCoordinates texture, sbyte[] coords)
			{
				fixed (sbyte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.SByte*), texture, ptr, GL.EntryPoints[1273]);
				}
			}

			// Token: 0x06002E3F RID: 11839 RVA: 0x0007D334 File Offset: 0x0007B534
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(OesByteCoordinates texture, ref sbyte coords)
			{
				fixed (sbyte* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.SByte*), texture, ptr, GL.EntryPoints[1273]);
				}
			}

			// Token: 0x06002E40 RID: 11840 RVA: 0x0007D358 File Offset: 0x0007B558
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2(OesByteCoordinates texture, sbyte* coords)
			{
				calli(System.Void(System.Int32,System.SByte*), texture, coords, GL.EntryPoints[1273]);
			}

			// Token: 0x06002E41 RID: 11841 RVA: 0x0007D36C File Offset: 0x0007B56C
			public static void MultiTexCoord2x(OesFixedPoint texture, int s, int t)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), texture, s, t, GL.EntryPoints[1292]);
			}

			// Token: 0x06002E42 RID: 11842 RVA: 0x0007D384 File Offset: 0x0007B584
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2x(OesFixedPoint texture, int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), texture, ptr, GL.EntryPoints[1293]);
				}
			}

			// Token: 0x06002E43 RID: 11843 RVA: 0x0007D3B8 File Offset: 0x0007B5B8
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2x(OesFixedPoint texture, ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Int32*), texture, ptr, GL.EntryPoints[1293]);
				}
			}

			// Token: 0x06002E44 RID: 11844 RVA: 0x0007D3DC File Offset: 0x0007B5DC
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord2x(OesFixedPoint texture, int* coords)
			{
				calli(System.Void(System.Int32,System.Int32*), texture, coords, GL.EntryPoints[1293]);
			}

			// Token: 0x06002E45 RID: 11845 RVA: 0x0007D3F0 File Offset: 0x0007B5F0
			[CLSCompliant(false)]
			public static void MultiTexCoord3(OesByteCoordinates texture, byte s, byte t, byte r)
			{
				calli(System.Void(System.Int32,System.SByte,System.SByte,System.SByte), texture, s, t, r, GL.EntryPoints[1294]);
			}

			// Token: 0x06002E46 RID: 11846 RVA: 0x0007D408 File Offset: 0x0007B608
			[CLSCompliant(false)]
			public static void MultiTexCoord3(OesByteCoordinates texture, sbyte s, sbyte t, sbyte r)
			{
				calli(System.Void(System.Int32,System.SByte,System.SByte,System.SByte), texture, s, t, r, GL.EntryPoints[1294]);
			}

			// Token: 0x06002E47 RID: 11847 RVA: 0x0007D420 File Offset: 0x0007B620
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(OesByteCoordinates texture, byte[] coords)
			{
				fixed (byte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.SByte*), texture, ptr, GL.EntryPoints[1295]);
				}
			}

			// Token: 0x06002E48 RID: 11848 RVA: 0x0007D454 File Offset: 0x0007B654
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(OesByteCoordinates texture, ref byte coords)
			{
				fixed (byte* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.SByte*), texture, ptr, GL.EntryPoints[1295]);
				}
			}

			// Token: 0x06002E49 RID: 11849 RVA: 0x0007D478 File Offset: 0x0007B678
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(OesByteCoordinates texture, byte* coords)
			{
				calli(System.Void(System.Int32,System.SByte*), texture, coords, GL.EntryPoints[1295]);
			}

			// Token: 0x06002E4A RID: 11850 RVA: 0x0007D48C File Offset: 0x0007B68C
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(OesByteCoordinates texture, sbyte[] coords)
			{
				fixed (sbyte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.SByte*), texture, ptr, GL.EntryPoints[1295]);
				}
			}

			// Token: 0x06002E4B RID: 11851 RVA: 0x0007D4C0 File Offset: 0x0007B6C0
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(OesByteCoordinates texture, ref sbyte coords)
			{
				fixed (sbyte* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.SByte*), texture, ptr, GL.EntryPoints[1295]);
				}
			}

			// Token: 0x06002E4C RID: 11852 RVA: 0x0007D4E4 File Offset: 0x0007B6E4
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3(OesByteCoordinates texture, sbyte* coords)
			{
				calli(System.Void(System.Int32,System.SByte*), texture, coords, GL.EntryPoints[1295]);
			}

			// Token: 0x06002E4D RID: 11853 RVA: 0x0007D4F8 File Offset: 0x0007B6F8
			public static void MultiTexCoord3x(OesFixedPoint texture, int s, int t, int r)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), texture, s, t, r, GL.EntryPoints[1314]);
			}

			// Token: 0x06002E4E RID: 11854 RVA: 0x0007D510 File Offset: 0x0007B710
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3x(OesFixedPoint texture, int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), texture, ptr, GL.EntryPoints[1315]);
				}
			}

			// Token: 0x06002E4F RID: 11855 RVA: 0x0007D544 File Offset: 0x0007B744
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3x(OesFixedPoint texture, ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Int32*), texture, ptr, GL.EntryPoints[1315]);
				}
			}

			// Token: 0x06002E50 RID: 11856 RVA: 0x0007D568 File Offset: 0x0007B768
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord3x(OesFixedPoint texture, int* coords)
			{
				calli(System.Void(System.Int32,System.Int32*), texture, coords, GL.EntryPoints[1315]);
			}

			// Token: 0x06002E51 RID: 11857 RVA: 0x0007D57C File Offset: 0x0007B77C
			[CLSCompliant(false)]
			public static void MultiTexCoord4(OesByteCoordinates texture, byte s, byte t, byte r, byte q)
			{
				calli(System.Void(System.Int32,System.SByte,System.SByte,System.SByte,System.SByte), texture, s, t, r, q, GL.EntryPoints[1316]);
			}

			// Token: 0x06002E52 RID: 11858 RVA: 0x0007D594 File Offset: 0x0007B794
			[CLSCompliant(false)]
			public static void MultiTexCoord4(OesByteCoordinates texture, sbyte s, sbyte t, sbyte r, sbyte q)
			{
				calli(System.Void(System.Int32,System.SByte,System.SByte,System.SByte,System.SByte), texture, s, t, r, q, GL.EntryPoints[1316]);
			}

			// Token: 0x06002E53 RID: 11859 RVA: 0x0007D5AC File Offset: 0x0007B7AC
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(OesByteCoordinates texture, byte[] coords)
			{
				fixed (byte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.SByte*), texture, ptr, GL.EntryPoints[1317]);
				}
			}

			// Token: 0x06002E54 RID: 11860 RVA: 0x0007D5E0 File Offset: 0x0007B7E0
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(OesByteCoordinates texture, ref byte coords)
			{
				fixed (byte* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.SByte*), texture, ptr, GL.EntryPoints[1317]);
				}
			}

			// Token: 0x06002E55 RID: 11861 RVA: 0x0007D604 File Offset: 0x0007B804
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(OesByteCoordinates texture, byte* coords)
			{
				calli(System.Void(System.Int32,System.SByte*), texture, coords, GL.EntryPoints[1317]);
			}

			// Token: 0x06002E56 RID: 11862 RVA: 0x0007D618 File Offset: 0x0007B818
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(OesByteCoordinates texture, sbyte[] coords)
			{
				fixed (sbyte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.SByte*), texture, ptr, GL.EntryPoints[1317]);
				}
			}

			// Token: 0x06002E57 RID: 11863 RVA: 0x0007D64C File Offset: 0x0007B84C
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(OesByteCoordinates texture, ref sbyte coords)
			{
				fixed (sbyte* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.SByte*), texture, ptr, GL.EntryPoints[1317]);
				}
			}

			// Token: 0x06002E58 RID: 11864 RVA: 0x0007D670 File Offset: 0x0007B870
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4(OesByteCoordinates texture, sbyte* coords)
			{
				calli(System.Void(System.Int32,System.SByte*), texture, coords, GL.EntryPoints[1317]);
			}

			// Token: 0x06002E59 RID: 11865 RVA: 0x0007D684 File Offset: 0x0007B884
			public static void MultiTexCoord4x(OesFixedPoint texture, int s, int t, int r, int q)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, s, t, r, q, GL.EntryPoints[1336]);
			}

			// Token: 0x06002E5A RID: 11866 RVA: 0x0007D69C File Offset: 0x0007B89C
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4x(OesFixedPoint texture, int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), texture, ptr, GL.EntryPoints[1337]);
				}
			}

			// Token: 0x06002E5B RID: 11867 RVA: 0x0007D6D0 File Offset: 0x0007B8D0
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4x(OesFixedPoint texture, ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32,System.Int32*), texture, ptr, GL.EntryPoints[1337]);
				}
			}

			// Token: 0x06002E5C RID: 11868 RVA: 0x0007D6F4 File Offset: 0x0007B8F4
			[CLSCompliant(false)]
			public unsafe static void MultiTexCoord4x(OesFixedPoint texture, int* coords)
			{
				calli(System.Void(System.Int32,System.Int32*), texture, coords, GL.EntryPoints[1337]);
			}

			// Token: 0x06002E5D RID: 11869 RVA: 0x0007D708 File Offset: 0x0007B908
			[CLSCompliant(false)]
			public unsafe static void MultMatrixx(int[] m)
			{
				fixed (int* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1372]);
				}
			}

			// Token: 0x06002E5E RID: 11870 RVA: 0x0007D73C File Offset: 0x0007B93C
			[CLSCompliant(false)]
			public unsafe static void MultMatrixx(ref int m)
			{
				fixed (int* ptr = &m)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1372]);
				}
			}

			// Token: 0x06002E5F RID: 11871 RVA: 0x0007D760 File Offset: 0x0007B960
			[CLSCompliant(false)]
			public unsafe static void MultMatrixx(int* m)
			{
				calli(System.Void(System.Int32*), m, GL.EntryPoints[1372]);
			}

			// Token: 0x06002E60 RID: 11872 RVA: 0x0007D774 File Offset: 0x0007B974
			[CLSCompliant(false)]
			public unsafe static void MultTransposeMatrixx(int[] m)
			{
				fixed (int* ptr = ref (m != null && m.Length != 0) ? ref m[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1377]);
				}
			}

			// Token: 0x06002E61 RID: 11873 RVA: 0x0007D7A8 File Offset: 0x0007B9A8
			[CLSCompliant(false)]
			public unsafe static void MultTransposeMatrixx(ref int m)
			{
				fixed (int* ptr = &m)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1377]);
				}
			}

			// Token: 0x06002E62 RID: 11874 RVA: 0x0007D7CC File Offset: 0x0007B9CC
			[CLSCompliant(false)]
			public unsafe static void MultTransposeMatrixx(int* m)
			{
				calli(System.Void(System.Int32*), m, GL.EntryPoints[1377]);
			}

			// Token: 0x06002E63 RID: 11875 RVA: 0x0007D7E0 File Offset: 0x0007B9E0
			public static void Normal3x(int nx, int ny, int nz)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), nx, ny, nz, GL.EntryPoints[1422]);
			}

			// Token: 0x06002E64 RID: 11876 RVA: 0x0007D7F8 File Offset: 0x0007B9F8
			[CLSCompliant(false)]
			public unsafe static void Normal3x(int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1423]);
				}
			}

			// Token: 0x06002E65 RID: 11877 RVA: 0x0007D82C File Offset: 0x0007BA2C
			[CLSCompliant(false)]
			public unsafe static void Normal3x(ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1423]);
				}
			}

			// Token: 0x06002E66 RID: 11878 RVA: 0x0007D850 File Offset: 0x0007BA50
			[CLSCompliant(false)]
			public unsafe static void Normal3x(int* coords)
			{
				calli(System.Void(System.Int32*), coords, GL.EntryPoints[1423]);
			}

			// Token: 0x06002E67 RID: 11879 RVA: 0x0007D864 File Offset: 0x0007BA64
			public static void Ortho(float l, float r, float b, float t, float n, float f)
			{
				calli(System.Void(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), l, r, b, t, n, f, GL.EntryPoints[1448]);
			}

			// Token: 0x06002E68 RID: 11880 RVA: 0x0007D880 File Offset: 0x0007BA80
			public static void Orthox(int l, int r, int b, int t, int n, int f)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), l, r, b, t, n, f, GL.EntryPoints[1449]);
			}

			// Token: 0x06002E69 RID: 11881 RVA: 0x0007D89C File Offset: 0x0007BA9C
			public static void PassThroughx(int token)
			{
				calli(System.Void(System.Int32), token, GL.EntryPoints[1452]);
			}

			// Token: 0x06002E6A RID: 11882 RVA: 0x0007D8B0 File Offset: 0x0007BAB0
			public static void PixelTransferx(OesFixedPoint pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[1490]);
			}

			// Token: 0x06002E6B RID: 11883 RVA: 0x0007D8C4 File Offset: 0x0007BAC4
			public static void PixelZoomx(int xfactor, int yfactor)
			{
				calli(System.Void(System.Int32,System.Int32), xfactor, yfactor, GL.EntryPoints[1496]);
			}

			// Token: 0x06002E6C RID: 11884 RVA: 0x0007D8D8 File Offset: 0x0007BAD8
			public static void PointParameterx(OesFixedPoint pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[1512]);
			}

			// Token: 0x06002E6D RID: 11885 RVA: 0x0007D8EC File Offset: 0x0007BAEC
			[CLSCompliant(false)]
			public unsafe static void PointParameterx(OesFixedPoint pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[1513]);
				}
			}

			// Token: 0x06002E6E RID: 11886 RVA: 0x0007D920 File Offset: 0x0007BB20
			[CLSCompliant(false)]
			public unsafe static void PointParameterx(OesFixedPoint pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, @params, GL.EntryPoints[1513]);
			}

			// Token: 0x06002E6F RID: 11887 RVA: 0x0007D934 File Offset: 0x0007BB34
			public static void PointSizex(int size)
			{
				calli(System.Void(System.Int32), size, GL.EntryPoints[1515]);
			}

			// Token: 0x06002E70 RID: 11888 RVA: 0x0007D948 File Offset: 0x0007BB48
			public static void PolygonOffsetx(int factor, int units)
			{
				calli(System.Void(System.Int32,System.Int32), factor, units, GL.EntryPoints[1521]);
			}

			// Token: 0x06002E71 RID: 11889 RVA: 0x0007D95C File Offset: 0x0007BB5C
			[CLSCompliant(false)]
			public unsafe static void PrioritizeTexturesx(int n, int[] textures, int[] priorities)
			{
				fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (priorities != null && priorities.Length != 0) ? ref priorities[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.UInt32*,System.Int32*), n, ptr2, ptr3, GL.EntryPoints[1537]);
					}
				}
			}

			// Token: 0x06002E72 RID: 11890 RVA: 0x0007D9A8 File Offset: 0x0007BBA8
			[CLSCompliant(false)]
			public unsafe static void PrioritizeTexturesx(int n, ref int textures, ref int priorities)
			{
				fixed (int* ptr = &textures)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &priorities)
					{
						calli(System.Void(System.Int32,System.UInt32*,System.Int32*), n, ptr2, ptr3, GL.EntryPoints[1537]);
					}
				}
			}

			// Token: 0x06002E73 RID: 11891 RVA: 0x0007D9D0 File Offset: 0x0007BBD0
			[CLSCompliant(false)]
			public unsafe static void PrioritizeTexturesx(int n, int* textures, int* priorities)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32*), n, textures, priorities, GL.EntryPoints[1537]);
			}

			// Token: 0x06002E74 RID: 11892 RVA: 0x0007D9E8 File Offset: 0x0007BBE8
			[CLSCompliant(false)]
			public unsafe static void PrioritizeTexturesx(int n, uint[] textures, int[] priorities)
			{
				fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = ref (priorities != null && priorities.Length != 0) ? ref priorities[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.UInt32*,System.Int32*), n, ptr2, ptr3, GL.EntryPoints[1537]);
					}
				}
			}

			// Token: 0x06002E75 RID: 11893 RVA: 0x0007DA34 File Offset: 0x0007BC34
			[CLSCompliant(false)]
			public unsafe static void PrioritizeTexturesx(int n, ref uint textures, ref int priorities)
			{
				fixed (uint* ptr = &textures)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = &priorities)
					{
						calli(System.Void(System.Int32,System.UInt32*,System.Int32*), n, ptr2, ptr3, GL.EntryPoints[1537]);
					}
				}
			}

			// Token: 0x06002E76 RID: 11894 RVA: 0x0007DA5C File Offset: 0x0007BC5C
			[CLSCompliant(false)]
			public unsafe static void PrioritizeTexturesx(int n, uint* textures, int* priorities)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32*), n, textures, priorities, GL.EntryPoints[1537]);
			}

			// Token: 0x06002E77 RID: 11895 RVA: 0x0007DA74 File Offset: 0x0007BC74
			[CLSCompliant(false)]
			public unsafe static int QueryMatrixx([Out] int[] mantissa, [Out] int[] exponent)
			{
				fixed (int* ptr = ref (mantissa != null && mantissa.Length != 0) ? ref mantissa[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (exponent != null && exponent.Length != 0) ? ref exponent[0] : ref *null)
					{
						return calli(System.Int32(System.Int32*,System.Int32*), ptr2, ptr3, GL.EntryPoints[1713]);
					}
				}
			}

			// Token: 0x06002E78 RID: 11896 RVA: 0x0007DAC0 File Offset: 0x0007BCC0
			[CLSCompliant(false)]
			public unsafe static int QueryMatrixx(out int mantissa, out int exponent)
			{
				fixed (int* ptr = &mantissa)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &exponent)
					{
						return calli(System.Int32(System.Int32*,System.Int32*), ptr2, ptr3, GL.EntryPoints[1713]);
					}
				}
			}

			// Token: 0x06002E79 RID: 11897 RVA: 0x0007DAE8 File Offset: 0x0007BCE8
			[CLSCompliant(false)]
			public unsafe static int QueryMatrixx([Out] int* mantissa, [Out] int* exponent)
			{
				return calli(System.Int32(System.Int32*,System.Int32*), mantissa, exponent, GL.EntryPoints[1713]);
			}

			// Token: 0x06002E7A RID: 11898 RVA: 0x0007DAFC File Offset: 0x0007BCFC
			public static void RasterPos2x(int x, int y)
			{
				calli(System.Void(System.Int32,System.Int32), x, y, GL.EntryPoints[1723]);
			}

			// Token: 0x06002E7B RID: 11899 RVA: 0x0007DB10 File Offset: 0x0007BD10
			[CLSCompliant(false)]
			public unsafe static void RasterPos2x(int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1724]);
				}
			}

			// Token: 0x06002E7C RID: 11900 RVA: 0x0007DB44 File Offset: 0x0007BD44
			[CLSCompliant(false)]
			public unsafe static void RasterPos2x(ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1724]);
				}
			}

			// Token: 0x06002E7D RID: 11901 RVA: 0x0007DB68 File Offset: 0x0007BD68
			[CLSCompliant(false)]
			public unsafe static void RasterPos2x(int* coords)
			{
				calli(System.Void(System.Int32*), coords, GL.EntryPoints[1724]);
			}

			// Token: 0x06002E7E RID: 11902 RVA: 0x0007DB7C File Offset: 0x0007BD7C
			public static void RasterPos3x(int x, int y, int z)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), x, y, z, GL.EntryPoints[1733]);
			}

			// Token: 0x06002E7F RID: 11903 RVA: 0x0007DB94 File Offset: 0x0007BD94
			[CLSCompliant(false)]
			public unsafe static void RasterPos3x(int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1734]);
				}
			}

			// Token: 0x06002E80 RID: 11904 RVA: 0x0007DBC8 File Offset: 0x0007BDC8
			[CLSCompliant(false)]
			public unsafe static void RasterPos3x(ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1734]);
				}
			}

			// Token: 0x06002E81 RID: 11905 RVA: 0x0007DBEC File Offset: 0x0007BDEC
			[CLSCompliant(false)]
			public unsafe static void RasterPos3x(int* coords)
			{
				calli(System.Void(System.Int32*), coords, GL.EntryPoints[1734]);
			}

			// Token: 0x06002E82 RID: 11906 RVA: 0x0007DC00 File Offset: 0x0007BE00
			public static void RasterPos4x(int x, int y, int z, int w)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), x, y, z, w, GL.EntryPoints[1743]);
			}

			// Token: 0x06002E83 RID: 11907 RVA: 0x0007DC18 File Offset: 0x0007BE18
			[CLSCompliant(false)]
			public unsafe static void RasterPos4x(int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1744]);
				}
			}

			// Token: 0x06002E84 RID: 11908 RVA: 0x0007DC4C File Offset: 0x0007BE4C
			[CLSCompliant(false)]
			public unsafe static void RasterPos4x(ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1744]);
				}
			}

			// Token: 0x06002E85 RID: 11909 RVA: 0x0007DC70 File Offset: 0x0007BE70
			[CLSCompliant(false)]
			public unsafe static void RasterPos4x(int* coords)
			{
				calli(System.Void(System.Int32*), coords, GL.EntryPoints[1744]);
			}

			// Token: 0x06002E86 RID: 11910 RVA: 0x0007DC84 File Offset: 0x0007BE84
			public static void Rectx(int x1, int y1, int x2, int y2)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), x1, y1, x2, y2, GL.EntryPoints[1757]);
			}

			// Token: 0x06002E87 RID: 11911 RVA: 0x0007DC9C File Offset: 0x0007BE9C
			[CLSCompliant(false)]
			public unsafe static void Rectx(int[] v1, int[] v2)
			{
				fixed (int* ptr = ref (v1 != null && v1.Length != 0) ? ref v1[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (v2 != null && v2.Length != 0) ? ref v2[0] : ref *null)
					{
						calli(System.Void(System.Int32*,System.Int32*), ptr2, ptr3, GL.EntryPoints[1758]);
					}
				}
			}

			// Token: 0x06002E88 RID: 11912 RVA: 0x0007DCE8 File Offset: 0x0007BEE8
			[CLSCompliant(false)]
			public unsafe static void Rectx(ref int v1, ref int v2)
			{
				fixed (int* ptr = &v1)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &v2)
					{
						calli(System.Void(System.Int32*,System.Int32*), ptr2, ptr3, GL.EntryPoints[1758]);
					}
				}
			}

			// Token: 0x06002E89 RID: 11913 RVA: 0x0007DD10 File Offset: 0x0007BF10
			[CLSCompliant(false)]
			public unsafe static void Rectx(int* v1, int* v2)
			{
				calli(System.Void(System.Int32*,System.Int32*), v1, v2, GL.EntryPoints[1758]);
			}

			// Token: 0x06002E8A RID: 11914 RVA: 0x0007DD24 File Offset: 0x0007BF24
			public static void Rotatex(int angle, int x, int y, int z)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), angle, x, y, z, GL.EntryPoints[1800]);
			}

			// Token: 0x06002E8B RID: 11915 RVA: 0x0007DD3C File Offset: 0x0007BF3C
			public static void SampleCoverage(int value, bool invert)
			{
				calli(System.Void(System.Int32,System.Boolean), value, invert, GL.EntryPoints[1803]);
			}

			// Token: 0x06002E8C RID: 11916 RVA: 0x0007DD50 File Offset: 0x0007BF50
			public static void SampleCoveragex(int value, bool invert)
			{
				calli(System.Void(System.Int32,System.Boolean), value, invert, GL.EntryPoints[1804]);
			}

			// Token: 0x06002E8D RID: 11917 RVA: 0x0007DD64 File Offset: 0x0007BF64
			public static void Scalex(int x, int y, int z)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), x, y, z, GL.EntryPoints[1820]);
			}

			// Token: 0x06002E8E RID: 11918 RVA: 0x0007DD7C File Offset: 0x0007BF7C
			[CLSCompliant(false)]
			public static void TexCoord1(byte s)
			{
				calli(System.Void(System.SByte), s, GL.EntryPoints[1931]);
			}

			// Token: 0x06002E8F RID: 11919 RVA: 0x0007DD90 File Offset: 0x0007BF90
			[CLSCompliant(false)]
			public static void TexCoord1(sbyte s)
			{
				calli(System.Void(System.SByte), s, GL.EntryPoints[1931]);
			}

			// Token: 0x06002E90 RID: 11920 RVA: 0x0007DDA4 File Offset: 0x0007BFA4
			[CLSCompliant(false)]
			public unsafe static void TexCoord1(byte* coords)
			{
				calli(System.Void(System.SByte*), coords, GL.EntryPoints[1932]);
			}

			// Token: 0x06002E91 RID: 11921 RVA: 0x0007DDB8 File Offset: 0x0007BFB8
			[CLSCompliant(false)]
			public unsafe static void TexCoord1(sbyte* coords)
			{
				calli(System.Void(System.SByte*), coords, GL.EntryPoints[1932]);
			}

			// Token: 0x06002E92 RID: 11922 RVA: 0x0007DDCC File Offset: 0x0007BFCC
			public static void TexCoord1x(int s)
			{
				calli(System.Void(System.Int32), s, GL.EntryPoints[1943]);
			}

			// Token: 0x06002E93 RID: 11923 RVA: 0x0007DDE0 File Offset: 0x0007BFE0
			[CLSCompliant(false)]
			public unsafe static void TexCoord1x(int* coords)
			{
				calli(System.Void(System.Int32*), coords, GL.EntryPoints[1944]);
			}

			// Token: 0x06002E94 RID: 11924 RVA: 0x0007DDF4 File Offset: 0x0007BFF4
			[CLSCompliant(false)]
			public static void TexCoord2(byte s, byte t)
			{
				calli(System.Void(System.SByte,System.SByte), s, t, GL.EntryPoints[1945]);
			}

			// Token: 0x06002E95 RID: 11925 RVA: 0x0007DE08 File Offset: 0x0007C008
			[CLSCompliant(false)]
			public static void TexCoord2(sbyte s, sbyte t)
			{
				calli(System.Void(System.SByte,System.SByte), s, t, GL.EntryPoints[1945]);
			}

			// Token: 0x06002E96 RID: 11926 RVA: 0x0007DE1C File Offset: 0x0007C01C
			[CLSCompliant(false)]
			public unsafe static void TexCoord2(byte[] coords)
			{
				fixed (byte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1946]);
				}
			}

			// Token: 0x06002E97 RID: 11927 RVA: 0x0007DE50 File Offset: 0x0007C050
			[CLSCompliant(false)]
			public unsafe static void TexCoord2(ref byte coords)
			{
				fixed (byte* ptr = &coords)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1946]);
				}
			}

			// Token: 0x06002E98 RID: 11928 RVA: 0x0007DE74 File Offset: 0x0007C074
			[CLSCompliant(false)]
			public unsafe static void TexCoord2(byte* coords)
			{
				calli(System.Void(System.SByte*), coords, GL.EntryPoints[1946]);
			}

			// Token: 0x06002E99 RID: 11929 RVA: 0x0007DE88 File Offset: 0x0007C088
			[CLSCompliant(false)]
			public unsafe static void TexCoord2(sbyte[] coords)
			{
				fixed (sbyte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1946]);
				}
			}

			// Token: 0x06002E9A RID: 11930 RVA: 0x0007DEBC File Offset: 0x0007C0BC
			[CLSCompliant(false)]
			public unsafe static void TexCoord2(ref sbyte coords)
			{
				fixed (sbyte* ptr = &coords)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1946]);
				}
			}

			// Token: 0x06002E9B RID: 11931 RVA: 0x0007DEE0 File Offset: 0x0007C0E0
			[CLSCompliant(false)]
			public unsafe static void TexCoord2(sbyte* coords)
			{
				calli(System.Void(System.SByte*), coords, GL.EntryPoints[1946]);
			}

			// Token: 0x06002E9C RID: 11932 RVA: 0x0007DEF4 File Offset: 0x0007C0F4
			public static void TexCoord2x(int s, int t)
			{
				calli(System.Void(System.Int32,System.Int32), s, t, GL.EntryPoints[1967]);
			}

			// Token: 0x06002E9D RID: 11933 RVA: 0x0007DF08 File Offset: 0x0007C108
			[CLSCompliant(false)]
			public unsafe static void TexCoord2x(int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1968]);
				}
			}

			// Token: 0x06002E9E RID: 11934 RVA: 0x0007DF3C File Offset: 0x0007C13C
			[CLSCompliant(false)]
			public unsafe static void TexCoord2x(ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1968]);
				}
			}

			// Token: 0x06002E9F RID: 11935 RVA: 0x0007DF60 File Offset: 0x0007C160
			[CLSCompliant(false)]
			public unsafe static void TexCoord2x(int* coords)
			{
				calli(System.Void(System.Int32*), coords, GL.EntryPoints[1968]);
			}

			// Token: 0x06002EA0 RID: 11936 RVA: 0x0007DF74 File Offset: 0x0007C174
			[CLSCompliant(false)]
			public static void TexCoord3(byte s, byte t, byte r)
			{
				calli(System.Void(System.SByte,System.SByte,System.SByte), s, t, r, GL.EntryPoints[1969]);
			}

			// Token: 0x06002EA1 RID: 11937 RVA: 0x0007DF8C File Offset: 0x0007C18C
			[CLSCompliant(false)]
			public static void TexCoord3(sbyte s, sbyte t, sbyte r)
			{
				calli(System.Void(System.SByte,System.SByte,System.SByte), s, t, r, GL.EntryPoints[1969]);
			}

			// Token: 0x06002EA2 RID: 11938 RVA: 0x0007DFA4 File Offset: 0x0007C1A4
			[CLSCompliant(false)]
			public unsafe static void TexCoord3(byte[] coords)
			{
				fixed (byte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1970]);
				}
			}

			// Token: 0x06002EA3 RID: 11939 RVA: 0x0007DFD8 File Offset: 0x0007C1D8
			[CLSCompliant(false)]
			public unsafe static void TexCoord3(ref byte coords)
			{
				fixed (byte* ptr = &coords)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1970]);
				}
			}

			// Token: 0x06002EA4 RID: 11940 RVA: 0x0007DFFC File Offset: 0x0007C1FC
			[CLSCompliant(false)]
			public unsafe static void TexCoord3(byte* coords)
			{
				calli(System.Void(System.SByte*), coords, GL.EntryPoints[1970]);
			}

			// Token: 0x06002EA5 RID: 11941 RVA: 0x0007E010 File Offset: 0x0007C210
			[CLSCompliant(false)]
			public unsafe static void TexCoord3(sbyte[] coords)
			{
				fixed (sbyte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1970]);
				}
			}

			// Token: 0x06002EA6 RID: 11942 RVA: 0x0007E044 File Offset: 0x0007C244
			[CLSCompliant(false)]
			public unsafe static void TexCoord3(ref sbyte coords)
			{
				fixed (sbyte* ptr = &coords)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1970]);
				}
			}

			// Token: 0x06002EA7 RID: 11943 RVA: 0x0007E068 File Offset: 0x0007C268
			[CLSCompliant(false)]
			public unsafe static void TexCoord3(sbyte* coords)
			{
				calli(System.Void(System.SByte*), coords, GL.EntryPoints[1970]);
			}

			// Token: 0x06002EA8 RID: 11944 RVA: 0x0007E07C File Offset: 0x0007C27C
			public static void TexCoord3x(int s, int t, int r)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), s, t, r, GL.EntryPoints[1981]);
			}

			// Token: 0x06002EA9 RID: 11945 RVA: 0x0007E094 File Offset: 0x0007C294
			[CLSCompliant(false)]
			public unsafe static void TexCoord3x(int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1982]);
				}
			}

			// Token: 0x06002EAA RID: 11946 RVA: 0x0007E0C8 File Offset: 0x0007C2C8
			[CLSCompliant(false)]
			public unsafe static void TexCoord3x(ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[1982]);
				}
			}

			// Token: 0x06002EAB RID: 11947 RVA: 0x0007E0EC File Offset: 0x0007C2EC
			[CLSCompliant(false)]
			public unsafe static void TexCoord3x(int* coords)
			{
				calli(System.Void(System.Int32*), coords, GL.EntryPoints[1982]);
			}

			// Token: 0x06002EAC RID: 11948 RVA: 0x0007E100 File Offset: 0x0007C300
			[CLSCompliant(false)]
			public static void TexCoord4(byte s, byte t, byte r, byte q)
			{
				calli(System.Void(System.SByte,System.SByte,System.SByte,System.SByte), s, t, r, q, GL.EntryPoints[1983]);
			}

			// Token: 0x06002EAD RID: 11949 RVA: 0x0007E118 File Offset: 0x0007C318
			[CLSCompliant(false)]
			public static void TexCoord4(sbyte s, sbyte t, sbyte r, sbyte q)
			{
				calli(System.Void(System.SByte,System.SByte,System.SByte,System.SByte), s, t, r, q, GL.EntryPoints[1983]);
			}

			// Token: 0x06002EAE RID: 11950 RVA: 0x0007E130 File Offset: 0x0007C330
			[CLSCompliant(false)]
			public unsafe static void TexCoord4(byte[] coords)
			{
				fixed (byte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1984]);
				}
			}

			// Token: 0x06002EAF RID: 11951 RVA: 0x0007E164 File Offset: 0x0007C364
			[CLSCompliant(false)]
			public unsafe static void TexCoord4(ref byte coords)
			{
				fixed (byte* ptr = &coords)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1984]);
				}
			}

			// Token: 0x06002EB0 RID: 11952 RVA: 0x0007E188 File Offset: 0x0007C388
			[CLSCompliant(false)]
			public unsafe static void TexCoord4(byte* coords)
			{
				calli(System.Void(System.SByte*), coords, GL.EntryPoints[1984]);
			}

			// Token: 0x06002EB1 RID: 11953 RVA: 0x0007E19C File Offset: 0x0007C39C
			[CLSCompliant(false)]
			public unsafe static void TexCoord4(sbyte[] coords)
			{
				fixed (sbyte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1984]);
				}
			}

			// Token: 0x06002EB2 RID: 11954 RVA: 0x0007E1D0 File Offset: 0x0007C3D0
			[CLSCompliant(false)]
			public unsafe static void TexCoord4(ref sbyte coords)
			{
				fixed (sbyte* ptr = &coords)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[1984]);
				}
			}

			// Token: 0x06002EB3 RID: 11955 RVA: 0x0007E1F4 File Offset: 0x0007C3F4
			[CLSCompliant(false)]
			public unsafe static void TexCoord4(sbyte* coords)
			{
				calli(System.Void(System.SByte*), coords, GL.EntryPoints[1984]);
			}

			// Token: 0x06002EB4 RID: 11956 RVA: 0x0007E208 File Offset: 0x0007C408
			public static void TexCoord4x(int s, int t, int r, int q)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), s, t, r, q, GL.EntryPoints[1999]);
			}

			// Token: 0x06002EB5 RID: 11957 RVA: 0x0007E220 File Offset: 0x0007C420
			[CLSCompliant(false)]
			public unsafe static void TexCoord4x(int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2000]);
				}
			}

			// Token: 0x06002EB6 RID: 11958 RVA: 0x0007E254 File Offset: 0x0007C454
			[CLSCompliant(false)]
			public unsafe static void TexCoord4x(ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2000]);
				}
			}

			// Token: 0x06002EB7 RID: 11959 RVA: 0x0007E278 File Offset: 0x0007C478
			[CLSCompliant(false)]
			public unsafe static void TexCoord4x(int* coords)
			{
				calli(System.Void(System.Int32*), coords, GL.EntryPoints[2000]);
			}

			// Token: 0x06002EB8 RID: 11960 RVA: 0x0007E28C File Offset: 0x0007C48C
			public static void TexEnvx(OesFixedPoint target, OesFixedPoint pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, param, GL.EntryPoints[2018]);
			}

			// Token: 0x06002EB9 RID: 11961 RVA: 0x0007E2A4 File Offset: 0x0007C4A4
			[CLSCompliant(false)]
			public unsafe static void TexEnvx(OesFixedPoint target, OesFixedPoint pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[2019]);
				}
			}

			// Token: 0x06002EBA RID: 11962 RVA: 0x0007E2DC File Offset: 0x0007C4DC
			[CLSCompliant(false)]
			public unsafe static void TexEnvx(OesFixedPoint target, OesFixedPoint pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[2019]);
			}

			// Token: 0x06002EBB RID: 11963 RVA: 0x0007E2F4 File Offset: 0x0007C4F4
			public static void TexGenx(OesFixedPoint coord, OesFixedPoint pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), coord, pname, param, GL.EntryPoints[2027]);
			}

			// Token: 0x06002EBC RID: 11964 RVA: 0x0007E30C File Offset: 0x0007C50C
			[CLSCompliant(false)]
			public unsafe static void TexGenx(OesFixedPoint coord, OesFixedPoint pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), coord, pname, ptr, GL.EntryPoints[2028]);
				}
			}

			// Token: 0x06002EBD RID: 11965 RVA: 0x0007E344 File Offset: 0x0007C544
			[CLSCompliant(false)]
			public unsafe static void TexGenx(OesFixedPoint coord, OesFixedPoint pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), coord, pname, @params, GL.EntryPoints[2028]);
			}

			// Token: 0x06002EBE RID: 11966 RVA: 0x0007E35C File Offset: 0x0007C55C
			public static void TexParameterx(OesFixedPoint target, OesFixedPoint pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, param, GL.EntryPoints[2047]);
			}

			// Token: 0x06002EBF RID: 11967 RVA: 0x0007E374 File Offset: 0x0007C574
			[CLSCompliant(false)]
			public unsafe static void TexParameterx(OesFixedPoint target, OesFixedPoint pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[2048]);
				}
			}

			// Token: 0x06002EC0 RID: 11968 RVA: 0x0007E3AC File Offset: 0x0007C5AC
			[CLSCompliant(false)]
			public unsafe static void TexParameterx(OesFixedPoint target, OesFixedPoint pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[2048]);
			}

			// Token: 0x06002EC1 RID: 11969 RVA: 0x0007E3C4 File Offset: 0x0007C5C4
			public static void Translatex(int x, int y, int z)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), x, y, z, GL.EntryPoints[2105]);
			}

			// Token: 0x06002EC2 RID: 11970 RVA: 0x0007E3DC File Offset: 0x0007C5DC
			[CLSCompliant(false)]
			public static void Vertex2(byte x)
			{
				calli(System.Void(System.SByte), x, GL.EntryPoints[2244]);
			}

			// Token: 0x06002EC3 RID: 11971 RVA: 0x0007E3F0 File Offset: 0x0007C5F0
			[CLSCompliant(false)]
			public static void Vertex2(sbyte x)
			{
				calli(System.Void(System.SByte), x, GL.EntryPoints[2244]);
			}

			// Token: 0x06002EC4 RID: 11972 RVA: 0x0007E404 File Offset: 0x0007C604
			[CLSCompliant(false)]
			public unsafe static void Vertex2(byte[] coords)
			{
				fixed (byte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[2245]);
				}
			}

			// Token: 0x06002EC5 RID: 11973 RVA: 0x0007E438 File Offset: 0x0007C638
			[CLSCompliant(false)]
			public unsafe static void Vertex2(byte* coords)
			{
				calli(System.Void(System.SByte*), coords, GL.EntryPoints[2245]);
			}

			// Token: 0x06002EC6 RID: 11974 RVA: 0x0007E44C File Offset: 0x0007C64C
			[CLSCompliant(false)]
			public unsafe static void Vertex2(sbyte[] coords)
			{
				fixed (sbyte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[2245]);
				}
			}

			// Token: 0x06002EC7 RID: 11975 RVA: 0x0007E480 File Offset: 0x0007C680
			[CLSCompliant(false)]
			public unsafe static void Vertex2(sbyte* coords)
			{
				calli(System.Void(System.SByte*), coords, GL.EntryPoints[2245]);
			}

			// Token: 0x06002EC8 RID: 11976 RVA: 0x0007E494 File Offset: 0x0007C694
			public static void Vertex2x(int x)
			{
				calli(System.Void(System.Int32), x, GL.EntryPoints[2256]);
			}

			// Token: 0x06002EC9 RID: 11977 RVA: 0x0007E4A8 File Offset: 0x0007C6A8
			[CLSCompliant(false)]
			public unsafe static void Vertex2x(int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2257]);
				}
			}

			// Token: 0x06002ECA RID: 11978 RVA: 0x0007E4DC File Offset: 0x0007C6DC
			[CLSCompliant(false)]
			public unsafe static void Vertex2x(int* coords)
			{
				calli(System.Void(System.Int32*), coords, GL.EntryPoints[2257]);
			}

			// Token: 0x06002ECB RID: 11979 RVA: 0x0007E4F0 File Offset: 0x0007C6F0
			[CLSCompliant(false)]
			public static void Vertex3(byte x, byte y)
			{
				calli(System.Void(System.SByte,System.SByte), x, y, GL.EntryPoints[2258]);
			}

			// Token: 0x06002ECC RID: 11980 RVA: 0x0007E504 File Offset: 0x0007C704
			[CLSCompliant(false)]
			public static void Vertex3(sbyte x, sbyte y)
			{
				calli(System.Void(System.SByte,System.SByte), x, y, GL.EntryPoints[2258]);
			}

			// Token: 0x06002ECD RID: 11981 RVA: 0x0007E518 File Offset: 0x0007C718
			[CLSCompliant(false)]
			public unsafe static void Vertex3(byte[] coords)
			{
				fixed (byte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[2259]);
				}
			}

			// Token: 0x06002ECE RID: 11982 RVA: 0x0007E54C File Offset: 0x0007C74C
			[CLSCompliant(false)]
			public unsafe static void Vertex3(ref byte coords)
			{
				fixed (byte* ptr = &coords)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[2259]);
				}
			}

			// Token: 0x06002ECF RID: 11983 RVA: 0x0007E570 File Offset: 0x0007C770
			[CLSCompliant(false)]
			public unsafe static void Vertex3(byte* coords)
			{
				calli(System.Void(System.SByte*), coords, GL.EntryPoints[2259]);
			}

			// Token: 0x06002ED0 RID: 11984 RVA: 0x0007E584 File Offset: 0x0007C784
			[CLSCompliant(false)]
			public unsafe static void Vertex3(sbyte[] coords)
			{
				fixed (sbyte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[2259]);
				}
			}

			// Token: 0x06002ED1 RID: 11985 RVA: 0x0007E5B8 File Offset: 0x0007C7B8
			[CLSCompliant(false)]
			public unsafe static void Vertex3(ref sbyte coords)
			{
				fixed (sbyte* ptr = &coords)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[2259]);
				}
			}

			// Token: 0x06002ED2 RID: 11986 RVA: 0x0007E5DC File Offset: 0x0007C7DC
			[CLSCompliant(false)]
			public unsafe static void Vertex3(sbyte* coords)
			{
				calli(System.Void(System.SByte*), coords, GL.EntryPoints[2259]);
			}

			// Token: 0x06002ED3 RID: 11987 RVA: 0x0007E5F0 File Offset: 0x0007C7F0
			public static void Vertex3x(int x, int y)
			{
				calli(System.Void(System.Int32,System.Int32), x, y, GL.EntryPoints[2270]);
			}

			// Token: 0x06002ED4 RID: 11988 RVA: 0x0007E604 File Offset: 0x0007C804
			[CLSCompliant(false)]
			public unsafe static void Vertex3x(int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2271]);
				}
			}

			// Token: 0x06002ED5 RID: 11989 RVA: 0x0007E638 File Offset: 0x0007C838
			[CLSCompliant(false)]
			public unsafe static void Vertex3x(ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2271]);
				}
			}

			// Token: 0x06002ED6 RID: 11990 RVA: 0x0007E65C File Offset: 0x0007C85C
			[CLSCompliant(false)]
			public unsafe static void Vertex3x(int* coords)
			{
				calli(System.Void(System.Int32*), coords, GL.EntryPoints[2271]);
			}

			// Token: 0x06002ED7 RID: 11991 RVA: 0x0007E670 File Offset: 0x0007C870
			[CLSCompliant(false)]
			public static void Vertex4(byte x, byte y, byte z)
			{
				calli(System.Void(System.SByte,System.SByte,System.SByte), x, y, z, GL.EntryPoints[2272]);
			}

			// Token: 0x06002ED8 RID: 11992 RVA: 0x0007E688 File Offset: 0x0007C888
			[CLSCompliant(false)]
			public static void Vertex4(sbyte x, sbyte y, sbyte z)
			{
				calli(System.Void(System.SByte,System.SByte,System.SByte), x, y, z, GL.EntryPoints[2272]);
			}

			// Token: 0x06002ED9 RID: 11993 RVA: 0x0007E6A0 File Offset: 0x0007C8A0
			[CLSCompliant(false)]
			public unsafe static void Vertex4(byte[] coords)
			{
				fixed (byte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[2273]);
				}
			}

			// Token: 0x06002EDA RID: 11994 RVA: 0x0007E6D4 File Offset: 0x0007C8D4
			[CLSCompliant(false)]
			public unsafe static void Vertex4(ref byte coords)
			{
				fixed (byte* ptr = &coords)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[2273]);
				}
			}

			// Token: 0x06002EDB RID: 11995 RVA: 0x0007E6F8 File Offset: 0x0007C8F8
			[CLSCompliant(false)]
			public unsafe static void Vertex4(byte* coords)
			{
				calli(System.Void(System.SByte*), coords, GL.EntryPoints[2273]);
			}

			// Token: 0x06002EDC RID: 11996 RVA: 0x0007E70C File Offset: 0x0007C90C
			[CLSCompliant(false)]
			public unsafe static void Vertex4(sbyte[] coords)
			{
				fixed (sbyte* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[2273]);
				}
			}

			// Token: 0x06002EDD RID: 11997 RVA: 0x0007E740 File Offset: 0x0007C940
			[CLSCompliant(false)]
			public unsafe static void Vertex4(ref sbyte coords)
			{
				fixed (sbyte* ptr = &coords)
				{
					calli(System.Void(System.SByte*), ptr, GL.EntryPoints[2273]);
				}
			}

			// Token: 0x06002EDE RID: 11998 RVA: 0x0007E764 File Offset: 0x0007C964
			[CLSCompliant(false)]
			public unsafe static void Vertex4(sbyte* coords)
			{
				calli(System.Void(System.SByte*), coords, GL.EntryPoints[2273]);
			}

			// Token: 0x06002EDF RID: 11999 RVA: 0x0007E778 File Offset: 0x0007C978
			public static void Vertex4x(int x, int y, int z)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), x, y, z, GL.EntryPoints[2284]);
			}

			// Token: 0x06002EE0 RID: 12000 RVA: 0x0007E790 File Offset: 0x0007C990
			[CLSCompliant(false)]
			public unsafe static void Vertex4x(int[] coords)
			{
				fixed (int* ptr = ref (coords != null && coords.Length != 0) ? ref coords[0] : ref *null)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2285]);
				}
			}

			// Token: 0x06002EE1 RID: 12001 RVA: 0x0007E7C4 File Offset: 0x0007C9C4
			[CLSCompliant(false)]
			public unsafe static void Vertex4x(ref int coords)
			{
				fixed (int* ptr = &coords)
				{
					calli(System.Void(System.Int32*), ptr, GL.EntryPoints[2285]);
				}
			}

			// Token: 0x06002EE2 RID: 12002 RVA: 0x0007E7E8 File Offset: 0x0007C9E8
			[CLSCompliant(false)]
			public unsafe static void Vertex4x(int* coords)
			{
				calli(System.Void(System.Int32*), coords, GL.EntryPoints[2285]);
			}
		}

		// Token: 0x020004C6 RID: 1222
		public static class Pgi
		{
			// Token: 0x06002EE3 RID: 12003 RVA: 0x0007E7FC File Offset: 0x0007C9FC
			public static void Hint(PgiMiscHints target, int mode)
			{
				calli(System.Void(System.Int32,System.Int32), target, mode, GL.EntryPoints[1036]);
			}
		}

		// Token: 0x020004C7 RID: 1223
		public static class Sgi
		{
			// Token: 0x06002EE4 RID: 12004 RVA: 0x0007E810 File Offset: 0x0007CA10
			[CLSCompliant(false)]
			public unsafe static void ColorTableParameter(ColorTableTargetSgi target, ColorTableParameterPNameSgi pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[244]);
				}
			}

			// Token: 0x06002EE5 RID: 12005 RVA: 0x0007E848 File Offset: 0x0007CA48
			[CLSCompliant(false)]
			public unsafe static void ColorTableParameter(ColorTableTargetSgi target, ColorTableParameterPNameSgi pname, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[244]);
				}
			}

			// Token: 0x06002EE6 RID: 12006 RVA: 0x0007E86C File Offset: 0x0007CA6C
			[CLSCompliant(false)]
			public unsafe static void ColorTableParameter(ColorTableTargetSgi target, ColorTableParameterPNameSgi pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[244]);
			}

			// Token: 0x06002EE7 RID: 12007 RVA: 0x0007E884 File Offset: 0x0007CA84
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ColorTableParameter(SgiColorTable target, SgiColorTable pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[244]);
				}
			}

			// Token: 0x06002EE8 RID: 12008 RVA: 0x0007E8BC File Offset: 0x0007CABC
			[CLSCompliant(false)]
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public unsafe static void ColorTableParameter(SgiColorTable target, SgiColorTable pname, ref float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[244]);
				}
			}

			// Token: 0x06002EE9 RID: 12009 RVA: 0x0007E8E0 File Offset: 0x0007CAE0
			[CLSCompliant(false)]
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public unsafe static void ColorTableParameter(SgiColorTable target, SgiColorTable pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[244]);
			}

			// Token: 0x06002EEA RID: 12010 RVA: 0x0007E8F8 File Offset: 0x0007CAF8
			[CLSCompliant(false)]
			public unsafe static void ColorTableParameter(ColorTableTargetSgi target, ColorTableParameterPNameSgi pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[246]);
				}
			}

			// Token: 0x06002EEB RID: 12011 RVA: 0x0007E930 File Offset: 0x0007CB30
			[CLSCompliant(false)]
			public unsafe static void ColorTableParameter(ColorTableTargetSgi target, ColorTableParameterPNameSgi pname, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[246]);
				}
			}

			// Token: 0x06002EEC RID: 12012 RVA: 0x0007E954 File Offset: 0x0007CB54
			[CLSCompliant(false)]
			public unsafe static void ColorTableParameter(ColorTableTargetSgi target, ColorTableParameterPNameSgi pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[246]);
			}

			// Token: 0x06002EED RID: 12013 RVA: 0x0007E96C File Offset: 0x0007CB6C
			[CLSCompliant(false)]
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public unsafe static void ColorTableParameter(SgiColorTable target, SgiColorTable pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[246]);
				}
			}

			// Token: 0x06002EEE RID: 12014 RVA: 0x0007E9A4 File Offset: 0x0007CBA4
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ColorTableParameter(SgiColorTable target, SgiColorTable pname, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[246]);
				}
			}

			// Token: 0x06002EEF RID: 12015 RVA: 0x0007E9C8 File Offset: 0x0007CBC8
			[CLSCompliant(false)]
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public unsafe static void ColorTableParameter(SgiColorTable target, SgiColorTable pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[246]);
			}

			// Token: 0x06002EF0 RID: 12016 RVA: 0x0007E9E0 File Offset: 0x0007CBE0
			public static void ColorTable(ColorTableTargetSgi target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, table, GL.EntryPoints[247]);
			}

			// Token: 0x06002EF1 RID: 12017 RVA: 0x0007E9FC File Offset: 0x0007CBFC
			[CLSCompliant(false)]
			public unsafe static void ColorTable<T5>(ColorTableTargetSgi target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[] table) where T5 : struct
			{
				fixed (T5* ptr = ref (table != null && table.Length != 0) ? ref table[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[247]);
				}
			}

			// Token: 0x06002EF2 RID: 12018 RVA: 0x0007EA38 File Offset: 0x0007CC38
			[CLSCompliant(false)]
			public unsafe static void ColorTable<T5>(ColorTableTargetSgi target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,] table) where T5 : struct
			{
				fixed (T5* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[247]);
				}
			}

			// Token: 0x06002EF3 RID: 12019 RVA: 0x0007EA78 File Offset: 0x0007CC78
			[CLSCompliant(false)]
			public unsafe static void ColorTable<T5>(ColorTableTargetSgi target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,,] table) where T5 : struct
			{
				fixed (T5* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[247]);
				}
			}

			// Token: 0x06002EF4 RID: 12020 RVA: 0x0007EABC File Offset: 0x0007CCBC
			public unsafe static void ColorTable<T5>(ColorTableTargetSgi target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] ref T5 table) where T5 : struct
			{
				fixed (T5* ptr = &table)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[247]);
				}
			}

			// Token: 0x06002EF5 RID: 12021 RVA: 0x0007EAE4 File Offset: 0x0007CCE4
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public static void ColorTable(SgiColorTable target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, table, GL.EntryPoints[247]);
			}

			// Token: 0x06002EF6 RID: 12022 RVA: 0x0007EB00 File Offset: 0x0007CD00
			[CLSCompliant(false)]
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public unsafe static void ColorTable<T5>(SgiColorTable target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[] table) where T5 : struct
			{
				fixed (T5* ptr = ref (table != null && table.Length != 0) ? ref table[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[247]);
				}
			}

			// Token: 0x06002EF7 RID: 12023 RVA: 0x0007EB3C File Offset: 0x0007CD3C
			[CLSCompliant(false)]
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public unsafe static void ColorTable<T5>(SgiColorTable target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,] table) where T5 : struct
			{
				fixed (T5* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[247]);
				}
			}

			// Token: 0x06002EF8 RID: 12024 RVA: 0x0007EB7C File Offset: 0x0007CD7C
			[CLSCompliant(false)]
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public unsafe static void ColorTable<T5>(SgiColorTable target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] T5[,,] table) where T5 : struct
			{
				fixed (T5* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[247]);
				}
			}

			// Token: 0x06002EF9 RID: 12025 RVA: 0x0007EBC0 File Offset: 0x0007CDC0
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public unsafe static void ColorTable<T5>(SgiColorTable target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In] [Out] ref T5 table) where T5 : struct
			{
				fixed (T5* ptr = &table)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, internalformat, width, format, type, ptr, GL.EntryPoints[247]);
				}
			}

			// Token: 0x06002EFA RID: 12026 RVA: 0x0007EBE8 File Offset: 0x0007CDE8
			public static void CopyColorTable(ColorTableTargetSgi target, PixelInternalFormat internalformat, int x, int y, int width)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, x, y, width, GL.EntryPoints[300]);
			}

			// Token: 0x06002EFB RID: 12027 RVA: 0x0007EC00 File Offset: 0x0007CE00
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public static void CopyColorTable(SgiColorTable target, PixelInternalFormat internalformat, int x, int y, int width)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, x, y, width, GL.EntryPoints[300]);
			}

			// Token: 0x06002EFC RID: 12028 RVA: 0x0007EC18 File Offset: 0x0007CE18
			[CLSCompliant(false)]
			public unsafe static void GetColorTableParameter(ColorTableTargetSgi target, GetColorTableParameterPNameSgi pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[667]);
				}
			}

			// Token: 0x06002EFD RID: 12029 RVA: 0x0007EC50 File Offset: 0x0007CE50
			[CLSCompliant(false)]
			public unsafe static void GetColorTableParameter(ColorTableTargetSgi target, GetColorTableParameterPNameSgi pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[667]);
				}
			}

			// Token: 0x06002EFE RID: 12030 RVA: 0x0007EC74 File Offset: 0x0007CE74
			[CLSCompliant(false)]
			public unsafe static void GetColorTableParameter(ColorTableTargetSgi target, GetColorTableParameterPNameSgi pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[667]);
			}

			// Token: 0x06002EFF RID: 12031 RVA: 0x0007EC8C File Offset: 0x0007CE8C
			[CLSCompliant(false)]
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public unsafe static void GetColorTableParameter(SgiColorTable target, SgiColorTable pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[667]);
				}
			}

			// Token: 0x06002F00 RID: 12032 RVA: 0x0007ECC4 File Offset: 0x0007CEC4
			[CLSCompliant(false)]
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public unsafe static void GetColorTableParameter(SgiColorTable target, SgiColorTable pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[667]);
				}
			}

			// Token: 0x06002F01 RID: 12033 RVA: 0x0007ECE8 File Offset: 0x0007CEE8
			[CLSCompliant(false)]
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public unsafe static void GetColorTableParameter(SgiColorTable target, SgiColorTable pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[667]);
			}

			// Token: 0x06002F02 RID: 12034 RVA: 0x0007ED00 File Offset: 0x0007CF00
			[CLSCompliant(false)]
			public unsafe static void GetColorTableParameter(ColorTableTargetSgi target, GetColorTableParameterPNameSgi pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[670]);
				}
			}

			// Token: 0x06002F03 RID: 12035 RVA: 0x0007ED38 File Offset: 0x0007CF38
			[CLSCompliant(false)]
			public unsafe static void GetColorTableParameter(ColorTableTargetSgi target, GetColorTableParameterPNameSgi pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[670]);
				}
			}

			// Token: 0x06002F04 RID: 12036 RVA: 0x0007ED5C File Offset: 0x0007CF5C
			[CLSCompliant(false)]
			public unsafe static void GetColorTableParameter(ColorTableTargetSgi target, GetColorTableParameterPNameSgi pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[670]);
			}

			// Token: 0x06002F05 RID: 12037 RVA: 0x0007ED74 File Offset: 0x0007CF74
			[CLSCompliant(false)]
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public unsafe static void GetColorTableParameter(SgiColorTable target, SgiColorTable pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[670]);
				}
			}

			// Token: 0x06002F06 RID: 12038 RVA: 0x0007EDAC File Offset: 0x0007CFAC
			[CLSCompliant(false)]
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public unsafe static void GetColorTableParameter(SgiColorTable target, SgiColorTable pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[670]);
				}
			}

			// Token: 0x06002F07 RID: 12039 RVA: 0x0007EDD0 File Offset: 0x0007CFD0
			[CLSCompliant(false)]
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public unsafe static void GetColorTableParameter(SgiColorTable target, SgiColorTable pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[670]);
			}

			// Token: 0x06002F08 RID: 12040 RVA: 0x0007EDE8 File Offset: 0x0007CFE8
			public static void GetColorTable(ColorTableTargetSgi target, PixelFormat format, PixelType type, [Out] IntPtr table)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, table, GL.EntryPoints[671]);
			}

			// Token: 0x06002F09 RID: 12041 RVA: 0x0007EE00 File Offset: 0x0007D000
			[CLSCompliant(false)]
			public unsafe static void GetColorTable<T3>(ColorTableTargetSgi target, PixelFormat format, PixelType type, [In] [Out] T3[] table) where T3 : struct
			{
				fixed (T3* ptr = ref (table != null && table.Length != 0) ? ref table[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[671]);
				}
			}

			// Token: 0x06002F0A RID: 12042 RVA: 0x0007EE38 File Offset: 0x0007D038
			[CLSCompliant(false)]
			public unsafe static void GetColorTable<T3>(ColorTableTargetSgi target, PixelFormat format, PixelType type, [In] [Out] T3[,] table) where T3 : struct
			{
				fixed (T3* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[671]);
				}
			}

			// Token: 0x06002F0B RID: 12043 RVA: 0x0007EE74 File Offset: 0x0007D074
			[CLSCompliant(false)]
			public unsafe static void GetColorTable<T3>(ColorTableTargetSgi target, PixelFormat format, PixelType type, [In] [Out] T3[,,] table) where T3 : struct
			{
				fixed (T3* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[671]);
				}
			}

			// Token: 0x06002F0C RID: 12044 RVA: 0x0007EEB0 File Offset: 0x0007D0B0
			public unsafe static void GetColorTable<T3>(ColorTableTargetSgi target, PixelFormat format, PixelType type, [In] [Out] ref T3 table) where T3 : struct
			{
				fixed (T3* ptr = &table)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[671]);
				}
			}

			// Token: 0x06002F0D RID: 12045 RVA: 0x0007EED4 File Offset: 0x0007D0D4
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public static void GetColorTable(SgiColorTable target, PixelFormat format, PixelType type, [Out] IntPtr table)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, table, GL.EntryPoints[671]);
			}

			// Token: 0x06002F0E RID: 12046 RVA: 0x0007EEEC File Offset: 0x0007D0EC
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetColorTable<T3>(SgiColorTable target, PixelFormat format, PixelType type, [In] [Out] T3[] table) where T3 : struct
			{
				fixed (T3* ptr = ref (table != null && table.Length != 0) ? ref table[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[671]);
				}
			}

			// Token: 0x06002F0F RID: 12047 RVA: 0x0007EF24 File Offset: 0x0007D124
			[CLSCompliant(false)]
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public unsafe static void GetColorTable<T3>(SgiColorTable target, PixelFormat format, PixelType type, [In] [Out] T3[,] table) where T3 : struct
			{
				fixed (T3* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[671]);
				}
			}

			// Token: 0x06002F10 RID: 12048 RVA: 0x0007EF60 File Offset: 0x0007D160
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetColorTable<T3>(SgiColorTable target, PixelFormat format, PixelType type, [In] [Out] T3[,,] table) where T3 : struct
			{
				fixed (T3* ptr = ref (table != null && table.Length != 0) ? ref table[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[671]);
				}
			}

			// Token: 0x06002F11 RID: 12049 RVA: 0x0007EF9C File Offset: 0x0007D19C
			[Obsolete("Use ColorTableTargetSgi overload instead")]
			public unsafe static void GetColorTable<T3>(SgiColorTable target, PixelFormat format, PixelType type, [In] [Out] ref T3 table) where T3 : struct
			{
				fixed (T3* ptr = &table)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), target, format, type, ptr, GL.EntryPoints[671]);
				}
			}
		}

		// Token: 0x020004C8 RID: 1224
		public static class Sgis
		{
			// Token: 0x06002F12 RID: 12050 RVA: 0x0007EFC0 File Offset: 0x0007D1C0
			[CLSCompliant(false)]
			public unsafe static void DetailTexFunc(TextureTarget target, int n, float[] points)
			{
				fixed (float* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, n, ptr, GL.EntryPoints[409]);
				}
			}

			// Token: 0x06002F13 RID: 12051 RVA: 0x0007EFF8 File Offset: 0x0007D1F8
			[CLSCompliant(false)]
			public unsafe static void DetailTexFunc(TextureTarget target, int n, ref float points)
			{
				fixed (float* ptr = &points)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, n, ptr, GL.EntryPoints[409]);
				}
			}

			// Token: 0x06002F14 RID: 12052 RVA: 0x0007F01C File Offset: 0x0007D21C
			[CLSCompliant(false)]
			public unsafe static void DetailTexFunc(TextureTarget target, int n, float* points)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, n, points, GL.EntryPoints[409]);
			}

			// Token: 0x06002F15 RID: 12053 RVA: 0x0007F034 File Offset: 0x0007D234
			[CLSCompliant(false)]
			public unsafe static void FogFunc(int n, float[] points)
			{
				fixed (float* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), n, ptr, GL.EntryPoints[550]);
				}
			}

			// Token: 0x06002F16 RID: 12054 RVA: 0x0007F068 File Offset: 0x0007D268
			[CLSCompliant(false)]
			public unsafe static void FogFunc(int n, ref float points)
			{
				fixed (float* ptr = &points)
				{
					calli(System.Void(System.Int32,System.Single*), n, ptr, GL.EntryPoints[550]);
				}
			}

			// Token: 0x06002F17 RID: 12055 RVA: 0x0007F08C File Offset: 0x0007D28C
			[CLSCompliant(false)]
			public unsafe static void FogFunc(int n, float* points)
			{
				calli(System.Void(System.Int32,System.Single*), n, points, GL.EntryPoints[550]);
			}

			// Token: 0x06002F18 RID: 12056 RVA: 0x0007F0A0 File Offset: 0x0007D2A0
			[CLSCompliant(false)]
			public static float GetDetailTexFunc(TextureTarget target)
			{
				float result;
				calli(System.Void(System.Int32,System.Single*), target, ref result, GL.EntryPoints[692]);
				return result;
			}

			// Token: 0x06002F19 RID: 12057 RVA: 0x0007F0C4 File Offset: 0x0007D2C4
			[CLSCompliant(false)]
			public unsafe static void GetDetailTexFunc(TextureTarget target, [Out] float[] points)
			{
				fixed (float* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), target, ptr, GL.EntryPoints[692]);
				}
			}

			// Token: 0x06002F1A RID: 12058 RVA: 0x0007F0F8 File Offset: 0x0007D2F8
			[CLSCompliant(false)]
			public unsafe static void GetDetailTexFunc(TextureTarget target, out float points)
			{
				fixed (float* ptr = &points)
				{
					calli(System.Void(System.Int32,System.Single*), target, ptr, GL.EntryPoints[692]);
				}
			}

			// Token: 0x06002F1B RID: 12059 RVA: 0x0007F11C File Offset: 0x0007D31C
			[CLSCompliant(false)]
			public unsafe static void GetDetailTexFunc(TextureTarget target, [Out] float* points)
			{
				calli(System.Void(System.Int32,System.Single*), target, points, GL.EntryPoints[692]);
			}

			// Token: 0x06002F1C RID: 12060 RVA: 0x0007F130 File Offset: 0x0007D330
			[CLSCompliant(false)]
			public static float GetFogFunc()
			{
				float result;
				calli(System.Void(System.Single*), ref result, GL.EntryPoints[707]);
				return result;
			}

			// Token: 0x06002F1D RID: 12061 RVA: 0x0007F150 File Offset: 0x0007D350
			[CLSCompliant(false)]
			public unsafe static void GetFogFunc([Out] float[] points)
			{
				fixed (float* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[707]);
				}
			}

			// Token: 0x06002F1E RID: 12062 RVA: 0x0007F184 File Offset: 0x0007D384
			[CLSCompliant(false)]
			public unsafe static void GetFogFunc(out float points)
			{
				fixed (float* ptr = &points)
				{
					calli(System.Void(System.Single*), ptr, GL.EntryPoints[707]);
				}
			}

			// Token: 0x06002F1F RID: 12063 RVA: 0x0007F1A8 File Offset: 0x0007D3A8
			[CLSCompliant(false)]
			public unsafe static void GetFogFunc([Out] float* points)
			{
				calli(System.Void(System.Single*), points, GL.EntryPoints[707]);
			}

			// Token: 0x06002F20 RID: 12064 RVA: 0x0007F1BC File Offset: 0x0007D3BC
			[CLSCompliant(false)]
			public static float GetPixelTexGenParameter(PixelTexGenParameterNameSgis pname)
			{
				float result;
				calli(System.Void(System.Int32,System.Single*), pname, ref result, GL.EntryPoints[861]);
				return result;
			}

			// Token: 0x06002F21 RID: 12065 RVA: 0x0007F1E0 File Offset: 0x0007D3E0
			[CLSCompliant(false)]
			[Obsolete("Use PixelTexGenParameterNameSgis overload instead")]
			public static float GetPixelTexGenParameter(SgisPixelTexture pname)
			{
				float result;
				calli(System.Void(System.Int32,System.Single*), pname, ref result, GL.EntryPoints[861]);
				return result;
			}

			// Token: 0x06002F22 RID: 12066 RVA: 0x0007F204 File Offset: 0x0007D404
			[CLSCompliant(false)]
			public unsafe static void GetPixelTexGenParameter(PixelTexGenParameterNameSgis pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[861]);
				}
			}

			// Token: 0x06002F23 RID: 12067 RVA: 0x0007F238 File Offset: 0x0007D438
			[CLSCompliant(false)]
			public unsafe static void GetPixelTexGenParameter(PixelTexGenParameterNameSgis pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[861]);
				}
			}

			// Token: 0x06002F24 RID: 12068 RVA: 0x0007F25C File Offset: 0x0007D45C
			[CLSCompliant(false)]
			public unsafe static void GetPixelTexGenParameter(PixelTexGenParameterNameSgis pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Single*), pname, @params, GL.EntryPoints[861]);
			}

			// Token: 0x06002F25 RID: 12069 RVA: 0x0007F270 File Offset: 0x0007D470
			[Obsolete("Use PixelTexGenParameterNameSgis overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetPixelTexGenParameter(SgisPixelTexture pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[861]);
				}
			}

			// Token: 0x06002F26 RID: 12070 RVA: 0x0007F2A4 File Offset: 0x0007D4A4
			[CLSCompliant(false)]
			[Obsolete("Use PixelTexGenParameterNameSgis overload instead")]
			public unsafe static void GetPixelTexGenParameter(SgisPixelTexture pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[861]);
				}
			}

			// Token: 0x06002F27 RID: 12071 RVA: 0x0007F2C8 File Offset: 0x0007D4C8
			[CLSCompliant(false)]
			[Obsolete("Use PixelTexGenParameterNameSgis overload instead")]
			public unsafe static void GetPixelTexGenParameter(SgisPixelTexture pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Single*), pname, @params, GL.EntryPoints[861]);
			}

			// Token: 0x06002F28 RID: 12072 RVA: 0x0007F2DC File Offset: 0x0007D4DC
			[CLSCompliant(false)]
			public unsafe static void GetPixelTexGenParameter(PixelTexGenParameterNameSgis pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[862]);
				}
			}

			// Token: 0x06002F29 RID: 12073 RVA: 0x0007F310 File Offset: 0x0007D510
			[CLSCompliant(false)]
			public unsafe static void GetPixelTexGenParameter(PixelTexGenParameterNameSgis pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[862]);
				}
			}

			// Token: 0x06002F2A RID: 12074 RVA: 0x0007F334 File Offset: 0x0007D534
			[CLSCompliant(false)]
			public unsafe static void GetPixelTexGenParameter(PixelTexGenParameterNameSgis pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, @params, GL.EntryPoints[862]);
			}

			// Token: 0x06002F2B RID: 12075 RVA: 0x0007F348 File Offset: 0x0007D548
			[CLSCompliant(false)]
			[Obsolete("Use PixelTexGenParameterNameSgis overload instead")]
			public unsafe static void GetPixelTexGenParameter(SgisPixelTexture pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[862]);
				}
			}

			// Token: 0x06002F2C RID: 12076 RVA: 0x0007F37C File Offset: 0x0007D57C
			[Obsolete("Use PixelTexGenParameterNameSgis overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetPixelTexGenParameter(SgisPixelTexture pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[862]);
				}
			}

			// Token: 0x06002F2D RID: 12077 RVA: 0x0007F3A0 File Offset: 0x0007D5A0
			[CLSCompliant(false)]
			[Obsolete("Use PixelTexGenParameterNameSgis overload instead")]
			public unsafe static void GetPixelTexGenParameter(SgisPixelTexture pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, @params, GL.EntryPoints[862]);
			}

			// Token: 0x06002F2E RID: 12078 RVA: 0x0007F3B4 File Offset: 0x0007D5B4
			[CLSCompliant(false)]
			public static float GetSharpenTexFunc(TextureTarget target)
			{
				float result;
				calli(System.Void(System.Int32,System.Single*), target, ref result, GL.EntryPoints[926]);
				return result;
			}

			// Token: 0x06002F2F RID: 12079 RVA: 0x0007F3D8 File Offset: 0x0007D5D8
			[CLSCompliant(false)]
			public unsafe static void GetSharpenTexFunc(TextureTarget target, [Out] float[] points)
			{
				fixed (float* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), target, ptr, GL.EntryPoints[926]);
				}
			}

			// Token: 0x06002F30 RID: 12080 RVA: 0x0007F40C File Offset: 0x0007D60C
			[CLSCompliant(false)]
			public unsafe static void GetSharpenTexFunc(TextureTarget target, out float points)
			{
				fixed (float* ptr = &points)
				{
					calli(System.Void(System.Int32,System.Single*), target, ptr, GL.EntryPoints[926]);
				}
			}

			// Token: 0x06002F31 RID: 12081 RVA: 0x0007F430 File Offset: 0x0007D630
			[CLSCompliant(false)]
			public unsafe static void GetSharpenTexFunc(TextureTarget target, [Out] float* points)
			{
				calli(System.Void(System.Int32,System.Single*), target, points, GL.EntryPoints[926]);
			}

			// Token: 0x06002F32 RID: 12082 RVA: 0x0007F444 File Offset: 0x0007D644
			[CLSCompliant(false)]
			public unsafe static void GetTexFilterFunc(TextureTarget target, SgisTextureFilter4 filter, [Out] float[] weights)
			{
				fixed (float* ptr = ref (weights != null && weights.Length != 0) ? ref weights[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, filter, ptr, GL.EntryPoints[937]);
				}
			}

			// Token: 0x06002F33 RID: 12083 RVA: 0x0007F47C File Offset: 0x0007D67C
			[CLSCompliant(false)]
			public unsafe static void GetTexFilterFunc(TextureTarget target, SgisTextureFilter4 filter, out float weights)
			{
				fixed (float* ptr = &weights)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, filter, ptr, GL.EntryPoints[937]);
				}
			}

			// Token: 0x06002F34 RID: 12084 RVA: 0x0007F4A0 File Offset: 0x0007D6A0
			[CLSCompliant(false)]
			public unsafe static void GetTexFilterFunc(TextureTarget target, SgisTextureFilter4 filter, [Out] float* weights)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, filter, weights, GL.EntryPoints[937]);
			}

			// Token: 0x06002F35 RID: 12085 RVA: 0x0007F4B8 File Offset: 0x0007D6B8
			public static void PixelTexGenParameter(PixelTexGenParameterNameSgis pname, float param)
			{
				calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[1483]);
			}

			// Token: 0x06002F36 RID: 12086 RVA: 0x0007F4CC File Offset: 0x0007D6CC
			[Obsolete("Use PixelTexGenParameterNameSgis overload instead")]
			public static void PixelTexGenParameter(SgisPixelTexture pname, float param)
			{
				calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[1483]);
			}

			// Token: 0x06002F37 RID: 12087 RVA: 0x0007F4E0 File Offset: 0x0007D6E0
			[CLSCompliant(false)]
			public unsafe static void PixelTexGenParameter(PixelTexGenParameterNameSgis pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[1484]);
				}
			}

			// Token: 0x06002F38 RID: 12088 RVA: 0x0007F514 File Offset: 0x0007D714
			[CLSCompliant(false)]
			public unsafe static void PixelTexGenParameter(PixelTexGenParameterNameSgis pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Single*), pname, @params, GL.EntryPoints[1484]);
			}

			// Token: 0x06002F39 RID: 12089 RVA: 0x0007F528 File Offset: 0x0007D728
			[CLSCompliant(false)]
			[Obsolete("Use PixelTexGenParameterNameSgis overload instead")]
			public unsafe static void PixelTexGenParameter(SgisPixelTexture pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[1484]);
				}
			}

			// Token: 0x06002F3A RID: 12090 RVA: 0x0007F55C File Offset: 0x0007D75C
			[Obsolete("Use PixelTexGenParameterNameSgis overload instead")]
			[CLSCompliant(false)]
			public unsafe static void PixelTexGenParameter(SgisPixelTexture pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Single*), pname, @params, GL.EntryPoints[1484]);
			}

			// Token: 0x06002F3B RID: 12091 RVA: 0x0007F570 File Offset: 0x0007D770
			public static void PixelTexGenParameter(PixelTexGenParameterNameSgis pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[1485]);
			}

			// Token: 0x06002F3C RID: 12092 RVA: 0x0007F584 File Offset: 0x0007D784
			[Obsolete("Use PixelTexGenParameterNameSgis overload instead")]
			public static void PixelTexGenParameter(SgisPixelTexture pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[1485]);
			}

			// Token: 0x06002F3D RID: 12093 RVA: 0x0007F598 File Offset: 0x0007D798
			[CLSCompliant(false)]
			public unsafe static void PixelTexGenParameter(PixelTexGenParameterNameSgis pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[1486]);
				}
			}

			// Token: 0x06002F3E RID: 12094 RVA: 0x0007F5CC File Offset: 0x0007D7CC
			[CLSCompliant(false)]
			public unsafe static void PixelTexGenParameter(PixelTexGenParameterNameSgis pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, @params, GL.EntryPoints[1486]);
			}

			// Token: 0x06002F3F RID: 12095 RVA: 0x0007F5E0 File Offset: 0x0007D7E0
			[CLSCompliant(false)]
			[Obsolete("Use PixelTexGenParameterNameSgis overload instead")]
			public unsafe static void PixelTexGenParameter(SgisPixelTexture pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[1486]);
				}
			}

			// Token: 0x06002F40 RID: 12096 RVA: 0x0007F614 File Offset: 0x0007D814
			[CLSCompliant(false)]
			[Obsolete("Use PixelTexGenParameterNameSgis overload instead")]
			public unsafe static void PixelTexGenParameter(SgisPixelTexture pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, @params, GL.EntryPoints[1486]);
			}

			// Token: 0x06002F41 RID: 12097 RVA: 0x0007F628 File Offset: 0x0007D828
			public static void PointParameter(SgisPointParameters pname, float param)
			{
				calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[1503]);
			}

			// Token: 0x06002F42 RID: 12098 RVA: 0x0007F63C File Offset: 0x0007D83C
			[CLSCompliant(false)]
			public unsafe static void PointParameter(SgisPointParameters pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[1507]);
				}
			}

			// Token: 0x06002F43 RID: 12099 RVA: 0x0007F670 File Offset: 0x0007D870
			[CLSCompliant(false)]
			public unsafe static void PointParameter(SgisPointParameters pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Single*), pname, @params, GL.EntryPoints[1507]);
			}

			// Token: 0x06002F44 RID: 12100 RVA: 0x0007F684 File Offset: 0x0007D884
			public static void SampleMask(float value, bool invert)
			{
				calli(System.Void(System.Single,System.Boolean), value, invert, GL.EntryPoints[1809]);
			}

			// Token: 0x06002F45 RID: 12101 RVA: 0x0007F698 File Offset: 0x0007D898
			public static void SamplePattern(SamplePatternSgis pattern)
			{
				calli(System.Void(System.Int32), pattern, GL.EntryPoints[1811]);
			}

			// Token: 0x06002F46 RID: 12102 RVA: 0x0007F6AC File Offset: 0x0007D8AC
			[Obsolete("Use SamplePatternSgis overload instead")]
			public static void SamplePattern(SgisMultisample pattern)
			{
				calli(System.Void(System.Int32), pattern, GL.EntryPoints[1811]);
			}

			// Token: 0x06002F47 RID: 12103 RVA: 0x0007F6C0 File Offset: 0x0007D8C0
			[CLSCompliant(false)]
			public unsafe static void SharpenTexFunc(TextureTarget target, int n, float[] points)
			{
				fixed (float* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, n, ptr, GL.EntryPoints[1883]);
				}
			}

			// Token: 0x06002F48 RID: 12104 RVA: 0x0007F6F8 File Offset: 0x0007D8F8
			[CLSCompliant(false)]
			public unsafe static void SharpenTexFunc(TextureTarget target, int n, ref float points)
			{
				fixed (float* ptr = &points)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), target, n, ptr, GL.EntryPoints[1883]);
				}
			}

			// Token: 0x06002F49 RID: 12105 RVA: 0x0007F71C File Offset: 0x0007D91C
			[CLSCompliant(false)]
			public unsafe static void SharpenTexFunc(TextureTarget target, int n, float* points)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, n, points, GL.EntryPoints[1883]);
			}

			// Token: 0x06002F4A RID: 12106 RVA: 0x0007F734 File Offset: 0x0007D934
			[CLSCompliant(false)]
			public unsafe static void TexFilterFunc(TextureTarget target, SgisTextureFilter4 filter, int n, float[] weights)
			{
				fixed (float* ptr = ref (weights != null && weights.Length != 0) ? ref weights[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), target, filter, n, ptr, GL.EntryPoints[2020]);
				}
			}

			// Token: 0x06002F4B RID: 12107 RVA: 0x0007F76C File Offset: 0x0007D96C
			[CLSCompliant(false)]
			public unsafe static void TexFilterFunc(TextureTarget target, SgisTextureFilter4 filter, int n, ref float weights)
			{
				fixed (float* ptr = &weights)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), target, filter, n, ptr, GL.EntryPoints[2020]);
				}
			}

			// Token: 0x06002F4C RID: 12108 RVA: 0x0007F790 File Offset: 0x0007D990
			[CLSCompliant(false)]
			public unsafe static void TexFilterFunc(TextureTarget target, SgisTextureFilter4 filter, int n, float* weights)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Single*), target, filter, n, weights, GL.EntryPoints[2020]);
			}

			// Token: 0x06002F4D RID: 12109 RVA: 0x0007F7A8 File Offset: 0x0007D9A8
			public static void TexImage4D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, size4d, border, format, type, pixels, GL.EntryPoints[2037]);
			}

			// Token: 0x06002F4E RID: 12110 RVA: 0x0007F7D8 File Offset: 0x0007D9D8
			[CLSCompliant(false)]
			public unsafe static void TexImage4D<T10>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, [In] [Out] T10[] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, size4d, border, format, type, ptr, GL.EntryPoints[2037]);
				}
			}

			// Token: 0x06002F4F RID: 12111 RVA: 0x0007F820 File Offset: 0x0007DA20
			[CLSCompliant(false)]
			public unsafe static void TexImage4D<T10>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, [In] [Out] T10[,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, size4d, border, format, type, ptr, GL.EntryPoints[2037]);
				}
			}

			// Token: 0x06002F50 RID: 12112 RVA: 0x0007F86C File Offset: 0x0007DA6C
			[CLSCompliant(false)]
			public unsafe static void TexImage4D<T10>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, [In] [Out] T10[,,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, size4d, border, format, type, ptr, GL.EntryPoints[2037]);
				}
			}

			// Token: 0x06002F51 RID: 12113 RVA: 0x0007F8B8 File Offset: 0x0007DAB8
			public unsafe static void TexImage4D<T10>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, [In] [Out] ref T10 pixels) where T10 : struct
			{
				fixed (T10* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, size4d, border, format, type, ptr, GL.EntryPoints[2037]);
				}
			}

			// Token: 0x06002F52 RID: 12114 RVA: 0x0007F8EC File Offset: 0x0007DAEC
			public static void TexSubImage4D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels, GL.EntryPoints[2062]);
			}

			// Token: 0x06002F53 RID: 12115 RVA: 0x0007F920 File Offset: 0x0007DB20
			[CLSCompliant(false)]
			public unsafe static void TexSubImage4D<T12>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, [In] [Out] T12[] pixels) where T12 : struct
			{
				fixed (T12* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, ptr, GL.EntryPoints[2062]);
				}
			}

			// Token: 0x06002F54 RID: 12116 RVA: 0x0007F96C File Offset: 0x0007DB6C
			[CLSCompliant(false)]
			public unsafe static void TexSubImage4D<T12>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, [In] [Out] T12[,] pixels) where T12 : struct
			{
				fixed (T12* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, ptr, GL.EntryPoints[2062]);
				}
			}

			// Token: 0x06002F55 RID: 12117 RVA: 0x0007F9BC File Offset: 0x0007DBBC
			[CLSCompliant(false)]
			public unsafe static void TexSubImage4D<T12>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, [In] [Out] T12[,,] pixels) where T12 : struct
			{
				fixed (T12* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, ptr, GL.EntryPoints[2062]);
				}
			}

			// Token: 0x06002F56 RID: 12118 RVA: 0x0007FA0C File Offset: 0x0007DC0C
			public unsafe static void TexSubImage4D<T12>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, [In] [Out] ref T12 pixels) where T12 : struct
			{
				fixed (T12* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, ptr, GL.EntryPoints[2062]);
				}
			}

			// Token: 0x06002F57 RID: 12119 RVA: 0x0007FA44 File Offset: 0x0007DC44
			public static void TextureColorMask(bool red, bool green, bool blue, bool alpha)
			{
				calli(System.Void(System.Boolean,System.Boolean,System.Boolean,System.Boolean), red, green, blue, alpha, GL.EntryPoints[2066]);
			}
		}

		// Token: 0x020004C9 RID: 1225
		public static class Sgix
		{
			// Token: 0x06002F58 RID: 12120 RVA: 0x0007FA5C File Offset: 0x0007DC5C
			[CLSCompliant(false)]
			public static void AsyncMarker(int marker)
			{
				calli(System.Void(System.UInt32), marker, GL.EntryPoints[21]);
			}

			// Token: 0x06002F59 RID: 12121 RVA: 0x0007FA6C File Offset: 0x0007DC6C
			[CLSCompliant(false)]
			public static void AsyncMarker(uint marker)
			{
				calli(System.Void(System.UInt32), marker, GL.EntryPoints[21]);
			}

			// Token: 0x06002F5A RID: 12122 RVA: 0x0007FA7C File Offset: 0x0007DC7C
			[CLSCompliant(false)]
			public unsafe static void DeformationMap3(FfdTargetSgix target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double[] points)
			{
				fixed (double* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, ptr, GL.EntryPoints[358]);
				}
			}

			// Token: 0x06002F5B RID: 12123 RVA: 0x0007FAC8 File Offset: 0x0007DCC8
			[CLSCompliant(false)]
			public unsafe static void DeformationMap3(FfdTargetSgix target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, ref double points)
			{
				fixed (double* ptr = &points)
				{
					calli(System.Void(System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, ptr, GL.EntryPoints[358]);
				}
			}

			// Token: 0x06002F5C RID: 12124 RVA: 0x0007FB00 File Offset: 0x0007DD00
			[CLSCompliant(false)]
			public unsafe static void DeformationMap3(FfdTargetSgix target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double* points)
			{
				calli(System.Void(System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points, GL.EntryPoints[358]);
			}

			// Token: 0x06002F5D RID: 12125 RVA: 0x0007FB38 File Offset: 0x0007DD38
			[Obsolete("Use FfdTargetSgix overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DeformationMap3(SgixPolynomialFfd target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double[] points)
			{
				fixed (double* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, ptr, GL.EntryPoints[358]);
				}
			}

			// Token: 0x06002F5E RID: 12126 RVA: 0x0007FB84 File Offset: 0x0007DD84
			[CLSCompliant(false)]
			[Obsolete("Use FfdTargetSgix overload instead")]
			public unsafe static void DeformationMap3(SgixPolynomialFfd target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, ref double points)
			{
				fixed (double* ptr = &points)
				{
					calli(System.Void(System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, ptr, GL.EntryPoints[358]);
				}
			}

			// Token: 0x06002F5F RID: 12127 RVA: 0x0007FBBC File Offset: 0x0007DDBC
			[CLSCompliant(false)]
			[Obsolete("Use FfdTargetSgix overload instead")]
			public unsafe static void DeformationMap3(SgixPolynomialFfd target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double* points)
			{
				calli(System.Void(System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points, GL.EntryPoints[358]);
			}

			// Token: 0x06002F60 RID: 12128 RVA: 0x0007FBF4 File Offset: 0x0007DDF4
			[CLSCompliant(false)]
			public unsafe static void DeformationMap3(FfdTargetSgix target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float[] points)
			{
				fixed (float* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, ptr, GL.EntryPoints[359]);
				}
			}

			// Token: 0x06002F61 RID: 12129 RVA: 0x0007FC40 File Offset: 0x0007DE40
			[CLSCompliant(false)]
			public unsafe static void DeformationMap3(FfdTargetSgix target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, ref float points)
			{
				fixed (float* ptr = &points)
				{
					calli(System.Void(System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, ptr, GL.EntryPoints[359]);
				}
			}

			// Token: 0x06002F62 RID: 12130 RVA: 0x0007FC78 File Offset: 0x0007DE78
			[CLSCompliant(false)]
			public unsafe static void DeformationMap3(FfdTargetSgix target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float* points)
			{
				calli(System.Void(System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points, GL.EntryPoints[359]);
			}

			// Token: 0x06002F63 RID: 12131 RVA: 0x0007FCB0 File Offset: 0x0007DEB0
			[CLSCompliant(false)]
			[Obsolete("Use FfdTargetSgix overload instead")]
			public unsafe static void DeformationMap3(SgixPolynomialFfd target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float[] points)
			{
				fixed (float* ptr = ref (points != null && points.Length != 0) ? ref points[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, ptr, GL.EntryPoints[359]);
				}
			}

			// Token: 0x06002F64 RID: 12132 RVA: 0x0007FCFC File Offset: 0x0007DEFC
			[CLSCompliant(false)]
			[Obsolete("Use FfdTargetSgix overload instead")]
			public unsafe static void DeformationMap3(SgixPolynomialFfd target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, ref float points)
			{
				fixed (float* ptr = &points)
				{
					calli(System.Void(System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, ptr, GL.EntryPoints[359]);
				}
			}

			// Token: 0x06002F65 RID: 12133 RVA: 0x0007FD34 File Offset: 0x0007DF34
			[Obsolete("Use FfdTargetSgix overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DeformationMap3(SgixPolynomialFfd target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float* points)
			{
				calli(System.Void(System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single*), target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points, GL.EntryPoints[359]);
			}

			// Token: 0x06002F66 RID: 12134 RVA: 0x0007FD6C File Offset: 0x0007DF6C
			public static void Deform(FfdMaskSgix mask)
			{
				calli(System.Void(System.Int32), mask, GL.EntryPoints[360]);
			}

			// Token: 0x06002F67 RID: 12135 RVA: 0x0007FD80 File Offset: 0x0007DF80
			[Obsolete("Use FfdMaskSgix overload instead")]
			public static void Deform(int mask)
			{
				calli(System.Void(System.Int32), mask, GL.EntryPoints[360]);
			}

			// Token: 0x06002F68 RID: 12136 RVA: 0x0007FD94 File Offset: 0x0007DF94
			[Obsolete("Use FfdMaskSgix overload instead")]
			public static void Deform(uint mask)
			{
				calli(System.Void(System.Int32), mask, GL.EntryPoints[360]);
			}

			// Token: 0x06002F69 RID: 12137 RVA: 0x0007FDA8 File Offset: 0x0007DFA8
			[CLSCompliant(false)]
			public static void DeleteAsyncMarkers(int marker, int range)
			{
				calli(System.Void(System.UInt32,System.Int32), marker, range, GL.EntryPoints[361]);
			}

			// Token: 0x06002F6A RID: 12138 RVA: 0x0007FDBC File Offset: 0x0007DFBC
			[CLSCompliant(false)]
			public static void DeleteAsyncMarkers(uint marker, int range)
			{
				calli(System.Void(System.UInt32,System.Int32), marker, range, GL.EntryPoints[361]);
			}

			// Token: 0x06002F6B RID: 12139 RVA: 0x0007FDD0 File Offset: 0x0007DFD0
			[CLSCompliant(false)]
			public unsafe static int FinishAsync(out int markerp)
			{
				fixed (int* ptr = &markerp)
				{
					return calli(System.Int32(System.UInt32*), ptr, GL.EntryPoints[521]);
				}
			}

			// Token: 0x06002F6C RID: 12140 RVA: 0x0007FDF4 File Offset: 0x0007DFF4
			[CLSCompliant(false)]
			public unsafe static int FinishAsync([Out] int* markerp)
			{
				return calli(System.Int32(System.UInt32*), markerp, GL.EntryPoints[521]);
			}

			// Token: 0x06002F6D RID: 12141 RVA: 0x0007FE08 File Offset: 0x0007E008
			[CLSCompliant(false)]
			public unsafe static int FinishAsync(out uint markerp)
			{
				fixed (uint* ptr = &markerp)
				{
					return calli(System.Int32(System.UInt32*), ptr, GL.EntryPoints[521]);
				}
			}

			// Token: 0x06002F6E RID: 12142 RVA: 0x0007FE2C File Offset: 0x0007E02C
			[CLSCompliant(false)]
			public unsafe static int FinishAsync([Out] uint* markerp)
			{
				return calli(System.Int32(System.UInt32*), markerp, GL.EntryPoints[521]);
			}

			// Token: 0x06002F6F RID: 12143 RVA: 0x0007FE40 File Offset: 0x0007E040
			public static void FlushRaster()
			{
				calli(System.Void(), GL.EntryPoints[531]);
			}

			// Token: 0x06002F70 RID: 12144 RVA: 0x0007FE54 File Offset: 0x0007E054
			public static void FragmentColorMaterial(MaterialFace face, MaterialParameter mode)
			{
				calli(System.Void(System.Int32,System.Int32), face, mode, GL.EntryPoints[556]);
			}

			// Token: 0x06002F71 RID: 12145 RVA: 0x0007FE68 File Offset: 0x0007E068
			public static void FragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, float param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single), light, pname, param, GL.EntryPoints[557]);
			}

			// Token: 0x06002F72 RID: 12146 RVA: 0x0007FE80 File Offset: 0x0007E080
			[CLSCompliant(false)]
			public unsafe static void FragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), light, pname, ptr, GL.EntryPoints[558]);
				}
			}

			// Token: 0x06002F73 RID: 12147 RVA: 0x0007FEB8 File Offset: 0x0007E0B8
			[CLSCompliant(false)]
			public unsafe static void FragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), light, pname, @params, GL.EntryPoints[558]);
			}

			// Token: 0x06002F74 RID: 12148 RVA: 0x0007FED0 File Offset: 0x0007E0D0
			public static void FragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), light, pname, param, GL.EntryPoints[559]);
			}

			// Token: 0x06002F75 RID: 12149 RVA: 0x0007FEE8 File Offset: 0x0007E0E8
			[CLSCompliant(false)]
			public unsafe static void FragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), light, pname, ptr, GL.EntryPoints[560]);
				}
			}

			// Token: 0x06002F76 RID: 12150 RVA: 0x0007FF20 File Offset: 0x0007E120
			[CLSCompliant(false)]
			public unsafe static void FragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), light, pname, @params, GL.EntryPoints[560]);
			}

			// Token: 0x06002F77 RID: 12151 RVA: 0x0007FF38 File Offset: 0x0007E138
			public static void FragmentLightModel(FragmentLightModelParameterSgix pname, float param)
			{
				calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[561]);
			}

			// Token: 0x06002F78 RID: 12152 RVA: 0x0007FF4C File Offset: 0x0007E14C
			[Obsolete("Use FragmentLightModelParameterSgix overload instead")]
			public static void FragmentLightModel(SgixFragmentLighting pname, float param)
			{
				calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[561]);
			}

			// Token: 0x06002F79 RID: 12153 RVA: 0x0007FF60 File Offset: 0x0007E160
			[CLSCompliant(false)]
			public unsafe static void FragmentLightModel(FragmentLightModelParameterSgix pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[562]);
				}
			}

			// Token: 0x06002F7A RID: 12154 RVA: 0x0007FF94 File Offset: 0x0007E194
			[CLSCompliant(false)]
			public unsafe static void FragmentLightModel(FragmentLightModelParameterSgix pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Single*), pname, @params, GL.EntryPoints[562]);
			}

			// Token: 0x06002F7B RID: 12155 RVA: 0x0007FFA8 File Offset: 0x0007E1A8
			[CLSCompliant(false)]
			[Obsolete("Use FragmentLightModelParameterSgix overload instead")]
			public unsafe static void FragmentLightModel(SgixFragmentLighting pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[562]);
				}
			}

			// Token: 0x06002F7C RID: 12156 RVA: 0x0007FFDC File Offset: 0x0007E1DC
			[Obsolete("Use FragmentLightModelParameterSgix overload instead")]
			[CLSCompliant(false)]
			public unsafe static void FragmentLightModel(SgixFragmentLighting pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Single*), pname, @params, GL.EntryPoints[562]);
			}

			// Token: 0x06002F7D RID: 12157 RVA: 0x0007FFF0 File Offset: 0x0007E1F0
			public static void FragmentLightModel(FragmentLightModelParameterSgix pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[563]);
			}

			// Token: 0x06002F7E RID: 12158 RVA: 0x00080004 File Offset: 0x0007E204
			[Obsolete("Use FragmentLightModelParameterSgix overload instead")]
			public static void FragmentLightModel(SgixFragmentLighting pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[563]);
			}

			// Token: 0x06002F7F RID: 12159 RVA: 0x00080018 File Offset: 0x0007E218
			[CLSCompliant(false)]
			public unsafe static void FragmentLightModel(FragmentLightModelParameterSgix pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[564]);
				}
			}

			// Token: 0x06002F80 RID: 12160 RVA: 0x0008004C File Offset: 0x0007E24C
			[CLSCompliant(false)]
			public unsafe static void FragmentLightModel(FragmentLightModelParameterSgix pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, @params, GL.EntryPoints[564]);
			}

			// Token: 0x06002F81 RID: 12161 RVA: 0x00080060 File Offset: 0x0007E260
			[Obsolete("Use FragmentLightModelParameterSgix overload instead")]
			[CLSCompliant(false)]
			public unsafe static void FragmentLightModel(SgixFragmentLighting pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[564]);
				}
			}

			// Token: 0x06002F82 RID: 12162 RVA: 0x00080094 File Offset: 0x0007E294
			[CLSCompliant(false)]
			[Obsolete("Use FragmentLightModelParameterSgix overload instead")]
			public unsafe static void FragmentLightModel(SgixFragmentLighting pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, @params, GL.EntryPoints[564]);
			}

			// Token: 0x06002F83 RID: 12163 RVA: 0x000800A8 File Offset: 0x0007E2A8
			public static void FragmentMaterial(MaterialFace face, MaterialParameter pname, float param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single), face, pname, param, GL.EntryPoints[565]);
			}

			// Token: 0x06002F84 RID: 12164 RVA: 0x000800C0 File Offset: 0x0007E2C0
			[CLSCompliant(false)]
			public unsafe static void FragmentMaterial(MaterialFace face, MaterialParameter pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), face, pname, ptr, GL.EntryPoints[566]);
				}
			}

			// Token: 0x06002F85 RID: 12165 RVA: 0x000800F8 File Offset: 0x0007E2F8
			[CLSCompliant(false)]
			public unsafe static void FragmentMaterial(MaterialFace face, MaterialParameter pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), face, pname, @params, GL.EntryPoints[566]);
			}

			// Token: 0x06002F86 RID: 12166 RVA: 0x00080110 File Offset: 0x0007E310
			public static void FragmentMaterial(MaterialFace face, MaterialParameter pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), face, pname, param, GL.EntryPoints[567]);
			}

			// Token: 0x06002F87 RID: 12167 RVA: 0x00080128 File Offset: 0x0007E328
			[CLSCompliant(false)]
			public unsafe static void FragmentMaterial(MaterialFace face, MaterialParameter pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), face, pname, ptr, GL.EntryPoints[568]);
				}
			}

			// Token: 0x06002F88 RID: 12168 RVA: 0x00080160 File Offset: 0x0007E360
			[CLSCompliant(false)]
			public unsafe static void FragmentMaterial(MaterialFace face, MaterialParameter pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), face, pname, @params, GL.EntryPoints[568]);
			}

			// Token: 0x06002F89 RID: 12169 RVA: 0x00080178 File Offset: 0x0007E378
			public static void FrameZoom(int factor)
			{
				calli(System.Void(System.Int32), factor, GL.EntryPoints[590]);
			}

			// Token: 0x06002F8A RID: 12170 RVA: 0x0008018C File Offset: 0x0007E38C
			public static int GenAsyncMarkers(int range)
			{
				return calli(System.Int32(System.Int32), range, GL.EntryPoints[596]);
			}

			// Token: 0x06002F8B RID: 12171 RVA: 0x000801A0 File Offset: 0x0007E3A0
			[CLSCompliant(false)]
			public unsafe static void GetFragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), light, pname, ptr, GL.EntryPoints[711]);
				}
			}

			// Token: 0x06002F8C RID: 12172 RVA: 0x000801D8 File Offset: 0x0007E3D8
			[CLSCompliant(false)]
			public unsafe static void GetFragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), light, pname, ptr, GL.EntryPoints[711]);
				}
			}

			// Token: 0x06002F8D RID: 12173 RVA: 0x000801FC File Offset: 0x0007E3FC
			[CLSCompliant(false)]
			public unsafe static void GetFragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), light, pname, @params, GL.EntryPoints[711]);
			}

			// Token: 0x06002F8E RID: 12174 RVA: 0x00080214 File Offset: 0x0007E414
			[CLSCompliant(false)]
			public unsafe static void GetFragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), light, pname, ptr, GL.EntryPoints[712]);
				}
			}

			// Token: 0x06002F8F RID: 12175 RVA: 0x0008024C File Offset: 0x0007E44C
			[CLSCompliant(false)]
			public unsafe static void GetFragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), light, pname, ptr, GL.EntryPoints[712]);
				}
			}

			// Token: 0x06002F90 RID: 12176 RVA: 0x00080270 File Offset: 0x0007E470
			[CLSCompliant(false)]
			public unsafe static void GetFragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), light, pname, @params, GL.EntryPoints[712]);
			}

			// Token: 0x06002F91 RID: 12177 RVA: 0x00080288 File Offset: 0x0007E488
			[CLSCompliant(false)]
			public unsafe static void GetFragmentMaterial(MaterialFace face, MaterialParameter pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), face, pname, ptr, GL.EntryPoints[713]);
				}
			}

			// Token: 0x06002F92 RID: 12178 RVA: 0x000802C0 File Offset: 0x0007E4C0
			[CLSCompliant(false)]
			public unsafe static void GetFragmentMaterial(MaterialFace face, MaterialParameter pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Single*), face, pname, ptr, GL.EntryPoints[713]);
				}
			}

			// Token: 0x06002F93 RID: 12179 RVA: 0x000802E4 File Offset: 0x0007E4E4
			[CLSCompliant(false)]
			public unsafe static void GetFragmentMaterial(MaterialFace face, MaterialParameter pname, [Out] float* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), face, pname, @params, GL.EntryPoints[713]);
			}

			// Token: 0x06002F94 RID: 12180 RVA: 0x000802FC File Offset: 0x0007E4FC
			[CLSCompliant(false)]
			public unsafe static void GetFragmentMaterial(MaterialFace face, MaterialParameter pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), face, pname, ptr, GL.EntryPoints[714]);
				}
			}

			// Token: 0x06002F95 RID: 12181 RVA: 0x00080334 File Offset: 0x0007E534
			[CLSCompliant(false)]
			public unsafe static void GetFragmentMaterial(MaterialFace face, MaterialParameter pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), face, pname, ptr, GL.EntryPoints[714]);
				}
			}

			// Token: 0x06002F96 RID: 12182 RVA: 0x00080358 File Offset: 0x0007E558
			[CLSCompliant(false)]
			public unsafe static void GetFragmentMaterial(MaterialFace face, MaterialParameter pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), face, pname, @params, GL.EntryPoints[714]);
			}

			// Token: 0x06002F97 RID: 12183 RVA: 0x00080370 File Offset: 0x0007E570
			public static int GetInstruments()
			{
				return calli(System.Int32(), GL.EntryPoints[733]);
			}

			// Token: 0x06002F98 RID: 12184 RVA: 0x00080384 File Offset: 0x0007E584
			[CLSCompliant(false)]
			public unsafe static void GetListParameter(int list, ListParameterName pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), list, pname, ptr, GL.EntryPoints[750]);
				}
			}

			// Token: 0x06002F99 RID: 12185 RVA: 0x000803BC File Offset: 0x0007E5BC
			[CLSCompliant(false)]
			public unsafe static void GetListParameter(int list, ListParameterName pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), list, pname, ptr, GL.EntryPoints[750]);
				}
			}

			// Token: 0x06002F9A RID: 12186 RVA: 0x000803E0 File Offset: 0x0007E5E0
			[CLSCompliant(false)]
			public unsafe static void GetListParameter(int list, ListParameterName pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), list, pname, @params, GL.EntryPoints[750]);
			}

			// Token: 0x06002F9B RID: 12187 RVA: 0x000803F8 File Offset: 0x0007E5F8
			[CLSCompliant(false)]
			public unsafe static void GetListParameter(uint list, ListParameterName pname, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), list, pname, ptr, GL.EntryPoints[750]);
				}
			}

			// Token: 0x06002F9C RID: 12188 RVA: 0x00080430 File Offset: 0x0007E630
			[CLSCompliant(false)]
			public unsafe static void GetListParameter(uint list, ListParameterName pname, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), list, pname, ptr, GL.EntryPoints[750]);
				}
			}

			// Token: 0x06002F9D RID: 12189 RVA: 0x00080454 File Offset: 0x0007E654
			[CLSCompliant(false)]
			public unsafe static void GetListParameter(uint list, ListParameterName pname, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), list, pname, @params, GL.EntryPoints[750]);
			}

			// Token: 0x06002F9E RID: 12190 RVA: 0x0008046C File Offset: 0x0007E66C
			[CLSCompliant(false)]
			public unsafe static void GetListParameter(int list, ListParameterName pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), list, pname, ptr, GL.EntryPoints[751]);
				}
			}

			// Token: 0x06002F9F RID: 12191 RVA: 0x000804A4 File Offset: 0x0007E6A4
			[CLSCompliant(false)]
			public unsafe static void GetListParameter(int list, ListParameterName pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), list, pname, ptr, GL.EntryPoints[751]);
				}
			}

			// Token: 0x06002FA0 RID: 12192 RVA: 0x000804C8 File Offset: 0x0007E6C8
			[CLSCompliant(false)]
			public unsafe static void GetListParameter(int list, ListParameterName pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), list, pname, @params, GL.EntryPoints[751]);
			}

			// Token: 0x06002FA1 RID: 12193 RVA: 0x000804E0 File Offset: 0x0007E6E0
			[CLSCompliant(false)]
			public unsafe static void GetListParameter(uint list, ListParameterName pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), list, pname, ptr, GL.EntryPoints[751]);
				}
			}

			// Token: 0x06002FA2 RID: 12194 RVA: 0x00080518 File Offset: 0x0007E718
			[CLSCompliant(false)]
			public unsafe static void GetListParameter(uint list, ListParameterName pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), list, pname, ptr, GL.EntryPoints[751]);
				}
			}

			// Token: 0x06002FA3 RID: 12195 RVA: 0x0008053C File Offset: 0x0007E73C
			[CLSCompliant(false)]
			public unsafe static void GetListParameter(uint list, ListParameterName pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), list, pname, @params, GL.EntryPoints[751]);
			}

			// Token: 0x06002FA4 RID: 12196 RVA: 0x00080554 File Offset: 0x0007E754
			[Obsolete("Use SgixIglooInterface overload instead")]
			public static void IglooInterface(All pname, IntPtr @params)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, @params, GL.EntryPoints[1039]);
			}

			// Token: 0x06002FA5 RID: 12197 RVA: 0x00080568 File Offset: 0x0007E768
			[CLSCompliant(false)]
			[Obsolete("Use SgixIglooInterface overload instead")]
			public unsafe static void IglooInterface<T1>(All pname, [In] [Out] T1[] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[1039]);
				}
			}

			// Token: 0x06002FA6 RID: 12198 RVA: 0x0008059C File Offset: 0x0007E79C
			[CLSCompliant(false)]
			[Obsolete("Use SgixIglooInterface overload instead")]
			public unsafe static void IglooInterface<T1>(All pname, [In] [Out] T1[,] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[1039]);
				}
			}

			// Token: 0x06002FA7 RID: 12199 RVA: 0x000805D4 File Offset: 0x0007E7D4
			[Obsolete("Use SgixIglooInterface overload instead")]
			[CLSCompliant(false)]
			public unsafe static void IglooInterface<T1>(All pname, [In] [Out] T1[,,] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[1039]);
				}
			}

			// Token: 0x06002FA8 RID: 12200 RVA: 0x00080610 File Offset: 0x0007E810
			[Obsolete("Use SgixIglooInterface overload instead")]
			public unsafe static void IglooInterface<T1>(All pname, [In] [Out] ref T1 @params) where T1 : struct
			{
				fixed (T1* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[1039]);
				}
			}

			// Token: 0x06002FA9 RID: 12201 RVA: 0x00080634 File Offset: 0x0007E834
			public static void IglooInterface(SgixIglooInterface pname, IntPtr @params)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, @params, GL.EntryPoints[1039]);
			}

			// Token: 0x06002FAA RID: 12202 RVA: 0x00080648 File Offset: 0x0007E848
			[CLSCompliant(false)]
			public unsafe static void IglooInterface<T1>(SgixIglooInterface pname, [In] [Out] T1[] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[1039]);
				}
			}

			// Token: 0x06002FAB RID: 12203 RVA: 0x0008067C File Offset: 0x0007E87C
			[CLSCompliant(false)]
			public unsafe static void IglooInterface<T1>(SgixIglooInterface pname, [In] [Out] T1[,] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[1039]);
				}
			}

			// Token: 0x06002FAC RID: 12204 RVA: 0x000806B4 File Offset: 0x0007E8B4
			[CLSCompliant(false)]
			public unsafe static void IglooInterface<T1>(SgixIglooInterface pname, [In] [Out] T1[,,] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[1039]);
				}
			}

			// Token: 0x06002FAD RID: 12205 RVA: 0x000806F0 File Offset: 0x0007E8F0
			public unsafe static void IglooInterface<T1>(SgixIglooInterface pname, [In] [Out] ref T1 @params) where T1 : struct
			{
				fixed (T1* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[1039]);
				}
			}

			// Token: 0x06002FAE RID: 12206 RVA: 0x00080714 File Offset: 0x0007E914
			[CLSCompliant(false)]
			public unsafe static void InstrumentsBuffer(int size, [Out] int[] buffer)
			{
				fixed (int* ptr = ref (buffer != null && buffer.Length != 0) ? ref buffer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), size, ptr, GL.EntryPoints[1067]);
				}
			}

			// Token: 0x06002FAF RID: 12207 RVA: 0x00080748 File Offset: 0x0007E948
			[CLSCompliant(false)]
			public unsafe static void InstrumentsBuffer(int size, out int buffer)
			{
				fixed (int* ptr = &buffer)
				{
					calli(System.Void(System.Int32,System.Int32*), size, ptr, GL.EntryPoints[1067]);
				}
			}

			// Token: 0x06002FB0 RID: 12208 RVA: 0x0008076C File Offset: 0x0007E96C
			[CLSCompliant(false)]
			public unsafe static void InstrumentsBuffer(int size, [Out] int* buffer)
			{
				calli(System.Void(System.Int32,System.Int32*), size, buffer, GL.EntryPoints[1067]);
			}

			// Token: 0x06002FB1 RID: 12209 RVA: 0x00080780 File Offset: 0x0007E980
			[CLSCompliant(false)]
			public static bool IsAsyncMarker(int marker)
			{
				return calli(System.Byte(System.UInt32), marker, GL.EntryPoints[1076]);
			}

			// Token: 0x06002FB2 RID: 12210 RVA: 0x00080794 File Offset: 0x0007E994
			[CLSCompliant(false)]
			public static bool IsAsyncMarker(uint marker)
			{
				return calli(System.Byte(System.UInt32), marker, GL.EntryPoints[1076]);
			}

			// Token: 0x06002FB3 RID: 12211 RVA: 0x000807A8 File Offset: 0x0007E9A8
			public static void LightEnv(LightEnvParameterSgix pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[1121]);
			}

			// Token: 0x06002FB4 RID: 12212 RVA: 0x000807BC File Offset: 0x0007E9BC
			[Obsolete("Use LightEnvParameterSgix overload instead")]
			public static void LightEnv(SgixFragmentLighting pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[1121]);
			}

			// Token: 0x06002FB5 RID: 12213 RVA: 0x000807D0 File Offset: 0x0007E9D0
			[CLSCompliant(false)]
			public static void ListParameter(int list, ListParameterName pname, float param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single), list, pname, param, GL.EntryPoints[1140]);
			}

			// Token: 0x06002FB6 RID: 12214 RVA: 0x000807E8 File Offset: 0x0007E9E8
			[CLSCompliant(false)]
			public static void ListParameter(uint list, ListParameterName pname, float param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single), list, pname, param, GL.EntryPoints[1140]);
			}

			// Token: 0x06002FB7 RID: 12215 RVA: 0x00080800 File Offset: 0x0007EA00
			[CLSCompliant(false)]
			public unsafe static void ListParameter(int list, ListParameterName pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), list, pname, ptr, GL.EntryPoints[1141]);
				}
			}

			// Token: 0x06002FB8 RID: 12216 RVA: 0x00080838 File Offset: 0x0007EA38
			[CLSCompliant(false)]
			public unsafe static void ListParameter(int list, ListParameterName pname, float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), list, pname, @params, GL.EntryPoints[1141]);
			}

			// Token: 0x06002FB9 RID: 12217 RVA: 0x00080850 File Offset: 0x0007EA50
			[CLSCompliant(false)]
			public unsafe static void ListParameter(uint list, ListParameterName pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Single*), list, pname, ptr, GL.EntryPoints[1141]);
				}
			}

			// Token: 0x06002FBA RID: 12218 RVA: 0x00080888 File Offset: 0x0007EA88
			[CLSCompliant(false)]
			public unsafe static void ListParameter(uint list, ListParameterName pname, float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), list, pname, @params, GL.EntryPoints[1141]);
			}

			// Token: 0x06002FBB RID: 12219 RVA: 0x000808A0 File Offset: 0x0007EAA0
			[CLSCompliant(false)]
			public static void ListParameter(int list, ListParameterName pname, int param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), list, pname, param, GL.EntryPoints[1142]);
			}

			// Token: 0x06002FBC RID: 12220 RVA: 0x000808B8 File Offset: 0x0007EAB8
			[CLSCompliant(false)]
			public static void ListParameter(uint list, ListParameterName pname, int param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), list, pname, param, GL.EntryPoints[1142]);
			}

			// Token: 0x06002FBD RID: 12221 RVA: 0x000808D0 File Offset: 0x0007EAD0
			[CLSCompliant(false)]
			public unsafe static void ListParameter(int list, ListParameterName pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), list, pname, ptr, GL.EntryPoints[1143]);
				}
			}

			// Token: 0x06002FBE RID: 12222 RVA: 0x00080908 File Offset: 0x0007EB08
			[CLSCompliant(false)]
			public unsafe static void ListParameter(int list, ListParameterName pname, int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), list, pname, @params, GL.EntryPoints[1143]);
			}

			// Token: 0x06002FBF RID: 12223 RVA: 0x00080920 File Offset: 0x0007EB20
			[CLSCompliant(false)]
			public unsafe static void ListParameter(uint list, ListParameterName pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), list, pname, ptr, GL.EntryPoints[1143]);
				}
			}

			// Token: 0x06002FC0 RID: 12224 RVA: 0x00080958 File Offset: 0x0007EB58
			[CLSCompliant(false)]
			public unsafe static void ListParameter(uint list, ListParameterName pname, int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), list, pname, @params, GL.EntryPoints[1143]);
			}

			// Token: 0x06002FC1 RID: 12225 RVA: 0x00080970 File Offset: 0x0007EB70
			public static void LoadIdentityDeformationMap(FfdMaskSgix mask)
			{
				calli(System.Void(System.Int32), mask, GL.EntryPoints[1145]);
			}

			// Token: 0x06002FC2 RID: 12226 RVA: 0x00080984 File Offset: 0x0007EB84
			[Obsolete("Use FfdMaskSgix overload instead")]
			public static void LoadIdentityDeformationMap(int mask)
			{
				calli(System.Void(System.Int32), mask, GL.EntryPoints[1145]);
			}

			// Token: 0x06002FC3 RID: 12227 RVA: 0x00080998 File Offset: 0x0007EB98
			[Obsolete("Use FfdMaskSgix overload instead")]
			public static void LoadIdentityDeformationMap(uint mask)
			{
				calli(System.Void(System.Int32), mask, GL.EntryPoints[1145]);
			}

			// Token: 0x06002FC4 RID: 12228 RVA: 0x000809AC File Offset: 0x0007EBAC
			public static void PixelTexGen(SgixPixelTexture mode)
			{
				calli(System.Void(System.Int32), mode, GL.EntryPoints[1487]);
			}

			// Token: 0x06002FC5 RID: 12229 RVA: 0x000809C0 File Offset: 0x0007EBC0
			[CLSCompliant(false)]
			public unsafe static int PollAsync(out int markerp)
			{
				fixed (int* ptr = &markerp)
				{
					return calli(System.Int32(System.UInt32*), ptr, GL.EntryPoints[1516]);
				}
			}

			// Token: 0x06002FC6 RID: 12230 RVA: 0x000809E4 File Offset: 0x0007EBE4
			[CLSCompliant(false)]
			public unsafe static int PollAsync([Out] int* markerp)
			{
				return calli(System.Int32(System.UInt32*), markerp, GL.EntryPoints[1516]);
			}

			// Token: 0x06002FC7 RID: 12231 RVA: 0x000809F8 File Offset: 0x0007EBF8
			[CLSCompliant(false)]
			public unsafe static int PollAsync(out uint markerp)
			{
				fixed (uint* ptr = &markerp)
				{
					return calli(System.Int32(System.UInt32*), ptr, GL.EntryPoints[1516]);
				}
			}

			// Token: 0x06002FC8 RID: 12232 RVA: 0x00080A1C File Offset: 0x0007EC1C
			[CLSCompliant(false)]
			public unsafe static int PollAsync([Out] uint* markerp)
			{
				return calli(System.Int32(System.UInt32*), markerp, GL.EntryPoints[1516]);
			}

			// Token: 0x06002FC9 RID: 12233 RVA: 0x00080A30 File Offset: 0x0007EC30
			[CLSCompliant(false)]
			public unsafe static int PollInstruments(out int marker_p)
			{
				fixed (int* ptr = &marker_p)
				{
					return calli(System.Int32(System.Int32*), ptr, GL.EntryPoints[1517]);
				}
			}

			// Token: 0x06002FCA RID: 12234 RVA: 0x00080A54 File Offset: 0x0007EC54
			[CLSCompliant(false)]
			public unsafe static int PollInstruments([Out] int* marker_p)
			{
				return calli(System.Int32(System.Int32*), marker_p, GL.EntryPoints[1517]);
			}

			// Token: 0x06002FCB RID: 12235 RVA: 0x00080A68 File Offset: 0x0007EC68
			public static void ReadInstruments(int marker)
			{
				calli(System.Void(System.Int32), marker, GL.EntryPoints[1746]);
			}

			// Token: 0x06002FCC RID: 12236 RVA: 0x00080A7C File Offset: 0x0007EC7C
			[CLSCompliant(false)]
			public unsafe static void ReferencePlane(double[] equation)
			{
				fixed (double* ptr = ref (equation != null && equation.Length != 0) ? ref equation[0] : ref *null)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[1759]);
				}
			}

			// Token: 0x06002FCD RID: 12237 RVA: 0x00080AB0 File Offset: 0x0007ECB0
			[CLSCompliant(false)]
			public unsafe static void ReferencePlane(ref double equation)
			{
				fixed (double* ptr = &equation)
				{
					calli(System.Void(System.Double*), ptr, GL.EntryPoints[1759]);
				}
			}

			// Token: 0x06002FCE RID: 12238 RVA: 0x00080AD4 File Offset: 0x0007ECD4
			[CLSCompliant(false)]
			public unsafe static void ReferencePlane(double* equation)
			{
				calli(System.Void(System.Double*), equation, GL.EntryPoints[1759]);
			}

			// Token: 0x06002FCF RID: 12239 RVA: 0x00080AE8 File Offset: 0x0007ECE8
			public static void SpriteParameter(SgixSprite pname, float param)
			{
				calli(System.Void(System.Int32,System.Single), pname, param, GL.EntryPoints[1884]);
			}

			// Token: 0x06002FD0 RID: 12240 RVA: 0x00080AFC File Offset: 0x0007ECFC
			[CLSCompliant(false)]
			public unsafe static void SpriteParameter(SgixSprite pname, float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[1885]);
				}
			}

			// Token: 0x06002FD1 RID: 12241 RVA: 0x00080B30 File Offset: 0x0007ED30
			[CLSCompliant(false)]
			public unsafe static void SpriteParameter(SgixSprite pname, float* @params)
			{
				calli(System.Void(System.Int32,System.Single*), pname, @params, GL.EntryPoints[1885]);
			}

			// Token: 0x06002FD2 RID: 12242 RVA: 0x00080B44 File Offset: 0x0007ED44
			public static void SpriteParameter(SgixSprite pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[1886]);
			}

			// Token: 0x06002FD3 RID: 12243 RVA: 0x00080B58 File Offset: 0x0007ED58
			[CLSCompliant(false)]
			public unsafe static void SpriteParameter(SgixSprite pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[1887]);
				}
			}

			// Token: 0x06002FD4 RID: 12244 RVA: 0x00080B8C File Offset: 0x0007ED8C
			[CLSCompliant(false)]
			public unsafe static void SpriteParameter(SgixSprite pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, @params, GL.EntryPoints[1887]);
			}

			// Token: 0x06002FD5 RID: 12245 RVA: 0x00080BA0 File Offset: 0x0007EDA0
			public static void StartInstruments()
			{
				calli(System.Void(), GL.EntryPoints[1888]);
			}

			// Token: 0x06002FD6 RID: 12246 RVA: 0x00080BB4 File Offset: 0x0007EDB4
			public static void StopInstruments(int marker)
			{
				calli(System.Void(System.Int32), marker, GL.EntryPoints[1903]);
			}

			// Token: 0x06002FD7 RID: 12247 RVA: 0x00080BC8 File Offset: 0x0007EDC8
			public static void TagSampleBuffer()
			{
				calli(System.Void(), GL.EntryPoints[1907]);
			}
		}

		// Token: 0x020004CA RID: 1226
		public static class Sun
		{
			// Token: 0x06002FD8 RID: 12248 RVA: 0x00080BDC File Offset: 0x0007EDDC
			public static void Color3fVertex3(float r, float g, float b, float x, float y, float z)
			{
				calli(System.Void(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), r, g, b, x, y, z, GL.EntryPoints[181]);
			}

			// Token: 0x06002FD9 RID: 12249 RVA: 0x00080BF8 File Offset: 0x0007EDF8
			[CLSCompliant(false)]
			public unsafe static void Color3fVertex3(float[] c, float[] v)
			{
				fixed (float* ptr = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.Single*,System.Single*), ptr2, ptr3, GL.EntryPoints[182]);
					}
				}
			}

			// Token: 0x06002FDA RID: 12250 RVA: 0x00080C44 File Offset: 0x0007EE44
			[CLSCompliant(false)]
			public unsafe static void Color3fVertex3(ref float c, ref float v)
			{
				fixed (float* ptr = &c)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = &v)
					{
						calli(System.Void(System.Single*,System.Single*), ptr2, ptr3, GL.EntryPoints[182]);
					}
				}
			}

			// Token: 0x06002FDB RID: 12251 RVA: 0x00080C6C File Offset: 0x0007EE6C
			[CLSCompliant(false)]
			public unsafe static void Color3fVertex3(float* c, float* v)
			{
				calli(System.Void(System.Single*,System.Single*), c, v, GL.EntryPoints[182]);
			}

			// Token: 0x06002FDC RID: 12252 RVA: 0x00080C80 File Offset: 0x0007EE80
			public static void Color4fNormal3fVertex3(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
			{
				calli(System.Void(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), r, g, b, a, nx, ny, nz, x, y, z, GL.EntryPoints[202]);
			}

			// Token: 0x06002FDD RID: 12253 RVA: 0x00080CB0 File Offset: 0x0007EEB0
			[CLSCompliant(false)]
			public unsafe static void Color4fNormal3fVertex3(float[] c, float[] n, float[] v)
			{
				fixed (float* ptr = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
						{
							calli(System.Void(System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[203]);
						}
					}
				}
			}

			// Token: 0x06002FDE RID: 12254 RVA: 0x00080D10 File Offset: 0x0007EF10
			[CLSCompliant(false)]
			public unsafe static void Color4fNormal3fVertex3(ref float c, ref float n, ref float v)
			{
				fixed (float* ptr = &c)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = &n)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &v)
						{
							calli(System.Void(System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[203]);
						}
					}
				}
			}

			// Token: 0x06002FDF RID: 12255 RVA: 0x00080D3C File Offset: 0x0007EF3C
			[CLSCompliant(false)]
			public unsafe static void Color4fNormal3fVertex3(float* c, float* n, float* v)
			{
				calli(System.Void(System.Single*,System.Single*,System.Single*), c, n, v, GL.EntryPoints[203]);
			}

			// Token: 0x06002FE0 RID: 12256 RVA: 0x00080D54 File Offset: 0x0007EF54
			public static void Color4ubVertex2(byte r, byte g, byte b, byte a, float x, float y)
			{
				calli(System.Void(System.Byte,System.Byte,System.Byte,System.Byte,System.Single,System.Single), r, g, b, a, x, y, GL.EntryPoints[213]);
			}

			// Token: 0x06002FE1 RID: 12257 RVA: 0x00080D70 File Offset: 0x0007EF70
			[CLSCompliant(false)]
			public unsafe static void Color4ubVertex2(byte[] c, float[] v)
			{
				fixed (byte* ptr = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.Byte*,System.Single*), ptr2, ptr3, GL.EntryPoints[214]);
					}
				}
			}

			// Token: 0x06002FE2 RID: 12258 RVA: 0x00080DBC File Offset: 0x0007EFBC
			[CLSCompliant(false)]
			public unsafe static void Color4ubVertex2(ref byte c, ref float v)
			{
				fixed (byte* ptr = &c)
				{
					byte* ptr2 = ptr;
					fixed (float* ptr3 = &v)
					{
						calli(System.Void(System.Byte*,System.Single*), ptr2, ptr3, GL.EntryPoints[214]);
					}
				}
			}

			// Token: 0x06002FE3 RID: 12259 RVA: 0x00080DE4 File Offset: 0x0007EFE4
			[CLSCompliant(false)]
			public unsafe static void Color4ubVertex2(byte* c, float* v)
			{
				calli(System.Void(System.Byte*,System.Single*), c, v, GL.EntryPoints[214]);
			}

			// Token: 0x06002FE4 RID: 12260 RVA: 0x00080DF8 File Offset: 0x0007EFF8
			public static void Color4ubVertex3(byte r, byte g, byte b, byte a, float x, float y, float z)
			{
				calli(System.Void(System.Byte,System.Byte,System.Byte,System.Byte,System.Single,System.Single,System.Single), r, g, b, a, x, y, z, GL.EntryPoints[215]);
			}

			// Token: 0x06002FE5 RID: 12261 RVA: 0x00080E20 File Offset: 0x0007F020
			[CLSCompliant(false)]
			public unsafe static void Color4ubVertex3(byte[] c, float[] v)
			{
				fixed (byte* ptr = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.Byte*,System.Single*), ptr2, ptr3, GL.EntryPoints[216]);
					}
				}
			}

			// Token: 0x06002FE6 RID: 12262 RVA: 0x00080E6C File Offset: 0x0007F06C
			[CLSCompliant(false)]
			public unsafe static void Color4ubVertex3(ref byte c, ref float v)
			{
				fixed (byte* ptr = &c)
				{
					byte* ptr2 = ptr;
					fixed (float* ptr3 = &v)
					{
						calli(System.Void(System.Byte*,System.Single*), ptr2, ptr3, GL.EntryPoints[216]);
					}
				}
			}

			// Token: 0x06002FE7 RID: 12263 RVA: 0x00080E94 File Offset: 0x0007F094
			[CLSCompliant(false)]
			public unsafe static void Color4ubVertex3(byte* c, float* v)
			{
				calli(System.Void(System.Byte*,System.Single*), c, v, GL.EntryPoints[216]);
			}

			// Token: 0x06002FE8 RID: 12264 RVA: 0x00080EA8 File Offset: 0x0007F0A8
			[Obsolete("Use PrimitiveType overload instead")]
			public static void DrawMeshArrays(BeginMode mode, int first, int count, int width)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, first, count, width, GL.EntryPoints[447]);
			}

			// Token: 0x06002FE9 RID: 12265 RVA: 0x00080EC0 File Offset: 0x0007F0C0
			public static void DrawMeshArrays(PrimitiveType mode, int first, int count, int width)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, first, count, width, GL.EntryPoints[447]);
			}

			// Token: 0x06002FEA RID: 12266 RVA: 0x00080ED8 File Offset: 0x0007F0D8
			[CLSCompliant(false)]
			public static void GlobalAlphaFactor(sbyte factor)
			{
				calli(System.Void(System.SByte), factor, GL.EntryPoints[1027]);
			}

			// Token: 0x06002FEB RID: 12267 RVA: 0x00080EEC File Offset: 0x0007F0EC
			public static void GlobalAlphaFactor(double factor)
			{
				calli(System.Void(System.Double), factor, GL.EntryPoints[1028]);
			}

			// Token: 0x06002FEC RID: 12268 RVA: 0x00080F00 File Offset: 0x0007F100
			public static void GlobalAlphaFactor(float factor)
			{
				calli(System.Void(System.Single), factor, GL.EntryPoints[1029]);
			}

			// Token: 0x06002FED RID: 12269 RVA: 0x00080F14 File Offset: 0x0007F114
			public static void GlobalAlphaFactor(int factor)
			{
				calli(System.Void(System.Int32), factor, GL.EntryPoints[1030]);
			}

			// Token: 0x06002FEE RID: 12270 RVA: 0x00080F28 File Offset: 0x0007F128
			public static void GlobalAlphaFactors(short factor)
			{
				calli(System.Void(System.Int16), factor, GL.EntryPoints[1031]);
			}

			// Token: 0x06002FEF RID: 12271 RVA: 0x00080F3C File Offset: 0x0007F13C
			public static void GlobalAlphaFactor(byte factor)
			{
				calli(System.Void(System.Byte), factor, GL.EntryPoints[1032]);
			}

			// Token: 0x06002FF0 RID: 12272 RVA: 0x00080F50 File Offset: 0x0007F150
			[CLSCompliant(false)]
			public static void GlobalAlphaFactor(uint factor)
			{
				calli(System.Void(System.UInt32), factor, GL.EntryPoints[1033]);
			}

			// Token: 0x06002FF1 RID: 12273 RVA: 0x00080F64 File Offset: 0x0007F164
			[CLSCompliant(false)]
			public static void GlobalAlphaFactor(short factor)
			{
				calli(System.Void(System.UInt16), factor, GL.EntryPoints[1034]);
			}

			// Token: 0x06002FF2 RID: 12274 RVA: 0x00080F78 File Offset: 0x0007F178
			[CLSCompliant(false)]
			public static void GlobalAlphaFactor(ushort factor)
			{
				calli(System.Void(System.UInt16), factor, GL.EntryPoints[1034]);
			}

			// Token: 0x06002FF3 RID: 12275 RVA: 0x00080F8C File Offset: 0x0007F18C
			public static void Normal3fVertex3(float nx, float ny, float nz, float x, float y, float z)
			{
				calli(System.Void(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), nx, ny, nz, x, y, z, GL.EntryPoints[1414]);
			}

			// Token: 0x06002FF4 RID: 12276 RVA: 0x00080FA8 File Offset: 0x0007F1A8
			[CLSCompliant(false)]
			public unsafe static void Normal3fVertex3(float[] n, float[] v)
			{
				fixed (float* ptr = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.Single*,System.Single*), ptr2, ptr3, GL.EntryPoints[1415]);
					}
				}
			}

			// Token: 0x06002FF5 RID: 12277 RVA: 0x00080FF4 File Offset: 0x0007F1F4
			[CLSCompliant(false)]
			public unsafe static void Normal3fVertex3(ref float n, ref float v)
			{
				fixed (float* ptr = &n)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = &v)
					{
						calli(System.Void(System.Single*,System.Single*), ptr2, ptr3, GL.EntryPoints[1415]);
					}
				}
			}

			// Token: 0x06002FF6 RID: 12278 RVA: 0x0008101C File Offset: 0x0007F21C
			[CLSCompliant(false)]
			public unsafe static void Normal3fVertex3(float* n, float* v)
			{
				calli(System.Void(System.Single*,System.Single*), n, v, GL.EntryPoints[1415]);
			}

			// Token: 0x06002FF7 RID: 12279 RVA: 0x00081030 File Offset: 0x0007F230
			public static void ReplacementCodePointer(SunTriangleList type, int stride, IntPtr pointer)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, pointer, GL.EntryPoints[1767]);
			}

			// Token: 0x06002FF8 RID: 12280 RVA: 0x00081048 File Offset: 0x0007F248
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodePointer<T2>(SunTriangleList type, int stride, [In] [Out] T2[] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[1767]);
				}
			}

			// Token: 0x06002FF9 RID: 12281 RVA: 0x00081080 File Offset: 0x0007F280
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodePointer<T2>(SunTriangleList type, int stride, [In] [Out] T2[,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[1767]);
				}
			}

			// Token: 0x06002FFA RID: 12282 RVA: 0x000810BC File Offset: 0x0007F2BC
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodePointer<T2>(SunTriangleList type, int stride, [In] [Out] T2[,,] pointer) where T2 : struct
			{
				fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[1767]);
				}
			}

			// Token: 0x06002FFB RID: 12283 RVA: 0x000810F8 File Offset: 0x0007F2F8
			public unsafe static void ReplacementCodePointer<T2>(SunTriangleList type, int stride, [In] [Out] ref T2 pointer) where T2 : struct
			{
				fixed (T2* ptr = &pointer)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), type, stride, ptr, GL.EntryPoints[1767]);
				}
			}

			// Token: 0x06002FFC RID: 12284 RVA: 0x0008111C File Offset: 0x0007F31C
			public static void ReplacementCode(byte code)
			{
				calli(System.Void(System.Byte), code, GL.EntryPoints[1768]);
			}

			// Token: 0x06002FFD RID: 12285 RVA: 0x00081130 File Offset: 0x0007F330
			[CLSCompliant(false)]
			public unsafe static void ReplacementCode(byte[] code)
			{
				fixed (byte* ptr = ref (code != null && code.Length != 0) ? ref code[0] : ref *null)
				{
					calli(System.Void(System.Byte*), ptr, GL.EntryPoints[1769]);
				}
			}

			// Token: 0x06002FFE RID: 12286 RVA: 0x00081164 File Offset: 0x0007F364
			[CLSCompliant(false)]
			public unsafe static void ReplacementCode(byte* code)
			{
				calli(System.Void(System.Byte*), code, GL.EntryPoints[1769]);
			}

			// Token: 0x06002FFF RID: 12287 RVA: 0x00081178 File Offset: 0x0007F378
			[CLSCompliant(false)]
			public static void ReplacementCodeuiColor3fVertex3(int rc, float r, float g, float b, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), rc, r, g, b, x, y, z, GL.EntryPoints[1770]);
			}

			// Token: 0x06003000 RID: 12288 RVA: 0x000811A0 File Offset: 0x0007F3A0
			[CLSCompliant(false)]
			public static void ReplacementCodeuiColor3fVertex3(uint rc, float r, float g, float b, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), rc, r, g, b, x, y, z, GL.EntryPoints[1770]);
			}

			// Token: 0x06003001 RID: 12289 RVA: 0x000811C8 File Offset: 0x0007F3C8
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor3fVertex3(ref int rc, float[] c, float[] v)
			{
				fixed (int* ptr = &rc)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
						{
							calli(System.Void(System.UInt32*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1771]);
						}
					}
				}
			}

			// Token: 0x06003002 RID: 12290 RVA: 0x00081218 File Offset: 0x0007F418
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor3fVertex3(ref int rc, ref float c, ref float v)
			{
				fixed (int* ptr = &rc)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = &c)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &v)
						{
							calli(System.Void(System.UInt32*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1771]);
						}
					}
				}
			}

			// Token: 0x06003003 RID: 12291 RVA: 0x00081244 File Offset: 0x0007F444
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor3fVertex3(int* rc, float* c, float* v)
			{
				calli(System.Void(System.UInt32*,System.Single*,System.Single*), rc, c, v, GL.EntryPoints[1771]);
			}

			// Token: 0x06003004 RID: 12292 RVA: 0x0008125C File Offset: 0x0007F45C
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor3fVertex3(ref uint rc, float[] c, float[] v)
			{
				fixed (uint* ptr = &rc)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
						{
							calli(System.Void(System.UInt32*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1771]);
						}
					}
				}
			}

			// Token: 0x06003005 RID: 12293 RVA: 0x000812AC File Offset: 0x0007F4AC
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor3fVertex3(ref uint rc, ref float c, ref float v)
			{
				fixed (uint* ptr = &rc)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = &c)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &v)
						{
							calli(System.Void(System.UInt32*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1771]);
						}
					}
				}
			}

			// Token: 0x06003006 RID: 12294 RVA: 0x000812D8 File Offset: 0x0007F4D8
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor3fVertex3(uint* rc, float* c, float* v)
			{
				calli(System.Void(System.UInt32*,System.Single*,System.Single*), rc, c, v, GL.EntryPoints[1771]);
			}

			// Token: 0x06003007 RID: 12295 RVA: 0x000812F0 File Offset: 0x0007F4F0
			[CLSCompliant(false)]
			public static void ReplacementCodeuiColor4fNormal3fVertex3(int rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), rc, r, g, b, a, nx, ny, nz, x, y, z, GL.EntryPoints[1772]);
			}

			// Token: 0x06003008 RID: 12296 RVA: 0x00081320 File Offset: 0x0007F520
			[CLSCompliant(false)]
			public static void ReplacementCodeuiColor4fNormal3fVertex3(uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), rc, r, g, b, a, nx, ny, nz, x, y, z, GL.EntryPoints[1772]);
			}

			// Token: 0x06003009 RID: 12297 RVA: 0x00081350 File Offset: 0x0007F550
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor4fNormal3fVertex3(ref int rc, float[] c, float[] n, float[] v)
			{
				fixed (int* ptr = &rc)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
							{
								calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[1773]);
							}
						}
					}
				}
			}

			// Token: 0x0600300A RID: 12298 RVA: 0x000813B4 File Offset: 0x0007F5B4
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor4fNormal3fVertex3(ref int rc, ref float c, ref float n, ref float v)
			{
				fixed (int* ptr = &rc)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = &c)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &n)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = &v)
							{
								calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[1773]);
							}
						}
					}
				}
			}

			// Token: 0x0600300B RID: 12299 RVA: 0x000813E4 File Offset: 0x0007F5E4
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor4fNormal3fVertex3(int* rc, float* c, float* n, float* v)
			{
				calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*), rc, c, n, v, GL.EntryPoints[1773]);
			}

			// Token: 0x0600300C RID: 12300 RVA: 0x000813FC File Offset: 0x0007F5FC
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor4fNormal3fVertex3(ref uint rc, float[] c, float[] n, float[] v)
			{
				fixed (uint* ptr = &rc)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
							{
								calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[1773]);
							}
						}
					}
				}
			}

			// Token: 0x0600300D RID: 12301 RVA: 0x00081460 File Offset: 0x0007F660
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor4fNormal3fVertex3(ref uint rc, ref float c, ref float n, ref float v)
			{
				fixed (uint* ptr = &rc)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = &c)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &n)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = &v)
							{
								calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[1773]);
							}
						}
					}
				}
			}

			// Token: 0x0600300E RID: 12302 RVA: 0x00081490 File Offset: 0x0007F690
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor4fNormal3fVertex3(uint* rc, float* c, float* n, float* v)
			{
				calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*), rc, c, n, v, GL.EntryPoints[1773]);
			}

			// Token: 0x0600300F RID: 12303 RVA: 0x000814A8 File Offset: 0x0007F6A8
			[CLSCompliant(false)]
			public static void ReplacementCodeuiColor4ubVertex3(int rc, byte r, byte g, byte b, byte a, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte,System.Single,System.Single,System.Single), rc, r, g, b, a, x, y, z, GL.EntryPoints[1774]);
			}

			// Token: 0x06003010 RID: 12304 RVA: 0x000814D4 File Offset: 0x0007F6D4
			[CLSCompliant(false)]
			public static void ReplacementCodeuiColor4ubVertex3(uint rc, byte r, byte g, byte b, byte a, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte,System.Single,System.Single,System.Single), rc, r, g, b, a, x, y, z, GL.EntryPoints[1774]);
			}

			// Token: 0x06003011 RID: 12305 RVA: 0x00081500 File Offset: 0x0007F700
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor4ubVertex3(ref int rc, byte[] c, float[] v)
			{
				fixed (int* ptr = &rc)
				{
					int* ptr2 = ptr;
					fixed (byte* ptr3 = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
					{
						byte* ptr4 = ptr3;
						fixed (float* ptr5 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
						{
							calli(System.Void(System.UInt32*,System.Byte*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1775]);
						}
					}
				}
			}

			// Token: 0x06003012 RID: 12306 RVA: 0x00081550 File Offset: 0x0007F750
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor4ubVertex3(ref int rc, ref byte c, ref float v)
			{
				fixed (int* ptr = &rc)
				{
					int* ptr2 = ptr;
					fixed (byte* ptr3 = &c)
					{
						byte* ptr4 = ptr3;
						fixed (float* ptr5 = &v)
						{
							calli(System.Void(System.UInt32*,System.Byte*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1775]);
						}
					}
				}
			}

			// Token: 0x06003013 RID: 12307 RVA: 0x0008157C File Offset: 0x0007F77C
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor4ubVertex3(int* rc, byte* c, float* v)
			{
				calli(System.Void(System.UInt32*,System.Byte*,System.Single*), rc, c, v, GL.EntryPoints[1775]);
			}

			// Token: 0x06003014 RID: 12308 RVA: 0x00081594 File Offset: 0x0007F794
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor4ubVertex3(ref uint rc, byte[] c, float[] v)
			{
				fixed (uint* ptr = &rc)
				{
					uint* ptr2 = ptr;
					fixed (byte* ptr3 = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
					{
						byte* ptr4 = ptr3;
						fixed (float* ptr5 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
						{
							calli(System.Void(System.UInt32*,System.Byte*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1775]);
						}
					}
				}
			}

			// Token: 0x06003015 RID: 12309 RVA: 0x000815E4 File Offset: 0x0007F7E4
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor4ubVertex3(ref uint rc, ref byte c, ref float v)
			{
				fixed (uint* ptr = &rc)
				{
					uint* ptr2 = ptr;
					fixed (byte* ptr3 = &c)
					{
						byte* ptr4 = ptr3;
						fixed (float* ptr5 = &v)
						{
							calli(System.Void(System.UInt32*,System.Byte*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1775]);
						}
					}
				}
			}

			// Token: 0x06003016 RID: 12310 RVA: 0x00081610 File Offset: 0x0007F810
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor4ubVertex3(uint* rc, byte* c, float* v)
			{
				calli(System.Void(System.UInt32*,System.Byte*,System.Single*), rc, c, v, GL.EntryPoints[1775]);
			}

			// Token: 0x06003017 RID: 12311 RVA: 0x00081628 File Offset: 0x0007F828
			[CLSCompliant(false)]
			public static void ReplacementCodeuiNormal3fVertex3(int rc, float nx, float ny, float nz, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), rc, nx, ny, nz, x, y, z, GL.EntryPoints[1776]);
			}

			// Token: 0x06003018 RID: 12312 RVA: 0x00081650 File Offset: 0x0007F850
			[CLSCompliant(false)]
			public static void ReplacementCodeuiNormal3fVertex3(uint rc, float nx, float ny, float nz, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), rc, nx, ny, nz, x, y, z, GL.EntryPoints[1776]);
			}

			// Token: 0x06003019 RID: 12313 RVA: 0x00081678 File Offset: 0x0007F878
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiNormal3fVertex3(ref int rc, float[] n, float[] v)
			{
				fixed (int* ptr = &rc)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
						{
							calli(System.Void(System.UInt32*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1777]);
						}
					}
				}
			}

			// Token: 0x0600301A RID: 12314 RVA: 0x000816C8 File Offset: 0x0007F8C8
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiNormal3fVertex3(ref int rc, ref float n, ref float v)
			{
				fixed (int* ptr = &rc)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = &n)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &v)
						{
							calli(System.Void(System.UInt32*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1777]);
						}
					}
				}
			}

			// Token: 0x0600301B RID: 12315 RVA: 0x000816F4 File Offset: 0x0007F8F4
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiNormal3fVertex3(int* rc, float* n, float* v)
			{
				calli(System.Void(System.UInt32*,System.Single*,System.Single*), rc, n, v, GL.EntryPoints[1777]);
			}

			// Token: 0x0600301C RID: 12316 RVA: 0x0008170C File Offset: 0x0007F90C
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiNormal3fVertex3(ref uint rc, float[] n, float[] v)
			{
				fixed (uint* ptr = &rc)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
						{
							calli(System.Void(System.UInt32*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1777]);
						}
					}
				}
			}

			// Token: 0x0600301D RID: 12317 RVA: 0x0008175C File Offset: 0x0007F95C
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiNormal3fVertex3(ref uint rc, ref float n, ref float v)
			{
				fixed (uint* ptr = &rc)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = &n)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &v)
						{
							calli(System.Void(System.UInt32*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1777]);
						}
					}
				}
			}

			// Token: 0x0600301E RID: 12318 RVA: 0x00081788 File Offset: 0x0007F988
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiNormal3fVertex3(uint* rc, float* n, float* v)
			{
				calli(System.Void(System.UInt32*,System.Single*,System.Single*), rc, n, v, GL.EntryPoints[1777]);
			}

			// Token: 0x0600301F RID: 12319 RVA: 0x000817A0 File Offset: 0x0007F9A0
			[CLSCompliant(false)]
			public static void ReplacementCode(int code)
			{
				calli(System.Void(System.UInt32), code, GL.EntryPoints[1778]);
			}

			// Token: 0x06003020 RID: 12320 RVA: 0x000817B4 File Offset: 0x0007F9B4
			[CLSCompliant(false)]
			public static void ReplacementCode(uint code)
			{
				calli(System.Void(System.UInt32), code, GL.EntryPoints[1778]);
			}

			// Token: 0x06003021 RID: 12321 RVA: 0x000817C8 File Offset: 0x0007F9C8
			[CLSCompliant(false)]
			public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(int rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), rc, s, t, r, g, b, a, nx, ny, nz, x, y, z, GL.EntryPoints[1779]);
			}

			// Token: 0x06003022 RID: 12322 RVA: 0x000817FC File Offset: 0x0007F9FC
			[CLSCompliant(false)]
			public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), rc, s, t, r, g, b, a, nx, ny, nz, x, y, z, GL.EntryPoints[1779]);
			}

			// Token: 0x06003023 RID: 12323 RVA: 0x00081830 File Offset: 0x0007FA30
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(ref int rc, float[] tc, float[] c, float[] n, float[] v)
			{
				fixed (int* ptr = &rc)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
							{
								float* ptr8 = ptr7;
								fixed (float* ptr9 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
								{
									calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr6, ptr8, ptr9, GL.EntryPoints[1780]);
								}
							}
						}
					}
				}
			}

			// Token: 0x06003024 RID: 12324 RVA: 0x000818B0 File Offset: 0x0007FAB0
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(ref int rc, ref float tc, ref float c, ref float n, ref float v)
			{
				fixed (int* ptr = &rc)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = &tc)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &c)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = &n)
							{
								float* ptr8 = ptr7;
								fixed (float* ptr9 = &v)
								{
									calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr6, ptr8, ptr9, GL.EntryPoints[1780]);
								}
							}
						}
					}
				}
			}

			// Token: 0x06003025 RID: 12325 RVA: 0x000818E4 File Offset: 0x0007FAE4
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(int* rc, float* tc, float* c, float* n, float* v)
			{
				calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*,System.Single*), rc, tc, c, n, v, GL.EntryPoints[1780]);
			}

			// Token: 0x06003026 RID: 12326 RVA: 0x000818FC File Offset: 0x0007FAFC
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(ref uint rc, float[] tc, float[] c, float[] n, float[] v)
			{
				fixed (uint* ptr = &rc)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
							{
								float* ptr8 = ptr7;
								fixed (float* ptr9 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
								{
									calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr6, ptr8, ptr9, GL.EntryPoints[1780]);
								}
							}
						}
					}
				}
			}

			// Token: 0x06003027 RID: 12327 RVA: 0x0008197C File Offset: 0x0007FB7C
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(ref uint rc, ref float tc, ref float c, ref float n, ref float v)
			{
				fixed (uint* ptr = &rc)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = &tc)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &c)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = &n)
							{
								float* ptr8 = ptr7;
								fixed (float* ptr9 = &v)
								{
									calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr6, ptr8, ptr9, GL.EntryPoints[1780]);
								}
							}
						}
					}
				}
			}

			// Token: 0x06003028 RID: 12328 RVA: 0x000819B0 File Offset: 0x0007FBB0
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(uint* rc, float* tc, float* c, float* n, float* v)
			{
				calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*,System.Single*), rc, tc, c, n, v, GL.EntryPoints[1780]);
			}

			// Token: 0x06003029 RID: 12329 RVA: 0x000819C8 File Offset: 0x0007FBC8
			[CLSCompliant(false)]
			public static void ReplacementCodeuiTexCoord2fNormal3fVertex3(int rc, float s, float t, float nx, float ny, float nz, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), rc, s, t, nx, ny, nz, x, y, z, GL.EntryPoints[1781]);
			}

			// Token: 0x0600302A RID: 12330 RVA: 0x000819F4 File Offset: 0x0007FBF4
			[CLSCompliant(false)]
			public static void ReplacementCodeuiTexCoord2fNormal3fVertex3(uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), rc, s, t, nx, ny, nz, x, y, z, GL.EntryPoints[1781]);
			}

			// Token: 0x0600302B RID: 12331 RVA: 0x00081A20 File Offset: 0x0007FC20
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fNormal3fVertex3(ref int rc, float[] tc, float[] n, float[] v)
			{
				fixed (int* ptr = &rc)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
							{
								calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[1782]);
							}
						}
					}
				}
			}

			// Token: 0x0600302C RID: 12332 RVA: 0x00081A84 File Offset: 0x0007FC84
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fNormal3fVertex3(ref int rc, ref float tc, ref float n, ref float v)
			{
				fixed (int* ptr = &rc)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = &tc)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &n)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = &v)
							{
								calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[1782]);
							}
						}
					}
				}
			}

			// Token: 0x0600302D RID: 12333 RVA: 0x00081AB4 File Offset: 0x0007FCB4
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fNormal3fVertex3(int* rc, float* tc, float* n, float* v)
			{
				calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*), rc, tc, n, v, GL.EntryPoints[1782]);
			}

			// Token: 0x0600302E RID: 12334 RVA: 0x00081ACC File Offset: 0x0007FCCC
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fNormal3fVertex3(ref uint rc, float[] tc, float[] n, float[] v)
			{
				fixed (uint* ptr = &rc)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
							{
								calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[1782]);
							}
						}
					}
				}
			}

			// Token: 0x0600302F RID: 12335 RVA: 0x00081B30 File Offset: 0x0007FD30
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fNormal3fVertex3(ref uint rc, ref float tc, ref float n, ref float v)
			{
				fixed (uint* ptr = &rc)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = &tc)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &n)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = &v)
							{
								calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[1782]);
							}
						}
					}
				}
			}

			// Token: 0x06003030 RID: 12336 RVA: 0x00081B60 File Offset: 0x0007FD60
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fNormal3fVertex3(uint* rc, float* tc, float* n, float* v)
			{
				calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*), rc, tc, n, v, GL.EntryPoints[1782]);
			}

			// Token: 0x06003031 RID: 12337 RVA: 0x00081B78 File Offset: 0x0007FD78
			[CLSCompliant(false)]
			public static void ReplacementCodeuiTexCoord2fVertex3(int rc, float s, float t, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Single), rc, s, t, x, y, z, GL.EntryPoints[1783]);
			}

			// Token: 0x06003032 RID: 12338 RVA: 0x00081B94 File Offset: 0x0007FD94
			[CLSCompliant(false)]
			public static void ReplacementCodeuiTexCoord2fVertex3(uint rc, float s, float t, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Single), rc, s, t, x, y, z, GL.EntryPoints[1783]);
			}

			// Token: 0x06003033 RID: 12339 RVA: 0x00081BB0 File Offset: 0x0007FDB0
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fVertex3(ref int rc, float[] tc, float[] v)
			{
				fixed (int* ptr = &rc)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
						{
							calli(System.Void(System.UInt32*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1784]);
						}
					}
				}
			}

			// Token: 0x06003034 RID: 12340 RVA: 0x00081C00 File Offset: 0x0007FE00
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fVertex3(ref int rc, ref float tc, ref float v)
			{
				fixed (int* ptr = &rc)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = &tc)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &v)
						{
							calli(System.Void(System.UInt32*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1784]);
						}
					}
				}
			}

			// Token: 0x06003035 RID: 12341 RVA: 0x00081C2C File Offset: 0x0007FE2C
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fVertex3(int* rc, float* tc, float* v)
			{
				calli(System.Void(System.UInt32*,System.Single*,System.Single*), rc, tc, v, GL.EntryPoints[1784]);
			}

			// Token: 0x06003036 RID: 12342 RVA: 0x00081C44 File Offset: 0x0007FE44
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fVertex3(ref uint rc, float[] tc, float[] v)
			{
				fixed (uint* ptr = &rc)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
						{
							calli(System.Void(System.UInt32*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1784]);
						}
					}
				}
			}

			// Token: 0x06003037 RID: 12343 RVA: 0x00081C94 File Offset: 0x0007FE94
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fVertex3(ref uint rc, ref float tc, ref float v)
			{
				fixed (uint* ptr = &rc)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = &tc)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &v)
						{
							calli(System.Void(System.UInt32*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1784]);
						}
					}
				}
			}

			// Token: 0x06003038 RID: 12344 RVA: 0x00081CC0 File Offset: 0x0007FEC0
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fVertex3(uint* rc, float* tc, float* v)
			{
				calli(System.Void(System.UInt32*,System.Single*,System.Single*), rc, tc, v, GL.EntryPoints[1784]);
			}

			// Token: 0x06003039 RID: 12345 RVA: 0x00081CD8 File Offset: 0x0007FED8
			[CLSCompliant(false)]
			public static void ReplacementCodeuiVertex3(int rc, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single), rc, x, y, z, GL.EntryPoints[1785]);
			}

			// Token: 0x0600303A RID: 12346 RVA: 0x00081CF0 File Offset: 0x0007FEF0
			[CLSCompliant(false)]
			public static void ReplacementCodeuiVertex3(uint rc, float x, float y, float z)
			{
				calli(System.Void(System.UInt32,System.Single,System.Single,System.Single), rc, x, y, z, GL.EntryPoints[1785]);
			}

			// Token: 0x0600303B RID: 12347 RVA: 0x00081D08 File Offset: 0x0007FF08
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiVertex3(ref int rc, float[] v)
			{
				fixed (int* ptr = &rc)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Single*), ptr2, ptr3, GL.EntryPoints[1786]);
					}
				}
			}

			// Token: 0x0600303C RID: 12348 RVA: 0x00081D40 File Offset: 0x0007FF40
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiVertex3(ref int rc, ref float v)
			{
				fixed (int* ptr = &rc)
				{
					int* ptr2 = ptr;
					fixed (float* ptr3 = &v)
					{
						calli(System.Void(System.UInt32*,System.Single*), ptr2, ptr3, GL.EntryPoints[1786]);
					}
				}
			}

			// Token: 0x0600303D RID: 12349 RVA: 0x00081D68 File Offset: 0x0007FF68
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiVertex3(int* rc, float* v)
			{
				calli(System.Void(System.UInt32*,System.Single*), rc, v, GL.EntryPoints[1786]);
			}

			// Token: 0x0600303E RID: 12350 RVA: 0x00081D7C File Offset: 0x0007FF7C
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiVertex3(ref uint rc, float[] v)
			{
				fixed (uint* ptr = &rc)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Single*), ptr2, ptr3, GL.EntryPoints[1786]);
					}
				}
			}

			// Token: 0x0600303F RID: 12351 RVA: 0x00081DB4 File Offset: 0x0007FFB4
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiVertex3(ref uint rc, ref float v)
			{
				fixed (uint* ptr = &rc)
				{
					uint* ptr2 = ptr;
					fixed (float* ptr3 = &v)
					{
						calli(System.Void(System.UInt32*,System.Single*), ptr2, ptr3, GL.EntryPoints[1786]);
					}
				}
			}

			// Token: 0x06003040 RID: 12352 RVA: 0x00081DDC File Offset: 0x0007FFDC
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiVertex3(uint* rc, float* v)
			{
				calli(System.Void(System.UInt32*,System.Single*), rc, v, GL.EntryPoints[1786]);
			}

			// Token: 0x06003041 RID: 12353 RVA: 0x00081DF0 File Offset: 0x0007FFF0
			[CLSCompliant(false)]
			public unsafe static void ReplacementCode(int[] code)
			{
				fixed (int* ptr = ref (code != null && code.Length != 0) ? ref code[0] : ref *null)
				{
					calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[1787]);
				}
			}

			// Token: 0x06003042 RID: 12354 RVA: 0x00081E24 File Offset: 0x00080024
			[CLSCompliant(false)]
			public unsafe static void ReplacementCode(int* code)
			{
				calli(System.Void(System.UInt32*), code, GL.EntryPoints[1787]);
			}

			// Token: 0x06003043 RID: 12355 RVA: 0x00081E38 File Offset: 0x00080038
			[CLSCompliant(false)]
			public unsafe static void ReplacementCode(uint[] code)
			{
				fixed (uint* ptr = ref (code != null && code.Length != 0) ? ref code[0] : ref *null)
				{
					calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[1787]);
				}
			}

			// Token: 0x06003044 RID: 12356 RVA: 0x00081E6C File Offset: 0x0008006C
			[CLSCompliant(false)]
			public unsafe static void ReplacementCode(uint* code)
			{
				calli(System.Void(System.UInt32*), code, GL.EntryPoints[1787]);
			}

			// Token: 0x06003045 RID: 12357 RVA: 0x00081E80 File Offset: 0x00080080
			[CLSCompliant(false)]
			public static void ReplacementCode(short code)
			{
				calli(System.Void(System.UInt16), code, GL.EntryPoints[1788]);
			}

			// Token: 0x06003046 RID: 12358 RVA: 0x00081E94 File Offset: 0x00080094
			[CLSCompliant(false)]
			public static void ReplacementCode(ushort code)
			{
				calli(System.Void(System.UInt16), code, GL.EntryPoints[1788]);
			}

			// Token: 0x06003047 RID: 12359 RVA: 0x00081EA8 File Offset: 0x000800A8
			[CLSCompliant(false)]
			public unsafe static void ReplacementCode(short[] code)
			{
				fixed (short* ptr = ref (code != null && code.Length != 0) ? ref code[0] : ref *null)
				{
					calli(System.Void(System.UInt16*), ptr, GL.EntryPoints[1789]);
				}
			}

			// Token: 0x06003048 RID: 12360 RVA: 0x00081EDC File Offset: 0x000800DC
			[CLSCompliant(false)]
			public unsafe static void ReplacementCode(short* code)
			{
				calli(System.Void(System.UInt16*), code, GL.EntryPoints[1789]);
			}

			// Token: 0x06003049 RID: 12361 RVA: 0x00081EF0 File Offset: 0x000800F0
			[CLSCompliant(false)]
			public unsafe static void ReplacementCode(ushort[] code)
			{
				fixed (ushort* ptr = ref (code != null && code.Length != 0) ? ref code[0] : ref *null)
				{
					calli(System.Void(System.UInt16*), ptr, GL.EntryPoints[1789]);
				}
			}

			// Token: 0x0600304A RID: 12362 RVA: 0x00081F24 File Offset: 0x00080124
			[CLSCompliant(false)]
			public unsafe static void ReplacementCode(ushort* code)
			{
				calli(System.Void(System.UInt16*), code, GL.EntryPoints[1789]);
			}

			// Token: 0x0600304B RID: 12363 RVA: 0x00081F38 File Offset: 0x00080138
			public static void TexCoord2fColor3fVertex3(float s, float t, float r, float g, float b, float x, float y, float z)
			{
				calli(System.Void(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), s, t, r, g, b, x, y, z, GL.EntryPoints[1950]);
			}

			// Token: 0x0600304C RID: 12364 RVA: 0x00081F64 File Offset: 0x00080164
			[CLSCompliant(false)]
			public unsafe static void TexCoord2fColor3fVertex3(float[] tc, float[] c, float[] v)
			{
				fixed (float* ptr = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
						{
							calli(System.Void(System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1951]);
						}
					}
				}
			}

			// Token: 0x0600304D RID: 12365 RVA: 0x00081FC4 File Offset: 0x000801C4
			[CLSCompliant(false)]
			public unsafe static void TexCoord2fColor3fVertex3(ref float tc, ref float c, ref float v)
			{
				fixed (float* ptr = &tc)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = &c)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &v)
						{
							calli(System.Void(System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1951]);
						}
					}
				}
			}

			// Token: 0x0600304E RID: 12366 RVA: 0x00081FF0 File Offset: 0x000801F0
			[CLSCompliant(false)]
			public unsafe static void TexCoord2fColor3fVertex3(float* tc, float* c, float* v)
			{
				calli(System.Void(System.Single*,System.Single*,System.Single*), tc, c, v, GL.EntryPoints[1951]);
			}

			// Token: 0x0600304F RID: 12367 RVA: 0x00082008 File Offset: 0x00080208
			public static void TexCoord2fColor4fNormal3fVertex3(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
			{
				calli(System.Void(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), s, t, r, g, b, a, nx, ny, nz, x, y, z, GL.EntryPoints[1952]);
			}

			// Token: 0x06003050 RID: 12368 RVA: 0x0008203C File Offset: 0x0008023C
			[CLSCompliant(false)]
			public unsafe static void TexCoord2fColor4fNormal3fVertex3(float[] tc, float[] c, float[] n, float[] v)
			{
				fixed (float* ptr = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
							{
								calli(System.Void(System.Single*,System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[1953]);
							}
						}
					}
				}
			}

			// Token: 0x06003051 RID: 12369 RVA: 0x000820B4 File Offset: 0x000802B4
			[CLSCompliant(false)]
			public unsafe static void TexCoord2fColor4fNormal3fVertex3(ref float tc, ref float c, ref float n, ref float v)
			{
				fixed (float* ptr = &tc)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = &c)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &n)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = &v)
							{
								calli(System.Void(System.Single*,System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[1953]);
							}
						}
					}
				}
			}

			// Token: 0x06003052 RID: 12370 RVA: 0x000820E4 File Offset: 0x000802E4
			[CLSCompliant(false)]
			public unsafe static void TexCoord2fColor4fNormal3fVertex3(float* tc, float* c, float* n, float* v)
			{
				calli(System.Void(System.Single*,System.Single*,System.Single*,System.Single*), tc, c, n, v, GL.EntryPoints[1953]);
			}

			// Token: 0x06003053 RID: 12371 RVA: 0x000820FC File Offset: 0x000802FC
			public static void TexCoord2fColor4ubVertex3(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z)
			{
				calli(System.Void(System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,System.Single,System.Single,System.Single), s, t, r, g, b, a, x, y, z, GL.EntryPoints[1954]);
			}

			// Token: 0x06003054 RID: 12372 RVA: 0x00082128 File Offset: 0x00080328
			[CLSCompliant(false)]
			public unsafe static void TexCoord2fColor4ubVertex3(float[] tc, byte[] c, float[] v)
			{
				fixed (float* ptr = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (byte* ptr3 = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
					{
						byte* ptr4 = ptr3;
						fixed (float* ptr5 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
						{
							calli(System.Void(System.Single*,System.Byte*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1955]);
						}
					}
				}
			}

			// Token: 0x06003055 RID: 12373 RVA: 0x00082188 File Offset: 0x00080388
			[CLSCompliant(false)]
			public unsafe static void TexCoord2fColor4ubVertex3(ref float tc, ref byte c, ref float v)
			{
				fixed (float* ptr = &tc)
				{
					float* ptr2 = ptr;
					fixed (byte* ptr3 = &c)
					{
						byte* ptr4 = ptr3;
						fixed (float* ptr5 = &v)
						{
							calli(System.Void(System.Single*,System.Byte*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1955]);
						}
					}
				}
			}

			// Token: 0x06003056 RID: 12374 RVA: 0x000821B4 File Offset: 0x000803B4
			[CLSCompliant(false)]
			public unsafe static void TexCoord2fColor4ubVertex3(float* tc, byte* c, float* v)
			{
				calli(System.Void(System.Single*,System.Byte*,System.Single*), tc, c, v, GL.EntryPoints[1955]);
			}

			// Token: 0x06003057 RID: 12375 RVA: 0x000821CC File Offset: 0x000803CC
			public static void TexCoord2fNormal3fVertex3(float s, float t, float nx, float ny, float nz, float x, float y, float z)
			{
				calli(System.Void(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), s, t, nx, ny, nz, x, y, z, GL.EntryPoints[1956]);
			}

			// Token: 0x06003058 RID: 12376 RVA: 0x000821F8 File Offset: 0x000803F8
			[CLSCompliant(false)]
			public unsafe static void TexCoord2fNormal3fVertex3(float[] tc, float[] n, float[] v)
			{
				fixed (float* ptr = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
						{
							calli(System.Void(System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1957]);
						}
					}
				}
			}

			// Token: 0x06003059 RID: 12377 RVA: 0x00082258 File Offset: 0x00080458
			[CLSCompliant(false)]
			public unsafe static void TexCoord2fNormal3fVertex3(ref float tc, ref float n, ref float v)
			{
				fixed (float* ptr = &tc)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = &n)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &v)
						{
							calli(System.Void(System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr5, GL.EntryPoints[1957]);
						}
					}
				}
			}

			// Token: 0x0600305A RID: 12378 RVA: 0x00082284 File Offset: 0x00080484
			[CLSCompliant(false)]
			public unsafe static void TexCoord2fNormal3fVertex3(float* tc, float* n, float* v)
			{
				calli(System.Void(System.Single*,System.Single*,System.Single*), tc, n, v, GL.EntryPoints[1957]);
			}

			// Token: 0x0600305B RID: 12379 RVA: 0x0008229C File Offset: 0x0008049C
			public static void TexCoord2fVertex3(float s, float t, float x, float y, float z)
			{
				calli(System.Void(System.Single,System.Single,System.Single,System.Single,System.Single), s, t, x, y, z, GL.EntryPoints[1959]);
			}

			// Token: 0x0600305C RID: 12380 RVA: 0x000822B4 File Offset: 0x000804B4
			[CLSCompliant(false)]
			public unsafe static void TexCoord2fVertex3(float[] tc, float[] v)
			{
				fixed (float* ptr = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.Single*,System.Single*), ptr2, ptr3, GL.EntryPoints[1960]);
					}
				}
			}

			// Token: 0x0600305D RID: 12381 RVA: 0x00082300 File Offset: 0x00080500
			[CLSCompliant(false)]
			public unsafe static void TexCoord2fVertex3(ref float tc, ref float v)
			{
				fixed (float* ptr = &tc)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = &v)
					{
						calli(System.Void(System.Single*,System.Single*), ptr2, ptr3, GL.EntryPoints[1960]);
					}
				}
			}

			// Token: 0x0600305E RID: 12382 RVA: 0x00082328 File Offset: 0x00080528
			[CLSCompliant(false)]
			public unsafe static void TexCoord2fVertex3(float* tc, float* v)
			{
				calli(System.Void(System.Single*,System.Single*), tc, v, GL.EntryPoints[1960]);
			}

			// Token: 0x0600305F RID: 12383 RVA: 0x0008233C File Offset: 0x0008053C
			public static void TexCoord4fColor4fNormal3fVertex4(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w)
			{
				calli(System.Void(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w, GL.EntryPoints[1988]);
			}

			// Token: 0x06003060 RID: 12384 RVA: 0x00082374 File Offset: 0x00080574
			[CLSCompliant(false)]
			public unsafe static void TexCoord4fColor4fNormal3fVertex4(float[] tc, float[] c, float[] n, float[] v)
			{
				fixed (float* ptr = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
							{
								calli(System.Void(System.Single*,System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[1989]);
							}
						}
					}
				}
			}

			// Token: 0x06003061 RID: 12385 RVA: 0x000823EC File Offset: 0x000805EC
			[CLSCompliant(false)]
			public unsafe static void TexCoord4fColor4fNormal3fVertex4(ref float tc, ref float c, ref float n, ref float v)
			{
				fixed (float* ptr = &tc)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = &c)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = &n)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = &v)
							{
								calli(System.Void(System.Single*,System.Single*,System.Single*,System.Single*), ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[1989]);
							}
						}
					}
				}
			}

			// Token: 0x06003062 RID: 12386 RVA: 0x0008241C File Offset: 0x0008061C
			[CLSCompliant(false)]
			public unsafe static void TexCoord4fColor4fNormal3fVertex4(float* tc, float* c, float* n, float* v)
			{
				calli(System.Void(System.Single*,System.Single*,System.Single*,System.Single*), tc, c, n, v, GL.EntryPoints[1989]);
			}

			// Token: 0x06003063 RID: 12387 RVA: 0x00082434 File Offset: 0x00080634
			public static void TexCoord4fVertex4(float s, float t, float p, float q, float x, float y, float z, float w)
			{
				calli(System.Void(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), s, t, p, q, x, y, z, w, GL.EntryPoints[1991]);
			}

			// Token: 0x06003064 RID: 12388 RVA: 0x00082460 File Offset: 0x00080660
			[CLSCompliant(false)]
			public unsafe static void TexCoord4fVertex4(float[] tc, float[] v)
			{
				fixed (float* ptr = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.Single*,System.Single*), ptr2, ptr3, GL.EntryPoints[1992]);
					}
				}
			}

			// Token: 0x06003065 RID: 12389 RVA: 0x000824AC File Offset: 0x000806AC
			[CLSCompliant(false)]
			public unsafe static void TexCoord4fVertex4(ref float tc, ref float v)
			{
				fixed (float* ptr = &tc)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = &v)
					{
						calli(System.Void(System.Single*,System.Single*), ptr2, ptr3, GL.EntryPoints[1992]);
					}
				}
			}

			// Token: 0x06003066 RID: 12390 RVA: 0x000824D4 File Offset: 0x000806D4
			[CLSCompliant(false)]
			public unsafe static void TexCoord4fVertex4(float* tc, float* v)
			{
				calli(System.Void(System.Single*,System.Single*), tc, v, GL.EntryPoints[1992]);
			}

			// Token: 0x06003067 RID: 12391 RVA: 0x000824E8 File Offset: 0x000806E8
			[Obsolete("Use ref/array overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor3fVertex3(int* rc, float[] c, float[] v)
			{
				fixed (float* ptr = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Single*,System.Single*), rc, ptr2, ptr3, GL.EntryPoints[1771]);
					}
				}
			}

			// Token: 0x06003068 RID: 12392 RVA: 0x00082534 File Offset: 0x00080734
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overload instead")]
			public unsafe static void ReplacementCodeuiColor3fVertex3(uint* rc, float[] c, float[] v)
			{
				fixed (float* ptr = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Single*,System.Single*), rc, ptr2, ptr3, GL.EntryPoints[1771]);
					}
				}
			}

			// Token: 0x06003069 RID: 12393 RVA: 0x00082580 File Offset: 0x00080780
			[Obsolete("Use ref/array overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor4fNormal3fVertex3(int* rc, float[] c, float[] n, float[] v)
			{
				fixed (float* ptr = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
						{
							calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*), rc, ptr2, ptr4, ptr5, GL.EntryPoints[1773]);
						}
					}
				}
			}

			// Token: 0x0600306A RID: 12394 RVA: 0x000825E0 File Offset: 0x000807E0
			[Obsolete("Use ref/array overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor4fNormal3fVertex3(uint* rc, float[] c, float[] n, float[] v)
			{
				fixed (float* ptr = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
						{
							calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*), rc, ptr2, ptr4, ptr5, GL.EntryPoints[1773]);
						}
					}
				}
			}

			// Token: 0x0600306B RID: 12395 RVA: 0x00082640 File Offset: 0x00080840
			[Obsolete("Use ref/array overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiColor4ubVertex3(int* rc, byte[] c, float[] v)
			{
				fixed (byte* ptr = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Byte*,System.Single*), rc, ptr2, ptr3, GL.EntryPoints[1775]);
					}
				}
			}

			// Token: 0x0600306C RID: 12396 RVA: 0x0008268C File Offset: 0x0008088C
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overload instead")]
			public unsafe static void ReplacementCodeuiColor4ubVertex3(uint* rc, byte[] c, float[] v)
			{
				fixed (byte* ptr = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
				{
					byte* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Byte*,System.Single*), rc, ptr2, ptr3, GL.EntryPoints[1775]);
					}
				}
			}

			// Token: 0x0600306D RID: 12397 RVA: 0x000826D8 File Offset: 0x000808D8
			[Obsolete("Use ref/array overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiNormal3fVertex3(int* rc, float[] n, float[] v)
			{
				fixed (float* ptr = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Single*,System.Single*), rc, ptr2, ptr3, GL.EntryPoints[1777]);
					}
				}
			}

			// Token: 0x0600306E RID: 12398 RVA: 0x00082724 File Offset: 0x00080924
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overload instead")]
			public unsafe static void ReplacementCodeuiNormal3fVertex3(uint* rc, float[] n, float[] v)
			{
				fixed (float* ptr = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Single*,System.Single*), rc, ptr2, ptr3, GL.EntryPoints[1777]);
					}
				}
			}

			// Token: 0x0600306F RID: 12399 RVA: 0x00082770 File Offset: 0x00080970
			[Obsolete("Use ref/array overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(int* rc, float[] tc, float[] c, float[] n, float[] v)
			{
				fixed (float* ptr = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
							{
								calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*,System.Single*), rc, ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[1780]);
							}
						}
					}
				}
			}

			// Token: 0x06003070 RID: 12400 RVA: 0x000827EC File Offset: 0x000809EC
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overload instead")]
			public unsafe static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(uint* rc, float[] tc, float[] c, float[] n, float[] v)
			{
				fixed (float* ptr = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (c != null && c.Length != 0) ? ref c[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
						{
							float* ptr6 = ptr5;
							fixed (float* ptr7 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
							{
								calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*,System.Single*), rc, ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[1780]);
							}
						}
					}
				}
			}

			// Token: 0x06003071 RID: 12401 RVA: 0x00082868 File Offset: 0x00080A68
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overload instead")]
			public unsafe static void ReplacementCodeuiTexCoord2fNormal3fVertex3(int* rc, float[] tc, float[] n, float[] v)
			{
				fixed (float* ptr = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
						{
							calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*), rc, ptr2, ptr4, ptr5, GL.EntryPoints[1782]);
						}
					}
				}
			}

			// Token: 0x06003072 RID: 12402 RVA: 0x000828C8 File Offset: 0x00080AC8
			[Obsolete("Use ref/array overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fNormal3fVertex3(uint* rc, float[] tc, float[] n, float[] v)
			{
				fixed (float* ptr = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (n != null && n.Length != 0) ? ref n[0] : ref *null)
					{
						float* ptr4 = ptr3;
						fixed (float* ptr5 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
						{
							calli(System.Void(System.UInt32*,System.Single*,System.Single*,System.Single*), rc, ptr2, ptr4, ptr5, GL.EntryPoints[1782]);
						}
					}
				}
			}

			// Token: 0x06003073 RID: 12403 RVA: 0x00082928 File Offset: 0x00080B28
			[Obsolete("Use ref/array overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fVertex3(int* rc, float[] tc, float[] v)
			{
				fixed (float* ptr = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Single*,System.Single*), rc, ptr2, ptr3, GL.EntryPoints[1784]);
					}
				}
			}

			// Token: 0x06003074 RID: 12404 RVA: 0x00082974 File Offset: 0x00080B74
			[Obsolete("Use ref/array overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiTexCoord2fVertex3(uint* rc, float[] tc, float[] v)
			{
				fixed (float* ptr = ref (tc != null && tc.Length != 0) ? ref tc[0] : ref *null)
				{
					float* ptr2 = ptr;
					fixed (float* ptr3 = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Single*,System.Single*), rc, ptr2, ptr3, GL.EntryPoints[1784]);
					}
				}
			}

			// Token: 0x06003075 RID: 12405 RVA: 0x000829C0 File Offset: 0x00080BC0
			[Obsolete("Use ref/array overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ReplacementCodeuiVertex3(int* rc, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32*,System.Single*), rc, ptr, GL.EntryPoints[1786]);
				}
			}

			// Token: 0x06003076 RID: 12406 RVA: 0x000829F4 File Offset: 0x00080BF4
			[CLSCompliant(false)]
			[Obsolete("Use ref/array overload instead")]
			public unsafe static void ReplacementCodeuiVertex3(uint* rc, float[] v)
			{
				fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
				{
					calli(System.Void(System.UInt32*,System.Single*), rc, ptr, GL.EntryPoints[1786]);
				}
			}
		}

		// Token: 0x020004CB RID: 1227
		public static class Sunx
		{
			// Token: 0x06003077 RID: 12407 RVA: 0x00082A28 File Offset: 0x00080C28
			public static void FinishTexture()
			{
				calli(System.Void(), GL.EntryPoints[525]);
			}
		}
	}
}
