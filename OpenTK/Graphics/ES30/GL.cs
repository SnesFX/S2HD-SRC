using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Text;

namespace OpenTK.Graphics.ES30
{
	// Token: 0x020005E8 RID: 1512
	public sealed class GL : GraphicsBindingsBase
	{
		// Token: 0x0600470A RID: 18186 RVA: 0x000C3E54 File Offset: 0x000C2054
		public GL()
		{
			this._EntryPointsInstance = GL.EntryPoints;
			this._EntryPointNamesInstance = GL.EntryPointNames;
			this._EntryPointNameOffsetsInstance = GL.EntryPointNameOffsets;
		}

		// Token: 0x17000450 RID: 1104
		// (get) Token: 0x0600470B RID: 18187 RVA: 0x000C3E80 File Offset: 0x000C2080
		protected override object SyncRoot
		{
			get
			{
				return GL.sync_root;
			}
		}

		// Token: 0x0600470C RID: 18188 RVA: 0x000C3E88 File Offset: 0x000C2088
		public static void ClearColor(Color color)
		{
			GL.ClearColor((float)color.R / 255f, (float)color.G / 255f, (float)color.B / 255f, (float)color.A / 255f);
		}

		// Token: 0x0600470D RID: 18189 RVA: 0x000C3EC8 File Offset: 0x000C20C8
		public static void ClearColor(Color4 color)
		{
			GL.ClearColor(color.R, color.G, color.B, color.A);
		}

		// Token: 0x0600470E RID: 18190 RVA: 0x000C3EEC File Offset: 0x000C20EC
		public static void BlendColor(Color color)
		{
			GL.BlendColor((float)color.R / 255f, (float)color.G / 255f, (float)color.B / 255f, (float)color.A / 255f);
		}

		// Token: 0x0600470F RID: 18191 RVA: 0x000C3F2C File Offset: 0x000C212C
		public static void BlendColor(Color4 color)
		{
			GL.BlendColor(color.R, color.G, color.B, color.A);
		}

		// Token: 0x06004710 RID: 18192 RVA: 0x000C3F50 File Offset: 0x000C2150
		[CLSCompliant(false)]
		public static void Uniform2(int location, ref Vector2 vector)
		{
			GL.Uniform2(location, vector.X, vector.Y);
		}

		// Token: 0x06004711 RID: 18193 RVA: 0x000C3F64 File Offset: 0x000C2164
		[CLSCompliant(false)]
		public static void Uniform3(int location, ref Vector3 vector)
		{
			GL.Uniform3(location, vector.X, vector.Y, vector.Z);
		}

		// Token: 0x06004712 RID: 18194 RVA: 0x000C3F80 File Offset: 0x000C2180
		[CLSCompliant(false)]
		public static void Uniform4(int location, ref Vector4 vector)
		{
			GL.Uniform4(location, vector.X, vector.Y, vector.Z, vector.W);
		}

		// Token: 0x06004713 RID: 18195 RVA: 0x000C3FA0 File Offset: 0x000C21A0
		public static void Uniform2(int location, Vector2 vector)
		{
			GL.Uniform2(location, vector.X, vector.Y);
		}

		// Token: 0x06004714 RID: 18196 RVA: 0x000C3FB8 File Offset: 0x000C21B8
		public static void Uniform3(int location, Vector3 vector)
		{
			GL.Uniform3(location, vector.X, vector.Y, vector.Z);
		}

		// Token: 0x06004715 RID: 18197 RVA: 0x000C3FD8 File Offset: 0x000C21D8
		public static void Uniform4(int location, Vector4 vector)
		{
			GL.Uniform4(location, vector.X, vector.Y, vector.Z, vector.W);
		}

		// Token: 0x06004716 RID: 18198 RVA: 0x000C3FFC File Offset: 0x000C21FC
		public static void Uniform4(int location, Color4 color)
		{
			GL.Uniform4(location, color.R, color.G, color.B, color.A);
		}

		// Token: 0x06004717 RID: 18199 RVA: 0x000C4020 File Offset: 0x000C2220
		public static void Uniform4(int location, Quaternion quaternion)
		{
			GL.Uniform4(location, quaternion.X, quaternion.Y, quaternion.Z, quaternion.W);
		}

		// Token: 0x06004718 RID: 18200 RVA: 0x000C4044 File Offset: 0x000C2244
		public unsafe static void UniformMatrix2(int location, bool transpose, ref Matrix2 matrix)
		{
			fixed (float* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix2(location, 1, transpose, ptr);
			}
		}

		// Token: 0x06004719 RID: 18201 RVA: 0x000C406C File Offset: 0x000C226C
		public unsafe static void UniformMatrix3(int location, bool transpose, ref Matrix3 matrix)
		{
			fixed (float* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix3(location, 1, transpose, ptr);
			}
		}

		// Token: 0x0600471A RID: 18202 RVA: 0x000C4094 File Offset: 0x000C2294
		public unsafe static void UniformMatrix4(int location, bool transpose, ref Matrix4 matrix)
		{
			fixed (float* ptr = &matrix.Row0.X)
			{
				GL.UniformMatrix4(location, 1, transpose, ptr);
			}
		}

		// Token: 0x0600471B RID: 18203 RVA: 0x000C40BC File Offset: 0x000C22BC
		public static string GetActiveAttrib(int program, int index, out int size, out ActiveAttribType type)
		{
			int num;
			GL.GetProgram(program, GetProgramParameterName.ActiveAttributeMaxLength, out num);
			StringBuilder stringBuilder = new StringBuilder((num == 0) ? 1 : (num * 2));
			GL.GetActiveAttrib(program, index, stringBuilder.Capacity, out num, out size, out type, stringBuilder);
			return stringBuilder.ToString();
		}

		// Token: 0x0600471C RID: 18204 RVA: 0x000C4100 File Offset: 0x000C2300
		public static string GetActiveUniform(int program, int uniformIndex, out int size, out ActiveUniformType type)
		{
			int num;
			GL.GetProgram(program, GetProgramParameterName.ActiveUniformMaxLength, out num);
			StringBuilder stringBuilder = new StringBuilder((num == 0) ? 1 : num);
			GL.GetActiveUniform(program, uniformIndex, stringBuilder.Capacity, out num, out size, out type, stringBuilder);
			return stringBuilder.ToString();
		}

		// Token: 0x0600471D RID: 18205 RVA: 0x000C4140 File Offset: 0x000C2340
		public unsafe static void ShaderSource(int shader, string @string)
		{
			int length = @string.Length;
			GL.ShaderSource((uint)shader, 1, new string[]
			{
				@string
			}, &length);
		}

		// Token: 0x0600471E RID: 18206 RVA: 0x000C416C File Offset: 0x000C236C
		public static string GetShaderInfoLog(int shader)
		{
			string result;
			GL.GetShaderInfoLog(shader, out result);
			return result;
		}

		// Token: 0x0600471F RID: 18207 RVA: 0x000C4184 File Offset: 0x000C2384
		public unsafe static void GetShaderInfoLog(int shader, out string info)
		{
			int num;
			GL.GetShader(shader, ShaderParameter.InfoLogLength, out num);
			if (num == 0)
			{
				info = string.Empty;
				return;
			}
			StringBuilder stringBuilder = new StringBuilder(num * 2);
			GL.GetShaderInfoLog((uint)shader, stringBuilder.Capacity, &num, stringBuilder);
			info = stringBuilder.ToString();
		}

		// Token: 0x06004720 RID: 18208 RVA: 0x000C41CC File Offset: 0x000C23CC
		public static string GetProgramInfoLog(int program)
		{
			string result;
			GL.GetProgramInfoLog(program, out result);
			return result;
		}

		// Token: 0x06004721 RID: 18209 RVA: 0x000C41E4 File Offset: 0x000C23E4
		public unsafe static void GetProgramInfoLog(int program, out string info)
		{
			int num;
			GL.GetProgram(program, GetProgramParameterName.InfoLogLength, out num);
			if (num == 0)
			{
				info = string.Empty;
				return;
			}
			StringBuilder stringBuilder = new StringBuilder(num * 2);
			GL.GetProgramInfoLog((uint)program, stringBuilder.Capacity, &num, stringBuilder);
			info = stringBuilder.ToString();
		}

		// Token: 0x06004722 RID: 18210 RVA: 0x000C422C File Offset: 0x000C242C
		[CLSCompliant(false)]
		public static void VertexAttrib2(int index, ref Vector2 v)
		{
			GL.VertexAttrib2(index, v.X, v.Y);
		}

		// Token: 0x06004723 RID: 18211 RVA: 0x000C4240 File Offset: 0x000C2440
		[CLSCompliant(false)]
		public static void VertexAttrib3(int index, ref Vector3 v)
		{
			GL.VertexAttrib3(index, v.X, v.Y, v.Z);
		}

		// Token: 0x06004724 RID: 18212 RVA: 0x000C425C File Offset: 0x000C245C
		[CLSCompliant(false)]
		public static void VertexAttrib4(int index, ref Vector4 v)
		{
			GL.VertexAttrib4(index, v.X, v.Y, v.Z, v.W);
		}

		// Token: 0x06004725 RID: 18213 RVA: 0x000C427C File Offset: 0x000C247C
		public static void VertexAttrib2(int index, Vector2 v)
		{
			GL.VertexAttrib2(index, v.X, v.Y);
		}

		// Token: 0x06004726 RID: 18214 RVA: 0x000C4294 File Offset: 0x000C2494
		public static void VertexAttrib3(int index, Vector3 v)
		{
			GL.VertexAttrib3(index, v.X, v.Y, v.Z);
		}

		// Token: 0x06004727 RID: 18215 RVA: 0x000C42B4 File Offset: 0x000C24B4
		public static void VertexAttrib4(int index, Vector4 v)
		{
			GL.VertexAttrib4(index, v.X, v.Y, v.Z, v.W);
		}

		// Token: 0x06004728 RID: 18216 RVA: 0x000C42D8 File Offset: 0x000C24D8
		public static void VertexAttribPointer(int index, int size, VertexAttribPointerType type, bool normalized, int stride, int offset)
		{
			GL.VertexAttribPointer(index, size, type, normalized, stride, (IntPtr)offset);
		}

		// Token: 0x06004729 RID: 18217 RVA: 0x000C42EC File Offset: 0x000C24EC
		[CLSCompliant(false)]
		public static void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, int offset)
		{
			GL.VertexAttribPointer(index, size, type, normalized, stride, (IntPtr)offset);
		}

		// Token: 0x0600472A RID: 18218 RVA: 0x000C4300 File Offset: 0x000C2500
		public unsafe static void GetFloat(GetPName pname, out Vector2 vector)
		{
			fixed (Vector2* ptr = &vector)
			{
				GL.GetFloat(pname, (float*)ptr);
			}
		}

		// Token: 0x0600472B RID: 18219 RVA: 0x000C431C File Offset: 0x000C251C
		public unsafe static void GetFloat(GetPName pname, out Vector3 vector)
		{
			fixed (Vector3* ptr = &vector)
			{
				GL.GetFloat(pname, (float*)ptr);
			}
		}

		// Token: 0x0600472C RID: 18220 RVA: 0x000C4338 File Offset: 0x000C2538
		public unsafe static void GetFloat(GetPName pname, out Vector4 vector)
		{
			fixed (Vector4* ptr = &vector)
			{
				GL.GetFloat(pname, (float*)ptr);
			}
		}

		// Token: 0x0600472D RID: 18221 RVA: 0x000C4354 File Offset: 0x000C2554
		public unsafe static void GetFloat(GetPName pname, out Matrix4 matrix)
		{
			fixed (Matrix4* ptr = &matrix)
			{
				GL.GetFloat(pname, (float*)ptr);
			}
		}

		// Token: 0x0600472E RID: 18222 RVA: 0x000C4370 File Offset: 0x000C2570
		public static void Viewport(Size size)
		{
			GL.Viewport(0, 0, size.Width, size.Height);
		}

		// Token: 0x0600472F RID: 18223 RVA: 0x000C4388 File Offset: 0x000C2588
		public static void Viewport(Point location, Size size)
		{
			GL.Viewport(location.X, location.Y, size.Width, size.Height);
		}

		// Token: 0x06004730 RID: 18224 RVA: 0x000C43AC File Offset: 0x000C25AC
		public static void Viewport(Rectangle rectangle)
		{
			GL.Viewport(rectangle.X, rectangle.Y, rectangle.Width, rectangle.Height);
		}

		// Token: 0x06004731 RID: 18225 RVA: 0x000C43D0 File Offset: 0x000C25D0
		static GL()
		{
			GL.EntryPoints = new IntPtr[GL.EntryPointNameOffsets.Length];
		}

		// Token: 0x06004732 RID: 18226 RVA: 0x000C442C File Offset: 0x000C262C
		[Obsolete("Use strongly-typed overload instead")]
		public static void ActiveTexture(All texture)
		{
			calli(System.Void(System.Int32), texture, GL.EntryPoints[2]);
		}

		// Token: 0x06004733 RID: 18227 RVA: 0x000C443C File Offset: 0x000C263C
		public static void ActiveTexture(TextureUnit texture)
		{
			calli(System.Void(System.Int32), texture, GL.EntryPoints[2]);
		}

		// Token: 0x06004734 RID: 18228 RVA: 0x000C444C File Offset: 0x000C264C
		[CLSCompliant(false)]
		public static void AttachShader(int program, int shader)
		{
			calli(System.Void(System.UInt32,System.UInt32), program, shader, GL.EntryPoints[4]);
		}

		// Token: 0x06004735 RID: 18229 RVA: 0x000C445C File Offset: 0x000C265C
		[CLSCompliant(false)]
		public static void AttachShader(uint program, uint shader)
		{
			calli(System.Void(System.UInt32,System.UInt32), program, shader, GL.EntryPoints[4]);
		}

		// Token: 0x06004736 RID: 18230 RVA: 0x000C446C File Offset: 0x000C266C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void BeginQuery(All target, int id)
		{
			calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[7]);
		}

		// Token: 0x06004737 RID: 18231 RVA: 0x000C447C File Offset: 0x000C267C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void BeginQuery(All target, uint id)
		{
			calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[7]);
		}

		// Token: 0x06004738 RID: 18232 RVA: 0x000C448C File Offset: 0x000C268C
		[CLSCompliant(false)]
		public static void BeginQuery(QueryTarget target, int id)
		{
			calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[7]);
		}

		// Token: 0x06004739 RID: 18233 RVA: 0x000C449C File Offset: 0x000C269C
		[CLSCompliant(false)]
		public static void BeginQuery(QueryTarget target, uint id)
		{
			calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[7]);
		}

		// Token: 0x0600473A RID: 18234 RVA: 0x000C44AC File Offset: 0x000C26AC
		[Obsolete("Use strongly-typed overload instead")]
		public static void BeginTransformFeedback(All primitiveMode)
		{
			calli(System.Void(System.Int32), primitiveMode, GL.EntryPoints[9]);
		}

		// Token: 0x0600473B RID: 18235 RVA: 0x000C44BC File Offset: 0x000C26BC
		public static void BeginTransformFeedback(TransformFeedbackPrimitiveType primitiveMode)
		{
			calli(System.Void(System.Int32), primitiveMode, GL.EntryPoints[9]);
		}

		// Token: 0x0600473C RID: 18236 RVA: 0x000C44CC File Offset: 0x000C26CC
		[CLSCompliant(false)]
		public static void BindAttribLocation(int program, int index, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			calli(System.Void(System.UInt32,System.UInt32,System.IntPtr), program, index, intPtr, GL.EntryPoints[10]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x0600473D RID: 18237 RVA: 0x000C44F8 File Offset: 0x000C26F8
		[CLSCompliant(false)]
		public static void BindAttribLocation(uint program, uint index, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			calli(System.Void(System.UInt32,System.UInt32,System.IntPtr), program, index, intPtr, GL.EntryPoints[10]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x0600473E RID: 18238 RVA: 0x000C4524 File Offset: 0x000C2724
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void BindBuffer(All target, int buffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, buffer, GL.EntryPoints[11]);
		}

		// Token: 0x0600473F RID: 18239 RVA: 0x000C4538 File Offset: 0x000C2738
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void BindBuffer(All target, uint buffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, buffer, GL.EntryPoints[11]);
		}

		// Token: 0x06004740 RID: 18240 RVA: 0x000C454C File Offset: 0x000C274C
		[CLSCompliant(false)]
		public static void BindBuffer(BufferTarget target, int buffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, buffer, GL.EntryPoints[11]);
		}

		// Token: 0x06004741 RID: 18241 RVA: 0x000C4560 File Offset: 0x000C2760
		[CLSCompliant(false)]
		public static void BindBuffer(BufferTarget target, uint buffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, buffer, GL.EntryPoints[11]);
		}

		// Token: 0x06004742 RID: 18242 RVA: 0x000C4574 File Offset: 0x000C2774
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void BindBufferBase(All target, int index, int buffer)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, buffer, GL.EntryPoints[12]);
		}

		// Token: 0x06004743 RID: 18243 RVA: 0x000C4588 File Offset: 0x000C2788
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void BindBufferBase(All target, uint index, uint buffer)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, buffer, GL.EntryPoints[12]);
		}

		// Token: 0x06004744 RID: 18244 RVA: 0x000C459C File Offset: 0x000C279C
		[CLSCompliant(false)]
		public static void BindBufferBase(BufferRangeTarget target, int index, int buffer)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, buffer, GL.EntryPoints[12]);
		}

		// Token: 0x06004745 RID: 18245 RVA: 0x000C45B0 File Offset: 0x000C27B0
		[CLSCompliant(false)]
		public static void BindBufferBase(BufferRangeTarget target, uint index, uint buffer)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), target, index, buffer, GL.EntryPoints[12]);
		}

		// Token: 0x06004746 RID: 18246 RVA: 0x000C45C4 File Offset: 0x000C27C4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void BindBufferRange(All target, int index, int buffer, IntPtr offset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr), target, index, buffer, offset, size, GL.EntryPoints[13]);
		}

		// Token: 0x06004747 RID: 18247 RVA: 0x000C45DC File Offset: 0x000C27DC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void BindBufferRange(All target, uint index, uint buffer, IntPtr offset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr), target, index, buffer, offset, size, GL.EntryPoints[13]);
		}

		// Token: 0x06004748 RID: 18248 RVA: 0x000C45F4 File Offset: 0x000C27F4
		[CLSCompliant(false)]
		public static void BindBufferRange(BufferRangeTarget target, int index, int buffer, IntPtr offset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr), target, index, buffer, offset, size, GL.EntryPoints[13]);
		}

		// Token: 0x06004749 RID: 18249 RVA: 0x000C460C File Offset: 0x000C280C
		[CLSCompliant(false)]
		public static void BindBufferRange(BufferRangeTarget target, uint index, uint buffer, IntPtr offset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr), target, index, buffer, offset, size, GL.EntryPoints[13]);
		}

		// Token: 0x0600474A RID: 18250 RVA: 0x000C4624 File Offset: 0x000C2824
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void BindFramebuffer(All target, int framebuffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, framebuffer, GL.EntryPoints[14]);
		}

		// Token: 0x0600474B RID: 18251 RVA: 0x000C4638 File Offset: 0x000C2838
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void BindFramebuffer(All target, uint framebuffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, framebuffer, GL.EntryPoints[14]);
		}

		// Token: 0x0600474C RID: 18252 RVA: 0x000C464C File Offset: 0x000C284C
		[CLSCompliant(false)]
		public static void BindFramebuffer(FramebufferTarget target, int framebuffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, framebuffer, GL.EntryPoints[14]);
		}

		// Token: 0x0600474D RID: 18253 RVA: 0x000C4660 File Offset: 0x000C2860
		[CLSCompliant(false)]
		public static void BindFramebuffer(FramebufferTarget target, uint framebuffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, framebuffer, GL.EntryPoints[14]);
		}

		// Token: 0x0600474E RID: 18254 RVA: 0x000C4674 File Offset: 0x000C2874
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void BindRenderbuffer(All target, int renderbuffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, renderbuffer, GL.EntryPoints[16]);
		}

		// Token: 0x0600474F RID: 18255 RVA: 0x000C4688 File Offset: 0x000C2888
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void BindRenderbuffer(All target, uint renderbuffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, renderbuffer, GL.EntryPoints[16]);
		}

		// Token: 0x06004750 RID: 18256 RVA: 0x000C469C File Offset: 0x000C289C
		[CLSCompliant(false)]
		public static void BindRenderbuffer(RenderbufferTarget target, int renderbuffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, renderbuffer, GL.EntryPoints[16]);
		}

		// Token: 0x06004751 RID: 18257 RVA: 0x000C46B0 File Offset: 0x000C28B0
		[CLSCompliant(false)]
		public static void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer)
		{
			calli(System.Void(System.Int32,System.UInt32), target, renderbuffer, GL.EntryPoints[16]);
		}

		// Token: 0x06004752 RID: 18258 RVA: 0x000C46C4 File Offset: 0x000C28C4
		[CLSCompliant(false)]
		public static void BindSampler(int unit, int sampler)
		{
			calli(System.Void(System.UInt32,System.UInt32), unit, sampler, GL.EntryPoints[17]);
		}

		// Token: 0x06004753 RID: 18259 RVA: 0x000C46D8 File Offset: 0x000C28D8
		[CLSCompliant(false)]
		public static void BindSampler(uint unit, uint sampler)
		{
			calli(System.Void(System.UInt32,System.UInt32), unit, sampler, GL.EntryPoints[17]);
		}

		// Token: 0x06004754 RID: 18260 RVA: 0x000C46EC File Offset: 0x000C28EC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void BindTexture(All target, int texture)
		{
			calli(System.Void(System.Int32,System.UInt32), target, texture, GL.EntryPoints[18]);
		}

		// Token: 0x06004755 RID: 18261 RVA: 0x000C4700 File Offset: 0x000C2900
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void BindTexture(All target, uint texture)
		{
			calli(System.Void(System.Int32,System.UInt32), target, texture, GL.EntryPoints[18]);
		}

		// Token: 0x06004756 RID: 18262 RVA: 0x000C4714 File Offset: 0x000C2914
		[CLSCompliant(false)]
		public static void BindTexture(TextureTarget target, int texture)
		{
			calli(System.Void(System.Int32,System.UInt32), target, texture, GL.EntryPoints[18]);
		}

		// Token: 0x06004757 RID: 18263 RVA: 0x000C4728 File Offset: 0x000C2928
		[CLSCompliant(false)]
		public static void BindTexture(TextureTarget target, uint texture)
		{
			calli(System.Void(System.Int32,System.UInt32), target, texture, GL.EntryPoints[18]);
		}

		// Token: 0x06004758 RID: 18264 RVA: 0x000C473C File Offset: 0x000C293C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void BindTransformFeedback(All target, int id)
		{
			calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[19]);
		}

		// Token: 0x06004759 RID: 18265 RVA: 0x000C4750 File Offset: 0x000C2950
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void BindTransformFeedback(All target, uint id)
		{
			calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[19]);
		}

		// Token: 0x0600475A RID: 18266 RVA: 0x000C4764 File Offset: 0x000C2964
		[CLSCompliant(false)]
		public static void BindTransformFeedback(TransformFeedbackTarget target, int id)
		{
			calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[19]);
		}

		// Token: 0x0600475B RID: 18267 RVA: 0x000C4778 File Offset: 0x000C2978
		[CLSCompliant(false)]
		public static void BindTransformFeedback(TransformFeedbackTarget target, uint id)
		{
			calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[19]);
		}

		// Token: 0x0600475C RID: 18268 RVA: 0x000C478C File Offset: 0x000C298C
		[CLSCompliant(false)]
		public static void BindVertexArray(int array)
		{
			calli(System.Void(System.UInt32), array, GL.EntryPoints[20]);
		}

		// Token: 0x0600475D RID: 18269 RVA: 0x000C479C File Offset: 0x000C299C
		[CLSCompliant(false)]
		public static void BindVertexArray(uint array)
		{
			calli(System.Void(System.UInt32), array, GL.EntryPoints[20]);
		}

		// Token: 0x0600475E RID: 18270 RVA: 0x000C47AC File Offset: 0x000C29AC
		public static void BlendColor(float red, float green, float blue, float alpha)
		{
			calli(System.Void(System.Single,System.Single,System.Single,System.Single), red, green, blue, alpha, GL.EntryPoints[24]);
		}

		// Token: 0x0600475F RID: 18271 RVA: 0x000C47C0 File Offset: 0x000C29C0
		[Obsolete("Use strongly-typed overload instead")]
		public static void BlendEquation(All mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[25]);
		}

		// Token: 0x06004760 RID: 18272 RVA: 0x000C47D0 File Offset: 0x000C29D0
		public static void BlendEquation(BlendEquationMode mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[25]);
		}

		// Token: 0x06004761 RID: 18273 RVA: 0x000C47E0 File Offset: 0x000C29E0
		[Obsolete("Use strongly-typed overload instead")]
		public static void BlendEquationSeparate(All modeRGB, All modeAlpha)
		{
			calli(System.Void(System.Int32,System.Int32), modeRGB, modeAlpha, GL.EntryPoints[28]);
		}

		// Token: 0x06004762 RID: 18274 RVA: 0x000C47F4 File Offset: 0x000C29F4
		public static void BlendEquationSeparate(BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
		{
			calli(System.Void(System.Int32,System.Int32), modeRGB, modeAlpha, GL.EntryPoints[28]);
		}

		// Token: 0x06004763 RID: 18275 RVA: 0x000C4808 File Offset: 0x000C2A08
		[Obsolete("Use strongly-typed overload instead")]
		public static void BlendFunc(All sfactor, All dfactor)
		{
			calli(System.Void(System.Int32,System.Int32), sfactor, dfactor, GL.EntryPoints[30]);
		}

		// Token: 0x06004764 RID: 18276 RVA: 0x000C481C File Offset: 0x000C2A1C
		public static void BlendFunc(BlendingFactorSrc sfactor, BlendingFactorDest dfactor)
		{
			calli(System.Void(System.Int32,System.Int32), sfactor, dfactor, GL.EntryPoints[30]);
		}

		// Token: 0x06004765 RID: 18277 RVA: 0x000C4830 File Offset: 0x000C2A30
		[Obsolete("Use strongly-typed overload instead")]
		public static void BlendFuncSeparate(All sfactorRGB, All dfactorRGB, All sfactorAlpha, All dfactorAlpha)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha, GL.EntryPoints[32]);
		}

		// Token: 0x06004766 RID: 18278 RVA: 0x000C4844 File Offset: 0x000C2A44
		public static void BlendFuncSeparate(BlendingFactorSrc sfactorRGB, BlendingFactorDest dfactorRGB, BlendingFactorSrc sfactorAlpha, BlendingFactorDest dfactorAlpha)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha, GL.EntryPoints[32]);
		}

		// Token: 0x06004767 RID: 18279 RVA: 0x000C4858 File Offset: 0x000C2A58
		[Obsolete("Use strongly-typed overload instead")]
		public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, All mask, All filter)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter, GL.EntryPoints[35]);
		}

		// Token: 0x06004768 RID: 18280 RVA: 0x000C4884 File Offset: 0x000C2A84
		public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter, GL.EntryPoints[35]);
		}

		// Token: 0x06004769 RID: 18281 RVA: 0x000C48B0 File Offset: 0x000C2AB0
		[Obsolete("Use strongly-typed overload instead")]
		public static void BufferData(All target, IntPtr size, IntPtr data, All usage)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, data, usage, GL.EntryPoints[38]);
		}

		// Token: 0x0600476A RID: 18282 RVA: 0x000C48C4 File Offset: 0x000C2AC4
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void BufferData<T2>(All target, IntPtr size, [In] [Out] T2[] data, All usage) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[38]);
			}
		}

		// Token: 0x0600476B RID: 18283 RVA: 0x000C48F8 File Offset: 0x000C2AF8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void BufferData<T2>(All target, IntPtr size, [In] [Out] T2[,] data, All usage) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[38]);
			}
		}

		// Token: 0x0600476C RID: 18284 RVA: 0x000C4930 File Offset: 0x000C2B30
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void BufferData<T2>(All target, IntPtr size, [In] [Out] T2[,,] data, All usage) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[38]);
			}
		}

		// Token: 0x0600476D RID: 18285 RVA: 0x000C4968 File Offset: 0x000C2B68
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void BufferData<T2>(All target, IntPtr size, [In] [Out] ref T2 data, All usage) where T2 : struct
		{
			fixed (T2* ptr = &data)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[38]);
			}
		}

		// Token: 0x0600476E RID: 18286 RVA: 0x000C498C File Offset: 0x000C2B8C
		public static void BufferData(BufferTarget target, IntPtr size, IntPtr data, BufferUsageHint usage)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, data, usage, GL.EntryPoints[38]);
		}

		// Token: 0x0600476F RID: 18287 RVA: 0x000C49A0 File Offset: 0x000C2BA0
		[CLSCompliant(false)]
		public unsafe static void BufferData<T2>(BufferTarget target, IntPtr size, [In] [Out] T2[] data, BufferUsageHint usage) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[38]);
			}
		}

		// Token: 0x06004770 RID: 18288 RVA: 0x000C49D4 File Offset: 0x000C2BD4
		[CLSCompliant(false)]
		public unsafe static void BufferData<T2>(BufferTarget target, IntPtr size, [In] [Out] T2[,] data, BufferUsageHint usage) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[38]);
			}
		}

		// Token: 0x06004771 RID: 18289 RVA: 0x000C4A0C File Offset: 0x000C2C0C
		[CLSCompliant(false)]
		public unsafe static void BufferData<T2>(BufferTarget target, IntPtr size, [In] [Out] T2[,,] data, BufferUsageHint usage) where T2 : struct
		{
			fixed (T2* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[38]);
			}
		}

		// Token: 0x06004772 RID: 18290 RVA: 0x000C4A44 File Offset: 0x000C2C44
		public unsafe static void BufferData<T2>(BufferTarget target, IntPtr size, [In] [Out] ref T2 data, BufferUsageHint usage) where T2 : struct
		{
			fixed (T2* ptr = &data)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, size, ptr, usage, GL.EntryPoints[38]);
			}
		}

		// Token: 0x06004773 RID: 18291 RVA: 0x000C4A68 File Offset: 0x000C2C68
		[Obsolete("Use strongly-typed overload instead")]
		public static void BufferSubData(All target, IntPtr offset, IntPtr size, IntPtr data)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, data, GL.EntryPoints[39]);
		}

		// Token: 0x06004774 RID: 18292 RVA: 0x000C4A7C File Offset: 0x000C2C7C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void BufferSubData<T3>(All target, IntPtr offset, IntPtr size, [In] [Out] T3[] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[39]);
			}
		}

		// Token: 0x06004775 RID: 18293 RVA: 0x000C4AB0 File Offset: 0x000C2CB0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void BufferSubData<T3>(All target, IntPtr offset, IntPtr size, [In] [Out] T3[,] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[39]);
			}
		}

		// Token: 0x06004776 RID: 18294 RVA: 0x000C4AE8 File Offset: 0x000C2CE8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void BufferSubData<T3>(All target, IntPtr offset, IntPtr size, [In] [Out] T3[,,] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[39]);
			}
		}

		// Token: 0x06004777 RID: 18295 RVA: 0x000C4B20 File Offset: 0x000C2D20
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void BufferSubData<T3>(All target, IntPtr offset, IntPtr size, [In] [Out] ref T3 data) where T3 : struct
		{
			fixed (T3* ptr = &data)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[39]);
			}
		}

		// Token: 0x06004778 RID: 18296 RVA: 0x000C4B44 File Offset: 0x000C2D44
		public static void BufferSubData(BufferTarget target, IntPtr offset, IntPtr size, IntPtr data)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, data, GL.EntryPoints[39]);
		}

		// Token: 0x06004779 RID: 18297 RVA: 0x000C4B58 File Offset: 0x000C2D58
		[CLSCompliant(false)]
		public unsafe static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] T3[] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[39]);
			}
		}

		// Token: 0x0600477A RID: 18298 RVA: 0x000C4B8C File Offset: 0x000C2D8C
		[CLSCompliant(false)]
		public unsafe static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] T3[,] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[39]);
			}
		}

		// Token: 0x0600477B RID: 18299 RVA: 0x000C4BC4 File Offset: 0x000C2DC4
		[CLSCompliant(false)]
		public unsafe static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] T3[,,] data) where T3 : struct
		{
			fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[39]);
			}
		}

		// Token: 0x0600477C RID: 18300 RVA: 0x000C4BFC File Offset: 0x000C2DFC
		public unsafe static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In] [Out] ref T3 data) where T3 : struct
		{
			fixed (T3* ptr = &data)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), target, offset, size, ptr, GL.EntryPoints[39]);
			}
		}

		// Token: 0x0600477D RID: 18301 RVA: 0x000C4C20 File Offset: 0x000C2E20
		[Obsolete("Use strongly-typed overload instead")]
		public static FramebufferErrorCode CheckFramebufferStatus(All target)
		{
			return calli(System.Int32(System.Int32), target, GL.EntryPoints[40]);
		}

		// Token: 0x0600477E RID: 18302 RVA: 0x000C4C30 File Offset: 0x000C2E30
		public static FramebufferErrorCode CheckFramebufferStatus(FramebufferTarget target)
		{
			return calli(System.Int32(System.Int32), target, GL.EntryPoints[40]);
		}

		// Token: 0x0600477F RID: 18303 RVA: 0x000C4C40 File Offset: 0x000C2E40
		[Obsolete("Use strongly-typed overload instead")]
		public static void Clear(All mask)
		{
			calli(System.Void(System.Int32), mask, GL.EntryPoints[41]);
		}

		// Token: 0x06004780 RID: 18304 RVA: 0x000C4C50 File Offset: 0x000C2E50
		public static void Clear(ClearBufferMask mask)
		{
			calli(System.Void(System.Int32), mask, GL.EntryPoints[41]);
		}

		// Token: 0x06004781 RID: 18305 RVA: 0x000C4C60 File Offset: 0x000C2E60
		[Obsolete("Use strongly-typed overload instead")]
		public static void ClearBuffer(All buffer, int drawbuffer, float depth, int stencil)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single,System.Int32), buffer, drawbuffer, depth, stencil, GL.EntryPoints[42]);
		}

		// Token: 0x06004782 RID: 18306 RVA: 0x000C4C74 File Offset: 0x000C2E74
		public static void ClearBuffer(ClearBufferCombined buffer, int drawbuffer, float depth, int stencil)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single,System.Int32), buffer, drawbuffer, depth, stencil, GL.EntryPoints[42]);
		}

		// Token: 0x06004783 RID: 18307 RVA: 0x000C4C88 File Offset: 0x000C2E88
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ClearBuffer(All buffer, int drawbuffer, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), buffer, drawbuffer, ptr, GL.EntryPoints[43]);
			}
		}

		// Token: 0x06004784 RID: 18308 RVA: 0x000C4CBC File Offset: 0x000C2EBC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ClearBuffer(All buffer, int drawbuffer, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), buffer, drawbuffer, ptr, GL.EntryPoints[43]);
			}
		}

		// Token: 0x06004785 RID: 18309 RVA: 0x000C4CDC File Offset: 0x000C2EDC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(All buffer, int drawbuffer, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), buffer, drawbuffer, value, GL.EntryPoints[43]);
		}

		// Token: 0x06004786 RID: 18310 RVA: 0x000C4CF0 File Offset: 0x000C2EF0
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), buffer, drawbuffer, ptr, GL.EntryPoints[43]);
			}
		}

		// Token: 0x06004787 RID: 18311 RVA: 0x000C4D24 File Offset: 0x000C2F24
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), buffer, drawbuffer, ptr, GL.EntryPoints[43]);
			}
		}

		// Token: 0x06004788 RID: 18312 RVA: 0x000C4D44 File Offset: 0x000C2F44
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), buffer, drawbuffer, value, GL.EntryPoints[43]);
		}

		// Token: 0x06004789 RID: 18313 RVA: 0x000C4D58 File Offset: 0x000C2F58
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ClearBuffer(All buffer, int drawbuffer, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), buffer, drawbuffer, ptr, GL.EntryPoints[44]);
			}
		}

		// Token: 0x0600478A RID: 18314 RVA: 0x000C4D8C File Offset: 0x000C2F8C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ClearBuffer(All buffer, int drawbuffer, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), buffer, drawbuffer, ptr, GL.EntryPoints[44]);
			}
		}

		// Token: 0x0600478B RID: 18315 RVA: 0x000C4DAC File Offset: 0x000C2FAC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ClearBuffer(All buffer, int drawbuffer, int* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), buffer, drawbuffer, value, GL.EntryPoints[44]);
		}

		// Token: 0x0600478C RID: 18316 RVA: 0x000C4DC0 File Offset: 0x000C2FC0
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), buffer, drawbuffer, ptr, GL.EntryPoints[44]);
			}
		}

		// Token: 0x0600478D RID: 18317 RVA: 0x000C4DF4 File Offset: 0x000C2FF4
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), buffer, drawbuffer, ptr, GL.EntryPoints[44]);
			}
		}

		// Token: 0x0600478E RID: 18318 RVA: 0x000C4E14 File Offset: 0x000C3014
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, int* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), buffer, drawbuffer, value, GL.EntryPoints[44]);
		}

		// Token: 0x0600478F RID: 18319 RVA: 0x000C4E28 File Offset: 0x000C3028
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ClearBuffer(All buffer, int drawbuffer, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), buffer, drawbuffer, ptr, GL.EntryPoints[45]);
			}
		}

		// Token: 0x06004790 RID: 18320 RVA: 0x000C4E5C File Offset: 0x000C305C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ClearBuffer(All buffer, int drawbuffer, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), buffer, drawbuffer, ptr, GL.EntryPoints[45]);
			}
		}

		// Token: 0x06004791 RID: 18321 RVA: 0x000C4E7C File Offset: 0x000C307C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ClearBuffer(All buffer, int drawbuffer, uint* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), buffer, drawbuffer, value, GL.EntryPoints[45]);
		}

		// Token: 0x06004792 RID: 18322 RVA: 0x000C4E90 File Offset: 0x000C3090
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), buffer, drawbuffer, ptr, GL.EntryPoints[45]);
			}
		}

		// Token: 0x06004793 RID: 18323 RVA: 0x000C4EC4 File Offset: 0x000C30C4
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), buffer, drawbuffer, ptr, GL.EntryPoints[45]);
			}
		}

		// Token: 0x06004794 RID: 18324 RVA: 0x000C4EE4 File Offset: 0x000C30E4
		[CLSCompliant(false)]
		public unsafe static void ClearBuffer(ClearBuffer buffer, int drawbuffer, uint* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), buffer, drawbuffer, value, GL.EntryPoints[45]);
		}

		// Token: 0x06004795 RID: 18325 RVA: 0x000C4EF8 File Offset: 0x000C30F8
		public static void ClearColor(float red, float green, float blue, float alpha)
		{
			calli(System.Void(System.Single,System.Single,System.Single,System.Single), red, green, blue, alpha, GL.EntryPoints[46]);
		}

		// Token: 0x06004796 RID: 18326 RVA: 0x000C4F0C File Offset: 0x000C310C
		public static void ClearDepth(float d)
		{
			calli(System.Void(System.Single), d, GL.EntryPoints[47]);
		}

		// Token: 0x06004797 RID: 18327 RVA: 0x000C4F1C File Offset: 0x000C311C
		public static void ClearStencil(int s)
		{
			calli(System.Void(System.Int32), s, GL.EntryPoints[48]);
		}

		// Token: 0x06004798 RID: 18328 RVA: 0x000C4F2C File Offset: 0x000C312C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static WaitSyncStatus ClientWaitSync(IntPtr sync, All flags, long timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[49]);
		}

		// Token: 0x06004799 RID: 18329 RVA: 0x000C4F40 File Offset: 0x000C3140
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static WaitSyncStatus ClientWaitSync(IntPtr sync, All flags, ulong timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[49]);
		}

		// Token: 0x0600479A RID: 18330 RVA: 0x000C4F54 File Offset: 0x000C3154
		[CLSCompliant(false)]
		public static WaitSyncStatus ClientWaitSync(IntPtr sync, ClientWaitSyncFlags flags, long timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[49]);
		}

		// Token: 0x0600479B RID: 18331 RVA: 0x000C4F68 File Offset: 0x000C3168
		[CLSCompliant(false)]
		public static WaitSyncStatus ClientWaitSync(IntPtr sync, ClientWaitSyncFlags flags, ulong timeout)
		{
			return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[49]);
		}

		// Token: 0x0600479C RID: 18332 RVA: 0x000C4F7C File Offset: 0x000C317C
		public static void ColorMask(bool red, bool green, bool blue, bool alpha)
		{
			calli(System.Void(System.Boolean,System.Boolean,System.Boolean,System.Boolean), red, green, blue, alpha, GL.EntryPoints[51]);
		}

		// Token: 0x0600479D RID: 18333 RVA: 0x000C4F90 File Offset: 0x000C3190
		[CLSCompliant(false)]
		public static void CompileShader(int shader)
		{
			calli(System.Void(System.UInt32), shader, GL.EntryPoints[53]);
		}

		// Token: 0x0600479E RID: 18334 RVA: 0x000C4FA0 File Offset: 0x000C31A0
		[CLSCompliant(false)]
		public static void CompileShader(uint shader)
		{
			calli(System.Void(System.UInt32), shader, GL.EntryPoints[53]);
		}

		// Token: 0x0600479F RID: 18335 RVA: 0x000C4FB0 File Offset: 0x000C31B0
		[Obsolete("Use strongly-typed overload instead")]
		public static void CompressedTexImage2D(All target, int level, All internalformat, int width, int height, int border, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, data, GL.EntryPoints[54]);
		}

		// Token: 0x060047A0 RID: 18336 RVA: 0x000C4FD8 File Offset: 0x000C31D8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void CompressedTexImage2D<T7>(All target, int level, All internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[] data) where T7 : struct
		{
			fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[54]);
			}
		}

		// Token: 0x060047A1 RID: 18337 RVA: 0x000C5018 File Offset: 0x000C3218
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void CompressedTexImage2D<T7>(All target, int level, All internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[,] data) where T7 : struct
		{
			fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[54]);
			}
		}

		// Token: 0x060047A2 RID: 18338 RVA: 0x000C505C File Offset: 0x000C325C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void CompressedTexImage2D<T7>(All target, int level, All internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[,,] data) where T7 : struct
		{
			fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[54]);
			}
		}

		// Token: 0x060047A3 RID: 18339 RVA: 0x000C50A0 File Offset: 0x000C32A0
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void CompressedTexImage2D<T7>(All target, int level, All internalformat, int width, int height, int border, int imageSize, [In] [Out] ref T7 data) where T7 : struct
		{
			fixed (T7* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[54]);
			}
		}

		// Token: 0x060047A4 RID: 18340 RVA: 0x000C50CC File Offset: 0x000C32CC
		public static void CompressedTexImage2D(TextureTarget2d target, int level, CompressedInternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, data, GL.EntryPoints[54]);
		}

		// Token: 0x060047A5 RID: 18341 RVA: 0x000C50F4 File Offset: 0x000C32F4
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage2D<T7>(TextureTarget2d target, int level, CompressedInternalFormat internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[] data) where T7 : struct
		{
			fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[54]);
			}
		}

		// Token: 0x060047A6 RID: 18342 RVA: 0x000C5134 File Offset: 0x000C3334
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage2D<T7>(TextureTarget2d target, int level, CompressedInternalFormat internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[,] data) where T7 : struct
		{
			fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[54]);
			}
		}

		// Token: 0x060047A7 RID: 18343 RVA: 0x000C5178 File Offset: 0x000C3378
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage2D<T7>(TextureTarget2d target, int level, CompressedInternalFormat internalformat, int width, int height, int border, int imageSize, [In] [Out] T7[,,] data) where T7 : struct
		{
			fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[54]);
			}
		}

		// Token: 0x060047A8 RID: 18344 RVA: 0x000C51BC File Offset: 0x000C33BC
		public unsafe static void CompressedTexImage2D<T7>(TextureTarget2d target, int level, CompressedInternalFormat internalformat, int width, int height, int border, int imageSize, [In] [Out] ref T7 data) where T7 : struct
		{
			fixed (T7* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, imageSize, ptr, GL.EntryPoints[54]);
			}
		}

		// Token: 0x060047A9 RID: 18345 RVA: 0x000C51E8 File Offset: 0x000C33E8
		[Obsolete("Use strongly-typed overload instead")]
		public static void CompressedTexImage3D(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, data, GL.EntryPoints[55]);
		}

		// Token: 0x060047AA RID: 18346 RVA: 0x000C5210 File Offset: 0x000C3410
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void CompressedTexImage3D<T8>(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[55]);
			}
		}

		// Token: 0x060047AB RID: 18347 RVA: 0x000C5250 File Offset: 0x000C3450
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage3D<T8>(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[,] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[55]);
			}
		}

		// Token: 0x060047AC RID: 18348 RVA: 0x000C5294 File Offset: 0x000C3494
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void CompressedTexImage3D<T8>(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[,,] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[55]);
			}
		}

		// Token: 0x060047AD RID: 18349 RVA: 0x000C52D8 File Offset: 0x000C34D8
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void CompressedTexImage3D<T8>(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] ref T8 data) where T8 : struct
		{
			fixed (T8* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[55]);
			}
		}

		// Token: 0x060047AE RID: 18350 RVA: 0x000C5304 File Offset: 0x000C3504
		public static void CompressedTexImage3D(TextureTarget3d target, int level, CompressedInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, data, GL.EntryPoints[55]);
		}

		// Token: 0x060047AF RID: 18351 RVA: 0x000C532C File Offset: 0x000C352C
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage3D<T8>(TextureTarget3d target, int level, CompressedInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[55]);
			}
		}

		// Token: 0x060047B0 RID: 18352 RVA: 0x000C536C File Offset: 0x000C356C
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage3D<T8>(TextureTarget3d target, int level, CompressedInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[,] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[55]);
			}
		}

		// Token: 0x060047B1 RID: 18353 RVA: 0x000C53B0 File Offset: 0x000C35B0
		[CLSCompliant(false)]
		public unsafe static void CompressedTexImage3D<T8>(TextureTarget3d target, int level, CompressedInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[,,] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[55]);
			}
		}

		// Token: 0x060047B2 RID: 18354 RVA: 0x000C53F4 File Offset: 0x000C35F4
		public unsafe static void CompressedTexImage3D<T8>(TextureTarget3d target, int level, CompressedInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] ref T8 data) where T8 : struct
		{
			fixed (T8* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[55]);
			}
		}

		// Token: 0x060047B3 RID: 18355 RVA: 0x000C5420 File Offset: 0x000C3620
		[Obsolete("Use strongly-typed overload instead")]
		public static void CompressedTexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, data, GL.EntryPoints[57]);
		}

		// Token: 0x060047B4 RID: 18356 RVA: 0x000C5448 File Offset: 0x000C3648
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, [In] [Out] T8[] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[57]);
			}
		}

		// Token: 0x060047B5 RID: 18357 RVA: 0x000C5488 File Offset: 0x000C3688
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void CompressedTexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, [In] [Out] T8[,] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[57]);
			}
		}

		// Token: 0x060047B6 RID: 18358 RVA: 0x000C54CC File Offset: 0x000C36CC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, [In] [Out] T8[,,] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[57]);
			}
		}

		// Token: 0x060047B7 RID: 18359 RVA: 0x000C5510 File Offset: 0x000C3710
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void CompressedTexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, [In] [Out] ref T8 data) where T8 : struct
		{
			fixed (T8* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[57]);
			}
		}

		// Token: 0x060047B8 RID: 18360 RVA: 0x000C553C File Offset: 0x000C373C
		public static void CompressedTexSubImage2D(TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, data, GL.EntryPoints[57]);
		}

		// Token: 0x060047B9 RID: 18361 RVA: 0x000C5564 File Offset: 0x000C3764
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage2D<T8>(TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T8[] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[57]);
			}
		}

		// Token: 0x060047BA RID: 18362 RVA: 0x000C55A4 File Offset: 0x000C37A4
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage2D<T8>(TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T8[,] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[57]);
			}
		}

		// Token: 0x060047BB RID: 18363 RVA: 0x000C55E8 File Offset: 0x000C37E8
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage2D<T8>(TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] T8[,,] data) where T8 : struct
		{
			fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[57]);
			}
		}

		// Token: 0x060047BC RID: 18364 RVA: 0x000C562C File Offset: 0x000C382C
		public unsafe static void CompressedTexSubImage2D<T8>(TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In] [Out] ref T8 data) where T8 : struct
		{
			fixed (T8* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, imageSize, ptr, GL.EntryPoints[57]);
			}
		}

		// Token: 0x060047BD RID: 18365 RVA: 0x000C5658 File Offset: 0x000C3858
		[Obsolete("Use strongly-typed overload instead")]
		public static void CompressedTexSubImage3D(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data, GL.EntryPoints[58]);
		}

		// Token: 0x060047BE RID: 18366 RVA: 0x000C5684 File Offset: 0x000C3884
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void CompressedTexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, [In] [Out] T10[] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[58]);
			}
		}

		// Token: 0x060047BF RID: 18367 RVA: 0x000C56C8 File Offset: 0x000C38C8
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, [In] [Out] T10[,] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[58]);
			}
		}

		// Token: 0x060047C0 RID: 18368 RVA: 0x000C5710 File Offset: 0x000C3910
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, [In] [Out] T10[,,] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[58]);
			}
		}

		// Token: 0x060047C1 RID: 18369 RVA: 0x000C5758 File Offset: 0x000C3958
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void CompressedTexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, [In] [Out] ref T10 data) where T10 : struct
		{
			fixed (T10* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[58]);
			}
		}

		// Token: 0x060047C2 RID: 18370 RVA: 0x000C5788 File Offset: 0x000C3988
		public static void CompressedTexSubImage3D(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data, GL.EntryPoints[58]);
		}

		// Token: 0x060047C3 RID: 18371 RVA: 0x000C57B4 File Offset: 0x000C39B4
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T10[] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[58]);
			}
		}

		// Token: 0x060047C4 RID: 18372 RVA: 0x000C57F8 File Offset: 0x000C39F8
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T10[,] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[58]);
			}
		}

		// Token: 0x060047C5 RID: 18373 RVA: 0x000C5840 File Offset: 0x000C3A40
		[CLSCompliant(false)]
		public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] T10[,,] data) where T10 : struct
		{
			fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[58]);
			}
		}

		// Token: 0x060047C6 RID: 18374 RVA: 0x000C5888 File Offset: 0x000C3A88
		public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In] [Out] ref T10 data) where T10 : struct
		{
			fixed (T10* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[58]);
			}
		}

		// Token: 0x060047C7 RID: 18375 RVA: 0x000C58B8 File Offset: 0x000C3AB8
		[Obsolete("Use strongly-typed overload instead")]
		public static void CopyBufferSubData(All readTarget, All writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), readTarget, writeTarget, readOffset, writeOffset, size, GL.EntryPoints[60]);
		}

		// Token: 0x060047C8 RID: 18376 RVA: 0x000C58D0 File Offset: 0x000C3AD0
		public static void CopyBufferSubData(BufferTarget readTarget, BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), readTarget, writeTarget, readOffset, writeOffset, size, GL.EntryPoints[60]);
		}

		// Token: 0x060047C9 RID: 18377 RVA: 0x000C58E8 File Offset: 0x000C3AE8
		[Obsolete("Use strongly-typed overload instead")]
		public static void CopyTexImage2D(All target, int level, All internalformat, int x, int y, int width, int height, int border)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, internalformat, x, y, width, height, border, GL.EntryPoints[63]);
		}

		// Token: 0x060047CA RID: 18378 RVA: 0x000C5910 File Offset: 0x000C3B10
		public static void CopyTexImage2D(TextureTarget2d target, int level, TextureCopyComponentCount internalformat, int x, int y, int width, int height, int border)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, internalformat, x, y, width, height, border, GL.EntryPoints[63]);
		}

		// Token: 0x060047CB RID: 18379 RVA: 0x000C5938 File Offset: 0x000C3B38
		[Obsolete("Use strongly-typed overload instead")]
		public static void CopyTexSubImage2D(All target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, xoffset, yoffset, x, y, width, height, GL.EntryPoints[64]);
		}

		// Token: 0x060047CC RID: 18380 RVA: 0x000C5960 File Offset: 0x000C3B60
		public static void CopyTexSubImage2D(TextureTarget2d target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, xoffset, yoffset, x, y, width, height, GL.EntryPoints[64]);
		}

		// Token: 0x060047CD RID: 18381 RVA: 0x000C5988 File Offset: 0x000C3B88
		[Obsolete("Use strongly-typed overload instead")]
		public static void CopyTexSubImage3D(All target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, xoffset, yoffset, zoffset, x, y, width, height, GL.EntryPoints[65]);
		}

		// Token: 0x060047CE RID: 18382 RVA: 0x000C59B0 File Offset: 0x000C3BB0
		public static void CopyTexSubImage3D(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, xoffset, yoffset, zoffset, x, y, width, height, GL.EntryPoints[65]);
		}

		// Token: 0x060047CF RID: 18383 RVA: 0x000C59D8 File Offset: 0x000C3BD8
		public static int CreateProgram()
		{
			return calli(System.Int32(), GL.EntryPoints[71]);
		}

		// Token: 0x060047D0 RID: 18384 RVA: 0x000C59E8 File Offset: 0x000C3BE8
		[Obsolete("Use strongly-typed overload instead")]
		public static int CreateShader(All type)
		{
			return calli(System.Int32(System.Int32), type, GL.EntryPoints[72]);
		}

		// Token: 0x060047D1 RID: 18385 RVA: 0x000C59F8 File Offset: 0x000C3BF8
		public static int CreateShader(ShaderType type)
		{
			return calli(System.Int32(System.Int32), type, GL.EntryPoints[72]);
		}

		// Token: 0x060047D2 RID: 18386 RVA: 0x000C5A08 File Offset: 0x000C3C08
		[Obsolete("Use strongly-typed overload instead")]
		public static void CullFace(All mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[75]);
		}

		// Token: 0x060047D3 RID: 18387 RVA: 0x000C5A18 File Offset: 0x000C3C18
		public static void CullFace(CullFaceMode mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[75]);
		}

		// Token: 0x060047D4 RID: 18388 RVA: 0x000C5A28 File Offset: 0x000C3C28
		public static void DebugMessageCallback(DebugProc callback, IntPtr userParam)
		{
			calli(System.Void(OpenTK.Graphics.ES30.DebugProc,System.IntPtr), callback, userParam, GL.EntryPoints[76]);
		}

		// Token: 0x060047D5 RID: 18389 RVA: 0x000C5A3C File Offset: 0x000C3C3C
		[CLSCompliant(false)]
		public unsafe static void DebugMessageCallback<T1>(DebugProc callback, [In] [Out] T1[] userParam) where T1 : struct
		{
			fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0] : ref *null)
			{
				calli(System.Void(OpenTK.Graphics.ES30.DebugProc,System.IntPtr), callback, ptr, GL.EntryPoints[76]);
			}
		}

		// Token: 0x060047D6 RID: 18390 RVA: 0x000C5A70 File Offset: 0x000C3C70
		[CLSCompliant(false)]
		public unsafe static void DebugMessageCallback<T1>(DebugProc callback, [In] [Out] T1[,] userParam) where T1 : struct
		{
			fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0] : ref *null)
			{
				calli(System.Void(OpenTK.Graphics.ES30.DebugProc,System.IntPtr), callback, ptr, GL.EntryPoints[76]);
			}
		}

		// Token: 0x060047D7 RID: 18391 RVA: 0x000C5AA8 File Offset: 0x000C3CA8
		[CLSCompliant(false)]
		public unsafe static void DebugMessageCallback<T1>(DebugProc callback, [In] [Out] T1[,,] userParam) where T1 : struct
		{
			fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0, 0] : ref *null)
			{
				calli(System.Void(OpenTK.Graphics.ES30.DebugProc,System.IntPtr), callback, ptr, GL.EntryPoints[76]);
			}
		}

		// Token: 0x060047D8 RID: 18392 RVA: 0x000C5AE0 File Offset: 0x000C3CE0
		public unsafe static void DebugMessageCallback<T1>(DebugProc callback, [In] [Out] ref T1 userParam) where T1 : struct
		{
			fixed (T1* ptr = &userParam)
			{
				calli(System.Void(OpenTK.Graphics.ES30.DebugProc,System.IntPtr), callback, ptr, GL.EntryPoints[76]);
			}
		}

		// Token: 0x060047D9 RID: 18393 RVA: 0x000C5B00 File Offset: 0x000C3D00
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void DebugMessageControl(All source, All type, All severity, int count, int[] ids, bool enabled)
		{
			fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[78]);
			}
		}

		// Token: 0x060047DA RID: 18394 RVA: 0x000C5B3C File Offset: 0x000C3D3C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void DebugMessageControl(All source, All type, All severity, int count, ref int ids, bool enabled)
		{
			fixed (int* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[78]);
			}
		}

		// Token: 0x060047DB RID: 18395 RVA: 0x000C5B64 File Offset: 0x000C3D64
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void DebugMessageControl(All source, All type, All severity, int count, int* ids, bool enabled)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[78]);
		}

		// Token: 0x060047DC RID: 18396 RVA: 0x000C5B7C File Offset: 0x000C3D7C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(All source, All type, All severity, int count, uint[] ids, bool enabled)
		{
			fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[78]);
			}
		}

		// Token: 0x060047DD RID: 18397 RVA: 0x000C5BB8 File Offset: 0x000C3DB8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void DebugMessageControl(All source, All type, All severity, int count, ref uint ids, bool enabled)
		{
			fixed (uint* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[78]);
			}
		}

		// Token: 0x060047DE RID: 18398 RVA: 0x000C5BE0 File Offset: 0x000C3DE0
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(All source, All type, All severity, int count, uint* ids, bool enabled)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[78]);
		}

		// Token: 0x060047DF RID: 18399 RVA: 0x000C5BF8 File Offset: 0x000C3DF8
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, int[] ids, bool enabled)
		{
			fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[78]);
			}
		}

		// Token: 0x060047E0 RID: 18400 RVA: 0x000C5C34 File Offset: 0x000C3E34
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, ref int ids, bool enabled)
		{
			fixed (int* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[78]);
			}
		}

		// Token: 0x060047E1 RID: 18401 RVA: 0x000C5C5C File Offset: 0x000C3E5C
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, int* ids, bool enabled)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[78]);
		}

		// Token: 0x060047E2 RID: 18402 RVA: 0x000C5C74 File Offset: 0x000C3E74
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, uint[] ids, bool enabled)
		{
			fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[78]);
			}
		}

		// Token: 0x060047E3 RID: 18403 RVA: 0x000C5CB0 File Offset: 0x000C3EB0
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, ref uint ids, bool enabled)
		{
			fixed (uint* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[78]);
			}
		}

		// Token: 0x060047E4 RID: 18404 RVA: 0x000C5CD8 File Offset: 0x000C3ED8
		[CLSCompliant(false)]
		public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, uint* ids, bool enabled)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[78]);
		}

		// Token: 0x060047E5 RID: 18405 RVA: 0x000C5CF0 File Offset: 0x000C3EF0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void DebugMessageInsert(All source, All type, int id, All severity, int length, string buf)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[80]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x060047E6 RID: 18406 RVA: 0x000C5D20 File Offset: 0x000C3F20
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void DebugMessageInsert(All source, All type, uint id, All severity, int length, string buf)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[80]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x060047E7 RID: 18407 RVA: 0x000C5D50 File Offset: 0x000C3F50
		[CLSCompliant(false)]
		public static void DebugMessageInsert(DebugSourceExternal source, DebugType type, int id, DebugSeverity severity, int length, string buf)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[80]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x060047E8 RID: 18408 RVA: 0x000C5D80 File Offset: 0x000C3F80
		[CLSCompliant(false)]
		public static void DebugMessageInsert(DebugSourceExternal source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[80]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x060047E9 RID: 18409 RVA: 0x000C5DB0 File Offset: 0x000C3FB0
		[CLSCompliant(false)]
		public static void DeleteBuffer(int buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref buffers, GL.EntryPoints[82]);
		}

		// Token: 0x060047EA RID: 18410 RVA: 0x000C5DC4 File Offset: 0x000C3FC4
		[CLSCompliant(false)]
		public static void DeleteBuffer(uint buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref buffers, GL.EntryPoints[82]);
		}

		// Token: 0x060047EB RID: 18411 RVA: 0x000C5DD8 File Offset: 0x000C3FD8
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, int[] buffers)
		{
			fixed (int* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[82]);
			}
		}

		// Token: 0x060047EC RID: 18412 RVA: 0x000C5E0C File Offset: 0x000C400C
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, ref int buffers)
		{
			fixed (int* ptr = &buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[82]);
			}
		}

		// Token: 0x060047ED RID: 18413 RVA: 0x000C5E2C File Offset: 0x000C402C
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, int* buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, buffers, GL.EntryPoints[82]);
		}

		// Token: 0x060047EE RID: 18414 RVA: 0x000C5E40 File Offset: 0x000C4040
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, uint[] buffers)
		{
			fixed (uint* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[82]);
			}
		}

		// Token: 0x060047EF RID: 18415 RVA: 0x000C5E74 File Offset: 0x000C4074
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, ref uint buffers)
		{
			fixed (uint* ptr = &buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[82]);
			}
		}

		// Token: 0x060047F0 RID: 18416 RVA: 0x000C5E94 File Offset: 0x000C4094
		[CLSCompliant(false)]
		public unsafe static void DeleteBuffers(int n, uint* buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, buffers, GL.EntryPoints[82]);
		}

		// Token: 0x060047F1 RID: 18417 RVA: 0x000C5EA8 File Offset: 0x000C40A8
		[CLSCompliant(false)]
		public static void DeleteFramebuffer(int framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref framebuffers, GL.EntryPoints[84]);
		}

		// Token: 0x060047F2 RID: 18418 RVA: 0x000C5EBC File Offset: 0x000C40BC
		[CLSCompliant(false)]
		public static void DeleteFramebuffer(uint framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref framebuffers, GL.EntryPoints[84]);
		}

		// Token: 0x060047F3 RID: 18419 RVA: 0x000C5ED0 File Offset: 0x000C40D0
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, int[] framebuffers)
		{
			fixed (int* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[84]);
			}
		}

		// Token: 0x060047F4 RID: 18420 RVA: 0x000C5F04 File Offset: 0x000C4104
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, ref int framebuffers)
		{
			fixed (int* ptr = &framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[84]);
			}
		}

		// Token: 0x060047F5 RID: 18421 RVA: 0x000C5F24 File Offset: 0x000C4124
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, int* framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, framebuffers, GL.EntryPoints[84]);
		}

		// Token: 0x060047F6 RID: 18422 RVA: 0x000C5F38 File Offset: 0x000C4138
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, uint[] framebuffers)
		{
			fixed (uint* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[84]);
			}
		}

		// Token: 0x060047F7 RID: 18423 RVA: 0x000C5F6C File Offset: 0x000C416C
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, ref uint framebuffers)
		{
			fixed (uint* ptr = &framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[84]);
			}
		}

		// Token: 0x060047F8 RID: 18424 RVA: 0x000C5F8C File Offset: 0x000C418C
		[CLSCompliant(false)]
		public unsafe static void DeleteFramebuffers(int n, uint* framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, framebuffers, GL.EntryPoints[84]);
		}

		// Token: 0x060047F9 RID: 18425 RVA: 0x000C5FA0 File Offset: 0x000C41A0
		[CLSCompliant(false)]
		public static void DeleteProgram(int program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[87]);
		}

		// Token: 0x060047FA RID: 18426 RVA: 0x000C5FB0 File Offset: 0x000C41B0
		[CLSCompliant(false)]
		public static void DeleteProgram(uint program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[87]);
		}

		// Token: 0x060047FB RID: 18427 RVA: 0x000C5FC0 File Offset: 0x000C41C0
		[CLSCompliant(false)]
		public static void DeleteQuery(int ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[89]);
		}

		// Token: 0x060047FC RID: 18428 RVA: 0x000C5FD4 File Offset: 0x000C41D4
		[CLSCompliant(false)]
		public static void DeleteQuery(uint ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[89]);
		}

		// Token: 0x060047FD RID: 18429 RVA: 0x000C5FE8 File Offset: 0x000C41E8
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, int[] ids)
		{
			fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[89]);
			}
		}

		// Token: 0x060047FE RID: 18430 RVA: 0x000C601C File Offset: 0x000C421C
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, ref int ids)
		{
			fixed (int* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[89]);
			}
		}

		// Token: 0x060047FF RID: 18431 RVA: 0x000C603C File Offset: 0x000C423C
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, int* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[89]);
		}

		// Token: 0x06004800 RID: 18432 RVA: 0x000C6050 File Offset: 0x000C4250
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, uint[] ids)
		{
			fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[89]);
			}
		}

		// Token: 0x06004801 RID: 18433 RVA: 0x000C6084 File Offset: 0x000C4284
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, ref uint ids)
		{
			fixed (uint* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[89]);
			}
		}

		// Token: 0x06004802 RID: 18434 RVA: 0x000C60A4 File Offset: 0x000C42A4
		[CLSCompliant(false)]
		public unsafe static void DeleteQueries(int n, uint* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[89]);
		}

		// Token: 0x06004803 RID: 18435 RVA: 0x000C60B8 File Offset: 0x000C42B8
		[CLSCompliant(false)]
		public static void DeleteRenderbuffer(int renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref renderbuffers, GL.EntryPoints[91]);
		}

		// Token: 0x06004804 RID: 18436 RVA: 0x000C60CC File Offset: 0x000C42CC
		[CLSCompliant(false)]
		public static void DeleteRenderbuffer(uint renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref renderbuffers, GL.EntryPoints[91]);
		}

		// Token: 0x06004805 RID: 18437 RVA: 0x000C60E0 File Offset: 0x000C42E0
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, int[] renderbuffers)
		{
			fixed (int* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[91]);
			}
		}

		// Token: 0x06004806 RID: 18438 RVA: 0x000C6114 File Offset: 0x000C4314
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, ref int renderbuffers)
		{
			fixed (int* ptr = &renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[91]);
			}
		}

		// Token: 0x06004807 RID: 18439 RVA: 0x000C6134 File Offset: 0x000C4334
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, int* renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, renderbuffers, GL.EntryPoints[91]);
		}

		// Token: 0x06004808 RID: 18440 RVA: 0x000C6148 File Offset: 0x000C4348
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, uint[] renderbuffers)
		{
			fixed (uint* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[91]);
			}
		}

		// Token: 0x06004809 RID: 18441 RVA: 0x000C617C File Offset: 0x000C437C
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, ref uint renderbuffers)
		{
			fixed (uint* ptr = &renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[91]);
			}
		}

		// Token: 0x0600480A RID: 18442 RVA: 0x000C619C File Offset: 0x000C439C
		[CLSCompliant(false)]
		public unsafe static void DeleteRenderbuffers(int n, uint* renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, renderbuffers, GL.EntryPoints[91]);
		}

		// Token: 0x0600480B RID: 18443 RVA: 0x000C61B0 File Offset: 0x000C43B0
		[CLSCompliant(false)]
		public static void DeleteSampler(int samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref samplers, GL.EntryPoints[92]);
		}

		// Token: 0x0600480C RID: 18444 RVA: 0x000C61C4 File Offset: 0x000C43C4
		[CLSCompliant(false)]
		public static void DeleteSampler(uint samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref samplers, GL.EntryPoints[92]);
		}

		// Token: 0x0600480D RID: 18445 RVA: 0x000C61D8 File Offset: 0x000C43D8
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, int[] samplers)
		{
			fixed (int* ptr = ref (samplers != null && samplers.Length != 0) ? ref samplers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[92]);
			}
		}

		// Token: 0x0600480E RID: 18446 RVA: 0x000C620C File Offset: 0x000C440C
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, ref int samplers)
		{
			fixed (int* ptr = &samplers)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[92]);
			}
		}

		// Token: 0x0600480F RID: 18447 RVA: 0x000C622C File Offset: 0x000C442C
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, int* samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), count, samplers, GL.EntryPoints[92]);
		}

		// Token: 0x06004810 RID: 18448 RVA: 0x000C6240 File Offset: 0x000C4440
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, uint[] samplers)
		{
			fixed (uint* ptr = ref (samplers != null && samplers.Length != 0) ? ref samplers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[92]);
			}
		}

		// Token: 0x06004811 RID: 18449 RVA: 0x000C6274 File Offset: 0x000C4474
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, ref uint samplers)
		{
			fixed (uint* ptr = &samplers)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[92]);
			}
		}

		// Token: 0x06004812 RID: 18450 RVA: 0x000C6294 File Offset: 0x000C4494
		[CLSCompliant(false)]
		public unsafe static void DeleteSamplers(int count, uint* samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), count, samplers, GL.EntryPoints[92]);
		}

		// Token: 0x06004813 RID: 18451 RVA: 0x000C62A8 File Offset: 0x000C44A8
		[CLSCompliant(false)]
		public static void DeleteShader(int shader)
		{
			calli(System.Void(System.UInt32), shader, GL.EntryPoints[93]);
		}

		// Token: 0x06004814 RID: 18452 RVA: 0x000C62B8 File Offset: 0x000C44B8
		[CLSCompliant(false)]
		public static void DeleteShader(uint shader)
		{
			calli(System.Void(System.UInt32), shader, GL.EntryPoints[93]);
		}

		// Token: 0x06004815 RID: 18453 RVA: 0x000C62C8 File Offset: 0x000C44C8
		public static void DeleteSync(IntPtr sync)
		{
			calli(System.Void(System.IntPtr), sync, GL.EntryPoints[94]);
		}

		// Token: 0x06004816 RID: 18454 RVA: 0x000C62D8 File Offset: 0x000C44D8
		[CLSCompliant(false)]
		public static void DeleteTexture(int textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref textures, GL.EntryPoints[96]);
		}

		// Token: 0x06004817 RID: 18455 RVA: 0x000C62EC File Offset: 0x000C44EC
		[CLSCompliant(false)]
		public static void DeleteTexture(uint textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref textures, GL.EntryPoints[96]);
		}

		// Token: 0x06004818 RID: 18456 RVA: 0x000C6300 File Offset: 0x000C4500
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, int[] textures)
		{
			fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[96]);
			}
		}

		// Token: 0x06004819 RID: 18457 RVA: 0x000C6334 File Offset: 0x000C4534
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, ref int textures)
		{
			fixed (int* ptr = &textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[96]);
			}
		}

		// Token: 0x0600481A RID: 18458 RVA: 0x000C6354 File Offset: 0x000C4554
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, int* textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, textures, GL.EntryPoints[96]);
		}

		// Token: 0x0600481B RID: 18459 RVA: 0x000C6368 File Offset: 0x000C4568
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, uint[] textures)
		{
			fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[96]);
			}
		}

		// Token: 0x0600481C RID: 18460 RVA: 0x000C639C File Offset: 0x000C459C
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, ref uint textures)
		{
			fixed (uint* ptr = &textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[96]);
			}
		}

		// Token: 0x0600481D RID: 18461 RVA: 0x000C63BC File Offset: 0x000C45BC
		[CLSCompliant(false)]
		public unsafe static void DeleteTextures(int n, uint* textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, textures, GL.EntryPoints[96]);
		}

		// Token: 0x0600481E RID: 18462 RVA: 0x000C63D0 File Offset: 0x000C45D0
		[CLSCompliant(false)]
		public static void DeleteTransformFeedback(int ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[97]);
		}

		// Token: 0x0600481F RID: 18463 RVA: 0x000C63E4 File Offset: 0x000C45E4
		[CLSCompliant(false)]
		public static void DeleteTransformFeedback(uint ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[97]);
		}

		// Token: 0x06004820 RID: 18464 RVA: 0x000C63F8 File Offset: 0x000C45F8
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, int[] ids)
		{
			fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[97]);
			}
		}

		// Token: 0x06004821 RID: 18465 RVA: 0x000C642C File Offset: 0x000C462C
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, ref int ids)
		{
			fixed (int* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[97]);
			}
		}

		// Token: 0x06004822 RID: 18466 RVA: 0x000C644C File Offset: 0x000C464C
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, int* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[97]);
		}

		// Token: 0x06004823 RID: 18467 RVA: 0x000C6460 File Offset: 0x000C4660
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, uint[] ids)
		{
			fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[97]);
			}
		}

		// Token: 0x06004824 RID: 18468 RVA: 0x000C6494 File Offset: 0x000C4694
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, ref uint ids)
		{
			fixed (uint* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[97]);
			}
		}

		// Token: 0x06004825 RID: 18469 RVA: 0x000C64B4 File Offset: 0x000C46B4
		[CLSCompliant(false)]
		public unsafe static void DeleteTransformFeedbacks(int n, uint* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[97]);
		}

		// Token: 0x06004826 RID: 18470 RVA: 0x000C64C8 File Offset: 0x000C46C8
		[CLSCompliant(false)]
		public static void DeleteVertexArray(int arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref arrays, GL.EntryPoints[98]);
		}

		// Token: 0x06004827 RID: 18471 RVA: 0x000C64DC File Offset: 0x000C46DC
		[CLSCompliant(false)]
		public static void DeleteVertexArray(uint arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), 1, ref arrays, GL.EntryPoints[98]);
		}

		// Token: 0x06004828 RID: 18472 RVA: 0x000C64F0 File Offset: 0x000C46F0
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, int[] arrays)
		{
			fixed (int* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[98]);
			}
		}

		// Token: 0x06004829 RID: 18473 RVA: 0x000C6524 File Offset: 0x000C4724
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, ref int arrays)
		{
			fixed (int* ptr = &arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[98]);
			}
		}

		// Token: 0x0600482A RID: 18474 RVA: 0x000C6544 File Offset: 0x000C4744
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, int* arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[98]);
		}

		// Token: 0x0600482B RID: 18475 RVA: 0x000C6558 File Offset: 0x000C4758
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, uint[] arrays)
		{
			fixed (uint* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[98]);
			}
		}

		// Token: 0x0600482C RID: 18476 RVA: 0x000C658C File Offset: 0x000C478C
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, ref uint arrays)
		{
			fixed (uint* ptr = &arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[98]);
			}
		}

		// Token: 0x0600482D RID: 18477 RVA: 0x000C65AC File Offset: 0x000C47AC
		[CLSCompliant(false)]
		public unsafe static void DeleteVertexArrays(int n, uint* arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[98]);
		}

		// Token: 0x0600482E RID: 18478 RVA: 0x000C65C0 File Offset: 0x000C47C0
		[Obsolete("Use strongly-typed overload instead")]
		public static void DepthFunc(All func)
		{
			calli(System.Void(System.Int32), func, GL.EntryPoints[100]);
		}

		// Token: 0x0600482F RID: 18479 RVA: 0x000C65D0 File Offset: 0x000C47D0
		public static void DepthFunc(DepthFunction func)
		{
			calli(System.Void(System.Int32), func, GL.EntryPoints[100]);
		}

		// Token: 0x06004830 RID: 18480 RVA: 0x000C65E0 File Offset: 0x000C47E0
		public static void DepthMask(bool flag)
		{
			calli(System.Void(System.Boolean), flag, GL.EntryPoints[101]);
		}

		// Token: 0x06004831 RID: 18481 RVA: 0x000C65F0 File Offset: 0x000C47F0
		public static void DepthRange(float n, float f)
		{
			calli(System.Void(System.Single,System.Single), n, f, GL.EntryPoints[102]);
		}

		// Token: 0x06004832 RID: 18482 RVA: 0x000C6604 File Offset: 0x000C4804
		[CLSCompliant(false)]
		public static void DetachShader(int program, int shader)
		{
			calli(System.Void(System.UInt32,System.UInt32), program, shader, GL.EntryPoints[103]);
		}

		// Token: 0x06004833 RID: 18483 RVA: 0x000C6618 File Offset: 0x000C4818
		[CLSCompliant(false)]
		public static void DetachShader(uint program, uint shader)
		{
			calli(System.Void(System.UInt32,System.UInt32), program, shader, GL.EntryPoints[103]);
		}

		// Token: 0x06004834 RID: 18484 RVA: 0x000C662C File Offset: 0x000C482C
		[Obsolete("Use strongly-typed overload instead")]
		public static void Disable(All cap)
		{
			calli(System.Void(System.Int32), cap, GL.EntryPoints[104]);
		}

		// Token: 0x06004835 RID: 18485 RVA: 0x000C663C File Offset: 0x000C483C
		public static void Disable(EnableCap cap)
		{
			calli(System.Void(System.Int32), cap, GL.EntryPoints[104]);
		}

		// Token: 0x06004836 RID: 18486 RVA: 0x000C664C File Offset: 0x000C484C
		[CLSCompliant(false)]
		public static void DisableVertexAttribArray(int index)
		{
			calli(System.Void(System.UInt32), index, GL.EntryPoints[107]);
		}

		// Token: 0x06004837 RID: 18487 RVA: 0x000C665C File Offset: 0x000C485C
		[CLSCompliant(false)]
		public static void DisableVertexAttribArray(uint index)
		{
			calli(System.Void(System.UInt32), index, GL.EntryPoints[107]);
		}

		// Token: 0x06004838 RID: 18488 RVA: 0x000C666C File Offset: 0x000C486C
		[Obsolete("Use strongly-typed overload instead")]
		public static void DrawArrays(All mode, int first, int count)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), mode, first, count, GL.EntryPoints[109]);
		}

		// Token: 0x06004839 RID: 18489 RVA: 0x000C6680 File Offset: 0x000C4880
		public static void DrawArrays(PrimitiveType mode, int first, int count)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), mode, first, count, GL.EntryPoints[109]);
		}

		// Token: 0x0600483A RID: 18490 RVA: 0x000C6694 File Offset: 0x000C4894
		[Obsolete("Use strongly-typed overload instead")]
		public static void DrawArraysInstanced(All mode, int first, int count, int instancecount)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, first, count, instancecount, GL.EntryPoints[110]);
		}

		// Token: 0x0600483B RID: 18491 RVA: 0x000C66A8 File Offset: 0x000C48A8
		public static void DrawArraysInstanced(PrimitiveType mode, int first, int count, int instancecount)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, first, count, instancecount, GL.EntryPoints[110]);
		}

		// Token: 0x0600483C RID: 18492 RVA: 0x000C66BC File Offset: 0x000C48BC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void DrawBuffers(int n, All[] bufs)
		{
			fixed (All* ptr = ref (bufs != null && bufs.Length != 0) ? ref bufs[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[114]);
			}
		}

		// Token: 0x0600483D RID: 18493 RVA: 0x000C66F0 File Offset: 0x000C48F0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void DrawBuffers(int n, ref All bufs)
		{
			fixed (All* ptr = &bufs)
			{
				calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[114]);
			}
		}

		// Token: 0x0600483E RID: 18494 RVA: 0x000C6710 File Offset: 0x000C4910
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawBuffers(int n, All* bufs)
		{
			calli(System.Void(System.Int32,System.Int32*), n, bufs, GL.EntryPoints[114]);
		}

		// Token: 0x0600483F RID: 18495 RVA: 0x000C6724 File Offset: 0x000C4924
		[CLSCompliant(false)]
		public unsafe static void DrawBuffers(int n, DrawBufferMode[] bufs)
		{
			fixed (DrawBufferMode* ptr = ref (bufs != null && bufs.Length != 0) ? ref bufs[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[114]);
			}
		}

		// Token: 0x06004840 RID: 18496 RVA: 0x000C6758 File Offset: 0x000C4958
		[CLSCompliant(false)]
		public unsafe static void DrawBuffers(int n, ref DrawBufferMode bufs)
		{
			fixed (DrawBufferMode* ptr = &bufs)
			{
				calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[114]);
			}
		}

		// Token: 0x06004841 RID: 18497 RVA: 0x000C6778 File Offset: 0x000C4978
		[CLSCompliant(false)]
		public unsafe static void DrawBuffers(int n, DrawBufferMode* bufs)
		{
			calli(System.Void(System.Int32,System.Int32*), n, bufs, GL.EntryPoints[114]);
		}

		// Token: 0x06004842 RID: 18498 RVA: 0x000C678C File Offset: 0x000C498C
		[Obsolete("Use strongly-typed overload instead")]
		public static void DrawElements(All mode, int count, All type, IntPtr indices)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, indices, GL.EntryPoints[118]);
		}

		// Token: 0x06004843 RID: 18499 RVA: 0x000C67A0 File Offset: 0x000C49A0
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawElements<T3>(All mode, int count, All type, [In] [Out] T3[] indices) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[118]);
			}
		}

		// Token: 0x06004844 RID: 18500 RVA: 0x000C67D4 File Offset: 0x000C49D4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawElements<T3>(All mode, int count, All type, [In] [Out] T3[,] indices) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[118]);
			}
		}

		// Token: 0x06004845 RID: 18501 RVA: 0x000C680C File Offset: 0x000C4A0C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawElements<T3>(All mode, int count, All type, [In] [Out] T3[,,] indices) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[118]);
			}
		}

		// Token: 0x06004846 RID: 18502 RVA: 0x000C6844 File Offset: 0x000C4A44
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void DrawElements<T3>(All mode, int count, All type, [In] [Out] ref T3 indices) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[118]);
			}
		}

		// Token: 0x06004847 RID: 18503 RVA: 0x000C6868 File Offset: 0x000C4A68
		public static void DrawElements(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, indices, GL.EntryPoints[118]);
		}

		// Token: 0x06004848 RID: 18504 RVA: 0x000C687C File Offset: 0x000C4A7C
		[CLSCompliant(false)]
		public unsafe static void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[118]);
			}
		}

		// Token: 0x06004849 RID: 18505 RVA: 0x000C68B0 File Offset: 0x000C4AB0
		[CLSCompliant(false)]
		public unsafe static void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[118]);
			}
		}

		// Token: 0x0600484A RID: 18506 RVA: 0x000C68E8 File Offset: 0x000C4AE8
		[CLSCompliant(false)]
		public unsafe static void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[118]);
			}
		}

		// Token: 0x0600484B RID: 18507 RVA: 0x000C6920 File Offset: 0x000C4B20
		public unsafe static void DrawElements<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr), mode, count, type, ptr, GL.EntryPoints[118]);
			}
		}

		// Token: 0x0600484C RID: 18508 RVA: 0x000C6944 File Offset: 0x000C4B44
		[Obsolete("Use strongly-typed overload instead")]
		public static void DrawElementsInstanced(All mode, int count, All type, IntPtr indices, int instancecount)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, instancecount, GL.EntryPoints[119]);
		}

		// Token: 0x0600484D RID: 18509 RVA: 0x000C695C File Offset: 0x000C4B5C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstanced<T3>(All mode, int count, All type, [In] [Out] T3[] indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[119]);
			}
		}

		// Token: 0x0600484E RID: 18510 RVA: 0x000C6994 File Offset: 0x000C4B94
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void DrawElementsInstanced<T3>(All mode, int count, All type, [In] [Out] T3[,] indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[119]);
			}
		}

		// Token: 0x0600484F RID: 18511 RVA: 0x000C69D0 File Offset: 0x000C4BD0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void DrawElementsInstanced<T3>(All mode, int count, All type, [In] [Out] T3[,,] indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[119]);
			}
		}

		// Token: 0x06004850 RID: 18512 RVA: 0x000C6A0C File Offset: 0x000C4C0C
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void DrawElementsInstanced<T3>(All mode, int count, All type, [In] [Out] ref T3 indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[119]);
			}
		}

		// Token: 0x06004851 RID: 18513 RVA: 0x000C6A30 File Offset: 0x000C4C30
		public static void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, instancecount, GL.EntryPoints[119]);
		}

		// Token: 0x06004852 RID: 18514 RVA: 0x000C6A48 File Offset: 0x000C4C48
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[119]);
			}
		}

		// Token: 0x06004853 RID: 18515 RVA: 0x000C6A80 File Offset: 0x000C4C80
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[119]);
			}
		}

		// Token: 0x06004854 RID: 18516 RVA: 0x000C6ABC File Offset: 0x000C4CBC
		[CLSCompliant(false)]
		public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[119]);
			}
		}

		// Token: 0x06004855 RID: 18517 RVA: 0x000C6AF8 File Offset: 0x000C4CF8
		public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int instancecount) where T3 : struct
		{
			fixed (T3* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, instancecount, GL.EntryPoints[119]);
			}
		}

		// Token: 0x06004856 RID: 18518 RVA: 0x000C6B1C File Offset: 0x000C4D1C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void DrawRangeElements(All mode, int start, int end, int count, All type, IntPtr indices)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, indices, GL.EntryPoints[123]);
		}

		// Token: 0x06004857 RID: 18519 RVA: 0x000C6B34 File Offset: 0x000C4D34
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(All mode, int start, int end, int count, All type, [In] [Out] T5[] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[123]);
			}
		}

		// Token: 0x06004858 RID: 18520 RVA: 0x000C6B70 File Offset: 0x000C4D70
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void DrawRangeElements<T5>(All mode, int start, int end, int count, All type, [In] [Out] T5[,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[123]);
			}
		}

		// Token: 0x06004859 RID: 18521 RVA: 0x000C6BB0 File Offset: 0x000C4DB0
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(All mode, int start, int end, int count, All type, [In] [Out] T5[,,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[123]);
			}
		}

		// Token: 0x0600485A RID: 18522 RVA: 0x000C6BF0 File Offset: 0x000C4DF0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void DrawRangeElements<T5>(All mode, int start, int end, int count, All type, [In] [Out] ref T5 indices) where T5 : struct
		{
			fixed (T5* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[123]);
			}
		}

		// Token: 0x0600485B RID: 18523 RVA: 0x000C6C18 File Offset: 0x000C4E18
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void DrawRangeElements(All mode, uint start, uint end, int count, All type, IntPtr indices)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, indices, GL.EntryPoints[123]);
		}

		// Token: 0x0600485C RID: 18524 RVA: 0x000C6C30 File Offset: 0x000C4E30
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void DrawRangeElements<T5>(All mode, uint start, uint end, int count, All type, [In] [Out] T5[] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[123]);
			}
		}

		// Token: 0x0600485D RID: 18525 RVA: 0x000C6C6C File Offset: 0x000C4E6C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(All mode, uint start, uint end, int count, All type, [In] [Out] T5[,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[123]);
			}
		}

		// Token: 0x0600485E RID: 18526 RVA: 0x000C6CAC File Offset: 0x000C4EAC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void DrawRangeElements<T5>(All mode, uint start, uint end, int count, All type, [In] [Out] T5[,,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[123]);
			}
		}

		// Token: 0x0600485F RID: 18527 RVA: 0x000C6CEC File Offset: 0x000C4EEC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(All mode, uint start, uint end, int count, All type, [In] [Out] ref T5 indices) where T5 : struct
		{
			fixed (T5* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[123]);
			}
		}

		// Token: 0x06004860 RID: 18528 RVA: 0x000C6D14 File Offset: 0x000C4F14
		[CLSCompliant(false)]
		public static void DrawRangeElements(PrimitiveType mode, int start, int end, int count, DrawElementsType type, IntPtr indices)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, indices, GL.EntryPoints[123]);
		}

		// Token: 0x06004861 RID: 18529 RVA: 0x000C6D2C File Offset: 0x000C4F2C
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[123]);
			}
		}

		// Token: 0x06004862 RID: 18530 RVA: 0x000C6D68 File Offset: 0x000C4F68
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[123]);
			}
		}

		// Token: 0x06004863 RID: 18531 RVA: 0x000C6DA8 File Offset: 0x000C4FA8
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] T5[,,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[123]);
			}
		}

		// Token: 0x06004864 RID: 18532 RVA: 0x000C6DE8 File Offset: 0x000C4FE8
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, int start, int end, int count, DrawElementsType type, [In] [Out] ref T5 indices) where T5 : struct
		{
			fixed (T5* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[123]);
			}
		}

		// Token: 0x06004865 RID: 18533 RVA: 0x000C6E10 File Offset: 0x000C5010
		[CLSCompliant(false)]
		public static void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, indices, GL.EntryPoints[123]);
		}

		// Token: 0x06004866 RID: 18534 RVA: 0x000C6E28 File Offset: 0x000C5028
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[123]);
			}
		}

		// Token: 0x06004867 RID: 18535 RVA: 0x000C6E64 File Offset: 0x000C5064
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[123]);
			}
		}

		// Token: 0x06004868 RID: 18536 RVA: 0x000C6EA4 File Offset: 0x000C50A4
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] T5[,,] indices) where T5 : struct
		{
			fixed (T5* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[123]);
			}
		}

		// Token: 0x06004869 RID: 18537 RVA: 0x000C6EE4 File Offset: 0x000C50E4
		[CLSCompliant(false)]
		public unsafe static void DrawRangeElements<T5>(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, [In] [Out] ref T5 indices) where T5 : struct
		{
			fixed (T5* ptr = &indices)
			{
				calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.IntPtr), mode, start, end, count, type, ptr, GL.EntryPoints[123]);
			}
		}

		// Token: 0x0600486A RID: 18538 RVA: 0x000C6F0C File Offset: 0x000C510C
		[Obsolete("Use strongly-typed overload instead")]
		public static void Enable(All cap)
		{
			calli(System.Void(System.Int32), cap, GL.EntryPoints[126]);
		}

		// Token: 0x0600486B RID: 18539 RVA: 0x000C6F1C File Offset: 0x000C511C
		public static void Enable(EnableCap cap)
		{
			calli(System.Void(System.Int32), cap, GL.EntryPoints[126]);
		}

		// Token: 0x0600486C RID: 18540 RVA: 0x000C6F2C File Offset: 0x000C512C
		[CLSCompliant(false)]
		public static void EnableVertexAttribArray(int index)
		{
			calli(System.Void(System.UInt32), index, GL.EntryPoints[129]);
		}

		// Token: 0x0600486D RID: 18541 RVA: 0x000C6F40 File Offset: 0x000C5140
		[CLSCompliant(false)]
		public static void EnableVertexAttribArray(uint index)
		{
			calli(System.Void(System.UInt32), index, GL.EntryPoints[129]);
		}

		// Token: 0x0600486E RID: 18542 RVA: 0x000C6F54 File Offset: 0x000C5154
		[Obsolete("Use strongly-typed overload instead")]
		public static void EndQuery(All target)
		{
			calli(System.Void(System.Int32), target, GL.EntryPoints[132]);
		}

		// Token: 0x0600486F RID: 18543 RVA: 0x000C6F68 File Offset: 0x000C5168
		public static void EndQuery(QueryTarget target)
		{
			calli(System.Void(System.Int32), target, GL.EntryPoints[132]);
		}

		// Token: 0x06004870 RID: 18544 RVA: 0x000C6F7C File Offset: 0x000C517C
		public static void EndTransformFeedback()
		{
			calli(System.Void(), GL.EntryPoints[135]);
		}

		// Token: 0x06004871 RID: 18545 RVA: 0x000C6F90 File Offset: 0x000C5190
		[Obsolete("Use strongly-typed overload instead")]
		public static IntPtr FenceSync(All condition, All flags)
		{
			return calli(System.IntPtr(System.Int32,System.Int32), condition, flags, GL.EntryPoints[148]);
		}

		// Token: 0x06004872 RID: 18546 RVA: 0x000C6FA4 File Offset: 0x000C51A4
		public static IntPtr FenceSync(SyncCondition condition, WaitSyncFlags flags)
		{
			return calli(System.IntPtr(System.Int32,System.Int32), condition, flags, GL.EntryPoints[148]);
		}

		// Token: 0x06004873 RID: 18547 RVA: 0x000C6FB8 File Offset: 0x000C51B8
		public static void Finish()
		{
			calli(System.Void(), GL.EntryPoints[150]);
		}

		// Token: 0x06004874 RID: 18548 RVA: 0x000C6FCC File Offset: 0x000C51CC
		public static void Flush()
		{
			calli(System.Void(), GL.EntryPoints[152]);
		}

		// Token: 0x06004875 RID: 18549 RVA: 0x000C6FE0 File Offset: 0x000C51E0
		[Obsolete("Use strongly-typed overload instead")]
		public static void FlushMappedBufferRange(All target, IntPtr offset, IntPtr length)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.IntPtr), target, offset, length, GL.EntryPoints[153]);
		}

		// Token: 0x06004876 RID: 18550 RVA: 0x000C6FF8 File Offset: 0x000C51F8
		public static void FlushMappedBufferRange(BufferTarget target, IntPtr offset, IntPtr length)
		{
			calli(System.Void(System.Int32,System.IntPtr,System.IntPtr), target, offset, length, GL.EntryPoints[153]);
		}

		// Token: 0x06004877 RID: 18551 RVA: 0x000C7010 File Offset: 0x000C5210
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void FramebufferRenderbuffer(All target, All attachment, All renderbuffertarget, int renderbuffer)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), target, attachment, renderbuffertarget, renderbuffer, GL.EntryPoints[155]);
		}

		// Token: 0x06004878 RID: 18552 RVA: 0x000C7028 File Offset: 0x000C5228
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void FramebufferRenderbuffer(All target, All attachment, All renderbuffertarget, uint renderbuffer)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), target, attachment, renderbuffertarget, renderbuffer, GL.EntryPoints[155]);
		}

		// Token: 0x06004879 RID: 18553 RVA: 0x000C7040 File Offset: 0x000C5240
		[CLSCompliant(false)]
		public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, int renderbuffer)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), target, attachment, renderbuffertarget, renderbuffer, GL.EntryPoints[155]);
		}

		// Token: 0x0600487A RID: 18554 RVA: 0x000C7058 File Offset: 0x000C5258
		[CLSCompliant(false)]
		public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), target, attachment, renderbuffertarget, renderbuffer, GL.EntryPoints[155]);
		}

		// Token: 0x0600487B RID: 18555 RVA: 0x000C7070 File Offset: 0x000C5270
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void FramebufferTexture2D(All target, All attachment, All textarget, int texture, int level)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, textarget, texture, level, GL.EntryPoints[156]);
		}

		// Token: 0x0600487C RID: 18556 RVA: 0x000C7088 File Offset: 0x000C5288
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void FramebufferTexture2D(All target, All attachment, All textarget, uint texture, int level)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, textarget, texture, level, GL.EntryPoints[156]);
		}

		// Token: 0x0600487D RID: 18557 RVA: 0x000C70A0 File Offset: 0x000C52A0
		[CLSCompliant(false)]
		public static void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget2d textarget, int texture, int level)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, textarget, texture, level, GL.EntryPoints[156]);
		}

		// Token: 0x0600487E RID: 18558 RVA: 0x000C70B8 File Offset: 0x000C52B8
		[CLSCompliant(false)]
		public static void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget2d textarget, uint texture, int level)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, textarget, texture, level, GL.EntryPoints[156]);
		}

		// Token: 0x0600487F RID: 18559 RVA: 0x000C70D0 File Offset: 0x000C52D0
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void FramebufferTextureLayer(All target, All attachment, int texture, int level, int layer)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, texture, level, layer, GL.EntryPoints[161]);
		}

		// Token: 0x06004880 RID: 18560 RVA: 0x000C70E8 File Offset: 0x000C52E8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void FramebufferTextureLayer(All target, All attachment, uint texture, int level, int layer)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, texture, level, layer, GL.EntryPoints[161]);
		}

		// Token: 0x06004881 RID: 18561 RVA: 0x000C7100 File Offset: 0x000C5300
		[CLSCompliant(false)]
		public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level, int layer)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, texture, level, layer, GL.EntryPoints[161]);
		}

		// Token: 0x06004882 RID: 18562 RVA: 0x000C7118 File Offset: 0x000C5318
		[CLSCompliant(false)]
		public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, texture, level, layer, GL.EntryPoints[161]);
		}

		// Token: 0x06004883 RID: 18563 RVA: 0x000C7130 File Offset: 0x000C5330
		[Obsolete("Use strongly-typed overload instead")]
		public static void FrontFace(All mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[162]);
		}

		// Token: 0x06004884 RID: 18564 RVA: 0x000C7144 File Offset: 0x000C5344
		public static void FrontFace(FrontFaceDirection mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[162]);
		}

		// Token: 0x06004885 RID: 18565 RVA: 0x000C7158 File Offset: 0x000C5358
		[CLSCompliant(false)]
		public static int GenBuffer()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[163]);
			return result;
		}

		// Token: 0x06004886 RID: 18566 RVA: 0x000C717C File Offset: 0x000C537C
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, [Out] int[] buffers)
		{
			fixed (int* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[163]);
			}
		}

		// Token: 0x06004887 RID: 18567 RVA: 0x000C71B0 File Offset: 0x000C53B0
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, out int buffers)
		{
			fixed (int* ptr = &buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[163]);
			}
		}

		// Token: 0x06004888 RID: 18568 RVA: 0x000C71D4 File Offset: 0x000C53D4
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, [Out] int* buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, buffers, GL.EntryPoints[163]);
		}

		// Token: 0x06004889 RID: 18569 RVA: 0x000C71E8 File Offset: 0x000C53E8
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, [Out] uint[] buffers)
		{
			fixed (uint* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[163]);
			}
		}

		// Token: 0x0600488A RID: 18570 RVA: 0x000C721C File Offset: 0x000C541C
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, out uint buffers)
		{
			fixed (uint* ptr = &buffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[163]);
			}
		}

		// Token: 0x0600488B RID: 18571 RVA: 0x000C7240 File Offset: 0x000C5440
		[CLSCompliant(false)]
		public unsafe static void GenBuffers(int n, [Out] uint* buffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, buffers, GL.EntryPoints[163]);
		}

		// Token: 0x0600488C RID: 18572 RVA: 0x000C7254 File Offset: 0x000C5454
		[Obsolete("Use strongly-typed overload instead")]
		public static void GenerateMipmap(All target)
		{
			calli(System.Void(System.Int32), target, GL.EntryPoints[164]);
		}

		// Token: 0x0600488D RID: 18573 RVA: 0x000C7268 File Offset: 0x000C5468
		public static void GenerateMipmap(TextureTarget target)
		{
			calli(System.Void(System.Int32), target, GL.EntryPoints[164]);
		}

		// Token: 0x0600488E RID: 18574 RVA: 0x000C727C File Offset: 0x000C547C
		[CLSCompliant(false)]
		public static int GenFramebuffer()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[166]);
			return result;
		}

		// Token: 0x0600488F RID: 18575 RVA: 0x000C72A0 File Offset: 0x000C54A0
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, [Out] int[] framebuffers)
		{
			fixed (int* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[166]);
			}
		}

		// Token: 0x06004890 RID: 18576 RVA: 0x000C72D4 File Offset: 0x000C54D4
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, out int framebuffers)
		{
			fixed (int* ptr = &framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[166]);
			}
		}

		// Token: 0x06004891 RID: 18577 RVA: 0x000C72F8 File Offset: 0x000C54F8
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, [Out] int* framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, framebuffers, GL.EntryPoints[166]);
		}

		// Token: 0x06004892 RID: 18578 RVA: 0x000C730C File Offset: 0x000C550C
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, [Out] uint[] framebuffers)
		{
			fixed (uint* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[166]);
			}
		}

		// Token: 0x06004893 RID: 18579 RVA: 0x000C7340 File Offset: 0x000C5540
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, out uint framebuffers)
		{
			fixed (uint* ptr = &framebuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[166]);
			}
		}

		// Token: 0x06004894 RID: 18580 RVA: 0x000C7364 File Offset: 0x000C5564
		[CLSCompliant(false)]
		public unsafe static void GenFramebuffers(int n, [Out] uint* framebuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, framebuffers, GL.EntryPoints[166]);
		}

		// Token: 0x06004895 RID: 18581 RVA: 0x000C7378 File Offset: 0x000C5578
		[CLSCompliant(false)]
		public static int GenQuery()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[169]);
			return result;
		}

		// Token: 0x06004896 RID: 18582 RVA: 0x000C739C File Offset: 0x000C559C
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, [Out] int[] ids)
		{
			fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[169]);
			}
		}

		// Token: 0x06004897 RID: 18583 RVA: 0x000C73D0 File Offset: 0x000C55D0
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, out int ids)
		{
			fixed (int* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[169]);
			}
		}

		// Token: 0x06004898 RID: 18584 RVA: 0x000C73F4 File Offset: 0x000C55F4
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, [Out] int* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[169]);
		}

		// Token: 0x06004899 RID: 18585 RVA: 0x000C7408 File Offset: 0x000C5608
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, [Out] uint[] ids)
		{
			fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[169]);
			}
		}

		// Token: 0x0600489A RID: 18586 RVA: 0x000C743C File Offset: 0x000C563C
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, out uint ids)
		{
			fixed (uint* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[169]);
			}
		}

		// Token: 0x0600489B RID: 18587 RVA: 0x000C7460 File Offset: 0x000C5660
		[CLSCompliant(false)]
		public unsafe static void GenQueries(int n, [Out] uint* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[169]);
		}

		// Token: 0x0600489C RID: 18588 RVA: 0x000C7474 File Offset: 0x000C5674
		[CLSCompliant(false)]
		public static int GenRenderbuffer()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[171]);
			return result;
		}

		// Token: 0x0600489D RID: 18589 RVA: 0x000C7498 File Offset: 0x000C5698
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, [Out] int[] renderbuffers)
		{
			fixed (int* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[171]);
			}
		}

		// Token: 0x0600489E RID: 18590 RVA: 0x000C74CC File Offset: 0x000C56CC
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, out int renderbuffers)
		{
			fixed (int* ptr = &renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[171]);
			}
		}

		// Token: 0x0600489F RID: 18591 RVA: 0x000C74F0 File Offset: 0x000C56F0
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, [Out] int* renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, renderbuffers, GL.EntryPoints[171]);
		}

		// Token: 0x060048A0 RID: 18592 RVA: 0x000C7504 File Offset: 0x000C5704
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, [Out] uint[] renderbuffers)
		{
			fixed (uint* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[171]);
			}
		}

		// Token: 0x060048A1 RID: 18593 RVA: 0x000C7538 File Offset: 0x000C5738
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, out uint renderbuffers)
		{
			fixed (uint* ptr = &renderbuffers)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[171]);
			}
		}

		// Token: 0x060048A2 RID: 18594 RVA: 0x000C755C File Offset: 0x000C575C
		[CLSCompliant(false)]
		public unsafe static void GenRenderbuffers(int n, [Out] uint* renderbuffers)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, renderbuffers, GL.EntryPoints[171]);
		}

		// Token: 0x060048A3 RID: 18595 RVA: 0x000C7570 File Offset: 0x000C5770
		[CLSCompliant(false)]
		public static int GenSampler()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[172]);
			return result;
		}

		// Token: 0x060048A4 RID: 18596 RVA: 0x000C7594 File Offset: 0x000C5794
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, [Out] int[] samplers)
		{
			fixed (int* ptr = ref (samplers != null && samplers.Length != 0) ? ref samplers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[172]);
			}
		}

		// Token: 0x060048A5 RID: 18597 RVA: 0x000C75C8 File Offset: 0x000C57C8
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, out int samplers)
		{
			fixed (int* ptr = &samplers)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[172]);
			}
		}

		// Token: 0x060048A6 RID: 18598 RVA: 0x000C75EC File Offset: 0x000C57EC
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, [Out] int* samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), count, samplers, GL.EntryPoints[172]);
		}

		// Token: 0x060048A7 RID: 18599 RVA: 0x000C7600 File Offset: 0x000C5800
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, [Out] uint[] samplers)
		{
			fixed (uint* ptr = ref (samplers != null && samplers.Length != 0) ? ref samplers[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[172]);
			}
		}

		// Token: 0x060048A8 RID: 18600 RVA: 0x000C7634 File Offset: 0x000C5834
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, out uint samplers)
		{
			fixed (uint* ptr = &samplers)
			{
				calli(System.Void(System.Int32,System.UInt32*), count, ptr, GL.EntryPoints[172]);
			}
		}

		// Token: 0x060048A9 RID: 18601 RVA: 0x000C7658 File Offset: 0x000C5858
		[CLSCompliant(false)]
		public unsafe static void GenSamplers(int count, [Out] uint* samplers)
		{
			calli(System.Void(System.Int32,System.UInt32*), count, samplers, GL.EntryPoints[172]);
		}

		// Token: 0x060048AA RID: 18602 RVA: 0x000C766C File Offset: 0x000C586C
		[CLSCompliant(false)]
		public static int GenTexture()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[173]);
			return result;
		}

		// Token: 0x060048AB RID: 18603 RVA: 0x000C7690 File Offset: 0x000C5890
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, [Out] int[] textures)
		{
			fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[173]);
			}
		}

		// Token: 0x060048AC RID: 18604 RVA: 0x000C76C4 File Offset: 0x000C58C4
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, out int textures)
		{
			fixed (int* ptr = &textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[173]);
			}
		}

		// Token: 0x060048AD RID: 18605 RVA: 0x000C76E8 File Offset: 0x000C58E8
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, [Out] int* textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, textures, GL.EntryPoints[173]);
		}

		// Token: 0x060048AE RID: 18606 RVA: 0x000C76FC File Offset: 0x000C58FC
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, [Out] uint[] textures)
		{
			fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[173]);
			}
		}

		// Token: 0x060048AF RID: 18607 RVA: 0x000C7730 File Offset: 0x000C5930
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, out uint textures)
		{
			fixed (uint* ptr = &textures)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[173]);
			}
		}

		// Token: 0x060048B0 RID: 18608 RVA: 0x000C7754 File Offset: 0x000C5954
		[CLSCompliant(false)]
		public unsafe static void GenTextures(int n, [Out] uint* textures)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, textures, GL.EntryPoints[173]);
		}

		// Token: 0x060048B1 RID: 18609 RVA: 0x000C7768 File Offset: 0x000C5968
		[CLSCompliant(false)]
		public static int GenTransformFeedback()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[174]);
			return result;
		}

		// Token: 0x060048B2 RID: 18610 RVA: 0x000C778C File Offset: 0x000C598C
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, [Out] int[] ids)
		{
			fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[174]);
			}
		}

		// Token: 0x060048B3 RID: 18611 RVA: 0x000C77C0 File Offset: 0x000C59C0
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, out int ids)
		{
			fixed (int* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[174]);
			}
		}

		// Token: 0x060048B4 RID: 18612 RVA: 0x000C77E4 File Offset: 0x000C59E4
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, [Out] int* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[174]);
		}

		// Token: 0x060048B5 RID: 18613 RVA: 0x000C77F8 File Offset: 0x000C59F8
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, [Out] uint[] ids)
		{
			fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[174]);
			}
		}

		// Token: 0x060048B6 RID: 18614 RVA: 0x000C782C File Offset: 0x000C5A2C
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, out uint ids)
		{
			fixed (uint* ptr = &ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[174]);
			}
		}

		// Token: 0x060048B7 RID: 18615 RVA: 0x000C7850 File Offset: 0x000C5A50
		[CLSCompliant(false)]
		public unsafe static void GenTransformFeedbacks(int n, [Out] uint* ids)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[174]);
		}

		// Token: 0x060048B8 RID: 18616 RVA: 0x000C7864 File Offset: 0x000C5A64
		[CLSCompliant(false)]
		public static int GenVertexArray()
		{
			int result;
			calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[175]);
			return result;
		}

		// Token: 0x060048B9 RID: 18617 RVA: 0x000C7888 File Offset: 0x000C5A88
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, [Out] int[] arrays)
		{
			fixed (int* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[175]);
			}
		}

		// Token: 0x060048BA RID: 18618 RVA: 0x000C78BC File Offset: 0x000C5ABC
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, out int arrays)
		{
			fixed (int* ptr = &arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[175]);
			}
		}

		// Token: 0x060048BB RID: 18619 RVA: 0x000C78E0 File Offset: 0x000C5AE0
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, [Out] int* arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[175]);
		}

		// Token: 0x060048BC RID: 18620 RVA: 0x000C78F4 File Offset: 0x000C5AF4
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, [Out] uint[] arrays)
		{
			fixed (uint* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[175]);
			}
		}

		// Token: 0x060048BD RID: 18621 RVA: 0x000C7928 File Offset: 0x000C5B28
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, out uint arrays)
		{
			fixed (uint* ptr = &arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[175]);
			}
		}

		// Token: 0x060048BE RID: 18622 RVA: 0x000C794C File Offset: 0x000C5B4C
		[CLSCompliant(false)]
		public unsafe static void GenVertexArrays(int n, [Out] uint* arrays)
		{
			calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[175]);
		}

		// Token: 0x060048BF RID: 18623 RVA: 0x000C7960 File Offset: 0x000C5B60
		[CLSCompliant(false)]
		public unsafe static void GetActiveAttrib(int program, int index, int bufSize, out int length, out int size, out ActiveAttribType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (ActiveAttribType* ptr5 = &type)
					{
						ActiveAttribType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[177]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x060048C0 RID: 18624 RVA: 0x000C79AC File Offset: 0x000C5BAC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetActiveAttrib(int program, int index, int bufSize, out int length, out int size, out All type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (All* ptr5 = &type)
					{
						All* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[177]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x060048C1 RID: 18625 RVA: 0x000C79F8 File Offset: 0x000C5BF8
		[CLSCompliant(false)]
		public unsafe static void GetActiveAttrib(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[177]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060048C2 RID: 18626 RVA: 0x000C7A3C File Offset: 0x000C5C3C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetActiveAttrib(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] All* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[177]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060048C3 RID: 18627 RVA: 0x000C7A80 File Offset: 0x000C5C80
		[CLSCompliant(false)]
		public unsafe static void GetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, out ActiveAttribType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (ActiveAttribType* ptr5 = &type)
					{
						ActiveAttribType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[177]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x060048C4 RID: 18628 RVA: 0x000C7ACC File Offset: 0x000C5CCC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, out All type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (All* ptr5 = &type)
					{
						All* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[177]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x060048C5 RID: 18629 RVA: 0x000C7B18 File Offset: 0x000C5D18
		[CLSCompliant(false)]
		public unsafe static void GetActiveAttrib(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[177]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060048C6 RID: 18630 RVA: 0x000C7B5C File Offset: 0x000C5D5C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetActiveAttrib(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] All* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[177]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060048C7 RID: 18631 RVA: 0x000C7BA0 File Offset: 0x000C5DA0
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniform(int program, int index, int bufSize, out int length, out int size, out ActiveUniformType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (ActiveUniformType* ptr5 = &type)
					{
						ActiveUniformType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[178]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x060048C8 RID: 18632 RVA: 0x000C7BEC File Offset: 0x000C5DEC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniform(int program, int index, int bufSize, out int length, out int size, out All type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (All* ptr5 = &type)
					{
						All* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[178]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x060048C9 RID: 18633 RVA: 0x000C7C38 File Offset: 0x000C5E38
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniform(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveUniformType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[178]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060048CA RID: 18634 RVA: 0x000C7C7C File Offset: 0x000C5E7C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniform(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] All* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[178]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060048CB RID: 18635 RVA: 0x000C7CC0 File Offset: 0x000C5EC0
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, out ActiveUniformType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (ActiveUniformType* ptr5 = &type)
					{
						ActiveUniformType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[178]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x060048CC RID: 18636 RVA: 0x000C7D0C File Offset: 0x000C5F0C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, out All type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (All* ptr5 = &type)
					{
						All* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[178]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x060048CD RID: 18637 RVA: 0x000C7D58 File Offset: 0x000C5F58
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniform(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveUniformType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[178]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060048CE RID: 18638 RVA: 0x000C7D9C File Offset: 0x000C5F9C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniform(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] All* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[178]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060048CF RID: 18639 RVA: 0x000C7DE0 File Offset: 0x000C5FE0
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(int program, int uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, ptr, GL.EntryPoints[179]);
			}
		}

		// Token: 0x060048D0 RID: 18640 RVA: 0x000C7E18 File Offset: 0x000C6018
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(int program, int uniformBlockIndex, ActiveUniformBlockParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, ptr, GL.EntryPoints[179]);
			}
		}

		// Token: 0x060048D1 RID: 18641 RVA: 0x000C7E3C File Offset: 0x000C603C
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(int program, int uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, @params, GL.EntryPoints[179]);
		}

		// Token: 0x060048D2 RID: 18642 RVA: 0x000C7E54 File Offset: 0x000C6054
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(int program, int uniformBlockIndex, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, ptr, GL.EntryPoints[179]);
			}
		}

		// Token: 0x060048D3 RID: 18643 RVA: 0x000C7E8C File Offset: 0x000C608C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(int program, int uniformBlockIndex, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, ptr, GL.EntryPoints[179]);
			}
		}

		// Token: 0x060048D4 RID: 18644 RVA: 0x000C7EB0 File Offset: 0x000C60B0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetActiveUniformBlock(int program, int uniformBlockIndex, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, @params, GL.EntryPoints[179]);
		}

		// Token: 0x060048D5 RID: 18645 RVA: 0x000C7EC8 File Offset: 0x000C60C8
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(uint program, uint uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, ptr, GL.EntryPoints[179]);
			}
		}

		// Token: 0x060048D6 RID: 18646 RVA: 0x000C7F00 File Offset: 0x000C6100
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(uint program, uint uniformBlockIndex, ActiveUniformBlockParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, ptr, GL.EntryPoints[179]);
			}
		}

		// Token: 0x060048D7 RID: 18647 RVA: 0x000C7F24 File Offset: 0x000C6124
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(uint program, uint uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, @params, GL.EntryPoints[179]);
		}

		// Token: 0x060048D8 RID: 18648 RVA: 0x000C7F3C File Offset: 0x000C613C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlock(uint program, uint uniformBlockIndex, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, ptr, GL.EntryPoints[179]);
			}
		}

		// Token: 0x060048D9 RID: 18649 RVA: 0x000C7F74 File Offset: 0x000C6174
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetActiveUniformBlock(uint program, uint uniformBlockIndex, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, ptr, GL.EntryPoints[179]);
			}
		}

		// Token: 0x060048DA RID: 18650 RVA: 0x000C7F98 File Offset: 0x000C6198
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetActiveUniformBlock(uint program, uint uniformBlockIndex, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*), program, uniformBlockIndex, pname, @params, GL.EntryPoints[179]);
		}

		// Token: 0x060048DB RID: 18651 RVA: 0x000C7FB0 File Offset: 0x000C61B0
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlockName(int program, int uniformBlockIndex, int bufSize, out int length, [Out] StringBuilder uniformBlockName)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformBlockName.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformBlockIndex, bufSize, ptr2, intPtr, GL.EntryPoints[180]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformBlockName);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060048DC RID: 18652 RVA: 0x000C7FF0 File Offset: 0x000C61F0
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlockName(int program, int uniformBlockIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformBlockName)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformBlockName.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformBlockIndex, bufSize, length, intPtr, GL.EntryPoints[180]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformBlockName);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060048DD RID: 18653 RVA: 0x000C8030 File Offset: 0x000C6230
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, out int length, [Out] StringBuilder uniformBlockName)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformBlockName.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformBlockIndex, bufSize, ptr2, intPtr, GL.EntryPoints[180]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformBlockName);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060048DE RID: 18654 RVA: 0x000C8070 File Offset: 0x000C6270
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformBlockName)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)uniformBlockName.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, uniformBlockIndex, bufSize, length, intPtr, GL.EntryPoints[180]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, uniformBlockName);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060048DF RID: 18655 RVA: 0x000C80B0 File Offset: 0x000C62B0
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(int program, int uniformCount, int[] uniformIndices, ActiveUniformParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (uniformIndices != null && uniformIndices.Length != 0) ? ref uniformIndices[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, ptr2, pname, ptr3, GL.EntryPoints[181]);
				}
			}
		}

		// Token: 0x060048E0 RID: 18656 RVA: 0x000C8100 File Offset: 0x000C6300
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetActiveUniforms(int program, int uniformCount, int[] uniformIndices, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (uniformIndices != null && uniformIndices.Length != 0) ? ref uniformIndices[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, ptr2, pname, ptr3, GL.EntryPoints[181]);
				}
			}
		}

		// Token: 0x060048E1 RID: 18657 RVA: 0x000C8150 File Offset: 0x000C6350
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(int program, int uniformCount, ref int uniformIndices, ActiveUniformParameter pname, out int @params)
		{
			fixed (int* ptr = &uniformIndices)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, ptr2, pname, ptr3, GL.EntryPoints[181]);
				}
			}
		}

		// Token: 0x060048E2 RID: 18658 RVA: 0x000C817C File Offset: 0x000C637C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetActiveUniforms(int program, int uniformCount, ref int uniformIndices, All pname, out int @params)
		{
			fixed (int* ptr = &uniformIndices)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, ptr2, pname, ptr3, GL.EntryPoints[181]);
				}
			}
		}

		// Token: 0x060048E3 RID: 18659 RVA: 0x000C81A8 File Offset: 0x000C63A8
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(int program, int uniformCount, int* uniformIndices, ActiveUniformParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, uniformIndices, pname, @params, GL.EntryPoints[181]);
		}

		// Token: 0x060048E4 RID: 18660 RVA: 0x000C81C0 File Offset: 0x000C63C0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetActiveUniforms(int program, int uniformCount, int* uniformIndices, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, uniformIndices, pname, @params, GL.EntryPoints[181]);
		}

		// Token: 0x060048E5 RID: 18661 RVA: 0x000C81D8 File Offset: 0x000C63D8
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(uint program, int uniformCount, uint[] uniformIndices, ActiveUniformParameter pname, [Out] int[] @params)
		{
			fixed (uint* ptr = ref (uniformIndices != null && uniformIndices.Length != 0) ? ref uniformIndices[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (int* ptr3 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, ptr2, pname, ptr3, GL.EntryPoints[181]);
				}
			}
		}

		// Token: 0x060048E6 RID: 18662 RVA: 0x000C8228 File Offset: 0x000C6428
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(uint program, int uniformCount, uint[] uniformIndices, All pname, [Out] int[] @params)
		{
			fixed (uint* ptr = ref (uniformIndices != null && uniformIndices.Length != 0) ? ref uniformIndices[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (int* ptr3 = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, ptr2, pname, ptr3, GL.EntryPoints[181]);
				}
			}
		}

		// Token: 0x060048E7 RID: 18663 RVA: 0x000C8278 File Offset: 0x000C6478
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(uint program, int uniformCount, ref uint uniformIndices, ActiveUniformParameter pname, out int @params)
		{
			fixed (uint* ptr = &uniformIndices)
			{
				uint* ptr2 = ptr;
				fixed (int* ptr3 = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, ptr2, pname, ptr3, GL.EntryPoints[181]);
				}
			}
		}

		// Token: 0x060048E8 RID: 18664 RVA: 0x000C82A4 File Offset: 0x000C64A4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(uint program, int uniformCount, ref uint uniformIndices, All pname, out int @params)
		{
			fixed (uint* ptr = &uniformIndices)
			{
				uint* ptr2 = ptr;
				fixed (int* ptr3 = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, ptr2, pname, ptr3, GL.EntryPoints[181]);
				}
			}
		}

		// Token: 0x060048E9 RID: 18665 RVA: 0x000C82D0 File Offset: 0x000C64D0
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(uint program, int uniformCount, uint* uniformIndices, ActiveUniformParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, uniformIndices, pname, @params, GL.EntryPoints[181]);
		}

		// Token: 0x060048EA RID: 18666 RVA: 0x000C82E8 File Offset: 0x000C64E8
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetActiveUniforms(uint program, int uniformCount, uint* uniformIndices, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*), program, uniformCount, uniformIndices, pname, @params, GL.EntryPoints[181]);
		}

		// Token: 0x060048EB RID: 18667 RVA: 0x000C8300 File Offset: 0x000C6500
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(int program, int maxCount, out int count, [Out] int[] shaders)
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, ptr2, ptr3, GL.EntryPoints[182]);
				}
			}
		}

		// Token: 0x060048EC RID: 18668 RVA: 0x000C833C File Offset: 0x000C653C
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(int program, int maxCount, out int count, out int shaders)
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &shaders)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, ptr2, ptr3, GL.EntryPoints[182]);
				}
			}
		}

		// Token: 0x060048ED RID: 18669 RVA: 0x000C8364 File Offset: 0x000C6564
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(int program, int maxCount, [Out] int* count, [Out] int* shaders)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, count, shaders, GL.EntryPoints[182]);
		}

		// Token: 0x060048EE RID: 18670 RVA: 0x000C837C File Offset: 0x000C657C
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(uint program, int maxCount, out int count, [Out] uint[] shaders)
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (uint* ptr3 = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, ptr2, ptr3, GL.EntryPoints[182]);
				}
			}
		}

		// Token: 0x060048EF RID: 18671 RVA: 0x000C83B8 File Offset: 0x000C65B8
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(uint program, int maxCount, out int count, out uint shaders)
		{
			fixed (int* ptr = &count)
			{
				int* ptr2 = ptr;
				fixed (uint* ptr3 = &shaders)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, ptr2, ptr3, GL.EntryPoints[182]);
				}
			}
		}

		// Token: 0x060048F0 RID: 18672 RVA: 0x000C83E0 File Offset: 0x000C65E0
		[CLSCompliant(false)]
		public unsafe static void GetAttachedShaders(uint program, int maxCount, [Out] int* count, [Out] uint* shaders)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.UInt32*), program, maxCount, count, shaders, GL.EntryPoints[182]);
		}

		// Token: 0x060048F1 RID: 18673 RVA: 0x000C83F8 File Offset: 0x000C65F8
		[CLSCompliant(false)]
		public static int GetAttribLocation(int program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[183]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060048F2 RID: 18674 RVA: 0x000C8424 File Offset: 0x000C6624
		[CLSCompliant(false)]
		public static int GetAttribLocation(uint program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[183]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x060048F3 RID: 18675 RVA: 0x000C8450 File Offset: 0x000C6650
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static bool GetBoolean(All pname)
		{
			bool result;
			calli(System.Void(System.Int32,System.Boolean*), pname, ref result, GL.EntryPoints[184]);
			return result;
		}

		// Token: 0x060048F4 RID: 18676 RVA: 0x000C8474 File Offset: 0x000C6674
		[CLSCompliant(false)]
		public static bool GetBoolean(GetPName pname)
		{
			bool result;
			calli(System.Void(System.Int32,System.Boolean*), pname, ref result, GL.EntryPoints[184]);
			return result;
		}

		// Token: 0x060048F5 RID: 18677 RVA: 0x000C8498 File Offset: 0x000C6698
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(All pname, [Out] bool[] data)
		{
			fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Boolean*), pname, ptr, GL.EntryPoints[184]);
			}
		}

		// Token: 0x060048F6 RID: 18678 RVA: 0x000C84CC File Offset: 0x000C66CC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(All pname, out bool data)
		{
			fixed (bool* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Boolean*), pname, ptr, GL.EntryPoints[184]);
			}
		}

		// Token: 0x060048F7 RID: 18679 RVA: 0x000C84F0 File Offset: 0x000C66F0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetBoolean(All pname, [Out] bool* data)
		{
			calli(System.Void(System.Int32,System.Boolean*), pname, data, GL.EntryPoints[184]);
		}

		// Token: 0x060048F8 RID: 18680 RVA: 0x000C8504 File Offset: 0x000C6704
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetPName pname, [Out] bool[] data)
		{
			fixed (bool* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Boolean*), pname, ptr, GL.EntryPoints[184]);
			}
		}

		// Token: 0x060048F9 RID: 18681 RVA: 0x000C8538 File Offset: 0x000C6738
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetPName pname, out bool data)
		{
			fixed (bool* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Boolean*), pname, ptr, GL.EntryPoints[184]);
			}
		}

		// Token: 0x060048FA RID: 18682 RVA: 0x000C855C File Offset: 0x000C675C
		[CLSCompliant(false)]
		public unsafe static void GetBoolean(GetPName pname, [Out] bool* data)
		{
			calli(System.Void(System.Int32,System.Boolean*), pname, data, GL.EntryPoints[184]);
		}

		// Token: 0x060048FB RID: 18683 RVA: 0x000C8570 File Offset: 0x000C6770
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(All target, All pname, [Out] long[] @params)
		{
			fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int64*), target, pname, ptr, GL.EntryPoints[185]);
			}
		}

		// Token: 0x060048FC RID: 18684 RVA: 0x000C85A8 File Offset: 0x000C67A8
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(All target, All pname, out long @params)
		{
			fixed (long* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int64*), target, pname, ptr, GL.EntryPoints[185]);
			}
		}

		// Token: 0x060048FD RID: 18685 RVA: 0x000C85CC File Offset: 0x000C67CC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetBufferParameter(All target, All pname, [Out] long* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int64*), target, pname, @params, GL.EntryPoints[185]);
		}

		// Token: 0x060048FE RID: 18686 RVA: 0x000C85E4 File Offset: 0x000C67E4
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] long[] @params)
		{
			fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int64*), target, pname, ptr, GL.EntryPoints[185]);
			}
		}

		// Token: 0x060048FF RID: 18687 RVA: 0x000C861C File Offset: 0x000C681C
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, out long @params)
		{
			fixed (long* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int64*), target, pname, ptr, GL.EntryPoints[185]);
			}
		}

		// Token: 0x06004900 RID: 18688 RVA: 0x000C8640 File Offset: 0x000C6840
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] long* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int64*), target, pname, @params, GL.EntryPoints[185]);
		}

		// Token: 0x06004901 RID: 18689 RVA: 0x000C8658 File Offset: 0x000C6858
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(All target, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[186]);
			}
		}

		// Token: 0x06004902 RID: 18690 RVA: 0x000C8690 File Offset: 0x000C6890
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(All target, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[186]);
			}
		}

		// Token: 0x06004903 RID: 18691 RVA: 0x000C86B4 File Offset: 0x000C68B4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(All target, All pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[186]);
		}

		// Token: 0x06004904 RID: 18692 RVA: 0x000C86CC File Offset: 0x000C68CC
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[186]);
			}
		}

		// Token: 0x06004905 RID: 18693 RVA: 0x000C8704 File Offset: 0x000C6904
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[186]);
			}
		}

		// Token: 0x06004906 RID: 18694 RVA: 0x000C8728 File Offset: 0x000C6928
		[CLSCompliant(false)]
		public unsafe static void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[186]);
		}

		// Token: 0x06004907 RID: 18695 RVA: 0x000C8740 File Offset: 0x000C6940
		[Obsolete("Use strongly-typed overload instead")]
		public static void GetBufferPointer(All target, All pname, [Out] IntPtr @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, @params, GL.EntryPoints[187]);
		}

		// Token: 0x06004908 RID: 18696 RVA: 0x000C8758 File Offset: 0x000C6958
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetBufferPointer<T2>(All target, All pname, [In] [Out] T2[] @params) where T2 : struct
		{
			fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[187]);
			}
		}

		// Token: 0x06004909 RID: 18697 RVA: 0x000C8790 File Offset: 0x000C6990
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetBufferPointer<T2>(All target, All pname, [In] [Out] T2[,] @params) where T2 : struct
		{
			fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[187]);
			}
		}

		// Token: 0x0600490A RID: 18698 RVA: 0x000C87CC File Offset: 0x000C69CC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetBufferPointer<T2>(All target, All pname, [In] [Out] T2[,,] @params) where T2 : struct
		{
			fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[187]);
			}
		}

		// Token: 0x0600490B RID: 18699 RVA: 0x000C8808 File Offset: 0x000C6A08
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetBufferPointer<T2>(All target, All pname, [In] [Out] ref T2 @params) where T2 : struct
		{
			fixed (T2* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[187]);
			}
		}

		// Token: 0x0600490C RID: 18700 RVA: 0x000C882C File Offset: 0x000C6A2C
		public static void GetBufferPointer(BufferTarget target, BufferPointer pname, [Out] IntPtr @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, @params, GL.EntryPoints[187]);
		}

		// Token: 0x0600490D RID: 18701 RVA: 0x000C8844 File Offset: 0x000C6A44
		[CLSCompliant(false)]
		public unsafe static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In] [Out] T2[] @params) where T2 : struct
		{
			fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[187]);
			}
		}

		// Token: 0x0600490E RID: 18702 RVA: 0x000C887C File Offset: 0x000C6A7C
		[CLSCompliant(false)]
		public unsafe static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In] [Out] T2[,] @params) where T2 : struct
		{
			fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[187]);
			}
		}

		// Token: 0x0600490F RID: 18703 RVA: 0x000C88B8 File Offset: 0x000C6AB8
		[CLSCompliant(false)]
		public unsafe static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In] [Out] T2[,,] @params) where T2 : struct
		{
			fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[187]);
			}
		}

		// Token: 0x06004910 RID: 18704 RVA: 0x000C88F4 File Offset: 0x000C6AF4
		public unsafe static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In] [Out] ref T2 @params) where T2 : struct
		{
			fixed (T2* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[187]);
			}
		}

		// Token: 0x06004911 RID: 18705 RVA: 0x000C8918 File Offset: 0x000C6B18
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] All[] sources, [Out] All[] types, [Out] int[] ids, [Out] All[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
		{
			fixed (All* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
			{
				All* ptr2 = ptr;
				fixed (All* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
				{
					All* ptr4 = ptr3;
					fixed (int* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
					{
						int* ptr6 = ptr5;
						fixed (All* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
						{
							All* ptr8 = ptr7;
							fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
							{
								int* ptr10 = ptr9;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[189]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}
		}

		// Token: 0x06004912 RID: 18706 RVA: 0x000C89D0 File Offset: 0x000C6BD0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static int GetDebugMessageLog(int count, int bufSize, out All sources, out All types, out int ids, out All severities, out int lengths, [Out] StringBuilder messageLog)
		{
			fixed (All* ptr = &sources)
			{
				All* ptr2 = ptr;
				fixed (All* ptr3 = &types)
				{
					All* ptr4 = ptr3;
					fixed (int* ptr5 = &ids)
					{
						int* ptr6 = ptr5;
						fixed (All* ptr7 = &severities)
						{
							All* ptr8 = ptr7;
							fixed (int* ptr9 = &lengths)
							{
								int* ptr10 = ptr9;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[189]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}
		}

		// Token: 0x06004913 RID: 18707 RVA: 0x000C8A28 File Offset: 0x000C6C28
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] All* sources, [Out] All* types, [Out] int* ids, [Out] All* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[189]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
			Marshal.FreeHGlobal(intPtr);
			return result;
		}

		// Token: 0x06004914 RID: 18708 RVA: 0x000C8A6C File Offset: 0x000C6C6C
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] DebugSourceExternal[] sources, [Out] DebugType[] types, [Out] int[] ids, [Out] DebugSeverity[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
		{
			fixed (DebugSourceExternal* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
			{
				DebugSourceExternal* ptr2 = ptr;
				fixed (DebugType* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
				{
					DebugType* ptr4 = ptr3;
					fixed (int* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
					{
						int* ptr6 = ptr5;
						fixed (DebugSeverity* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
						{
							DebugSeverity* ptr8 = ptr7;
							fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
							{
								int* ptr10 = ptr9;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[189]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}
		}

		// Token: 0x06004915 RID: 18709 RVA: 0x000C8B24 File Offset: 0x000C6D24
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(int count, int bufSize, out DebugSourceExternal sources, out DebugType types, out int ids, out DebugSeverity severities, out int lengths, [Out] StringBuilder messageLog)
		{
			fixed (DebugSourceExternal* ptr = &sources)
			{
				DebugSourceExternal* ptr2 = ptr;
				fixed (DebugType* ptr3 = &types)
				{
					DebugType* ptr4 = ptr3;
					fixed (int* ptr5 = &ids)
					{
						int* ptr6 = ptr5;
						fixed (DebugSeverity* ptr7 = &severities)
						{
							DebugSeverity* ptr8 = ptr7;
							fixed (int* ptr9 = &lengths)
							{
								int* ptr10 = ptr9;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[189]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}
		}

		// Token: 0x06004916 RID: 18710 RVA: 0x000C8B7C File Offset: 0x000C6D7C
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] DebugSourceExternal* sources, [Out] DebugType* types, [Out] int* ids, [Out] DebugSeverity* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[189]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
			Marshal.FreeHGlobal(intPtr);
			return result;
		}

		// Token: 0x06004917 RID: 18711 RVA: 0x000C8BC0 File Offset: 0x000C6DC0
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] All[] sources, [Out] All[] types, [Out] uint[] ids, [Out] All[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
		{
			fixed (All* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
			{
				All* ptr2 = ptr;
				fixed (All* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
				{
					All* ptr4 = ptr3;
					fixed (uint* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
					{
						uint* ptr6 = ptr5;
						fixed (All* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
						{
							All* ptr8 = ptr7;
							fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
							{
								int* ptr10 = ptr9;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[189]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}
		}

		// Token: 0x06004918 RID: 18712 RVA: 0x000C8C78 File Offset: 0x000C6E78
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(uint count, int bufSize, out All sources, out All types, out uint ids, out All severities, out int lengths, [Out] StringBuilder messageLog)
		{
			fixed (All* ptr = &sources)
			{
				All* ptr2 = ptr;
				fixed (All* ptr3 = &types)
				{
					All* ptr4 = ptr3;
					fixed (uint* ptr5 = &ids)
					{
						uint* ptr6 = ptr5;
						fixed (All* ptr7 = &severities)
						{
							All* ptr8 = ptr7;
							fixed (int* ptr9 = &lengths)
							{
								int* ptr10 = ptr9;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[189]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}
		}

		// Token: 0x06004919 RID: 18713 RVA: 0x000C8CD0 File Offset: 0x000C6ED0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] All* sources, [Out] All* types, [Out] uint* ids, [Out] All* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[189]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
			Marshal.FreeHGlobal(intPtr);
			return result;
		}

		// Token: 0x0600491A RID: 18714 RVA: 0x000C8D14 File Offset: 0x000C6F14
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] DebugSourceExternal[] sources, [Out] DebugType[] types, [Out] uint[] ids, [Out] DebugSeverity[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
		{
			fixed (DebugSourceExternal* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
			{
				DebugSourceExternal* ptr2 = ptr;
				fixed (DebugType* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
				{
					DebugType* ptr4 = ptr3;
					fixed (uint* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
					{
						uint* ptr6 = ptr5;
						fixed (DebugSeverity* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
						{
							DebugSeverity* ptr8 = ptr7;
							fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
							{
								int* ptr10 = ptr9;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[189]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}
		}

		// Token: 0x0600491B RID: 18715 RVA: 0x000C8DCC File Offset: 0x000C6FCC
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(uint count, int bufSize, out DebugSourceExternal sources, out DebugType types, out uint ids, out DebugSeverity severities, out int lengths, [Out] StringBuilder messageLog)
		{
			fixed (DebugSourceExternal* ptr = &sources)
			{
				DebugSourceExternal* ptr2 = ptr;
				fixed (DebugType* ptr3 = &types)
				{
					DebugType* ptr4 = ptr3;
					fixed (uint* ptr5 = &ids)
					{
						uint* ptr6 = ptr5;
						fixed (DebugSeverity* ptr7 = &severities)
						{
							DebugSeverity* ptr8 = ptr7;
							fixed (int* ptr9 = &lengths)
							{
								int* ptr10 = ptr9;
								IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
								int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[189]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
								Marshal.FreeHGlobal(intPtr);
								return result;
							}
						}
					}
				}
			}
		}

		// Token: 0x0600491C RID: 18716 RVA: 0x000C8E24 File Offset: 0x000C7024
		[CLSCompliant(false)]
		public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] DebugSourceExternal* sources, [Out] DebugType* types, [Out] uint* ids, [Out] DebugSeverity* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
			int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[189]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
			Marshal.FreeHGlobal(intPtr);
			return result;
		}

		// Token: 0x0600491D RID: 18717 RVA: 0x000C8E68 File Offset: 0x000C7068
		public static ErrorCode GetError()
		{
			return calli(System.Int32(), GL.EntryPoints[193]);
		}

		// Token: 0x0600491E RID: 18718 RVA: 0x000C8E7C File Offset: 0x000C707C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static float GetFloat(All pname)
		{
			float result;
			calli(System.Void(System.Int32,System.Single*), pname, ref result, GL.EntryPoints[196]);
			return result;
		}

		// Token: 0x0600491F RID: 18719 RVA: 0x000C8EA0 File Offset: 0x000C70A0
		[CLSCompliant(false)]
		public static float GetFloat(GetPName pname)
		{
			float result;
			calli(System.Void(System.Int32,System.Single*), pname, ref result, GL.EntryPoints[196]);
			return result;
		}

		// Token: 0x06004920 RID: 18720 RVA: 0x000C8EC4 File Offset: 0x000C70C4
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetFloat(All pname, [Out] float[] data)
		{
			fixed (float* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[196]);
			}
		}

		// Token: 0x06004921 RID: 18721 RVA: 0x000C8EF8 File Offset: 0x000C70F8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetFloat(All pname, out float data)
		{
			fixed (float* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[196]);
			}
		}

		// Token: 0x06004922 RID: 18722 RVA: 0x000C8F1C File Offset: 0x000C711C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetFloat(All pname, [Out] float* data)
		{
			calli(System.Void(System.Int32,System.Single*), pname, data, GL.EntryPoints[196]);
		}

		// Token: 0x06004923 RID: 18723 RVA: 0x000C8F30 File Offset: 0x000C7130
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetPName pname, [Out] float[] data)
		{
			fixed (float* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[196]);
			}
		}

		// Token: 0x06004924 RID: 18724 RVA: 0x000C8F64 File Offset: 0x000C7164
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetPName pname, out float data)
		{
			fixed (float* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Single*), pname, ptr, GL.EntryPoints[196]);
			}
		}

		// Token: 0x06004925 RID: 18725 RVA: 0x000C8F88 File Offset: 0x000C7188
		[CLSCompliant(false)]
		public unsafe static void GetFloat(GetPName pname, [Out] float* data)
		{
			calli(System.Void(System.Int32,System.Single*), pname, data, GL.EntryPoints[196]);
		}

		// Token: 0x06004926 RID: 18726 RVA: 0x000C8F9C File Offset: 0x000C719C
		[CLSCompliant(false)]
		public static int GetFragDataLocation(int program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[197]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06004927 RID: 18727 RVA: 0x000C8FC8 File Offset: 0x000C71C8
		[CLSCompliant(false)]
		public static int GetFragDataLocation(uint program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[197]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06004928 RID: 18728 RVA: 0x000C8FF4 File Offset: 0x000C71F4
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetFramebufferAttachmentParameter(All target, All attachment, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, attachment, pname, ptr, GL.EntryPoints[198]);
			}
		}

		// Token: 0x06004929 RID: 18729 RVA: 0x000C902C File Offset: 0x000C722C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetFramebufferAttachmentParameter(All target, All attachment, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, attachment, pname, ptr, GL.EntryPoints[198]);
			}
		}

		// Token: 0x0600492A RID: 18730 RVA: 0x000C9050 File Offset: 0x000C7250
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetFramebufferAttachmentParameter(All target, All attachment, All pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, attachment, pname, @params, GL.EntryPoints[198]);
		}

		// Token: 0x0600492B RID: 18731 RVA: 0x000C9068 File Offset: 0x000C7268
		[CLSCompliant(false)]
		public unsafe static void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, attachment, pname, ptr, GL.EntryPoints[198]);
			}
		}

		// Token: 0x0600492C RID: 18732 RVA: 0x000C90A0 File Offset: 0x000C72A0
		[CLSCompliant(false)]
		public unsafe static void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, attachment, pname, ptr, GL.EntryPoints[198]);
			}
		}

		// Token: 0x0600492D RID: 18733 RVA: 0x000C90C4 File Offset: 0x000C72C4
		[CLSCompliant(false)]
		public unsafe static void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32*), target, attachment, pname, @params, GL.EntryPoints[198]);
		}

		// Token: 0x0600492E RID: 18734 RVA: 0x000C90DC File Offset: 0x000C72DC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(All target, int index, [Out] long[] data)
		{
			fixed (long* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[200]);
			}
		}

		// Token: 0x0600492F RID: 18735 RVA: 0x000C9114 File Offset: 0x000C7314
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(All target, int index, out long data)
		{
			fixed (long* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[200]);
			}
		}

		// Token: 0x06004930 RID: 18736 RVA: 0x000C9138 File Offset: 0x000C7338
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(All target, int index, [Out] long* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, data, GL.EntryPoints[200]);
		}

		// Token: 0x06004931 RID: 18737 RVA: 0x000C9150 File Offset: 0x000C7350
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetInteger64(All target, uint index, [Out] long[] data)
		{
			fixed (long* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[200]);
			}
		}

		// Token: 0x06004932 RID: 18738 RVA: 0x000C9188 File Offset: 0x000C7388
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetInteger64(All target, uint index, out long data)
		{
			fixed (long* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[200]);
			}
		}

		// Token: 0x06004933 RID: 18739 RVA: 0x000C91AC File Offset: 0x000C73AC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetInteger64(All target, uint index, [Out] long* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, data, GL.EntryPoints[200]);
		}

		// Token: 0x06004934 RID: 18740 RVA: 0x000C91C4 File Offset: 0x000C73C4
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, int index, [Out] long[] data)
		{
			fixed (long* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[200]);
			}
		}

		// Token: 0x06004935 RID: 18741 RVA: 0x000C91FC File Offset: 0x000C73FC
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, int index, out long data)
		{
			fixed (long* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[200]);
			}
		}

		// Token: 0x06004936 RID: 18742 RVA: 0x000C9220 File Offset: 0x000C7420
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, int index, [Out] long* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, data, GL.EntryPoints[200]);
		}

		// Token: 0x06004937 RID: 18743 RVA: 0x000C9238 File Offset: 0x000C7438
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, uint index, [Out] long[] data)
		{
			fixed (long* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[200]);
			}
		}

		// Token: 0x06004938 RID: 18744 RVA: 0x000C9270 File Offset: 0x000C7470
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, uint index, out long data)
		{
			fixed (long* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, ptr, GL.EntryPoints[200]);
			}
		}

		// Token: 0x06004939 RID: 18745 RVA: 0x000C9294 File Offset: 0x000C7494
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetIndexedPName target, uint index, [Out] long* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int64*), target, index, data, GL.EntryPoints[200]);
		}

		// Token: 0x0600493A RID: 18746 RVA: 0x000C92AC File Offset: 0x000C74AC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static long GetInteger64(All pname)
		{
			long result;
			calli(System.Void(System.Int32,System.Int64*), pname, ref result, GL.EntryPoints[201]);
			return result;
		}

		// Token: 0x0600493B RID: 18747 RVA: 0x000C92D0 File Offset: 0x000C74D0
		[CLSCompliant(false)]
		public static long GetInteger64(GetPName pname)
		{
			long result;
			calli(System.Void(System.Int32,System.Int64*), pname, ref result, GL.EntryPoints[201]);
			return result;
		}

		// Token: 0x0600493C RID: 18748 RVA: 0x000C92F4 File Offset: 0x000C74F4
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetInteger64(All pname, [Out] long[] data)
		{
			fixed (long* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int64*), pname, ptr, GL.EntryPoints[201]);
			}
		}

		// Token: 0x0600493D RID: 18749 RVA: 0x000C9328 File Offset: 0x000C7528
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetInteger64(All pname, out long data)
		{
			fixed (long* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int64*), pname, ptr, GL.EntryPoints[201]);
			}
		}

		// Token: 0x0600493E RID: 18750 RVA: 0x000C934C File Offset: 0x000C754C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetInteger64(All pname, [Out] long* data)
		{
			calli(System.Void(System.Int32,System.Int64*), pname, data, GL.EntryPoints[201]);
		}

		// Token: 0x0600493F RID: 18751 RVA: 0x000C9360 File Offset: 0x000C7560
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetPName pname, [Out] long[] data)
		{
			fixed (long* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int64*), pname, ptr, GL.EntryPoints[201]);
			}
		}

		// Token: 0x06004940 RID: 18752 RVA: 0x000C9394 File Offset: 0x000C7594
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetPName pname, out long data)
		{
			fixed (long* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int64*), pname, ptr, GL.EntryPoints[201]);
			}
		}

		// Token: 0x06004941 RID: 18753 RVA: 0x000C93B8 File Offset: 0x000C75B8
		[CLSCompliant(false)]
		public unsafe static void GetInteger64(GetPName pname, [Out] long* data)
		{
			calli(System.Void(System.Int32,System.Int64*), pname, data, GL.EntryPoints[201]);
		}

		// Token: 0x06004942 RID: 18754 RVA: 0x000C93CC File Offset: 0x000C75CC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetInteger(All target, int index, [Out] int[] data)
		{
			fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[203]);
			}
		}

		// Token: 0x06004943 RID: 18755 RVA: 0x000C9404 File Offset: 0x000C7604
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetInteger(All target, int index, out int data)
		{
			fixed (int* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[203]);
			}
		}

		// Token: 0x06004944 RID: 18756 RVA: 0x000C9428 File Offset: 0x000C7628
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetInteger(All target, int index, [Out] int* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, data, GL.EntryPoints[203]);
		}

		// Token: 0x06004945 RID: 18757 RVA: 0x000C9440 File Offset: 0x000C7640
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetInteger(All target, uint index, [Out] int[] data)
		{
			fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[203]);
			}
		}

		// Token: 0x06004946 RID: 18758 RVA: 0x000C9478 File Offset: 0x000C7678
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetInteger(All target, uint index, out int data)
		{
			fixed (int* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[203]);
			}
		}

		// Token: 0x06004947 RID: 18759 RVA: 0x000C949C File Offset: 0x000C769C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetInteger(All target, uint index, [Out] int* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, data, GL.EntryPoints[203]);
		}

		// Token: 0x06004948 RID: 18760 RVA: 0x000C94B4 File Offset: 0x000C76B4
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, int index, [Out] int[] data)
		{
			fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[203]);
			}
		}

		// Token: 0x06004949 RID: 18761 RVA: 0x000C94EC File Offset: 0x000C76EC
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, int index, out int data)
		{
			fixed (int* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[203]);
			}
		}

		// Token: 0x0600494A RID: 18762 RVA: 0x000C9510 File Offset: 0x000C7710
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, int index, [Out] int* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, data, GL.EntryPoints[203]);
		}

		// Token: 0x0600494B RID: 18763 RVA: 0x000C9528 File Offset: 0x000C7728
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, uint index, [Out] int[] data)
		{
			fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[203]);
			}
		}

		// Token: 0x0600494C RID: 18764 RVA: 0x000C9560 File Offset: 0x000C7760
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, uint index, out int data)
		{
			fixed (int* ptr = &data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[203]);
			}
		}

		// Token: 0x0600494D RID: 18765 RVA: 0x000C9584 File Offset: 0x000C7784
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetIndexedPName target, uint index, [Out] int* data)
		{
			calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, data, GL.EntryPoints[203]);
		}

		// Token: 0x0600494E RID: 18766 RVA: 0x000C959C File Offset: 0x000C779C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static int GetInteger(All pname)
		{
			int result;
			calli(System.Void(System.Int32,System.Int32*), pname, ref result, GL.EntryPoints[205]);
			return result;
		}

		// Token: 0x0600494F RID: 18767 RVA: 0x000C95C0 File Offset: 0x000C77C0
		[CLSCompliant(false)]
		public static int GetInteger(GetPName pname)
		{
			int result;
			calli(System.Void(System.Int32,System.Int32*), pname, ref result, GL.EntryPoints[205]);
			return result;
		}

		// Token: 0x06004950 RID: 18768 RVA: 0x000C95E4 File Offset: 0x000C77E4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetInteger(All pname, [Out] int[] data)
		{
			fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[205]);
			}
		}

		// Token: 0x06004951 RID: 18769 RVA: 0x000C9618 File Offset: 0x000C7818
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetInteger(All pname, out int data)
		{
			fixed (int* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[205]);
			}
		}

		// Token: 0x06004952 RID: 18770 RVA: 0x000C963C File Offset: 0x000C783C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetInteger(All pname, [Out] int* data)
		{
			calli(System.Void(System.Int32,System.Int32*), pname, data, GL.EntryPoints[205]);
		}

		// Token: 0x06004953 RID: 18771 RVA: 0x000C9650 File Offset: 0x000C7850
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetPName pname, [Out] int[] data)
		{
			fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[205]);
			}
		}

		// Token: 0x06004954 RID: 18772 RVA: 0x000C9684 File Offset: 0x000C7884
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetPName pname, out int data)
		{
			fixed (int* ptr = &data)
			{
				calli(System.Void(System.Int32,System.Int32*), pname, ptr, GL.EntryPoints[205]);
			}
		}

		// Token: 0x06004955 RID: 18773 RVA: 0x000C96A8 File Offset: 0x000C78A8
		[CLSCompliant(false)]
		public unsafe static void GetInteger(GetPName pname, [Out] int* data)
		{
			calli(System.Void(System.Int32,System.Int32*), pname, data, GL.EntryPoints[205]);
		}

		// Token: 0x06004956 RID: 18774 RVA: 0x000C96BC File Offset: 0x000C78BC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetInternalformat(All target, All internalformat, All pname, int bufSize, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), target, internalformat, pname, bufSize, ptr, GL.EntryPoints[206]);
			}
		}

		// Token: 0x06004957 RID: 18775 RVA: 0x000C96F8 File Offset: 0x000C78F8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetInternalformat(All target, All internalformat, All pname, int bufSize, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), target, internalformat, pname, bufSize, ptr, GL.EntryPoints[206]);
			}
		}

		// Token: 0x06004958 RID: 18776 RVA: 0x000C9720 File Offset: 0x000C7920
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetInternalformat(All target, All internalformat, All pname, int bufSize, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), target, internalformat, pname, bufSize, @params, GL.EntryPoints[206]);
		}

		// Token: 0x06004959 RID: 18777 RVA: 0x000C9738 File Offset: 0x000C7938
		[CLSCompliant(false)]
		public unsafe static void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), target, internalformat, pname, bufSize, ptr, GL.EntryPoints[206]);
			}
		}

		// Token: 0x0600495A RID: 18778 RVA: 0x000C9774 File Offset: 0x000C7974
		[CLSCompliant(false)]
		public unsafe static void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), target, internalformat, pname, bufSize, ptr, GL.EntryPoints[206]);
			}
		}

		// Token: 0x0600495B RID: 18779 RVA: 0x000C979C File Offset: 0x000C799C
		[CLSCompliant(false)]
		public unsafe static void GetInternalformat(ImageTarget target, SizedInternalFormat internalformat, InternalFormatParameter pname, int bufSize, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*), target, internalformat, pname, bufSize, @params, GL.EntryPoints[206]);
		}

		// Token: 0x0600495C RID: 18780 RVA: 0x000C97B4 File Offset: 0x000C79B4
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetObjectLabel(All identifier, int name, int bufSize, [Out] int[] length, [Out] StringBuilder label)
		{
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[210]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600495D RID: 18781 RVA: 0x000C9808 File Offset: 0x000C7A08
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetObjectLabel(All identifier, int name, int bufSize, out int length, [Out] StringBuilder label)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[210]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600495E RID: 18782 RVA: 0x000C9848 File Offset: 0x000C7A48
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectLabel(All identifier, int name, int bufSize, [Out] int* length, [Out] StringBuilder label)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, length, intPtr, GL.EntryPoints[210]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x0600495F RID: 18783 RVA: 0x000C9888 File Offset: 0x000C7A88
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetObjectLabel(All identifier, uint name, int bufSize, [Out] int[] length, [Out] StringBuilder label)
		{
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[210]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06004960 RID: 18784 RVA: 0x000C98DC File Offset: 0x000C7ADC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetObjectLabel(All identifier, uint name, int bufSize, out int length, [Out] StringBuilder label)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[210]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06004961 RID: 18785 RVA: 0x000C991C File Offset: 0x000C7B1C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetObjectLabel(All identifier, uint name, int bufSize, [Out] int* length, [Out] StringBuilder label)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, length, intPtr, GL.EntryPoints[210]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06004962 RID: 18786 RVA: 0x000C995C File Offset: 0x000C7B5C
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, int name, int bufSize, [Out] int[] length, [Out] StringBuilder label)
		{
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[210]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06004963 RID: 18787 RVA: 0x000C99B0 File Offset: 0x000C7BB0
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, int name, int bufSize, out int length, [Out] StringBuilder label)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[210]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06004964 RID: 18788 RVA: 0x000C99F0 File Offset: 0x000C7BF0
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, int name, int bufSize, [Out] int* length, [Out] StringBuilder label)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, length, intPtr, GL.EntryPoints[210]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06004965 RID: 18789 RVA: 0x000C9A30 File Offset: 0x000C7C30
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, uint name, int bufSize, [Out] int[] length, [Out] StringBuilder label)
		{
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[210]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06004966 RID: 18790 RVA: 0x000C9A84 File Offset: 0x000C7C84
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, uint name, int bufSize, out int length, [Out] StringBuilder label)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[210]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06004967 RID: 18791 RVA: 0x000C9AC4 File Offset: 0x000C7CC4
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, uint name, int bufSize, [Out] int* length, [Out] StringBuilder label)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, length, intPtr, GL.EntryPoints[210]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06004968 RID: 18792 RVA: 0x000C9B04 File Offset: 0x000C7D04
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label)
		{
			fixed (int* ptr2 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				int* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, ptr3, intPtr, GL.EntryPoints[213]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06004969 RID: 18793 RVA: 0x000C9B54 File Offset: 0x000C7D54
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, out int length, [Out] StringBuilder label)
		{
			fixed (int* ptr2 = &length)
			{
				int* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, ptr3, intPtr, GL.EntryPoints[213]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600496A RID: 18794 RVA: 0x000C9B94 File Offset: 0x000C7D94
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [Out] int* length, [Out] StringBuilder label)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
			calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, length, intPtr, GL.EntryPoints[213]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x0600496B RID: 18795 RVA: 0x000C9BD0 File Offset: 0x000C7DD0
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[213]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x0600496C RID: 18796 RVA: 0x000C9C34 File Offset: 0x000C7E34
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = &length)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[213]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x0600496D RID: 18797 RVA: 0x000C9C88 File Offset: 0x000C7E88
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[213]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x0600496E RID: 18798 RVA: 0x000C9CD8 File Offset: 0x000C7ED8
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[213]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x0600496F RID: 18799 RVA: 0x000C9D40 File Offset: 0x000C7F40
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = &length)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[213]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x06004970 RID: 18800 RVA: 0x000C9D98 File Offset: 0x000C7F98
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[213]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06004971 RID: 18801 RVA: 0x000C9DEC File Offset: 0x000C7FEC
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[213]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x06004972 RID: 18802 RVA: 0x000C9E58 File Offset: 0x000C8058
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = &length)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[213]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x06004973 RID: 18803 RVA: 0x000C9EB0 File Offset: 0x000C80B0
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[213]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06004974 RID: 18804 RVA: 0x000C9F04 File Offset: 0x000C8104
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = &ptr)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[213]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x06004975 RID: 18805 RVA: 0x000C9F58 File Offset: 0x000C8158
		[CLSCompliant(false)]
		[Obsolete("Use out overload instead")]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = &ptr)
			{
				T0* ptr3 = ptr2;
				fixed (int* ptr4 = &length)
				{
					int* ptr5 = ptr4;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[213]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}
		}

		// Token: 0x06004976 RID: 18806 RVA: 0x000C9F98 File Offset: 0x000C8198
		[Obsolete("Use out overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
		{
			fixed (T0* ptr2 = &ptr)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[213]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06004977 RID: 18807 RVA: 0x000C9FD8 File Offset: 0x000C81D8
		[Obsolete("Use strongly-typed overload instead")]
		public static void GetPointer(All pname, [Out] IntPtr @params)
		{
			calli(System.Void(System.Int32,System.IntPtr), pname, @params, GL.EntryPoints[225]);
		}

		// Token: 0x06004978 RID: 18808 RVA: 0x000C9FEC File Offset: 0x000C81EC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetPointer<T1>(All pname, [In] [Out] T1[] @params) where T1 : struct
		{
			fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[225]);
			}
		}

		// Token: 0x06004979 RID: 18809 RVA: 0x000CA020 File Offset: 0x000C8220
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetPointer<T1>(All pname, [In] [Out] T1[,] @params) where T1 : struct
		{
			fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[225]);
			}
		}

		// Token: 0x0600497A RID: 18810 RVA: 0x000CA058 File Offset: 0x000C8258
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetPointer<T1>(All pname, [In] [Out] T1[,,] @params) where T1 : struct
		{
			fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[225]);
			}
		}

		// Token: 0x0600497B RID: 18811 RVA: 0x000CA094 File Offset: 0x000C8294
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetPointer<T1>(All pname, [In] [Out] ref T1 @params) where T1 : struct
		{
			fixed (T1* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[225]);
			}
		}

		// Token: 0x0600497C RID: 18812 RVA: 0x000CA0B8 File Offset: 0x000C82B8
		public static void GetPointer(GetPointervPName pname, [Out] IntPtr @params)
		{
			calli(System.Void(System.Int32,System.IntPtr), pname, @params, GL.EntryPoints[225]);
		}

		// Token: 0x0600497D RID: 18813 RVA: 0x000CA0CC File Offset: 0x000C82CC
		[CLSCompliant(false)]
		public unsafe static void GetPointer<T1>(GetPointervPName pname, [In] [Out] T1[] @params) where T1 : struct
		{
			fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[225]);
			}
		}

		// Token: 0x0600497E RID: 18814 RVA: 0x000CA100 File Offset: 0x000C8300
		[CLSCompliant(false)]
		public unsafe static void GetPointer<T1>(GetPointervPName pname, [In] [Out] T1[,] @params) where T1 : struct
		{
			fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[225]);
			}
		}

		// Token: 0x0600497F RID: 18815 RVA: 0x000CA138 File Offset: 0x000C8338
		[CLSCompliant(false)]
		public unsafe static void GetPointer<T1>(GetPointervPName pname, [In] [Out] T1[,,] @params) where T1 : struct
		{
			fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[225]);
			}
		}

		// Token: 0x06004980 RID: 18816 RVA: 0x000CA174 File Offset: 0x000C8374
		public unsafe static void GetPointer<T1>(GetPointervPName pname, [In] [Out] ref T1 @params) where T1 : struct
		{
			fixed (T1* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[225]);
			}
		}

		// Token: 0x06004981 RID: 18817 RVA: 0x000CA198 File Offset: 0x000C8398
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary(int program, int bufSize, out int length, out All binaryFormat, [Out] IntPtr binary)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (All* ptr3 = &binaryFormat)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr3, binary, GL.EntryPoints[227]);
				}
			}
		}

		// Token: 0x06004982 RID: 18818 RVA: 0x000CA1C4 File Offset: 0x000C83C4
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, out int length, out All binaryFormat, [In] [Out] T4[] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (All* ptr3 = &binaryFormat)
				{
					All* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[227]);
					}
				}
			}
		}

		// Token: 0x06004983 RID: 18819 RVA: 0x000CA204 File Offset: 0x000C8404
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, out int length, out All binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (All* ptr3 = &binaryFormat)
				{
					All* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[227]);
					}
				}
			}
		}

		// Token: 0x06004984 RID: 18820 RVA: 0x000CA248 File Offset: 0x000C8448
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, out int length, out All binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (All* ptr3 = &binaryFormat)
				{
					All* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[227]);
					}
				}
			}
		}

		// Token: 0x06004985 RID: 18821 RVA: 0x000CA290 File Offset: 0x000C8490
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, out int length, out All binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (All* ptr3 = &binaryFormat)
				{
					All* ptr4 = ptr3;
					fixed (T4* ptr5 = &binary)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[227]);
					}
				}
			}
		}

		// Token: 0x06004986 RID: 18822 RVA: 0x000CA2BC File Offset: 0x000C84BC
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary(int program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [Out] IntPtr binary)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, binary, GL.EntryPoints[227]);
		}

		// Token: 0x06004987 RID: 18823 RVA: 0x000CA2D4 File Offset: 0x000C84D4
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In] [Out] T4[] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[227]);
			}
		}

		// Token: 0x06004988 RID: 18824 RVA: 0x000CA310 File Offset: 0x000C8510
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[227]);
			}
		}

		// Token: 0x06004989 RID: 18825 RVA: 0x000CA350 File Offset: 0x000C8550
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[227]);
			}
		}

		// Token: 0x0600498A RID: 18826 RVA: 0x000CA390 File Offset: 0x000C8590
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
		{
			fixed (T4* ptr = &binary)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[227]);
			}
		}

		// Token: 0x0600498B RID: 18827 RVA: 0x000CA3B8 File Offset: 0x000C85B8
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary(uint program, int bufSize, out int length, out All binaryFormat, [Out] IntPtr binary)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (All* ptr3 = &binaryFormat)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr3, binary, GL.EntryPoints[227]);
				}
			}
		}

		// Token: 0x0600498C RID: 18828 RVA: 0x000CA3E4 File Offset: 0x000C85E4
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, out int length, out All binaryFormat, [In] [Out] T4[] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (All* ptr3 = &binaryFormat)
				{
					All* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[227]);
					}
				}
			}
		}

		// Token: 0x0600498D RID: 18829 RVA: 0x000CA424 File Offset: 0x000C8624
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, out int length, out All binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (All* ptr3 = &binaryFormat)
				{
					All* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[227]);
					}
				}
			}
		}

		// Token: 0x0600498E RID: 18830 RVA: 0x000CA468 File Offset: 0x000C8668
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, out int length, out All binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (All* ptr3 = &binaryFormat)
				{
					All* ptr4 = ptr3;
					fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[227]);
					}
				}
			}
		}

		// Token: 0x0600498F RID: 18831 RVA: 0x000CA4B0 File Offset: 0x000C86B0
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, out int length, out All binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (All* ptr3 = &binaryFormat)
				{
					All* ptr4 = ptr3;
					fixed (T4* ptr5 = &binary)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[227]);
					}
				}
			}
		}

		// Token: 0x06004990 RID: 18832 RVA: 0x000CA4DC File Offset: 0x000C86DC
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [Out] IntPtr binary)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, binary, GL.EntryPoints[227]);
		}

		// Token: 0x06004991 RID: 18833 RVA: 0x000CA4F4 File Offset: 0x000C86F4
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In] [Out] T4[] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[227]);
			}
		}

		// Token: 0x06004992 RID: 18834 RVA: 0x000CA530 File Offset: 0x000C8730
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[227]);
			}
		}

		// Token: 0x06004993 RID: 18835 RVA: 0x000CA570 File Offset: 0x000C8770
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
		{
			fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[227]);
			}
		}

		// Token: 0x06004994 RID: 18836 RVA: 0x000CA5B0 File Offset: 0x000C87B0
		[CLSCompliant(false)]
		public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
		{
			fixed (T4* ptr = &binary)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[227]);
			}
		}

		// Token: 0x06004995 RID: 18837 RVA: 0x000CA5D8 File Offset: 0x000C87D8
		[CLSCompliant(false)]
		public unsafe static void GetProgramInfoLog(int program, int bufSize, out int length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, bufSize, ptr2, intPtr, GL.EntryPoints[229]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06004996 RID: 18838 RVA: 0x000CA618 File Offset: 0x000C8818
		[CLSCompliant(false)]
		public unsafe static void GetProgramInfoLog(int program, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, bufSize, length, intPtr, GL.EntryPoints[229]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06004997 RID: 18839 RVA: 0x000CA654 File Offset: 0x000C8854
		[CLSCompliant(false)]
		public unsafe static void GetProgramInfoLog(uint program, int bufSize, out int length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, bufSize, ptr2, intPtr, GL.EntryPoints[229]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x06004998 RID: 18840 RVA: 0x000CA694 File Offset: 0x000C8894
		[CLSCompliant(false)]
		public unsafe static void GetProgramInfoLog(uint program, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), program, bufSize, length, intPtr, GL.EntryPoints[229]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06004999 RID: 18841 RVA: 0x000CA6D0 File Offset: 0x000C88D0
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgram(int program, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[230]);
			}
		}

		// Token: 0x0600499A RID: 18842 RVA: 0x000CA708 File Offset: 0x000C8908
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetProgram(int program, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[230]);
			}
		}

		// Token: 0x0600499B RID: 18843 RVA: 0x000CA72C File Offset: 0x000C892C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgram(int program, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, @params, GL.EntryPoints[230]);
		}

		// Token: 0x0600499C RID: 18844 RVA: 0x000CA744 File Offset: 0x000C8944
		[CLSCompliant(false)]
		public unsafe static void GetProgram(int program, GetProgramParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[230]);
			}
		}

		// Token: 0x0600499D RID: 18845 RVA: 0x000CA77C File Offset: 0x000C897C
		[CLSCompliant(false)]
		public unsafe static void GetProgram(int program, GetProgramParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[230]);
			}
		}

		// Token: 0x0600499E RID: 18846 RVA: 0x000CA7A0 File Offset: 0x000C89A0
		[CLSCompliant(false)]
		public unsafe static void GetProgram(int program, GetProgramParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, @params, GL.EntryPoints[230]);
		}

		// Token: 0x0600499F RID: 18847 RVA: 0x000CA7B8 File Offset: 0x000C89B8
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetProgram(uint program, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[230]);
			}
		}

		// Token: 0x060049A0 RID: 18848 RVA: 0x000CA7F0 File Offset: 0x000C89F0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetProgram(uint program, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[230]);
			}
		}

		// Token: 0x060049A1 RID: 18849 RVA: 0x000CA814 File Offset: 0x000C8A14
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetProgram(uint program, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, @params, GL.EntryPoints[230]);
		}

		// Token: 0x060049A2 RID: 18850 RVA: 0x000CA82C File Offset: 0x000C8A2C
		[CLSCompliant(false)]
		public unsafe static void GetProgram(uint program, GetProgramParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[230]);
			}
		}

		// Token: 0x060049A3 RID: 18851 RVA: 0x000CA864 File Offset: 0x000C8A64
		[CLSCompliant(false)]
		public unsafe static void GetProgram(uint program, GetProgramParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, ptr, GL.EntryPoints[230]);
			}
		}

		// Token: 0x060049A4 RID: 18852 RVA: 0x000CA888 File Offset: 0x000C8A88
		[CLSCompliant(false)]
		public unsafe static void GetProgram(uint program, GetProgramParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, pname, @params, GL.EntryPoints[230]);
		}

		// Token: 0x060049A5 RID: 18853 RVA: 0x000CA8A0 File Offset: 0x000C8AA0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetQuery(All target, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[233]);
			}
		}

		// Token: 0x060049A6 RID: 18854 RVA: 0x000CA8D8 File Offset: 0x000C8AD8
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetQuery(All target, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[233]);
			}
		}

		// Token: 0x060049A7 RID: 18855 RVA: 0x000CA8FC File Offset: 0x000C8AFC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetQuery(All target, All pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[233]);
		}

		// Token: 0x060049A8 RID: 18856 RVA: 0x000CA914 File Offset: 0x000C8B14
		[CLSCompliant(false)]
		public unsafe static void GetQuery(QueryTarget target, GetQueryParam pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[233]);
			}
		}

		// Token: 0x060049A9 RID: 18857 RVA: 0x000CA94C File Offset: 0x000C8B4C
		[CLSCompliant(false)]
		public unsafe static void GetQuery(QueryTarget target, GetQueryParam pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[233]);
			}
		}

		// Token: 0x060049AA RID: 18858 RVA: 0x000CA970 File Offset: 0x000C8B70
		[CLSCompliant(false)]
		public unsafe static void GetQuery(QueryTarget target, GetQueryParam pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[233]);
		}

		// Token: 0x060049AB RID: 18859 RVA: 0x000CA988 File Offset: 0x000C8B88
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[238]);
			}
		}

		// Token: 0x060049AC RID: 18860 RVA: 0x000CA9C0 File Offset: 0x000C8BC0
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[238]);
			}
		}

		// Token: 0x060049AD RID: 18861 RVA: 0x000CA9E4 File Offset: 0x000C8BE4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, @params, GL.EntryPoints[238]);
		}

		// Token: 0x060049AE RID: 18862 RVA: 0x000CA9FC File Offset: 0x000C8BFC
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[238]);
			}
		}

		// Token: 0x060049AF RID: 18863 RVA: 0x000CAA34 File Offset: 0x000C8C34
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[238]);
			}
		}

		// Token: 0x060049B0 RID: 18864 RVA: 0x000CAA58 File Offset: 0x000C8C58
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, @params, GL.EntryPoints[238]);
		}

		// Token: 0x060049B1 RID: 18865 RVA: 0x000CAA70 File Offset: 0x000C8C70
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, All pname, [Out] uint[] @params)
		{
			fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[238]);
			}
		}

		// Token: 0x060049B2 RID: 18866 RVA: 0x000CAAA8 File Offset: 0x000C8CA8
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, All pname, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[238]);
			}
		}

		// Token: 0x060049B3 RID: 18867 RVA: 0x000CAACC File Offset: 0x000C8CCC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, All pname, [Out] uint* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, @params, GL.EntryPoints[238]);
		}

		// Token: 0x060049B4 RID: 18868 RVA: 0x000CAAE4 File Offset: 0x000C8CE4
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] uint[] @params)
		{
			fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[238]);
			}
		}

		// Token: 0x060049B5 RID: 18869 RVA: 0x000CAB1C File Offset: 0x000C8D1C
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[238]);
			}
		}

		// Token: 0x060049B6 RID: 18870 RVA: 0x000CAB40 File Offset: 0x000C8D40
		[CLSCompliant(false)]
		public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] uint* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, @params, GL.EntryPoints[238]);
		}

		// Token: 0x060049B7 RID: 18871 RVA: 0x000CAB58 File Offset: 0x000C8D58
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetRenderbufferParameter(All target, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[240]);
			}
		}

		// Token: 0x060049B8 RID: 18872 RVA: 0x000CAB90 File Offset: 0x000C8D90
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetRenderbufferParameter(All target, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[240]);
			}
		}

		// Token: 0x060049B9 RID: 18873 RVA: 0x000CABB4 File Offset: 0x000C8DB4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetRenderbufferParameter(All target, All pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[240]);
		}

		// Token: 0x060049BA RID: 18874 RVA: 0x000CABCC File Offset: 0x000C8DCC
		[CLSCompliant(false)]
		public unsafe static void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[240]);
			}
		}

		// Token: 0x060049BB RID: 18875 RVA: 0x000CAC04 File Offset: 0x000C8E04
		[CLSCompliant(false)]
		public unsafe static void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[240]);
			}
		}

		// Token: 0x060049BC RID: 18876 RVA: 0x000CAC28 File Offset: 0x000C8E28
		[CLSCompliant(false)]
		public unsafe static void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[240]);
		}

		// Token: 0x060049BD RID: 18877 RVA: 0x000CAC40 File Offset: 0x000C8E40
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, All pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[241]);
			}
		}

		// Token: 0x060049BE RID: 18878 RVA: 0x000CAC78 File Offset: 0x000C8E78
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, All pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[241]);
			}
		}

		// Token: 0x060049BF RID: 18879 RVA: 0x000CAC9C File Offset: 0x000C8E9C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetSamplerParameter(int sampler, All pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, @params, GL.EntryPoints[241]);
		}

		// Token: 0x060049C0 RID: 18880 RVA: 0x000CACB4 File Offset: 0x000C8EB4
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[241]);
			}
		}

		// Token: 0x060049C1 RID: 18881 RVA: 0x000CACEC File Offset: 0x000C8EEC
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[241]);
			}
		}

		// Token: 0x060049C2 RID: 18882 RVA: 0x000CAD10 File Offset: 0x000C8F10
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, @params, GL.EntryPoints[241]);
		}

		// Token: 0x060049C3 RID: 18883 RVA: 0x000CAD28 File Offset: 0x000C8F28
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetSamplerParameter(uint sampler, All pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[241]);
			}
		}

		// Token: 0x060049C4 RID: 18884 RVA: 0x000CAD60 File Offset: 0x000C8F60
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetSamplerParameter(uint sampler, All pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[241]);
			}
		}

		// Token: 0x060049C5 RID: 18885 RVA: 0x000CAD84 File Offset: 0x000C8F84
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, All pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, @params, GL.EntryPoints[241]);
		}

		// Token: 0x060049C6 RID: 18886 RVA: 0x000CAD9C File Offset: 0x000C8F9C
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[241]);
			}
		}

		// Token: 0x060049C7 RID: 18887 RVA: 0x000CADD4 File Offset: 0x000C8FD4
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[241]);
			}
		}

		// Token: 0x060049C8 RID: 18888 RVA: 0x000CADF8 File Offset: 0x000C8FF8
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, @params, GL.EntryPoints[241]);
		}

		// Token: 0x060049C9 RID: 18889 RVA: 0x000CAE10 File Offset: 0x000C9010
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[244]);
			}
		}

		// Token: 0x060049CA RID: 18890 RVA: 0x000CAE48 File Offset: 0x000C9048
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[244]);
			}
		}

		// Token: 0x060049CB RID: 18891 RVA: 0x000CAE6C File Offset: 0x000C906C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetSamplerParameter(int sampler, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[244]);
		}

		// Token: 0x060049CC RID: 18892 RVA: 0x000CAE84 File Offset: 0x000C9084
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[244]);
			}
		}

		// Token: 0x060049CD RID: 18893 RVA: 0x000CAEBC File Offset: 0x000C90BC
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[244]);
			}
		}

		// Token: 0x060049CE RID: 18894 RVA: 0x000CAEE0 File Offset: 0x000C90E0
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(int sampler, SamplerParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[244]);
		}

		// Token: 0x060049CF RID: 18895 RVA: 0x000CAEF8 File Offset: 0x000C90F8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetSamplerParameter(uint sampler, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[244]);
			}
		}

		// Token: 0x060049D0 RID: 18896 RVA: 0x000CAF30 File Offset: 0x000C9130
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetSamplerParameter(uint sampler, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[244]);
			}
		}

		// Token: 0x060049D1 RID: 18897 RVA: 0x000CAF54 File Offset: 0x000C9154
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[244]);
		}

		// Token: 0x060049D2 RID: 18898 RVA: 0x000CAF6C File Offset: 0x000C916C
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[244]);
			}
		}

		// Token: 0x060049D3 RID: 18899 RVA: 0x000CAFA4 File Offset: 0x000C91A4
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[244]);
			}
		}

		// Token: 0x060049D4 RID: 18900 RVA: 0x000CAFC8 File Offset: 0x000C91C8
		[CLSCompliant(false)]
		public unsafe static void GetSamplerParameter(uint sampler, SamplerParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[244]);
		}

		// Token: 0x060049D5 RID: 18901 RVA: 0x000CAFE0 File Offset: 0x000C91E0
		[CLSCompliant(false)]
		public unsafe static void GetShaderInfoLog(int shader, int bufSize, out int length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, ptr2, intPtr, GL.EntryPoints[245]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060049D6 RID: 18902 RVA: 0x000CB020 File Offset: 0x000C9220
		[CLSCompliant(false)]
		public unsafe static void GetShaderInfoLog(int shader, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, length, intPtr, GL.EntryPoints[245]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060049D7 RID: 18903 RVA: 0x000CB05C File Offset: 0x000C925C
		[CLSCompliant(false)]
		public unsafe static void GetShaderInfoLog(uint shader, int bufSize, out int length, [Out] StringBuilder infoLog)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, ptr2, intPtr, GL.EntryPoints[245]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060049D8 RID: 18904 RVA: 0x000CB09C File Offset: 0x000C929C
		[CLSCompliant(false)]
		public unsafe static void GetShaderInfoLog(uint shader, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, length, intPtr, GL.EntryPoints[245]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060049D9 RID: 18905 RVA: 0x000CB0D8 File Offset: 0x000C92D8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetShader(int shader, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, ptr, GL.EntryPoints[246]);
			}
		}

		// Token: 0x060049DA RID: 18906 RVA: 0x000CB110 File Offset: 0x000C9310
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetShader(int shader, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, ptr, GL.EntryPoints[246]);
			}
		}

		// Token: 0x060049DB RID: 18907 RVA: 0x000CB134 File Offset: 0x000C9334
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetShader(int shader, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, @params, GL.EntryPoints[246]);
		}

		// Token: 0x060049DC RID: 18908 RVA: 0x000CB14C File Offset: 0x000C934C
		[CLSCompliant(false)]
		public unsafe static void GetShader(int shader, ShaderParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, ptr, GL.EntryPoints[246]);
			}
		}

		// Token: 0x060049DD RID: 18909 RVA: 0x000CB184 File Offset: 0x000C9384
		[CLSCompliant(false)]
		public unsafe static void GetShader(int shader, ShaderParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, ptr, GL.EntryPoints[246]);
			}
		}

		// Token: 0x060049DE RID: 18910 RVA: 0x000CB1A8 File Offset: 0x000C93A8
		[CLSCompliant(false)]
		public unsafe static void GetShader(int shader, ShaderParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, @params, GL.EntryPoints[246]);
		}

		// Token: 0x060049DF RID: 18911 RVA: 0x000CB1C0 File Offset: 0x000C93C0
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetShader(uint shader, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, ptr, GL.EntryPoints[246]);
			}
		}

		// Token: 0x060049E0 RID: 18912 RVA: 0x000CB1F8 File Offset: 0x000C93F8
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetShader(uint shader, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, ptr, GL.EntryPoints[246]);
			}
		}

		// Token: 0x060049E1 RID: 18913 RVA: 0x000CB21C File Offset: 0x000C941C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetShader(uint shader, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, @params, GL.EntryPoints[246]);
		}

		// Token: 0x060049E2 RID: 18914 RVA: 0x000CB234 File Offset: 0x000C9434
		[CLSCompliant(false)]
		public unsafe static void GetShader(uint shader, ShaderParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, ptr, GL.EntryPoints[246]);
			}
		}

		// Token: 0x060049E3 RID: 18915 RVA: 0x000CB26C File Offset: 0x000C946C
		[CLSCompliant(false)]
		public unsafe static void GetShader(uint shader, ShaderParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, ptr, GL.EntryPoints[246]);
			}
		}

		// Token: 0x060049E4 RID: 18916 RVA: 0x000CB290 File Offset: 0x000C9490
		[CLSCompliant(false)]
		public unsafe static void GetShader(uint shader, ShaderParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), shader, pname, @params, GL.EntryPoints[246]);
		}

		// Token: 0x060049E5 RID: 18917 RVA: 0x000CB2A8 File Offset: 0x000C94A8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetShaderPrecisionFormat(All shadertype, All precisiontype, [Out] int[] range, [Out] int[] precision)
		{
			fixed (int* ptr = ref (range != null && range.Length != 0) ? ref range[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (precision != null && precision.Length != 0) ? ref precision[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32*), shadertype, precisiontype, ptr2, ptr3, GL.EntryPoints[247]);
				}
			}
		}

		// Token: 0x060049E6 RID: 18918 RVA: 0x000CB2F4 File Offset: 0x000C94F4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetShaderPrecisionFormat(All shadertype, All precisiontype, out int range, out int precision)
		{
			fixed (int* ptr = &range)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &precision)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32*), shadertype, precisiontype, ptr2, ptr3, GL.EntryPoints[247]);
				}
			}
		}

		// Token: 0x060049E7 RID: 18919 RVA: 0x000CB31C File Offset: 0x000C951C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetShaderPrecisionFormat(All shadertype, All precisiontype, [Out] int* range, [Out] int* precision)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32*), shadertype, precisiontype, range, precision, GL.EntryPoints[247]);
		}

		// Token: 0x060049E8 RID: 18920 RVA: 0x000CB334 File Offset: 0x000C9534
		[CLSCompliant(false)]
		public unsafe static void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecision precisiontype, [Out] int[] range, [Out] int[] precision)
		{
			fixed (int* ptr = ref (range != null && range.Length != 0) ? ref range[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (precision != null && precision.Length != 0) ? ref precision[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32*), shadertype, precisiontype, ptr2, ptr3, GL.EntryPoints[247]);
				}
			}
		}

		// Token: 0x060049E9 RID: 18921 RVA: 0x000CB380 File Offset: 0x000C9580
		[CLSCompliant(false)]
		public unsafe static void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecision precisiontype, out int range, out int precision)
		{
			fixed (int* ptr = &range)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &precision)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32*), shadertype, precisiontype, ptr2, ptr3, GL.EntryPoints[247]);
				}
			}
		}

		// Token: 0x060049EA RID: 18922 RVA: 0x000CB3A8 File Offset: 0x000C95A8
		[CLSCompliant(false)]
		public unsafe static void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecision precisiontype, [Out] int* range, [Out] int* precision)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32*), shadertype, precisiontype, range, precision, GL.EntryPoints[247]);
		}

		// Token: 0x060049EB RID: 18923 RVA: 0x000CB3C0 File Offset: 0x000C95C0
		[CLSCompliant(false)]
		public unsafe static void GetShaderSource(int shader, int bufSize, out int length, [Out] StringBuilder source)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, ptr2, intPtr, GL.EntryPoints[248]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060049EC RID: 18924 RVA: 0x000CB400 File Offset: 0x000C9600
		[CLSCompliant(false)]
		public unsafe static void GetShaderSource(int shader, int bufSize, [Out] int* length, [Out] StringBuilder source)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, length, intPtr, GL.EntryPoints[248]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060049ED RID: 18925 RVA: 0x000CB43C File Offset: 0x000C963C
		[CLSCompliant(false)]
		public unsafe static void GetShaderSource(uint shader, int bufSize, out int length, [Out] StringBuilder source)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, ptr2, intPtr, GL.EntryPoints[248]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x060049EE RID: 18926 RVA: 0x000CB47C File Offset: 0x000C967C
		[CLSCompliant(false)]
		public unsafe static void GetShaderSource(uint shader, int bufSize, [Out] int* length, [Out] StringBuilder source)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
			calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufSize, length, intPtr, GL.EntryPoints[248]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x060049EF RID: 18927 RVA: 0x000CB4B8 File Offset: 0x000C96B8
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static string GetString(All name)
		{
			return new string((sbyte*)((void*)calli(System.IntPtr(System.Int32), name, GL.EntryPoints[249])));
		}

		// Token: 0x060049F0 RID: 18928 RVA: 0x000CB4D8 File Offset: 0x000C96D8
		public unsafe static string GetString(StringName name)
		{
			return new string((sbyte*)((void*)calli(System.IntPtr(System.Int32), name, GL.EntryPoints[249])));
		}

		// Token: 0x060049F1 RID: 18929 RVA: 0x000CB4F8 File Offset: 0x000C96F8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static string GetString(All name, int index)
		{
			return new string((sbyte*)((void*)calli(System.IntPtr(System.Int32,System.UInt32), name, index, GL.EntryPoints[250])));
		}

		// Token: 0x060049F2 RID: 18930 RVA: 0x000CB518 File Offset: 0x000C9718
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static string GetString(All name, uint index)
		{
			return new string((sbyte*)((void*)calli(System.IntPtr(System.Int32,System.UInt32), name, index, GL.EntryPoints[250])));
		}

		// Token: 0x060049F3 RID: 18931 RVA: 0x000CB538 File Offset: 0x000C9738
		[CLSCompliant(false)]
		public unsafe static string GetString(StringNameIndexed name, int index)
		{
			return new string((sbyte*)((void*)calli(System.IntPtr(System.Int32,System.UInt32), name, index, GL.EntryPoints[250])));
		}

		// Token: 0x060049F4 RID: 18932 RVA: 0x000CB558 File Offset: 0x000C9758
		[CLSCompliant(false)]
		public unsafe static string GetString(StringNameIndexed name, uint index)
		{
			return new string((sbyte*)((void*)calli(System.IntPtr(System.Int32,System.UInt32), name, index, GL.EntryPoints[250])));
		}

		// Token: 0x060049F5 RID: 18933 RVA: 0x000CB578 File Offset: 0x000C9778
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetSync(IntPtr sync, All pname, int bufSize, out int length, [Out] int[] values)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, ptr2, ptr3, GL.EntryPoints[251]);
				}
			}
		}

		// Token: 0x060049F6 RID: 18934 RVA: 0x000CB5B8 File Offset: 0x000C97B8
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSync(IntPtr sync, All pname, int bufSize, out int length, out int values)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &values)
				{
					calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, ptr2, ptr3, GL.EntryPoints[251]);
				}
			}
		}

		// Token: 0x060049F7 RID: 18935 RVA: 0x000CB5E4 File Offset: 0x000C97E4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetSync(IntPtr sync, All pname, int bufSize, [Out] int* length, [Out] int* values)
		{
			calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, length, values, GL.EntryPoints[251]);
		}

		// Token: 0x060049F8 RID: 18936 RVA: 0x000CB5FC File Offset: 0x000C97FC
		[CLSCompliant(false)]
		public unsafe static void GetSync(IntPtr sync, SyncParameterName pname, int bufSize, out int length, [Out] int[] values)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
				{
					calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, ptr2, ptr3, GL.EntryPoints[251]);
				}
			}
		}

		// Token: 0x060049F9 RID: 18937 RVA: 0x000CB63C File Offset: 0x000C983C
		[CLSCompliant(false)]
		public unsafe static void GetSync(IntPtr sync, SyncParameterName pname, int bufSize, out int length, out int values)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &values)
				{
					calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, ptr2, ptr3, GL.EntryPoints[251]);
				}
			}
		}

		// Token: 0x060049FA RID: 18938 RVA: 0x000CB668 File Offset: 0x000C9868
		[CLSCompliant(false)]
		public unsafe static void GetSync(IntPtr sync, SyncParameterName pname, int bufSize, [Out] int* length, [Out] int* values)
		{
			calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, length, values, GL.EntryPoints[251]);
		}

		// Token: 0x060049FB RID: 18939 RVA: 0x000CB680 File Offset: 0x000C9880
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetTexParameter(All target, All pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[253]);
			}
		}

		// Token: 0x060049FC RID: 18940 RVA: 0x000CB6B8 File Offset: 0x000C98B8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetTexParameter(All target, All pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[253]);
			}
		}

		// Token: 0x060049FD RID: 18941 RVA: 0x000CB6DC File Offset: 0x000C98DC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetTexParameter(All target, All pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[253]);
		}

		// Token: 0x060049FE RID: 18942 RVA: 0x000CB6F4 File Offset: 0x000C98F4
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameterName pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[253]);
			}
		}

		// Token: 0x060049FF RID: 18943 RVA: 0x000CB72C File Offset: 0x000C992C
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameterName pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[253]);
			}
		}

		// Token: 0x06004A00 RID: 18944 RVA: 0x000CB750 File Offset: 0x000C9950
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameterName pname, [Out] float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[253]);
		}

		// Token: 0x06004A01 RID: 18945 RVA: 0x000CB768 File Offset: 0x000C9968
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(All target, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[256]);
			}
		}

		// Token: 0x06004A02 RID: 18946 RVA: 0x000CB7A0 File Offset: 0x000C99A0
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(All target, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[256]);
			}
		}

		// Token: 0x06004A03 RID: 18947 RVA: 0x000CB7C4 File Offset: 0x000C99C4
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetTexParameter(All target, All pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[256]);
		}

		// Token: 0x06004A04 RID: 18948 RVA: 0x000CB7DC File Offset: 0x000C99DC
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameterName pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[256]);
			}
		}

		// Token: 0x06004A05 RID: 18949 RVA: 0x000CB814 File Offset: 0x000C9A14
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameterName pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[256]);
			}
		}

		// Token: 0x06004A06 RID: 18950 RVA: 0x000CB838 File Offset: 0x000C9A38
		[CLSCompliant(false)]
		public unsafe static void GetTexParameter(TextureTarget target, GetTextureParameterName pname, [Out] int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[256]);
		}

		// Token: 0x06004A07 RID: 18951 RVA: 0x000CB850 File Offset: 0x000C9A50
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetTransformFeedbackVarying(int program, int index, int bufSize, out int length, out int size, out All type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (All* ptr5 = &type)
					{
						All* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[257]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x06004A08 RID: 18952 RVA: 0x000CB89C File Offset: 0x000C9A9C
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(int program, int index, int bufSize, out int length, out int size, out TransformFeedbackType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (TransformFeedbackType* ptr5 = &type)
					{
						TransformFeedbackType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[257]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x06004A09 RID: 18953 RVA: 0x000CB8E8 File Offset: 0x000C9AE8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetTransformFeedbackVarying(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] All* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[257]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06004A0A RID: 18954 RVA: 0x000CB92C File Offset: 0x000C9B2C
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] TransformFeedbackType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[257]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06004A0B RID: 18955 RVA: 0x000CB970 File Offset: 0x000C9B70
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, out int size, out All type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (All* ptr5 = &type)
					{
						All* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[257]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x06004A0C RID: 18956 RVA: 0x000CB9BC File Offset: 0x000C9BBC
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, out int size, out TransformFeedbackType type, [Out] StringBuilder name)
		{
			fixed (int* ptr = &length)
			{
				int* ptr2 = ptr;
				fixed (int* ptr3 = &size)
				{
					int* ptr4 = ptr3;
					fixed (TransformFeedbackType* ptr5 = &type)
					{
						TransformFeedbackType* ptr6 = ptr5;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, ptr2, ptr4, ptr6, intPtr, GL.EntryPoints[257]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}
		}

		// Token: 0x06004A0D RID: 18957 RVA: 0x000CBA08 File Offset: 0x000C9C08
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] All* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[257]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06004A0E RID: 18958 RVA: 0x000CBA4C File Offset: 0x000C9C4C
		[CLSCompliant(false)]
		public unsafe static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] TransformFeedbackType* type, [Out] StringBuilder name)
		{
			IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)name.Capacity);
			calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.IntPtr), program, index, bufSize, length, size, type, intPtr, GL.EntryPoints[257]);
			BindingsBase.MarshalPtrToStringBuilder(intPtr, name);
			Marshal.FreeHGlobal(intPtr);
		}

		// Token: 0x06004A0F RID: 18959 RVA: 0x000CBA90 File Offset: 0x000C9C90
		[CLSCompliant(false)]
		public static int GetUniformBlockIndex(int program, string uniformBlockName)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(uniformBlockName);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[259]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06004A10 RID: 18960 RVA: 0x000CBABC File Offset: 0x000C9CBC
		[CLSCompliant(false)]
		public static int GetUniformBlockIndex(uint program, string uniformBlockName)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(uniformBlockName);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[259]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06004A11 RID: 18961 RVA: 0x000CBAE8 File Offset: 0x000C9CE8
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, ptr, GL.EntryPoints[260]);
			}
		}

		// Token: 0x06004A12 RID: 18962 RVA: 0x000CBB20 File Offset: 0x000C9D20
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, ptr, GL.EntryPoints[260]);
			}
		}

		// Token: 0x06004A13 RID: 18963 RVA: 0x000CBB44 File Offset: 0x000C9D44
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, @params, GL.EntryPoints[260]);
		}

		// Token: 0x06004A14 RID: 18964 RVA: 0x000CBB5C File Offset: 0x000C9D5C
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, ptr, GL.EntryPoints[260]);
			}
		}

		// Token: 0x06004A15 RID: 18965 RVA: 0x000CBB94 File Offset: 0x000C9D94
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, ptr, GL.EntryPoints[260]);
			}
		}

		// Token: 0x06004A16 RID: 18966 RVA: 0x000CBBB8 File Offset: 0x000C9DB8
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), program, location, @params, GL.EntryPoints[260]);
		}

		// Token: 0x06004A17 RID: 18967 RVA: 0x000CBBD0 File Offset: 0x000C9DD0
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(int program, int uniformCount, string[] uniformNames, [Out] int[] uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = ref (uniformIndices != null && uniformIndices.Length != 0) ? ref uniformIndices[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr2, ptr, GL.EntryPoints[261]);
				BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
			}
		}

		// Token: 0x06004A18 RID: 18968 RVA: 0x000CBC18 File Offset: 0x000C9E18
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(int program, int uniformCount, string[] uniformNames, out int uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = &uniformIndices)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr2, ptr, GL.EntryPoints[261]);
				BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
			}
		}

		// Token: 0x06004A19 RID: 18969 RVA: 0x000CBC4C File Offset: 0x000C9E4C
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(int program, int uniformCount, string[] uniformNames, [Out] int* uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr, uniformIndices, GL.EntryPoints[261]);
			BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
		}

		// Token: 0x06004A1A RID: 18970 RVA: 0x000CBC80 File Offset: 0x000C9E80
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, [Out] uint[] uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			IntPtr intPtr2 = intPtr;
			fixed (uint* ptr = ref (uniformIndices != null && uniformIndices.Length != 0) ? ref uniformIndices[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr2, ptr, GL.EntryPoints[261]);
				BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
			}
		}

		// Token: 0x06004A1B RID: 18971 RVA: 0x000CBCC8 File Offset: 0x000C9EC8
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, out uint uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			IntPtr intPtr2 = intPtr;
			fixed (uint* ptr = &uniformIndices)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr2, ptr, GL.EntryPoints[261]);
				BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
			}
		}

		// Token: 0x06004A1C RID: 18972 RVA: 0x000CBCFC File Offset: 0x000C9EFC
		[CLSCompliant(false)]
		public unsafe static void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, [Out] uint* uniformIndices)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(uniformNames);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.UInt32*), program, uniformCount, intPtr, uniformIndices, GL.EntryPoints[261]);
			BindingsBase.FreeStringArrayPtr(intPtr, uniformNames.Length);
		}

		// Token: 0x06004A1D RID: 18973 RVA: 0x000CBD30 File Offset: 0x000C9F30
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, ptr, GL.EntryPoints[262]);
			}
		}

		// Token: 0x06004A1E RID: 18974 RVA: 0x000CBD68 File Offset: 0x000C9F68
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, ptr, GL.EntryPoints[262]);
			}
		}

		// Token: 0x06004A1F RID: 18975 RVA: 0x000CBD8C File Offset: 0x000C9F8C
		[CLSCompliant(false)]
		public unsafe static void GetUniform(int program, int location, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, @params, GL.EntryPoints[262]);
		}

		// Token: 0x06004A20 RID: 18976 RVA: 0x000CBDA4 File Offset: 0x000C9FA4
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, ptr, GL.EntryPoints[262]);
			}
		}

		// Token: 0x06004A21 RID: 18977 RVA: 0x000CBDDC File Offset: 0x000C9FDC
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, ptr, GL.EntryPoints[262]);
			}
		}

		// Token: 0x06004A22 RID: 18978 RVA: 0x000CBE00 File Offset: 0x000CA000
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), program, location, @params, GL.EntryPoints[262]);
		}

		// Token: 0x06004A23 RID: 18979 RVA: 0x000CBE18 File Offset: 0x000CA018
		[CLSCompliant(false)]
		public static int GetUniformLocation(int program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[263]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06004A24 RID: 18980 RVA: 0x000CBE44 File Offset: 0x000CA044
		[CLSCompliant(false)]
		public static int GetUniformLocation(uint program, string name)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(name);
			int result = calli(System.Int32(System.UInt32,System.IntPtr), program, intPtr, GL.EntryPoints[263]);
			BindingsBase.FreeStringPtr(intPtr);
			return result;
		}

		// Token: 0x06004A25 RID: 18981 RVA: 0x000CBE70 File Offset: 0x000CA070
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] uint[] @params)
		{
			fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), program, location, ptr, GL.EntryPoints[264]);
			}
		}

		// Token: 0x06004A26 RID: 18982 RVA: 0x000CBEA8 File Offset: 0x000CA0A8
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), program, location, ptr, GL.EntryPoints[264]);
			}
		}

		// Token: 0x06004A27 RID: 18983 RVA: 0x000CBECC File Offset: 0x000CA0CC
		[CLSCompliant(false)]
		public unsafe static void GetUniform(uint program, int location, [Out] uint* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), program, location, @params, GL.EntryPoints[264]);
		}

		// Token: 0x06004A28 RID: 18984 RVA: 0x000CBEE4 File Offset: 0x000CA0E4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, All pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[265]);
			}
		}

		// Token: 0x06004A29 RID: 18985 RVA: 0x000CBF1C File Offset: 0x000CA11C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetVertexAttrib(int index, All pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[265]);
			}
		}

		// Token: 0x06004A2A RID: 18986 RVA: 0x000CBF40 File Offset: 0x000CA140
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, All pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, @params, GL.EntryPoints[265]);
		}

		// Token: 0x06004A2B RID: 18987 RVA: 0x000CBF58 File Offset: 0x000CA158
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[265]);
			}
		}

		// Token: 0x06004A2C RID: 18988 RVA: 0x000CBF90 File Offset: 0x000CA190
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[265]);
			}
		}

		// Token: 0x06004A2D RID: 18989 RVA: 0x000CBFB4 File Offset: 0x000CA1B4
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, @params, GL.EntryPoints[265]);
		}

		// Token: 0x06004A2E RID: 18990 RVA: 0x000CBFCC File Offset: 0x000CA1CC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetVertexAttrib(uint index, All pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[265]);
			}
		}

		// Token: 0x06004A2F RID: 18991 RVA: 0x000CC004 File Offset: 0x000CA204
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetVertexAttrib(uint index, All pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[265]);
			}
		}

		// Token: 0x06004A30 RID: 18992 RVA: 0x000CC028 File Offset: 0x000CA228
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetVertexAttrib(uint index, All pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, @params, GL.EntryPoints[265]);
		}

		// Token: 0x06004A31 RID: 18993 RVA: 0x000CC040 File Offset: 0x000CA240
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[265]);
			}
		}

		// Token: 0x06004A32 RID: 18994 RVA: 0x000CC078 File Offset: 0x000CA278
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, out float @params)
		{
			fixed (float* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, ptr, GL.EntryPoints[265]);
			}
		}

		// Token: 0x06004A33 RID: 18995 RVA: 0x000CC09C File Offset: 0x000CA29C
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] float* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), index, pname, @params, GL.EntryPoints[265]);
		}

		// Token: 0x06004A34 RID: 18996 RVA: 0x000CC0B4 File Offset: 0x000CA2B4
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(int index, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[266]);
			}
		}

		// Token: 0x06004A35 RID: 18997 RVA: 0x000CC0D8 File Offset: 0x000CA2D8
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(int index, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[266]);
		}

		// Token: 0x06004A36 RID: 18998 RVA: 0x000CC0F0 File Offset: 0x000CA2F0
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(uint index, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[266]);
			}
		}

		// Token: 0x06004A37 RID: 18999 RVA: 0x000CC114 File Offset: 0x000CA314
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(uint index, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[266]);
		}

		// Token: 0x06004A38 RID: 19000 RVA: 0x000CC12C File Offset: 0x000CA32C
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(uint index, All pname, out uint @params)
		{
			fixed (uint* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), index, pname, ptr, GL.EntryPoints[267]);
			}
		}

		// Token: 0x06004A39 RID: 19001 RVA: 0x000CC150 File Offset: 0x000CA350
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribI(uint index, All pname, [Out] uint* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.UInt32*), index, pname, @params, GL.EntryPoints[267]);
		}

		// Token: 0x06004A3A RID: 19002 RVA: 0x000CC168 File Offset: 0x000CA368
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[268]);
			}
		}

		// Token: 0x06004A3B RID: 19003 RVA: 0x000CC1A0 File Offset: 0x000CA3A0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetVertexAttrib(int index, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[268]);
			}
		}

		// Token: 0x06004A3C RID: 19004 RVA: 0x000CC1C4 File Offset: 0x000CA3C4
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetVertexAttrib(int index, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[268]);
		}

		// Token: 0x06004A3D RID: 19005 RVA: 0x000CC1DC File Offset: 0x000CA3DC
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[268]);
			}
		}

		// Token: 0x06004A3E RID: 19006 RVA: 0x000CC214 File Offset: 0x000CA414
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[268]);
			}
		}

		// Token: 0x06004A3F RID: 19007 RVA: 0x000CC238 File Offset: 0x000CA438
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[268]);
		}

		// Token: 0x06004A40 RID: 19008 RVA: 0x000CC250 File Offset: 0x000CA450
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, All pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[268]);
			}
		}

		// Token: 0x06004A41 RID: 19009 RVA: 0x000CC288 File Offset: 0x000CA488
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, All pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[268]);
			}
		}

		// Token: 0x06004A42 RID: 19010 RVA: 0x000CC2AC File Offset: 0x000CA4AC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetVertexAttrib(uint index, All pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[268]);
		}

		// Token: 0x06004A43 RID: 19011 RVA: 0x000CC2C4 File Offset: 0x000CA4C4
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[268]);
			}
		}

		// Token: 0x06004A44 RID: 19012 RVA: 0x000CC2FC File Offset: 0x000CA4FC
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, out int @params)
		{
			fixed (int* ptr = &@params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, ptr, GL.EntryPoints[268]);
			}
		}

		// Token: 0x06004A45 RID: 19013 RVA: 0x000CC320 File Offset: 0x000CA520
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] int* @params)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), index, pname, @params, GL.EntryPoints[268]);
		}

		// Token: 0x06004A46 RID: 19014 RVA: 0x000CC338 File Offset: 0x000CA538
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void GetVertexAttribPointer(int index, All pname, [Out] IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, pointer, GL.EntryPoints[269]);
		}

		// Token: 0x06004A47 RID: 19015 RVA: 0x000CC350 File Offset: 0x000CA550
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(int index, All pname, [In] [Out] T2[] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[269]);
			}
		}

		// Token: 0x06004A48 RID: 19016 RVA: 0x000CC388 File Offset: 0x000CA588
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(int index, All pname, [In] [Out] T2[,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[269]);
			}
		}

		// Token: 0x06004A49 RID: 19017 RVA: 0x000CC3C4 File Offset: 0x000CA5C4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(int index, All pname, [In] [Out] T2[,,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[269]);
			}
		}

		// Token: 0x06004A4A RID: 19018 RVA: 0x000CC400 File Offset: 0x000CA600
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetVertexAttribPointer<T2>(int index, All pname, [In] [Out] ref T2 pointer) where T2 : struct
		{
			fixed (T2* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[269]);
			}
		}

		// Token: 0x06004A4B RID: 19019 RVA: 0x000CC424 File Offset: 0x000CA624
		[CLSCompliant(false)]
		public static void GetVertexAttribPointer(int index, VertexAttribPointerParameter pname, [Out] IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, pointer, GL.EntryPoints[269]);
		}

		// Token: 0x06004A4C RID: 19020 RVA: 0x000CC43C File Offset: 0x000CA63C
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In] [Out] T2[] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[269]);
			}
		}

		// Token: 0x06004A4D RID: 19021 RVA: 0x000CC474 File Offset: 0x000CA674
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In] [Out] T2[,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[269]);
			}
		}

		// Token: 0x06004A4E RID: 19022 RVA: 0x000CC4B0 File Offset: 0x000CA6B0
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In] [Out] T2[,,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[269]);
			}
		}

		// Token: 0x06004A4F RID: 19023 RVA: 0x000CC4EC File Offset: 0x000CA6EC
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In] [Out] ref T2 pointer) where T2 : struct
		{
			fixed (T2* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[269]);
			}
		}

		// Token: 0x06004A50 RID: 19024 RVA: 0x000CC510 File Offset: 0x000CA710
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void GetVertexAttribPointer(uint index, All pname, [Out] IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, pointer, GL.EntryPoints[269]);
		}

		// Token: 0x06004A51 RID: 19025 RVA: 0x000CC528 File Offset: 0x000CA728
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetVertexAttribPointer<T2>(uint index, All pname, [In] [Out] T2[] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[269]);
			}
		}

		// Token: 0x06004A52 RID: 19026 RVA: 0x000CC560 File Offset: 0x000CA760
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void GetVertexAttribPointer<T2>(uint index, All pname, [In] [Out] T2[,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[269]);
			}
		}

		// Token: 0x06004A53 RID: 19027 RVA: 0x000CC59C File Offset: 0x000CA79C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(uint index, All pname, [In] [Out] T2[,,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[269]);
			}
		}

		// Token: 0x06004A54 RID: 19028 RVA: 0x000CC5D8 File Offset: 0x000CA7D8
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(uint index, All pname, [In] [Out] ref T2 pointer) where T2 : struct
		{
			fixed (T2* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[269]);
			}
		}

		// Token: 0x06004A55 RID: 19029 RVA: 0x000CC5FC File Offset: 0x000CA7FC
		[CLSCompliant(false)]
		public static void GetVertexAttribPointer(uint index, VertexAttribPointerParameter pname, [Out] IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, pointer, GL.EntryPoints[269]);
		}

		// Token: 0x06004A56 RID: 19030 RVA: 0x000CC614 File Offset: 0x000CA814
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In] [Out] T2[] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[269]);
			}
		}

		// Token: 0x06004A57 RID: 19031 RVA: 0x000CC64C File Offset: 0x000CA84C
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In] [Out] T2[,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[269]);
			}
		}

		// Token: 0x06004A58 RID: 19032 RVA: 0x000CC688 File Offset: 0x000CA888
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In] [Out] T2[,,] pointer) where T2 : struct
		{
			fixed (T2* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[269]);
			}
		}

		// Token: 0x06004A59 RID: 19033 RVA: 0x000CC6C4 File Offset: 0x000CA8C4
		[CLSCompliant(false)]
		public unsafe static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In] [Out] ref T2 pointer) where T2 : struct
		{
			fixed (T2* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr), index, pname, ptr, GL.EntryPoints[269]);
			}
		}

		// Token: 0x06004A5A RID: 19034 RVA: 0x000CC6E8 File Offset: 0x000CA8E8
		[Obsolete("Use strongly-typed overload instead")]
		public static void Hint(All target, All mode)
		{
			calli(System.Void(System.Int32,System.Int32), target, mode, GL.EntryPoints[270]);
		}

		// Token: 0x06004A5B RID: 19035 RVA: 0x000CC6FC File Offset: 0x000CA8FC
		public static void Hint(HintTarget target, HintMode mode)
		{
			calli(System.Void(System.Int32,System.Int32), target, mode, GL.EntryPoints[270]);
		}

		// Token: 0x06004A5C RID: 19036 RVA: 0x000CC710 File Offset: 0x000CA910
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void InvalidateFramebuffer(All target, int numAttachments, All[] attachments)
		{
			fixed (All* ptr = ref (attachments != null && attachments.Length != 0) ? ref attachments[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, numAttachments, ptr, GL.EntryPoints[272]);
			}
		}

		// Token: 0x06004A5D RID: 19037 RVA: 0x000CC748 File Offset: 0x000CA948
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void InvalidateFramebuffer(All target, int numAttachments, ref All attachments)
		{
			fixed (All* ptr = &attachments)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, numAttachments, ptr, GL.EntryPoints[272]);
			}
		}

		// Token: 0x06004A5E RID: 19038 RVA: 0x000CC76C File Offset: 0x000CA96C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void InvalidateFramebuffer(All target, int numAttachments, All* attachments)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, numAttachments, attachments, GL.EntryPoints[272]);
		}

		// Token: 0x06004A5F RID: 19039 RVA: 0x000CC784 File Offset: 0x000CA984
		[CLSCompliant(false)]
		public unsafe static void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, FramebufferAttachment[] attachments)
		{
			fixed (FramebufferAttachment* ptr = ref (attachments != null && attachments.Length != 0) ? ref attachments[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, numAttachments, ptr, GL.EntryPoints[272]);
			}
		}

		// Token: 0x06004A60 RID: 19040 RVA: 0x000CC7BC File Offset: 0x000CA9BC
		[CLSCompliant(false)]
		public unsafe static void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, ref FramebufferAttachment attachments)
		{
			fixed (FramebufferAttachment* ptr = &attachments)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, numAttachments, ptr, GL.EntryPoints[272]);
			}
		}

		// Token: 0x06004A61 RID: 19041 RVA: 0x000CC7E0 File Offset: 0x000CA9E0
		[CLSCompliant(false)]
		public unsafe static void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, FramebufferAttachment* attachments)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, numAttachments, attachments, GL.EntryPoints[272]);
		}

		// Token: 0x06004A62 RID: 19042 RVA: 0x000CC7F8 File Offset: 0x000CA9F8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void InvalidateSubFramebuffer(All target, int numAttachments, All[] attachments, int x, int y, int width, int height)
		{
			fixed (All* ptr = ref (attachments != null && attachments.Length != 0) ? ref attachments[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32,System.Int32), target, numAttachments, ptr, x, y, width, height, GL.EntryPoints[273]);
			}
		}

		// Token: 0x06004A63 RID: 19043 RVA: 0x000CC834 File Offset: 0x000CAA34
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void InvalidateSubFramebuffer(All target, int numAttachments, ref All attachments, int x, int y, int width, int height)
		{
			fixed (All* ptr = &attachments)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32,System.Int32), target, numAttachments, ptr, x, y, width, height, GL.EntryPoints[273]);
			}
		}

		// Token: 0x06004A64 RID: 19044 RVA: 0x000CC860 File Offset: 0x000CAA60
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void InvalidateSubFramebuffer(All target, int numAttachments, All* attachments, int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32,System.Int32), target, numAttachments, attachments, x, y, width, height, GL.EntryPoints[273]);
		}

		// Token: 0x06004A65 RID: 19045 RVA: 0x000CC888 File Offset: 0x000CAA88
		[CLSCompliant(false)]
		public unsafe static void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, FramebufferAttachment[] attachments, int x, int y, int width, int height)
		{
			fixed (FramebufferAttachment* ptr = ref (attachments != null && attachments.Length != 0) ? ref attachments[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32,System.Int32), target, numAttachments, ptr, x, y, width, height, GL.EntryPoints[273]);
			}
		}

		// Token: 0x06004A66 RID: 19046 RVA: 0x000CC8C4 File Offset: 0x000CAAC4
		[CLSCompliant(false)]
		public unsafe static void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, ref FramebufferAttachment attachments, int x, int y, int width, int height)
		{
			fixed (FramebufferAttachment* ptr = &attachments)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32,System.Int32), target, numAttachments, ptr, x, y, width, height, GL.EntryPoints[273]);
			}
		}

		// Token: 0x06004A67 RID: 19047 RVA: 0x000CC8F0 File Offset: 0x000CAAF0
		[CLSCompliant(false)]
		public unsafe static void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, FramebufferAttachment* attachments, int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32,System.Int32), target, numAttachments, attachments, x, y, width, height, GL.EntryPoints[273]);
		}

		// Token: 0x06004A68 RID: 19048 RVA: 0x000CC918 File Offset: 0x000CAB18
		[CLSCompliant(false)]
		public static bool IsBuffer(int buffer)
		{
			return calli(System.Byte(System.UInt32), buffer, GL.EntryPoints[274]);
		}

		// Token: 0x06004A69 RID: 19049 RVA: 0x000CC92C File Offset: 0x000CAB2C
		[CLSCompliant(false)]
		public static bool IsBuffer(uint buffer)
		{
			return calli(System.Byte(System.UInt32), buffer, GL.EntryPoints[274]);
		}

		// Token: 0x06004A6A RID: 19050 RVA: 0x000CC940 File Offset: 0x000CAB40
		[Obsolete("Use strongly-typed overload instead")]
		public static bool IsEnabled(All cap)
		{
			return calli(System.Byte(System.Int32), cap, GL.EntryPoints[275]);
		}

		// Token: 0x06004A6B RID: 19051 RVA: 0x000CC954 File Offset: 0x000CAB54
		public static bool IsEnabled(EnableCap cap)
		{
			return calli(System.Byte(System.Int32), cap, GL.EntryPoints[275]);
		}

		// Token: 0x06004A6C RID: 19052 RVA: 0x000CC968 File Offset: 0x000CAB68
		[CLSCompliant(false)]
		public static bool IsFramebuffer(int framebuffer)
		{
			return calli(System.Byte(System.UInt32), framebuffer, GL.EntryPoints[278]);
		}

		// Token: 0x06004A6D RID: 19053 RVA: 0x000CC97C File Offset: 0x000CAB7C
		[CLSCompliant(false)]
		public static bool IsFramebuffer(uint framebuffer)
		{
			return calli(System.Byte(System.UInt32), framebuffer, GL.EntryPoints[278]);
		}

		// Token: 0x06004A6E RID: 19054 RVA: 0x000CC990 File Offset: 0x000CAB90
		[CLSCompliant(false)]
		public static bool IsProgram(int program)
		{
			return calli(System.Byte(System.UInt32), program, GL.EntryPoints[279]);
		}

		// Token: 0x06004A6F RID: 19055 RVA: 0x000CC9A4 File Offset: 0x000CABA4
		[CLSCompliant(false)]
		public static bool IsProgram(uint program)
		{
			return calli(System.Byte(System.UInt32), program, GL.EntryPoints[279]);
		}

		// Token: 0x06004A70 RID: 19056 RVA: 0x000CC9B8 File Offset: 0x000CABB8
		[CLSCompliant(false)]
		public static bool IsQuery(int id)
		{
			return calli(System.Byte(System.UInt32), id, GL.EntryPoints[281]);
		}

		// Token: 0x06004A71 RID: 19057 RVA: 0x000CC9CC File Offset: 0x000CABCC
		[CLSCompliant(false)]
		public static bool IsQuery(uint id)
		{
			return calli(System.Byte(System.UInt32), id, GL.EntryPoints[281]);
		}

		// Token: 0x06004A72 RID: 19058 RVA: 0x000CC9E0 File Offset: 0x000CABE0
		[CLSCompliant(false)]
		public static bool IsRenderbuffer(int renderbuffer)
		{
			return calli(System.Byte(System.UInt32), renderbuffer, GL.EntryPoints[283]);
		}

		// Token: 0x06004A73 RID: 19059 RVA: 0x000CC9F4 File Offset: 0x000CABF4
		[CLSCompliant(false)]
		public static bool IsRenderbuffer(uint renderbuffer)
		{
			return calli(System.Byte(System.UInt32), renderbuffer, GL.EntryPoints[283]);
		}

		// Token: 0x06004A74 RID: 19060 RVA: 0x000CCA08 File Offset: 0x000CAC08
		[CLSCompliant(false)]
		public static bool IsSampler(int sampler)
		{
			return calli(System.Byte(System.UInt32), sampler, GL.EntryPoints[284]);
		}

		// Token: 0x06004A75 RID: 19061 RVA: 0x000CCA1C File Offset: 0x000CAC1C
		[CLSCompliant(false)]
		public static bool IsSampler(uint sampler)
		{
			return calli(System.Byte(System.UInt32), sampler, GL.EntryPoints[284]);
		}

		// Token: 0x06004A76 RID: 19062 RVA: 0x000CCA30 File Offset: 0x000CAC30
		[CLSCompliant(false)]
		public static bool IsShader(int shader)
		{
			return calli(System.Byte(System.UInt32), shader, GL.EntryPoints[285]);
		}

		// Token: 0x06004A77 RID: 19063 RVA: 0x000CCA44 File Offset: 0x000CAC44
		[CLSCompliant(false)]
		public static bool IsShader(uint shader)
		{
			return calli(System.Byte(System.UInt32), shader, GL.EntryPoints[285]);
		}

		// Token: 0x06004A78 RID: 19064 RVA: 0x000CCA58 File Offset: 0x000CAC58
		public static bool IsSync(IntPtr sync)
		{
			return calli(System.Byte(System.IntPtr), sync, GL.EntryPoints[286]);
		}

		// Token: 0x06004A79 RID: 19065 RVA: 0x000CCA6C File Offset: 0x000CAC6C
		[CLSCompliant(false)]
		public static bool IsTexture(int texture)
		{
			return calli(System.Byte(System.UInt32), texture, GL.EntryPoints[288]);
		}

		// Token: 0x06004A7A RID: 19066 RVA: 0x000CCA80 File Offset: 0x000CAC80
		[CLSCompliant(false)]
		public static bool IsTexture(uint texture)
		{
			return calli(System.Byte(System.UInt32), texture, GL.EntryPoints[288]);
		}

		// Token: 0x06004A7B RID: 19067 RVA: 0x000CCA94 File Offset: 0x000CAC94
		[CLSCompliant(false)]
		public static bool IsTransformFeedback(int id)
		{
			return calli(System.Byte(System.UInt32), id, GL.EntryPoints[289]);
		}

		// Token: 0x06004A7C RID: 19068 RVA: 0x000CCAA8 File Offset: 0x000CACA8
		[CLSCompliant(false)]
		public static bool IsTransformFeedback(uint id)
		{
			return calli(System.Byte(System.UInt32), id, GL.EntryPoints[289]);
		}

		// Token: 0x06004A7D RID: 19069 RVA: 0x000CCABC File Offset: 0x000CACBC
		[CLSCompliant(false)]
		public static bool IsVertexArray(int array)
		{
			return calli(System.Byte(System.UInt32), array, GL.EntryPoints[290]);
		}

		// Token: 0x06004A7E RID: 19070 RVA: 0x000CCAD0 File Offset: 0x000CACD0
		[CLSCompliant(false)]
		public static bool IsVertexArray(uint array)
		{
			return calli(System.Byte(System.UInt32), array, GL.EntryPoints[290]);
		}

		// Token: 0x06004A7F RID: 19071 RVA: 0x000CCAE4 File Offset: 0x000CACE4
		public static void LineWidth(float width)
		{
			calli(System.Void(System.Single), width, GL.EntryPoints[293]);
		}

		// Token: 0x06004A80 RID: 19072 RVA: 0x000CCAF8 File Offset: 0x000CACF8
		[CLSCompliant(false)]
		public static void LinkProgram(int program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[294]);
		}

		// Token: 0x06004A81 RID: 19073 RVA: 0x000CCB0C File Offset: 0x000CAD0C
		[CLSCompliant(false)]
		public static void LinkProgram(uint program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[294]);
		}

		// Token: 0x06004A82 RID: 19074 RVA: 0x000CCB20 File Offset: 0x000CAD20
		[Obsolete("Use strongly-typed overload instead")]
		public static IntPtr MapBufferRange(All target, IntPtr offset, IntPtr length, All access)
		{
			return calli(System.IntPtr(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, offset, length, access, GL.EntryPoints[296]);
		}

		// Token: 0x06004A83 RID: 19075 RVA: 0x000CCB38 File Offset: 0x000CAD38
		public static IntPtr MapBufferRange(BufferTarget target, IntPtr offset, IntPtr length, BufferAccessMask access)
		{
			return calli(System.IntPtr(System.Int32,System.IntPtr,System.IntPtr,System.Int32), target, offset, length, access, GL.EntryPoints[296]);
		}

		// Token: 0x06004A84 RID: 19076 RVA: 0x000CCB50 File Offset: 0x000CAD50
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void ObjectLabel(All identifier, int name, int length, string label)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), identifier, name, length, intPtr, GL.EntryPoints[301]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06004A85 RID: 19077 RVA: 0x000CCB80 File Offset: 0x000CAD80
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void ObjectLabel(All identifier, uint name, int length, string label)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), identifier, name, length, intPtr, GL.EntryPoints[301]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06004A86 RID: 19078 RVA: 0x000CCBB0 File Offset: 0x000CADB0
		[CLSCompliant(false)]
		public static void ObjectLabel(ObjectLabelIdentifier identifier, int name, int length, string label)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), identifier, name, length, intPtr, GL.EntryPoints[301]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06004A87 RID: 19079 RVA: 0x000CCBE0 File Offset: 0x000CADE0
		[CLSCompliant(false)]
		public static void ObjectLabel(ObjectLabelIdentifier identifier, uint name, int length, string label)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), identifier, name, length, intPtr, GL.EntryPoints[301]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06004A88 RID: 19080 RVA: 0x000CCC10 File Offset: 0x000CAE10
		public static void ObjectPtrLabel(IntPtr ptr, int length, string label)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
			calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr, length, intPtr, GL.EntryPoints[303]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06004A89 RID: 19081 RVA: 0x000CCC40 File Offset: 0x000CAE40
		[CLSCompliant(false)]
		public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[] ptr, int length, string label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[303]);
				BindingsBase.FreeStringPtr(intPtr);
			}
		}

		// Token: 0x06004A8A RID: 19082 RVA: 0x000CCC84 File Offset: 0x000CAE84
		[CLSCompliant(false)]
		public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int length, string label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[303]);
				BindingsBase.FreeStringPtr(intPtr);
			}
		}

		// Token: 0x06004A8B RID: 19083 RVA: 0x000CCCCC File Offset: 0x000CAECC
		[CLSCompliant(false)]
		public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int length, string label) where T0 : struct
		{
			fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[303]);
				BindingsBase.FreeStringPtr(intPtr);
			}
		}

		// Token: 0x06004A8C RID: 19084 RVA: 0x000CCD14 File Offset: 0x000CAF14
		public unsafe static void ObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int length, string label) where T0 : struct
		{
			fixed (T0* ptr2 = &ptr)
			{
				T0* ptr3 = ptr2;
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[303]);
				BindingsBase.FreeStringPtr(intPtr);
			}
		}

		// Token: 0x06004A8D RID: 19085 RVA: 0x000CCD44 File Offset: 0x000CAF44
		public static void PauseTransformFeedback()
		{
			calli(System.Void(), GL.EntryPoints[306]);
		}

		// Token: 0x06004A8E RID: 19086 RVA: 0x000CCD58 File Offset: 0x000CAF58
		[Obsolete("Use strongly-typed overload instead")]
		public static void PixelStore(All pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[307]);
		}

		// Token: 0x06004A8F RID: 19087 RVA: 0x000CCD6C File Offset: 0x000CAF6C
		public static void PixelStore(PixelStoreParameter pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32), pname, param, GL.EntryPoints[307]);
		}

		// Token: 0x06004A90 RID: 19088 RVA: 0x000CCD80 File Offset: 0x000CAF80
		public static void PolygonOffset(float factor, float units)
		{
			calli(System.Void(System.Single,System.Single), factor, units, GL.EntryPoints[308]);
		}

		// Token: 0x06004A91 RID: 19089 RVA: 0x000CCD94 File Offset: 0x000CAF94
		public static void PopDebugGroup()
		{
			calli(System.Void(), GL.EntryPoints[309]);
		}

		// Token: 0x06004A92 RID: 19090 RVA: 0x000CCDA8 File Offset: 0x000CAFA8
		[CLSCompliant(false)]
		public static void ProgramBinary(int program, All binaryFormat, IntPtr binary, int length)
		{
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, binary, length, GL.EntryPoints[313]);
		}

		// Token: 0x06004A93 RID: 19091 RVA: 0x000CCDC0 File Offset: 0x000CAFC0
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(int program, All binaryFormat, [In] [Out] T2[] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[313]);
			}
		}

		// Token: 0x06004A94 RID: 19092 RVA: 0x000CCDF8 File Offset: 0x000CAFF8
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(int program, All binaryFormat, [In] [Out] T2[,] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[313]);
			}
		}

		// Token: 0x06004A95 RID: 19093 RVA: 0x000CCE34 File Offset: 0x000CB034
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(int program, All binaryFormat, [In] [Out] T2[,,] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[313]);
			}
		}

		// Token: 0x06004A96 RID: 19094 RVA: 0x000CCE70 File Offset: 0x000CB070
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(int program, All binaryFormat, [In] [Out] ref T2 binary, int length) where T2 : struct
		{
			fixed (T2* ptr = &binary)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[313]);
			}
		}

		// Token: 0x06004A97 RID: 19095 RVA: 0x000CCE94 File Offset: 0x000CB094
		[CLSCompliant(false)]
		public static void ProgramBinary(uint program, All binaryFormat, IntPtr binary, int length)
		{
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, binary, length, GL.EntryPoints[313]);
		}

		// Token: 0x06004A98 RID: 19096 RVA: 0x000CCEAC File Offset: 0x000CB0AC
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(uint program, All binaryFormat, [In] [Out] T2[] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[313]);
			}
		}

		// Token: 0x06004A99 RID: 19097 RVA: 0x000CCEE4 File Offset: 0x000CB0E4
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(uint program, All binaryFormat, [In] [Out] T2[,] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[313]);
			}
		}

		// Token: 0x06004A9A RID: 19098 RVA: 0x000CCF20 File Offset: 0x000CB120
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(uint program, All binaryFormat, [In] [Out] T2[,,] binary, int length) where T2 : struct
		{
			fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[313]);
			}
		}

		// Token: 0x06004A9B RID: 19099 RVA: 0x000CCF5C File Offset: 0x000CB15C
		[CLSCompliant(false)]
		public unsafe static void ProgramBinary<T2>(uint program, All binaryFormat, [In] [Out] ref T2 binary, int length) where T2 : struct
		{
			fixed (T2* ptr = &binary)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[313]);
			}
		}

		// Token: 0x06004A9C RID: 19100 RVA: 0x000CCF80 File Offset: 0x000CB180
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void ProgramParameter(int program, All pname, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[315]);
		}

		// Token: 0x06004A9D RID: 19101 RVA: 0x000CCF98 File Offset: 0x000CB198
		[CLSCompliant(false)]
		public static void ProgramParameter(int program, ProgramParameterName pname, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[315]);
		}

		// Token: 0x06004A9E RID: 19102 RVA: 0x000CCFB0 File Offset: 0x000CB1B0
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void ProgramParameter(uint program, All pname, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[315]);
		}

		// Token: 0x06004A9F RID: 19103 RVA: 0x000CCFC8 File Offset: 0x000CB1C8
		[CLSCompliant(false)]
		public static void ProgramParameter(uint program, ProgramParameterName pname, int value)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[315]);
		}

		// Token: 0x06004AA0 RID: 19104 RVA: 0x000CCFE0 File Offset: 0x000CB1E0
		[CLSCompliant(false)]
		public static void PushDebugGroup(All source, int id, int length, string message)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(message);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), source, id, length, intPtr, GL.EntryPoints[350]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06004AA1 RID: 19105 RVA: 0x000CD010 File Offset: 0x000CB210
		[CLSCompliant(false)]
		public static void PushDebugGroup(All source, uint id, int length, string message)
		{
			IntPtr intPtr = BindingsBase.MarshalStringToPtr(message);
			calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), source, id, length, intPtr, GL.EntryPoints[350]);
			BindingsBase.FreeStringPtr(intPtr);
		}

		// Token: 0x06004AA2 RID: 19106 RVA: 0x000CD040 File Offset: 0x000CB240
		[Obsolete("Use strongly-typed overload instead")]
		public static void ReadBuffer(All mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[354]);
		}

		// Token: 0x06004AA3 RID: 19107 RVA: 0x000CD054 File Offset: 0x000CB254
		public static void ReadBuffer(ReadBufferMode mode)
		{
			calli(System.Void(System.Int32), mode, GL.EntryPoints[354]);
		}

		// Token: 0x06004AA4 RID: 19108 RVA: 0x000CD068 File Offset: 0x000CB268
		[Obsolete("Use strongly-typed overload instead")]
		public static void ReadPixels(int x, int y, int width, int height, All format, All type, [Out] IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, pixels, GL.EntryPoints[358]);
		}

		// Token: 0x06004AA5 RID: 19109 RVA: 0x000CD090 File Offset: 0x000CB290
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ReadPixels<T6>(int x, int y, int width, int height, All format, All type, [In] [Out] T6[] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, ptr, GL.EntryPoints[358]);
			}
		}

		// Token: 0x06004AA6 RID: 19110 RVA: 0x000CD0D0 File Offset: 0x000CB2D0
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ReadPixels<T6>(int x, int y, int width, int height, All format, All type, [In] [Out] T6[,] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, ptr, GL.EntryPoints[358]);
			}
		}

		// Token: 0x06004AA7 RID: 19111 RVA: 0x000CD114 File Offset: 0x000CB314
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ReadPixels<T6>(int x, int y, int width, int height, All format, All type, [In] [Out] T6[,,] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, ptr, GL.EntryPoints[358]);
			}
		}

		// Token: 0x06004AA8 RID: 19112 RVA: 0x000CD158 File Offset: 0x000CB358
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ReadPixels<T6>(int x, int y, int width, int height, All format, All type, [In] [Out] ref T6 pixels) where T6 : struct
		{
			fixed (T6* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, ptr, GL.EntryPoints[358]);
			}
		}

		// Token: 0x06004AA9 RID: 19113 RVA: 0x000CD184 File Offset: 0x000CB384
		public static void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, [Out] IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, pixels, GL.EntryPoints[358]);
		}

		// Token: 0x06004AAA RID: 19114 RVA: 0x000CD1AC File Offset: 0x000CB3AC
		[CLSCompliant(false)]
		public unsafe static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, ptr, GL.EntryPoints[358]);
			}
		}

		// Token: 0x06004AAB RID: 19115 RVA: 0x000CD1EC File Offset: 0x000CB3EC
		[CLSCompliant(false)]
		public unsafe static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, ptr, GL.EntryPoints[358]);
			}
		}

		// Token: 0x06004AAC RID: 19116 RVA: 0x000CD230 File Offset: 0x000CB430
		[CLSCompliant(false)]
		public unsafe static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In] [Out] T6[,,] pixels) where T6 : struct
		{
			fixed (T6* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, ptr, GL.EntryPoints[358]);
			}
		}

		// Token: 0x06004AAD RID: 19117 RVA: 0x000CD274 File Offset: 0x000CB474
		public unsafe static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T6 pixels) where T6 : struct
		{
			fixed (T6* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, ptr, GL.EntryPoints[358]);
			}
		}

		// Token: 0x06004AAE RID: 19118 RVA: 0x000CD2A0 File Offset: 0x000CB4A0
		public static void ReleaseShaderCompiler()
		{
			calli(System.Void(), GL.EntryPoints[359]);
		}

		// Token: 0x06004AAF RID: 19119 RVA: 0x000CD2B4 File Offset: 0x000CB4B4
		[Obsolete("Use strongly-typed overload instead")]
		public static void RenderbufferStorage(All target, All internalformat, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, width, height, GL.EntryPoints[360]);
		}

		// Token: 0x06004AB0 RID: 19120 RVA: 0x000CD2CC File Offset: 0x000CB4CC
		public static void RenderbufferStorage(RenderbufferTarget target, RenderbufferInternalFormat internalformat, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), target, internalformat, width, height, GL.EntryPoints[360]);
		}

		// Token: 0x06004AB1 RID: 19121 RVA: 0x000CD2E4 File Offset: 0x000CB4E4
		[Obsolete("Use strongly-typed overload instead")]
		public static void RenderbufferStorageMultisample(All target, int samples, All internalformat, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, samples, internalformat, width, height, GL.EntryPoints[361]);
		}

		// Token: 0x06004AB2 RID: 19122 RVA: 0x000CD2FC File Offset: 0x000CB4FC
		public static void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, RenderbufferInternalFormat internalformat, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, samples, internalformat, width, height, GL.EntryPoints[361]);
		}

		// Token: 0x06004AB3 RID: 19123 RVA: 0x000CD314 File Offset: 0x000CB514
		public static void ResumeTransformFeedback()
		{
			calli(System.Void(), GL.EntryPoints[368]);
		}

		// Token: 0x06004AB4 RID: 19124 RVA: 0x000CD328 File Offset: 0x000CB528
		public static void SampleCoverage(float value, bool invert)
		{
			calli(System.Void(System.Single,System.Boolean), value, invert, GL.EntryPoints[369]);
		}

		// Token: 0x06004AB5 RID: 19125 RVA: 0x000CD33C File Offset: 0x000CB53C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void SamplerParameter(int sampler, All pname, float param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single), sampler, pname, param, GL.EntryPoints[370]);
		}

		// Token: 0x06004AB6 RID: 19126 RVA: 0x000CD354 File Offset: 0x000CB554
		[CLSCompliant(false)]
		public static void SamplerParameter(int sampler, SamplerParameterName pname, float param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single), sampler, pname, param, GL.EntryPoints[370]);
		}

		// Token: 0x06004AB7 RID: 19127 RVA: 0x000CD36C File Offset: 0x000CB56C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void SamplerParameter(uint sampler, All pname, float param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single), sampler, pname, param, GL.EntryPoints[370]);
		}

		// Token: 0x06004AB8 RID: 19128 RVA: 0x000CD384 File Offset: 0x000CB584
		[CLSCompliant(false)]
		public static void SamplerParameter(uint sampler, SamplerParameterName pname, float param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single), sampler, pname, param, GL.EntryPoints[370]);
		}

		// Token: 0x06004AB9 RID: 19129 RVA: 0x000CD39C File Offset: 0x000CB59C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(int sampler, All pname, float[] param)
		{
			fixed (float* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[371]);
			}
		}

		// Token: 0x06004ABA RID: 19130 RVA: 0x000CD3D4 File Offset: 0x000CB5D4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(int sampler, All pname, float* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, param, GL.EntryPoints[371]);
		}

		// Token: 0x06004ABB RID: 19131 RVA: 0x000CD3EC File Offset: 0x000CB5EC
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(int sampler, SamplerParameterName pname, float[] param)
		{
			fixed (float* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[371]);
			}
		}

		// Token: 0x06004ABC RID: 19132 RVA: 0x000CD424 File Offset: 0x000CB624
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(int sampler, SamplerParameterName pname, float* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, param, GL.EntryPoints[371]);
		}

		// Token: 0x06004ABD RID: 19133 RVA: 0x000CD43C File Offset: 0x000CB63C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, All pname, float[] param)
		{
			fixed (float* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[371]);
			}
		}

		// Token: 0x06004ABE RID: 19134 RVA: 0x000CD474 File Offset: 0x000CB674
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void SamplerParameter(uint sampler, All pname, float* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, param, GL.EntryPoints[371]);
		}

		// Token: 0x06004ABF RID: 19135 RVA: 0x000CD48C File Offset: 0x000CB68C
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, SamplerParameterName pname, float[] param)
		{
			fixed (float* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, ptr, GL.EntryPoints[371]);
			}
		}

		// Token: 0x06004AC0 RID: 19136 RVA: 0x000CD4C4 File Offset: 0x000CB6C4
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, SamplerParameterName pname, float* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Single*), sampler, pname, param, GL.EntryPoints[371]);
		}

		// Token: 0x06004AC1 RID: 19137 RVA: 0x000CD4DC File Offset: 0x000CB6DC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void SamplerParameter(int sampler, All pname, int param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), sampler, pname, param, GL.EntryPoints[372]);
		}

		// Token: 0x06004AC2 RID: 19138 RVA: 0x000CD4F4 File Offset: 0x000CB6F4
		[CLSCompliant(false)]
		public static void SamplerParameter(int sampler, SamplerParameterName pname, int param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), sampler, pname, param, GL.EntryPoints[372]);
		}

		// Token: 0x06004AC3 RID: 19139 RVA: 0x000CD50C File Offset: 0x000CB70C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void SamplerParameter(uint sampler, All pname, int param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), sampler, pname, param, GL.EntryPoints[372]);
		}

		// Token: 0x06004AC4 RID: 19140 RVA: 0x000CD524 File Offset: 0x000CB724
		[CLSCompliant(false)]
		public static void SamplerParameter(uint sampler, SamplerParameterName pname, int param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32), sampler, pname, param, GL.EntryPoints[372]);
		}

		// Token: 0x06004AC5 RID: 19141 RVA: 0x000CD53C File Offset: 0x000CB73C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void SamplerParameter(int sampler, All pname, int[] param)
		{
			fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[375]);
			}
		}

		// Token: 0x06004AC6 RID: 19142 RVA: 0x000CD574 File Offset: 0x000CB774
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void SamplerParameter(int sampler, All pname, int* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[375]);
		}

		// Token: 0x06004AC7 RID: 19143 RVA: 0x000CD58C File Offset: 0x000CB78C
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(int sampler, SamplerParameterName pname, int[] param)
		{
			fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[375]);
			}
		}

		// Token: 0x06004AC8 RID: 19144 RVA: 0x000CD5C4 File Offset: 0x000CB7C4
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(int sampler, SamplerParameterName pname, int* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[375]);
		}

		// Token: 0x06004AC9 RID: 19145 RVA: 0x000CD5DC File Offset: 0x000CB7DC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, All pname, int[] param)
		{
			fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[375]);
			}
		}

		// Token: 0x06004ACA RID: 19146 RVA: 0x000CD614 File Offset: 0x000CB814
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, All pname, int* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[375]);
		}

		// Token: 0x06004ACB RID: 19147 RVA: 0x000CD62C File Offset: 0x000CB82C
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, SamplerParameterName pname, int[] param)
		{
			fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[375]);
			}
		}

		// Token: 0x06004ACC RID: 19148 RVA: 0x000CD664 File Offset: 0x000CB864
		[CLSCompliant(false)]
		public unsafe static void SamplerParameter(uint sampler, SamplerParameterName pname, int* param)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[375]);
		}

		// Token: 0x06004ACD RID: 19149 RVA: 0x000CD67C File Offset: 0x000CB87C
		public static void Scissor(int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), x, y, width, height, GL.EntryPoints[376]);
		}

		// Token: 0x06004ACE RID: 19150 RVA: 0x000CD694 File Offset: 0x000CB894
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ShaderBinary(int count, int[] shaders, All binaryformat, IntPtr binary, int length)
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr, binaryformat, binary, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004ACF RID: 19151 RVA: 0x000CD6CC File Offset: 0x000CB8CC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ShaderBinary<T3>(int count, int[] shaders, All binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AD0 RID: 19152 RVA: 0x000CD71C File Offset: 0x000CB91C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ShaderBinary<T3>(int count, int[] shaders, All binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AD1 RID: 19153 RVA: 0x000CD770 File Offset: 0x000CB970
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ShaderBinary<T3>(int count, int[] shaders, All binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AD2 RID: 19154 RVA: 0x000CD7C4 File Offset: 0x000CB9C4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int[] shaders, All binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &binary)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AD3 RID: 19155 RVA: 0x000CD800 File Offset: 0x000CBA00
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, int[] shaders, ShaderBinaryFormat binaryformat, IntPtr binary, int length)
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr, binaryformat, binary, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004AD4 RID: 19156 RVA: 0x000CD838 File Offset: 0x000CBA38
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int[] shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AD5 RID: 19157 RVA: 0x000CD888 File Offset: 0x000CBA88
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int[] shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AD6 RID: 19158 RVA: 0x000CD8DC File Offset: 0x000CBADC
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int[] shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AD7 RID: 19159 RVA: 0x000CD930 File Offset: 0x000CBB30
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int[] shaders, ShaderBinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &binary)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AD8 RID: 19160 RVA: 0x000CD96C File Offset: 0x000CBB6C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, ref int shaders, All binaryformat, IntPtr binary, int length)
		{
			fixed (int* ptr = &shaders)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr, binaryformat, binary, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004AD9 RID: 19161 RVA: 0x000CD994 File Offset: 0x000CBB94
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref int shaders, All binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (int* ptr = &shaders)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004ADA RID: 19162 RVA: 0x000CD9D0 File Offset: 0x000CBBD0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ShaderBinary<T3>(int count, ref int shaders, All binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (int* ptr = &shaders)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004ADB RID: 19163 RVA: 0x000CDA10 File Offset: 0x000CBC10
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref int shaders, All binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (int* ptr = &shaders)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004ADC RID: 19164 RVA: 0x000CDA50 File Offset: 0x000CBC50
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref int shaders, All binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (int* ptr = &shaders)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &binary)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004ADD RID: 19165 RVA: 0x000CDA7C File Offset: 0x000CBC7C
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, ref int shaders, ShaderBinaryFormat binaryformat, IntPtr binary, int length)
		{
			fixed (int* ptr = &shaders)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr, binaryformat, binary, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004ADE RID: 19166 RVA: 0x000CDAA4 File Offset: 0x000CBCA4
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref int shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (int* ptr = &shaders)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004ADF RID: 19167 RVA: 0x000CDAE0 File Offset: 0x000CBCE0
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref int shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (int* ptr = &shaders)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AE0 RID: 19168 RVA: 0x000CDB20 File Offset: 0x000CBD20
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref int shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (int* ptr = &shaders)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AE1 RID: 19169 RVA: 0x000CDB60 File Offset: 0x000CBD60
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref int shaders, ShaderBinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (int* ptr = &shaders)
			{
				int* ptr2 = ptr;
				fixed (T3* ptr3 = &binary)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AE2 RID: 19170 RVA: 0x000CDB8C File Offset: 0x000CBD8C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, int* shaders, All binaryformat, IntPtr binary, int length)
		{
			calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, binary, length, GL.EntryPoints[379]);
		}

		// Token: 0x06004AE3 RID: 19171 RVA: 0x000CDBA4 File Offset: 0x000CBDA4
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ShaderBinary<T3>(int count, int* shaders, All binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004AE4 RID: 19172 RVA: 0x000CDBDC File Offset: 0x000CBDDC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int* shaders, All binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004AE5 RID: 19173 RVA: 0x000CDC18 File Offset: 0x000CBE18
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ShaderBinary<T3>(int count, int* shaders, All binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004AE6 RID: 19174 RVA: 0x000CDC58 File Offset: 0x000CBE58
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ShaderBinary<T3>(int count, int* shaders, All binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (T3* ptr = &binary)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004AE7 RID: 19175 RVA: 0x000CDC80 File Offset: 0x000CBE80
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, int* shaders, ShaderBinaryFormat binaryformat, IntPtr binary, int length)
		{
			calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, binary, length, GL.EntryPoints[379]);
		}

		// Token: 0x06004AE8 RID: 19176 RVA: 0x000CDC98 File Offset: 0x000CBE98
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int* shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004AE9 RID: 19177 RVA: 0x000CDCD0 File Offset: 0x000CBED0
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int* shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004AEA RID: 19178 RVA: 0x000CDD0C File Offset: 0x000CBF0C
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int* shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004AEB RID: 19179 RVA: 0x000CDD4C File Offset: 0x000CBF4C
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, int* shaders, ShaderBinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (T3* ptr = &binary)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004AEC RID: 19180 RVA: 0x000CDD74 File Offset: 0x000CBF74
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, uint[] shaders, All binaryformat, IntPtr binary, int length)
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr, binaryformat, binary, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004AED RID: 19181 RVA: 0x000CDDAC File Offset: 0x000CBFAC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint[] shaders, All binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AEE RID: 19182 RVA: 0x000CDDFC File Offset: 0x000CBFFC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ShaderBinary<T3>(int count, uint[] shaders, All binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AEF RID: 19183 RVA: 0x000CDE50 File Offset: 0x000CC050
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint[] shaders, All binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AF0 RID: 19184 RVA: 0x000CDEA4 File Offset: 0x000CC0A4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint[] shaders, All binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = &binary)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AF1 RID: 19185 RVA: 0x000CDEE0 File Offset: 0x000CC0E0
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, uint[] shaders, ShaderBinaryFormat binaryformat, IntPtr binary, int length)
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr, binaryformat, binary, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004AF2 RID: 19186 RVA: 0x000CDF18 File Offset: 0x000CC118
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint[] shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AF3 RID: 19187 RVA: 0x000CDF68 File Offset: 0x000CC168
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint[] shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AF4 RID: 19188 RVA: 0x000CDFBC File Offset: 0x000CC1BC
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint[] shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AF5 RID: 19189 RVA: 0x000CE010 File Offset: 0x000CC210
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint[] shaders, ShaderBinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = &binary)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AF6 RID: 19190 RVA: 0x000CE04C File Offset: 0x000CC24C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, ref uint shaders, All binaryformat, IntPtr binary, int length)
		{
			fixed (uint* ptr = &shaders)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr, binaryformat, binary, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004AF7 RID: 19191 RVA: 0x000CE074 File Offset: 0x000CC274
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref uint shaders, All binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = &shaders)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AF8 RID: 19192 RVA: 0x000CE0B0 File Offset: 0x000CC2B0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ShaderBinary<T3>(int count, ref uint shaders, All binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = &shaders)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AF9 RID: 19193 RVA: 0x000CE0F0 File Offset: 0x000CC2F0
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref uint shaders, All binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = &shaders)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AFA RID: 19194 RVA: 0x000CE130 File Offset: 0x000CC330
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ShaderBinary<T3>(int count, ref uint shaders, All binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (uint* ptr = &shaders)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = &binary)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AFB RID: 19195 RVA: 0x000CE15C File Offset: 0x000CC35C
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, ref uint shaders, ShaderBinaryFormat binaryformat, IntPtr binary, int length)
		{
			fixed (uint* ptr = &shaders)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr, binaryformat, binary, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004AFC RID: 19196 RVA: 0x000CE184 File Offset: 0x000CC384
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref uint shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = &shaders)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AFD RID: 19197 RVA: 0x000CE1C0 File Offset: 0x000CC3C0
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref uint shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = &shaders)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AFE RID: 19198 RVA: 0x000CE200 File Offset: 0x000CC400
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref uint shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (uint* ptr = &shaders)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004AFF RID: 19199 RVA: 0x000CE240 File Offset: 0x000CC440
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, ref uint shaders, ShaderBinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (uint* ptr = &shaders)
			{
				uint* ptr2 = ptr;
				fixed (T3* ptr3 = &binary)
				{
					calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, ptr2, binaryformat, ptr3, length, GL.EntryPoints[379]);
				}
			}
		}

		// Token: 0x06004B00 RID: 19200 RVA: 0x000CE26C File Offset: 0x000CC46C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, uint* shaders, All binaryformat, IntPtr binary, int length)
		{
			calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, binary, length, GL.EntryPoints[379]);
		}

		// Token: 0x06004B01 RID: 19201 RVA: 0x000CE284 File Offset: 0x000CC484
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ShaderBinary<T3>(int count, uint* shaders, All binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004B02 RID: 19202 RVA: 0x000CE2BC File Offset: 0x000CC4BC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint* shaders, All binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004B03 RID: 19203 RVA: 0x000CE2F8 File Offset: 0x000CC4F8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void ShaderBinary<T3>(int count, uint* shaders, All binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004B04 RID: 19204 RVA: 0x000CE338 File Offset: 0x000CC538
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint* shaders, All binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (T3* ptr = &binary)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004B05 RID: 19205 RVA: 0x000CE360 File Offset: 0x000CC560
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary(int count, uint* shaders, ShaderBinaryFormat binaryformat, IntPtr binary, int length)
		{
			calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, binary, length, GL.EntryPoints[379]);
		}

		// Token: 0x06004B06 RID: 19206 RVA: 0x000CE378 File Offset: 0x000CC578
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint* shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004B07 RID: 19207 RVA: 0x000CE3B0 File Offset: 0x000CC5B0
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint* shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[,] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004B08 RID: 19208 RVA: 0x000CE3EC File Offset: 0x000CC5EC
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint* shaders, ShaderBinaryFormat binaryformat, [In] [Out] T3[,,] binary, int length) where T3 : struct
		{
			fixed (T3* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004B09 RID: 19209 RVA: 0x000CE42C File Offset: 0x000CC62C
		[CLSCompliant(false)]
		public unsafe static void ShaderBinary<T3>(int count, uint* shaders, ShaderBinaryFormat binaryformat, [In] [Out] ref T3 binary, int length) where T3 : struct
		{
			fixed (T3* ptr = &binary)
			{
				calli(System.Void(System.Int32,System.UInt32*,System.Int32,System.IntPtr,System.Int32), count, shaders, binaryformat, ptr, length, GL.EntryPoints[379]);
			}
		}

		// Token: 0x06004B0A RID: 19210 RVA: 0x000CE454 File Offset: 0x000CC654
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(int shader, int count, string[] @string, int[] length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[380]);
				BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
			}
		}

		// Token: 0x06004B0B RID: 19211 RVA: 0x000CE49C File Offset: 0x000CC69C
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(int shader, int count, string[] @string, ref int length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = &length)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[380]);
				BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
			}
		}

		// Token: 0x06004B0C RID: 19212 RVA: 0x000CE4D0 File Offset: 0x000CC6D0
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(int shader, int count, string[] @string, int* length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr, length, GL.EntryPoints[380]);
			BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
		}

		// Token: 0x06004B0D RID: 19213 RVA: 0x000CE504 File Offset: 0x000CC704
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(uint shader, int count, string[] @string, int[] length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[380]);
				BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
			}
		}

		// Token: 0x06004B0E RID: 19214 RVA: 0x000CE54C File Offset: 0x000CC74C
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(uint shader, int count, string[] @string, ref int length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			IntPtr intPtr2 = intPtr;
			fixed (int* ptr = &length)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr2, ptr, GL.EntryPoints[380]);
				BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
			}
		}

		// Token: 0x06004B0F RID: 19215 RVA: 0x000CE580 File Offset: 0x000CC780
		[CLSCompliant(false)]
		public unsafe static void ShaderSource(uint shader, int count, string[] @string, int* length)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(@string);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), shader, count, intPtr, length, GL.EntryPoints[380]);
			BindingsBase.FreeStringArrayPtr(intPtr, @string.Length);
		}

		// Token: 0x06004B10 RID: 19216 RVA: 0x000CE5B4 File Offset: 0x000CC7B4
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void StencilFunc(All func, int @ref, int mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), func, @ref, mask, GL.EntryPoints[382]);
		}

		// Token: 0x06004B11 RID: 19217 RVA: 0x000CE5CC File Offset: 0x000CC7CC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void StencilFunc(All func, int @ref, uint mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), func, @ref, mask, GL.EntryPoints[382]);
		}

		// Token: 0x06004B12 RID: 19218 RVA: 0x000CE5E4 File Offset: 0x000CC7E4
		[CLSCompliant(false)]
		public static void StencilFunc(StencilFunction func, int @ref, int mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), func, @ref, mask, GL.EntryPoints[382]);
		}

		// Token: 0x06004B13 RID: 19219 RVA: 0x000CE5FC File Offset: 0x000CC7FC
		[CLSCompliant(false)]
		public static void StencilFunc(StencilFunction func, int @ref, uint mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32), func, @ref, mask, GL.EntryPoints[382]);
		}

		// Token: 0x06004B14 RID: 19220 RVA: 0x000CE614 File Offset: 0x000CC814
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void StencilFuncSeparate(All face, All func, int @ref, int mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), face, func, @ref, mask, GL.EntryPoints[383]);
		}

		// Token: 0x06004B15 RID: 19221 RVA: 0x000CE62C File Offset: 0x000CC82C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void StencilFuncSeparate(All face, All func, int @ref, uint mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), face, func, @ref, mask, GL.EntryPoints[383]);
		}

		// Token: 0x06004B16 RID: 19222 RVA: 0x000CE644 File Offset: 0x000CC844
		[CLSCompliant(false)]
		public static void StencilFuncSeparate(StencilFace face, StencilFunction func, int @ref, int mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), face, func, @ref, mask, GL.EntryPoints[383]);
		}

		// Token: 0x06004B17 RID: 19223 RVA: 0x000CE65C File Offset: 0x000CC85C
		[CLSCompliant(false)]
		public static void StencilFuncSeparate(StencilFace face, StencilFunction func, int @ref, uint mask)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32), face, func, @ref, mask, GL.EntryPoints[383]);
		}

		// Token: 0x06004B18 RID: 19224 RVA: 0x000CE674 File Offset: 0x000CC874
		[CLSCompliant(false)]
		public static void StencilMask(int mask)
		{
			calli(System.Void(System.UInt32), mask, GL.EntryPoints[384]);
		}

		// Token: 0x06004B19 RID: 19225 RVA: 0x000CE688 File Offset: 0x000CC888
		[CLSCompliant(false)]
		public static void StencilMask(uint mask)
		{
			calli(System.Void(System.UInt32), mask, GL.EntryPoints[384]);
		}

		// Token: 0x06004B1A RID: 19226 RVA: 0x000CE69C File Offset: 0x000CC89C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void StencilMaskSeparate(All face, int mask)
		{
			calli(System.Void(System.Int32,System.UInt32), face, mask, GL.EntryPoints[385]);
		}

		// Token: 0x06004B1B RID: 19227 RVA: 0x000CE6B0 File Offset: 0x000CC8B0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void StencilMaskSeparate(All face, uint mask)
		{
			calli(System.Void(System.Int32,System.UInt32), face, mask, GL.EntryPoints[385]);
		}

		// Token: 0x06004B1C RID: 19228 RVA: 0x000CE6C4 File Offset: 0x000CC8C4
		[CLSCompliant(false)]
		public static void StencilMaskSeparate(StencilFace face, int mask)
		{
			calli(System.Void(System.Int32,System.UInt32), face, mask, GL.EntryPoints[385]);
		}

		// Token: 0x06004B1D RID: 19229 RVA: 0x000CE6D8 File Offset: 0x000CC8D8
		[CLSCompliant(false)]
		public static void StencilMaskSeparate(StencilFace face, uint mask)
		{
			calli(System.Void(System.Int32,System.UInt32), face, mask, GL.EntryPoints[385]);
		}

		// Token: 0x06004B1E RID: 19230 RVA: 0x000CE6EC File Offset: 0x000CC8EC
		[Obsolete("Use strongly-typed overload instead")]
		public static void StencilOp(All fail, All zfail, All zpass)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), fail, zfail, zpass, GL.EntryPoints[386]);
		}

		// Token: 0x06004B1F RID: 19231 RVA: 0x000CE704 File Offset: 0x000CC904
		public static void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), fail, zfail, zpass, GL.EntryPoints[386]);
		}

		// Token: 0x06004B20 RID: 19232 RVA: 0x000CE71C File Offset: 0x000CC91C
		[Obsolete("Use strongly-typed overload instead")]
		public static void StencilOpSeparate(All face, All sfail, All dpfail, All dppass)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), face, sfail, dpfail, dppass, GL.EntryPoints[387]);
		}

		// Token: 0x06004B21 RID: 19233 RVA: 0x000CE734 File Offset: 0x000CC934
		public static void StencilOpSeparate(StencilFace face, StencilOp sfail, StencilOp dpfail, StencilOp dppass)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), face, sfail, dpfail, dppass, GL.EntryPoints[387]);
		}

		// Token: 0x06004B22 RID: 19234 RVA: 0x000CE74C File Offset: 0x000CC94C
		[Obsolete("Use strongly-typed overload instead")]
		public static void TexImage2D(All target, int level, All internalformat, int width, int height, int border, All format, All type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, pixels, GL.EntryPoints[391]);
		}

		// Token: 0x06004B23 RID: 19235 RVA: 0x000CE778 File Offset: 0x000CC978
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void TexImage2D<T8>(All target, int level, All internalformat, int width, int height, int border, All format, All type, [In] [Out] T8[] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[391]);
			}
		}

		// Token: 0x06004B24 RID: 19236 RVA: 0x000CE7BC File Offset: 0x000CC9BC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void TexImage2D<T8>(All target, int level, All internalformat, int width, int height, int border, All format, All type, [In] [Out] T8[,] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[391]);
			}
		}

		// Token: 0x06004B25 RID: 19237 RVA: 0x000CE804 File Offset: 0x000CCA04
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void TexImage2D<T8>(All target, int level, All internalformat, int width, int height, int border, All format, All type, [In] [Out] T8[,,] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[391]);
			}
		}

		// Token: 0x06004B26 RID: 19238 RVA: 0x000CE84C File Offset: 0x000CCA4C
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void TexImage2D<T8>(All target, int level, All internalformat, int width, int height, int border, All format, All type, [In] [Out] ref T8 pixels) where T8 : struct
		{
			fixed (T8* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[391]);
			}
		}

		// Token: 0x06004B27 RID: 19239 RVA: 0x000CE87C File Offset: 0x000CCA7C
		public static void TexImage2D(TextureTarget2d target, int level, TextureComponentCount internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, pixels, GL.EntryPoints[391]);
		}

		// Token: 0x06004B28 RID: 19240 RVA: 0x000CE8A8 File Offset: 0x000CCAA8
		[CLSCompliant(false)]
		public unsafe static void TexImage2D<T8>(TextureTarget2d target, int level, TextureComponentCount internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T8[] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[391]);
			}
		}

		// Token: 0x06004B29 RID: 19241 RVA: 0x000CE8EC File Offset: 0x000CCAEC
		[CLSCompliant(false)]
		public unsafe static void TexImage2D<T8>(TextureTarget2d target, int level, TextureComponentCount internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T8[,] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[391]);
			}
		}

		// Token: 0x06004B2A RID: 19242 RVA: 0x000CE934 File Offset: 0x000CCB34
		[CLSCompliant(false)]
		public unsafe static void TexImage2D<T8>(TextureTarget2d target, int level, TextureComponentCount internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] T8[,,] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[391]);
			}
		}

		// Token: 0x06004B2B RID: 19243 RVA: 0x000CE97C File Offset: 0x000CCB7C
		public unsafe static void TexImage2D<T8>(TextureTarget2d target, int level, TextureComponentCount internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In] [Out] ref T8 pixels) where T8 : struct
		{
			fixed (T8* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, border, format, type, ptr, GL.EntryPoints[391]);
			}
		}

		// Token: 0x06004B2C RID: 19244 RVA: 0x000CE9AC File Offset: 0x000CCBAC
		[Obsolete("Use strongly-typed overload instead")]
		public static void TexImage3D(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, pixels, GL.EntryPoints[392]);
		}

		// Token: 0x06004B2D RID: 19245 RVA: 0x000CE9DC File Offset: 0x000CCBDC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void TexImage3D<T9>(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, [In] [Out] T9[] pixels) where T9 : struct
		{
			fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[392]);
			}
		}

		// Token: 0x06004B2E RID: 19246 RVA: 0x000CEA20 File Offset: 0x000CCC20
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void TexImage3D<T9>(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, [In] [Out] T9[,] pixels) where T9 : struct
		{
			fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[392]);
			}
		}

		// Token: 0x06004B2F RID: 19247 RVA: 0x000CEA68 File Offset: 0x000CCC68
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void TexImage3D<T9>(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, [In] [Out] T9[,,] pixels) where T9 : struct
		{
			fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[392]);
			}
		}

		// Token: 0x06004B30 RID: 19248 RVA: 0x000CEAB4 File Offset: 0x000CCCB4
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void TexImage3D<T9>(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, [In] [Out] ref T9 pixels) where T9 : struct
		{
			fixed (T9* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[392]);
			}
		}

		// Token: 0x06004B31 RID: 19249 RVA: 0x000CEAE4 File Offset: 0x000CCCE4
		public static void TexImage3D(TextureTarget3d target, int level, TextureComponentCount internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, pixels, GL.EntryPoints[392]);
		}

		// Token: 0x06004B32 RID: 19250 RVA: 0x000CEB14 File Offset: 0x000CCD14
		[CLSCompliant(false)]
		public unsafe static void TexImage3D<T9>(TextureTarget3d target, int level, TextureComponentCount internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T9[] pixels) where T9 : struct
		{
			fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[392]);
			}
		}

		// Token: 0x06004B33 RID: 19251 RVA: 0x000CEB58 File Offset: 0x000CCD58
		[CLSCompliant(false)]
		public unsafe static void TexImage3D<T9>(TextureTarget3d target, int level, TextureComponentCount internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T9[,] pixels) where T9 : struct
		{
			fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[392]);
			}
		}

		// Token: 0x06004B34 RID: 19252 RVA: 0x000CEBA0 File Offset: 0x000CCDA0
		[CLSCompliant(false)]
		public unsafe static void TexImage3D<T9>(TextureTarget3d target, int level, TextureComponentCount internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T9[,,] pixels) where T9 : struct
		{
			fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[392]);
			}
		}

		// Token: 0x06004B35 RID: 19253 RVA: 0x000CEBEC File Offset: 0x000CCDEC
		public unsafe static void TexImage3D<T9>(TextureTarget3d target, int level, TextureComponentCount internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] ref T9 pixels) where T9 : struct
		{
			fixed (T9* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[392]);
			}
		}

		// Token: 0x06004B36 RID: 19254 RVA: 0x000CEC1C File Offset: 0x000CCE1C
		[Obsolete("Use strongly-typed overload instead")]
		public static void TexParameter(All target, All pname, float param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single), target, pname, param, GL.EntryPoints[394]);
		}

		// Token: 0x06004B37 RID: 19255 RVA: 0x000CEC34 File Offset: 0x000CCE34
		public static void TexParameter(TextureTarget target, TextureParameterName pname, float param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single), target, pname, param, GL.EntryPoints[394]);
		}

		// Token: 0x06004B38 RID: 19256 RVA: 0x000CEC4C File Offset: 0x000CCE4C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void TexParameter(All target, All pname, float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[395]);
			}
		}

		// Token: 0x06004B39 RID: 19257 RVA: 0x000CEC84 File Offset: 0x000CCE84
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void TexParameter(All target, All pname, float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[395]);
		}

		// Token: 0x06004B3A RID: 19258 RVA: 0x000CEC9C File Offset: 0x000CCE9C
		[CLSCompliant(false)]
		public unsafe static void TexParameter(TextureTarget target, TextureParameterName pname, float[] @params)
		{
			fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, ptr, GL.EntryPoints[395]);
			}
		}

		// Token: 0x06004B3B RID: 19259 RVA: 0x000CECD4 File Offset: 0x000CCED4
		[CLSCompliant(false)]
		public unsafe static void TexParameter(TextureTarget target, TextureParameterName pname, float* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), target, pname, @params, GL.EntryPoints[395]);
		}

		// Token: 0x06004B3C RID: 19260 RVA: 0x000CECEC File Offset: 0x000CCEEC
		[Obsolete("Use strongly-typed overload instead")]
		public static void TexParameter(All target, All pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, param, GL.EntryPoints[396]);
		}

		// Token: 0x06004B3D RID: 19261 RVA: 0x000CED04 File Offset: 0x000CCF04
		public static void TexParameter(TextureTarget target, TextureParameterName pname, int param)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, param, GL.EntryPoints[396]);
		}

		// Token: 0x06004B3E RID: 19262 RVA: 0x000CED1C File Offset: 0x000CCF1C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void TexParameter(All target, All pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[399]);
			}
		}

		// Token: 0x06004B3F RID: 19263 RVA: 0x000CED54 File Offset: 0x000CCF54
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void TexParameter(All target, All pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[399]);
		}

		// Token: 0x06004B40 RID: 19264 RVA: 0x000CED6C File Offset: 0x000CCF6C
		[CLSCompliant(false)]
		public unsafe static void TexParameter(TextureTarget target, TextureParameterName pname, int[] @params)
		{
			fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[399]);
			}
		}

		// Token: 0x06004B41 RID: 19265 RVA: 0x000CEDA4 File Offset: 0x000CCFA4
		[CLSCompliant(false)]
		public unsafe static void TexParameter(TextureTarget target, TextureParameterName pname, int* @params)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[399]);
		}

		// Token: 0x06004B42 RID: 19266 RVA: 0x000CEDBC File Offset: 0x000CCFBC
		[Obsolete("Use strongly-typed overload instead")]
		public static void TexStorage2D(All target, int levels, All internalformat, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, levels, internalformat, width, height, GL.EntryPoints[401]);
		}

		// Token: 0x06004B43 RID: 19267 RVA: 0x000CEDD4 File Offset: 0x000CCFD4
		public static void TexStorage2D(TextureTarget2d target, int levels, SizedInternalFormat internalformat, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, levels, internalformat, width, height, GL.EntryPoints[401]);
		}

		// Token: 0x06004B44 RID: 19268 RVA: 0x000CEDEC File Offset: 0x000CCFEC
		[Obsolete("Use strongly-typed overload instead")]
		public static void TexStorage3D(All target, int levels, All internalformat, int width, int height, int depth)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, levels, internalformat, width, height, depth, GL.EntryPoints[403]);
		}

		// Token: 0x06004B45 RID: 19269 RVA: 0x000CEE08 File Offset: 0x000CD008
		public static void TexStorage3D(TextureTarget3d target, int levels, SizedInternalFormat internalformat, int width, int height, int depth)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, levels, internalformat, width, height, depth, GL.EntryPoints[403]);
		}

		// Token: 0x06004B46 RID: 19270 RVA: 0x000CEE24 File Offset: 0x000CD024
		[Obsolete("Use strongly-typed overload instead")]
		public static void TexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, pixels, GL.EntryPoints[406]);
		}

		// Token: 0x06004B47 RID: 19271 RVA: 0x000CEE50 File Offset: 0x000CD050
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void TexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, [In] [Out] T8[] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[406]);
			}
		}

		// Token: 0x06004B48 RID: 19272 RVA: 0x000CEE94 File Offset: 0x000CD094
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void TexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, [In] [Out] T8[,] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[406]);
			}
		}

		// Token: 0x06004B49 RID: 19273 RVA: 0x000CEEDC File Offset: 0x000CD0DC
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void TexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, [In] [Out] T8[,,] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[406]);
			}
		}

		// Token: 0x06004B4A RID: 19274 RVA: 0x000CEF24 File Offset: 0x000CD124
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void TexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, [In] [Out] ref T8 pixels) where T8 : struct
		{
			fixed (T8* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[406]);
			}
		}

		// Token: 0x06004B4B RID: 19275 RVA: 0x000CEF54 File Offset: 0x000CD154
		public static void TexSubImage2D(TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, pixels, GL.EntryPoints[406]);
		}

		// Token: 0x06004B4C RID: 19276 RVA: 0x000CEF80 File Offset: 0x000CD180
		[CLSCompliant(false)]
		public unsafe static void TexSubImage2D<T8>(TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T8[] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[406]);
			}
		}

		// Token: 0x06004B4D RID: 19277 RVA: 0x000CEFC4 File Offset: 0x000CD1C4
		[CLSCompliant(false)]
		public unsafe static void TexSubImage2D<T8>(TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T8[,] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[406]);
			}
		}

		// Token: 0x06004B4E RID: 19278 RVA: 0x000CF00C File Offset: 0x000CD20C
		[CLSCompliant(false)]
		public unsafe static void TexSubImage2D<T8>(TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] T8[,,] pixels) where T8 : struct
		{
			fixed (T8* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[406]);
			}
		}

		// Token: 0x06004B4F RID: 19279 RVA: 0x000CF054 File Offset: 0x000CD254
		public unsafe static void TexSubImage2D<T8>(TextureTarget2d target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In] [Out] ref T8 pixels) where T8 : struct
		{
			fixed (T8* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, width, height, format, type, ptr, GL.EntryPoints[406]);
			}
		}

		// Token: 0x06004B50 RID: 19280 RVA: 0x000CF084 File Offset: 0x000CD284
		[Obsolete("Use strongly-typed overload instead")]
		public static void TexSubImage3D(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels, GL.EntryPoints[407]);
		}

		// Token: 0x06004B51 RID: 19281 RVA: 0x000CF0B4 File Offset: 0x000CD2B4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void TexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In] [Out] T10[] pixels) where T10 : struct
		{
			fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[407]);
			}
		}

		// Token: 0x06004B52 RID: 19282 RVA: 0x000CF0FC File Offset: 0x000CD2FC
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void TexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In] [Out] T10[,] pixels) where T10 : struct
		{
			fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[407]);
			}
		}

		// Token: 0x06004B53 RID: 19283 RVA: 0x000CF148 File Offset: 0x000CD348
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void TexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In] [Out] T10[,,] pixels) where T10 : struct
		{
			fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[407]);
			}
		}

		// Token: 0x06004B54 RID: 19284 RVA: 0x000CF194 File Offset: 0x000CD394
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void TexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In] [Out] ref T10 pixels) where T10 : struct
		{
			fixed (T10* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[407]);
			}
		}

		// Token: 0x06004B55 RID: 19285 RVA: 0x000CF1C8 File Offset: 0x000CD3C8
		public static void TexSubImage3D(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels, GL.EntryPoints[407]);
		}

		// Token: 0x06004B56 RID: 19286 RVA: 0x000CF1F8 File Offset: 0x000CD3F8
		[CLSCompliant(false)]
		public unsafe static void TexSubImage3D<T10>(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[] pixels) where T10 : struct
		{
			fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[407]);
			}
		}

		// Token: 0x06004B57 RID: 19287 RVA: 0x000CF240 File Offset: 0x000CD440
		[CLSCompliant(false)]
		public unsafe static void TexSubImage3D<T10>(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[,] pixels) where T10 : struct
		{
			fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[407]);
			}
		}

		// Token: 0x06004B58 RID: 19288 RVA: 0x000CF28C File Offset: 0x000CD48C
		[CLSCompliant(false)]
		public unsafe static void TexSubImage3D<T10>(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] T10[,,] pixels) where T10 : struct
		{
			fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[407]);
			}
		}

		// Token: 0x06004B59 RID: 19289 RVA: 0x000CF2D8 File Offset: 0x000CD4D8
		public unsafe static void TexSubImage3D<T10>(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In] [Out] ref T10 pixels) where T10 : struct
		{
			fixed (T10* ptr = &pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[407]);
			}
		}

		// Token: 0x06004B5A RID: 19290 RVA: 0x000CF30C File Offset: 0x000CD50C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void TransformFeedbackVaryings(int program, int count, string[] varyings, All bufferMode)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(varyings);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, count, intPtr, bufferMode, GL.EntryPoints[413]);
			BindingsBase.FreeStringArrayPtr(intPtr, varyings.Length);
		}

		// Token: 0x06004B5B RID: 19291 RVA: 0x000CF340 File Offset: 0x000CD540
		[CLSCompliant(false)]
		public static void TransformFeedbackVaryings(int program, int count, string[] varyings, TransformFeedbackMode bufferMode)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(varyings);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, count, intPtr, bufferMode, GL.EntryPoints[413]);
			BindingsBase.FreeStringArrayPtr(intPtr, varyings.Length);
		}

		// Token: 0x06004B5C RID: 19292 RVA: 0x000CF374 File Offset: 0x000CD574
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void TransformFeedbackVaryings(uint program, int count, string[] varyings, All bufferMode)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(varyings);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, count, intPtr, bufferMode, GL.EntryPoints[413]);
			BindingsBase.FreeStringArrayPtr(intPtr, varyings.Length);
		}

		// Token: 0x06004B5D RID: 19293 RVA: 0x000CF3A8 File Offset: 0x000CD5A8
		[CLSCompliant(false)]
		public static void TransformFeedbackVaryings(uint program, int count, string[] varyings, TransformFeedbackMode bufferMode)
		{
			IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(varyings);
			calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, count, intPtr, bufferMode, GL.EntryPoints[413]);
			BindingsBase.FreeStringArrayPtr(intPtr, varyings.Length);
		}

		// Token: 0x06004B5E RID: 19294 RVA: 0x000CF3DC File Offset: 0x000CD5DC
		public static void Uniform1(int location, float v0)
		{
			calli(System.Void(System.Int32,System.Single), location, v0, GL.EntryPoints[414]);
		}

		// Token: 0x06004B5F RID: 19295 RVA: 0x000CF3F0 File Offset: 0x000CD5F0
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[415]);
			}
		}

		// Token: 0x06004B60 RID: 19296 RVA: 0x000CF428 File Offset: 0x000CD628
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[415]);
			}
		}

		// Token: 0x06004B61 RID: 19297 RVA: 0x000CF44C File Offset: 0x000CD64C
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, value, GL.EntryPoints[415]);
		}

		// Token: 0x06004B62 RID: 19298 RVA: 0x000CF464 File Offset: 0x000CD664
		public static void Uniform1(int location, int v0)
		{
			calli(System.Void(System.Int32,System.Int32), location, v0, GL.EntryPoints[416]);
		}

		// Token: 0x06004B63 RID: 19299 RVA: 0x000CF478 File Offset: 0x000CD678
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[417]);
			}
		}

		// Token: 0x06004B64 RID: 19300 RVA: 0x000CF4B0 File Offset: 0x000CD6B0
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[417]);
			}
		}

		// Token: 0x06004B65 RID: 19301 RVA: 0x000CF4D4 File Offset: 0x000CD6D4
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, int* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, value, GL.EntryPoints[417]);
		}

		// Token: 0x06004B66 RID: 19302 RVA: 0x000CF4EC File Offset: 0x000CD6EC
		[CLSCompliant(false)]
		public static void Uniform1(int location, uint v0)
		{
			calli(System.Void(System.Int32,System.UInt32), location, v0, GL.EntryPoints[418]);
		}

		// Token: 0x06004B67 RID: 19303 RVA: 0x000CF500 File Offset: 0x000CD700
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[419]);
			}
		}

		// Token: 0x06004B68 RID: 19304 RVA: 0x000CF538 File Offset: 0x000CD738
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[419]);
			}
		}

		// Token: 0x06004B69 RID: 19305 RVA: 0x000CF55C File Offset: 0x000CD75C
		[CLSCompliant(false)]
		public unsafe static void Uniform1(int location, int count, uint* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[419]);
		}

		// Token: 0x06004B6A RID: 19306 RVA: 0x000CF574 File Offset: 0x000CD774
		public static void Uniform2(int location, float v0, float v1)
		{
			calli(System.Void(System.Int32,System.Single,System.Single), location, v0, v1, GL.EntryPoints[420]);
		}

		// Token: 0x06004B6B RID: 19307 RVA: 0x000CF58C File Offset: 0x000CD78C
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[421]);
			}
		}

		// Token: 0x06004B6C RID: 19308 RVA: 0x000CF5C4 File Offset: 0x000CD7C4
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[421]);
			}
		}

		// Token: 0x06004B6D RID: 19309 RVA: 0x000CF5E8 File Offset: 0x000CD7E8
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, value, GL.EntryPoints[421]);
		}

		// Token: 0x06004B6E RID: 19310 RVA: 0x000CF600 File Offset: 0x000CD800
		public static void Uniform2(int location, int v0, int v1)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32), location, v0, v1, GL.EntryPoints[422]);
		}

		// Token: 0x06004B6F RID: 19311 RVA: 0x000CF618 File Offset: 0x000CD818
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[423]);
			}
		}

		// Token: 0x06004B70 RID: 19312 RVA: 0x000CF650 File Offset: 0x000CD850
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, int* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, value, GL.EntryPoints[423]);
		}

		// Token: 0x06004B71 RID: 19313 RVA: 0x000CF668 File Offset: 0x000CD868
		[CLSCompliant(false)]
		public static void Uniform2(int location, uint v0, uint v1)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32), location, v0, v1, GL.EntryPoints[424]);
		}

		// Token: 0x06004B72 RID: 19314 RVA: 0x000CF680 File Offset: 0x000CD880
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[425]);
			}
		}

		// Token: 0x06004B73 RID: 19315 RVA: 0x000CF6B8 File Offset: 0x000CD8B8
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[425]);
			}
		}

		// Token: 0x06004B74 RID: 19316 RVA: 0x000CF6DC File Offset: 0x000CD8DC
		[CLSCompliant(false)]
		public unsafe static void Uniform2(int location, int count, uint* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[425]);
		}

		// Token: 0x06004B75 RID: 19317 RVA: 0x000CF6F4 File Offset: 0x000CD8F4
		public static void Uniform3(int location, float v0, float v1, float v2)
		{
			calli(System.Void(System.Int32,System.Single,System.Single,System.Single), location, v0, v1, v2, GL.EntryPoints[426]);
		}

		// Token: 0x06004B76 RID: 19318 RVA: 0x000CF70C File Offset: 0x000CD90C
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[427]);
			}
		}

		// Token: 0x06004B77 RID: 19319 RVA: 0x000CF744 File Offset: 0x000CD944
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[427]);
			}
		}

		// Token: 0x06004B78 RID: 19320 RVA: 0x000CF768 File Offset: 0x000CD968
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, value, GL.EntryPoints[427]);
		}

		// Token: 0x06004B79 RID: 19321 RVA: 0x000CF780 File Offset: 0x000CD980
		public static void Uniform3(int location, int v0, int v1, int v2)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), location, v0, v1, v2, GL.EntryPoints[428]);
		}

		// Token: 0x06004B7A RID: 19322 RVA: 0x000CF798 File Offset: 0x000CD998
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[429]);
			}
		}

		// Token: 0x06004B7B RID: 19323 RVA: 0x000CF7D0 File Offset: 0x000CD9D0
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[429]);
			}
		}

		// Token: 0x06004B7C RID: 19324 RVA: 0x000CF7F4 File Offset: 0x000CD9F4
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, int* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, value, GL.EntryPoints[429]);
		}

		// Token: 0x06004B7D RID: 19325 RVA: 0x000CF80C File Offset: 0x000CDA0C
		[CLSCompliant(false)]
		public static void Uniform3(int location, uint v0, uint v1, uint v2)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32), location, v0, v1, v2, GL.EntryPoints[430]);
		}

		// Token: 0x06004B7E RID: 19326 RVA: 0x000CF824 File Offset: 0x000CDA24
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[431]);
			}
		}

		// Token: 0x06004B7F RID: 19327 RVA: 0x000CF85C File Offset: 0x000CDA5C
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[431]);
			}
		}

		// Token: 0x06004B80 RID: 19328 RVA: 0x000CF880 File Offset: 0x000CDA80
		[CLSCompliant(false)]
		public unsafe static void Uniform3(int location, int count, uint* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[431]);
		}

		// Token: 0x06004B81 RID: 19329 RVA: 0x000CF898 File Offset: 0x000CDA98
		public static void Uniform4(int location, float v0, float v1, float v2, float v3)
		{
			calli(System.Void(System.Int32,System.Single,System.Single,System.Single,System.Single), location, v0, v1, v2, v3, GL.EntryPoints[432]);
		}

		// Token: 0x06004B82 RID: 19330 RVA: 0x000CF8B0 File Offset: 0x000CDAB0
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[433]);
			}
		}

		// Token: 0x06004B83 RID: 19331 RVA: 0x000CF8E8 File Offset: 0x000CDAE8
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, ptr, GL.EntryPoints[433]);
			}
		}

		// Token: 0x06004B84 RID: 19332 RVA: 0x000CF90C File Offset: 0x000CDB0C
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Single*), location, count, value, GL.EntryPoints[433]);
		}

		// Token: 0x06004B85 RID: 19333 RVA: 0x000CF924 File Offset: 0x000CDB24
		public static void Uniform4(int location, int v0, int v1, int v2, int v3)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), location, v0, v1, v2, v3, GL.EntryPoints[434]);
		}

		// Token: 0x06004B86 RID: 19334 RVA: 0x000CF93C File Offset: 0x000CDB3C
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, int[] value)
		{
			fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[435]);
			}
		}

		// Token: 0x06004B87 RID: 19335 RVA: 0x000CF974 File Offset: 0x000CDB74
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, ref int value)
		{
			fixed (int* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, ptr, GL.EntryPoints[435]);
			}
		}

		// Token: 0x06004B88 RID: 19336 RVA: 0x000CF998 File Offset: 0x000CDB98
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, int* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32*), location, count, value, GL.EntryPoints[435]);
		}

		// Token: 0x06004B89 RID: 19337 RVA: 0x000CF9B0 File Offset: 0x000CDBB0
		[CLSCompliant(false)]
		public static void Uniform4(int location, uint v0, uint v1, uint v2, uint v3)
		{
			calli(System.Void(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), location, v0, v1, v2, v3, GL.EntryPoints[436]);
		}

		// Token: 0x06004B8A RID: 19338 RVA: 0x000CF9C8 File Offset: 0x000CDBC8
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, uint[] value)
		{
			fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[437]);
			}
		}

		// Token: 0x06004B8B RID: 19339 RVA: 0x000CFA00 File Offset: 0x000CDC00
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, ref uint value)
		{
			fixed (uint* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, ptr, GL.EntryPoints[437]);
			}
		}

		// Token: 0x06004B8C RID: 19340 RVA: 0x000CFA24 File Offset: 0x000CDC24
		[CLSCompliant(false)]
		public unsafe static void Uniform4(int location, int count, uint* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.UInt32*), location, count, value, GL.EntryPoints[437]);
		}

		// Token: 0x06004B8D RID: 19341 RVA: 0x000CFA3C File Offset: 0x000CDC3C
		[CLSCompliant(false)]
		public static void UniformBlockBinding(int program, int uniformBlockIndex, int uniformBlockBinding)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), program, uniformBlockIndex, uniformBlockBinding, GL.EntryPoints[438]);
		}

		// Token: 0x06004B8E RID: 19342 RVA: 0x000CFA54 File Offset: 0x000CDC54
		[CLSCompliant(false)]
		public static void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32), program, uniformBlockIndex, uniformBlockBinding, GL.EntryPoints[438]);
		}

		// Token: 0x06004B8F RID: 19343 RVA: 0x000CFA6C File Offset: 0x000CDC6C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[439]);
			}
		}

		// Token: 0x06004B90 RID: 19344 RVA: 0x000CFAA4 File Offset: 0x000CDCA4
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[439]);
			}
		}

		// Token: 0x06004B91 RID: 19345 RVA: 0x000CFAC8 File Offset: 0x000CDCC8
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[439]);
		}

		// Token: 0x06004B92 RID: 19346 RVA: 0x000CFAE0 File Offset: 0x000CDCE0
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[440]);
			}
		}

		// Token: 0x06004B93 RID: 19347 RVA: 0x000CFB18 File Offset: 0x000CDD18
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[440]);
			}
		}

		// Token: 0x06004B94 RID: 19348 RVA: 0x000CFB3C File Offset: 0x000CDD3C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[440]);
		}

		// Token: 0x06004B95 RID: 19349 RVA: 0x000CFB54 File Offset: 0x000CDD54
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[442]);
			}
		}

		// Token: 0x06004B96 RID: 19350 RVA: 0x000CFB8C File Offset: 0x000CDD8C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[442]);
			}
		}

		// Token: 0x06004B97 RID: 19351 RVA: 0x000CFBB0 File Offset: 0x000CDDB0
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[442]);
		}

		// Token: 0x06004B98 RID: 19352 RVA: 0x000CFBC8 File Offset: 0x000CDDC8
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[444]);
			}
		}

		// Token: 0x06004B99 RID: 19353 RVA: 0x000CFC00 File Offset: 0x000CDE00
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[444]);
			}
		}

		// Token: 0x06004B9A RID: 19354 RVA: 0x000CFC24 File Offset: 0x000CDE24
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[444]);
		}

		// Token: 0x06004B9B RID: 19355 RVA: 0x000CFC3C File Offset: 0x000CDE3C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[445]);
			}
		}

		// Token: 0x06004B9C RID: 19356 RVA: 0x000CFC74 File Offset: 0x000CDE74
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[445]);
			}
		}

		// Token: 0x06004B9D RID: 19357 RVA: 0x000CFC98 File Offset: 0x000CDE98
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[445]);
		}

		// Token: 0x06004B9E RID: 19358 RVA: 0x000CFCB0 File Offset: 0x000CDEB0
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[447]);
			}
		}

		// Token: 0x06004B9F RID: 19359 RVA: 0x000CFCE8 File Offset: 0x000CDEE8
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[447]);
			}
		}

		// Token: 0x06004BA0 RID: 19360 RVA: 0x000CFD0C File Offset: 0x000CDF0C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[447]);
		}

		// Token: 0x06004BA1 RID: 19361 RVA: 0x000CFD24 File Offset: 0x000CDF24
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[449]);
			}
		}

		// Token: 0x06004BA2 RID: 19362 RVA: 0x000CFD5C File Offset: 0x000CDF5C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[449]);
			}
		}

		// Token: 0x06004BA3 RID: 19363 RVA: 0x000CFD80 File Offset: 0x000CDF80
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[449]);
		}

		// Token: 0x06004BA4 RID: 19364 RVA: 0x000CFD98 File Offset: 0x000CDF98
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[450]);
			}
		}

		// Token: 0x06004BA5 RID: 19365 RVA: 0x000CFDD0 File Offset: 0x000CDFD0
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[450]);
			}
		}

		// Token: 0x06004BA6 RID: 19366 RVA: 0x000CFDF4 File Offset: 0x000CDFF4
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[450]);
		}

		// Token: 0x06004BA7 RID: 19367 RVA: 0x000CFE0C File Offset: 0x000CE00C
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, float[] value)
		{
			fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06004BA8 RID: 19368 RVA: 0x000CFE44 File Offset: 0x000CE044
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, ref float value)
		{
			fixed (float* ptr = &value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[452]);
			}
		}

		// Token: 0x06004BA9 RID: 19369 RVA: 0x000CFE68 File Offset: 0x000CE068
		[CLSCompliant(false)]
		public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, float* value)
		{
			calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[452]);
		}

		// Token: 0x06004BAA RID: 19370 RVA: 0x000CFE80 File Offset: 0x000CE080
		[Obsolete("Use strongly-typed overload instead")]
		public static bool UnmapBuffer(All target)
		{
			return calli(System.Byte(System.Int32), target, GL.EntryPoints[454]);
		}

		// Token: 0x06004BAB RID: 19371 RVA: 0x000CFE94 File Offset: 0x000CE094
		public static bool UnmapBuffer(BufferTarget target)
		{
			return calli(System.Byte(System.Int32), target, GL.EntryPoints[454]);
		}

		// Token: 0x06004BAC RID: 19372 RVA: 0x000CFEA8 File Offset: 0x000CE0A8
		[CLSCompliant(false)]
		public static void UseProgram(int program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[456]);
		}

		// Token: 0x06004BAD RID: 19373 RVA: 0x000CFEBC File Offset: 0x000CE0BC
		[CLSCompliant(false)]
		public static void UseProgram(uint program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[456]);
		}

		// Token: 0x06004BAE RID: 19374 RVA: 0x000CFED0 File Offset: 0x000CE0D0
		[CLSCompliant(false)]
		public static void ValidateProgram(int program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[459]);
		}

		// Token: 0x06004BAF RID: 19375 RVA: 0x000CFEE4 File Offset: 0x000CE0E4
		[CLSCompliant(false)]
		public static void ValidateProgram(uint program)
		{
			calli(System.Void(System.UInt32), program, GL.EntryPoints[459]);
		}

		// Token: 0x06004BB0 RID: 19376 RVA: 0x000CFEF8 File Offset: 0x000CE0F8
		[CLSCompliant(false)]
		public static void VertexAttrib1(int index, float x)
		{
			calli(System.Void(System.UInt32,System.Single), index, x, GL.EntryPoints[461]);
		}

		// Token: 0x06004BB1 RID: 19377 RVA: 0x000CFF0C File Offset: 0x000CE10C
		[CLSCompliant(false)]
		public static void VertexAttrib1(uint index, float x)
		{
			calli(System.Void(System.UInt32,System.Single), index, x, GL.EntryPoints[461]);
		}

		// Token: 0x06004BB2 RID: 19378 RVA: 0x000CFF20 File Offset: 0x000CE120
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib1(int index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[462]);
		}

		// Token: 0x06004BB3 RID: 19379 RVA: 0x000CFF34 File Offset: 0x000CE134
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib1(uint index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[462]);
		}

		// Token: 0x06004BB4 RID: 19380 RVA: 0x000CFF48 File Offset: 0x000CE148
		[CLSCompliant(false)]
		public static void VertexAttrib2(int index, float x, float y)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single), index, x, y, GL.EntryPoints[463]);
		}

		// Token: 0x06004BB5 RID: 19381 RVA: 0x000CFF60 File Offset: 0x000CE160
		[CLSCompliant(false)]
		public static void VertexAttrib2(uint index, float x, float y)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single), index, x, y, GL.EntryPoints[463]);
		}

		// Token: 0x06004BB6 RID: 19382 RVA: 0x000CFF78 File Offset: 0x000CE178
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[464]);
			}
		}

		// Token: 0x06004BB7 RID: 19383 RVA: 0x000CFFAC File Offset: 0x000CE1AC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[464]);
			}
		}

		// Token: 0x06004BB8 RID: 19384 RVA: 0x000CFFD0 File Offset: 0x000CE1D0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(int index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[464]);
		}

		// Token: 0x06004BB9 RID: 19385 RVA: 0x000CFFE4 File Offset: 0x000CE1E4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[464]);
			}
		}

		// Token: 0x06004BBA RID: 19386 RVA: 0x000D0018 File Offset: 0x000CE218
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[464]);
			}
		}

		// Token: 0x06004BBB RID: 19387 RVA: 0x000D003C File Offset: 0x000CE23C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib2(uint index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[464]);
		}

		// Token: 0x06004BBC RID: 19388 RVA: 0x000D0050 File Offset: 0x000CE250
		[CLSCompliant(false)]
		public static void VertexAttrib3(int index, float x, float y, float z)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single,System.Single), index, x, y, z, GL.EntryPoints[465]);
		}

		// Token: 0x06004BBD RID: 19389 RVA: 0x000D0068 File Offset: 0x000CE268
		[CLSCompliant(false)]
		public static void VertexAttrib3(uint index, float x, float y, float z)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single,System.Single), index, x, y, z, GL.EntryPoints[465]);
		}

		// Token: 0x06004BBE RID: 19390 RVA: 0x000D0080 File Offset: 0x000CE280
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[466]);
			}
		}

		// Token: 0x06004BBF RID: 19391 RVA: 0x000D00B4 File Offset: 0x000CE2B4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[466]);
			}
		}

		// Token: 0x06004BC0 RID: 19392 RVA: 0x000D00D8 File Offset: 0x000CE2D8
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(int index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[466]);
		}

		// Token: 0x06004BC1 RID: 19393 RVA: 0x000D00EC File Offset: 0x000CE2EC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[466]);
			}
		}

		// Token: 0x06004BC2 RID: 19394 RVA: 0x000D0120 File Offset: 0x000CE320
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[466]);
			}
		}

		// Token: 0x06004BC3 RID: 19395 RVA: 0x000D0144 File Offset: 0x000CE344
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib3(uint index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[466]);
		}

		// Token: 0x06004BC4 RID: 19396 RVA: 0x000D0158 File Offset: 0x000CE358
		[CLSCompliant(false)]
		public static void VertexAttrib4(int index, float x, float y, float z, float w)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single), index, x, y, z, w, GL.EntryPoints[467]);
		}

		// Token: 0x06004BC5 RID: 19397 RVA: 0x000D0170 File Offset: 0x000CE370
		[CLSCompliant(false)]
		public static void VertexAttrib4(uint index, float x, float y, float z, float w)
		{
			calli(System.Void(System.UInt32,System.Single,System.Single,System.Single,System.Single), index, x, y, z, w, GL.EntryPoints[467]);
		}

		// Token: 0x06004BC6 RID: 19398 RVA: 0x000D0188 File Offset: 0x000CE388
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[468]);
			}
		}

		// Token: 0x06004BC7 RID: 19399 RVA: 0x000D01BC File Offset: 0x000CE3BC
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[468]);
			}
		}

		// Token: 0x06004BC8 RID: 19400 RVA: 0x000D01E0 File Offset: 0x000CE3E0
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(int index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[468]);
		}

		// Token: 0x06004BC9 RID: 19401 RVA: 0x000D01F4 File Offset: 0x000CE3F4
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, float[] v)
		{
			fixed (float* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[468]);
			}
		}

		// Token: 0x06004BCA RID: 19402 RVA: 0x000D0228 File Offset: 0x000CE428
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, ref float v)
		{
			fixed (float* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Single*), index, ptr, GL.EntryPoints[468]);
			}
		}

		// Token: 0x06004BCB RID: 19403 RVA: 0x000D024C File Offset: 0x000CE44C
		[CLSCompliant(false)]
		public unsafe static void VertexAttrib4(uint index, float* v)
		{
			calli(System.Void(System.UInt32,System.Single*), index, v, GL.EntryPoints[468]);
		}

		// Token: 0x06004BCC RID: 19404 RVA: 0x000D0260 File Offset: 0x000CE460
		[CLSCompliant(false)]
		public static void VertexAttribDivisor(int index, int divisor)
		{
			calli(System.Void(System.UInt32,System.UInt32), index, divisor, GL.EntryPoints[469]);
		}

		// Token: 0x06004BCD RID: 19405 RVA: 0x000D0274 File Offset: 0x000CE474
		[CLSCompliant(false)]
		public static void VertexAttribDivisor(uint index, uint divisor)
		{
			calli(System.Void(System.UInt32,System.UInt32), index, divisor, GL.EntryPoints[469]);
		}

		// Token: 0x06004BCE RID: 19406 RVA: 0x000D0288 File Offset: 0x000CE488
		[CLSCompliant(false)]
		public static void VertexAttribI4(int index, int x, int y, int z, int w)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), index, x, y, z, w, GL.EntryPoints[473]);
		}

		// Token: 0x06004BCF RID: 19407 RVA: 0x000D02A0 File Offset: 0x000CE4A0
		[CLSCompliant(false)]
		public static void VertexAttribI4(uint index, int x, int y, int z, int w)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), index, x, y, z, w, GL.EntryPoints[473]);
		}

		// Token: 0x06004BD0 RID: 19408 RVA: 0x000D02B8 File Offset: 0x000CE4B8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[474]);
			}
		}

		// Token: 0x06004BD1 RID: 19409 RVA: 0x000D02EC File Offset: 0x000CE4EC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[474]);
			}
		}

		// Token: 0x06004BD2 RID: 19410 RVA: 0x000D0310 File Offset: 0x000CE510
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(int index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[474]);
		}

		// Token: 0x06004BD3 RID: 19411 RVA: 0x000D0324 File Offset: 0x000CE524
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, int[] v)
		{
			fixed (int* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[474]);
			}
		}

		// Token: 0x06004BD4 RID: 19412 RVA: 0x000D0358 File Offset: 0x000CE558
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ref int v)
		{
			fixed (int* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.Int32*), index, ptr, GL.EntryPoints[474]);
			}
		}

		// Token: 0x06004BD5 RID: 19413 RVA: 0x000D037C File Offset: 0x000CE57C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, int* v)
		{
			calli(System.Void(System.UInt32,System.Int32*), index, v, GL.EntryPoints[474]);
		}

		// Token: 0x06004BD6 RID: 19414 RVA: 0x000D0390 File Offset: 0x000CE590
		[CLSCompliant(false)]
		public static void VertexAttribI4(uint index, uint x, uint y, uint z, uint w)
		{
			calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), index, x, y, z, w, GL.EntryPoints[475]);
		}

		// Token: 0x06004BD7 RID: 19415 RVA: 0x000D03A8 File Offset: 0x000CE5A8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, uint[] v)
		{
			fixed (uint* ptr = ref (v != null && v.Length != 0) ? ref v[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[476]);
			}
		}

		// Token: 0x06004BD8 RID: 19416 RVA: 0x000D03DC File Offset: 0x000CE5DC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, ref uint v)
		{
			fixed (uint* ptr = &v)
			{
				calli(System.Void(System.UInt32,System.UInt32*), index, ptr, GL.EntryPoints[476]);
			}
		}

		// Token: 0x06004BD9 RID: 19417 RVA: 0x000D0400 File Offset: 0x000CE600
		[CLSCompliant(false)]
		public unsafe static void VertexAttribI4(uint index, uint* v)
		{
			calli(System.Void(System.UInt32,System.UInt32*), index, v, GL.EntryPoints[476]);
		}

		// Token: 0x06004BDA RID: 19418 RVA: 0x000D0414 File Offset: 0x000CE614
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public static void VertexAttribIPointer(int index, int size, All type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[477]);
		}

		// Token: 0x06004BDB RID: 19419 RVA: 0x000D042C File Offset: 0x000CE62C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, All type, int stride, [In] [Out] T4[] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[477]);
			}
		}

		// Token: 0x06004BDC RID: 19420 RVA: 0x000D0468 File Offset: 0x000CE668
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, All type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[477]);
			}
		}

		// Token: 0x06004BDD RID: 19421 RVA: 0x000D04A8 File Offset: 0x000CE6A8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, All type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[477]);
			}
		}

		// Token: 0x06004BDE RID: 19422 RVA: 0x000D04E8 File Offset: 0x000CE6E8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, All type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
		{
			fixed (T4* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[477]);
			}
		}

		// Token: 0x06004BDF RID: 19423 RVA: 0x000D0510 File Offset: 0x000CE710
		[CLSCompliant(false)]
		public static void VertexAttribIPointer(int index, int size, VertexAttribIntegerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[477]);
		}

		// Token: 0x06004BE0 RID: 19424 RVA: 0x000D0528 File Offset: 0x000CE728
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[477]);
			}
		}

		// Token: 0x06004BE1 RID: 19425 RVA: 0x000D0564 File Offset: 0x000CE764
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[477]);
			}
		}

		// Token: 0x06004BE2 RID: 19426 RVA: 0x000D05A4 File Offset: 0x000CE7A4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[477]);
			}
		}

		// Token: 0x06004BE3 RID: 19427 RVA: 0x000D05E4 File Offset: 0x000CE7E4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIntegerType type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
		{
			fixed (T4* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[477]);
			}
		}

		// Token: 0x06004BE4 RID: 19428 RVA: 0x000D060C File Offset: 0x000CE80C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void VertexAttribIPointer(uint index, int size, All type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[477]);
		}

		// Token: 0x06004BE5 RID: 19429 RVA: 0x000D0624 File Offset: 0x000CE824
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, All type, int stride, [In] [Out] T4[] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[477]);
			}
		}

		// Token: 0x06004BE6 RID: 19430 RVA: 0x000D0660 File Offset: 0x000CE860
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, All type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[477]);
			}
		}

		// Token: 0x06004BE7 RID: 19431 RVA: 0x000D06A0 File Offset: 0x000CE8A0
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, All type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[477]);
			}
		}

		// Token: 0x06004BE8 RID: 19432 RVA: 0x000D06E0 File Offset: 0x000CE8E0
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, All type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
		{
			fixed (T4* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[477]);
			}
		}

		// Token: 0x06004BE9 RID: 19433 RVA: 0x000D0708 File Offset: 0x000CE908
		[CLSCompliant(false)]
		public static void VertexAttribIPointer(uint index, int size, VertexAttribIntegerType type, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, pointer, GL.EntryPoints[477]);
		}

		// Token: 0x06004BEA RID: 19434 RVA: 0x000D0720 File Offset: 0x000CE920
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[477]);
			}
		}

		// Token: 0x06004BEB RID: 19435 RVA: 0x000D075C File Offset: 0x000CE95C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[477]);
			}
		}

		// Token: 0x06004BEC RID: 19436 RVA: 0x000D079C File Offset: 0x000CE99C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, [In] [Out] T4[,,] pointer) where T4 : struct
		{
			fixed (T4* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[477]);
			}
		}

		// Token: 0x06004BED RID: 19437 RVA: 0x000D07DC File Offset: 0x000CE9DC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIntegerType type, int stride, [In] [Out] ref T4 pointer) where T4 : struct
		{
			fixed (T4* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr), index, size, type, stride, ptr, GL.EntryPoints[477]);
			}
		}

		// Token: 0x06004BEE RID: 19438 RVA: 0x000D0804 File Offset: 0x000CEA04
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void VertexAttribPointer(int index, int size, All type, bool normalized, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, pointer, GL.EntryPoints[478]);
		}

		// Token: 0x06004BEF RID: 19439 RVA: 0x000D0820 File Offset: 0x000CEA20
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(int index, int size, All type, bool normalized, int stride, [In] [Out] T5[] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[478]);
			}
		}

		// Token: 0x06004BF0 RID: 19440 RVA: 0x000D085C File Offset: 0x000CEA5C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void VertexAttribPointer<T5>(int index, int size, All type, bool normalized, int stride, [In] [Out] T5[,] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[478]);
			}
		}

		// Token: 0x06004BF1 RID: 19441 RVA: 0x000D089C File Offset: 0x000CEA9C
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void VertexAttribPointer<T5>(int index, int size, All type, bool normalized, int stride, [In] [Out] T5[,,] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[478]);
			}
		}

		// Token: 0x06004BF2 RID: 19442 RVA: 0x000D08E0 File Offset: 0x000CEAE0
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(int index, int size, All type, bool normalized, int stride, [In] [Out] ref T5 pointer) where T5 : struct
		{
			fixed (T5* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[478]);
			}
		}

		// Token: 0x06004BF3 RID: 19443 RVA: 0x000D0908 File Offset: 0x000CEB08
		[CLSCompliant(false)]
		public static void VertexAttribPointer(int index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, pointer, GL.EntryPoints[478]);
		}

		// Token: 0x06004BF4 RID: 19444 RVA: 0x000D0924 File Offset: 0x000CEB24
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[478]);
			}
		}

		// Token: 0x06004BF5 RID: 19445 RVA: 0x000D0960 File Offset: 0x000CEB60
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[,] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[478]);
			}
		}

		// Token: 0x06004BF6 RID: 19446 RVA: 0x000D09A0 File Offset: 0x000CEBA0
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[,,] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[478]);
			}
		}

		// Token: 0x06004BF7 RID: 19447 RVA: 0x000D09E4 File Offset: 0x000CEBE4
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] ref T5 pointer) where T5 : struct
		{
			fixed (T5* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[478]);
			}
		}

		// Token: 0x06004BF8 RID: 19448 RVA: 0x000D0A0C File Offset: 0x000CEC0C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void VertexAttribPointer(uint index, int size, All type, bool normalized, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, pointer, GL.EntryPoints[478]);
		}

		// Token: 0x06004BF9 RID: 19449 RVA: 0x000D0A28 File Offset: 0x000CEC28
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void VertexAttribPointer<T5>(uint index, int size, All type, bool normalized, int stride, [In] [Out] T5[] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[478]);
			}
		}

		// Token: 0x06004BFA RID: 19450 RVA: 0x000D0A64 File Offset: 0x000CEC64
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(uint index, int size, All type, bool normalized, int stride, [In] [Out] T5[,] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[478]);
			}
		}

		// Token: 0x06004BFB RID: 19451 RVA: 0x000D0AA4 File Offset: 0x000CECA4
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(uint index, int size, All type, bool normalized, int stride, [In] [Out] T5[,,] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[478]);
			}
		}

		// Token: 0x06004BFC RID: 19452 RVA: 0x000D0AE8 File Offset: 0x000CECE8
		[CLSCompliant(false)]
		[Obsolete("Use strongly-typed overload instead")]
		public unsafe static void VertexAttribPointer<T5>(uint index, int size, All type, bool normalized, int stride, [In] [Out] ref T5 pointer) where T5 : struct
		{
			fixed (T5* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[478]);
			}
		}

		// Token: 0x06004BFD RID: 19453 RVA: 0x000D0B10 File Offset: 0x000CED10
		[CLSCompliant(false)]
		public static void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer)
		{
			calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, pointer, GL.EntryPoints[478]);
		}

		// Token: 0x06004BFE RID: 19454 RVA: 0x000D0B2C File Offset: 0x000CED2C
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[478]);
			}
		}

		// Token: 0x06004BFF RID: 19455 RVA: 0x000D0B68 File Offset: 0x000CED68
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[,] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[478]);
			}
		}

		// Token: 0x06004C00 RID: 19456 RVA: 0x000D0BA8 File Offset: 0x000CEDA8
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] T5[,,] pointer) where T5 : struct
		{
			fixed (T5* ptr = ref (pointer != null && pointer.Length != 0) ? ref pointer[0, 0, 0] : ref *null)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[478]);
			}
		}

		// Token: 0x06004C01 RID: 19457 RVA: 0x000D0BEC File Offset: 0x000CEDEC
		[CLSCompliant(false)]
		public unsafe static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, [In] [Out] ref T5 pointer) where T5 : struct
		{
			fixed (T5* ptr = &pointer)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr), index, size, type, normalized, stride, ptr, GL.EntryPoints[478]);
			}
		}

		// Token: 0x06004C02 RID: 19458 RVA: 0x000D0C14 File Offset: 0x000CEE14
		public static void Viewport(int x, int y, int width, int height)
		{
			calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), x, y, width, height, GL.EntryPoints[479]);
		}

		// Token: 0x06004C03 RID: 19459 RVA: 0x000D0C2C File Offset: 0x000CEE2C
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void WaitSync(IntPtr sync, All flags, long timeout)
		{
			calli(System.Void(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[480]);
		}

		// Token: 0x06004C04 RID: 19460 RVA: 0x000D0C44 File Offset: 0x000CEE44
		[Obsolete("Use strongly-typed overload instead")]
		[CLSCompliant(false)]
		public static void WaitSync(IntPtr sync, All flags, ulong timeout)
		{
			calli(System.Void(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[480]);
		}

		// Token: 0x06004C05 RID: 19461 RVA: 0x000D0C5C File Offset: 0x000CEE5C
		[CLSCompliant(false)]
		public static void WaitSync(IntPtr sync, WaitSyncFlags flags, long timeout)
		{
			calli(System.Void(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[480]);
		}

		// Token: 0x06004C06 RID: 19462 RVA: 0x000D0C74 File Offset: 0x000CEE74
		[CLSCompliant(false)]
		public static void WaitSync(IntPtr sync, WaitSyncFlags flags, ulong timeout)
		{
			calli(System.Void(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[480]);
		}

		// Token: 0x040055A8 RID: 21928
		private const string Library = "libGLESv2.dll";

		// Token: 0x040055A9 RID: 21929
		private static readonly object sync_root = new object();

		// Token: 0x040055AA RID: 21930
		private static IntPtr[] EntryPoints;

		// Token: 0x040055AB RID: 21931
		private static byte[] EntryPointNames = new byte[]
		{
			103,
			108,
			65,
			99,
			116,
			105,
			118,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			69,
			88,
			84,
			0,
			103,
			108,
			65,
			99,
			116,
			105,
			118,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			69,
			88,
			84,
			0,
			103,
			108,
			65,
			99,
			116,
			105,
			118,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			0,
			103,
			108,
			65,
			108,
			112,
			104,
			97,
			70,
			117,
			110,
			99,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			65,
			116,
			116,
			97,
			99,
			104,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			80,
			101,
			114,
			102,
			77,
			111,
			110,
			105,
			116,
			111,
			114,
			65,
			77,
			68,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			80,
			101,
			114,
			102,
			81,
			117,
			101,
			114,
			121,
			73,
			78,
			84,
			69,
			76,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			81,
			117,
			101,
			114,
			121,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			81,
			117,
			101,
			114,
			121,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			101,
			103,
			105,
			110,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			65,
			116,
			116,
			114,
			105,
			98,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			66,
			97,
			115,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			82,
			97,
			110,
			103,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			0,
			103,
			108,
			66,
			105,
			110,
			100,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			79,
			69,
			83,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			66,
			97,
			114,
			114,
			105,
			101,
			114,
			75,
			72,
			82,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			66,
			97,
			114,
			114,
			105,
			101,
			114,
			78,
			86,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			67,
			111,
			108,
			111,
			114,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			69,
			113,
			117,
			97,
			116,
			105,
			111,
			110,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			70,
			117,
			110,
			99,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			66,
			108,
			101,
			110,
			100,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			78,
			86,
			0,
			103,
			108,
			66,
			108,
			105,
			116,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			66,
			108,
			105,
			116,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			65,
			78,
			71,
			76,
			69,
			0,
			103,
			108,
			66,
			108,
			105,
			116,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			78,
			86,
			0,
			103,
			108,
			66,
			117,
			102,
			102,
			101,
			114,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			66,
			117,
			102,
			102,
			101,
			114,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			67,
			104,
			101,
			99,
			107,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			97,
			116,
			117,
			115,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			102,
			105,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			66,
			117,
			102,
			102,
			101,
			114,
			117,
			105,
			118,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			67,
			111,
			108,
			111,
			114,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			68,
			101,
			112,
			116,
			104,
			102,
			0,
			103,
			108,
			67,
			108,
			101,
			97,
			114,
			83,
			116,
			101,
			110,
			99,
			105,
			108,
			0,
			103,
			108,
			67,
			108,
			105,
			101,
			110,
			116,
			87,
			97,
			105,
			116,
			83,
			121,
			110,
			99,
			0,
			103,
			108,
			67,
			108,
			105,
			101,
			110,
			116,
			87,
			97,
			105,
			116,
			83,
			121,
			110,
			99,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			77,
			97,
			115,
			107,
			0,
			103,
			108,
			67,
			111,
			108,
			111,
			114,
			77,
			97,
			115,
			107,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			105,
			108,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			79,
			69,
			83,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			0,
			103,
			108,
			67,
			111,
			109,
			112,
			114,
			101,
			115,
			115,
			101,
			100,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			79,
			69,
			83,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			66,
			117,
			102,
			102,
			101,
			114,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			66,
			117,
			102,
			102,
			101,
			114,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			73,
			109,
			97,
			103,
			101,
			83,
			117,
			98,
			68,
			97,
			116,
			97,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			79,
			69,
			83,
			0,
			103,
			108,
			67,
			111,
			112,
			121,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			76,
			101,
			118,
			101,
			108,
			115,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			67,
			111,
			118,
			101,
			114,
			97,
			103,
			101,
			77,
			97,
			115,
			107,
			78,
			86,
			0,
			103,
			108,
			67,
			111,
			118,
			101,
			114,
			97,
			103,
			101,
			79,
			112,
			101,
			114,
			97,
			116,
			105,
			111,
			110,
			78,
			86,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			80,
			101,
			114,
			102,
			81,
			117,
			101,
			114,
			121,
			73,
			78,
			84,
			69,
			76,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			114,
			101,
			97,
			116,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			67,
			117,
			108,
			108,
			70,
			97,
			99,
			101,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			97,
			108,
			108,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			97,
			108,
			108,
			98,
			97,
			99,
			107,
			75,
			72,
			82,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			111,
			110,
			116,
			114,
			111,
			108,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			67,
			111,
			110,
			116,
			114,
			111,
			108,
			75,
			72,
			82,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			73,
			110,
			115,
			101,
			114,
			116,
			0,
			103,
			108,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			73,
			110,
			115,
			101,
			114,
			116,
			75,
			72,
			82,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			70,
			101,
			110,
			99,
			101,
			115,
			78,
			86,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			80,
			101,
			114,
			102,
			77,
			111,
			110,
			105,
			116,
			111,
			114,
			115,
			65,
			77,
			68,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			80,
			101,
			114,
			102,
			81,
			117,
			101,
			114,
			121,
			73,
			78,
			84,
			69,
			76,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			81,
			117,
			101,
			114,
			105,
			101,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			81,
			117,
			101,
			114,
			105,
			101,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			83,
			121,
			110,
			99,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			83,
			121,
			110,
			99,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			115,
			0,
			103,
			108,
			68,
			101,
			108,
			101,
			116,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			115,
			79,
			69,
			83,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			70,
			117,
			110,
			99,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			77,
			97,
			115,
			107,
			0,
			103,
			108,
			68,
			101,
			112,
			116,
			104,
			82,
			97,
			110,
			103,
			101,
			102,
			0,
			103,
			108,
			68,
			101,
			116,
			97,
			99,
			104,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			68,
			114,
			105,
			118,
			101,
			114,
			67,
			111,
			110,
			116,
			114,
			111,
			108,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			105,
			115,
			97,
			98,
			108,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			65,
			114,
			114,
			97,
			121,
			0,
			103,
			108,
			68,
			105,
			115,
			99,
			97,
			114,
			100,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			65,
			78,
			71,
			76,
			69,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			78,
			86,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			78,
			86,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			65,
			78,
			71,
			76,
			69,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			69,
			88,
			84,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			73,
			110,
			115,
			116,
			97,
			110,
			99,
			101,
			100,
			78,
			86,
			0,
			103,
			108,
			68,
			114,
			97,
			119,
			82,
			97,
			110,
			103,
			101,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			0,
			103,
			108,
			69,
			71,
			76,
			73,
			109,
			97,
			103,
			101,
			84,
			97,
			114,
			103,
			101,
			116,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			79,
			69,
			83,
			0,
			103,
			108,
			69,
			71,
			76,
			73,
			109,
			97,
			103,
			101,
			84,
			97,
			114,
			103,
			101,
			116,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			50,
			68,
			79,
			69,
			83,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			68,
			114,
			105,
			118,
			101,
			114,
			67,
			111,
			110,
			116,
			114,
			111,
			108,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			69,
			110,
			97,
			98,
			108,
			101,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			65,
			114,
			114,
			97,
			121,
			0,
			103,
			108,
			69,
			110,
			100,
			80,
			101,
			114,
			102,
			77,
			111,
			110,
			105,
			116,
			111,
			114,
			65,
			77,
			68,
			0,
			103,
			108,
			69,
			110,
			100,
			80,
			101,
			114,
			102,
			81,
			117,
			101,
			114,
			121,
			73,
			78,
			84,
			69,
			76,
			0,
			103,
			108,
			69,
			110,
			100,
			81,
			117,
			101,
			114,
			121,
			0,
			103,
			108,
			69,
			110,
			100,
			81,
			117,
			101,
			114,
			121,
			69,
			88,
			84,
			0,
			103,
			108,
			69,
			110,
			100,
			84,
			105,
			108,
			105,
			110,
			103,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			69,
			110,
			100,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			69,
			120,
			116,
			71,
			101,
			116,
			66,
			117,
			102,
			102,
			101,
			114,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			118,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			69,
			120,
			116,
			71,
			101,
			116,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			69,
			120,
			116,
			71,
			101,
			116,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			115,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			69,
			120,
			116,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			66,
			105,
			110,
			97,
			114,
			121,
			83,
			111,
			117,
			114,
			99,
			101,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			69,
			120,
			116,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			115,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			69,
			120,
			116,
			71,
			101,
			116,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			115,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			69,
			120,
			116,
			71,
			101,
			116,
			83,
			104,
			97,
			100,
			101,
			114,
			115,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			69,
			120,
			116,
			71,
			101,
			116,
			84,
			101,
			120,
			76,
			101,
			118,
			101,
			108,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			69,
			120,
			116,
			71,
			101,
			116,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			69,
			120,
			116,
			71,
			101,
			116,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			69,
			120,
			116,
			73,
			115,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			66,
			105,
			110,
			97,
			114,
			121,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			69,
			120,
			116,
			84,
			101,
			120,
			79,
			98,
			106,
			101,
			99,
			116,
			83,
			116,
			97,
			116,
			101,
			79,
			118,
			101,
			114,
			114,
			105,
			100,
			101,
			105,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			70,
			101,
			110,
			99,
			101,
			83,
			121,
			110,
			99,
			0,
			103,
			108,
			70,
			101,
			110,
			99,
			101,
			83,
			121,
			110,
			99,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			70,
			105,
			110,
			105,
			115,
			104,
			0,
			103,
			108,
			70,
			105,
			110,
			105,
			115,
			104,
			70,
			101,
			110,
			99,
			101,
			78,
			86,
			0,
			103,
			108,
			70,
			108,
			117,
			115,
			104,
			0,
			103,
			108,
			70,
			108,
			117,
			115,
			104,
			77,
			97,
			112,
			112,
			101,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			82,
			97,
			110,
			103,
			101,
			0,
			103,
			108,
			70,
			108,
			117,
			115,
			104,
			77,
			97,
			112,
			112,
			101,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			82,
			97,
			110,
			103,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			50,
			68,
			0,
			103,
			108,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			50,
			68,
			77,
			117,
			108,
			116,
			105,
			115,
			97,
			109,
			112,
			108,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			50,
			68,
			77,
			117,
			108,
			116,
			105,
			115,
			97,
			109,
			112,
			108,
			101,
			73,
			77,
			71,
			0,
			103,
			108,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			51,
			68,
			79,
			69,
			83,
			0,
			103,
			108,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			76,
			97,
			121,
			101,
			114,
			0,
			103,
			108,
			70,
			114,
			111,
			110,
			116,
			70,
			97,
			99,
			101,
			0,
			103,
			108,
			71,
			101,
			110,
			66,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			71,
			101,
			110,
			101,
			114,
			97,
			116,
			101,
			77,
			105,
			112,
			109,
			97,
			112,
			0,
			103,
			108,
			71,
			101,
			110,
			70,
			101,
			110,
			99,
			101,
			115,
			78,
			86,
			0,
			103,
			108,
			71,
			101,
			110,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			71,
			101,
			110,
			80,
			101,
			114,
			102,
			77,
			111,
			110,
			105,
			116,
			111,
			114,
			115,
			65,
			77,
			68,
			0,
			103,
			108,
			71,
			101,
			110,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			110,
			81,
			117,
			101,
			114,
			105,
			101,
			115,
			0,
			103,
			108,
			71,
			101,
			110,
			81,
			117,
			101,
			114,
			105,
			101,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			110,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			115,
			0,
			103,
			108,
			71,
			101,
			110,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			115,
			0,
			103,
			108,
			71,
			101,
			110,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			115,
			0,
			103,
			108,
			71,
			101,
			110,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			115,
			0,
			103,
			108,
			71,
			101,
			110,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			115,
			0,
			103,
			108,
			71,
			101,
			110,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			115,
			79,
			69,
			83,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			65,
			116,
			116,
			114,
			105,
			98,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			66,
			108,
			111,
			99,
			107,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			66,
			108,
			111,
			99,
			107,
			78,
			97,
			109,
			101,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			99,
			116,
			105,
			118,
			101,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			115,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			116,
			116,
			97,
			99,
			104,
			101,
			100,
			83,
			104,
			97,
			100,
			101,
			114,
			115,
			0,
			103,
			108,
			71,
			101,
			116,
			65,
			116,
			116,
			114,
			105,
			98,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			0,
			103,
			108,
			71,
			101,
			116,
			66,
			111,
			111,
			108,
			101,
			97,
			110,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			66,
			117,
			102,
			102,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			54,
			52,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			66,
			117,
			102,
			102,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			66,
			117,
			102,
			102,
			101,
			114,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			66,
			117,
			102,
			102,
			101,
			114,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			118,
			79,
			69,
			83,
			0,
			103,
			108,
			71,
			101,
			116,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			76,
			111,
			103,
			0,
			103,
			108,
			71,
			101,
			116,
			68,
			101,
			98,
			117,
			103,
			77,
			101,
			115,
			115,
			97,
			103,
			101,
			76,
			111,
			103,
			75,
			72,
			82,
			0,
			103,
			108,
			71,
			101,
			116,
			68,
			114,
			105,
			118,
			101,
			114,
			67,
			111,
			110,
			116,
			114,
			111,
			108,
			115,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			71,
			101,
			116,
			68,
			114,
			105,
			118,
			101,
			114,
			67,
			111,
			110,
			116,
			114,
			111,
			108,
			83,
			116,
			114,
			105,
			110,
			103,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			71,
			101,
			116,
			69,
			114,
			114,
			111,
			114,
			0,
			103,
			108,
			71,
			101,
			116,
			70,
			101,
			110,
			99,
			101,
			105,
			118,
			78,
			86,
			0,
			103,
			108,
			71,
			101,
			116,
			70,
			105,
			114,
			115,
			116,
			80,
			101,
			114,
			102,
			81,
			117,
			101,
			114,
			121,
			73,
			100,
			73,
			78,
			84,
			69,
			76,
			0,
			103,
			108,
			71,
			101,
			116,
			70,
			108,
			111,
			97,
			116,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			70,
			114,
			97,
			103,
			68,
			97,
			116,
			97,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			0,
			103,
			108,
			71,
			101,
			116,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			65,
			116,
			116,
			97,
			99,
			104,
			109,
			101,
			110,
			116,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			71,
			114,
			97,
			112,
			104,
			105,
			99,
			115,
			82,
			101,
			115,
			101,
			116,
			83,
			116,
			97,
			116,
			117,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			116,
			73,
			110,
			116,
			101,
			103,
			101,
			114,
			54,
			52,
			105,
			95,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			73,
			110,
			116,
			101,
			103,
			101,
			114,
			54,
			52,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			73,
			110,
			116,
			101,
			103,
			101,
			114,
			54,
			52,
			118,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			71,
			101,
			116,
			73,
			110,
			116,
			101,
			103,
			101,
			114,
			105,
			95,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			73,
			110,
			116,
			101,
			103,
			101,
			114,
			105,
			95,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			116,
			73,
			110,
			116,
			101,
			103,
			101,
			114,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			73,
			110,
			116,
			101,
			114,
			110,
			97,
			108,
			102,
			111,
			114,
			109,
			97,
			116,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			78,
			101,
			120,
			116,
			80,
			101,
			114,
			102,
			81,
			117,
			101,
			114,
			121,
			73,
			100,
			73,
			78,
			84,
			69,
			76,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			116,
			110,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			116,
			79,
			98,
			106,
			101,
			99,
			116,
			76,
			97,
			98,
			101,
			108,
			0,
			103,
			108,
			71,
			101,
			116,
			79,
			98,
			106,
			101,
			99,
			116,
			76,
			97,
			98,
			101,
			108,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			116,
			79,
			98,
			106,
			101,
			99,
			116,
			76,
			97,
			98,
			101,
			108,
			75,
			72,
			82,
			0,
			103,
			108,
			71,
			101,
			116,
			79,
			98,
			106,
			101,
			99,
			116,
			80,
			116,
			114,
			76,
			97,
			98,
			101,
			108,
			0,
			103,
			108,
			71,
			101,
			116,
			79,
			98,
			106,
			101,
			99,
			116,
			80,
			116,
			114,
			76,
			97,
			98,
			101,
			108,
			75,
			72,
			82,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			101,
			114,
			102,
			67,
			111,
			117,
			110,
			116,
			101,
			114,
			73,
			110,
			102,
			111,
			73,
			78,
			84,
			69,
			76,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			101,
			114,
			102,
			77,
			111,
			110,
			105,
			116,
			111,
			114,
			67,
			111,
			117,
			110,
			116,
			101,
			114,
			68,
			97,
			116,
			97,
			65,
			77,
			68,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			101,
			114,
			102,
			77,
			111,
			110,
			105,
			116,
			111,
			114,
			67,
			111,
			117,
			110,
			116,
			101,
			114,
			73,
			110,
			102,
			111,
			65,
			77,
			68,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			101,
			114,
			102,
			77,
			111,
			110,
			105,
			116,
			111,
			114,
			67,
			111,
			117,
			110,
			116,
			101,
			114,
			115,
			65,
			77,
			68,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			101,
			114,
			102,
			77,
			111,
			110,
			105,
			116,
			111,
			114,
			67,
			111,
			117,
			110,
			116,
			101,
			114,
			83,
			116,
			114,
			105,
			110,
			103,
			65,
			77,
			68,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			101,
			114,
			102,
			77,
			111,
			110,
			105,
			116,
			111,
			114,
			71,
			114,
			111,
			117,
			112,
			115,
			65,
			77,
			68,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			101,
			114,
			102,
			77,
			111,
			110,
			105,
			116,
			111,
			114,
			71,
			114,
			111,
			117,
			112,
			83,
			116,
			114,
			105,
			110,
			103,
			65,
			77,
			68,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			101,
			114,
			102,
			81,
			117,
			101,
			114,
			121,
			68,
			97,
			116,
			97,
			73,
			78,
			84,
			69,
			76,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			101,
			114,
			102,
			81,
			117,
			101,
			114,
			121,
			73,
			100,
			66,
			121,
			78,
			97,
			109,
			101,
			73,
			78,
			84,
			69,
			76,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			101,
			114,
			102,
			81,
			117,
			101,
			114,
			121,
			73,
			110,
			102,
			111,
			73,
			78,
			84,
			69,
			76,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			118,
			75,
			72,
			82,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			66,
			105,
			110,
			97,
			114,
			121,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			66,
			105,
			110,
			97,
			114,
			121,
			79,
			69,
			83,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			73,
			110,
			102,
			111,
			76,
			111,
			103,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			73,
			110,
			102,
			111,
			76,
			111,
			103,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			116,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			116,
			81,
			117,
			101,
			114,
			121,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			81,
			117,
			101,
			114,
			121,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			116,
			81,
			117,
			101,
			114,
			121,
			79,
			98,
			106,
			101,
			99,
			116,
			105,
			54,
			52,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			116,
			81,
			117,
			101,
			114,
			121,
			79,
			98,
			106,
			101,
			99,
			116,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			116,
			81,
			117,
			101,
			114,
			121,
			79,
			98,
			106,
			101,
			99,
			116,
			117,
			105,
			54,
			52,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			116,
			81,
			117,
			101,
			114,
			121,
			79,
			98,
			106,
			101,
			99,
			116,
			117,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			81,
			117,
			101,
			114,
			121,
			79,
			98,
			106,
			101,
			99,
			116,
			117,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			116,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			73,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			73,
			117,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			104,
			97,
			100,
			101,
			114,
			73,
			110,
			102,
			111,
			76,
			111,
			103,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			104,
			97,
			100,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			104,
			97,
			100,
			101,
			114,
			80,
			114,
			101,
			99,
			105,
			115,
			105,
			111,
			110,
			70,
			111,
			114,
			109,
			97,
			116,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			104,
			97,
			100,
			101,
			114,
			83,
			111,
			117,
			114,
			99,
			101,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			116,
			114,
			105,
			110,
			103,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			116,
			114,
			105,
			110,
			103,
			105,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			121,
			110,
			99,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			83,
			121,
			110,
			99,
			105,
			118,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			71,
			101,
			116,
			84,
			101,
			120,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			84,
			101,
			120,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			73,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			116,
			84,
			101,
			120,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			73,
			117,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			71,
			101,
			116,
			84,
			101,
			120,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			86,
			97,
			114,
			121,
			105,
			110,
			103,
			0,
			103,
			108,
			71,
			101,
			116,
			84,
			114,
			97,
			110,
			115,
			108,
			97,
			116,
			101,
			100,
			83,
			104,
			97,
			100,
			101,
			114,
			83,
			111,
			117,
			114,
			99,
			101,
			65,
			78,
			71,
			76,
			69,
			0,
			103,
			108,
			71,
			101,
			116,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			66,
			108,
			111,
			99,
			107,
			73,
			110,
			100,
			101,
			120,
			0,
			103,
			108,
			71,
			101,
			116,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			102,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			73,
			110,
			100,
			105,
			99,
			101,
			115,
			0,
			103,
			108,
			71,
			101,
			116,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			76,
			111,
			99,
			97,
			116,
			105,
			111,
			110,
			0,
			103,
			108,
			71,
			101,
			116,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			117,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			102,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			73,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			73,
			117,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			105,
			118,
			0,
			103,
			108,
			71,
			101,
			116,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			118,
			0,
			103,
			108,
			72,
			105,
			110,
			116,
			0,
			103,
			108,
			73,
			110,
			115,
			101,
			114,
			116,
			69,
			118,
			101,
			110,
			116,
			77,
			97,
			114,
			107,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			73,
			110,
			118,
			97,
			108,
			105,
			100,
			97,
			116,
			101,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			73,
			110,
			118,
			97,
			108,
			105,
			100,
			97,
			116,
			101,
			83,
			117,
			98,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			73,
			115,
			66,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			73,
			115,
			69,
			110,
			97,
			98,
			108,
			101,
			100,
			0,
			103,
			108,
			73,
			115,
			69,
			110,
			97,
			98,
			108,
			101,
			100,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			73,
			115,
			70,
			101,
			110,
			99,
			101,
			78,
			86,
			0,
			103,
			108,
			73,
			115,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			73,
			115,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			73,
			115,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			73,
			115,
			81,
			117,
			101,
			114,
			121,
			0,
			103,
			108,
			73,
			115,
			81,
			117,
			101,
			114,
			121,
			69,
			88,
			84,
			0,
			103,
			108,
			73,
			115,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			73,
			115,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			0,
			103,
			108,
			73,
			115,
			83,
			104,
			97,
			100,
			101,
			114,
			0,
			103,
			108,
			73,
			115,
			83,
			121,
			110,
			99,
			0,
			103,
			108,
			73,
			115,
			83,
			121,
			110,
			99,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			73,
			115,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			0,
			103,
			108,
			73,
			115,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			73,
			115,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			0,
			103,
			108,
			73,
			115,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			114,
			114,
			97,
			121,
			79,
			69,
			83,
			0,
			103,
			108,
			76,
			97,
			98,
			101,
			108,
			79,
			98,
			106,
			101,
			99,
			116,
			69,
			88,
			84,
			0,
			103,
			108,
			76,
			105,
			110,
			101,
			87,
			105,
			100,
			116,
			104,
			0,
			103,
			108,
			76,
			105,
			110,
			107,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			77,
			97,
			112,
			66,
			117,
			102,
			102,
			101,
			114,
			79,
			69,
			83,
			0,
			103,
			108,
			77,
			97,
			112,
			66,
			117,
			102,
			102,
			101,
			114,
			82,
			97,
			110,
			103,
			101,
			0,
			103,
			108,
			77,
			97,
			112,
			66,
			117,
			102,
			102,
			101,
			114,
			82,
			97,
			110,
			103,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			77,
			105,
			110,
			83,
			97,
			109,
			112,
			108,
			101,
			83,
			104,
			97,
			100,
			105,
			110,
			103,
			79,
			69,
			83,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			68,
			114,
			97,
			119,
			65,
			114,
			114,
			97,
			121,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			77,
			117,
			108,
			116,
			105,
			68,
			114,
			97,
			119,
			69,
			108,
			101,
			109,
			101,
			110,
			116,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			79,
			98,
			106,
			101,
			99,
			116,
			76,
			97,
			98,
			101,
			108,
			0,
			103,
			108,
			79,
			98,
			106,
			101,
			99,
			116,
			76,
			97,
			98,
			101,
			108,
			75,
			72,
			82,
			0,
			103,
			108,
			79,
			98,
			106,
			101,
			99,
			116,
			80,
			116,
			114,
			76,
			97,
			98,
			101,
			108,
			0,
			103,
			108,
			79,
			98,
			106,
			101,
			99,
			116,
			80,
			116,
			114,
			76,
			97,
			98,
			101,
			108,
			75,
			72,
			82,
			0,
			103,
			108,
			80,
			97,
			116,
			99,
			104,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			97,
			117,
			115,
			101,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			80,
			105,
			120,
			101,
			108,
			83,
			116,
			111,
			114,
			101,
			105,
			0,
			103,
			108,
			80,
			111,
			108,
			121,
			103,
			111,
			110,
			79,
			102,
			102,
			115,
			101,
			116,
			0,
			103,
			108,
			80,
			111,
			112,
			68,
			101,
			98,
			117,
			103,
			71,
			114,
			111,
			117,
			112,
			0,
			103,
			108,
			80,
			111,
			112,
			68,
			101,
			98,
			117,
			103,
			71,
			114,
			111,
			117,
			112,
			75,
			72,
			82,
			0,
			103,
			108,
			80,
			111,
			112,
			71,
			114,
			111,
			117,
			112,
			77,
			97,
			114,
			107,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			105,
			109,
			105,
			116,
			105,
			118,
			101,
			66,
			111,
			117,
			110,
			100,
			105,
			110,
			103,
			66,
			111,
			120,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			66,
			105,
			110,
			97,
			114,
			121,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			66,
			105,
			110,
			97,
			114,
			121,
			79,
			69,
			83,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			102,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			117,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			117,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			102,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			117,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			117,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			102,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			117,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			117,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			102,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			117,
			105,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			117,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			50,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			50,
			120,
			51,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			50,
			120,
			52,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			51,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			51,
			120,
			50,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			51,
			120,
			52,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			52,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			52,
			120,
			50,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			52,
			120,
			51,
			102,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			80,
			117,
			115,
			104,
			68,
			101,
			98,
			117,
			103,
			71,
			114,
			111,
			117,
			112,
			0,
			103,
			108,
			80,
			117,
			115,
			104,
			68,
			101,
			98,
			117,
			103,
			71,
			114,
			111,
			117,
			112,
			75,
			72,
			82,
			0,
			103,
			108,
			80,
			117,
			115,
			104,
			71,
			114,
			111,
			117,
			112,
			77,
			97,
			114,
			107,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			81,
			117,
			101,
			114,
			121,
			67,
			111,
			117,
			110,
			116,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			82,
			101,
			97,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			82,
			101,
			97,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			73,
			110,
			100,
			101,
			120,
			101,
			100,
			69,
			88,
			84,
			0,
			103,
			108,
			82,
			101,
			97,
			100,
			66,
			117,
			102,
			102,
			101,
			114,
			78,
			86,
			0,
			103,
			108,
			82,
			101,
			97,
			100,
			110,
			80,
			105,
			120,
			101,
			108,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			82,
			101,
			97,
			100,
			80,
			105,
			120,
			101,
			108,
			115,
			0,
			103,
			108,
			82,
			101,
			108,
			101,
			97,
			115,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			67,
			111,
			109,
			112,
			105,
			108,
			101,
			114,
			0,
			103,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			0,
			103,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			77,
			117,
			108,
			116,
			105,
			115,
			97,
			109,
			112,
			108,
			101,
			0,
			103,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			77,
			117,
			108,
			116,
			105,
			115,
			97,
			109,
			112,
			108,
			101,
			65,
			78,
			71,
			76,
			69,
			0,
			103,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			77,
			117,
			108,
			116,
			105,
			115,
			97,
			109,
			112,
			108,
			101,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			77,
			117,
			108,
			116,
			105,
			115,
			97,
			109,
			112,
			108,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			77,
			117,
			108,
			116,
			105,
			115,
			97,
			109,
			112,
			108,
			101,
			73,
			77,
			71,
			0,
			103,
			108,
			82,
			101,
			110,
			100,
			101,
			114,
			98,
			117,
			102,
			102,
			101,
			114,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			77,
			117,
			108,
			116,
			105,
			115,
			97,
			109,
			112,
			108,
			101,
			78,
			86,
			0,
			103,
			108,
			82,
			101,
			115,
			111,
			108,
			118,
			101,
			77,
			117,
			108,
			116,
			105,
			115,
			97,
			109,
			112,
			108,
			101,
			70,
			114,
			97,
			109,
			101,
			98,
			117,
			102,
			102,
			101,
			114,
			65,
			80,
			80,
			76,
			69,
			0,
			103,
			108,
			82,
			101,
			115,
			117,
			109,
			101,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			0,
			103,
			108,
			83,
			97,
			109,
			112,
			108,
			101,
			67,
			111,
			118,
			101,
			114,
			97,
			103,
			101,
			0,
			103,
			108,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			0,
			103,
			108,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			0,
			103,
			108,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			73,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			73,
			117,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			83,
			97,
			109,
			112,
			108,
			101,
			114,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			83,
			99,
			105,
			115,
			115,
			111,
			114,
			0,
			103,
			108,
			83,
			101,
			108,
			101,
			99,
			116,
			80,
			101,
			114,
			102,
			77,
			111,
			110,
			105,
			116,
			111,
			114,
			67,
			111,
			117,
			110,
			116,
			101,
			114,
			115,
			65,
			77,
			68,
			0,
			103,
			108,
			83,
			101,
			116,
			70,
			101,
			110,
			99,
			101,
			78,
			86,
			0,
			103,
			108,
			83,
			104,
			97,
			100,
			101,
			114,
			66,
			105,
			110,
			97,
			114,
			121,
			0,
			103,
			108,
			83,
			104,
			97,
			100,
			101,
			114,
			83,
			111,
			117,
			114,
			99,
			101,
			0,
			103,
			108,
			83,
			116,
			97,
			114,
			116,
			84,
			105,
			108,
			105,
			110,
			103,
			81,
			67,
			79,
			77,
			0,
			103,
			108,
			83,
			116,
			101,
			110,
			99,
			105,
			108,
			70,
			117,
			110,
			99,
			0,
			103,
			108,
			83,
			116,
			101,
			110,
			99,
			105,
			108,
			70,
			117,
			110,
			99,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			0,
			103,
			108,
			83,
			116,
			101,
			110,
			99,
			105,
			108,
			77,
			97,
			115,
			107,
			0,
			103,
			108,
			83,
			116,
			101,
			110,
			99,
			105,
			108,
			77,
			97,
			115,
			107,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			0,
			103,
			108,
			83,
			116,
			101,
			110,
			99,
			105,
			108,
			79,
			112,
			0,
			103,
			108,
			83,
			116,
			101,
			110,
			99,
			105,
			108,
			79,
			112,
			83,
			101,
			112,
			97,
			114,
			97,
			116,
			101,
			0,
			103,
			108,
			84,
			101,
			115,
			116,
			70,
			101,
			110,
			99,
			101,
			78,
			86,
			0,
			103,
			108,
			84,
			101,
			120,
			66,
			117,
			102,
			102,
			101,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			84,
			101,
			120,
			66,
			117,
			102,
			102,
			101,
			114,
			82,
			97,
			110,
			103,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			0,
			103,
			108,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			0,
			103,
			108,
			84,
			101,
			120,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			79,
			69,
			83,
			0,
			103,
			108,
			84,
			101,
			120,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			0,
			103,
			108,
			84,
			101,
			120,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			102,
			118,
			0,
			103,
			108,
			84,
			101,
			120,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			0,
			103,
			108,
			84,
			101,
			120,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			73,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			84,
			101,
			120,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			73,
			117,
			105,
			118,
			69,
			88,
			84,
			0,
			103,
			108,
			84,
			101,
			120,
			80,
			97,
			114,
			97,
			109,
			101,
			116,
			101,
			114,
			105,
			118,
			0,
			103,
			108,
			84,
			101,
			120,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			49,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			84,
			101,
			120,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			50,
			68,
			0,
			103,
			108,
			84,
			101,
			120,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			50,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			84,
			101,
			120,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			51,
			68,
			0,
			103,
			108,
			84,
			101,
			120,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			51,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			84,
			101,
			120,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			51,
			68,
			77,
			117,
			108,
			116,
			105,
			115,
			97,
			109,
			112,
			108,
			101,
			79,
			69,
			83,
			0,
			103,
			108,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			50,
			68,
			0,
			103,
			108,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			0,
			103,
			108,
			84,
			101,
			120,
			83,
			117,
			98,
			73,
			109,
			97,
			103,
			101,
			51,
			68,
			79,
			69,
			83,
			0,
			103,
			108,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			49,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			50,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			83,
			116,
			111,
			114,
			97,
			103,
			101,
			51,
			68,
			69,
			88,
			84,
			0,
			103,
			108,
			84,
			101,
			120,
			116,
			117,
			114,
			101,
			86,
			105,
			101,
			119,
			69,
			88,
			84,
			0,
			103,
			108,
			84,
			114,
			97,
			110,
			115,
			102,
			111,
			114,
			109,
			70,
			101,
			101,
			100,
			98,
			97,
			99,
			107,
			86,
			97,
			114,
			121,
			105,
			110,
			103,
			115,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			102,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			102,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			105,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			105,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			117,
			105,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			49,
			117,
			105,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			102,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			102,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			105,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			105,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			117,
			105,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			50,
			117,
			105,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			102,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			102,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			105,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			105,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			117,
			105,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			51,
			117,
			105,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			102,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			102,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			105,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			105,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			117,
			105,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			52,
			117,
			105,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			66,
			108,
			111,
			99,
			107,
			66,
			105,
			110,
			100,
			105,
			110,
			103,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			50,
			102,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			50,
			120,
			51,
			102,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			50,
			120,
			51,
			102,
			118,
			78,
			86,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			50,
			120,
			52,
			102,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			50,
			120,
			52,
			102,
			118,
			78,
			86,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			51,
			102,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			51,
			120,
			50,
			102,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			51,
			120,
			50,
			102,
			118,
			78,
			86,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			51,
			120,
			52,
			102,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			51,
			120,
			52,
			102,
			118,
			78,
			86,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			52,
			102,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			52,
			120,
			50,
			102,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			52,
			120,
			50,
			102,
			118,
			78,
			86,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			52,
			120,
			51,
			102,
			118,
			0,
			103,
			108,
			85,
			110,
			105,
			102,
			111,
			114,
			109,
			77,
			97,
			116,
			114,
			105,
			120,
			52,
			120,
			51,
			102,
			118,
			78,
			86,
			0,
			103,
			108,
			85,
			110,
			109,
			97,
			112,
			66,
			117,
			102,
			102,
			101,
			114,
			0,
			103,
			108,
			85,
			110,
			109,
			97,
			112,
			66,
			117,
			102,
			102,
			101,
			114,
			79,
			69,
			83,
			0,
			103,
			108,
			85,
			115,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			85,
			115,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			83,
			116,
			97,
			103,
			101,
			115,
			69,
			88,
			84,
			0,
			103,
			108,
			85,
			115,
			101,
			83,
			104,
			97,
			100,
			101,
			114,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			69,
			88,
			84,
			0,
			103,
			108,
			86,
			97,
			108,
			105,
			100,
			97,
			116,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			0,
			103,
			108,
			86,
			97,
			108,
			105,
			100,
			97,
			116,
			101,
			80,
			114,
			111,
			103,
			114,
			97,
			109,
			80,
			105,
			112,
			101,
			108,
			105,
			110,
			101,
			69,
			88,
			84,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			49,
			102,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			49,
			102,
			118,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			50,
			102,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			50,
			102,
			118,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			51,
			102,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			51,
			102,
			118,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			52,
			102,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			52,
			102,
			118,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			68,
			105,
			118,
			105,
			115,
			111,
			114,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			68,
			105,
			118,
			105,
			115,
			111,
			114,
			65,
			78,
			71,
			76,
			69,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			68,
			105,
			118,
			105,
			115,
			111,
			114,
			69,
			88,
			84,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			68,
			105,
			118,
			105,
			115,
			111,
			114,
			78,
			86,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			73,
			52,
			105,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			73,
			52,
			105,
			118,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			73,
			52,
			117,
			105,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			73,
			52,
			117,
			105,
			118,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			73,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			0,
			103,
			108,
			86,
			101,
			114,
			116,
			101,
			120,
			65,
			116,
			116,
			114,
			105,
			98,
			80,
			111,
			105,
			110,
			116,
			101,
			114,
			0,
			103,
			108,
			86,
			105,
			101,
			119,
			112,
			111,
			114,
			116,
			0,
			103,
			108,
			87,
			97,
			105,
			116,
			83,
			121,
			110,
			99,
			0,
			103,
			108,
			87,
			97,
			105,
			116,
			83,
			121,
			110,
			99,
			65,
			80,
			80,
			76,
			69,
			0
		};

		// Token: 0x040055AC RID: 21932
		private static int[] EntryPointNameOffsets = new int[]
		{
			0,
			19,
			44,
			60,
			76,
			91,
			113,
			135,
			148,
			164,
			189,
			210,
			223,
			240,
			258,
			276,
			301,
			320,
			334,
			348,
			372,
			390,
			411,
			429,
			446,
			459,
			475,
			494,
			514,
			538,
			566,
			578,
			594,
			614,
			638,
			658,
			676,
			699,
			719,
			732,
			748,
			773,
			781,
			797,
			813,
			829,
			846,
			859,
			873,
			888,
			905,
			927,
			939,
			955,
			971,
			994,
			1017,
			1043,
			1069,
			1095,
			1124,
			1144,
			1166,
			1188,
			1205,
			1225,
			1245,
			1268,
			1293,
			1310,
			1332,
			1355,
			1371,
			1386,
			1411,
			1437,
			1448,
			1471,
			1497,
			1519,
			1544,
			1565,
			1589,
			1605,
			1622,
			1643,
			1667,
			1690,
			1706,
			1734,
			1750,
			1769,
			1791,
			1808,
			1823,
			1836,
			1854,
			1871,
			1898,
			1919,
			1943,
			1955,
			1967,
			1981,
			1996,
			2006,
			2033,
			2047,
			2074,
			2098,
			2111,
			2133,
			2160,
			2185,
			2209,
			2223,
			2240,
			2264,
			2280,
			2295,
			2319,
			2348,
			2375,
			2401,
			2421,
			2460,
			2489,
			2498,
			2524,
			2537,
			2563,
			2583,
			2603,
			2614,
			2628,
			2644,
			2667,
			2694,
			2714,
			2739,
			2771,
			2792,
			2818,
			2838,
			2870,
			2894,
			2915,
			2940,
			2973,
			2985,
			3002,
			3011,
			3027,
			3035,
			3060,
			3088,
			3114,
			3137,
			3174,
			3211,
			3237,
			3261,
			3287,
			3299,
			3312,
			3329,
			3343,
			3361,
			3382,
			3407,
			3420,
			3436,
			3455,
			3469,
			3483,
			3507,
			3525,
			3546,
			3564,
			3583,
			3609,
			3637,
			3659,
			3680,
			3700,
			3714,
			3739,
			3762,
			3782,
			3805,
			3826,
			3850,
			3874,
			3903,
			3914,
			3929,
			3956,
			3968,
			3990,
			4028,
			4056,
			4074,
			4090,
			4111,
			4127,
			4146,
			4160,
			4182,
			4208,
			4227,
			4246,
			4263,
			4283,
			4303,
			4323,
			4346,
			4372,
			4403,
			4434,
			4462,
			4495,
			4521,
			4552,
			4576,
			4604,
			4628,
			4642,
			4659,
			4678,
			4700,
			4720,
			4735,
			4766,
			4792,
			4805,
			4821,
			4845,
			4867,
			4892,
			4912,
			4935,
			4964,
			4988,
			5016,
			5045,
			5069,
			5088,
			5102,
			5129,
			5147,
			5159,
			5172,
			5184,
			5201,
			5221,
			5245,
			5270,
			5290,
			5320,
			5353,
			5376,
			5391,
			5411,
			5426,
			5447,
			5463,
			5483,
			5504,
			5526,
			5546,
			5572,
			5579,
			5602,
			5626,
			5653,
			5664,
			5676,
			5692,
			5704,
			5720,
			5732,
			5755,
			5765,
			5778,
			5795,
			5807,
			5818,
			5827,
			5841,
			5853,
			5875,
			5891,
			5910,
			5927,
			5939,
			5953,
			5968,
			5985,
			6005,
			6027,
			6048,
			6071,
			6085,
			6102,
			6119,
			6139,
			6160,
			6185,
			6199,
			6215,
			6231,
			6250,
			6270,
			6296,
			6312,
			6331,
			6351,
			6374,
			6396,
			6419,
			6441,
			6464,
			6487,
			6511,
			6533,
			6556,
			6578,
			6601,
			6624,
			6648,
			6670,
			6693,
			6715,
			6738,
			6761,
			6785,
			6807,
			6830,
			6852,
			6875,
			6898,
			6922,
			6951,
			6982,
			7013,
			7042,
			7073,
			7104,
			7133,
			7164,
			7195,
			7212,
			7232,
			7253,
			7271,
			7284,
			7307,
			7322,
			7339,
			7352,
			7376,
			7398,
			7431,
			7469,
			7507,
			7543,
			7579,
			7614,
			7651,
			7677,
			7694,
			7714,
			7735,
			7755,
			7780,
			7806,
			7827,
			7837,
			7868,
			7881,
			7896,
			7911,
			7929,
			7943,
			7965,
			7979,
			8001,
			8013,
			8033,
			8047,
			8062,
			8082,
			8095,
			8108,
			8124,
			8140,
			8157,
			8173,
			8194,
			8216,
			8233,
			8251,
			8266,
			8284,
			8299,
			8317,
			8346,
			8362,
			8378,
			8397,
			8419,
			8441,
			8463,
			8480,
			8508,
			8520,
			8533,
			8545,
			8558,
			8571,
			8585,
			8597,
			8610,
			8622,
			8635,
			8648,
			8662,
			8674,
			8687,
			8699,
			8712,
			8725,
			8739,
			8751,
			8764,
			8776,
			8789,
			8802,
			8816,
			8838,
			8857,
			8878,
			8901,
			8922,
			8945,
			8964,
			8985,
			9008,
			9029,
			9052,
			9071,
			9092,
			9115,
			9136,
			9159,
			9173,
			9190,
			9203,
			9225,
			9247,
			9265,
			9294,
			9311,
			9329,
			9346,
			9364,
			9381,
			9399,
			9416,
			9434,
			9456,
			9483,
			9508,
			9532,
			9550,
			9569,
			9588,
			9608,
			9631,
			9653,
			9664,
			9675
		};

		// Token: 0x020005E9 RID: 1513
		public static class Amd
		{
			// Token: 0x06004C07 RID: 19463 RVA: 0x000D0C8C File Offset: 0x000CEE8C
			[CLSCompliant(false)]
			public static void BeginPerfMonitor(int monitor)
			{
				calli(System.Void(System.UInt32), monitor, GL.EntryPoints[5]);
			}

			// Token: 0x06004C08 RID: 19464 RVA: 0x000D0C9C File Offset: 0x000CEE9C
			[CLSCompliant(false)]
			public static void BeginPerfMonitor(uint monitor)
			{
				calli(System.Void(System.UInt32), monitor, GL.EntryPoints[5]);
			}

			// Token: 0x06004C09 RID: 19465 RVA: 0x000D0CAC File Offset: 0x000CEEAC
			[CLSCompliant(false)]
			public static void DeletePerfMonitor(int monitors)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref monitors, GL.EntryPoints[85]);
			}

			// Token: 0x06004C0A RID: 19466 RVA: 0x000D0CC0 File Offset: 0x000CEEC0
			[CLSCompliant(false)]
			public static void DeletePerfMonitor(uint monitors)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref monitors, GL.EntryPoints[85]);
			}

			// Token: 0x06004C0B RID: 19467 RVA: 0x000D0CD4 File Offset: 0x000CEED4
			[CLSCompliant(false)]
			public unsafe static void DeletePerfMonitors(int n, int[] monitors)
			{
				fixed (int* ptr = ref (monitors != null && monitors.Length != 0) ? ref monitors[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[85]);
				}
			}

			// Token: 0x06004C0C RID: 19468 RVA: 0x000D0D08 File Offset: 0x000CEF08
			[CLSCompliant(false)]
			public unsafe static void DeletePerfMonitors(int n, ref int monitors)
			{
				fixed (int* ptr = &monitors)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[85]);
				}
			}

			// Token: 0x06004C0D RID: 19469 RVA: 0x000D0D28 File Offset: 0x000CEF28
			[CLSCompliant(false)]
			public unsafe static void DeletePerfMonitors(int n, int* monitors)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, monitors, GL.EntryPoints[85]);
			}

			// Token: 0x06004C0E RID: 19470 RVA: 0x000D0D3C File Offset: 0x000CEF3C
			[CLSCompliant(false)]
			public unsafe static void DeletePerfMonitors(int n, uint[] monitors)
			{
				fixed (uint* ptr = ref (monitors != null && monitors.Length != 0) ? ref monitors[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[85]);
				}
			}

			// Token: 0x06004C0F RID: 19471 RVA: 0x000D0D70 File Offset: 0x000CEF70
			[CLSCompliant(false)]
			public unsafe static void DeletePerfMonitors(int n, ref uint monitors)
			{
				fixed (uint* ptr = &monitors)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[85]);
				}
			}

			// Token: 0x06004C10 RID: 19472 RVA: 0x000D0D90 File Offset: 0x000CEF90
			[CLSCompliant(false)]
			public unsafe static void DeletePerfMonitors(int n, uint* monitors)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, monitors, GL.EntryPoints[85]);
			}

			// Token: 0x06004C11 RID: 19473 RVA: 0x000D0DA4 File Offset: 0x000CEFA4
			[CLSCompliant(false)]
			public static void EndPerfMonitor(int monitor)
			{
				calli(System.Void(System.UInt32), monitor, GL.EntryPoints[130]);
			}

			// Token: 0x06004C12 RID: 19474 RVA: 0x000D0DB8 File Offset: 0x000CEFB8
			[CLSCompliant(false)]
			public static void EndPerfMonitor(uint monitor)
			{
				calli(System.Void(System.UInt32), monitor, GL.EntryPoints[130]);
			}

			// Token: 0x06004C13 RID: 19475 RVA: 0x000D0DCC File Offset: 0x000CEFCC
			[CLSCompliant(false)]
			public static int GenPerfMonitor()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[167]);
				return result;
			}

			// Token: 0x06004C14 RID: 19476 RVA: 0x000D0DF0 File Offset: 0x000CEFF0
			[CLSCompliant(false)]
			public unsafe static void GenPerfMonitors(int n, [Out] int[] monitors)
			{
				fixed (int* ptr = ref (monitors != null && monitors.Length != 0) ? ref monitors[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[167]);
				}
			}

			// Token: 0x06004C15 RID: 19477 RVA: 0x000D0E24 File Offset: 0x000CF024
			[CLSCompliant(false)]
			public unsafe static void GenPerfMonitors(int n, out int monitors)
			{
				fixed (int* ptr = &monitors)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[167]);
				}
			}

			// Token: 0x06004C16 RID: 19478 RVA: 0x000D0E48 File Offset: 0x000CF048
			[CLSCompliant(false)]
			public unsafe static void GenPerfMonitors(int n, [Out] int* monitors)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, monitors, GL.EntryPoints[167]);
			}

			// Token: 0x06004C17 RID: 19479 RVA: 0x000D0E5C File Offset: 0x000CF05C
			[CLSCompliant(false)]
			public unsafe static void GenPerfMonitors(int n, [Out] uint[] monitors)
			{
				fixed (uint* ptr = ref (monitors != null && monitors.Length != 0) ? ref monitors[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[167]);
				}
			}

			// Token: 0x06004C18 RID: 19480 RVA: 0x000D0E90 File Offset: 0x000CF090
			[CLSCompliant(false)]
			public unsafe static void GenPerfMonitors(int n, out uint monitors)
			{
				fixed (uint* ptr = &monitors)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[167]);
				}
			}

			// Token: 0x06004C19 RID: 19481 RVA: 0x000D0EB4 File Offset: 0x000CF0B4
			[CLSCompliant(false)]
			public unsafe static void GenPerfMonitors(int n, [Out] uint* monitors)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, monitors, GL.EntryPoints[167]);
			}

			// Token: 0x06004C1A RID: 19482 RVA: 0x000D0EC8 File Offset: 0x000CF0C8
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterData(int monitor, All pname, int dataSize, [Out] int[] data, out int bytesWritten)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*,System.Int32*), monitor, pname, dataSize, ptr2, ptr3, GL.EntryPoints[216]);
					}
				}
			}

			// Token: 0x06004C1B RID: 19483 RVA: 0x000D0F04 File Offset: 0x000CF104
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterData(int monitor, All pname, int dataSize, out int data, out int bytesWritten)
			{
				fixed (int* ptr = &data)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*,System.Int32*), monitor, pname, dataSize, ptr2, ptr3, GL.EntryPoints[216]);
					}
				}
			}

			// Token: 0x06004C1C RID: 19484 RVA: 0x000D0F30 File Offset: 0x000CF130
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterData(int monitor, All pname, int dataSize, [Out] int* data, [Out] int* bytesWritten)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*,System.Int32*), monitor, pname, dataSize, data, bytesWritten, GL.EntryPoints[216]);
			}

			// Token: 0x06004C1D RID: 19485 RVA: 0x000D0F48 File Offset: 0x000CF148
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterData(uint monitor, All pname, int dataSize, [Out] uint[] data, out int bytesWritten)
			{
				fixed (uint* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*,System.Int32*), monitor, pname, dataSize, ptr2, ptr3, GL.EntryPoints[216]);
					}
				}
			}

			// Token: 0x06004C1E RID: 19486 RVA: 0x000D0F84 File Offset: 0x000CF184
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterData(uint monitor, All pname, int dataSize, out uint data, out int bytesWritten)
			{
				fixed (uint* ptr = &data)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*,System.Int32*), monitor, pname, dataSize, ptr2, ptr3, GL.EntryPoints[216]);
					}
				}
			}

			// Token: 0x06004C1F RID: 19487 RVA: 0x000D0FB0 File Offset: 0x000CF1B0
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterData(uint monitor, All pname, int dataSize, [Out] uint* data, [Out] int* bytesWritten)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*,System.Int32*), monitor, pname, dataSize, data, bytesWritten, GL.EntryPoints[216]);
			}

			// Token: 0x06004C20 RID: 19488 RVA: 0x000D0FC8 File Offset: 0x000CF1C8
			[CLSCompliant(false)]
			public static void GetPerfMonitorCounterInfo(int group, int counter, All pname, [Out] IntPtr data)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, data, GL.EntryPoints[217]);
			}

			// Token: 0x06004C21 RID: 19489 RVA: 0x000D0FE0 File Offset: 0x000CF1E0
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterInfo<T3>(int group, int counter, All pname, [In] [Out] T3[] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, ptr, GL.EntryPoints[217]);
				}
			}

			// Token: 0x06004C22 RID: 19490 RVA: 0x000D1018 File Offset: 0x000CF218
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterInfo<T3>(int group, int counter, All pname, [In] [Out] T3[,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, ptr, GL.EntryPoints[217]);
				}
			}

			// Token: 0x06004C23 RID: 19491 RVA: 0x000D1054 File Offset: 0x000CF254
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterInfo<T3>(int group, int counter, All pname, [In] [Out] T3[,,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, ptr, GL.EntryPoints[217]);
				}
			}

			// Token: 0x06004C24 RID: 19492 RVA: 0x000D1090 File Offset: 0x000CF290
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterInfo<T3>(int group, int counter, All pname, [In] [Out] ref T3 data) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, ptr, GL.EntryPoints[217]);
				}
			}

			// Token: 0x06004C25 RID: 19493 RVA: 0x000D10B4 File Offset: 0x000CF2B4
			[CLSCompliant(false)]
			public static void GetPerfMonitorCounterInfo(uint group, uint counter, All pname, [Out] IntPtr data)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, data, GL.EntryPoints[217]);
			}

			// Token: 0x06004C26 RID: 19494 RVA: 0x000D10CC File Offset: 0x000CF2CC
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, All pname, [In] [Out] T3[] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, ptr, GL.EntryPoints[217]);
				}
			}

			// Token: 0x06004C27 RID: 19495 RVA: 0x000D1104 File Offset: 0x000CF304
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, All pname, [In] [Out] T3[,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, ptr, GL.EntryPoints[217]);
				}
			}

			// Token: 0x06004C28 RID: 19496 RVA: 0x000D1140 File Offset: 0x000CF340
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, All pname, [In] [Out] T3[,,] data) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, ptr, GL.EntryPoints[217]);
				}
			}

			// Token: 0x06004C29 RID: 19497 RVA: 0x000D117C File Offset: 0x000CF37C
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, All pname, [In] [Out] ref T3 data) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr), group, counter, pname, ptr, GL.EntryPoints[217]);
				}
			}

			// Token: 0x06004C2A RID: 19498 RVA: 0x000D11A0 File Offset: 0x000CF3A0
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounters(int group, out int numCounters, out int maxActiveCounters, int counterSize, [Out] int[] counters)
			{
				fixed (int* ptr = &numCounters)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &maxActiveCounters)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = ref (counters != null && counters.Length != 0) ? ref counters[0] : ref *null)
						{
							calli(System.Void(System.UInt32,System.Int32*,System.Int32*,System.Int32,System.UInt32*), group, ptr2, ptr4, counterSize, ptr5, GL.EntryPoints[218]);
						}
					}
				}
			}

			// Token: 0x06004C2B RID: 19499 RVA: 0x000D11E0 File Offset: 0x000CF3E0
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounters(int group, out int numCounters, out int maxActiveCounters, int counterSize, out int counters)
			{
				fixed (int* ptr = &numCounters)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &maxActiveCounters)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = &counters)
						{
							calli(System.Void(System.UInt32,System.Int32*,System.Int32*,System.Int32,System.UInt32*), group, ptr2, ptr4, counterSize, ptr5, GL.EntryPoints[218]);
						}
					}
				}
			}

			// Token: 0x06004C2C RID: 19500 RVA: 0x000D120C File Offset: 0x000CF40C
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounters(int group, [Out] int* numCounters, [Out] int* maxActiveCounters, int counterSize, [Out] int* counters)
			{
				calli(System.Void(System.UInt32,System.Int32*,System.Int32*,System.Int32,System.UInt32*), group, numCounters, maxActiveCounters, counterSize, counters, GL.EntryPoints[218]);
			}

			// Token: 0x06004C2D RID: 19501 RVA: 0x000D1224 File Offset: 0x000CF424
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounters(uint group, out int numCounters, out int maxActiveCounters, int counterSize, [Out] uint[] counters)
			{
				fixed (int* ptr = &numCounters)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &maxActiveCounters)
					{
						int* ptr4 = ptr3;
						fixed (uint* ptr5 = ref (counters != null && counters.Length != 0) ? ref counters[0] : ref *null)
						{
							calli(System.Void(System.UInt32,System.Int32*,System.Int32*,System.Int32,System.UInt32*), group, ptr2, ptr4, counterSize, ptr5, GL.EntryPoints[218]);
						}
					}
				}
			}

			// Token: 0x06004C2E RID: 19502 RVA: 0x000D1264 File Offset: 0x000CF464
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounters(uint group, out int numCounters, out int maxActiveCounters, int counterSize, out uint counters)
			{
				fixed (int* ptr = &numCounters)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &maxActiveCounters)
					{
						int* ptr4 = ptr3;
						fixed (uint* ptr5 = &counters)
						{
							calli(System.Void(System.UInt32,System.Int32*,System.Int32*,System.Int32,System.UInt32*), group, ptr2, ptr4, counterSize, ptr5, GL.EntryPoints[218]);
						}
					}
				}
			}

			// Token: 0x06004C2F RID: 19503 RVA: 0x000D1290 File Offset: 0x000CF490
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounters(uint group, [Out] int* numCounters, [Out] int* maxActiveCounters, int counterSize, [Out] uint* counters)
			{
				calli(System.Void(System.UInt32,System.Int32*,System.Int32*,System.Int32,System.UInt32*), group, numCounters, maxActiveCounters, counterSize, counters, GL.EntryPoints[218]);
			}

			// Token: 0x06004C30 RID: 19504 RVA: 0x000D12A8 File Offset: 0x000CF4A8
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterString(int group, int counter, int bufSize, out int length, [Out] StringBuilder counterString)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterString.Capacity);
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), group, counter, bufSize, ptr2, intPtr, GL.EntryPoints[219]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, counterString);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004C31 RID: 19505 RVA: 0x000D12E8 File Offset: 0x000CF4E8
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterString(int group, int counter, int bufSize, [Out] int* length, [Out] StringBuilder counterString)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterString.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), group, counter, bufSize, length, intPtr, GL.EntryPoints[219]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, counterString);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004C32 RID: 19506 RVA: 0x000D1328 File Offset: 0x000CF528
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterString(uint group, uint counter, int bufSize, out int length, [Out] StringBuilder counterString)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterString.Capacity);
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), group, counter, bufSize, ptr2, intPtr, GL.EntryPoints[219]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, counterString);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004C33 RID: 19507 RVA: 0x000D1368 File Offset: 0x000CF568
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorCounterString(uint group, uint counter, int bufSize, [Out] int* length, [Out] StringBuilder counterString)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterString.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), group, counter, bufSize, length, intPtr, GL.EntryPoints[219]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, counterString);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004C34 RID: 19508 RVA: 0x000D13A8 File Offset: 0x000CF5A8
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroups(out int numGroups, int groupsSize, [Out] int[] groups)
			{
				fixed (int* ptr = &numGroups)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (groups != null && groups.Length != 0) ? ref groups[0] : ref *null)
					{
						calli(System.Void(System.Int32*,System.Int32,System.UInt32*), ptr2, groupsSize, ptr3, GL.EntryPoints[220]);
					}
				}
			}

			// Token: 0x06004C35 RID: 19509 RVA: 0x000D13E0 File Offset: 0x000CF5E0
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroups(out int numGroups, int groupsSize, out int groups)
			{
				fixed (int* ptr = &numGroups)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &groups)
					{
						calli(System.Void(System.Int32*,System.Int32,System.UInt32*), ptr2, groupsSize, ptr3, GL.EntryPoints[220]);
					}
				}
			}

			// Token: 0x06004C36 RID: 19510 RVA: 0x000D1408 File Offset: 0x000CF608
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroups(out int numGroups, int groupsSize, [Out] uint[] groups)
			{
				fixed (int* ptr = &numGroups)
				{
					int* ptr2 = ptr;
					fixed (uint* ptr3 = ref (groups != null && groups.Length != 0) ? ref groups[0] : ref *null)
					{
						calli(System.Void(System.Int32*,System.Int32,System.UInt32*), ptr2, groupsSize, ptr3, GL.EntryPoints[220]);
					}
				}
			}

			// Token: 0x06004C37 RID: 19511 RVA: 0x000D1440 File Offset: 0x000CF640
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroups(out int numGroups, int groupsSize, out uint groups)
			{
				fixed (int* ptr = &numGroups)
				{
					int* ptr2 = ptr;
					fixed (uint* ptr3 = &groups)
					{
						calli(System.Void(System.Int32*,System.Int32,System.UInt32*), ptr2, groupsSize, ptr3, GL.EntryPoints[220]);
					}
				}
			}

			// Token: 0x06004C38 RID: 19512 RVA: 0x000D1468 File Offset: 0x000CF668
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroups([Out] int* numGroups, int groupsSize, [Out] int* groups)
			{
				calli(System.Void(System.Int32*,System.Int32,System.UInt32*), numGroups, groupsSize, groups, GL.EntryPoints[220]);
			}

			// Token: 0x06004C39 RID: 19513 RVA: 0x000D1480 File Offset: 0x000CF680
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroups([Out] int* numGroups, int groupsSize, [Out] uint* groups)
			{
				calli(System.Void(System.Int32*,System.Int32,System.UInt32*), numGroups, groupsSize, groups, GL.EntryPoints[220]);
			}

			// Token: 0x06004C3A RID: 19514 RVA: 0x000D1498 File Offset: 0x000CF698
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroupString(int group, int bufSize, out int length, [Out] StringBuilder groupString)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)groupString.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), group, bufSize, ptr2, intPtr, GL.EntryPoints[221]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, groupString);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004C3B RID: 19515 RVA: 0x000D14D8 File Offset: 0x000CF6D8
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroupString(int group, int bufSize, [Out] int* length, [Out] StringBuilder groupString)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)groupString.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), group, bufSize, length, intPtr, GL.EntryPoints[221]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, groupString);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004C3C RID: 19516 RVA: 0x000D1514 File Offset: 0x000CF714
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroupString(uint group, int bufSize, out int length, [Out] StringBuilder groupString)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)groupString.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), group, bufSize, ptr2, intPtr, GL.EntryPoints[221]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, groupString);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004C3D RID: 19517 RVA: 0x000D1554 File Offset: 0x000CF754
			[CLSCompliant(false)]
			public unsafe static void GetPerfMonitorGroupString(uint group, int bufSize, [Out] int* length, [Out] StringBuilder groupString)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)groupString.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), group, bufSize, length, intPtr, GL.EntryPoints[221]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, groupString);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004C3E RID: 19518 RVA: 0x000D1590 File Offset: 0x000CF790
			[CLSCompliant(false)]
			public unsafe static void SelectPerfMonitorCounters(int monitor, bool enable, int group, int numCounters, [Out] int[] counterList)
			{
				fixed (int* ptr = ref (counterList != null && counterList.Length != 0) ? ref counterList[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Boolean,System.UInt32,System.Int32,System.UInt32*), monitor, enable, group, numCounters, ptr, GL.EntryPoints[377]);
				}
			}

			// Token: 0x06004C3F RID: 19519 RVA: 0x000D15CC File Offset: 0x000CF7CC
			[CLSCompliant(false)]
			public unsafe static void SelectPerfMonitorCounters(int monitor, bool enable, int group, int numCounters, out int counterList)
			{
				fixed (int* ptr = &counterList)
				{
					calli(System.Void(System.UInt32,System.Boolean,System.UInt32,System.Int32,System.UInt32*), monitor, enable, group, numCounters, ptr, GL.EntryPoints[377]);
				}
			}

			// Token: 0x06004C40 RID: 19520 RVA: 0x000D15F4 File Offset: 0x000CF7F4
			[CLSCompliant(false)]
			public unsafe static void SelectPerfMonitorCounters(int monitor, bool enable, int group, int numCounters, [Out] int* counterList)
			{
				calli(System.Void(System.UInt32,System.Boolean,System.UInt32,System.Int32,System.UInt32*), monitor, enable, group, numCounters, counterList, GL.EntryPoints[377]);
			}

			// Token: 0x06004C41 RID: 19521 RVA: 0x000D160C File Offset: 0x000CF80C
			[CLSCompliant(false)]
			public unsafe static void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, int numCounters, [Out] uint[] counterList)
			{
				fixed (uint* ptr = ref (counterList != null && counterList.Length != 0) ? ref counterList[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Boolean,System.UInt32,System.Int32,System.UInt32*), monitor, enable, group, numCounters, ptr, GL.EntryPoints[377]);
				}
			}

			// Token: 0x06004C42 RID: 19522 RVA: 0x000D1648 File Offset: 0x000CF848
			[CLSCompliant(false)]
			public unsafe static void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, int numCounters, out uint counterList)
			{
				fixed (uint* ptr = &counterList)
				{
					calli(System.Void(System.UInt32,System.Boolean,System.UInt32,System.Int32,System.UInt32*), monitor, enable, group, numCounters, ptr, GL.EntryPoints[377]);
				}
			}

			// Token: 0x06004C43 RID: 19523 RVA: 0x000D1670 File Offset: 0x000CF870
			[CLSCompliant(false)]
			public unsafe static void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, int numCounters, [Out] uint* counterList)
			{
				calli(System.Void(System.UInt32,System.Boolean,System.UInt32,System.Int32,System.UInt32*), monitor, enable, group, numCounters, counterList, GL.EntryPoints[377]);
			}
		}

		// Token: 0x020005EA RID: 1514
		public static class Angle
		{
			// Token: 0x06004C44 RID: 19524 RVA: 0x000D1688 File Offset: 0x000CF888
			[Obsolete("Use strongly-typed overload instead")]
			public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, All mask, All filter)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter, GL.EntryPoints[36]);
			}

			// Token: 0x06004C45 RID: 19525 RVA: 0x000D16B4 File Offset: 0x000CF8B4
			public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter, GL.EntryPoints[36]);
			}

			// Token: 0x06004C46 RID: 19526 RVA: 0x000D16E0 File Offset: 0x000CF8E0
			[Obsolete("Use strongly-typed overload instead")]
			public static void DrawArraysInstanced(All mode, int first, int count, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, first, count, primcount, GL.EntryPoints[111]);
			}

			// Token: 0x06004C47 RID: 19527 RVA: 0x000D16F4 File Offset: 0x000CF8F4
			public static void DrawArraysInstanced(PrimitiveType mode, int first, int count, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, first, count, primcount, GL.EntryPoints[111]);
			}

			// Token: 0x06004C48 RID: 19528 RVA: 0x000D1708 File Offset: 0x000CF908
			[Obsolete("Use strongly-typed overload instead")]
			public static void DrawElementsInstanced(All mode, int count, All type, IntPtr indices, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, primcount, GL.EntryPoints[120]);
			}

			// Token: 0x06004C49 RID: 19529 RVA: 0x000D1720 File Offset: 0x000CF920
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(All mode, int count, All type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[120]);
				}
			}

			// Token: 0x06004C4A RID: 19530 RVA: 0x000D1758 File Offset: 0x000CF958
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void DrawElementsInstanced<T3>(All mode, int count, All type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[120]);
				}
			}

			// Token: 0x06004C4B RID: 19531 RVA: 0x000D1794 File Offset: 0x000CF994
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void DrawElementsInstanced<T3>(All mode, int count, All type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[120]);
				}
			}

			// Token: 0x06004C4C RID: 19532 RVA: 0x000D17D0 File Offset: 0x000CF9D0
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void DrawElementsInstanced<T3>(All mode, int count, All type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[120]);
				}
			}

			// Token: 0x06004C4D RID: 19533 RVA: 0x000D17F4 File Offset: 0x000CF9F4
			public static void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, primcount, GL.EntryPoints[120]);
			}

			// Token: 0x06004C4E RID: 19534 RVA: 0x000D180C File Offset: 0x000CFA0C
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[120]);
				}
			}

			// Token: 0x06004C4F RID: 19535 RVA: 0x000D1844 File Offset: 0x000CFA44
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[120]);
				}
			}

			// Token: 0x06004C50 RID: 19536 RVA: 0x000D1880 File Offset: 0x000CFA80
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[120]);
				}
			}

			// Token: 0x06004C51 RID: 19537 RVA: 0x000D18BC File Offset: 0x000CFABC
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[120]);
				}
			}

			// Token: 0x06004C52 RID: 19538 RVA: 0x000D18E0 File Offset: 0x000CFAE0
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetTranslatedShaderSource(int shader, int bufsize, [Out] int[] length, [Out] StringBuilder source)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufsize, ptr2, intPtr, GL.EntryPoints[258]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004C53 RID: 19539 RVA: 0x000D1930 File Offset: 0x000CFB30
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetTranslatedShaderSource(int shader, int bufsize, out int length, [Out] StringBuilder source)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufsize, ptr2, intPtr, GL.EntryPoints[258]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004C54 RID: 19540 RVA: 0x000D1970 File Offset: 0x000CFB70
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetTranslatedShaderSource(int shader, int bufsize, [Out] int* length, [Out] StringBuilder source)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufsize, length, intPtr, GL.EntryPoints[258]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004C55 RID: 19541 RVA: 0x000D19AC File Offset: 0x000CFBAC
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetTranslatedShaderSource(uint shader, int bufsize, [Out] int[] length, [Out] StringBuilder source)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufsize, ptr2, intPtr, GL.EntryPoints[258]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004C56 RID: 19542 RVA: 0x000D19FC File Offset: 0x000CFBFC
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetTranslatedShaderSource(uint shader, int bufsize, out int length, [Out] StringBuilder source)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufsize, ptr2, intPtr, GL.EntryPoints[258]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004C57 RID: 19543 RVA: 0x000D1A3C File Offset: 0x000CFC3C
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetTranslatedShaderSource(uint shader, int bufsize, [Out] int* length, [Out] StringBuilder source)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), shader, bufsize, length, intPtr, GL.EntryPoints[258]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004C58 RID: 19544 RVA: 0x000D1A78 File Offset: 0x000CFC78
			[Obsolete("Use strongly-typed overload instead")]
			public static void RenderbufferStorageMultisample(All target, int samples, All internalformat, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, samples, internalformat, width, height, GL.EntryPoints[362]);
			}

			// Token: 0x06004C59 RID: 19545 RVA: 0x000D1A90 File Offset: 0x000CFC90
			public static void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, RenderbufferInternalFormat internalformat, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, samples, internalformat, width, height, GL.EntryPoints[362]);
			}

			// Token: 0x06004C5A RID: 19546 RVA: 0x000D1AA8 File Offset: 0x000CFCA8
			[CLSCompliant(false)]
			public static void VertexAttribDivisor(int index, int divisor)
			{
				calli(System.Void(System.UInt32,System.UInt32), index, divisor, GL.EntryPoints[470]);
			}

			// Token: 0x06004C5B RID: 19547 RVA: 0x000D1ABC File Offset: 0x000CFCBC
			[CLSCompliant(false)]
			public static void VertexAttribDivisor(uint index, uint divisor)
			{
				calli(System.Void(System.UInt32,System.UInt32), index, divisor, GL.EntryPoints[470]);
			}
		}

		// Token: 0x020005EB RID: 1515
		public static class Apple
		{
			// Token: 0x06004C5C RID: 19548 RVA: 0x000D1AD0 File Offset: 0x000CFCD0
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public static WaitSyncStatus ClientWaitSync(IntPtr sync, All flags, long timeout)
			{
				return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[50]);
			}

			// Token: 0x06004C5D RID: 19549 RVA: 0x000D1AE4 File Offset: 0x000CFCE4
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public static WaitSyncStatus ClientWaitSync(IntPtr sync, All flags, ulong timeout)
			{
				return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[50]);
			}

			// Token: 0x06004C5E RID: 19550 RVA: 0x000D1AF8 File Offset: 0x000CFCF8
			[CLSCompliant(false)]
			public static WaitSyncStatus ClientWaitSync(IntPtr sync, ClientWaitSyncFlags flags, long timeout)
			{
				return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[50]);
			}

			// Token: 0x06004C5F RID: 19551 RVA: 0x000D1B0C File Offset: 0x000CFD0C
			[CLSCompliant(false)]
			public static WaitSyncStatus ClientWaitSync(IntPtr sync, ClientWaitSyncFlags flags, ulong timeout)
			{
				return calli(System.Int32(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[50]);
			}

			// Token: 0x06004C60 RID: 19552 RVA: 0x000D1B20 File Offset: 0x000CFD20
			[CLSCompliant(false)]
			public static void CopyTextureLevel(int destinationTexture, int sourceTexture, int sourceBaseLevel, int sourceLevelCount)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32), destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount, GL.EntryPoints[67]);
			}

			// Token: 0x06004C61 RID: 19553 RVA: 0x000D1B34 File Offset: 0x000CFD34
			[CLSCompliant(false)]
			public static void CopyTextureLevel(uint destinationTexture, uint sourceTexture, int sourceBaseLevel, int sourceLevelCount)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.Int32), destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount, GL.EntryPoints[67]);
			}

			// Token: 0x06004C62 RID: 19554 RVA: 0x000D1B48 File Offset: 0x000CFD48
			public static void DeleteSync(IntPtr sync)
			{
				calli(System.Void(System.IntPtr), sync, GL.EntryPoints[95]);
			}

			// Token: 0x06004C63 RID: 19555 RVA: 0x000D1B58 File Offset: 0x000CFD58
			[Obsolete("Use strongly-typed overload instead")]
			public static IntPtr FenceSync(All condition, All flags)
			{
				return calli(System.IntPtr(System.Int32,System.Int32), condition, flags, GL.EntryPoints[149]);
			}

			// Token: 0x06004C64 RID: 19556 RVA: 0x000D1B6C File Offset: 0x000CFD6C
			public static IntPtr FenceSync(SyncCondition condition, WaitSyncFlags flags)
			{
				return calli(System.IntPtr(System.Int32,System.Int32), condition, flags, GL.EntryPoints[149]);
			}

			// Token: 0x06004C65 RID: 19557 RVA: 0x000D1B80 File Offset: 0x000CFD80
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public static long GetInteger64(All pname)
			{
				long result;
				calli(System.Void(System.Int32,System.Int64*), pname, ref result, GL.EntryPoints[202]);
				return result;
			}

			// Token: 0x06004C66 RID: 19558 RVA: 0x000D1BA4 File Offset: 0x000CFDA4
			[CLSCompliant(false)]
			public static long GetInteger64(GetPName pname)
			{
				long result;
				calli(System.Void(System.Int32,System.Int64*), pname, ref result, GL.EntryPoints[202]);
				return result;
			}

			// Token: 0x06004C67 RID: 19559 RVA: 0x000D1BC8 File Offset: 0x000CFDC8
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetInteger64(All pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int64*), pname, ptr, GL.EntryPoints[202]);
				}
			}

			// Token: 0x06004C68 RID: 19560 RVA: 0x000D1BFC File Offset: 0x000CFDFC
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetInteger64(All pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int64*), pname, ptr, GL.EntryPoints[202]);
				}
			}

			// Token: 0x06004C69 RID: 19561 RVA: 0x000D1C20 File Offset: 0x000CFE20
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetInteger64(All pname, [Out] long* @params)
			{
				calli(System.Void(System.Int32,System.Int64*), pname, @params, GL.EntryPoints[202]);
			}

			// Token: 0x06004C6A RID: 19562 RVA: 0x000D1C34 File Offset: 0x000CFE34
			[CLSCompliant(false)]
			public unsafe static void GetInteger64(GetPName pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int64*), pname, ptr, GL.EntryPoints[202]);
				}
			}

			// Token: 0x06004C6B RID: 19563 RVA: 0x000D1C68 File Offset: 0x000CFE68
			[CLSCompliant(false)]
			public unsafe static void GetInteger64(GetPName pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int64*), pname, ptr, GL.EntryPoints[202]);
				}
			}

			// Token: 0x06004C6C RID: 19564 RVA: 0x000D1C8C File Offset: 0x000CFE8C
			[CLSCompliant(false)]
			public unsafe static void GetInteger64(GetPName pname, [Out] long* @params)
			{
				calli(System.Void(System.Int32,System.Int64*), pname, @params, GL.EntryPoints[202]);
			}

			// Token: 0x06004C6D RID: 19565 RVA: 0x000D1CA0 File Offset: 0x000CFEA0
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetSync(IntPtr sync, All pname, int bufSize, [Out] int[] length, [Out] int[] values)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
					{
						calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, ptr2, ptr3, GL.EntryPoints[252]);
					}
				}
			}

			// Token: 0x06004C6E RID: 19566 RVA: 0x000D1CF0 File Offset: 0x000CFEF0
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetSync(IntPtr sync, All pname, int bufSize, out int length, out int values)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &values)
					{
						calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, ptr2, ptr3, GL.EntryPoints[252]);
					}
				}
			}

			// Token: 0x06004C6F RID: 19567 RVA: 0x000D1D1C File Offset: 0x000CFF1C
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetSync(IntPtr sync, All pname, int bufSize, [Out] int* length, [Out] int* values)
			{
				calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, length, values, GL.EntryPoints[252]);
			}

			// Token: 0x06004C70 RID: 19568 RVA: 0x000D1D34 File Offset: 0x000CFF34
			[CLSCompliant(false)]
			public unsafe static void GetSync(IntPtr sync, SyncParameterName pname, int bufSize, [Out] int[] length, [Out] int[] values)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (values != null && values.Length != 0) ? ref values[0] : ref *null)
					{
						calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, ptr2, ptr3, GL.EntryPoints[252]);
					}
				}
			}

			// Token: 0x06004C71 RID: 19569 RVA: 0x000D1D84 File Offset: 0x000CFF84
			[CLSCompliant(false)]
			public unsafe static void GetSync(IntPtr sync, SyncParameterName pname, int bufSize, out int length, out int values)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &values)
					{
						calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, ptr2, ptr3, GL.EntryPoints[252]);
					}
				}
			}

			// Token: 0x06004C72 RID: 19570 RVA: 0x000D1DB0 File Offset: 0x000CFFB0
			[CLSCompliant(false)]
			public unsafe static void GetSync(IntPtr sync, SyncParameterName pname, int bufSize, [Out] int* length, [Out] int* values)
			{
				calli(System.Void(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*), sync, pname, bufSize, length, values, GL.EntryPoints[252]);
			}

			// Token: 0x06004C73 RID: 19571 RVA: 0x000D1DC8 File Offset: 0x000CFFC8
			public static bool IsSync(IntPtr sync)
			{
				return calli(System.Byte(System.IntPtr), sync, GL.EntryPoints[287]);
			}

			// Token: 0x06004C74 RID: 19572 RVA: 0x000D1DDC File Offset: 0x000CFFDC
			[Obsolete("Use strongly-typed overload instead")]
			public static void RenderbufferStorageMultisample(All target, int samples, All internalformat, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, samples, internalformat, width, height, GL.EntryPoints[363]);
			}

			// Token: 0x06004C75 RID: 19573 RVA: 0x000D1DF4 File Offset: 0x000CFFF4
			public static void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, RenderbufferInternalFormat internalformat, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, samples, internalformat, width, height, GL.EntryPoints[363]);
			}

			// Token: 0x06004C76 RID: 19574 RVA: 0x000D1E0C File Offset: 0x000D000C
			public static void ResolveMultisampleFramebuffer()
			{
				calli(System.Void(), GL.EntryPoints[367]);
			}

			// Token: 0x06004C77 RID: 19575 RVA: 0x000D1E20 File Offset: 0x000D0020
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public static void WaitSync(IntPtr sync, All flags, long timeout)
			{
				calli(System.Void(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[481]);
			}

			// Token: 0x06004C78 RID: 19576 RVA: 0x000D1E38 File Offset: 0x000D0038
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public static void WaitSync(IntPtr sync, All flags, ulong timeout)
			{
				calli(System.Void(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[481]);
			}

			// Token: 0x06004C79 RID: 19577 RVA: 0x000D1E50 File Offset: 0x000D0050
			[CLSCompliant(false)]
			public static void WaitSync(IntPtr sync, WaitSyncFlags flags, long timeout)
			{
				calli(System.Void(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[481]);
			}

			// Token: 0x06004C7A RID: 19578 RVA: 0x000D1E68 File Offset: 0x000D0068
			[CLSCompliant(false)]
			public static void WaitSync(IntPtr sync, WaitSyncFlags flags, ulong timeout)
			{
				calli(System.Void(System.IntPtr,System.Int32,System.UInt64), sync, flags, timeout, GL.EntryPoints[481]);
			}
		}

		// Token: 0x020005EC RID: 1516
		public static class Ext
		{
			// Token: 0x06004C7B RID: 19579 RVA: 0x000D1E80 File Offset: 0x000D0080
			[CLSCompliant(false)]
			public static void ActiveProgram(int program)
			{
				calli(System.Void(System.UInt32), program, GL.EntryPoints[0]);
			}

			// Token: 0x06004C7C RID: 19580 RVA: 0x000D1E90 File Offset: 0x000D0090
			[CLSCompliant(false)]
			public static void ActiveProgram(uint program)
			{
				calli(System.Void(System.UInt32), program, GL.EntryPoints[0]);
			}

			// Token: 0x06004C7D RID: 19581 RVA: 0x000D1EA0 File Offset: 0x000D00A0
			[CLSCompliant(false)]
			public static void ActiveShaderProgram(int pipeline, int program)
			{
				calli(System.Void(System.UInt32,System.UInt32), pipeline, program, GL.EntryPoints[1]);
			}

			// Token: 0x06004C7E RID: 19582 RVA: 0x000D1EB0 File Offset: 0x000D00B0
			[CLSCompliant(false)]
			public static void ActiveShaderProgram(uint pipeline, uint program)
			{
				calli(System.Void(System.UInt32,System.UInt32), pipeline, program, GL.EntryPoints[1]);
			}

			// Token: 0x06004C7F RID: 19583 RVA: 0x000D1EC0 File Offset: 0x000D00C0
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public static void BeginQuery(All target, int id)
			{
				calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[8]);
			}

			// Token: 0x06004C80 RID: 19584 RVA: 0x000D1ED0 File Offset: 0x000D00D0
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public static void BeginQuery(All target, uint id)
			{
				calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[8]);
			}

			// Token: 0x06004C81 RID: 19585 RVA: 0x000D1EE0 File Offset: 0x000D00E0
			[CLSCompliant(false)]
			public static void BeginQuery(QueryTarget target, int id)
			{
				calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[8]);
			}

			// Token: 0x06004C82 RID: 19586 RVA: 0x000D1EF0 File Offset: 0x000D00F0
			[CLSCompliant(false)]
			public static void BeginQuery(QueryTarget target, uint id)
			{
				calli(System.Void(System.Int32,System.UInt32), target, id, GL.EntryPoints[8]);
			}

			// Token: 0x06004C83 RID: 19587 RVA: 0x000D1F00 File Offset: 0x000D0100
			[CLSCompliant(false)]
			public static void BindProgramPipeline(int pipeline)
			{
				calli(System.Void(System.UInt32), pipeline, GL.EntryPoints[15]);
			}

			// Token: 0x06004C84 RID: 19588 RVA: 0x000D1F10 File Offset: 0x000D0110
			[CLSCompliant(false)]
			public static void BindProgramPipeline(uint pipeline)
			{
				calli(System.Void(System.UInt32), pipeline, GL.EntryPoints[15]);
			}

			// Token: 0x06004C85 RID: 19589 RVA: 0x000D1F20 File Offset: 0x000D0120
			[Obsolete("Use strongly-typed overload instead")]
			public static void BlendEquation(All mode)
			{
				calli(System.Void(System.Int32), mode, GL.EntryPoints[26]);
			}

			// Token: 0x06004C86 RID: 19590 RVA: 0x000D1F30 File Offset: 0x000D0130
			public static void BlendEquation(BlendEquationMode mode)
			{
				calli(System.Void(System.Int32), mode, GL.EntryPoints[26]);
			}

			// Token: 0x06004C87 RID: 19591 RVA: 0x000D1F40 File Offset: 0x000D0140
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public static void BlendEquation(int buf, All mode)
			{
				calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[27]);
			}

			// Token: 0x06004C88 RID: 19592 RVA: 0x000D1F54 File Offset: 0x000D0154
			[CLSCompliant(false)]
			public static void BlendEquation(int buf, BlendEquationMode mode)
			{
				calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[27]);
			}

			// Token: 0x06004C89 RID: 19593 RVA: 0x000D1F68 File Offset: 0x000D0168
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public static void BlendEquation(uint buf, All mode)
			{
				calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[27]);
			}

			// Token: 0x06004C8A RID: 19594 RVA: 0x000D1F7C File Offset: 0x000D017C
			[CLSCompliant(false)]
			public static void BlendEquation(uint buf, BlendEquationMode mode)
			{
				calli(System.Void(System.UInt32,System.Int32), buf, mode, GL.EntryPoints[27]);
			}

			// Token: 0x06004C8B RID: 19595 RVA: 0x000D1F90 File Offset: 0x000D0190
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public static void BlendEquationSeparate(int buf, All modeRGB, All modeAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, modeRGB, modeAlpha, GL.EntryPoints[29]);
			}

			// Token: 0x06004C8C RID: 19596 RVA: 0x000D1FA4 File Offset: 0x000D01A4
			[CLSCompliant(false)]
			public static void BlendEquationSeparate(int buf, BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, modeRGB, modeAlpha, GL.EntryPoints[29]);
			}

			// Token: 0x06004C8D RID: 19597 RVA: 0x000D1FB8 File Offset: 0x000D01B8
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public static void BlendEquationSeparate(uint buf, All modeRGB, All modeAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, modeRGB, modeAlpha, GL.EntryPoints[29]);
			}

			// Token: 0x06004C8E RID: 19598 RVA: 0x000D1FCC File Offset: 0x000D01CC
			[CLSCompliant(false)]
			public static void BlendEquationSeparate(uint buf, BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, modeRGB, modeAlpha, GL.EntryPoints[29]);
			}

			// Token: 0x06004C8F RID: 19599 RVA: 0x000D1FE0 File Offset: 0x000D01E0
			[CLSCompliant(false)]
			public static void BlendFunc(int buf, All src, All dst)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, src, dst, GL.EntryPoints[31]);
			}

			// Token: 0x06004C90 RID: 19600 RVA: 0x000D1FF4 File Offset: 0x000D01F4
			[CLSCompliant(false)]
			public static void BlendFunc(uint buf, All src, All dst)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), buf, src, dst, GL.EntryPoints[31]);
			}

			// Token: 0x06004C91 RID: 19601 RVA: 0x000D2008 File Offset: 0x000D0208
			[CLSCompliant(false)]
			public static void BlendFuncSeparate(int buf, All srcRGB, All dstRGB, All srcAlpha, All dstAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), buf, srcRGB, dstRGB, srcAlpha, dstAlpha, GL.EntryPoints[33]);
			}

			// Token: 0x06004C92 RID: 19602 RVA: 0x000D2020 File Offset: 0x000D0220
			[CLSCompliant(false)]
			public static void BlendFuncSeparate(uint buf, All srcRGB, All dstRGB, All srcAlpha, All dstAlpha)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), buf, srcRGB, dstRGB, srcAlpha, dstAlpha, GL.EntryPoints[33]);
			}

			// Token: 0x06004C93 RID: 19603 RVA: 0x000D2038 File Offset: 0x000D0238
			[CLSCompliant(false)]
			public static void ColorMask(int index, bool r, bool g, bool b, bool a)
			{
				calli(System.Void(System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean), index, r, g, b, a, GL.EntryPoints[52]);
			}

			// Token: 0x06004C94 RID: 19604 RVA: 0x000D2050 File Offset: 0x000D0250
			[CLSCompliant(false)]
			public static void ColorMask(uint index, bool r, bool g, bool b, bool a)
			{
				calli(System.Void(System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean), index, r, g, b, a, GL.EntryPoints[52]);
			}

			// Token: 0x06004C95 RID: 19605 RVA: 0x000D2068 File Offset: 0x000D0268
			[CLSCompliant(false)]
			public static void CopyImageSubData(int srcName, All srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, All dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, GL.EntryPoints[62]);
			}

			// Token: 0x06004C96 RID: 19606 RVA: 0x000D209C File Offset: 0x000D029C
			[CLSCompliant(false)]
			public static void CopyImageSubData(uint srcName, All srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, All dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, GL.EntryPoints[62]);
			}

			// Token: 0x06004C97 RID: 19607 RVA: 0x000D20D0 File Offset: 0x000D02D0
			public static int CreateShaderProgram(All type, string @string)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(@string);
				int result = calli(System.Int32(System.Int32,System.IntPtr), type, intPtr, GL.EntryPoints[73]);
				BindingsBase.FreeStringPtr(intPtr);
				return result;
			}

			// Token: 0x06004C98 RID: 19608 RVA: 0x000D20FC File Offset: 0x000D02FC
			public static int CreateShaderProgram(All type, int count, string[] strings)
			{
				IntPtr intPtr = BindingsBase.MarshalStringArrayToPtr(strings);
				int result = calli(System.Int32(System.Int32,System.Int32,System.IntPtr), type, count, intPtr, GL.EntryPoints[74]);
				BindingsBase.FreeStringArrayPtr(intPtr, strings.Length);
				return result;
			}

			// Token: 0x06004C99 RID: 19609 RVA: 0x000D212C File Offset: 0x000D032C
			[CLSCompliant(false)]
			public static void DeleteProgramPipeline(int pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref pipelines, GL.EntryPoints[88]);
			}

			// Token: 0x06004C9A RID: 19610 RVA: 0x000D2140 File Offset: 0x000D0340
			[CLSCompliant(false)]
			public static void DeleteProgramPipeline(uint pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref pipelines, GL.EntryPoints[88]);
			}

			// Token: 0x06004C9B RID: 19611 RVA: 0x000D2154 File Offset: 0x000D0354
			[CLSCompliant(false)]
			public unsafe static void DeleteProgramPipelines(int n, int[] pipelines)
			{
				fixed (int* ptr = ref (pipelines != null && pipelines.Length != 0) ? ref pipelines[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[88]);
				}
			}

			// Token: 0x06004C9C RID: 19612 RVA: 0x000D2188 File Offset: 0x000D0388
			[CLSCompliant(false)]
			public unsafe static void DeleteProgramPipelines(int n, ref int pipelines)
			{
				fixed (int* ptr = &pipelines)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[88]);
				}
			}

			// Token: 0x06004C9D RID: 19613 RVA: 0x000D21A8 File Offset: 0x000D03A8
			[CLSCompliant(false)]
			public unsafe static void DeleteProgramPipelines(int n, int* pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, pipelines, GL.EntryPoints[88]);
			}

			// Token: 0x06004C9E RID: 19614 RVA: 0x000D21BC File Offset: 0x000D03BC
			[CLSCompliant(false)]
			public unsafe static void DeleteProgramPipelines(int n, uint[] pipelines)
			{
				fixed (uint* ptr = ref (pipelines != null && pipelines.Length != 0) ? ref pipelines[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[88]);
				}
			}

			// Token: 0x06004C9F RID: 19615 RVA: 0x000D21F0 File Offset: 0x000D03F0
			[CLSCompliant(false)]
			public unsafe static void DeleteProgramPipelines(int n, ref uint pipelines)
			{
				fixed (uint* ptr = &pipelines)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[88]);
				}
			}

			// Token: 0x06004CA0 RID: 19616 RVA: 0x000D2210 File Offset: 0x000D0410
			[CLSCompliant(false)]
			public unsafe static void DeleteProgramPipelines(int n, uint* pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, pipelines, GL.EntryPoints[88]);
			}

			// Token: 0x06004CA1 RID: 19617 RVA: 0x000D2224 File Offset: 0x000D0424
			[CLSCompliant(false)]
			public static void DeleteQuery(int ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[90]);
			}

			// Token: 0x06004CA2 RID: 19618 RVA: 0x000D2238 File Offset: 0x000D0438
			[CLSCompliant(false)]
			public static void DeleteQuery(uint ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref ids, GL.EntryPoints[90]);
			}

			// Token: 0x06004CA3 RID: 19619 RVA: 0x000D224C File Offset: 0x000D044C
			[CLSCompliant(false)]
			public unsafe static void DeleteQueries(int n, int[] ids)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[90]);
				}
			}

			// Token: 0x06004CA4 RID: 19620 RVA: 0x000D2280 File Offset: 0x000D0480
			[CLSCompliant(false)]
			public unsafe static void DeleteQueries(int n, ref int ids)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[90]);
				}
			}

			// Token: 0x06004CA5 RID: 19621 RVA: 0x000D22A0 File Offset: 0x000D04A0
			[CLSCompliant(false)]
			public unsafe static void DeleteQueries(int n, int* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[90]);
			}

			// Token: 0x06004CA6 RID: 19622 RVA: 0x000D22B4 File Offset: 0x000D04B4
			[CLSCompliant(false)]
			public unsafe static void DeleteQueries(int n, uint[] ids)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[90]);
				}
			}

			// Token: 0x06004CA7 RID: 19623 RVA: 0x000D22E8 File Offset: 0x000D04E8
			[CLSCompliant(false)]
			public unsafe static void DeleteQueries(int n, ref uint ids)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[90]);
				}
			}

			// Token: 0x06004CA8 RID: 19624 RVA: 0x000D2308 File Offset: 0x000D0508
			[CLSCompliant(false)]
			public unsafe static void DeleteQueries(int n, uint* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[90]);
			}

			// Token: 0x06004CA9 RID: 19625 RVA: 0x000D231C File Offset: 0x000D051C
			[CLSCompliant(false)]
			public static void Disable(All target, int index)
			{
				calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[106]);
			}

			// Token: 0x06004CAA RID: 19626 RVA: 0x000D2330 File Offset: 0x000D0530
			[CLSCompliant(false)]
			public static void Disable(All target, uint index)
			{
				calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[106]);
			}

			// Token: 0x06004CAB RID: 19627 RVA: 0x000D2344 File Offset: 0x000D0544
			[CLSCompliant(false)]
			public unsafe static void DiscardFramebuffer(All target, int numAttachments, All[] attachments)
			{
				fixed (All* ptr = ref (attachments != null && attachments.Length != 0) ? ref attachments[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, numAttachments, ptr, GL.EntryPoints[108]);
				}
			}

			// Token: 0x06004CAC RID: 19628 RVA: 0x000D2378 File Offset: 0x000D0578
			[CLSCompliant(false)]
			public unsafe static void DiscardFramebuffer(All target, int numAttachments, ref All attachments)
			{
				fixed (All* ptr = &attachments)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, numAttachments, ptr, GL.EntryPoints[108]);
				}
			}

			// Token: 0x06004CAD RID: 19629 RVA: 0x000D2398 File Offset: 0x000D0598
			[CLSCompliant(false)]
			public unsafe static void DiscardFramebuffer(All target, int numAttachments, All* attachments)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, numAttachments, attachments, GL.EntryPoints[108]);
			}

			// Token: 0x06004CAE RID: 19630 RVA: 0x000D23AC File Offset: 0x000D05AC
			[Obsolete("Use strongly-typed overload instead")]
			public static void DrawArraysInstanced(All mode, int start, int count, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, start, count, primcount, GL.EntryPoints[112]);
			}

			// Token: 0x06004CAF RID: 19631 RVA: 0x000D23C0 File Offset: 0x000D05C0
			public static void DrawArraysInstanced(PrimitiveType mode, int start, int count, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, start, count, primcount, GL.EntryPoints[112]);
			}

			// Token: 0x06004CB0 RID: 19632 RVA: 0x000D23D4 File Offset: 0x000D05D4
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DrawBuffers(int n, All[] bufs)
			{
				fixed (All* ptr = ref (bufs != null && bufs.Length != 0) ? ref bufs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[115]);
				}
			}

			// Token: 0x06004CB1 RID: 19633 RVA: 0x000D2408 File Offset: 0x000D0608
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void DrawBuffers(int n, ref All bufs)
			{
				fixed (All* ptr = &bufs)
				{
					calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[115]);
				}
			}

			// Token: 0x06004CB2 RID: 19634 RVA: 0x000D2428 File Offset: 0x000D0628
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void DrawBuffers(int n, All* bufs)
			{
				calli(System.Void(System.Int32,System.Int32*), n, bufs, GL.EntryPoints[115]);
			}

			// Token: 0x06004CB3 RID: 19635 RVA: 0x000D243C File Offset: 0x000D063C
			[CLSCompliant(false)]
			public unsafe static void DrawBuffers(int n, DrawBufferMode[] bufs)
			{
				fixed (DrawBufferMode* ptr = ref (bufs != null && bufs.Length != 0) ? ref bufs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[115]);
				}
			}

			// Token: 0x06004CB4 RID: 19636 RVA: 0x000D2470 File Offset: 0x000D0670
			[CLSCompliant(false)]
			public unsafe static void DrawBuffers(int n, ref DrawBufferMode bufs)
			{
				fixed (DrawBufferMode* ptr = &bufs)
				{
					calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[115]);
				}
			}

			// Token: 0x06004CB5 RID: 19637 RVA: 0x000D2490 File Offset: 0x000D0690
			[CLSCompliant(false)]
			public unsafe static void DrawBuffers(int n, DrawBufferMode* bufs)
			{
				calli(System.Void(System.Int32,System.Int32*), n, bufs, GL.EntryPoints[115]);
			}

			// Token: 0x06004CB6 RID: 19638 RVA: 0x000D24A4 File Offset: 0x000D06A4
			[CLSCompliant(false)]
			public unsafe static void DrawBuffersIndexed(int n, All[] location, int[] indices)
			{
				fixed (All* ptr = ref (location != null && location.Length != 0) ? ref location[0] : ref *null)
				{
					All* ptr2 = ptr;
					fixed (int* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32*), n, ptr2, ptr3, GL.EntryPoints[116]);
					}
				}
			}

			// Token: 0x06004CB7 RID: 19639 RVA: 0x000D24EC File Offset: 0x000D06EC
			[CLSCompliant(false)]
			public unsafe static void DrawBuffersIndexed(int n, ref All location, ref int indices)
			{
				fixed (All* ptr = &location)
				{
					All* ptr2 = ptr;
					fixed (int* ptr3 = &indices)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32*), n, ptr2, ptr3, GL.EntryPoints[116]);
					}
				}
			}

			// Token: 0x06004CB8 RID: 19640 RVA: 0x000D2510 File Offset: 0x000D0710
			[CLSCompliant(false)]
			public unsafe static void DrawBuffersIndexed(int n, All* location, int* indices)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32*), n, location, indices, GL.EntryPoints[116]);
			}

			// Token: 0x06004CB9 RID: 19641 RVA: 0x000D2524 File Offset: 0x000D0724
			[Obsolete("Use strongly-typed overload instead")]
			public static void DrawElementsInstanced(All mode, int count, All type, IntPtr indices, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, primcount, GL.EntryPoints[121]);
			}

			// Token: 0x06004CBA RID: 19642 RVA: 0x000D253C File Offset: 0x000D073C
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(All mode, int count, All type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[121]);
				}
			}

			// Token: 0x06004CBB RID: 19643 RVA: 0x000D2574 File Offset: 0x000D0774
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void DrawElementsInstanced<T3>(All mode, int count, All type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[121]);
				}
			}

			// Token: 0x06004CBC RID: 19644 RVA: 0x000D25B0 File Offset: 0x000D07B0
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void DrawElementsInstanced<T3>(All mode, int count, All type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[121]);
				}
			}

			// Token: 0x06004CBD RID: 19645 RVA: 0x000D25EC File Offset: 0x000D07EC
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void DrawElementsInstanced<T3>(All mode, int count, All type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[121]);
				}
			}

			// Token: 0x06004CBE RID: 19646 RVA: 0x000D2610 File Offset: 0x000D0810
			public static void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, primcount, GL.EntryPoints[121]);
			}

			// Token: 0x06004CBF RID: 19647 RVA: 0x000D2628 File Offset: 0x000D0828
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[121]);
				}
			}

			// Token: 0x06004CC0 RID: 19648 RVA: 0x000D2660 File Offset: 0x000D0860
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[121]);
				}
			}

			// Token: 0x06004CC1 RID: 19649 RVA: 0x000D269C File Offset: 0x000D089C
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[121]);
				}
			}

			// Token: 0x06004CC2 RID: 19650 RVA: 0x000D26D8 File Offset: 0x000D08D8
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[121]);
				}
			}

			// Token: 0x06004CC3 RID: 19651 RVA: 0x000D26FC File Offset: 0x000D08FC
			[CLSCompliant(false)]
			public static void Enable(All target, int index)
			{
				calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[128]);
			}

			// Token: 0x06004CC4 RID: 19652 RVA: 0x000D2710 File Offset: 0x000D0910
			[CLSCompliant(false)]
			public static void Enable(All target, uint index)
			{
				calli(System.Void(System.Int32,System.UInt32), target, index, GL.EntryPoints[128]);
			}

			// Token: 0x06004CC5 RID: 19653 RVA: 0x000D2724 File Offset: 0x000D0924
			[Obsolete("Use strongly-typed overload instead")]
			public static void EndQuery(All target)
			{
				calli(System.Void(System.Int32), target, GL.EntryPoints[133]);
			}

			// Token: 0x06004CC6 RID: 19654 RVA: 0x000D2738 File Offset: 0x000D0938
			public static void EndQuery(QueryTarget target)
			{
				calli(System.Void(System.Int32), target, GL.EntryPoints[133]);
			}

			// Token: 0x06004CC7 RID: 19655 RVA: 0x000D274C File Offset: 0x000D094C
			[Obsolete("Use strongly-typed overload instead")]
			public static void FlushMappedBufferRange(All target, IntPtr offset, IntPtr length)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr), target, offset, length, GL.EntryPoints[154]);
			}

			// Token: 0x06004CC8 RID: 19656 RVA: 0x000D2764 File Offset: 0x000D0964
			public static void FlushMappedBufferRange(BufferTarget target, IntPtr offset, IntPtr length)
			{
				calli(System.Void(System.Int32,System.IntPtr,System.IntPtr), target, offset, length, GL.EntryPoints[154]);
			}

			// Token: 0x06004CC9 RID: 19657 RVA: 0x000D277C File Offset: 0x000D097C
			[CLSCompliant(false)]
			public static void FramebufferTexture2DMultisample(All target, All attachment, All textarget, int texture, int level, int samples)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, textarget, texture, level, samples, GL.EntryPoints[157]);
			}

			// Token: 0x06004CCA RID: 19658 RVA: 0x000D2798 File Offset: 0x000D0998
			[CLSCompliant(false)]
			public static void FramebufferTexture2DMultisample(All target, All attachment, All textarget, uint texture, int level, int samples)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, textarget, texture, level, samples, GL.EntryPoints[157]);
			}

			// Token: 0x06004CCB RID: 19659 RVA: 0x000D27B4 File Offset: 0x000D09B4
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public static void FramebufferTexture(All target, All attachment, int texture, int level)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, texture, level, GL.EntryPoints[160]);
			}

			// Token: 0x06004CCC RID: 19660 RVA: 0x000D27CC File Offset: 0x000D09CC
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public static void FramebufferTexture(All target, All attachment, uint texture, int level)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, texture, level, GL.EntryPoints[160]);
			}

			// Token: 0x06004CCD RID: 19661 RVA: 0x000D27E4 File Offset: 0x000D09E4
			[CLSCompliant(false)]
			public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, texture, level, GL.EntryPoints[160]);
			}

			// Token: 0x06004CCE RID: 19662 RVA: 0x000D27FC File Offset: 0x000D09FC
			[CLSCompliant(false)]
			public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32), target, attachment, texture, level, GL.EntryPoints[160]);
			}

			// Token: 0x06004CCF RID: 19663 RVA: 0x000D2814 File Offset: 0x000D0A14
			[CLSCompliant(false)]
			public static int GenProgramPipeline()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[168]);
				return result;
			}

			// Token: 0x06004CD0 RID: 19664 RVA: 0x000D2838 File Offset: 0x000D0A38
			[CLSCompliant(false)]
			public unsafe static void GenProgramPipelines(int n, [Out] int[] pipelines)
			{
				fixed (int* ptr = ref (pipelines != null && pipelines.Length != 0) ? ref pipelines[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[168]);
				}
			}

			// Token: 0x06004CD1 RID: 19665 RVA: 0x000D286C File Offset: 0x000D0A6C
			[CLSCompliant(false)]
			public unsafe static void GenProgramPipelines(int n, out int pipelines)
			{
				fixed (int* ptr = &pipelines)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[168]);
				}
			}

			// Token: 0x06004CD2 RID: 19666 RVA: 0x000D2890 File Offset: 0x000D0A90
			[CLSCompliant(false)]
			public unsafe static void GenProgramPipelines(int n, [Out] int* pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, pipelines, GL.EntryPoints[168]);
			}

			// Token: 0x06004CD3 RID: 19667 RVA: 0x000D28A4 File Offset: 0x000D0AA4
			[CLSCompliant(false)]
			public unsafe static void GenProgramPipelines(int n, [Out] uint[] pipelines)
			{
				fixed (uint* ptr = ref (pipelines != null && pipelines.Length != 0) ? ref pipelines[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[168]);
				}
			}

			// Token: 0x06004CD4 RID: 19668 RVA: 0x000D28D8 File Offset: 0x000D0AD8
			[CLSCompliant(false)]
			public unsafe static void GenProgramPipelines(int n, out uint pipelines)
			{
				fixed (uint* ptr = &pipelines)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[168]);
				}
			}

			// Token: 0x06004CD5 RID: 19669 RVA: 0x000D28FC File Offset: 0x000D0AFC
			[CLSCompliant(false)]
			public unsafe static void GenProgramPipelines(int n, [Out] uint* pipelines)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, pipelines, GL.EntryPoints[168]);
			}

			// Token: 0x06004CD6 RID: 19670 RVA: 0x000D2910 File Offset: 0x000D0B10
			[CLSCompliant(false)]
			public static int GenQuery()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[170]);
				return result;
			}

			// Token: 0x06004CD7 RID: 19671 RVA: 0x000D2934 File Offset: 0x000D0B34
			[CLSCompliant(false)]
			public unsafe static void GenQueries(int n, [Out] int[] ids)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[170]);
				}
			}

			// Token: 0x06004CD8 RID: 19672 RVA: 0x000D2968 File Offset: 0x000D0B68
			[CLSCompliant(false)]
			public unsafe static void GenQueries(int n, out int ids)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[170]);
				}
			}

			// Token: 0x06004CD9 RID: 19673 RVA: 0x000D298C File Offset: 0x000D0B8C
			[CLSCompliant(false)]
			public unsafe static void GenQueries(int n, [Out] int* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[170]);
			}

			// Token: 0x06004CDA RID: 19674 RVA: 0x000D29A0 File Offset: 0x000D0BA0
			[CLSCompliant(false)]
			public unsafe static void GenQueries(int n, [Out] uint[] ids)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[170]);
				}
			}

			// Token: 0x06004CDB RID: 19675 RVA: 0x000D29D4 File Offset: 0x000D0BD4
			[CLSCompliant(false)]
			public unsafe static void GenQueries(int n, out uint ids)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[170]);
				}
			}

			// Token: 0x06004CDC RID: 19676 RVA: 0x000D29F8 File Offset: 0x000D0BF8
			[CLSCompliant(false)]
			public unsafe static void GenQueries(int n, [Out] uint* ids)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, ids, GL.EntryPoints[170]);
			}

			// Token: 0x06004CDD RID: 19677 RVA: 0x000D2A0C File Offset: 0x000D0C0C
			public static All GetGraphicsResetStatus()
			{
				return calli(System.Int32(), GL.EntryPoints[199]);
			}

			// Token: 0x06004CDE RID: 19678 RVA: 0x000D2A20 File Offset: 0x000D0C20
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetInteger(All target, int index, [Out] int[] data)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[204]);
				}
			}

			// Token: 0x06004CDF RID: 19679 RVA: 0x000D2A58 File Offset: 0x000D0C58
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetInteger(All target, int index, out int data)
			{
				fixed (int* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[204]);
				}
			}

			// Token: 0x06004CE0 RID: 19680 RVA: 0x000D2A7C File Offset: 0x000D0C7C
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetInteger(All target, int index, [Out] int* data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, data, GL.EntryPoints[204]);
			}

			// Token: 0x06004CE1 RID: 19681 RVA: 0x000D2A94 File Offset: 0x000D0C94
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetInteger(All target, uint index, [Out] int[] data)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[204]);
				}
			}

			// Token: 0x06004CE2 RID: 19682 RVA: 0x000D2ACC File Offset: 0x000D0CCC
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetInteger(All target, uint index, out int data)
			{
				fixed (int* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[204]);
				}
			}

			// Token: 0x06004CE3 RID: 19683 RVA: 0x000D2AF0 File Offset: 0x000D0CF0
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetInteger(All target, uint index, [Out] int* data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, data, GL.EntryPoints[204]);
			}

			// Token: 0x06004CE4 RID: 19684 RVA: 0x000D2B08 File Offset: 0x000D0D08
			[CLSCompliant(false)]
			public unsafe static void GetInteger(GetIndexedPName target, int index, [Out] int[] data)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[204]);
				}
			}

			// Token: 0x06004CE5 RID: 19685 RVA: 0x000D2B40 File Offset: 0x000D0D40
			[CLSCompliant(false)]
			public unsafe static void GetInteger(GetIndexedPName target, int index, out int data)
			{
				fixed (int* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[204]);
				}
			}

			// Token: 0x06004CE6 RID: 19686 RVA: 0x000D2B64 File Offset: 0x000D0D64
			[CLSCompliant(false)]
			public unsafe static void GetInteger(GetIndexedPName target, int index, [Out] int* data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, data, GL.EntryPoints[204]);
			}

			// Token: 0x06004CE7 RID: 19687 RVA: 0x000D2B7C File Offset: 0x000D0D7C
			[CLSCompliant(false)]
			public unsafe static void GetInteger(GetIndexedPName target, uint index, [Out] int[] data)
			{
				fixed (int* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[204]);
				}
			}

			// Token: 0x06004CE8 RID: 19688 RVA: 0x000D2BB4 File Offset: 0x000D0DB4
			[CLSCompliant(false)]
			public unsafe static void GetInteger(GetIndexedPName target, uint index, out int data)
			{
				fixed (int* ptr = &data)
				{
					calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, ptr, GL.EntryPoints[204]);
				}
			}

			// Token: 0x06004CE9 RID: 19689 RVA: 0x000D2BD8 File Offset: 0x000D0DD8
			[CLSCompliant(false)]
			public unsafe static void GetInteger(GetIndexedPName target, uint index, [Out] int* data)
			{
				calli(System.Void(System.Int32,System.UInt32,System.Int32*), target, index, data, GL.EntryPoints[204]);
			}

			// Token: 0x06004CEA RID: 19690 RVA: 0x000D2BF0 File Offset: 0x000D0DF0
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, ptr, GL.EntryPoints[208]);
				}
			}

			// Token: 0x06004CEB RID: 19691 RVA: 0x000D2C28 File Offset: 0x000D0E28
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, ptr, GL.EntryPoints[208]);
				}
			}

			// Token: 0x06004CEC RID: 19692 RVA: 0x000D2C4C File Offset: 0x000D0E4C
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, @params, GL.EntryPoints[208]);
			}

			// Token: 0x06004CED RID: 19693 RVA: 0x000D2C64 File Offset: 0x000D0E64
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] float[] @params)
			{
				fixed (float* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, ptr, GL.EntryPoints[208]);
				}
			}

			// Token: 0x06004CEE RID: 19694 RVA: 0x000D2C9C File Offset: 0x000D0E9C
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, out float @params)
			{
				fixed (float* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, ptr, GL.EntryPoints[208]);
				}
			}

			// Token: 0x06004CEF RID: 19695 RVA: 0x000D2CC0 File Offset: 0x000D0EC0
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] float* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, bufSize, @params, GL.EntryPoints[208]);
			}

			// Token: 0x06004CF0 RID: 19696 RVA: 0x000D2CD8 File Offset: 0x000D0ED8
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, ptr, GL.EntryPoints[209]);
				}
			}

			// Token: 0x06004CF1 RID: 19697 RVA: 0x000D2D10 File Offset: 0x000D0F10
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, ptr, GL.EntryPoints[209]);
				}
			}

			// Token: 0x06004CF2 RID: 19698 RVA: 0x000D2D34 File Offset: 0x000D0F34
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(int program, int location, int bufSize, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, @params, GL.EntryPoints[209]);
			}

			// Token: 0x06004CF3 RID: 19699 RVA: 0x000D2D4C File Offset: 0x000D0F4C
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, ptr, GL.EntryPoints[209]);
				}
			}

			// Token: 0x06004CF4 RID: 19700 RVA: 0x000D2D84 File Offset: 0x000D0F84
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, ptr, GL.EntryPoints[209]);
				}
			}

			// Token: 0x06004CF5 RID: 19701 RVA: 0x000D2DA8 File Offset: 0x000D0FA8
			[CLSCompliant(false)]
			public unsafe static void GetnUniform(uint program, int location, int bufSize, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, bufSize, @params, GL.EntryPoints[209]);
			}

			// Token: 0x06004CF6 RID: 19702 RVA: 0x000D2DC0 File Offset: 0x000D0FC0
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(All type, int @object, int bufSize, [Out] int[] length, [Out] StringBuilder label)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), type, @object, bufSize, ptr2, intPtr, GL.EntryPoints[211]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004CF7 RID: 19703 RVA: 0x000D2E14 File Offset: 0x000D1014
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectLabel(All type, int @object, int bufSize, out int length, [Out] StringBuilder label)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), type, @object, bufSize, ptr2, intPtr, GL.EntryPoints[211]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004CF8 RID: 19704 RVA: 0x000D2E54 File Offset: 0x000D1054
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(All type, int @object, int bufSize, [Out] int* length, [Out] StringBuilder label)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), type, @object, bufSize, length, intPtr, GL.EntryPoints[211]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004CF9 RID: 19705 RVA: 0x000D2E94 File Offset: 0x000D1094
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(All type, uint @object, int bufSize, [Out] int[] length, [Out] StringBuilder label)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), type, @object, bufSize, ptr2, intPtr, GL.EntryPoints[211]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004CFA RID: 19706 RVA: 0x000D2EE8 File Offset: 0x000D10E8
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(All type, uint @object, int bufSize, out int length, [Out] StringBuilder label)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), type, @object, bufSize, ptr2, intPtr, GL.EntryPoints[211]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004CFB RID: 19707 RVA: 0x000D2F28 File Offset: 0x000D1128
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectLabel(All type, uint @object, int bufSize, [Out] int* length, [Out] StringBuilder label)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), type, @object, bufSize, length, intPtr, GL.EntryPoints[211]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004CFC RID: 19708 RVA: 0x000D2F68 File Offset: 0x000D1168
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipelineInfoLog(int pipeline, int bufSize, [Out] int[] length, [Out] StringBuilder infoLog)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, ptr2, intPtr, GL.EntryPoints[231]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004CFD RID: 19709 RVA: 0x000D2FB8 File Offset: 0x000D11B8
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetProgramPipelineInfoLog(int pipeline, int bufSize, out int length, [Out] StringBuilder infoLog)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, ptr2, intPtr, GL.EntryPoints[231]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004CFE RID: 19710 RVA: 0x000D2FF8 File Offset: 0x000D11F8
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetProgramPipelineInfoLog(int pipeline, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, length, intPtr, GL.EntryPoints[231]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004CFF RID: 19711 RVA: 0x000D3034 File Offset: 0x000D1234
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [Out] int[] length, [Out] StringBuilder infoLog)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, ptr2, intPtr, GL.EntryPoints[231]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004D00 RID: 19712 RVA: 0x000D3084 File Offset: 0x000D1284
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, out int length, [Out] StringBuilder infoLog)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, ptr2, intPtr, GL.EntryPoints[231]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004D01 RID: 19713 RVA: 0x000D30C4 File Offset: 0x000D12C4
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)infoLog.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), pipeline, bufSize, length, intPtr, GL.EntryPoints[231]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, infoLog);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004D02 RID: 19714 RVA: 0x000D3100 File Offset: 0x000D1300
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipeline(int pipeline, All pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, ptr, GL.EntryPoints[232]);
				}
			}

			// Token: 0x06004D03 RID: 19715 RVA: 0x000D3138 File Offset: 0x000D1338
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipeline(int pipeline, All pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, ptr, GL.EntryPoints[232]);
				}
			}

			// Token: 0x06004D04 RID: 19716 RVA: 0x000D315C File Offset: 0x000D135C
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipeline(int pipeline, All pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, @params, GL.EntryPoints[232]);
			}

			// Token: 0x06004D05 RID: 19717 RVA: 0x000D3174 File Offset: 0x000D1374
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipeline(uint pipeline, All pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, ptr, GL.EntryPoints[232]);
				}
			}

			// Token: 0x06004D06 RID: 19718 RVA: 0x000D31AC File Offset: 0x000D13AC
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipeline(uint pipeline, All pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, ptr, GL.EntryPoints[232]);
				}
			}

			// Token: 0x06004D07 RID: 19719 RVA: 0x000D31D0 File Offset: 0x000D13D0
			[CLSCompliant(false)]
			public unsafe static void GetProgramPipeline(uint pipeline, All pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), pipeline, pname, @params, GL.EntryPoints[232]);
			}

			// Token: 0x06004D08 RID: 19720 RVA: 0x000D31E8 File Offset: 0x000D13E8
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetQuery(All target, All pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[234]);
				}
			}

			// Token: 0x06004D09 RID: 19721 RVA: 0x000D3220 File Offset: 0x000D1420
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetQuery(All target, All pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[234]);
				}
			}

			// Token: 0x06004D0A RID: 19722 RVA: 0x000D3244 File Offset: 0x000D1444
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetQuery(All target, All pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[234]);
			}

			// Token: 0x06004D0B RID: 19723 RVA: 0x000D325C File Offset: 0x000D145C
			[CLSCompliant(false)]
			public unsafe static void GetQuery(QueryTarget target, GetQueryParam pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[234]);
				}
			}

			// Token: 0x06004D0C RID: 19724 RVA: 0x000D3294 File Offset: 0x000D1494
			[CLSCompliant(false)]
			public unsafe static void GetQuery(QueryTarget target, GetQueryParam pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[234]);
				}
			}

			// Token: 0x06004D0D RID: 19725 RVA: 0x000D32B8 File Offset: 0x000D14B8
			[CLSCompliant(false)]
			public unsafe static void GetQuery(QueryTarget target, GetQueryParam pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[234]);
			}

			// Token: 0x06004D0E RID: 19726 RVA: 0x000D32D0 File Offset: 0x000D14D0
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetQueryObject(int id, All pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[235]);
				}
			}

			// Token: 0x06004D0F RID: 19727 RVA: 0x000D3308 File Offset: 0x000D1508
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, All pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[235]);
				}
			}

			// Token: 0x06004D10 RID: 19728 RVA: 0x000D332C File Offset: 0x000D152C
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, All pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, @params, GL.EntryPoints[235]);
			}

			// Token: 0x06004D11 RID: 19729 RVA: 0x000D3344 File Offset: 0x000D1544
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[235]);
				}
			}

			// Token: 0x06004D12 RID: 19730 RVA: 0x000D337C File Offset: 0x000D157C
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[235]);
				}
			}

			// Token: 0x06004D13 RID: 19731 RVA: 0x000D33A0 File Offset: 0x000D15A0
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, @params, GL.EntryPoints[235]);
			}

			// Token: 0x06004D14 RID: 19732 RVA: 0x000D33B8 File Offset: 0x000D15B8
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, All pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[235]);
				}
			}

			// Token: 0x06004D15 RID: 19733 RVA: 0x000D33F0 File Offset: 0x000D15F0
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, All pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[235]);
				}
			}

			// Token: 0x06004D16 RID: 19734 RVA: 0x000D3414 File Offset: 0x000D1614
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetQueryObject(uint id, All pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, @params, GL.EntryPoints[235]);
			}

			// Token: 0x06004D17 RID: 19735 RVA: 0x000D342C File Offset: 0x000D162C
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] long[] @params)
			{
				fixed (long* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[235]);
				}
			}

			// Token: 0x06004D18 RID: 19736 RVA: 0x000D3464 File Offset: 0x000D1664
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, out long @params)
			{
				fixed (long* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, ptr, GL.EntryPoints[235]);
				}
			}

			// Token: 0x06004D19 RID: 19737 RVA: 0x000D3488 File Offset: 0x000D1688
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] long* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int64*), id, pname, @params, GL.EntryPoints[235]);
			}

			// Token: 0x06004D1A RID: 19738 RVA: 0x000D34A0 File Offset: 0x000D16A0
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, All pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[236]);
				}
			}

			// Token: 0x06004D1B RID: 19739 RVA: 0x000D34D8 File Offset: 0x000D16D8
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, All pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[236]);
				}
			}

			// Token: 0x06004D1C RID: 19740 RVA: 0x000D34FC File Offset: 0x000D16FC
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, All pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, @params, GL.EntryPoints[236]);
			}

			// Token: 0x06004D1D RID: 19741 RVA: 0x000D3514 File Offset: 0x000D1714
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[236]);
				}
			}

			// Token: 0x06004D1E RID: 19742 RVA: 0x000D354C File Offset: 0x000D174C
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[236]);
				}
			}

			// Token: 0x06004D1F RID: 19743 RVA: 0x000D3570 File Offset: 0x000D1770
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(int id, GetQueryObjectParam pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, @params, GL.EntryPoints[236]);
			}

			// Token: 0x06004D20 RID: 19744 RVA: 0x000D3588 File Offset: 0x000D1788
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetQueryObject(uint id, All pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[236]);
				}
			}

			// Token: 0x06004D21 RID: 19745 RVA: 0x000D35C0 File Offset: 0x000D17C0
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, All pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[236]);
				}
			}

			// Token: 0x06004D22 RID: 19746 RVA: 0x000D35E4 File Offset: 0x000D17E4
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetQueryObject(uint id, All pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, @params, GL.EntryPoints[236]);
			}

			// Token: 0x06004D23 RID: 19747 RVA: 0x000D35FC File Offset: 0x000D17FC
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[236]);
				}
			}

			// Token: 0x06004D24 RID: 19748 RVA: 0x000D3634 File Offset: 0x000D1834
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, ptr, GL.EntryPoints[236]);
				}
			}

			// Token: 0x06004D25 RID: 19749 RVA: 0x000D3658 File Offset: 0x000D1858
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), id, pname, @params, GL.EntryPoints[236]);
			}

			// Token: 0x06004D26 RID: 19750 RVA: 0x000D3670 File Offset: 0x000D1870
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, All pname, [Out] ulong[] @params)
			{
				fixed (ulong* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, ptr, GL.EntryPoints[237]);
				}
			}

			// Token: 0x06004D27 RID: 19751 RVA: 0x000D36A8 File Offset: 0x000D18A8
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, All pname, out ulong @params)
			{
				fixed (ulong* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, ptr, GL.EntryPoints[237]);
				}
			}

			// Token: 0x06004D28 RID: 19752 RVA: 0x000D36CC File Offset: 0x000D18CC
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetQueryObject(uint id, All pname, [Out] ulong* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, @params, GL.EntryPoints[237]);
			}

			// Token: 0x06004D29 RID: 19753 RVA: 0x000D36E4 File Offset: 0x000D18E4
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] ulong[] @params)
			{
				fixed (ulong* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, ptr, GL.EntryPoints[237]);
				}
			}

			// Token: 0x06004D2A RID: 19754 RVA: 0x000D371C File Offset: 0x000D191C
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, out ulong @params)
			{
				fixed (ulong* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, ptr, GL.EntryPoints[237]);
				}
			}

			// Token: 0x06004D2B RID: 19755 RVA: 0x000D3740 File Offset: 0x000D1940
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] ulong* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt64*), id, pname, @params, GL.EntryPoints[237]);
			}

			// Token: 0x06004D2C RID: 19756 RVA: 0x000D3758 File Offset: 0x000D1958
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetQueryObject(uint id, All pname, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[239]);
				}
			}

			// Token: 0x06004D2D RID: 19757 RVA: 0x000D3790 File Offset: 0x000D1990
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, All pname, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[239]);
				}
			}

			// Token: 0x06004D2E RID: 19758 RVA: 0x000D37B4 File Offset: 0x000D19B4
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, All pname, [Out] uint* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, @params, GL.EntryPoints[239]);
			}

			// Token: 0x06004D2F RID: 19759 RVA: 0x000D37CC File Offset: 0x000D19CC
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[239]);
				}
			}

			// Token: 0x06004D30 RID: 19760 RVA: 0x000D3804 File Offset: 0x000D1A04
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, ptr, GL.EntryPoints[239]);
				}
			}

			// Token: 0x06004D31 RID: 19761 RVA: 0x000D3828 File Offset: 0x000D1A28
			[CLSCompliant(false)]
			public unsafe static void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] uint* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), id, pname, @params, GL.EntryPoints[239]);
			}

			// Token: 0x06004D32 RID: 19762 RVA: 0x000D3840 File Offset: 0x000D1A40
			[CLSCompliant(false)]
			public unsafe static void GetSamplerParameterI(int sampler, All pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[242]);
				}
			}

			// Token: 0x06004D33 RID: 19763 RVA: 0x000D3878 File Offset: 0x000D1A78
			[CLSCompliant(false)]
			public unsafe static void GetSamplerParameterI(int sampler, All pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[242]);
				}
			}

			// Token: 0x06004D34 RID: 19764 RVA: 0x000D389C File Offset: 0x000D1A9C
			[CLSCompliant(false)]
			public unsafe static void GetSamplerParameterI(int sampler, All pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[242]);
			}

			// Token: 0x06004D35 RID: 19765 RVA: 0x000D38B4 File Offset: 0x000D1AB4
			[CLSCompliant(false)]
			public unsafe static void GetSamplerParameterI(uint sampler, All pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[242]);
				}
			}

			// Token: 0x06004D36 RID: 19766 RVA: 0x000D38EC File Offset: 0x000D1AEC
			[CLSCompliant(false)]
			public unsafe static void GetSamplerParameterI(uint sampler, All pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[242]);
				}
			}

			// Token: 0x06004D37 RID: 19767 RVA: 0x000D3910 File Offset: 0x000D1B10
			[CLSCompliant(false)]
			public unsafe static void GetSamplerParameterI(uint sampler, All pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, @params, GL.EntryPoints[242]);
			}

			// Token: 0x06004D38 RID: 19768 RVA: 0x000D3928 File Offset: 0x000D1B28
			[CLSCompliant(false)]
			public unsafe static void GetSamplerParameterI(uint sampler, All pname, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, ptr, GL.EntryPoints[243]);
				}
			}

			// Token: 0x06004D39 RID: 19769 RVA: 0x000D3960 File Offset: 0x000D1B60
			[CLSCompliant(false)]
			public unsafe static void GetSamplerParameterI(uint sampler, All pname, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, ptr, GL.EntryPoints[243]);
				}
			}

			// Token: 0x06004D3A RID: 19770 RVA: 0x000D3984 File Offset: 0x000D1B84
			[CLSCompliant(false)]
			public unsafe static void GetSamplerParameterI(uint sampler, All pname, [Out] uint* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, @params, GL.EntryPoints[243]);
			}

			// Token: 0x06004D3B RID: 19771 RVA: 0x000D399C File Offset: 0x000D1B9C
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterI(All target, All pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[254]);
				}
			}

			// Token: 0x06004D3C RID: 19772 RVA: 0x000D39D4 File Offset: 0x000D1BD4
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterI(All target, All pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[254]);
				}
			}

			// Token: 0x06004D3D RID: 19773 RVA: 0x000D39F8 File Offset: 0x000D1BF8
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterI(All target, All pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[254]);
			}

			// Token: 0x06004D3E RID: 19774 RVA: 0x000D3A10 File Offset: 0x000D1C10
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[254]);
				}
			}

			// Token: 0x06004D3F RID: 19775 RVA: 0x000D3A48 File Offset: 0x000D1C48
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[254]);
				}
			}

			// Token: 0x06004D40 RID: 19776 RVA: 0x000D3A6C File Offset: 0x000D1C6C
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[254]);
			}

			// Token: 0x06004D41 RID: 19777 RVA: 0x000D3A84 File Offset: 0x000D1C84
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterI(All target, All pname, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[255]);
				}
			}

			// Token: 0x06004D42 RID: 19778 RVA: 0x000D3ABC File Offset: 0x000D1CBC
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetTexParameterI(All target, All pname, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[255]);
				}
			}

			// Token: 0x06004D43 RID: 19779 RVA: 0x000D3AE0 File Offset: 0x000D1CE0
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetTexParameterI(All target, All pname, [Out] uint* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, @params, GL.EntryPoints[255]);
			}

			// Token: 0x06004D44 RID: 19780 RVA: 0x000D3AF8 File Offset: 0x000D1CF8
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[255]);
				}
			}

			// Token: 0x06004D45 RID: 19781 RVA: 0x000D3B30 File Offset: 0x000D1D30
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, out uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[255]);
				}
			}

			// Token: 0x06004D46 RID: 19782 RVA: 0x000D3B54 File Offset: 0x000D1D54
			[CLSCompliant(false)]
			public unsafe static void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] uint* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, @params, GL.EntryPoints[255]);
			}

			// Token: 0x06004D47 RID: 19783 RVA: 0x000D3B6C File Offset: 0x000D1D6C
			public static void InsertEventMarker(int length, string marker)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(marker);
				calli(System.Void(System.Int32,System.IntPtr), length, intPtr, GL.EntryPoints[271]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06004D48 RID: 19784 RVA: 0x000D3B98 File Offset: 0x000D1D98
			[CLSCompliant(false)]
			public static bool IsEnabled(All target, int index)
			{
				return calli(System.Byte(System.Int32,System.UInt32), target, index, GL.EntryPoints[276]);
			}

			// Token: 0x06004D49 RID: 19785 RVA: 0x000D3BAC File Offset: 0x000D1DAC
			[CLSCompliant(false)]
			public static bool IsEnabled(All target, uint index)
			{
				return calli(System.Byte(System.Int32,System.UInt32), target, index, GL.EntryPoints[276]);
			}

			// Token: 0x06004D4A RID: 19786 RVA: 0x000D3BC0 File Offset: 0x000D1DC0
			[CLSCompliant(false)]
			public static bool IsProgramPipeline(int pipeline)
			{
				return calli(System.Byte(System.UInt32), pipeline, GL.EntryPoints[280]);
			}

			// Token: 0x06004D4B RID: 19787 RVA: 0x000D3BD4 File Offset: 0x000D1DD4
			[CLSCompliant(false)]
			public static bool IsProgramPipeline(uint pipeline)
			{
				return calli(System.Byte(System.UInt32), pipeline, GL.EntryPoints[280]);
			}

			// Token: 0x06004D4C RID: 19788 RVA: 0x000D3BE8 File Offset: 0x000D1DE8
			[CLSCompliant(false)]
			public static bool IsQuery(int id)
			{
				return calli(System.Byte(System.UInt32), id, GL.EntryPoints[282]);
			}

			// Token: 0x06004D4D RID: 19789 RVA: 0x000D3BFC File Offset: 0x000D1DFC
			[CLSCompliant(false)]
			public static bool IsQuery(uint id)
			{
				return calli(System.Byte(System.UInt32), id, GL.EntryPoints[282]);
			}

			// Token: 0x06004D4E RID: 19790 RVA: 0x000D3C10 File Offset: 0x000D1E10
			[CLSCompliant(false)]
			public static void LabelObject(All type, int @object, int length, string label)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), type, @object, length, intPtr, GL.EntryPoints[292]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06004D4F RID: 19791 RVA: 0x000D3C40 File Offset: 0x000D1E40
			[CLSCompliant(false)]
			public static void LabelObject(All type, uint @object, int length, string label)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), type, @object, length, intPtr, GL.EntryPoints[292]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06004D50 RID: 19792 RVA: 0x000D3C70 File Offset: 0x000D1E70
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public static IntPtr MapBufferRange(All target, IntPtr offset, IntPtr length, int access)
			{
				return calli(System.IntPtr(System.Int32,System.IntPtr,System.IntPtr,System.UInt32), target, offset, length, access, GL.EntryPoints[297]);
			}

			// Token: 0x06004D51 RID: 19793 RVA: 0x000D3C88 File Offset: 0x000D1E88
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public static IntPtr MapBufferRange(All target, IntPtr offset, IntPtr length, uint access)
			{
				return calli(System.IntPtr(System.Int32,System.IntPtr,System.IntPtr,System.UInt32), target, offset, length, access, GL.EntryPoints[297]);
			}

			// Token: 0x06004D52 RID: 19794 RVA: 0x000D3CA0 File Offset: 0x000D1EA0
			[CLSCompliant(false)]
			public static IntPtr MapBufferRange(BufferTarget target, IntPtr offset, IntPtr length, int access)
			{
				return calli(System.IntPtr(System.Int32,System.IntPtr,System.IntPtr,System.UInt32), target, offset, length, access, GL.EntryPoints[297]);
			}

			// Token: 0x06004D53 RID: 19795 RVA: 0x000D3CB8 File Offset: 0x000D1EB8
			[CLSCompliant(false)]
			public static IntPtr MapBufferRange(BufferTarget target, IntPtr offset, IntPtr length, uint access)
			{
				return calli(System.IntPtr(System.Int32,System.IntPtr,System.IntPtr,System.UInt32), target, offset, length, access, GL.EntryPoints[297]);
			}

			// Token: 0x06004D54 RID: 19796 RVA: 0x000D3CD0 File Offset: 0x000D1ED0
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawArrays(All mode, int[] first, int[] count, int primcount)
			{
				fixed (int* ptr = ref (first != null && first.Length != 0) ? ref first[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, primcount, GL.EntryPoints[299]);
					}
				}
			}

			// Token: 0x06004D55 RID: 19797 RVA: 0x000D3D1C File Offset: 0x000D1F1C
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void MultiDrawArrays(All mode, ref int first, ref int count, int primcount)
			{
				fixed (int* ptr = &first)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, primcount, GL.EntryPoints[299]);
					}
				}
			}

			// Token: 0x06004D56 RID: 19798 RVA: 0x000D3D44 File Offset: 0x000D1F44
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawArrays(All mode, int* first, int* count, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, first, count, primcount, GL.EntryPoints[299]);
			}

			// Token: 0x06004D57 RID: 19799 RVA: 0x000D3D5C File Offset: 0x000D1F5C
			[CLSCompliant(false)]
			public unsafe static void MultiDrawArrays(PrimitiveType mode, int[] first, int[] count, int primcount)
			{
				fixed (int* ptr = ref (first != null && first.Length != 0) ? ref first[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, primcount, GL.EntryPoints[299]);
					}
				}
			}

			// Token: 0x06004D58 RID: 19800 RVA: 0x000D3DA8 File Offset: 0x000D1FA8
			[CLSCompliant(false)]
			public unsafe static void MultiDrawArrays(PrimitiveType mode, ref int first, ref int count, int primcount)
			{
				fixed (int* ptr = &first)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &count)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, ptr2, ptr3, primcount, GL.EntryPoints[299]);
					}
				}
			}

			// Token: 0x06004D59 RID: 19801 RVA: 0x000D3DD0 File Offset: 0x000D1FD0
			[CLSCompliant(false)]
			public unsafe static void MultiDrawArrays(PrimitiveType mode, int* first, int* count, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32*,System.Int32), mode, first, count, primcount, GL.EntryPoints[299]);
			}

			// Token: 0x06004D5A RID: 19802 RVA: 0x000D3DE8 File Offset: 0x000D1FE8
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements(All mode, int[] count, All type, IntPtr indices, int primcount)
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr, type, indices, primcount, GL.EntryPoints[300]);
				}
			}

			// Token: 0x06004D5B RID: 19803 RVA: 0x000D3E20 File Offset: 0x000D2020
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(All mode, int[] count, All type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[300]);
					}
				}
			}

			// Token: 0x06004D5C RID: 19804 RVA: 0x000D3E70 File Offset: 0x000D2070
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void MultiDrawElements<T3>(All mode, int[] count, All type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[300]);
					}
				}
			}

			// Token: 0x06004D5D RID: 19805 RVA: 0x000D3EC4 File Offset: 0x000D20C4
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(All mode, int[] count, All type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[300]);
					}
				}
			}

			// Token: 0x06004D5E RID: 19806 RVA: 0x000D3F18 File Offset: 0x000D2118
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void MultiDrawElements<T3>(All mode, int[] count, All type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = &indices)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[300]);
					}
				}
			}

			// Token: 0x06004D5F RID: 19807 RVA: 0x000D3F54 File Offset: 0x000D2154
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements(All mode, ref int count, All type, IntPtr indices, int primcount)
			{
				fixed (int* ptr = &count)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr, type, indices, primcount, GL.EntryPoints[300]);
				}
			}

			// Token: 0x06004D60 RID: 19808 RVA: 0x000D3F7C File Offset: 0x000D217C
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void MultiDrawElements<T3>(All mode, ref int count, All type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[300]);
					}
				}
			}

			// Token: 0x06004D61 RID: 19809 RVA: 0x000D3FB8 File Offset: 0x000D21B8
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(All mode, ref int count, All type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[300]);
					}
				}
			}

			// Token: 0x06004D62 RID: 19810 RVA: 0x000D3FF8 File Offset: 0x000D21F8
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void MultiDrawElements<T3>(All mode, ref int count, All type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[300]);
					}
				}
			}

			// Token: 0x06004D63 RID: 19811 RVA: 0x000D4038 File Offset: 0x000D2238
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(All mode, ref int count, All type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = &indices)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[300]);
					}
				}
			}

			// Token: 0x06004D64 RID: 19812 RVA: 0x000D4064 File Offset: 0x000D2264
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements(All mode, int* count, All type, IntPtr indices, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, primcount, GL.EntryPoints[300]);
			}

			// Token: 0x06004D65 RID: 19813 RVA: 0x000D407C File Offset: 0x000D227C
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(All mode, int* count, All type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[300]);
				}
			}

			// Token: 0x06004D66 RID: 19814 RVA: 0x000D40B4 File Offset: 0x000D22B4
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void MultiDrawElements<T3>(All mode, int* count, All type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[300]);
				}
			}

			// Token: 0x06004D67 RID: 19815 RVA: 0x000D40F0 File Offset: 0x000D22F0
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void MultiDrawElements<T3>(All mode, int* count, All type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[300]);
				}
			}

			// Token: 0x06004D68 RID: 19816 RVA: 0x000D4130 File Offset: 0x000D2330
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void MultiDrawElements<T3>(All mode, int* count, All type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[300]);
				}
			}

			// Token: 0x06004D69 RID: 19817 RVA: 0x000D4158 File Offset: 0x000D2358
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements(PrimitiveType mode, int[] count, DrawElementsType type, IntPtr indices, int primcount)
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr, type, indices, primcount, GL.EntryPoints[300]);
				}
			}

			// Token: 0x06004D6A RID: 19818 RVA: 0x000D4190 File Offset: 0x000D2390
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[300]);
					}
				}
			}

			// Token: 0x06004D6B RID: 19819 RVA: 0x000D41E0 File Offset: 0x000D23E0
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[300]);
					}
				}
			}

			// Token: 0x06004D6C RID: 19820 RVA: 0x000D4234 File Offset: 0x000D2434
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[300]);
					}
				}
			}

			// Token: 0x06004D6D RID: 19821 RVA: 0x000D4288 File Offset: 0x000D2488
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int[] count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = ref (count != null && count.Length != 0) ? ref count[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = &indices)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[300]);
					}
				}
			}

			// Token: 0x06004D6E RID: 19822 RVA: 0x000D42C4 File Offset: 0x000D24C4
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements(PrimitiveType mode, ref int count, DrawElementsType type, IntPtr indices, int primcount)
			{
				fixed (int* ptr = &count)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr, type, indices, primcount, GL.EntryPoints[300]);
				}
			}

			// Token: 0x06004D6F RID: 19823 RVA: 0x000D42EC File Offset: 0x000D24EC
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[300]);
					}
				}
			}

			// Token: 0x06004D70 RID: 19824 RVA: 0x000D4328 File Offset: 0x000D2528
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[300]);
					}
				}
			}

			// Token: 0x06004D71 RID: 19825 RVA: 0x000D4368 File Offset: 0x000D2568
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[300]);
					}
				}
			}

			// Token: 0x06004D72 RID: 19826 RVA: 0x000D43A8 File Offset: 0x000D25A8
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, ref int count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (int* ptr = &count)
				{
					int* ptr2 = ptr;
					fixed (T3* ptr3 = &indices)
					{
						calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, ptr2, type, ptr3, primcount, GL.EntryPoints[300]);
					}
				}
			}

			// Token: 0x06004D73 RID: 19827 RVA: 0x000D43D4 File Offset: 0x000D25D4
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements(PrimitiveType mode, int* count, DrawElementsType type, IntPtr indices, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, primcount, GL.EntryPoints[300]);
			}

			// Token: 0x06004D74 RID: 19828 RVA: 0x000D43EC File Offset: 0x000D25EC
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[300]);
				}
			}

			// Token: 0x06004D75 RID: 19829 RVA: 0x000D4424 File Offset: 0x000D2624
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[300]);
				}
			}

			// Token: 0x06004D76 RID: 19830 RVA: 0x000D4460 File Offset: 0x000D2660
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[300]);
				}
			}

			// Token: 0x06004D77 RID: 19831 RVA: 0x000D44A0 File Offset: 0x000D26A0
			[CLSCompliant(false)]
			public unsafe static void MultiDrawElements<T3>(PrimitiveType mode, int* count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.Int32*,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[300]);
				}
			}

			// Token: 0x06004D78 RID: 19832 RVA: 0x000D44C8 File Offset: 0x000D26C8
			public static void PatchParameter(All pname, int value)
			{
				calli(System.Void(System.Int32,System.Int32), pname, value, GL.EntryPoints[305]);
			}

			// Token: 0x06004D79 RID: 19833 RVA: 0x000D44DC File Offset: 0x000D26DC
			public static void PopGroupMarker()
			{
				calli(System.Void(), GL.EntryPoints[311]);
			}

			// Token: 0x06004D7A RID: 19834 RVA: 0x000D44F0 File Offset: 0x000D26F0
			public static void PrimitiveBoundingBox(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
			{
				calli(System.Void(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single), minX, minY, minZ, minW, maxX, maxY, maxZ, maxW, GL.EntryPoints[312]);
			}

			// Token: 0x06004D7B RID: 19835 RVA: 0x000D451C File Offset: 0x000D271C
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public static void ProgramParameter(int program, All pname, int value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[316]);
			}

			// Token: 0x06004D7C RID: 19836 RVA: 0x000D4534 File Offset: 0x000D2734
			[CLSCompliant(false)]
			public static void ProgramParameter(int program, ProgramParameterName pname, int value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[316]);
			}

			// Token: 0x06004D7D RID: 19837 RVA: 0x000D454C File Offset: 0x000D274C
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public static void ProgramParameter(uint program, All pname, int value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[316]);
			}

			// Token: 0x06004D7E RID: 19838 RVA: 0x000D4564 File Offset: 0x000D2764
			[CLSCompliant(false)]
			public static void ProgramParameter(uint program, ProgramParameterName pname, int value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), program, pname, value, GL.EntryPoints[316]);
			}

			// Token: 0x06004D7F RID: 19839 RVA: 0x000D457C File Offset: 0x000D277C
			[CLSCompliant(false)]
			public static void ProgramUniform1(int program, int location, float v0)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single), program, location, v0, GL.EntryPoints[317]);
			}

			// Token: 0x06004D80 RID: 19840 RVA: 0x000D4594 File Offset: 0x000D2794
			[CLSCompliant(false)]
			public static void ProgramUniform1(uint program, int location, float v0)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single), program, location, v0, GL.EntryPoints[317]);
			}

			// Token: 0x06004D81 RID: 19841 RVA: 0x000D45AC File Offset: 0x000D27AC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[318]);
				}
			}

			// Token: 0x06004D82 RID: 19842 RVA: 0x000D45E4 File Offset: 0x000D27E4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[318]);
				}
			}

			// Token: 0x06004D83 RID: 19843 RVA: 0x000D4608 File Offset: 0x000D2808
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[318]);
			}

			// Token: 0x06004D84 RID: 19844 RVA: 0x000D4620 File Offset: 0x000D2820
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[318]);
				}
			}

			// Token: 0x06004D85 RID: 19845 RVA: 0x000D4658 File Offset: 0x000D2858
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[318]);
				}
			}

			// Token: 0x06004D86 RID: 19846 RVA: 0x000D467C File Offset: 0x000D287C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[318]);
			}

			// Token: 0x06004D87 RID: 19847 RVA: 0x000D4694 File Offset: 0x000D2894
			[CLSCompliant(false)]
			public static void ProgramUniform1(int program, int location, int v0)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), program, location, v0, GL.EntryPoints[319]);
			}

			// Token: 0x06004D88 RID: 19848 RVA: 0x000D46AC File Offset: 0x000D28AC
			[CLSCompliant(false)]
			public static void ProgramUniform1(uint program, int location, int v0)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32), program, location, v0, GL.EntryPoints[319]);
			}

			// Token: 0x06004D89 RID: 19849 RVA: 0x000D46C4 File Offset: 0x000D28C4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[320]);
				}
			}

			// Token: 0x06004D8A RID: 19850 RVA: 0x000D46FC File Offset: 0x000D28FC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[320]);
				}
			}

			// Token: 0x06004D8B RID: 19851 RVA: 0x000D4720 File Offset: 0x000D2920
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(int program, int location, int count, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[320]);
			}

			// Token: 0x06004D8C RID: 19852 RVA: 0x000D4738 File Offset: 0x000D2938
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[320]);
				}
			}

			// Token: 0x06004D8D RID: 19853 RVA: 0x000D4770 File Offset: 0x000D2970
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[320]);
				}
			}

			// Token: 0x06004D8E RID: 19854 RVA: 0x000D4794 File Offset: 0x000D2994
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[320]);
			}

			// Token: 0x06004D8F RID: 19855 RVA: 0x000D47AC File Offset: 0x000D29AC
			[CLSCompliant(false)]
			public static void ProgramUniform1(uint program, int location, uint v0)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32), program, location, v0, GL.EntryPoints[321]);
			}

			// Token: 0x06004D90 RID: 19856 RVA: 0x000D47C4 File Offset: 0x000D29C4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, uint[] value)
			{
				fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[322]);
				}
			}

			// Token: 0x06004D91 RID: 19857 RVA: 0x000D47FC File Offset: 0x000D29FC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, ref uint value)
			{
				fixed (uint* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[322]);
				}
			}

			// Token: 0x06004D92 RID: 19858 RVA: 0x000D4820 File Offset: 0x000D2A20
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform1(uint program, int location, int count, uint* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, value, GL.EntryPoints[322]);
			}

			// Token: 0x06004D93 RID: 19859 RVA: 0x000D4838 File Offset: 0x000D2A38
			[CLSCompliant(false)]
			public static void ProgramUniform2(int program, int location, float v0, float v1)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single), program, location, v0, v1, GL.EntryPoints[323]);
			}

			// Token: 0x06004D94 RID: 19860 RVA: 0x000D4850 File Offset: 0x000D2A50
			[CLSCompliant(false)]
			public static void ProgramUniform2(uint program, int location, float v0, float v1)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single), program, location, v0, v1, GL.EntryPoints[323]);
			}

			// Token: 0x06004D95 RID: 19861 RVA: 0x000D4868 File Offset: 0x000D2A68
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(int program, int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[324]);
				}
			}

			// Token: 0x06004D96 RID: 19862 RVA: 0x000D48A0 File Offset: 0x000D2AA0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(int program, int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[324]);
				}
			}

			// Token: 0x06004D97 RID: 19863 RVA: 0x000D48C4 File Offset: 0x000D2AC4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(int program, int location, int count, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[324]);
			}

			// Token: 0x06004D98 RID: 19864 RVA: 0x000D48DC File Offset: 0x000D2ADC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[324]);
				}
			}

			// Token: 0x06004D99 RID: 19865 RVA: 0x000D4914 File Offset: 0x000D2B14
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[324]);
				}
			}

			// Token: 0x06004D9A RID: 19866 RVA: 0x000D4938 File Offset: 0x000D2B38
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[324]);
			}

			// Token: 0x06004D9B RID: 19867 RVA: 0x000D4950 File Offset: 0x000D2B50
			[CLSCompliant(false)]
			public static void ProgramUniform2(int program, int location, int v0, int v1)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, GL.EntryPoints[325]);
			}

			// Token: 0x06004D9C RID: 19868 RVA: 0x000D4968 File Offset: 0x000D2B68
			[CLSCompliant(false)]
			public static void ProgramUniform2(uint program, int location, int v0, int v1)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, GL.EntryPoints[325]);
			}

			// Token: 0x06004D9D RID: 19869 RVA: 0x000D4980 File Offset: 0x000D2B80
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(int program, int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[326]);
				}
			}

			// Token: 0x06004D9E RID: 19870 RVA: 0x000D49B8 File Offset: 0x000D2BB8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(int program, int location, int count, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[326]);
			}

			// Token: 0x06004D9F RID: 19871 RVA: 0x000D49D0 File Offset: 0x000D2BD0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[326]);
				}
			}

			// Token: 0x06004DA0 RID: 19872 RVA: 0x000D4A08 File Offset: 0x000D2C08
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[326]);
			}

			// Token: 0x06004DA1 RID: 19873 RVA: 0x000D4A20 File Offset: 0x000D2C20
			[CLSCompliant(false)]
			public static void ProgramUniform2(uint program, int location, uint v0, uint v1)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32), program, location, v0, v1, GL.EntryPoints[327]);
			}

			// Token: 0x06004DA2 RID: 19874 RVA: 0x000D4A38 File Offset: 0x000D2C38
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, uint[] value)
			{
				fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[328]);
				}
			}

			// Token: 0x06004DA3 RID: 19875 RVA: 0x000D4A70 File Offset: 0x000D2C70
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, ref uint value)
			{
				fixed (uint* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[328]);
				}
			}

			// Token: 0x06004DA4 RID: 19876 RVA: 0x000D4A94 File Offset: 0x000D2C94
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform2(uint program, int location, int count, uint* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, value, GL.EntryPoints[328]);
			}

			// Token: 0x06004DA5 RID: 19877 RVA: 0x000D4AAC File Offset: 0x000D2CAC
			[CLSCompliant(false)]
			public static void ProgramUniform3(int program, int location, float v0, float v1, float v2)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single,System.Single), program, location, v0, v1, v2, GL.EntryPoints[329]);
			}

			// Token: 0x06004DA6 RID: 19878 RVA: 0x000D4AC4 File Offset: 0x000D2CC4
			[CLSCompliant(false)]
			public static void ProgramUniform3(uint program, int location, float v0, float v1, float v2)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single,System.Single), program, location, v0, v1, v2, GL.EntryPoints[329]);
			}

			// Token: 0x06004DA7 RID: 19879 RVA: 0x000D4ADC File Offset: 0x000D2CDC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[330]);
				}
			}

			// Token: 0x06004DA8 RID: 19880 RVA: 0x000D4B14 File Offset: 0x000D2D14
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[330]);
				}
			}

			// Token: 0x06004DA9 RID: 19881 RVA: 0x000D4B38 File Offset: 0x000D2D38
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[330]);
			}

			// Token: 0x06004DAA RID: 19882 RVA: 0x000D4B50 File Offset: 0x000D2D50
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[330]);
				}
			}

			// Token: 0x06004DAB RID: 19883 RVA: 0x000D4B88 File Offset: 0x000D2D88
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[330]);
				}
			}

			// Token: 0x06004DAC RID: 19884 RVA: 0x000D4BAC File Offset: 0x000D2DAC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[330]);
			}

			// Token: 0x06004DAD RID: 19885 RVA: 0x000D4BC4 File Offset: 0x000D2DC4
			[CLSCompliant(false)]
			public static void ProgramUniform3(int program, int location, int v0, int v1, int v2)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, v2, GL.EntryPoints[331]);
			}

			// Token: 0x06004DAE RID: 19886 RVA: 0x000D4BDC File Offset: 0x000D2DDC
			[CLSCompliant(false)]
			public static void ProgramUniform3(uint program, int location, int v0, int v1, int v2)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, v2, GL.EntryPoints[331]);
			}

			// Token: 0x06004DAF RID: 19887 RVA: 0x000D4BF4 File Offset: 0x000D2DF4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[332]);
				}
			}

			// Token: 0x06004DB0 RID: 19888 RVA: 0x000D4C2C File Offset: 0x000D2E2C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[332]);
				}
			}

			// Token: 0x06004DB1 RID: 19889 RVA: 0x000D4C50 File Offset: 0x000D2E50
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(int program, int location, int count, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[332]);
			}

			// Token: 0x06004DB2 RID: 19890 RVA: 0x000D4C68 File Offset: 0x000D2E68
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[332]);
				}
			}

			// Token: 0x06004DB3 RID: 19891 RVA: 0x000D4CA0 File Offset: 0x000D2EA0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[332]);
				}
			}

			// Token: 0x06004DB4 RID: 19892 RVA: 0x000D4CC4 File Offset: 0x000D2EC4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[332]);
			}

			// Token: 0x06004DB5 RID: 19893 RVA: 0x000D4CDC File Offset: 0x000D2EDC
			[CLSCompliant(false)]
			public static void ProgramUniform3(uint program, int location, uint v0, uint v1, uint v2)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32), program, location, v0, v1, v2, GL.EntryPoints[333]);
			}

			// Token: 0x06004DB6 RID: 19894 RVA: 0x000D4CF4 File Offset: 0x000D2EF4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, uint[] value)
			{
				fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[334]);
				}
			}

			// Token: 0x06004DB7 RID: 19895 RVA: 0x000D4D2C File Offset: 0x000D2F2C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, ref uint value)
			{
				fixed (uint* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[334]);
				}
			}

			// Token: 0x06004DB8 RID: 19896 RVA: 0x000D4D50 File Offset: 0x000D2F50
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform3(uint program, int location, int count, uint* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, value, GL.EntryPoints[334]);
			}

			// Token: 0x06004DB9 RID: 19897 RVA: 0x000D4D68 File Offset: 0x000D2F68
			[CLSCompliant(false)]
			public static void ProgramUniform4(int program, int location, float v0, float v1, float v2, float v3)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single,System.Single,System.Single), program, location, v0, v1, v2, v3, GL.EntryPoints[335]);
			}

			// Token: 0x06004DBA RID: 19898 RVA: 0x000D4D84 File Offset: 0x000D2F84
			[CLSCompliant(false)]
			public static void ProgramUniform4(uint program, int location, float v0, float v1, float v2, float v3)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Single,System.Single,System.Single,System.Single), program, location, v0, v1, v2, v3, GL.EntryPoints[335]);
			}

			// Token: 0x06004DBB RID: 19899 RVA: 0x000D4DA0 File Offset: 0x000D2FA0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[336]);
				}
			}

			// Token: 0x06004DBC RID: 19900 RVA: 0x000D4DD8 File Offset: 0x000D2FD8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[336]);
				}
			}

			// Token: 0x06004DBD RID: 19901 RVA: 0x000D4DFC File Offset: 0x000D2FFC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[336]);
			}

			// Token: 0x06004DBE RID: 19902 RVA: 0x000D4E14 File Offset: 0x000D3014
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[336]);
				}
			}

			// Token: 0x06004DBF RID: 19903 RVA: 0x000D4E4C File Offset: 0x000D304C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, ptr, GL.EntryPoints[336]);
				}
			}

			// Token: 0x06004DC0 RID: 19904 RVA: 0x000D4E70 File Offset: 0x000D3070
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Single*), program, location, count, value, GL.EntryPoints[336]);
			}

			// Token: 0x06004DC1 RID: 19905 RVA: 0x000D4E88 File Offset: 0x000D3088
			[CLSCompliant(false)]
			public static void ProgramUniform4(int program, int location, int v0, int v1, int v2, int v3)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, v2, v3, GL.EntryPoints[337]);
			}

			// Token: 0x06004DC2 RID: 19906 RVA: 0x000D4EA4 File Offset: 0x000D30A4
			[CLSCompliant(false)]
			public static void ProgramUniform4(uint program, int location, int v0, int v1, int v2, int v3)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), program, location, v0, v1, v2, v3, GL.EntryPoints[337]);
			}

			// Token: 0x06004DC3 RID: 19907 RVA: 0x000D4EC0 File Offset: 0x000D30C0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[338]);
				}
			}

			// Token: 0x06004DC4 RID: 19908 RVA: 0x000D4EF8 File Offset: 0x000D30F8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[338]);
				}
			}

			// Token: 0x06004DC5 RID: 19909 RVA: 0x000D4F1C File Offset: 0x000D311C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(int program, int location, int count, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[338]);
			}

			// Token: 0x06004DC6 RID: 19910 RVA: 0x000D4F34 File Offset: 0x000D3134
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, int[] value)
			{
				fixed (int* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[338]);
				}
			}

			// Token: 0x06004DC7 RID: 19911 RVA: 0x000D4F6C File Offset: 0x000D316C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, ref int value)
			{
				fixed (int* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, ptr, GL.EntryPoints[338]);
				}
			}

			// Token: 0x06004DC8 RID: 19912 RVA: 0x000D4F90 File Offset: 0x000D3190
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, int* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32*), program, location, count, value, GL.EntryPoints[338]);
			}

			// Token: 0x06004DC9 RID: 19913 RVA: 0x000D4FA8 File Offset: 0x000D31A8
			[CLSCompliant(false)]
			public static void ProgramUniform4(uint program, int location, uint v0, uint v1, uint v2, uint v3)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), program, location, v0, v1, v2, v3, GL.EntryPoints[339]);
			}

			// Token: 0x06004DCA RID: 19914 RVA: 0x000D4FC4 File Offset: 0x000D31C4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, uint[] value)
			{
				fixed (uint* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[340]);
				}
			}

			// Token: 0x06004DCB RID: 19915 RVA: 0x000D4FFC File Offset: 0x000D31FC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, ref uint value)
			{
				fixed (uint* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, ptr, GL.EntryPoints[340]);
				}
			}

			// Token: 0x06004DCC RID: 19916 RVA: 0x000D5020 File Offset: 0x000D3220
			[CLSCompliant(false)]
			public unsafe static void ProgramUniform4(uint program, int location, int count, uint* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.UInt32*), program, location, count, value, GL.EntryPoints[340]);
			}

			// Token: 0x06004DCD RID: 19917 RVA: 0x000D5038 File Offset: 0x000D3238
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[341]);
				}
			}

			// Token: 0x06004DCE RID: 19918 RVA: 0x000D5074 File Offset: 0x000D3274
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[341]);
				}
			}

			// Token: 0x06004DCF RID: 19919 RVA: 0x000D509C File Offset: 0x000D329C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[341]);
			}

			// Token: 0x06004DD0 RID: 19920 RVA: 0x000D50B4 File Offset: 0x000D32B4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[341]);
				}
			}

			// Token: 0x06004DD1 RID: 19921 RVA: 0x000D50F0 File Offset: 0x000D32F0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[341]);
				}
			}

			// Token: 0x06004DD2 RID: 19922 RVA: 0x000D5118 File Offset: 0x000D3318
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[341]);
			}

			// Token: 0x06004DD3 RID: 19923 RVA: 0x000D5130 File Offset: 0x000D3330
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[342]);
				}
			}

			// Token: 0x06004DD4 RID: 19924 RVA: 0x000D516C File Offset: 0x000D336C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[342]);
				}
			}

			// Token: 0x06004DD5 RID: 19925 RVA: 0x000D5194 File Offset: 0x000D3394
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[342]);
			}

			// Token: 0x06004DD6 RID: 19926 RVA: 0x000D51AC File Offset: 0x000D33AC
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[342]);
				}
			}

			// Token: 0x06004DD7 RID: 19927 RVA: 0x000D51E8 File Offset: 0x000D33E8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[342]);
				}
			}

			// Token: 0x06004DD8 RID: 19928 RVA: 0x000D5210 File Offset: 0x000D3410
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[342]);
			}

			// Token: 0x06004DD9 RID: 19929 RVA: 0x000D5228 File Offset: 0x000D3428
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[343]);
				}
			}

			// Token: 0x06004DDA RID: 19930 RVA: 0x000D5264 File Offset: 0x000D3464
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[343]);
				}
			}

			// Token: 0x06004DDB RID: 19931 RVA: 0x000D528C File Offset: 0x000D348C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[343]);
			}

			// Token: 0x06004DDC RID: 19932 RVA: 0x000D52A4 File Offset: 0x000D34A4
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[343]);
				}
			}

			// Token: 0x06004DDD RID: 19933 RVA: 0x000D52E0 File Offset: 0x000D34E0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[343]);
				}
			}

			// Token: 0x06004DDE RID: 19934 RVA: 0x000D5308 File Offset: 0x000D3508
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[343]);
			}

			// Token: 0x06004DDF RID: 19935 RVA: 0x000D5320 File Offset: 0x000D3520
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[344]);
				}
			}

			// Token: 0x06004DE0 RID: 19936 RVA: 0x000D535C File Offset: 0x000D355C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[344]);
				}
			}

			// Token: 0x06004DE1 RID: 19937 RVA: 0x000D5384 File Offset: 0x000D3584
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[344]);
			}

			// Token: 0x06004DE2 RID: 19938 RVA: 0x000D539C File Offset: 0x000D359C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[344]);
				}
			}

			// Token: 0x06004DE3 RID: 19939 RVA: 0x000D53D8 File Offset: 0x000D35D8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[344]);
				}
			}

			// Token: 0x06004DE4 RID: 19940 RVA: 0x000D5400 File Offset: 0x000D3600
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[344]);
			}

			// Token: 0x06004DE5 RID: 19941 RVA: 0x000D5418 File Offset: 0x000D3618
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[345]);
				}
			}

			// Token: 0x06004DE6 RID: 19942 RVA: 0x000D5454 File Offset: 0x000D3654
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[345]);
				}
			}

			// Token: 0x06004DE7 RID: 19943 RVA: 0x000D547C File Offset: 0x000D367C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[345]);
			}

			// Token: 0x06004DE8 RID: 19944 RVA: 0x000D5494 File Offset: 0x000D3694
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[345]);
				}
			}

			// Token: 0x06004DE9 RID: 19945 RVA: 0x000D54D0 File Offset: 0x000D36D0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[345]);
				}
			}

			// Token: 0x06004DEA RID: 19946 RVA: 0x000D54F8 File Offset: 0x000D36F8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[345]);
			}

			// Token: 0x06004DEB RID: 19947 RVA: 0x000D5510 File Offset: 0x000D3710
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[346]);
				}
			}

			// Token: 0x06004DEC RID: 19948 RVA: 0x000D554C File Offset: 0x000D374C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[346]);
				}
			}

			// Token: 0x06004DED RID: 19949 RVA: 0x000D5574 File Offset: 0x000D3774
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[346]);
			}

			// Token: 0x06004DEE RID: 19950 RVA: 0x000D558C File Offset: 0x000D378C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[346]);
				}
			}

			// Token: 0x06004DEF RID: 19951 RVA: 0x000D55C8 File Offset: 0x000D37C8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[346]);
				}
			}

			// Token: 0x06004DF0 RID: 19952 RVA: 0x000D55F0 File Offset: 0x000D37F0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[346]);
			}

			// Token: 0x06004DF1 RID: 19953 RVA: 0x000D5608 File Offset: 0x000D3808
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[347]);
				}
			}

			// Token: 0x06004DF2 RID: 19954 RVA: 0x000D5644 File Offset: 0x000D3844
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[347]);
				}
			}

			// Token: 0x06004DF3 RID: 19955 RVA: 0x000D566C File Offset: 0x000D386C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[347]);
			}

			// Token: 0x06004DF4 RID: 19956 RVA: 0x000D5684 File Offset: 0x000D3884
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[347]);
				}
			}

			// Token: 0x06004DF5 RID: 19957 RVA: 0x000D56C0 File Offset: 0x000D38C0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[347]);
				}
			}

			// Token: 0x06004DF6 RID: 19958 RVA: 0x000D56E8 File Offset: 0x000D38E8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[347]);
			}

			// Token: 0x06004DF7 RID: 19959 RVA: 0x000D5700 File Offset: 0x000D3900
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[348]);
				}
			}

			// Token: 0x06004DF8 RID: 19960 RVA: 0x000D573C File Offset: 0x000D393C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[348]);
				}
			}

			// Token: 0x06004DF9 RID: 19961 RVA: 0x000D5764 File Offset: 0x000D3964
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[348]);
			}

			// Token: 0x06004DFA RID: 19962 RVA: 0x000D577C File Offset: 0x000D397C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[348]);
				}
			}

			// Token: 0x06004DFB RID: 19963 RVA: 0x000D57B8 File Offset: 0x000D39B8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[348]);
				}
			}

			// Token: 0x06004DFC RID: 19964 RVA: 0x000D57E0 File Offset: 0x000D39E0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[348]);
			}

			// Token: 0x06004DFD RID: 19965 RVA: 0x000D57F8 File Offset: 0x000D39F8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[349]);
				}
			}

			// Token: 0x06004DFE RID: 19966 RVA: 0x000D5834 File Offset: 0x000D3A34
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[349]);
				}
			}

			// Token: 0x06004DFF RID: 19967 RVA: 0x000D585C File Offset: 0x000D3A5C
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[349]);
			}

			// Token: 0x06004E00 RID: 19968 RVA: 0x000D5874 File Offset: 0x000D3A74
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[349]);
				}
			}

			// Token: 0x06004E01 RID: 19969 RVA: 0x000D58B0 File Offset: 0x000D3AB0
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, ptr, GL.EntryPoints[349]);
				}
			}

			// Token: 0x06004E02 RID: 19970 RVA: 0x000D58D8 File Offset: 0x000D3AD8
			[CLSCompliant(false)]
			public unsafe static void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single*), program, location, count, transpose, value, GL.EntryPoints[349]);
			}

			// Token: 0x06004E03 RID: 19971 RVA: 0x000D58F0 File Offset: 0x000D3AF0
			public static void PushGroupMarker(int length, string marker)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(marker);
				calli(System.Void(System.Int32,System.IntPtr), length, intPtr, GL.EntryPoints[352]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06004E04 RID: 19972 RVA: 0x000D591C File Offset: 0x000D3B1C
			[CLSCompliant(false)]
			public static void QueryCounter(int id, All target)
			{
				calli(System.Void(System.UInt32,System.Int32), id, target, GL.EntryPoints[353]);
			}

			// Token: 0x06004E05 RID: 19973 RVA: 0x000D5930 File Offset: 0x000D3B30
			[CLSCompliant(false)]
			public static void QueryCounter(uint id, All target)
			{
				calli(System.Void(System.UInt32,System.Int32), id, target, GL.EntryPoints[353]);
			}

			// Token: 0x06004E06 RID: 19974 RVA: 0x000D5944 File Offset: 0x000D3B44
			public static void ReadBufferIndexed(All src, int index)
			{
				calli(System.Void(System.Int32,System.Int32), src, index, GL.EntryPoints[355]);
			}

			// Token: 0x06004E07 RID: 19975 RVA: 0x000D5958 File Offset: 0x000D3B58
			public static void ReadnPixels(int x, int y, int width, int height, All format, All type, int bufSize, [Out] IntPtr data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, bufSize, data, GL.EntryPoints[357]);
			}

			// Token: 0x06004E08 RID: 19976 RVA: 0x000D5984 File Offset: 0x000D3B84
			[CLSCompliant(false)]
			public unsafe static void ReadnPixels<T7>(int x, int y, int width, int height, All format, All type, int bufSize, [In] [Out] T7[] data) where T7 : struct
			{
				fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, bufSize, ptr, GL.EntryPoints[357]);
				}
			}

			// Token: 0x06004E09 RID: 19977 RVA: 0x000D59C4 File Offset: 0x000D3BC4
			[CLSCompliant(false)]
			public unsafe static void ReadnPixels<T7>(int x, int y, int width, int height, All format, All type, int bufSize, [In] [Out] T7[,] data) where T7 : struct
			{
				fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, bufSize, ptr, GL.EntryPoints[357]);
				}
			}

			// Token: 0x06004E0A RID: 19978 RVA: 0x000D5A08 File Offset: 0x000D3C08
			[CLSCompliant(false)]
			public unsafe static void ReadnPixels<T7>(int x, int y, int width, int height, All format, All type, int bufSize, [In] [Out] T7[,,] data) where T7 : struct
			{
				fixed (T7* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, bufSize, ptr, GL.EntryPoints[357]);
				}
			}

			// Token: 0x06004E0B RID: 19979 RVA: 0x000D5A50 File Offset: 0x000D3C50
			public unsafe static void ReadnPixels<T7>(int x, int y, int width, int height, All format, All type, int bufSize, [In] [Out] ref T7 data) where T7 : struct
			{
				fixed (T7* ptr = &data)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), x, y, width, height, format, type, bufSize, ptr, GL.EntryPoints[357]);
				}
			}

			// Token: 0x06004E0C RID: 19980 RVA: 0x000D5A7C File Offset: 0x000D3C7C
			[Obsolete("Use strongly-typed overload instead")]
			public static void RenderbufferStorageMultisample(All target, int samples, All internalformat, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, samples, internalformat, width, height, GL.EntryPoints[364]);
			}

			// Token: 0x06004E0D RID: 19981 RVA: 0x000D5A94 File Offset: 0x000D3C94
			public static void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, RenderbufferInternalFormat internalformat, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, samples, internalformat, width, height, GL.EntryPoints[364]);
			}

			// Token: 0x06004E0E RID: 19982 RVA: 0x000D5AAC File Offset: 0x000D3CAC
			[CLSCompliant(false)]
			public unsafe static void SamplerParameterI(int sampler, All pname, int[] param)
			{
				fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[373]);
				}
			}

			// Token: 0x06004E0F RID: 19983 RVA: 0x000D5AE4 File Offset: 0x000D3CE4
			[CLSCompliant(false)]
			public unsafe static void SamplerParameterI(int sampler, All pname, ref int param)
			{
				fixed (int* ptr = &param)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[373]);
				}
			}

			// Token: 0x06004E10 RID: 19984 RVA: 0x000D5B08 File Offset: 0x000D3D08
			[CLSCompliant(false)]
			public unsafe static void SamplerParameterI(int sampler, All pname, int* param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[373]);
			}

			// Token: 0x06004E11 RID: 19985 RVA: 0x000D5B20 File Offset: 0x000D3D20
			[CLSCompliant(false)]
			public unsafe static void SamplerParameterI(uint sampler, All pname, int[] param)
			{
				fixed (int* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[373]);
				}
			}

			// Token: 0x06004E12 RID: 19986 RVA: 0x000D5B58 File Offset: 0x000D3D58
			[CLSCompliant(false)]
			public unsafe static void SamplerParameterI(uint sampler, All pname, ref int param)
			{
				fixed (int* ptr = &param)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, ptr, GL.EntryPoints[373]);
				}
			}

			// Token: 0x06004E13 RID: 19987 RVA: 0x000D5B7C File Offset: 0x000D3D7C
			[CLSCompliant(false)]
			public unsafe static void SamplerParameterI(uint sampler, All pname, int* param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), sampler, pname, param, GL.EntryPoints[373]);
			}

			// Token: 0x06004E14 RID: 19988 RVA: 0x000D5B94 File Offset: 0x000D3D94
			[CLSCompliant(false)]
			public unsafe static void SamplerParameterI(uint sampler, All pname, uint[] param)
			{
				fixed (uint* ptr = ref (param != null && param.Length != 0) ? ref param[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, ptr, GL.EntryPoints[374]);
				}
			}

			// Token: 0x06004E15 RID: 19989 RVA: 0x000D5BCC File Offset: 0x000D3DCC
			[CLSCompliant(false)]
			public unsafe static void SamplerParameterI(uint sampler, All pname, ref uint param)
			{
				fixed (uint* ptr = &param)
				{
					calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, ptr, GL.EntryPoints[374]);
				}
			}

			// Token: 0x06004E16 RID: 19990 RVA: 0x000D5BF0 File Offset: 0x000D3DF0
			[CLSCompliant(false)]
			public unsafe static void SamplerParameterI(uint sampler, All pname, uint* param)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32*), sampler, pname, param, GL.EntryPoints[374]);
			}

			// Token: 0x06004E17 RID: 19991 RVA: 0x000D5C08 File Offset: 0x000D3E08
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public static void TexBuffer(All target, All internalformat, int buffer)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32), target, internalformat, buffer, GL.EntryPoints[389]);
			}

			// Token: 0x06004E18 RID: 19992 RVA: 0x000D5C20 File Offset: 0x000D3E20
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public static void TexBuffer(All target, All internalformat, uint buffer)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32), target, internalformat, buffer, GL.EntryPoints[389]);
			}

			// Token: 0x06004E19 RID: 19993 RVA: 0x000D5C38 File Offset: 0x000D3E38
			[CLSCompliant(false)]
			public static void TexBuffer(TextureTarget target, All internalformat, int buffer)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32), target, internalformat, buffer, GL.EntryPoints[389]);
			}

			// Token: 0x06004E1A RID: 19994 RVA: 0x000D5C50 File Offset: 0x000D3E50
			[CLSCompliant(false)]
			public static void TexBuffer(TextureTarget target, All internalformat, uint buffer)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32), target, internalformat, buffer, GL.EntryPoints[389]);
			}

			// Token: 0x06004E1B RID: 19995 RVA: 0x000D5C68 File Offset: 0x000D3E68
			[CLSCompliant(false)]
			public static void TexBufferRange(All target, All internalformat, int buffer, IntPtr offset, IntPtr size)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.IntPtr,System.IntPtr), target, internalformat, buffer, offset, size, GL.EntryPoints[390]);
			}

			// Token: 0x06004E1C RID: 19996 RVA: 0x000D5C80 File Offset: 0x000D3E80
			[CLSCompliant(false)]
			public static void TexBufferRange(All target, All internalformat, uint buffer, IntPtr offset, IntPtr size)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.IntPtr,System.IntPtr), target, internalformat, buffer, offset, size, GL.EntryPoints[390]);
			}

			// Token: 0x06004E1D RID: 19997 RVA: 0x000D5C98 File Offset: 0x000D3E98
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TexParameterI(All target, All pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[397]);
				}
			}

			// Token: 0x06004E1E RID: 19998 RVA: 0x000D5CD0 File Offset: 0x000D3ED0
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void TexParameterI(All target, All pname, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[397]);
				}
			}

			// Token: 0x06004E1F RID: 19999 RVA: 0x000D5CF4 File Offset: 0x000D3EF4
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TexParameterI(All target, All pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[397]);
			}

			// Token: 0x06004E20 RID: 20000 RVA: 0x000D5D0C File Offset: 0x000D3F0C
			[CLSCompliant(false)]
			public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[397]);
				}
			}

			// Token: 0x06004E21 RID: 20001 RVA: 0x000D5D44 File Offset: 0x000D3F44
			[CLSCompliant(false)]
			public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, ref int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, ptr, GL.EntryPoints[397]);
				}
			}

			// Token: 0x06004E22 RID: 20002 RVA: 0x000D5D68 File Offset: 0x000D3F68
			[CLSCompliant(false)]
			public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, int* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32*), target, pname, @params, GL.EntryPoints[397]);
			}

			// Token: 0x06004E23 RID: 20003 RVA: 0x000D5D80 File Offset: 0x000D3F80
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TexParameterI(All target, All pname, uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[398]);
				}
			}

			// Token: 0x06004E24 RID: 20004 RVA: 0x000D5DB8 File Offset: 0x000D3FB8
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TexParameterI(All target, All pname, ref uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[398]);
				}
			}

			// Token: 0x06004E25 RID: 20005 RVA: 0x000D5DDC File Offset: 0x000D3FDC
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void TexParameterI(All target, All pname, uint* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, @params, GL.EntryPoints[398]);
			}

			// Token: 0x06004E26 RID: 20006 RVA: 0x000D5DF4 File Offset: 0x000D3FF4
			[CLSCompliant(false)]
			public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, uint[] @params)
			{
				fixed (uint* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[398]);
				}
			}

			// Token: 0x06004E27 RID: 20007 RVA: 0x000D5E2C File Offset: 0x000D402C
			[CLSCompliant(false)]
			public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, ref uint @params)
			{
				fixed (uint* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, ptr, GL.EntryPoints[398]);
				}
			}

			// Token: 0x06004E28 RID: 20008 RVA: 0x000D5E50 File Offset: 0x000D4050
			[CLSCompliant(false)]
			public unsafe static void TexParameterI(TextureTarget target, TextureParameterName pname, uint* @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.UInt32*), target, pname, @params, GL.EntryPoints[398]);
			}

			// Token: 0x06004E29 RID: 20009 RVA: 0x000D5E68 File Offset: 0x000D4068
			public static void TexStorage1D(All target, int levels, All internalformat, int width)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), target, levels, internalformat, width, GL.EntryPoints[400]);
			}

			// Token: 0x06004E2A RID: 20010 RVA: 0x000D5E80 File Offset: 0x000D4080
			[Obsolete("Use strongly-typed overload instead")]
			public static void TexStorage2D(All target, int levels, All internalformat, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, levels, internalformat, width, height, GL.EntryPoints[402]);
			}

			// Token: 0x06004E2B RID: 20011 RVA: 0x000D5E98 File Offset: 0x000D4098
			public static void TexStorage2D(TextureTarget2d target, int levels, SizedInternalFormat internalformat, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, levels, internalformat, width, height, GL.EntryPoints[402]);
			}

			// Token: 0x06004E2C RID: 20012 RVA: 0x000D5EB0 File Offset: 0x000D40B0
			[Obsolete("Use strongly-typed overload instead")]
			public static void TexStorage3D(All target, int levels, All internalformat, int width, int height, int depth)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, levels, internalformat, width, height, depth, GL.EntryPoints[404]);
			}

			// Token: 0x06004E2D RID: 20013 RVA: 0x000D5ECC File Offset: 0x000D40CC
			public static void TexStorage3D(TextureTarget3d target, int levels, SizedInternalFormat internalformat, int width, int height, int depth)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, levels, internalformat, width, height, depth, GL.EntryPoints[404]);
			}

			// Token: 0x06004E2E RID: 20014 RVA: 0x000D5EE8 File Offset: 0x000D40E8
			[CLSCompliant(false)]
			public static void TextureStorage1D(int texture, All target, int levels, All internalformat, int width)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, levels, internalformat, width, GL.EntryPoints[409]);
			}

			// Token: 0x06004E2F RID: 20015 RVA: 0x000D5F00 File Offset: 0x000D4100
			[CLSCompliant(false)]
			public static void TextureStorage1D(uint texture, All target, int levels, All internalformat, int width)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, levels, internalformat, width, GL.EntryPoints[409]);
			}

			// Token: 0x06004E30 RID: 20016 RVA: 0x000D5F18 File Offset: 0x000D4118
			[CLSCompliant(false)]
			public static void TextureStorage2D(int texture, All target, int levels, All internalformat, int width, int height)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, levels, internalformat, width, height, GL.EntryPoints[410]);
			}

			// Token: 0x06004E31 RID: 20017 RVA: 0x000D5F34 File Offset: 0x000D4134
			[CLSCompliant(false)]
			public static void TextureStorage2D(uint texture, All target, int levels, All internalformat, int width, int height)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, levels, internalformat, width, height, GL.EntryPoints[410]);
			}

			// Token: 0x06004E32 RID: 20018 RVA: 0x000D5F50 File Offset: 0x000D4150
			[CLSCompliant(false)]
			public static void TextureStorage3D(int texture, All target, int levels, All internalformat, int width, int height, int depth)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, levels, internalformat, width, height, depth, GL.EntryPoints[411]);
			}

			// Token: 0x06004E33 RID: 20019 RVA: 0x000D5F78 File Offset: 0x000D4178
			[CLSCompliant(false)]
			public static void TextureStorage3D(uint texture, All target, int levels, All internalformat, int width, int height, int depth)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), texture, target, levels, internalformat, width, height, depth, GL.EntryPoints[411]);
			}

			// Token: 0x06004E34 RID: 20020 RVA: 0x000D5FA0 File Offset: 0x000D41A0
			[CLSCompliant(false)]
			public static void TextureView(int texture, All target, int origtexture, All internalformat, int minlevel, int numlevels, int minlayer, int numlayers)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers, GL.EntryPoints[412]);
			}

			// Token: 0x06004E35 RID: 20021 RVA: 0x000D5FCC File Offset: 0x000D41CC
			[CLSCompliant(false)]
			public static void TextureView(uint texture, All target, uint origtexture, All internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
			{
				calli(System.Void(System.UInt32,System.Int32,System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers, GL.EntryPoints[412]);
			}

			// Token: 0x06004E36 RID: 20022 RVA: 0x000D5FF8 File Offset: 0x000D41F8
			[CLSCompliant(false)]
			public static void UseProgramStages(int pipeline, int stages, int program)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32), pipeline, stages, program, GL.EntryPoints[457]);
			}

			// Token: 0x06004E37 RID: 20023 RVA: 0x000D6010 File Offset: 0x000D4210
			[CLSCompliant(false)]
			public static void UseProgramStages(uint pipeline, uint stages, uint program)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32), pipeline, stages, program, GL.EntryPoints[457]);
			}

			// Token: 0x06004E38 RID: 20024 RVA: 0x000D6028 File Offset: 0x000D4228
			[CLSCompliant(false)]
			public static void UseShaderProgram(All type, int program)
			{
				calli(System.Void(System.Int32,System.UInt32), type, program, GL.EntryPoints[458]);
			}

			// Token: 0x06004E39 RID: 20025 RVA: 0x000D603C File Offset: 0x000D423C
			[CLSCompliant(false)]
			public static void UseShaderProgram(All type, uint program)
			{
				calli(System.Void(System.Int32,System.UInt32), type, program, GL.EntryPoints[458]);
			}

			// Token: 0x06004E3A RID: 20026 RVA: 0x000D6050 File Offset: 0x000D4250
			[CLSCompliant(false)]
			public static void ValidateProgramPipeline(int pipeline)
			{
				calli(System.Void(System.UInt32), pipeline, GL.EntryPoints[460]);
			}

			// Token: 0x06004E3B RID: 20027 RVA: 0x000D6064 File Offset: 0x000D4264
			[CLSCompliant(false)]
			public static void ValidateProgramPipeline(uint pipeline)
			{
				calli(System.Void(System.UInt32), pipeline, GL.EntryPoints[460]);
			}

			// Token: 0x06004E3C RID: 20028 RVA: 0x000D6078 File Offset: 0x000D4278
			[CLSCompliant(false)]
			public static void VertexAttribDivisor(int index, int divisor)
			{
				calli(System.Void(System.UInt32,System.UInt32), index, divisor, GL.EntryPoints[471]);
			}

			// Token: 0x06004E3D RID: 20029 RVA: 0x000D608C File Offset: 0x000D428C
			[CLSCompliant(false)]
			public static void VertexAttribDivisor(uint index, uint divisor)
			{
				calli(System.Void(System.UInt32,System.UInt32), index, divisor, GL.EntryPoints[471]);
			}
		}

		// Token: 0x020005ED RID: 1517
		public static class Img
		{
			// Token: 0x06004E3E RID: 20030 RVA: 0x000D60A0 File Offset: 0x000D42A0
			[CLSCompliant(false)]
			public static void FramebufferTexture2DMultisample(All target, All attachment, All textarget, int texture, int level, int samples)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, textarget, texture, level, samples, GL.EntryPoints[158]);
			}

			// Token: 0x06004E3F RID: 20031 RVA: 0x000D60BC File Offset: 0x000D42BC
			[CLSCompliant(false)]
			public static void FramebufferTexture2DMultisample(All target, All attachment, All textarget, uint texture, int level, int samples)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, textarget, texture, level, samples, GL.EntryPoints[158]);
			}

			// Token: 0x06004E40 RID: 20032 RVA: 0x000D60D8 File Offset: 0x000D42D8
			[Obsolete("Use strongly-typed overload instead")]
			public static void RenderbufferStorageMultisample(All target, int samples, All internalformat, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, samples, internalformat, width, height, GL.EntryPoints[365]);
			}

			// Token: 0x06004E41 RID: 20033 RVA: 0x000D60F0 File Offset: 0x000D42F0
			public static void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, RenderbufferInternalFormat internalformat, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, samples, internalformat, width, height, GL.EntryPoints[365]);
			}
		}

		// Token: 0x020005EE RID: 1518
		public static class Intel
		{
			// Token: 0x06004E42 RID: 20034 RVA: 0x000D6108 File Offset: 0x000D4308
			[CLSCompliant(false)]
			public static void BeginPerfQuery(int queryHandle)
			{
				calli(System.Void(System.UInt32), queryHandle, GL.EntryPoints[6]);
			}

			// Token: 0x06004E43 RID: 20035 RVA: 0x000D6118 File Offset: 0x000D4318
			[CLSCompliant(false)]
			public static void BeginPerfQuery(uint queryHandle)
			{
				calli(System.Void(System.UInt32), queryHandle, GL.EntryPoints[6]);
			}

			// Token: 0x06004E44 RID: 20036 RVA: 0x000D6128 File Offset: 0x000D4328
			[CLSCompliant(false)]
			public unsafe static void CreatePerfQuery(int queryId, [Out] int[] queryHandle)
			{
				fixed (int* ptr = ref (queryHandle != null && queryHandle.Length != 0) ? ref queryHandle[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32*), queryId, ptr, GL.EntryPoints[70]);
				}
			}

			// Token: 0x06004E45 RID: 20037 RVA: 0x000D615C File Offset: 0x000D435C
			[CLSCompliant(false)]
			public unsafe static void CreatePerfQuery(int queryId, out int queryHandle)
			{
				fixed (int* ptr = &queryHandle)
				{
					calli(System.Void(System.UInt32,System.UInt32*), queryId, ptr, GL.EntryPoints[70]);
				}
			}

			// Token: 0x06004E46 RID: 20038 RVA: 0x000D617C File Offset: 0x000D437C
			[CLSCompliant(false)]
			public unsafe static void CreatePerfQuery(int queryId, [Out] int* queryHandle)
			{
				calli(System.Void(System.UInt32,System.UInt32*), queryId, queryHandle, GL.EntryPoints[70]);
			}

			// Token: 0x06004E47 RID: 20039 RVA: 0x000D6190 File Offset: 0x000D4390
			[CLSCompliant(false)]
			public unsafe static void CreatePerfQuery(uint queryId, [Out] uint[] queryHandle)
			{
				fixed (uint* ptr = ref (queryHandle != null && queryHandle.Length != 0) ? ref queryHandle[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32*), queryId, ptr, GL.EntryPoints[70]);
				}
			}

			// Token: 0x06004E48 RID: 20040 RVA: 0x000D61C4 File Offset: 0x000D43C4
			[CLSCompliant(false)]
			public unsafe static void CreatePerfQuery(uint queryId, out uint queryHandle)
			{
				fixed (uint* ptr = &queryHandle)
				{
					calli(System.Void(System.UInt32,System.UInt32*), queryId, ptr, GL.EntryPoints[70]);
				}
			}

			// Token: 0x06004E49 RID: 20041 RVA: 0x000D61E4 File Offset: 0x000D43E4
			[CLSCompliant(false)]
			public unsafe static void CreatePerfQuery(uint queryId, [Out] uint* queryHandle)
			{
				calli(System.Void(System.UInt32,System.UInt32*), queryId, queryHandle, GL.EntryPoints[70]);
			}

			// Token: 0x06004E4A RID: 20042 RVA: 0x000D61F8 File Offset: 0x000D43F8
			[CLSCompliant(false)]
			public static void DeletePerfQuery(int queryHandle)
			{
				calli(System.Void(System.UInt32), queryHandle, GL.EntryPoints[86]);
			}

			// Token: 0x06004E4B RID: 20043 RVA: 0x000D6208 File Offset: 0x000D4408
			[CLSCompliant(false)]
			public static void DeletePerfQuery(uint queryHandle)
			{
				calli(System.Void(System.UInt32), queryHandle, GL.EntryPoints[86]);
			}

			// Token: 0x06004E4C RID: 20044 RVA: 0x000D6218 File Offset: 0x000D4418
			[CLSCompliant(false)]
			public static void EndPerfQuery(int queryHandle)
			{
				calli(System.Void(System.UInt32), queryHandle, GL.EntryPoints[131]);
			}

			// Token: 0x06004E4D RID: 20045 RVA: 0x000D622C File Offset: 0x000D442C
			[CLSCompliant(false)]
			public static void EndPerfQuery(uint queryHandle)
			{
				calli(System.Void(System.UInt32), queryHandle, GL.EntryPoints[131]);
			}

			// Token: 0x06004E4E RID: 20046 RVA: 0x000D6240 File Offset: 0x000D4440
			[CLSCompliant(false)]
			public static int GetFirstPerfQueryI()
			{
				int result;
				calli(System.Void(System.UInt32*), ref result, GL.EntryPoints[195]);
				return result;
			}

			// Token: 0x06004E4F RID: 20047 RVA: 0x000D6260 File Offset: 0x000D4460
			[CLSCompliant(false)]
			public unsafe static void GetFirstPerfQueryI([Out] int[] queryId)
			{
				fixed (int* ptr = ref (queryId != null && queryId.Length != 0) ? ref queryId[0] : ref *null)
				{
					calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[195]);
				}
			}

			// Token: 0x06004E50 RID: 20048 RVA: 0x000D6294 File Offset: 0x000D4494
			[CLSCompliant(false)]
			public unsafe static void GetFirstPerfQueryI(out int queryId)
			{
				fixed (int* ptr = &queryId)
				{
					calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[195]);
				}
			}

			// Token: 0x06004E51 RID: 20049 RVA: 0x000D62B8 File Offset: 0x000D44B8
			[CLSCompliant(false)]
			public unsafe static void GetFirstPerfQueryI([Out] int* queryId)
			{
				calli(System.Void(System.UInt32*), queryId, GL.EntryPoints[195]);
			}

			// Token: 0x06004E52 RID: 20050 RVA: 0x000D62CC File Offset: 0x000D44CC
			[CLSCompliant(false)]
			public unsafe static void GetFirstPerfQueryI([Out] uint[] queryId)
			{
				fixed (uint* ptr = ref (queryId != null && queryId.Length != 0) ? ref queryId[0] : ref *null)
				{
					calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[195]);
				}
			}

			// Token: 0x06004E53 RID: 20051 RVA: 0x000D6300 File Offset: 0x000D4500
			[CLSCompliant(false)]
			public unsafe static void GetFirstPerfQueryI(out uint queryId)
			{
				fixed (uint* ptr = &queryId)
				{
					calli(System.Void(System.UInt32*), ptr, GL.EntryPoints[195]);
				}
			}

			// Token: 0x06004E54 RID: 20052 RVA: 0x000D6324 File Offset: 0x000D4524
			[CLSCompliant(false)]
			public unsafe static void GetFirstPerfQueryI([Out] uint* queryId)
			{
				calli(System.Void(System.UInt32*), queryId, GL.EntryPoints[195]);
			}

			// Token: 0x06004E55 RID: 20053 RVA: 0x000D6338 File Offset: 0x000D4538
			[CLSCompliant(false)]
			public static int GetNextPerfQueryI(int queryId)
			{
				int result;
				calli(System.Void(System.UInt32,System.UInt32*), queryId, ref result, GL.EntryPoints[207]);
				return result;
			}

			// Token: 0x06004E56 RID: 20054 RVA: 0x000D635C File Offset: 0x000D455C
			[CLSCompliant(false)]
			public static int GetNextPerfQueryI(uint queryId)
			{
				int result;
				calli(System.Void(System.UInt32,System.UInt32*), queryId, ref result, GL.EntryPoints[207]);
				return result;
			}

			// Token: 0x06004E57 RID: 20055 RVA: 0x000D6380 File Offset: 0x000D4580
			[CLSCompliant(false)]
			public unsafe static void GetNextPerfQueryI(int queryId, [Out] int[] nextQueryId)
			{
				fixed (int* ptr = ref (nextQueryId != null && nextQueryId.Length != 0) ? ref nextQueryId[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32*), queryId, ptr, GL.EntryPoints[207]);
				}
			}

			// Token: 0x06004E58 RID: 20056 RVA: 0x000D63B4 File Offset: 0x000D45B4
			[CLSCompliant(false)]
			public unsafe static void GetNextPerfQueryI(int queryId, out int nextQueryId)
			{
				fixed (int* ptr = &nextQueryId)
				{
					calli(System.Void(System.UInt32,System.UInt32*), queryId, ptr, GL.EntryPoints[207]);
				}
			}

			// Token: 0x06004E59 RID: 20057 RVA: 0x000D63D8 File Offset: 0x000D45D8
			[CLSCompliant(false)]
			public unsafe static void GetNextPerfQueryI(int queryId, [Out] int* nextQueryId)
			{
				calli(System.Void(System.UInt32,System.UInt32*), queryId, nextQueryId, GL.EntryPoints[207]);
			}

			// Token: 0x06004E5A RID: 20058 RVA: 0x000D63EC File Offset: 0x000D45EC
			[CLSCompliant(false)]
			public unsafe static void GetNextPerfQueryI(uint queryId, [Out] uint[] nextQueryId)
			{
				fixed (uint* ptr = ref (nextQueryId != null && nextQueryId.Length != 0) ? ref nextQueryId[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32*), queryId, ptr, GL.EntryPoints[207]);
				}
			}

			// Token: 0x06004E5B RID: 20059 RVA: 0x000D6420 File Offset: 0x000D4620
			[CLSCompliant(false)]
			public unsafe static void GetNextPerfQueryI(uint queryId, out uint nextQueryId)
			{
				fixed (uint* ptr = &nextQueryId)
				{
					calli(System.Void(System.UInt32,System.UInt32*), queryId, ptr, GL.EntryPoints[207]);
				}
			}

			// Token: 0x06004E5C RID: 20060 RVA: 0x000D6444 File Offset: 0x000D4644
			[CLSCompliant(false)]
			public unsafe static void GetNextPerfQueryI(uint queryId, [Out] uint* nextQueryId)
			{
				calli(System.Void(System.UInt32,System.UInt32*), queryId, nextQueryId, GL.EntryPoints[207]);
			}

			// Token: 0x06004E5D RID: 20061 RVA: 0x000D6458 File Offset: 0x000D4658
			[CLSCompliant(false)]
			public unsafe static void GetPerfCounterInfo(int queryId, int counterId, int counterNameLength, [Out] StringBuilder counterName, int counterDescLength, [Out] StringBuilder counterDesc, [Out] int[] counterOffset, [Out] int[] counterDataSize, [Out] int[] counterTypeEnum, [Out] int[] counterDataTypeEnum, [Out] long[] rawCounterMaxValue)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterName.Capacity);
				IntPtr intPtr2 = intPtr;
				IntPtr intPtr3 = Marshal.AllocHGlobal((IntPtr)counterDesc.Capacity);
				IntPtr intPtr4 = intPtr3;
				fixed (int* ptr = ref (counterOffset != null && counterOffset.Length != 0) ? ref counterOffset[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (counterDataSize != null && counterDataSize.Length != 0) ? ref counterDataSize[0] : ref *null)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = ref (counterTypeEnum != null && counterTypeEnum.Length != 0) ? ref counterTypeEnum[0] : ref *null)
						{
							int* ptr6 = ptr5;
							fixed (int* ptr7 = ref (counterDataTypeEnum != null && counterDataTypeEnum.Length != 0) ? ref counterDataTypeEnum[0] : ref *null)
							{
								int* ptr8 = ptr7;
								fixed (long* ptr9 = ref (rawCounterMaxValue != null && rawCounterMaxValue.Length != 0) ? ref rawCounterMaxValue[0] : ref *null)
								{
									calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt64*), queryId, counterId, counterNameLength, intPtr2, counterDescLength, intPtr4, ptr2, ptr4, ptr6, ptr8, ptr9, GL.EntryPoints[215]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, counterName);
									Marshal.FreeHGlobal(intPtr);
									BindingsBase.MarshalPtrToStringBuilder(intPtr3, counterDesc);
									Marshal.FreeHGlobal(intPtr3);
								}
							}
						}
					}
				}
			}

			// Token: 0x06004E5E RID: 20062 RVA: 0x000D6534 File Offset: 0x000D4734
			[CLSCompliant(false)]
			public unsafe static void GetPerfCounterInfo(int queryId, int counterId, int counterNameLength, [Out] StringBuilder counterName, int counterDescLength, [Out] StringBuilder counterDesc, out int counterOffset, out int counterDataSize, out int counterTypeEnum, out int counterDataTypeEnum, out long rawCounterMaxValue)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterName.Capacity);
				IntPtr intPtr2 = intPtr;
				IntPtr intPtr3 = Marshal.AllocHGlobal((IntPtr)counterDesc.Capacity);
				IntPtr intPtr4 = intPtr3;
				fixed (int* ptr = &counterOffset)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &counterDataSize)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = &counterTypeEnum)
						{
							int* ptr6 = ptr5;
							fixed (int* ptr7 = &counterDataTypeEnum)
							{
								int* ptr8 = ptr7;
								fixed (long* ptr9 = &rawCounterMaxValue)
								{
									calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt64*), queryId, counterId, counterNameLength, intPtr2, counterDescLength, intPtr4, ptr2, ptr4, ptr6, ptr8, ptr9, GL.EntryPoints[215]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, counterName);
									Marshal.FreeHGlobal(intPtr);
									BindingsBase.MarshalPtrToStringBuilder(intPtr3, counterDesc);
									Marshal.FreeHGlobal(intPtr3);
								}
							}
						}
					}
				}
			}

			// Token: 0x06004E5F RID: 20063 RVA: 0x000D65AC File Offset: 0x000D47AC
			[CLSCompliant(false)]
			public unsafe static void GetPerfCounterInfo(int queryId, int counterId, int counterNameLength, [Out] StringBuilder counterName, int counterDescLength, [Out] StringBuilder counterDesc, [Out] int* counterOffset, [Out] int* counterDataSize, [Out] int* counterTypeEnum, [Out] int* counterDataTypeEnum, [Out] long* rawCounterMaxValue)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterName.Capacity);
				IntPtr intPtr2 = intPtr;
				IntPtr intPtr3 = Marshal.AllocHGlobal((IntPtr)counterDesc.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt64*), queryId, counterId, counterNameLength, intPtr2, counterDescLength, intPtr3, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue, GL.EntryPoints[215]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, counterName);
				Marshal.FreeHGlobal(intPtr);
				BindingsBase.MarshalPtrToStringBuilder(intPtr3, counterDesc);
				Marshal.FreeHGlobal(intPtr3);
			}

			// Token: 0x06004E60 RID: 20064 RVA: 0x000D6610 File Offset: 0x000D4810
			[CLSCompliant(false)]
			public unsafe static void GetPerfCounterInfo(uint queryId, uint counterId, uint counterNameLength, [Out] StringBuilder counterName, uint counterDescLength, [Out] StringBuilder counterDesc, [Out] uint[] counterOffset, [Out] uint[] counterDataSize, [Out] uint[] counterTypeEnum, [Out] uint[] counterDataTypeEnum, [Out] ulong[] rawCounterMaxValue)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterName.Capacity);
				IntPtr intPtr2 = intPtr;
				IntPtr intPtr3 = Marshal.AllocHGlobal((IntPtr)counterDesc.Capacity);
				IntPtr intPtr4 = intPtr3;
				fixed (uint* ptr = ref (counterOffset != null && counterOffset.Length != 0) ? ref counterOffset[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (uint* ptr3 = ref (counterDataSize != null && counterDataSize.Length != 0) ? ref counterDataSize[0] : ref *null)
					{
						uint* ptr4 = ptr3;
						fixed (uint* ptr5 = ref (counterTypeEnum != null && counterTypeEnum.Length != 0) ? ref counterTypeEnum[0] : ref *null)
						{
							uint* ptr6 = ptr5;
							fixed (uint* ptr7 = ref (counterDataTypeEnum != null && counterDataTypeEnum.Length != 0) ? ref counterDataTypeEnum[0] : ref *null)
							{
								uint* ptr8 = ptr7;
								fixed (ulong* ptr9 = ref (rawCounterMaxValue != null && rawCounterMaxValue.Length != 0) ? ref rawCounterMaxValue[0] : ref *null)
								{
									calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt64*), queryId, counterId, counterNameLength, intPtr2, counterDescLength, intPtr4, ptr2, ptr4, ptr6, ptr8, ptr9, GL.EntryPoints[215]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, counterName);
									Marshal.FreeHGlobal(intPtr);
									BindingsBase.MarshalPtrToStringBuilder(intPtr3, counterDesc);
									Marshal.FreeHGlobal(intPtr3);
								}
							}
						}
					}
				}
			}

			// Token: 0x06004E61 RID: 20065 RVA: 0x000D66EC File Offset: 0x000D48EC
			[CLSCompliant(false)]
			public unsafe static void GetPerfCounterInfo(uint queryId, uint counterId, uint counterNameLength, [Out] StringBuilder counterName, uint counterDescLength, [Out] StringBuilder counterDesc, out uint counterOffset, out uint counterDataSize, out uint counterTypeEnum, out uint counterDataTypeEnum, out ulong rawCounterMaxValue)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterName.Capacity);
				IntPtr intPtr2 = intPtr;
				IntPtr intPtr3 = Marshal.AllocHGlobal((IntPtr)counterDesc.Capacity);
				IntPtr intPtr4 = intPtr3;
				fixed (uint* ptr = &counterOffset)
				{
					uint* ptr2 = ptr;
					fixed (uint* ptr3 = &counterDataSize)
					{
						uint* ptr4 = ptr3;
						fixed (uint* ptr5 = &counterTypeEnum)
						{
							uint* ptr6 = ptr5;
							fixed (uint* ptr7 = &counterDataTypeEnum)
							{
								uint* ptr8 = ptr7;
								fixed (ulong* ptr9 = &rawCounterMaxValue)
								{
									calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt64*), queryId, counterId, counterNameLength, intPtr2, counterDescLength, intPtr4, ptr2, ptr4, ptr6, ptr8, ptr9, GL.EntryPoints[215]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, counterName);
									Marshal.FreeHGlobal(intPtr);
									BindingsBase.MarshalPtrToStringBuilder(intPtr3, counterDesc);
									Marshal.FreeHGlobal(intPtr3);
								}
							}
						}
					}
				}
			}

			// Token: 0x06004E62 RID: 20066 RVA: 0x000D6764 File Offset: 0x000D4964
			[CLSCompliant(false)]
			public unsafe static void GetPerfCounterInfo(uint queryId, uint counterId, uint counterNameLength, [Out] StringBuilder counterName, uint counterDescLength, [Out] StringBuilder counterDesc, [Out] uint* counterOffset, [Out] uint* counterDataSize, [Out] uint* counterTypeEnum, [Out] uint* counterDataTypeEnum, [Out] ulong* rawCounterMaxValue)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)counterName.Capacity);
				IntPtr intPtr2 = intPtr;
				IntPtr intPtr3 = Marshal.AllocHGlobal((IntPtr)counterDesc.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt64*), queryId, counterId, counterNameLength, intPtr2, counterDescLength, intPtr3, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue, GL.EntryPoints[215]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, counterName);
				Marshal.FreeHGlobal(intPtr);
				BindingsBase.MarshalPtrToStringBuilder(intPtr3, counterDesc);
				Marshal.FreeHGlobal(intPtr3);
			}

			// Token: 0x06004E63 RID: 20067 RVA: 0x000D67C8 File Offset: 0x000D49C8
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData(int queryHandle, int flags, int dataSize, [Out] IntPtr data, [Out] int[] bytesWritten)
			{
				fixed (int* ptr = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, data, ptr, GL.EntryPoints[222]);
				}
			}

			// Token: 0x06004E64 RID: 20068 RVA: 0x000D6804 File Offset: 0x000D4A04
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData(int queryHandle, int flags, int dataSize, [Out] IntPtr data, out int bytesWritten)
			{
				fixed (int* ptr = &bytesWritten)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, data, ptr, GL.EntryPoints[222]);
				}
			}

			// Token: 0x06004E65 RID: 20069 RVA: 0x000D682C File Offset: 0x000D4A2C
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData(int queryHandle, int flags, int dataSize, [Out] IntPtr data, [Out] int* bytesWritten)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, data, bytesWritten, GL.EntryPoints[222]);
			}

			// Token: 0x06004E66 RID: 20070 RVA: 0x000D6844 File Offset: 0x000D4A44
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[] data, [Out] int[] bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (int* ptr3 = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[222]);
					}
				}
			}

			// Token: 0x06004E67 RID: 20071 RVA: 0x000D6894 File Offset: 0x000D4A94
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[] data, out int bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (int* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[222]);
					}
				}
			}

			// Token: 0x06004E68 RID: 20072 RVA: 0x000D68D0 File Offset: 0x000D4AD0
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[] data, [Out] int* bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr, bytesWritten, GL.EntryPoints[222]);
				}
			}

			// Token: 0x06004E69 RID: 20073 RVA: 0x000D6908 File Offset: 0x000D4B08
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[,] data, [Out] int[] bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (int* ptr3 = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[222]);
					}
				}
			}

			// Token: 0x06004E6A RID: 20074 RVA: 0x000D695C File Offset: 0x000D4B5C
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[,] data, out int bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (int* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[222]);
					}
				}
			}

			// Token: 0x06004E6B RID: 20075 RVA: 0x000D699C File Offset: 0x000D4B9C
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[,] data, [Out] int* bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr, bytesWritten, GL.EntryPoints[222]);
				}
			}

			// Token: 0x06004E6C RID: 20076 RVA: 0x000D69D8 File Offset: 0x000D4BD8
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[,,] data, [Out] int[] bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (int* ptr3 = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[222]);
					}
				}
			}

			// Token: 0x06004E6D RID: 20077 RVA: 0x000D6A2C File Offset: 0x000D4C2C
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[,,] data, out int bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (int* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[222]);
					}
				}
			}

			// Token: 0x06004E6E RID: 20078 RVA: 0x000D6A6C File Offset: 0x000D4C6C
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] T3[,,] data, [Out] int* bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr, bytesWritten, GL.EntryPoints[222]);
				}
			}

			// Token: 0x06004E6F RID: 20079 RVA: 0x000D6AAC File Offset: 0x000D4CAC
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] ref T3 data, [Out] int[] bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					T3* ptr2 = ptr;
					fixed (int* ptr3 = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[222]);
					}
				}
			}

			// Token: 0x06004E70 RID: 20080 RVA: 0x000D6AEC File Offset: 0x000D4CEC
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] ref T3 data, out int bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					T3* ptr2 = ptr;
					fixed (int* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[222]);
					}
				}
			}

			// Token: 0x06004E71 RID: 20081 RVA: 0x000D6B18 File Offset: 0x000D4D18
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(int queryHandle, int flags, int dataSize, [In] [Out] ref T3 data, [Out] int* bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr, bytesWritten, GL.EntryPoints[222]);
				}
			}

			// Token: 0x06004E72 RID: 20082 RVA: 0x000D6B40 File Offset: 0x000D4D40
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData(uint queryHandle, uint flags, int dataSize, [Out] IntPtr data, [Out] uint[] bytesWritten)
			{
				fixed (uint* ptr = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, data, ptr, GL.EntryPoints[222]);
				}
			}

			// Token: 0x06004E73 RID: 20083 RVA: 0x000D6B7C File Offset: 0x000D4D7C
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData(uint queryHandle, uint flags, int dataSize, [Out] IntPtr data, out uint bytesWritten)
			{
				fixed (uint* ptr = &bytesWritten)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, data, ptr, GL.EntryPoints[222]);
				}
			}

			// Token: 0x06004E74 RID: 20084 RVA: 0x000D6BA4 File Offset: 0x000D4DA4
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData(uint queryHandle, uint flags, int dataSize, [Out] IntPtr data, [Out] uint* bytesWritten)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, data, bytesWritten, GL.EntryPoints[222]);
			}

			// Token: 0x06004E75 RID: 20085 RVA: 0x000D6BBC File Offset: 0x000D4DBC
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[] data, [Out] uint[] bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (uint* ptr3 = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[222]);
					}
				}
			}

			// Token: 0x06004E76 RID: 20086 RVA: 0x000D6C0C File Offset: 0x000D4E0C
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[] data, out uint bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (uint* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[222]);
					}
				}
			}

			// Token: 0x06004E77 RID: 20087 RVA: 0x000D6C48 File Offset: 0x000D4E48
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[] data, [Out] uint* bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr, bytesWritten, GL.EntryPoints[222]);
				}
			}

			// Token: 0x06004E78 RID: 20088 RVA: 0x000D6C80 File Offset: 0x000D4E80
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[,] data, [Out] uint[] bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (uint* ptr3 = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[222]);
					}
				}
			}

			// Token: 0x06004E79 RID: 20089 RVA: 0x000D6CD4 File Offset: 0x000D4ED4
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[,] data, out uint bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (uint* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[222]);
					}
				}
			}

			// Token: 0x06004E7A RID: 20090 RVA: 0x000D6D14 File Offset: 0x000D4F14
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[,] data, [Out] uint* bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr, bytesWritten, GL.EntryPoints[222]);
				}
			}

			// Token: 0x06004E7B RID: 20091 RVA: 0x000D6D50 File Offset: 0x000D4F50
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[,,] data, [Out] uint[] bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (uint* ptr3 = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[222]);
					}
				}
			}

			// Token: 0x06004E7C RID: 20092 RVA: 0x000D6DA4 File Offset: 0x000D4FA4
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[,,] data, out uint bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					T3* ptr2 = ptr;
					fixed (uint* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[222]);
					}
				}
			}

			// Token: 0x06004E7D RID: 20093 RVA: 0x000D6DE4 File Offset: 0x000D4FE4
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] T3[,,] data, [Out] uint* bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr, bytesWritten, GL.EntryPoints[222]);
				}
			}

			// Token: 0x06004E7E RID: 20094 RVA: 0x000D6E24 File Offset: 0x000D5024
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] ref T3 data, [Out] uint[] bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					T3* ptr2 = ptr;
					fixed (uint* ptr3 = ref (bytesWritten != null && bytesWritten.Length != 0) ? ref bytesWritten[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[222]);
					}
				}
			}

			// Token: 0x06004E7F RID: 20095 RVA: 0x000D6E64 File Offset: 0x000D5064
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] ref T3 data, out uint bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					T3* ptr2 = ptr;
					fixed (uint* ptr3 = &bytesWritten)
					{
						calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr2, ptr3, GL.EntryPoints[222]);
					}
				}
			}

			// Token: 0x06004E80 RID: 20096 RVA: 0x000D6E90 File Offset: 0x000D5090
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryData<T3>(uint queryHandle, uint flags, int dataSize, [In] [Out] ref T3 data, [Out] uint* bytesWritten) where T3 : struct
			{
				fixed (T3* ptr = &data)
				{
					calli(System.Void(System.UInt32,System.UInt32,System.Int32,System.IntPtr,System.UInt32*), queryHandle, flags, dataSize, ptr, bytesWritten, GL.EntryPoints[222]);
				}
			}

			// Token: 0x06004E81 RID: 20097 RVA: 0x000D6EB8 File Offset: 0x000D50B8
			[CLSCompliant(false)]
			public static int GetPerfQueryIdByName([Out] StringBuilder queryName)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				calli(System.Void(System.IntPtr,System.UInt32*), intPtr, ref intPtr, GL.EntryPoints[223]);
				int result = (int)intPtr;
				BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
				Marshal.FreeHGlobal(intPtr);
				return result;
			}

			// Token: 0x06004E82 RID: 20098 RVA: 0x000D6EF4 File Offset: 0x000D50F4
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryIdByName([Out] StringBuilder queryName, [Out] int[] queryId)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = ref (queryId != null && queryId.Length != 0) ? ref queryId[0] : ref *null)
				{
					calli(System.Void(System.IntPtr,System.UInt32*), intPtr2, ptr, GL.EntryPoints[223]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004E83 RID: 20099 RVA: 0x000D6F44 File Offset: 0x000D5144
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryIdByName([Out] StringBuilder queryName, out int queryId)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = &queryId)
				{
					calli(System.Void(System.IntPtr,System.UInt32*), intPtr2, ptr, GL.EntryPoints[223]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004E84 RID: 20100 RVA: 0x000D6F80 File Offset: 0x000D5180
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryIdByName([Out] StringBuilder queryName, [Out] int* queryId)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				calli(System.Void(System.IntPtr,System.UInt32*), intPtr, queryId, GL.EntryPoints[223]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004E85 RID: 20101 RVA: 0x000D6FB8 File Offset: 0x000D51B8
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryIdByName([Out] StringBuilder queryName, [Out] uint[] queryId)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (uint* ptr = ref (queryId != null && queryId.Length != 0) ? ref queryId[0] : ref *null)
				{
					calli(System.Void(System.IntPtr,System.UInt32*), intPtr2, ptr, GL.EntryPoints[223]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004E86 RID: 20102 RVA: 0x000D7008 File Offset: 0x000D5208
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryIdByName([Out] StringBuilder queryName, out uint queryId)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (uint* ptr = &queryId)
				{
					calli(System.Void(System.IntPtr,System.UInt32*), intPtr2, ptr, GL.EntryPoints[223]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004E87 RID: 20103 RVA: 0x000D7044 File Offset: 0x000D5244
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryIdByName([Out] StringBuilder queryName, [Out] uint* queryId)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				calli(System.Void(System.IntPtr,System.UInt32*), intPtr, queryId, GL.EntryPoints[223]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004E88 RID: 20104 RVA: 0x000D707C File Offset: 0x000D527C
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryInfo(int queryId, int queryNameLength, [Out] StringBuilder queryName, [Out] int[] dataSize, [Out] int[] noCounters, [Out] int[] noInstances, [Out] int[] capsMask)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = ref (dataSize != null && dataSize.Length != 0) ? ref dataSize[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (noCounters != null && noCounters.Length != 0) ? ref noCounters[0] : ref *null)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = ref (noInstances != null && noInstances.Length != 0) ? ref noInstances[0] : ref *null)
						{
							int* ptr6 = ptr5;
							fixed (int* ptr7 = ref (capsMask != null && capsMask.Length != 0) ? ref capsMask[0] : ref *null)
							{
								calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*), queryId, queryNameLength, intPtr2, ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[224]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
								Marshal.FreeHGlobal(intPtr);
							}
						}
					}
				}
			}

			// Token: 0x06004E89 RID: 20105 RVA: 0x000D7118 File Offset: 0x000D5318
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryInfo(int queryId, int queryNameLength, [Out] StringBuilder queryName, out int dataSize, out int noCounters, out int noInstances, out int capsMask)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = &dataSize)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &noCounters)
					{
						int* ptr4 = ptr3;
						fixed (int* ptr5 = &noInstances)
						{
							int* ptr6 = ptr5;
							fixed (int* ptr7 = &capsMask)
							{
								calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*), queryId, queryNameLength, intPtr2, ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[224]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
								Marshal.FreeHGlobal(intPtr);
							}
						}
					}
				}
			}

			// Token: 0x06004E8A RID: 20106 RVA: 0x000D7168 File Offset: 0x000D5368
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryInfo(int queryId, int queryNameLength, [Out] StringBuilder queryName, [Out] int* dataSize, [Out] int* noCounters, [Out] int* noInstances, [Out] int* capsMask)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*), queryId, queryNameLength, intPtr, dataSize, noCounters, noInstances, capsMask, GL.EntryPoints[224]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004E8B RID: 20107 RVA: 0x000D71A8 File Offset: 0x000D53A8
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryInfo(uint queryId, uint queryNameLength, [Out] StringBuilder queryName, [Out] uint[] dataSize, [Out] uint[] noCounters, [Out] uint[] noInstances, [Out] uint[] capsMask)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (uint* ptr = ref (dataSize != null && dataSize.Length != 0) ? ref dataSize[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (uint* ptr3 = ref (noCounters != null && noCounters.Length != 0) ? ref noCounters[0] : ref *null)
					{
						uint* ptr4 = ptr3;
						fixed (uint* ptr5 = ref (noInstances != null && noInstances.Length != 0) ? ref noInstances[0] : ref *null)
						{
							uint* ptr6 = ptr5;
							fixed (uint* ptr7 = ref (capsMask != null && capsMask.Length != 0) ? ref capsMask[0] : ref *null)
							{
								calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*), queryId, queryNameLength, intPtr2, ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[224]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
								Marshal.FreeHGlobal(intPtr);
							}
						}
					}
				}
			}

			// Token: 0x06004E8C RID: 20108 RVA: 0x000D7244 File Offset: 0x000D5444
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryInfo(uint queryId, uint queryNameLength, [Out] StringBuilder queryName, out uint dataSize, out uint noCounters, out uint noInstances, out uint capsMask)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (uint* ptr = &dataSize)
				{
					uint* ptr2 = ptr;
					fixed (uint* ptr3 = &noCounters)
					{
						uint* ptr4 = ptr3;
						fixed (uint* ptr5 = &noInstances)
						{
							uint* ptr6 = ptr5;
							fixed (uint* ptr7 = &capsMask)
							{
								calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*), queryId, queryNameLength, intPtr2, ptr2, ptr4, ptr6, ptr7, GL.EntryPoints[224]);
								BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
								Marshal.FreeHGlobal(intPtr);
							}
						}
					}
				}
			}

			// Token: 0x06004E8D RID: 20109 RVA: 0x000D7294 File Offset: 0x000D5494
			[CLSCompliant(false)]
			public unsafe static void GetPerfQueryInfo(uint queryId, uint queryNameLength, [Out] StringBuilder queryName, [Out] uint* dataSize, [Out] uint* noCounters, [Out] uint* noInstances, [Out] uint* capsMask)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)queryName.Capacity);
				calli(System.Void(System.UInt32,System.UInt32,System.IntPtr,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*), queryId, queryNameLength, intPtr, dataSize, noCounters, noInstances, capsMask, GL.EntryPoints[224]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, queryName);
				Marshal.FreeHGlobal(intPtr);
			}
		}

		// Token: 0x020005EF RID: 1519
		public static class Khr
		{
			// Token: 0x06004E8E RID: 20110 RVA: 0x000D72D4 File Offset: 0x000D54D4
			public static void BlendBarrier()
			{
				calli(System.Void(), GL.EntryPoints[22]);
			}

			// Token: 0x06004E8F RID: 20111 RVA: 0x000D72E4 File Offset: 0x000D54E4
			public static void DebugMessageCallback(DebugProcKhr callback, IntPtr userParam)
			{
				calli(System.Void(OpenTK.Graphics.ES30.DebugProcKhr,System.IntPtr), callback, userParam, GL.EntryPoints[77]);
			}

			// Token: 0x06004E90 RID: 20112 RVA: 0x000D72F8 File Offset: 0x000D54F8
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcKhr callback, [In] [Out] T1[] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.ES30.DebugProcKhr,System.IntPtr), callback, ptr, GL.EntryPoints[77]);
				}
			}

			// Token: 0x06004E91 RID: 20113 RVA: 0x000D732C File Offset: 0x000D552C
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcKhr callback, [In] [Out] T1[,] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.ES30.DebugProcKhr,System.IntPtr), callback, ptr, GL.EntryPoints[77]);
				}
			}

			// Token: 0x06004E92 RID: 20114 RVA: 0x000D7364 File Offset: 0x000D5564
			[CLSCompliant(false)]
			public unsafe static void DebugMessageCallback<T1>(DebugProcKhr callback, [In] [Out] T1[,,] userParam) where T1 : struct
			{
				fixed (T1* ptr = ref (userParam != null && userParam.Length != 0) ? ref userParam[0, 0, 0] : ref *null)
				{
					calli(System.Void(OpenTK.Graphics.ES30.DebugProcKhr,System.IntPtr), callback, ptr, GL.EntryPoints[77]);
				}
			}

			// Token: 0x06004E93 RID: 20115 RVA: 0x000D739C File Offset: 0x000D559C
			public unsafe static void DebugMessageCallback<T1>(DebugProcKhr callback, [In] [Out] ref T1 userParam) where T1 : struct
			{
				fixed (T1* ptr = &userParam)
				{
					calli(System.Void(OpenTK.Graphics.ES30.DebugProcKhr,System.IntPtr), callback, ptr, GL.EntryPoints[77]);
				}
			}

			// Token: 0x06004E94 RID: 20116 RVA: 0x000D73BC File Offset: 0x000D55BC
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, int[] ids, bool enabled)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[79]);
				}
			}

			// Token: 0x06004E95 RID: 20117 RVA: 0x000D73F8 File Offset: 0x000D55F8
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, ref int ids, bool enabled)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[79]);
				}
			}

			// Token: 0x06004E96 RID: 20118 RVA: 0x000D7420 File Offset: 0x000D5620
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, int* ids, bool enabled)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[79]);
			}

			// Token: 0x06004E97 RID: 20119 RVA: 0x000D7438 File Offset: 0x000D5638
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, uint[] ids, bool enabled)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[79]);
				}
			}

			// Token: 0x06004E98 RID: 20120 RVA: 0x000D7474 File Offset: 0x000D5674
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, ref uint ids, bool enabled)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[79]);
				}
			}

			// Token: 0x06004E99 RID: 20121 RVA: 0x000D749C File Offset: 0x000D569C
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(All source, All type, All severity, int count, uint* ids, bool enabled)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[79]);
			}

			// Token: 0x06004E9A RID: 20122 RVA: 0x000D74B4 File Offset: 0x000D56B4
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, int[] ids, bool enabled)
			{
				fixed (int* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[79]);
				}
			}

			// Token: 0x06004E9B RID: 20123 RVA: 0x000D74F0 File Offset: 0x000D56F0
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, ref int ids, bool enabled)
			{
				fixed (int* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[79]);
				}
			}

			// Token: 0x06004E9C RID: 20124 RVA: 0x000D7518 File Offset: 0x000D5718
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, int* ids, bool enabled)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[79]);
			}

			// Token: 0x06004E9D RID: 20125 RVA: 0x000D7530 File Offset: 0x000D5730
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, uint[] ids, bool enabled)
			{
				fixed (uint* ptr = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[79]);
				}
			}

			// Token: 0x06004E9E RID: 20126 RVA: 0x000D756C File Offset: 0x000D576C
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, ref uint ids, bool enabled)
			{
				fixed (uint* ptr = &ids)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ptr, enabled, GL.EntryPoints[79]);
				}
			}

			// Token: 0x06004E9F RID: 20127 RVA: 0x000D7594 File Offset: 0x000D5794
			[CLSCompliant(false)]
			public unsafe static void DebugMessageControl(DebugSourceControl source, DebugTypeControl type, DebugSeverityControl severity, int count, uint* ids, bool enabled)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Boolean), source, type, severity, count, ids, enabled, GL.EntryPoints[79]);
			}

			// Token: 0x06004EA0 RID: 20128 RVA: 0x000D75AC File Offset: 0x000D57AC
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public static void DebugMessageInsert(All source, All type, int id, All severity, int length, string buf)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[81]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06004EA1 RID: 20129 RVA: 0x000D75DC File Offset: 0x000D57DC
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public static void DebugMessageInsert(All source, All type, uint id, All severity, int length, string buf)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[81]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06004EA2 RID: 20130 RVA: 0x000D760C File Offset: 0x000D580C
			[CLSCompliant(false)]
			public static void DebugMessageInsert(DebugSourceExternal source, DebugType type, int id, DebugSeverity severity, int length, string buf)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[81]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06004EA3 RID: 20131 RVA: 0x000D763C File Offset: 0x000D583C
			[CLSCompliant(false)]
			public static void DebugMessageInsert(DebugSourceExternal source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(buf);
				calli(System.Void(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32,System.IntPtr), source, type, id, severity, length, intPtr, GL.EntryPoints[81]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06004EA4 RID: 20132 RVA: 0x000D766C File Offset: 0x000D586C
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] All[] sources, [Out] All[] types, [Out] int[] ids, [Out] All[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
			{
				fixed (All* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
				{
					All* ptr2 = ptr;
					fixed (All* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
					{
						All* ptr4 = ptr3;
						fixed (int* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
						{
							int* ptr6 = ptr5;
							fixed (All* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
							{
								All* ptr8 = ptr7;
								fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[190]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x06004EA5 RID: 20133 RVA: 0x000D7724 File Offset: 0x000D5924
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, out All sources, out All types, out int ids, out All severities, out int lengths, [Out] StringBuilder messageLog)
			{
				fixed (All* ptr = &sources)
				{
					All* ptr2 = ptr;
					fixed (All* ptr3 = &types)
					{
						All* ptr4 = ptr3;
						fixed (int* ptr5 = &ids)
						{
							int* ptr6 = ptr5;
							fixed (All* ptr7 = &severities)
							{
								All* ptr8 = ptr7;
								fixed (int* ptr9 = &lengths)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[190]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x06004EA6 RID: 20134 RVA: 0x000D777C File Offset: 0x000D597C
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] All* sources, [Out] All* types, [Out] int* ids, [Out] All* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
				int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[190]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
				Marshal.FreeHGlobal(intPtr);
				return result;
			}

			// Token: 0x06004EA7 RID: 20135 RVA: 0x000D77C0 File Offset: 0x000D59C0
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] DebugSourceExternal[] sources, [Out] DebugType[] types, [Out] int[] ids, [Out] DebugSeverity[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
			{
				fixed (DebugSourceExternal* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
				{
					DebugSourceExternal* ptr2 = ptr;
					fixed (DebugType* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
					{
						DebugType* ptr4 = ptr3;
						fixed (int* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
						{
							int* ptr6 = ptr5;
							fixed (DebugSeverity* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
							{
								DebugSeverity* ptr8 = ptr7;
								fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[190]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x06004EA8 RID: 20136 RVA: 0x000D7878 File Offset: 0x000D5A78
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, out DebugSourceExternal sources, out DebugType types, out int ids, out DebugSeverity severities, out int lengths, [Out] StringBuilder messageLog)
			{
				fixed (DebugSourceExternal* ptr = &sources)
				{
					DebugSourceExternal* ptr2 = ptr;
					fixed (DebugType* ptr3 = &types)
					{
						DebugType* ptr4 = ptr3;
						fixed (int* ptr5 = &ids)
						{
							int* ptr6 = ptr5;
							fixed (DebugSeverity* ptr7 = &severities)
							{
								DebugSeverity* ptr8 = ptr7;
								fixed (int* ptr9 = &lengths)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[190]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x06004EA9 RID: 20137 RVA: 0x000D78D0 File Offset: 0x000D5AD0
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(int count, int bufSize, [Out] DebugSourceExternal* sources, [Out] DebugType* types, [Out] int* ids, [Out] DebugSeverity* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
				int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[190]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
				Marshal.FreeHGlobal(intPtr);
				return result;
			}

			// Token: 0x06004EAA RID: 20138 RVA: 0x000D7914 File Offset: 0x000D5B14
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] All[] sources, [Out] All[] types, [Out] uint[] ids, [Out] All[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
			{
				fixed (All* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
				{
					All* ptr2 = ptr;
					fixed (All* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
					{
						All* ptr4 = ptr3;
						fixed (uint* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
						{
							uint* ptr6 = ptr5;
							fixed (All* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
							{
								All* ptr8 = ptr7;
								fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[190]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x06004EAB RID: 20139 RVA: 0x000D79CC File Offset: 0x000D5BCC
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, out All sources, out All types, out uint ids, out All severities, out int lengths, [Out] StringBuilder messageLog)
			{
				fixed (All* ptr = &sources)
				{
					All* ptr2 = ptr;
					fixed (All* ptr3 = &types)
					{
						All* ptr4 = ptr3;
						fixed (uint* ptr5 = &ids)
						{
							uint* ptr6 = ptr5;
							fixed (All* ptr7 = &severities)
							{
								All* ptr8 = ptr7;
								fixed (int* ptr9 = &lengths)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[190]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x06004EAC RID: 20140 RVA: 0x000D7A24 File Offset: 0x000D5C24
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] All* sources, [Out] All* types, [Out] uint* ids, [Out] All* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
				int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[190]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
				Marshal.FreeHGlobal(intPtr);
				return result;
			}

			// Token: 0x06004EAD RID: 20141 RVA: 0x000D7A68 File Offset: 0x000D5C68
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] DebugSourceExternal[] sources, [Out] DebugType[] types, [Out] uint[] ids, [Out] DebugSeverity[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
			{
				fixed (DebugSourceExternal* ptr = ref (sources != null && sources.Length != 0) ? ref sources[0] : ref *null)
				{
					DebugSourceExternal* ptr2 = ptr;
					fixed (DebugType* ptr3 = ref (types != null && types.Length != 0) ? ref types[0] : ref *null)
					{
						DebugType* ptr4 = ptr3;
						fixed (uint* ptr5 = ref (ids != null && ids.Length != 0) ? ref ids[0] : ref *null)
						{
							uint* ptr6 = ptr5;
							fixed (DebugSeverity* ptr7 = ref (severities != null && severities.Length != 0) ? ref severities[0] : ref *null)
							{
								DebugSeverity* ptr8 = ptr7;
								fixed (int* ptr9 = ref (lengths != null && lengths.Length != 0) ? ref lengths[0] : ref *null)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[190]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x06004EAE RID: 20142 RVA: 0x000D7B20 File Offset: 0x000D5D20
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, out DebugSourceExternal sources, out DebugType types, out uint ids, out DebugSeverity severities, out int lengths, [Out] StringBuilder messageLog)
			{
				fixed (DebugSourceExternal* ptr = &sources)
				{
					DebugSourceExternal* ptr2 = ptr;
					fixed (DebugType* ptr3 = &types)
					{
						DebugType* ptr4 = ptr3;
						fixed (uint* ptr5 = &ids)
						{
							uint* ptr6 = ptr5;
							fixed (DebugSeverity* ptr7 = &severities)
							{
								DebugSeverity* ptr8 = ptr7;
								fixed (int* ptr9 = &lengths)
								{
									int* ptr10 = ptr9;
									IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
									int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, ptr2, ptr4, ptr6, ptr8, ptr10, intPtr, GL.EntryPoints[190]);
									BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
									Marshal.FreeHGlobal(intPtr);
									return result;
								}
							}
						}
					}
				}
			}

			// Token: 0x06004EAF RID: 20143 RVA: 0x000D7B78 File Offset: 0x000D5D78
			[CLSCompliant(false)]
			public unsafe static int GetDebugMessageLog(uint count, int bufSize, [Out] DebugSourceExternal* sources, [Out] DebugType* types, [Out] uint* ids, [Out] DebugSeverity* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)messageLog.Capacity);
				int result = calli(System.Int32(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.UInt32*,System.Int32*,System.Int32*,System.IntPtr), count, bufSize, sources, types, ids, severities, lengths, intPtr, GL.EntryPoints[190]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, messageLog);
				Marshal.FreeHGlobal(intPtr);
				return result;
			}

			// Token: 0x06004EB0 RID: 20144 RVA: 0x000D7BBC File Offset: 0x000D5DBC
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(All identifier, int name, int bufSize, [Out] int[] length, [Out] StringBuilder label)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[212]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004EB1 RID: 20145 RVA: 0x000D7C10 File Offset: 0x000D5E10
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(All identifier, int name, int bufSize, out int length, [Out] StringBuilder label)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[212]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004EB2 RID: 20146 RVA: 0x000D7C50 File Offset: 0x000D5E50
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetObjectLabel(All identifier, int name, int bufSize, [Out] int* length, [Out] StringBuilder label)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, length, intPtr, GL.EntryPoints[212]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004EB3 RID: 20147 RVA: 0x000D7C90 File Offset: 0x000D5E90
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetObjectLabel(All identifier, uint name, int bufSize, [Out] int[] length, [Out] StringBuilder label)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[212]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004EB4 RID: 20148 RVA: 0x000D7CE4 File Offset: 0x000D5EE4
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetObjectLabel(All identifier, uint name, int bufSize, out int length, [Out] StringBuilder label)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[212]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004EB5 RID: 20149 RVA: 0x000D7D24 File Offset: 0x000D5F24
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetObjectLabel(All identifier, uint name, int bufSize, [Out] int* length, [Out] StringBuilder label)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, length, intPtr, GL.EntryPoints[212]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004EB6 RID: 20150 RVA: 0x000D7D64 File Offset: 0x000D5F64
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, int name, int bufSize, [Out] int[] length, [Out] StringBuilder label)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[212]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004EB7 RID: 20151 RVA: 0x000D7DB8 File Offset: 0x000D5FB8
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, int name, int bufSize, out int length, [Out] StringBuilder label)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[212]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004EB8 RID: 20152 RVA: 0x000D7DF8 File Offset: 0x000D5FF8
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, int name, int bufSize, [Out] int* length, [Out] StringBuilder label)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, length, intPtr, GL.EntryPoints[212]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004EB9 RID: 20153 RVA: 0x000D7E38 File Offset: 0x000D6038
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, uint name, int bufSize, [Out] int[] length, [Out] StringBuilder label)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[212]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004EBA RID: 20154 RVA: 0x000D7E8C File Offset: 0x000D608C
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, uint name, int bufSize, out int length, [Out] StringBuilder label)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, ptr2, intPtr, GL.EntryPoints[212]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004EBB RID: 20155 RVA: 0x000D7ECC File Offset: 0x000D60CC
			[CLSCompliant(false)]
			public unsafe static void GetObjectLabel(ObjectLabelIdentifier identifier, uint name, int bufSize, [Out] int* length, [Out] StringBuilder label)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.Int32*,System.IntPtr), identifier, name, bufSize, length, intPtr, GL.EntryPoints[212]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004EBC RID: 20156 RVA: 0x000D7F0C File Offset: 0x000D610C
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label)
			{
				fixed (int* ptr2 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, ptr3, intPtr, GL.EntryPoints[214]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004EBD RID: 20157 RVA: 0x000D7F5C File Offset: 0x000D615C
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, out int length, [Out] StringBuilder label)
			{
				fixed (int* ptr2 = &length)
				{
					int* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, ptr3, intPtr, GL.EntryPoints[214]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004EBE RID: 20158 RVA: 0x000D7F9C File Offset: 0x000D619C
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel(IntPtr ptr, int bufSize, [Out] int* length, [Out] StringBuilder label)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
				calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr, bufSize, length, intPtr, GL.EntryPoints[214]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004EBF RID: 20159 RVA: 0x000D7FD8 File Offset: 0x000D61D8
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[214]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x06004EC0 RID: 20160 RVA: 0x000D803C File Offset: 0x000D623C
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = &length)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[214]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x06004EC1 RID: 20161 RVA: 0x000D8090 File Offset: 0x000D6290
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[214]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004EC2 RID: 20162 RVA: 0x000D80E0 File Offset: 0x000D62E0
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[214]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x06004EC3 RID: 20163 RVA: 0x000D8148 File Offset: 0x000D6348
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = &length)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[214]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x06004EC4 RID: 20164 RVA: 0x000D81A0 File Offset: 0x000D63A0
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[214]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004EC5 RID: 20165 RVA: 0x000D81F4 File Offset: 0x000D63F4
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[214]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x06004EC6 RID: 20166 RVA: 0x000D8260 File Offset: 0x000D6460
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = &length)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[214]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x06004EC7 RID: 20167 RVA: 0x000D82B8 File Offset: 0x000D64B8
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[214]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004EC8 RID: 20168 RVA: 0x000D830C File Offset: 0x000D650C
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, [Out] int[] length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = &ptr)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[214]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x06004EC9 RID: 20169 RVA: 0x000D8360 File Offset: 0x000D6560
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, out int length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = &ptr)
				{
					T0* ptr3 = ptr2;
					fixed (int* ptr4 = &length)
					{
						int* ptr5 = ptr4;
						IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
						calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, ptr5, intPtr, GL.EntryPoints[214]);
						BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
						Marshal.FreeHGlobal(intPtr);
					}
				}
			}

			// Token: 0x06004ECA RID: 20170 RVA: 0x000D83A0 File Offset: 0x000D65A0
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int bufSize, [Out] int* length, [Out] StringBuilder label) where T0 : struct
			{
				fixed (T0* ptr2 = &ptr)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)label.Capacity);
					calli(System.Void(System.IntPtr,System.Int32,System.Int32*,System.IntPtr), ptr3, bufSize, length, intPtr, GL.EntryPoints[214]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, label);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004ECB RID: 20171 RVA: 0x000D83E0 File Offset: 0x000D65E0
			public static void GetPointer(All pname, [Out] IntPtr @params)
			{
				calli(System.Void(System.Int32,System.IntPtr), pname, @params, GL.EntryPoints[226]);
			}

			// Token: 0x06004ECC RID: 20172 RVA: 0x000D83F4 File Offset: 0x000D65F4
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T1>(All pname, [In] [Out] T1[] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[226]);
				}
			}

			// Token: 0x06004ECD RID: 20173 RVA: 0x000D8428 File Offset: 0x000D6628
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T1>(All pname, [In] [Out] T1[,] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[226]);
				}
			}

			// Token: 0x06004ECE RID: 20174 RVA: 0x000D8460 File Offset: 0x000D6660
			[CLSCompliant(false)]
			public unsafe static void GetPointer<T1>(All pname, [In] [Out] T1[,,] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[226]);
				}
			}

			// Token: 0x06004ECF RID: 20175 RVA: 0x000D849C File Offset: 0x000D669C
			public unsafe static void GetPointer<T1>(All pname, [In] [Out] ref T1 @params) where T1 : struct
			{
				fixed (T1* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.IntPtr), pname, ptr, GL.EntryPoints[226]);
				}
			}

			// Token: 0x06004ED0 RID: 20176 RVA: 0x000D84C0 File Offset: 0x000D66C0
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public static void ObjectLabel(All identifier, int name, int length, string label)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), identifier, name, length, intPtr, GL.EntryPoints[302]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06004ED1 RID: 20177 RVA: 0x000D84F0 File Offset: 0x000D66F0
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public static void ObjectLabel(All identifier, uint name, int length, string label)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), identifier, name, length, intPtr, GL.EntryPoints[302]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06004ED2 RID: 20178 RVA: 0x000D8520 File Offset: 0x000D6720
			[CLSCompliant(false)]
			public static void ObjectLabel(ObjectLabelIdentifier identifier, int name, int length, string label)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), identifier, name, length, intPtr, GL.EntryPoints[302]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06004ED3 RID: 20179 RVA: 0x000D8550 File Offset: 0x000D6750
			[CLSCompliant(false)]
			public static void ObjectLabel(ObjectLabelIdentifier identifier, uint name, int length, string label)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), identifier, name, length, intPtr, GL.EntryPoints[302]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06004ED4 RID: 20180 RVA: 0x000D8580 File Offset: 0x000D6780
			public static void ObjectPtrLabel(IntPtr ptr, int length, string label)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
				calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr, length, intPtr, GL.EntryPoints[304]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06004ED5 RID: 20181 RVA: 0x000D85B0 File Offset: 0x000D67B0
			[CLSCompliant(false)]
			public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[] ptr, int length, string label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
					calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[304]);
					BindingsBase.FreeStringPtr(intPtr);
				}
			}

			// Token: 0x06004ED6 RID: 20182 RVA: 0x000D85F4 File Offset: 0x000D67F4
			[CLSCompliant(false)]
			public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[,] ptr, int length, string label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
					calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[304]);
					BindingsBase.FreeStringPtr(intPtr);
				}
			}

			// Token: 0x06004ED7 RID: 20183 RVA: 0x000D863C File Offset: 0x000D683C
			[CLSCompliant(false)]
			public unsafe static void ObjectPtrLabel<T0>([In] [Out] T0[,,] ptr, int length, string label) where T0 : struct
			{
				fixed (T0* ptr2 = ref (ptr != null && ptr.Length != 0) ? ref ptr[0, 0, 0] : ref *null)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
					calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[304]);
					BindingsBase.FreeStringPtr(intPtr);
				}
			}

			// Token: 0x06004ED8 RID: 20184 RVA: 0x000D8684 File Offset: 0x000D6884
			public unsafe static void ObjectPtrLabel<T0>([In] [Out] ref T0 ptr, int length, string label) where T0 : struct
			{
				fixed (T0* ptr2 = &ptr)
				{
					T0* ptr3 = ptr2;
					IntPtr intPtr = BindingsBase.MarshalStringToPtr(label);
					calli(System.Void(System.IntPtr,System.Int32,System.IntPtr), ptr3, length, intPtr, GL.EntryPoints[304]);
					BindingsBase.FreeStringPtr(intPtr);
				}
			}

			// Token: 0x06004ED9 RID: 20185 RVA: 0x000D86B4 File Offset: 0x000D68B4
			public static void PopDebugGroup()
			{
				calli(System.Void(), GL.EntryPoints[310]);
			}

			// Token: 0x06004EDA RID: 20186 RVA: 0x000D86C8 File Offset: 0x000D68C8
			[CLSCompliant(false)]
			public static void PushDebugGroup(All source, int id, int length, string message)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(message);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), source, id, length, intPtr, GL.EntryPoints[351]);
				BindingsBase.FreeStringPtr(intPtr);
			}

			// Token: 0x06004EDB RID: 20187 RVA: 0x000D86F8 File Offset: 0x000D68F8
			[CLSCompliant(false)]
			public static void PushDebugGroup(All source, uint id, int length, string message)
			{
				IntPtr intPtr = BindingsBase.MarshalStringToPtr(message);
				calli(System.Void(System.Int32,System.UInt32,System.Int32,System.IntPtr), source, id, length, intPtr, GL.EntryPoints[351]);
				BindingsBase.FreeStringPtr(intPtr);
			}
		}

		// Token: 0x020005F0 RID: 1520
		public static class NV
		{
			// Token: 0x06004EDC RID: 20188 RVA: 0x000D8728 File Offset: 0x000D6928
			public static void BlendBarrier()
			{
				calli(System.Void(), GL.EntryPoints[23]);
			}

			// Token: 0x06004EDD RID: 20189 RVA: 0x000D8738 File Offset: 0x000D6938
			public static void BlendParameter(All pname, int value)
			{
				calli(System.Void(System.Int32,System.Int32), pname, value, GL.EntryPoints[34]);
			}

			// Token: 0x06004EDE RID: 20190 RVA: 0x000D874C File Offset: 0x000D694C
			[Obsolete("Use strongly-typed overload instead")]
			public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, All mask, All filter)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter, GL.EntryPoints[37]);
			}

			// Token: 0x06004EDF RID: 20191 RVA: 0x000D8778 File Offset: 0x000D6978
			public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter, GL.EntryPoints[37]);
			}

			// Token: 0x06004EE0 RID: 20192 RVA: 0x000D87A4 File Offset: 0x000D69A4
			[Obsolete("Use strongly-typed overload instead")]
			public static void CopyBufferSubData(All readTarget, All writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), readTarget, writeTarget, readOffset, writeOffset, size, GL.EntryPoints[61]);
			}

			// Token: 0x06004EE1 RID: 20193 RVA: 0x000D87BC File Offset: 0x000D69BC
			public static void CopyBufferSubData(BufferTarget readTarget, BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr), readTarget, writeTarget, readOffset, writeOffset, size, GL.EntryPoints[61]);
			}

			// Token: 0x06004EE2 RID: 20194 RVA: 0x000D87D4 File Offset: 0x000D69D4
			public static void CoverageMask(bool mask)
			{
				calli(System.Void(System.Boolean), mask, GL.EntryPoints[68]);
			}

			// Token: 0x06004EE3 RID: 20195 RVA: 0x000D87E4 File Offset: 0x000D69E4
			public static void CoverageOperation(All operation)
			{
				calli(System.Void(System.Int32), operation, GL.EntryPoints[69]);
			}

			// Token: 0x06004EE4 RID: 20196 RVA: 0x000D87F4 File Offset: 0x000D69F4
			[CLSCompliant(false)]
			public static void DeleteFence(int fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref fences, GL.EntryPoints[83]);
			}

			// Token: 0x06004EE5 RID: 20197 RVA: 0x000D8808 File Offset: 0x000D6A08
			[CLSCompliant(false)]
			public static void DeleteFence(uint fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref fences, GL.EntryPoints[83]);
			}

			// Token: 0x06004EE6 RID: 20198 RVA: 0x000D881C File Offset: 0x000D6A1C
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, int[] fences)
			{
				fixed (int* ptr = ref (fences != null && fences.Length != 0) ? ref fences[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[83]);
				}
			}

			// Token: 0x06004EE7 RID: 20199 RVA: 0x000D8850 File Offset: 0x000D6A50
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, ref int fences)
			{
				fixed (int* ptr = &fences)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[83]);
				}
			}

			// Token: 0x06004EE8 RID: 20200 RVA: 0x000D8870 File Offset: 0x000D6A70
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, int* fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, fences, GL.EntryPoints[83]);
			}

			// Token: 0x06004EE9 RID: 20201 RVA: 0x000D8884 File Offset: 0x000D6A84
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, uint[] fences)
			{
				fixed (uint* ptr = ref (fences != null && fences.Length != 0) ? ref fences[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[83]);
				}
			}

			// Token: 0x06004EEA RID: 20202 RVA: 0x000D88B8 File Offset: 0x000D6AB8
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, ref uint fences)
			{
				fixed (uint* ptr = &fences)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[83]);
				}
			}

			// Token: 0x06004EEB RID: 20203 RVA: 0x000D88D8 File Offset: 0x000D6AD8
			[CLSCompliant(false)]
			public unsafe static void DeleteFences(int n, uint* fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, fences, GL.EntryPoints[83]);
			}

			// Token: 0x06004EEC RID: 20204 RVA: 0x000D88EC File Offset: 0x000D6AEC
			[Obsolete("Use strongly-typed overload instead")]
			public static void DrawArraysInstanced(All mode, int first, int count, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, first, count, primcount, GL.EntryPoints[113]);
			}

			// Token: 0x06004EED RID: 20205 RVA: 0x000D8900 File Offset: 0x000D6B00
			public static void DrawArraysInstanced(PrimitiveType mode, int first, int count, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32), mode, first, count, primcount, GL.EntryPoints[113]);
			}

			// Token: 0x06004EEE RID: 20206 RVA: 0x000D8914 File Offset: 0x000D6B14
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void DrawBuffers(int n, All[] bufs)
			{
				fixed (All* ptr = ref (bufs != null && bufs.Length != 0) ? ref bufs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[117]);
				}
			}

			// Token: 0x06004EEF RID: 20207 RVA: 0x000D8948 File Offset: 0x000D6B48
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DrawBuffers(int n, ref All bufs)
			{
				fixed (All* ptr = &bufs)
				{
					calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[117]);
				}
			}

			// Token: 0x06004EF0 RID: 20208 RVA: 0x000D8968 File Offset: 0x000D6B68
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DrawBuffers(int n, All* bufs)
			{
				calli(System.Void(System.Int32,System.Int32*), n, bufs, GL.EntryPoints[117]);
			}

			// Token: 0x06004EF1 RID: 20209 RVA: 0x000D897C File Offset: 0x000D6B7C
			[CLSCompliant(false)]
			public unsafe static void DrawBuffers(int n, DrawBufferMode[] bufs)
			{
				fixed (DrawBufferMode* ptr = ref (bufs != null && bufs.Length != 0) ? ref bufs[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[117]);
				}
			}

			// Token: 0x06004EF2 RID: 20210 RVA: 0x000D89B0 File Offset: 0x000D6BB0
			[CLSCompliant(false)]
			public unsafe static void DrawBuffers(int n, ref DrawBufferMode bufs)
			{
				fixed (DrawBufferMode* ptr = &bufs)
				{
					calli(System.Void(System.Int32,System.Int32*), n, ptr, GL.EntryPoints[117]);
				}
			}

			// Token: 0x06004EF3 RID: 20211 RVA: 0x000D89D0 File Offset: 0x000D6BD0
			[CLSCompliant(false)]
			public unsafe static void DrawBuffers(int n, DrawBufferMode* bufs)
			{
				calli(System.Void(System.Int32,System.Int32*), n, bufs, GL.EntryPoints[117]);
			}

			// Token: 0x06004EF4 RID: 20212 RVA: 0x000D89E4 File Offset: 0x000D6BE4
			[Obsolete("Use strongly-typed overload instead")]
			public static void DrawElementsInstanced(All mode, int count, All type, IntPtr indices, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, primcount, GL.EntryPoints[122]);
			}

			// Token: 0x06004EF5 RID: 20213 RVA: 0x000D89FC File Offset: 0x000D6BFC
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void DrawElementsInstanced<T3>(All mode, int count, All type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[122]);
				}
			}

			// Token: 0x06004EF6 RID: 20214 RVA: 0x000D8A34 File Offset: 0x000D6C34
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(All mode, int count, All type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[122]);
				}
			}

			// Token: 0x06004EF7 RID: 20215 RVA: 0x000D8A70 File Offset: 0x000D6C70
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void DrawElementsInstanced<T3>(All mode, int count, All type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[122]);
				}
			}

			// Token: 0x06004EF8 RID: 20216 RVA: 0x000D8AAC File Offset: 0x000D6CAC
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void DrawElementsInstanced<T3>(All mode, int count, All type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[122]);
				}
			}

			// Token: 0x06004EF9 RID: 20217 RVA: 0x000D8AD0 File Offset: 0x000D6CD0
			public static void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int primcount)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, indices, primcount, GL.EntryPoints[122]);
			}

			// Token: 0x06004EFA RID: 20218 RVA: 0x000D8AE8 File Offset: 0x000D6CE8
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[122]);
				}
			}

			// Token: 0x06004EFB RID: 20219 RVA: 0x000D8B20 File Offset: 0x000D6D20
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[122]);
				}
			}

			// Token: 0x06004EFC RID: 20220 RVA: 0x000D8B5C File Offset: 0x000D6D5C
			[CLSCompliant(false)]
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] T3[,,] indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = ref (indices != null && indices.Length != 0) ? ref indices[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[122]);
				}
			}

			// Token: 0x06004EFD RID: 20221 RVA: 0x000D8B98 File Offset: 0x000D6D98
			public unsafe static void DrawElementsInstanced<T3>(PrimitiveType mode, int count, DrawElementsType type, [In] [Out] ref T3 indices, int primcount) where T3 : struct
			{
				fixed (T3* ptr = &indices)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32), mode, count, type, ptr, primcount, GL.EntryPoints[122]);
				}
			}

			// Token: 0x06004EFE RID: 20222 RVA: 0x000D8BBC File Offset: 0x000D6DBC
			[CLSCompliant(false)]
			public static void FinishFence(int fence)
			{
				calli(System.Void(System.UInt32), fence, GL.EntryPoints[151]);
			}

			// Token: 0x06004EFF RID: 20223 RVA: 0x000D8BD0 File Offset: 0x000D6DD0
			[CLSCompliant(false)]
			public static void FinishFence(uint fence)
			{
				calli(System.Void(System.UInt32), fence, GL.EntryPoints[151]);
			}

			// Token: 0x06004F00 RID: 20224 RVA: 0x000D8BE4 File Offset: 0x000D6DE4
			[CLSCompliant(false)]
			public static int GenFence()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[165]);
				return result;
			}

			// Token: 0x06004F01 RID: 20225 RVA: 0x000D8C08 File Offset: 0x000D6E08
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, [Out] int[] fences)
			{
				fixed (int* ptr = ref (fences != null && fences.Length != 0) ? ref fences[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[165]);
				}
			}

			// Token: 0x06004F02 RID: 20226 RVA: 0x000D8C3C File Offset: 0x000D6E3C
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, out int fences)
			{
				fixed (int* ptr = &fences)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[165]);
				}
			}

			// Token: 0x06004F03 RID: 20227 RVA: 0x000D8C60 File Offset: 0x000D6E60
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, [Out] int* fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, fences, GL.EntryPoints[165]);
			}

			// Token: 0x06004F04 RID: 20228 RVA: 0x000D8C74 File Offset: 0x000D6E74
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, [Out] uint[] fences)
			{
				fixed (uint* ptr = ref (fences != null && fences.Length != 0) ? ref fences[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[165]);
				}
			}

			// Token: 0x06004F05 RID: 20229 RVA: 0x000D8CA8 File Offset: 0x000D6EA8
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, out uint fences)
			{
				fixed (uint* ptr = &fences)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[165]);
				}
			}

			// Token: 0x06004F06 RID: 20230 RVA: 0x000D8CCC File Offset: 0x000D6ECC
			[CLSCompliant(false)]
			public unsafe static void GenFences(int n, [Out] uint* fences)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, fences, GL.EntryPoints[165]);
			}

			// Token: 0x06004F07 RID: 20231 RVA: 0x000D8CE0 File Offset: 0x000D6EE0
			[CLSCompliant(false)]
			public unsafe static void GetFence(int fence, All pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), fence, pname, ptr, GL.EntryPoints[194]);
				}
			}

			// Token: 0x06004F08 RID: 20232 RVA: 0x000D8D18 File Offset: 0x000D6F18
			[CLSCompliant(false)]
			public unsafe static void GetFence(int fence, All pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), fence, pname, ptr, GL.EntryPoints[194]);
				}
			}

			// Token: 0x06004F09 RID: 20233 RVA: 0x000D8D3C File Offset: 0x000D6F3C
			[CLSCompliant(false)]
			public unsafe static void GetFence(int fence, All pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), fence, pname, @params, GL.EntryPoints[194]);
			}

			// Token: 0x06004F0A RID: 20234 RVA: 0x000D8D54 File Offset: 0x000D6F54
			[CLSCompliant(false)]
			public unsafe static void GetFence(uint fence, All pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), fence, pname, ptr, GL.EntryPoints[194]);
				}
			}

			// Token: 0x06004F0B RID: 20235 RVA: 0x000D8D8C File Offset: 0x000D6F8C
			[CLSCompliant(false)]
			public unsafe static void GetFence(uint fence, All pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*), fence, pname, ptr, GL.EntryPoints[194]);
				}
			}

			// Token: 0x06004F0C RID: 20236 RVA: 0x000D8DB0 File Offset: 0x000D6FB0
			[CLSCompliant(false)]
			public unsafe static void GetFence(uint fence, All pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*), fence, pname, @params, GL.EntryPoints[194]);
			}

			// Token: 0x06004F0D RID: 20237 RVA: 0x000D8DC8 File Offset: 0x000D6FC8
			[CLSCompliant(false)]
			public static bool IsFence(int fence)
			{
				return calli(System.Byte(System.UInt32), fence, GL.EntryPoints[277]);
			}

			// Token: 0x06004F0E RID: 20238 RVA: 0x000D8DDC File Offset: 0x000D6FDC
			[CLSCompliant(false)]
			public static bool IsFence(uint fence)
			{
				return calli(System.Byte(System.UInt32), fence, GL.EntryPoints[277]);
			}

			// Token: 0x06004F0F RID: 20239 RVA: 0x000D8DF0 File Offset: 0x000D6FF0
			public static void ReadBuffer(All mode)
			{
				calli(System.Void(System.Int32), mode, GL.EntryPoints[356]);
			}

			// Token: 0x06004F10 RID: 20240 RVA: 0x000D8E04 File Offset: 0x000D7004
			[Obsolete("Use strongly-typed overload instead")]
			public static void RenderbufferStorageMultisample(All target, int samples, All internalformat, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, samples, internalformat, width, height, GL.EntryPoints[366]);
			}

			// Token: 0x06004F11 RID: 20241 RVA: 0x000D8E1C File Offset: 0x000D701C
			public static void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, RenderbufferInternalFormat internalformat, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, samples, internalformat, width, height, GL.EntryPoints[366]);
			}

			// Token: 0x06004F12 RID: 20242 RVA: 0x000D8E34 File Offset: 0x000D7034
			[CLSCompliant(false)]
			public static void SetFence(int fence, All condition)
			{
				calli(System.Void(System.UInt32,System.Int32), fence, condition, GL.EntryPoints[378]);
			}

			// Token: 0x06004F13 RID: 20243 RVA: 0x000D8E48 File Offset: 0x000D7048
			[CLSCompliant(false)]
			public static void SetFence(uint fence, All condition)
			{
				calli(System.Void(System.UInt32,System.Int32), fence, condition, GL.EntryPoints[378]);
			}

			// Token: 0x06004F14 RID: 20244 RVA: 0x000D8E5C File Offset: 0x000D705C
			[CLSCompliant(false)]
			public static bool TestFence(int fence)
			{
				return calli(System.Byte(System.UInt32), fence, GL.EntryPoints[388]);
			}

			// Token: 0x06004F15 RID: 20245 RVA: 0x000D8E70 File Offset: 0x000D7070
			[CLSCompliant(false)]
			public static bool TestFence(uint fence)
			{
				return calli(System.Byte(System.UInt32), fence, GL.EntryPoints[388]);
			}

			// Token: 0x06004F16 RID: 20246 RVA: 0x000D8E84 File Offset: 0x000D7084
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[441]);
				}
			}

			// Token: 0x06004F17 RID: 20247 RVA: 0x000D8EBC File Offset: 0x000D70BC
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[441]);
				}
			}

			// Token: 0x06004F18 RID: 20248 RVA: 0x000D8EE0 File Offset: 0x000D70E0
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix2x3(int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[441]);
			}

			// Token: 0x06004F19 RID: 20249 RVA: 0x000D8EF8 File Offset: 0x000D70F8
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[443]);
				}
			}

			// Token: 0x06004F1A RID: 20250 RVA: 0x000D8F30 File Offset: 0x000D7130
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[443]);
				}
			}

			// Token: 0x06004F1B RID: 20251 RVA: 0x000D8F54 File Offset: 0x000D7154
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix2x4(int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[443]);
			}

			// Token: 0x06004F1C RID: 20252 RVA: 0x000D8F6C File Offset: 0x000D716C
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[446]);
				}
			}

			// Token: 0x06004F1D RID: 20253 RVA: 0x000D8FA4 File Offset: 0x000D71A4
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[446]);
				}
			}

			// Token: 0x06004F1E RID: 20254 RVA: 0x000D8FC8 File Offset: 0x000D71C8
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix3x2(int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[446]);
			}

			// Token: 0x06004F1F RID: 20255 RVA: 0x000D8FE0 File Offset: 0x000D71E0
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[448]);
				}
			}

			// Token: 0x06004F20 RID: 20256 RVA: 0x000D9018 File Offset: 0x000D7218
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[448]);
				}
			}

			// Token: 0x06004F21 RID: 20257 RVA: 0x000D903C File Offset: 0x000D723C
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix3x4(int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[448]);
			}

			// Token: 0x06004F22 RID: 20258 RVA: 0x000D9054 File Offset: 0x000D7254
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[451]);
				}
			}

			// Token: 0x06004F23 RID: 20259 RVA: 0x000D908C File Offset: 0x000D728C
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[451]);
				}
			}

			// Token: 0x06004F24 RID: 20260 RVA: 0x000D90B0 File Offset: 0x000D72B0
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix4x2(int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[451]);
			}

			// Token: 0x06004F25 RID: 20261 RVA: 0x000D90C8 File Offset: 0x000D72C8
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, float[] value)
			{
				fixed (float* ptr = ref (value != null && value.Length != 0) ? ref value[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06004F26 RID: 20262 RVA: 0x000D9100 File Offset: 0x000D7300
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, ref float value)
			{
				fixed (float* ptr = &value)
				{
					calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, ptr, GL.EntryPoints[453]);
				}
			}

			// Token: 0x06004F27 RID: 20263 RVA: 0x000D9124 File Offset: 0x000D7324
			[CLSCompliant(false)]
			public unsafe static void UniformMatrix4x3(int location, int count, bool transpose, float* value)
			{
				calli(System.Void(System.Int32,System.Int32,System.Boolean,System.Single*), location, count, transpose, value, GL.EntryPoints[453]);
			}

			// Token: 0x06004F28 RID: 20264 RVA: 0x000D913C File Offset: 0x000D733C
			[CLSCompliant(false)]
			public static void VertexAttribDivisor(int index, int divisor)
			{
				calli(System.Void(System.UInt32,System.UInt32), index, divisor, GL.EntryPoints[472]);
			}

			// Token: 0x06004F29 RID: 20265 RVA: 0x000D9150 File Offset: 0x000D7350
			[CLSCompliant(false)]
			public static void VertexAttribDivisor(uint index, uint divisor)
			{
				calli(System.Void(System.UInt32,System.UInt32), index, divisor, GL.EntryPoints[472]);
			}
		}

		// Token: 0x020005F1 RID: 1521
		public static class Oes
		{
			// Token: 0x06004F2A RID: 20266 RVA: 0x000D9164 File Offset: 0x000D7364
			[CLSCompliant(false)]
			public static void BindVertexArray(int array)
			{
				calli(System.Void(System.UInt32), array, GL.EntryPoints[21]);
			}

			// Token: 0x06004F2B RID: 20267 RVA: 0x000D9174 File Offset: 0x000D7374
			[CLSCompliant(false)]
			public static void BindVertexArray(uint array)
			{
				calli(System.Void(System.UInt32), array, GL.EntryPoints[21]);
			}

			// Token: 0x06004F2C RID: 20268 RVA: 0x000D9184 File Offset: 0x000D7384
			[Obsolete("Use strongly-typed overload instead")]
			public static void CompressedTexImage3D(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, data, GL.EntryPoints[56]);
			}

			// Token: 0x06004F2D RID: 20269 RVA: 0x000D91AC File Offset: 0x000D73AC
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void CompressedTexImage3D<T8>(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[] data) where T8 : struct
			{
				fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[56]);
				}
			}

			// Token: 0x06004F2E RID: 20270 RVA: 0x000D91EC File Offset: 0x000D73EC
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void CompressedTexImage3D<T8>(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[,] data) where T8 : struct
			{
				fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[56]);
				}
			}

			// Token: 0x06004F2F RID: 20271 RVA: 0x000D9230 File Offset: 0x000D7430
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void CompressedTexImage3D<T8>(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[,,] data) where T8 : struct
			{
				fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[56]);
				}
			}

			// Token: 0x06004F30 RID: 20272 RVA: 0x000D9274 File Offset: 0x000D7474
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void CompressedTexImage3D<T8>(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] ref T8 data) where T8 : struct
			{
				fixed (T8* ptr = &data)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[56]);
				}
			}

			// Token: 0x06004F31 RID: 20273 RVA: 0x000D92A0 File Offset: 0x000D74A0
			public static void CompressedTexImage3D(TextureTarget3d target, int level, CompressedInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, data, GL.EntryPoints[56]);
			}

			// Token: 0x06004F32 RID: 20274 RVA: 0x000D92C8 File Offset: 0x000D74C8
			[CLSCompliant(false)]
			public unsafe static void CompressedTexImage3D<T8>(TextureTarget3d target, int level, CompressedInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[] data) where T8 : struct
			{
				fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[56]);
				}
			}

			// Token: 0x06004F33 RID: 20275 RVA: 0x000D9308 File Offset: 0x000D7508
			[CLSCompliant(false)]
			public unsafe static void CompressedTexImage3D<T8>(TextureTarget3d target, int level, CompressedInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[,] data) where T8 : struct
			{
				fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[56]);
				}
			}

			// Token: 0x06004F34 RID: 20276 RVA: 0x000D934C File Offset: 0x000D754C
			[CLSCompliant(false)]
			public unsafe static void CompressedTexImage3D<T8>(TextureTarget3d target, int level, CompressedInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] T8[,,] data) where T8 : struct
			{
				fixed (T8* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[56]);
				}
			}

			// Token: 0x06004F35 RID: 20277 RVA: 0x000D9390 File Offset: 0x000D7590
			public unsafe static void CompressedTexImage3D<T8>(TextureTarget3d target, int level, CompressedInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In] [Out] ref T8 data) where T8 : struct
			{
				fixed (T8* ptr = &data)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, imageSize, ptr, GL.EntryPoints[56]);
				}
			}

			// Token: 0x06004F36 RID: 20278 RVA: 0x000D93BC File Offset: 0x000D75BC
			[Obsolete("Use strongly-typed overload instead")]
			public static void CompressedTexSubImage3D(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, IntPtr data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data, GL.EntryPoints[59]);
			}

			// Token: 0x06004F37 RID: 20279 RVA: 0x000D93E8 File Offset: 0x000D75E8
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void CompressedTexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, [In] [Out] T10[] data) where T10 : struct
			{
				fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[59]);
				}
			}

			// Token: 0x06004F38 RID: 20280 RVA: 0x000D942C File Offset: 0x000D762C
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void CompressedTexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, [In] [Out] T10[,] data) where T10 : struct
			{
				fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[59]);
				}
			}

			// Token: 0x06004F39 RID: 20281 RVA: 0x000D9474 File Offset: 0x000D7674
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void CompressedTexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, [In] [Out] T10[,,] data) where T10 : struct
			{
				fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[59]);
				}
			}

			// Token: 0x06004F3A RID: 20282 RVA: 0x000D94BC File Offset: 0x000D76BC
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void CompressedTexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, [In] [Out] ref T10 data) where T10 : struct
			{
				fixed (T10* ptr = &data)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[59]);
				}
			}

			// Token: 0x06004F3B RID: 20283 RVA: 0x000D94EC File Offset: 0x000D76EC
			public static void CompressedTexSubImage3D(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, IntPtr data)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data, GL.EntryPoints[59]);
			}

			// Token: 0x06004F3C RID: 20284 RVA: 0x000D9518 File Offset: 0x000D7718
			[CLSCompliant(false)]
			public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, [In] [Out] T10[] data) where T10 : struct
			{
				fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[59]);
				}
			}

			// Token: 0x06004F3D RID: 20285 RVA: 0x000D955C File Offset: 0x000D775C
			[CLSCompliant(false)]
			public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, [In] [Out] T10[,] data) where T10 : struct
			{
				fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[59]);
				}
			}

			// Token: 0x06004F3E RID: 20286 RVA: 0x000D95A4 File Offset: 0x000D77A4
			[CLSCompliant(false)]
			public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, [In] [Out] T10[,,] data) where T10 : struct
			{
				fixed (T10* ptr = ref (data != null && data.Length != 0) ? ref data[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[59]);
				}
			}

			// Token: 0x06004F3F RID: 20287 RVA: 0x000D95EC File Offset: 0x000D77EC
			public unsafe static void CompressedTexSubImage3D<T10>(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, [In] [Out] ref T10 data) where T10 : struct
			{
				fixed (T10* ptr = &data)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ptr, GL.EntryPoints[59]);
				}
			}

			// Token: 0x06004F40 RID: 20288 RVA: 0x000D961C File Offset: 0x000D781C
			[Obsolete("Use strongly-typed overload instead")]
			public static void CopyTexSubImage3D(All target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, xoffset, yoffset, zoffset, x, y, width, height, GL.EntryPoints[66]);
			}

			// Token: 0x06004F41 RID: 20289 RVA: 0x000D9644 File Offset: 0x000D7844
			public static void CopyTexSubImage3D(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32), target, level, xoffset, yoffset, zoffset, x, y, width, height, GL.EntryPoints[66]);
			}

			// Token: 0x06004F42 RID: 20290 RVA: 0x000D966C File Offset: 0x000D786C
			[CLSCompliant(false)]
			public static void DeleteVertexArray(int arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref arrays, GL.EntryPoints[99]);
			}

			// Token: 0x06004F43 RID: 20291 RVA: 0x000D9680 File Offset: 0x000D7880
			[CLSCompliant(false)]
			public static void DeleteVertexArray(uint arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), 1, ref arrays, GL.EntryPoints[99]);
			}

			// Token: 0x06004F44 RID: 20292 RVA: 0x000D9694 File Offset: 0x000D7894
			[CLSCompliant(false)]
			public unsafe static void DeleteVertexArrays(int n, int[] arrays)
			{
				fixed (int* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[99]);
				}
			}

			// Token: 0x06004F45 RID: 20293 RVA: 0x000D96C8 File Offset: 0x000D78C8
			[CLSCompliant(false)]
			public unsafe static void DeleteVertexArrays(int n, ref int arrays)
			{
				fixed (int* ptr = &arrays)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[99]);
				}
			}

			// Token: 0x06004F46 RID: 20294 RVA: 0x000D96E8 File Offset: 0x000D78E8
			[CLSCompliant(false)]
			public unsafe static void DeleteVertexArrays(int n, int* arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[99]);
			}

			// Token: 0x06004F47 RID: 20295 RVA: 0x000D96FC File Offset: 0x000D78FC
			[CLSCompliant(false)]
			public unsafe static void DeleteVertexArrays(int n, uint[] arrays)
			{
				fixed (uint* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[99]);
				}
			}

			// Token: 0x06004F48 RID: 20296 RVA: 0x000D9730 File Offset: 0x000D7930
			[CLSCompliant(false)]
			public unsafe static void DeleteVertexArrays(int n, ref uint arrays)
			{
				fixed (uint* ptr = &arrays)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[99]);
				}
			}

			// Token: 0x06004F49 RID: 20297 RVA: 0x000D9750 File Offset: 0x000D7950
			[CLSCompliant(false)]
			public unsafe static void DeleteVertexArrays(int n, uint* arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[99]);
			}

			// Token: 0x06004F4A RID: 20298 RVA: 0x000D9764 File Offset: 0x000D7964
			public static void EGLImageTargetRenderbufferStorage(All target, IntPtr image)
			{
				calli(System.Void(System.Int32,System.IntPtr), target, image, GL.EntryPoints[124]);
			}

			// Token: 0x06004F4B RID: 20299 RVA: 0x000D9778 File Offset: 0x000D7978
			public static void EGLImageTargetTexture2D(All target, IntPtr image)
			{
				calli(System.Void(System.Int32,System.IntPtr), target, image, GL.EntryPoints[125]);
			}

			// Token: 0x06004F4C RID: 20300 RVA: 0x000D978C File Offset: 0x000D798C
			[CLSCompliant(false)]
			public static void FramebufferTexture3D(All target, All attachment, All textarget, int texture, int level, int zoffset)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, textarget, texture, level, zoffset, GL.EntryPoints[159]);
			}

			// Token: 0x06004F4D RID: 20301 RVA: 0x000D97A8 File Offset: 0x000D79A8
			[CLSCompliant(false)]
			public static void FramebufferTexture3D(All target, All attachment, All textarget, uint texture, int level, int zoffset)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32), target, attachment, textarget, texture, level, zoffset, GL.EntryPoints[159]);
			}

			// Token: 0x06004F4E RID: 20302 RVA: 0x000D97C4 File Offset: 0x000D79C4
			[CLSCompliant(false)]
			public static int GenVertexArray()
			{
				int result;
				calli(System.Void(System.Int32,System.UInt32*), 1, ref result, GL.EntryPoints[176]);
				return result;
			}

			// Token: 0x06004F4F RID: 20303 RVA: 0x000D97E8 File Offset: 0x000D79E8
			[CLSCompliant(false)]
			public unsafe static void GenVertexArrays(int n, [Out] int[] arrays)
			{
				fixed (int* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[176]);
				}
			}

			// Token: 0x06004F50 RID: 20304 RVA: 0x000D981C File Offset: 0x000D7A1C
			[CLSCompliant(false)]
			public unsafe static void GenVertexArrays(int n, out int arrays)
			{
				fixed (int* ptr = &arrays)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[176]);
				}
			}

			// Token: 0x06004F51 RID: 20305 RVA: 0x000D9840 File Offset: 0x000D7A40
			[CLSCompliant(false)]
			public unsafe static void GenVertexArrays(int n, [Out] int* arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[176]);
			}

			// Token: 0x06004F52 RID: 20306 RVA: 0x000D9854 File Offset: 0x000D7A54
			[CLSCompliant(false)]
			public unsafe static void GenVertexArrays(int n, [Out] uint[] arrays)
			{
				fixed (uint* ptr = ref (arrays != null && arrays.Length != 0) ? ref arrays[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[176]);
				}
			}

			// Token: 0x06004F53 RID: 20307 RVA: 0x000D9888 File Offset: 0x000D7A88
			[CLSCompliant(false)]
			public unsafe static void GenVertexArrays(int n, out uint arrays)
			{
				fixed (uint* ptr = &arrays)
				{
					calli(System.Void(System.Int32,System.UInt32*), n, ptr, GL.EntryPoints[176]);
				}
			}

			// Token: 0x06004F54 RID: 20308 RVA: 0x000D98AC File Offset: 0x000D7AAC
			[CLSCompliant(false)]
			public unsafe static void GenVertexArrays(int n, [Out] uint* arrays)
			{
				calli(System.Void(System.Int32,System.UInt32*), n, arrays, GL.EntryPoints[176]);
			}

			// Token: 0x06004F55 RID: 20309 RVA: 0x000D98C0 File Offset: 0x000D7AC0
			[Obsolete("Use strongly-typed overload instead")]
			public static void GetBufferPointer(All target, All pname, [Out] IntPtr @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, @params, GL.EntryPoints[188]);
			}

			// Token: 0x06004F56 RID: 20310 RVA: 0x000D98D8 File Offset: 0x000D7AD8
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetBufferPointer<T2>(All target, All pname, [In] [Out] T2[] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[188]);
				}
			}

			// Token: 0x06004F57 RID: 20311 RVA: 0x000D9910 File Offset: 0x000D7B10
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetBufferPointer<T2>(All target, All pname, [In] [Out] T2[,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[188]);
				}
			}

			// Token: 0x06004F58 RID: 20312 RVA: 0x000D994C File Offset: 0x000D7B4C
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetBufferPointer<T2>(All target, All pname, [In] [Out] T2[,,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[188]);
				}
			}

			// Token: 0x06004F59 RID: 20313 RVA: 0x000D9988 File Offset: 0x000D7B88
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void GetBufferPointer<T2>(All target, All pname, [In] [Out] ref T2 @params) where T2 : struct
			{
				fixed (T2* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[188]);
				}
			}

			// Token: 0x06004F5A RID: 20314 RVA: 0x000D99AC File Offset: 0x000D7BAC
			public static void GetBufferPointer(BufferTarget target, BufferPointer pname, [Out] IntPtr @params)
			{
				calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, @params, GL.EntryPoints[188]);
			}

			// Token: 0x06004F5B RID: 20315 RVA: 0x000D99C4 File Offset: 0x000D7BC4
			[CLSCompliant(false)]
			public unsafe static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In] [Out] T2[] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[188]);
				}
			}

			// Token: 0x06004F5C RID: 20316 RVA: 0x000D99FC File Offset: 0x000D7BFC
			[CLSCompliant(false)]
			public unsafe static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In] [Out] T2[,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[188]);
				}
			}

			// Token: 0x06004F5D RID: 20317 RVA: 0x000D9A38 File Offset: 0x000D7C38
			[CLSCompliant(false)]
			public unsafe static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In] [Out] T2[,,] @params) where T2 : struct
			{
				fixed (T2* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[188]);
				}
			}

			// Token: 0x06004F5E RID: 20318 RVA: 0x000D9A74 File Offset: 0x000D7C74
			public unsafe static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In] [Out] ref T2 @params) where T2 : struct
			{
				fixed (T2* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.Int32,System.IntPtr), target, pname, ptr, GL.EntryPoints[188]);
				}
			}

			// Token: 0x06004F5F RID: 20319 RVA: 0x000D9A98 File Offset: 0x000D7C98
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary(int program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [Out] IntPtr binary)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = ref (binaryFormat != null && binaryFormat.Length != 0) ? ref binaryFormat[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr3, binary, GL.EntryPoints[228]);
					}
				}
			}

			// Token: 0x06004F60 RID: 20320 RVA: 0x000D9AE8 File Offset: 0x000D7CE8
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [In] [Out] T4[] binary) where T4 : struct
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = ref (binaryFormat != null && binaryFormat.Length != 0) ? ref binaryFormat[0] : ref *null)
					{
						All* ptr4 = ptr3;
						fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
						{
							calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[228]);
						}
					}
				}
			}

			// Token: 0x06004F61 RID: 20321 RVA: 0x000D9B4C File Offset: 0x000D7D4C
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = ref (binaryFormat != null && binaryFormat.Length != 0) ? ref binaryFormat[0] : ref *null)
					{
						All* ptr4 = ptr3;
						fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
						{
							calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[228]);
						}
					}
				}
			}

			// Token: 0x06004F62 RID: 20322 RVA: 0x000D9BB4 File Offset: 0x000D7DB4
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = ref (binaryFormat != null && binaryFormat.Length != 0) ? ref binaryFormat[0] : ref *null)
					{
						All* ptr4 = ptr3;
						fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
						{
							calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[228]);
						}
					}
				}
			}

			// Token: 0x06004F63 RID: 20323 RVA: 0x000D9C20 File Offset: 0x000D7E20
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = ref (binaryFormat != null && binaryFormat.Length != 0) ? ref binaryFormat[0] : ref *null)
					{
						All* ptr4 = ptr3;
						fixed (T4* ptr5 = &binary)
						{
							calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[228]);
						}
					}
				}
			}

			// Token: 0x06004F64 RID: 20324 RVA: 0x000D9C70 File Offset: 0x000D7E70
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary(int program, int bufSize, out int length, out All binaryFormat, [Out] IntPtr binary)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = &binaryFormat)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr3, binary, GL.EntryPoints[228]);
					}
				}
			}

			// Token: 0x06004F65 RID: 20325 RVA: 0x000D9C9C File Offset: 0x000D7E9C
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary<T4>(int program, int bufSize, out int length, out All binaryFormat, [In] [Out] T4[] binary) where T4 : struct
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = &binaryFormat)
					{
						All* ptr4 = ptr3;
						fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
						{
							calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[228]);
						}
					}
				}
			}

			// Token: 0x06004F66 RID: 20326 RVA: 0x000D9CDC File Offset: 0x000D7EDC
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetProgramBinary<T4>(int program, int bufSize, out int length, out All binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = &binaryFormat)
					{
						All* ptr4 = ptr3;
						fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
						{
							calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[228]);
						}
					}
				}
			}

			// Token: 0x06004F67 RID: 20327 RVA: 0x000D9D20 File Offset: 0x000D7F20
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetProgramBinary<T4>(int program, int bufSize, out int length, out All binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = &binaryFormat)
					{
						All* ptr4 = ptr3;
						fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
						{
							calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[228]);
						}
					}
				}
			}

			// Token: 0x06004F68 RID: 20328 RVA: 0x000D9D68 File Offset: 0x000D7F68
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetProgramBinary<T4>(int program, int bufSize, out int length, out All binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = &binaryFormat)
					{
						All* ptr4 = ptr3;
						fixed (T4* ptr5 = &binary)
						{
							calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[228]);
						}
					}
				}
			}

			// Token: 0x06004F69 RID: 20329 RVA: 0x000D9D94 File Offset: 0x000D7F94
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetProgramBinary(int program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [Out] IntPtr binary)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, binary, GL.EntryPoints[228]);
			}

			// Token: 0x06004F6A RID: 20330 RVA: 0x000D9DAC File Offset: 0x000D7FAC
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In] [Out] T4[] binary) where T4 : struct
			{
				fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[228]);
				}
			}

			// Token: 0x06004F6B RID: 20331 RVA: 0x000D9DE8 File Offset: 0x000D7FE8
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
			{
				fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[228]);
				}
			}

			// Token: 0x06004F6C RID: 20332 RVA: 0x000D9E28 File Offset: 0x000D8028
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
			{
				fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[228]);
				}
			}

			// Token: 0x06004F6D RID: 20333 RVA: 0x000D9E68 File Offset: 0x000D8068
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
			{
				fixed (T4* ptr = &binary)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[228]);
				}
			}

			// Token: 0x06004F6E RID: 20334 RVA: 0x000D9E90 File Offset: 0x000D8090
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary(uint program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [Out] IntPtr binary)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = ref (binaryFormat != null && binaryFormat.Length != 0) ? ref binaryFormat[0] : ref *null)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr3, binary, GL.EntryPoints[228]);
					}
				}
			}

			// Token: 0x06004F6F RID: 20335 RVA: 0x000D9EE0 File Offset: 0x000D80E0
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [In] [Out] T4[] binary) where T4 : struct
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = ref (binaryFormat != null && binaryFormat.Length != 0) ? ref binaryFormat[0] : ref *null)
					{
						All* ptr4 = ptr3;
						fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
						{
							calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[228]);
						}
					}
				}
			}

			// Token: 0x06004F70 RID: 20336 RVA: 0x000D9F44 File Offset: 0x000D8144
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = ref (binaryFormat != null && binaryFormat.Length != 0) ? ref binaryFormat[0] : ref *null)
					{
						All* ptr4 = ptr3;
						fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
						{
							calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[228]);
						}
					}
				}
			}

			// Token: 0x06004F71 RID: 20337 RVA: 0x000D9FAC File Offset: 0x000D81AC
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = ref (binaryFormat != null && binaryFormat.Length != 0) ? ref binaryFormat[0] : ref *null)
					{
						All* ptr4 = ptr3;
						fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
						{
							calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[228]);
						}
					}
				}
			}

			// Token: 0x06004F72 RID: 20338 RVA: 0x000DA018 File Offset: 0x000D8218
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = ref (binaryFormat != null && binaryFormat.Length != 0) ? ref binaryFormat[0] : ref *null)
					{
						All* ptr4 = ptr3;
						fixed (T4* ptr5 = &binary)
						{
							calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[228]);
						}
					}
				}
			}

			// Token: 0x06004F73 RID: 20339 RVA: 0x000DA068 File Offset: 0x000D8268
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetProgramBinary(uint program, int bufSize, out int length, out All binaryFormat, [Out] IntPtr binary)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = &binaryFormat)
					{
						calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr3, binary, GL.EntryPoints[228]);
					}
				}
			}

			// Token: 0x06004F74 RID: 20340 RVA: 0x000DA094 File Offset: 0x000D8294
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, out int length, out All binaryFormat, [In] [Out] T4[] binary) where T4 : struct
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = &binaryFormat)
					{
						All* ptr4 = ptr3;
						fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
						{
							calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[228]);
						}
					}
				}
			}

			// Token: 0x06004F75 RID: 20341 RVA: 0x000DA0D4 File Offset: 0x000D82D4
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, out int length, out All binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = &binaryFormat)
					{
						All* ptr4 = ptr3;
						fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
						{
							calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[228]);
						}
					}
				}
			}

			// Token: 0x06004F76 RID: 20342 RVA: 0x000DA118 File Offset: 0x000D8318
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, out int length, out All binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = &binaryFormat)
					{
						All* ptr4 = ptr3;
						fixed (T4* ptr5 = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
						{
							calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[228]);
						}
					}
				}
			}

			// Token: 0x06004F77 RID: 20343 RVA: 0x000DA160 File Offset: 0x000D8360
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, out int length, out All binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					fixed (All* ptr3 = &binaryFormat)
					{
						All* ptr4 = ptr3;
						fixed (T4* ptr5 = &binary)
						{
							calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, ptr2, ptr4, ptr5, GL.EntryPoints[228]);
						}
					}
				}
			}

			// Token: 0x06004F78 RID: 20344 RVA: 0x000DA18C File Offset: 0x000D838C
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void GetProgramBinary(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [Out] IntPtr binary)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, binary, GL.EntryPoints[228]);
			}

			// Token: 0x06004F79 RID: 20345 RVA: 0x000DA1A4 File Offset: 0x000D83A4
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In] [Out] T4[] binary) where T4 : struct
			{
				fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[228]);
				}
			}

			// Token: 0x06004F7A RID: 20346 RVA: 0x000DA1E0 File Offset: 0x000D83E0
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In] [Out] T4[,] binary) where T4 : struct
			{
				fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[228]);
				}
			}

			// Token: 0x06004F7B RID: 20347 RVA: 0x000DA220 File Offset: 0x000D8420
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In] [Out] T4[,,] binary) where T4 : struct
			{
				fixed (T4* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[228]);
				}
			}

			// Token: 0x06004F7C RID: 20348 RVA: 0x000DA260 File Offset: 0x000D8460
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In] [Out] ref T4 binary) where T4 : struct
			{
				fixed (T4* ptr = &binary)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.Int32*,System.IntPtr), program, bufSize, length, binaryFormat, ptr, GL.EntryPoints[228]);
				}
			}

			// Token: 0x06004F7D RID: 20349 RVA: 0x000DA288 File Offset: 0x000D8488
			[CLSCompliant(false)]
			public static bool IsVertexArray(int array)
			{
				return calli(System.Byte(System.UInt32), array, GL.EntryPoints[291]);
			}

			// Token: 0x06004F7E RID: 20350 RVA: 0x000DA29C File Offset: 0x000D849C
			[CLSCompliant(false)]
			public static bool IsVertexArray(uint array)
			{
				return calli(System.Byte(System.UInt32), array, GL.EntryPoints[291]);
			}

			// Token: 0x06004F7F RID: 20351 RVA: 0x000DA2B0 File Offset: 0x000D84B0
			public static IntPtr MapBuffer(All target, All access)
			{
				return calli(System.IntPtr(System.Int32,System.Int32), target, access, GL.EntryPoints[295]);
			}

			// Token: 0x06004F80 RID: 20352 RVA: 0x000DA2C4 File Offset: 0x000D84C4
			public static void MinSampleShading(float value)
			{
				calli(System.Void(System.Single), value, GL.EntryPoints[298]);
			}

			// Token: 0x06004F81 RID: 20353 RVA: 0x000DA2D8 File Offset: 0x000D84D8
			[CLSCompliant(false)]
			public static void ProgramBinary(int program, All binaryFormat, IntPtr binary, int length)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, binary, length, GL.EntryPoints[314]);
			}

			// Token: 0x06004F82 RID: 20354 RVA: 0x000DA2F0 File Offset: 0x000D84F0
			[CLSCompliant(false)]
			public unsafe static void ProgramBinary<T2>(int program, All binaryFormat, [In] [Out] T2[] binary, int length) where T2 : struct
			{
				fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[314]);
				}
			}

			// Token: 0x06004F83 RID: 20355 RVA: 0x000DA328 File Offset: 0x000D8528
			[CLSCompliant(false)]
			public unsafe static void ProgramBinary<T2>(int program, All binaryFormat, [In] [Out] T2[,] binary, int length) where T2 : struct
			{
				fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[314]);
				}
			}

			// Token: 0x06004F84 RID: 20356 RVA: 0x000DA364 File Offset: 0x000D8564
			[CLSCompliant(false)]
			public unsafe static void ProgramBinary<T2>(int program, All binaryFormat, [In] [Out] T2[,,] binary, int length) where T2 : struct
			{
				fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[314]);
				}
			}

			// Token: 0x06004F85 RID: 20357 RVA: 0x000DA3A0 File Offset: 0x000D85A0
			[CLSCompliant(false)]
			public unsafe static void ProgramBinary<T2>(int program, All binaryFormat, [In] [Out] ref T2 binary, int length) where T2 : struct
			{
				fixed (T2* ptr = &binary)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[314]);
				}
			}

			// Token: 0x06004F86 RID: 20358 RVA: 0x000DA3C4 File Offset: 0x000D85C4
			[CLSCompliant(false)]
			public static void ProgramBinary(uint program, All binaryFormat, IntPtr binary, int length)
			{
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, binary, length, GL.EntryPoints[314]);
			}

			// Token: 0x06004F87 RID: 20359 RVA: 0x000DA3DC File Offset: 0x000D85DC
			[CLSCompliant(false)]
			public unsafe static void ProgramBinary<T2>(uint program, All binaryFormat, [In] [Out] T2[] binary, int length) where T2 : struct
			{
				fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[314]);
				}
			}

			// Token: 0x06004F88 RID: 20360 RVA: 0x000DA414 File Offset: 0x000D8614
			[CLSCompliant(false)]
			public unsafe static void ProgramBinary<T2>(uint program, All binaryFormat, [In] [Out] T2[,] binary, int length) where T2 : struct
			{
				fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[314]);
				}
			}

			// Token: 0x06004F89 RID: 20361 RVA: 0x000DA450 File Offset: 0x000D8650
			[CLSCompliant(false)]
			public unsafe static void ProgramBinary<T2>(uint program, All binaryFormat, [In] [Out] T2[,,] binary, int length) where T2 : struct
			{
				fixed (T2* ptr = ref (binary != null && binary.Length != 0) ? ref binary[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[314]);
				}
			}

			// Token: 0x06004F8A RID: 20362 RVA: 0x000DA48C File Offset: 0x000D868C
			[CLSCompliant(false)]
			public unsafe static void ProgramBinary<T2>(uint program, All binaryFormat, [In] [Out] ref T2 binary, int length) where T2 : struct
			{
				fixed (T2* ptr = &binary)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32), program, binaryFormat, ptr, length, GL.EntryPoints[314]);
				}
			}

			// Token: 0x06004F8B RID: 20363 RVA: 0x000DA4B0 File Offset: 0x000D86B0
			[Obsolete("Use strongly-typed overload instead")]
			public static void TexImage3D(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, pixels, GL.EntryPoints[393]);
			}

			// Token: 0x06004F8C RID: 20364 RVA: 0x000DA4E0 File Offset: 0x000D86E0
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void TexImage3D<T9>(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, [In] [Out] T9[] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[393]);
				}
			}

			// Token: 0x06004F8D RID: 20365 RVA: 0x000DA524 File Offset: 0x000D8724
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void TexImage3D<T9>(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, [In] [Out] T9[,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[393]);
				}
			}

			// Token: 0x06004F8E RID: 20366 RVA: 0x000DA56C File Offset: 0x000D876C
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TexImage3D<T9>(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, [In] [Out] T9[,,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[393]);
				}
			}

			// Token: 0x06004F8F RID: 20367 RVA: 0x000DA5B8 File Offset: 0x000D87B8
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void TexImage3D<T9>(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, [In] [Out] ref T9 pixels) where T9 : struct
			{
				fixed (T9* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[393]);
				}
			}

			// Token: 0x06004F90 RID: 20368 RVA: 0x000DA5E8 File Offset: 0x000D87E8
			public static void TexImage3D(TextureTarget3d target, int level, TextureComponentCount internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, pixels, GL.EntryPoints[393]);
			}

			// Token: 0x06004F91 RID: 20369 RVA: 0x000DA618 File Offset: 0x000D8818
			[CLSCompliant(false)]
			public unsafe static void TexImage3D<T9>(TextureTarget3d target, int level, TextureComponentCount internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T9[] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[393]);
				}
			}

			// Token: 0x06004F92 RID: 20370 RVA: 0x000DA65C File Offset: 0x000D885C
			[CLSCompliant(false)]
			public unsafe static void TexImage3D<T9>(TextureTarget3d target, int level, TextureComponentCount internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T9[,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[393]);
				}
			}

			// Token: 0x06004F93 RID: 20371 RVA: 0x000DA6A4 File Offset: 0x000D88A4
			[CLSCompliant(false)]
			public unsafe static void TexImage3D<T9>(TextureTarget3d target, int level, TextureComponentCount internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] T9[,,] pixels) where T9 : struct
			{
				fixed (T9* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[393]);
				}
			}

			// Token: 0x06004F94 RID: 20372 RVA: 0x000DA6F0 File Offset: 0x000D88F0
			public unsafe static void TexImage3D<T9>(TextureTarget3d target, int level, TextureComponentCount internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In] [Out] ref T9 pixels) where T9 : struct
			{
				fixed (T9* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, internalformat, width, height, depth, border, format, type, ptr, GL.EntryPoints[393]);
				}
			}

			// Token: 0x06004F95 RID: 20373 RVA: 0x000DA720 File Offset: 0x000D8920
			public static void TexStorage3DMultisample(All target, int samples, All internalformat, int width, int height, int depth, bool fixedsamplelocations)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean), target, samples, internalformat, width, height, depth, fixedsamplelocations, GL.EntryPoints[405]);
			}

			// Token: 0x06004F96 RID: 20374 RVA: 0x000DA748 File Offset: 0x000D8948
			[Obsolete("Use strongly-typed overload instead")]
			public static void TexSubImage3D(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels, GL.EntryPoints[408]);
			}

			// Token: 0x06004F97 RID: 20375 RVA: 0x000DA778 File Offset: 0x000D8978
			[Obsolete("Use strongly-typed overload instead")]
			[CLSCompliant(false)]
			public unsafe static void TexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In] [Out] T10[] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[408]);
				}
			}

			// Token: 0x06004F98 RID: 20376 RVA: 0x000DA7C0 File Offset: 0x000D89C0
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void TexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In] [Out] T10[,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[408]);
				}
			}

			// Token: 0x06004F99 RID: 20377 RVA: 0x000DA80C File Offset: 0x000D8A0C
			[CLSCompliant(false)]
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void TexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In] [Out] T10[,,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[408]);
				}
			}

			// Token: 0x06004F9A RID: 20378 RVA: 0x000DA858 File Offset: 0x000D8A58
			[Obsolete("Use strongly-typed overload instead")]
			public unsafe static void TexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In] [Out] ref T10 pixels) where T10 : struct
			{
				fixed (T10* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[408]);
				}
			}

			// Token: 0x06004F9B RID: 20379 RVA: 0x000DA88C File Offset: 0x000D8A8C
			public static void TexSubImage3D(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, IntPtr pixels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels, GL.EntryPoints[408]);
			}

			// Token: 0x06004F9C RID: 20380 RVA: 0x000DA8BC File Offset: 0x000D8ABC
			[CLSCompliant(false)]
			public unsafe static void TexSubImage3D<T10>(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In] [Out] T10[] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[408]);
				}
			}

			// Token: 0x06004F9D RID: 20381 RVA: 0x000DA904 File Offset: 0x000D8B04
			[CLSCompliant(false)]
			public unsafe static void TexSubImage3D<T10>(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In] [Out] T10[,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[408]);
				}
			}

			// Token: 0x06004F9E RID: 20382 RVA: 0x000DA950 File Offset: 0x000D8B50
			[CLSCompliant(false)]
			public unsafe static void TexSubImage3D<T10>(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In] [Out] T10[,,] pixels) where T10 : struct
			{
				fixed (T10* ptr = ref (pixels != null && pixels.Length != 0) ? ref pixels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[408]);
				}
			}

			// Token: 0x06004F9F RID: 20383 RVA: 0x000DA99C File Offset: 0x000D8B9C
			public unsafe static void TexSubImage3D<T10>(TextureTarget3d target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In] [Out] ref T10 pixels) where T10 : struct
			{
				fixed (T10* ptr = &pixels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[408]);
				}
			}

			// Token: 0x06004FA0 RID: 20384 RVA: 0x000DA9D0 File Offset: 0x000D8BD0
			[Obsolete("Use strongly-typed overload instead")]
			public static bool UnmapBuffer(All target)
			{
				return calli(System.Byte(System.Int32), target, GL.EntryPoints[455]);
			}

			// Token: 0x06004FA1 RID: 20385 RVA: 0x000DA9E4 File Offset: 0x000D8BE4
			public static bool UnmapBuffer(BufferTarget target)
			{
				return calli(System.Byte(System.Int32), target, GL.EntryPoints[455]);
			}
		}

		// Token: 0x020005F2 RID: 1522
		public static class Qcom
		{
			// Token: 0x06004FA2 RID: 20386 RVA: 0x000DA9F8 File Offset: 0x000D8BF8
			public static void AlphaFunc(All func, float @ref)
			{
				calli(System.Void(System.Int32,System.Single), func, @ref, GL.EntryPoints[3]);
			}

			// Token: 0x06004FA3 RID: 20387 RVA: 0x000DAA08 File Offset: 0x000D8C08
			[CLSCompliant(false)]
			public static void DisableDriverControl(int driverControl)
			{
				calli(System.Void(System.UInt32), driverControl, GL.EntryPoints[105]);
			}

			// Token: 0x06004FA4 RID: 20388 RVA: 0x000DAA18 File Offset: 0x000D8C18
			[CLSCompliant(false)]
			public static void DisableDriverControl(uint driverControl)
			{
				calli(System.Void(System.UInt32), driverControl, GL.EntryPoints[105]);
			}

			// Token: 0x06004FA5 RID: 20389 RVA: 0x000DAA28 File Offset: 0x000D8C28
			[CLSCompliant(false)]
			public static void EnableDriverControl(int driverControl)
			{
				calli(System.Void(System.UInt32), driverControl, GL.EntryPoints[127]);
			}

			// Token: 0x06004FA6 RID: 20390 RVA: 0x000DAA38 File Offset: 0x000D8C38
			[CLSCompliant(false)]
			public static void EnableDriverControl(uint driverControl)
			{
				calli(System.Void(System.UInt32), driverControl, GL.EntryPoints[127]);
			}

			// Token: 0x06004FA7 RID: 20391 RVA: 0x000DAA48 File Offset: 0x000D8C48
			[CLSCompliant(false)]
			public static void EndTiling(int preserveMask)
			{
				calli(System.Void(System.UInt32), preserveMask, GL.EntryPoints[134]);
			}

			// Token: 0x06004FA8 RID: 20392 RVA: 0x000DAA5C File Offset: 0x000D8C5C
			[CLSCompliant(false)]
			public static void EndTiling(uint preserveMask)
			{
				calli(System.Void(System.UInt32), preserveMask, GL.EntryPoints[134]);
			}

			// Token: 0x06004FA9 RID: 20393 RVA: 0x000DAA70 File Offset: 0x000D8C70
			public static void ExtGetBufferPointer(All target, [Out] IntPtr @params)
			{
				calli(System.Void(System.Int32,System.IntPtr), target, @params, GL.EntryPoints[136]);
			}

			// Token: 0x06004FAA RID: 20394 RVA: 0x000DAA84 File Offset: 0x000D8C84
			[CLSCompliant(false)]
			public unsafe static void ExtGetBufferPointer<T1>(All target, [In] [Out] T1[] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), target, ptr, GL.EntryPoints[136]);
				}
			}

			// Token: 0x06004FAB RID: 20395 RVA: 0x000DAAB8 File Offset: 0x000D8CB8
			[CLSCompliant(false)]
			public unsafe static void ExtGetBufferPointer<T1>(All target, [In] [Out] T1[,] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), target, ptr, GL.EntryPoints[136]);
				}
			}

			// Token: 0x06004FAC RID: 20396 RVA: 0x000DAAF0 File Offset: 0x000D8CF0
			[CLSCompliant(false)]
			public unsafe static void ExtGetBufferPointer<T1>(All target, [In] [Out] T1[,,] @params) where T1 : struct
			{
				fixed (T1* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.IntPtr), target, ptr, GL.EntryPoints[136]);
				}
			}

			// Token: 0x06004FAD RID: 20397 RVA: 0x000DAB2C File Offset: 0x000D8D2C
			public unsafe static void ExtGetBufferPointer<T1>(All target, [In] [Out] ref T1 @params) where T1 : struct
			{
				fixed (T1* ptr = &@params)
				{
					calli(System.Void(System.Int32,System.IntPtr), target, ptr, GL.EntryPoints[136]);
				}
			}

			// Token: 0x06004FAE RID: 20398 RVA: 0x000DAB50 File Offset: 0x000D8D50
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetBuffers([Out] int[] buffers, int maxBuffers, [Out] int[] numBuffers)
			{
				fixed (int* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (numBuffers != null && numBuffers.Length != 0) ? ref numBuffers[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxBuffers, ptr3, GL.EntryPoints[137]);
					}
				}
			}

			// Token: 0x06004FAF RID: 20399 RVA: 0x000DAB9C File Offset: 0x000D8D9C
			[CLSCompliant(false)]
			public unsafe static void ExtGetBuffers([Out] int[] buffers, int maxBuffers, out int numBuffers)
			{
				fixed (int* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &numBuffers)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxBuffers, ptr3, GL.EntryPoints[137]);
					}
				}
			}

			// Token: 0x06004FB0 RID: 20400 RVA: 0x000DABD4 File Offset: 0x000D8DD4
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetBuffers(out int buffers, int maxBuffers, out int numBuffers)
			{
				fixed (int* ptr = &buffers)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &numBuffers)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxBuffers, ptr3, GL.EntryPoints[137]);
					}
				}
			}

			// Token: 0x06004FB1 RID: 20401 RVA: 0x000DABFC File Offset: 0x000D8DFC
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetBuffers([Out] int* buffers, int maxBuffers, [Out] int* numBuffers)
			{
				calli(System.Void(System.UInt32*,System.Int32,System.Int32*), buffers, maxBuffers, numBuffers, GL.EntryPoints[137]);
			}

			// Token: 0x06004FB2 RID: 20402 RVA: 0x000DAC14 File Offset: 0x000D8E14
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetBuffers([Out] uint[] buffers, int maxBuffers, [Out] int[] numBuffers)
			{
				fixed (uint* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = ref (numBuffers != null && numBuffers.Length != 0) ? ref numBuffers[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxBuffers, ptr3, GL.EntryPoints[137]);
					}
				}
			}

			// Token: 0x06004FB3 RID: 20403 RVA: 0x000DAC60 File Offset: 0x000D8E60
			[CLSCompliant(false)]
			public unsafe static void ExtGetBuffers([Out] uint[] buffers, int maxBuffers, out int numBuffers)
			{
				fixed (uint* ptr = ref (buffers != null && buffers.Length != 0) ? ref buffers[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = &numBuffers)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxBuffers, ptr3, GL.EntryPoints[137]);
					}
				}
			}

			// Token: 0x06004FB4 RID: 20404 RVA: 0x000DAC98 File Offset: 0x000D8E98
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void ExtGetBuffers(out uint buffers, int maxBuffers, out int numBuffers)
			{
				fixed (uint* ptr = &buffers)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = &numBuffers)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxBuffers, ptr3, GL.EntryPoints[137]);
					}
				}
			}

			// Token: 0x06004FB5 RID: 20405 RVA: 0x000DACC0 File Offset: 0x000D8EC0
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void ExtGetBuffers([Out] uint* buffers, int maxBuffers, [Out] int* numBuffers)
			{
				calli(System.Void(System.UInt32*,System.Int32,System.Int32*), buffers, maxBuffers, numBuffers, GL.EntryPoints[137]);
			}

			// Token: 0x06004FB6 RID: 20406 RVA: 0x000DACD8 File Offset: 0x000D8ED8
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void ExtGetFramebuffers([Out] int[] framebuffers, int maxFramebuffers, [Out] int[] numFramebuffers)
			{
				fixed (int* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (numFramebuffers != null && numFramebuffers.Length != 0) ? ref numFramebuffers[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxFramebuffers, ptr3, GL.EntryPoints[138]);
					}
				}
			}

			// Token: 0x06004FB7 RID: 20407 RVA: 0x000DAD24 File Offset: 0x000D8F24
			[CLSCompliant(false)]
			public unsafe static void ExtGetFramebuffers([Out] int[] framebuffers, int maxFramebuffers, out int numFramebuffers)
			{
				fixed (int* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &numFramebuffers)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxFramebuffers, ptr3, GL.EntryPoints[138]);
					}
				}
			}

			// Token: 0x06004FB8 RID: 20408 RVA: 0x000DAD5C File Offset: 0x000D8F5C
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetFramebuffers(out int framebuffers, int maxFramebuffers, out int numFramebuffers)
			{
				fixed (int* ptr = &framebuffers)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &numFramebuffers)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxFramebuffers, ptr3, GL.EntryPoints[138]);
					}
				}
			}

			// Token: 0x06004FB9 RID: 20409 RVA: 0x000DAD84 File Offset: 0x000D8F84
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetFramebuffers([Out] int* framebuffers, int maxFramebuffers, [Out] int* numFramebuffers)
			{
				calli(System.Void(System.UInt32*,System.Int32,System.Int32*), framebuffers, maxFramebuffers, numFramebuffers, GL.EntryPoints[138]);
			}

			// Token: 0x06004FBA RID: 20410 RVA: 0x000DAD9C File Offset: 0x000D8F9C
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void ExtGetFramebuffers([Out] uint[] framebuffers, int maxFramebuffers, [Out] int[] numFramebuffers)
			{
				fixed (uint* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = ref (numFramebuffers != null && numFramebuffers.Length != 0) ? ref numFramebuffers[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxFramebuffers, ptr3, GL.EntryPoints[138]);
					}
				}
			}

			// Token: 0x06004FBB RID: 20411 RVA: 0x000DADE8 File Offset: 0x000D8FE8
			[CLSCompliant(false)]
			public unsafe static void ExtGetFramebuffers([Out] uint[] framebuffers, int maxFramebuffers, out int numFramebuffers)
			{
				fixed (uint* ptr = ref (framebuffers != null && framebuffers.Length != 0) ? ref framebuffers[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = &numFramebuffers)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxFramebuffers, ptr3, GL.EntryPoints[138]);
					}
				}
			}

			// Token: 0x06004FBC RID: 20412 RVA: 0x000DAE20 File Offset: 0x000D9020
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetFramebuffers(out uint framebuffers, int maxFramebuffers, out int numFramebuffers)
			{
				fixed (uint* ptr = &framebuffers)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = &numFramebuffers)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxFramebuffers, ptr3, GL.EntryPoints[138]);
					}
				}
			}

			// Token: 0x06004FBD RID: 20413 RVA: 0x000DAE48 File Offset: 0x000D9048
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void ExtGetFramebuffers([Out] uint* framebuffers, int maxFramebuffers, [Out] int* numFramebuffers)
			{
				calli(System.Void(System.UInt32*,System.Int32,System.Int32*), framebuffers, maxFramebuffers, numFramebuffers, GL.EntryPoints[138]);
			}

			// Token: 0x06004FBE RID: 20414 RVA: 0x000DAE60 File Offset: 0x000D9060
			[CLSCompliant(false)]
			public unsafe static void ExtGetProgramBinarySource(int program, All shadertype, [Out] StringBuilder source, [Out] int[] length)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), program, shadertype, intPtr2, ptr, GL.EntryPoints[139]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004FBF RID: 20415 RVA: 0x000DAEB0 File Offset: 0x000D90B0
			[CLSCompliant(false)]
			public unsafe static void ExtGetProgramBinarySource(int program, All shadertype, [Out] StringBuilder source, out int length)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = &length)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), program, shadertype, intPtr2, ptr, GL.EntryPoints[139]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004FC0 RID: 20416 RVA: 0x000DAEF0 File Offset: 0x000D90F0
			[CLSCompliant(false)]
			public unsafe static void ExtGetProgramBinarySource(int program, All shadertype, [Out] StringBuilder source, [Out] int* length)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), program, shadertype, intPtr, length, GL.EntryPoints[139]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004FC1 RID: 20417 RVA: 0x000DAF2C File Offset: 0x000D912C
			[CLSCompliant(false)]
			public unsafe static void ExtGetProgramBinarySource(uint program, All shadertype, [Out] StringBuilder source, [Out] int[] length)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), program, shadertype, intPtr2, ptr, GL.EntryPoints[139]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004FC2 RID: 20418 RVA: 0x000DAF7C File Offset: 0x000D917C
			[CLSCompliant(false)]
			public unsafe static void ExtGetProgramBinarySource(uint program, All shadertype, [Out] StringBuilder source, out int length)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
				IntPtr intPtr2 = intPtr;
				fixed (int* ptr = &length)
				{
					calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), program, shadertype, intPtr2, ptr, GL.EntryPoints[139]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004FC3 RID: 20419 RVA: 0x000DAFBC File Offset: 0x000D91BC
			[CLSCompliant(false)]
			public unsafe static void ExtGetProgramBinarySource(uint program, All shadertype, [Out] StringBuilder source, [Out] int* length)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)source.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.IntPtr,System.Int32*), program, shadertype, intPtr, length, GL.EntryPoints[139]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, source);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004FC4 RID: 20420 RVA: 0x000DAFF8 File Offset: 0x000D91F8
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetProgram([Out] int[] programs, int maxPrograms, [Out] int[] numPrograms)
			{
				fixed (int* ptr = ref (programs != null && programs.Length != 0) ? ref programs[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (numPrograms != null && numPrograms.Length != 0) ? ref numPrograms[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxPrograms, ptr3, GL.EntryPoints[140]);
					}
				}
			}

			// Token: 0x06004FC5 RID: 20421 RVA: 0x000DB044 File Offset: 0x000D9244
			[CLSCompliant(false)]
			public unsafe static void ExtGetProgram([Out] int[] programs, int maxPrograms, out int numPrograms)
			{
				fixed (int* ptr = ref (programs != null && programs.Length != 0) ? ref programs[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &numPrograms)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxPrograms, ptr3, GL.EntryPoints[140]);
					}
				}
			}

			// Token: 0x06004FC6 RID: 20422 RVA: 0x000DB07C File Offset: 0x000D927C
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void ExtGetProgram(out int programs, int maxPrograms, out int numPrograms)
			{
				fixed (int* ptr = &programs)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &numPrograms)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxPrograms, ptr3, GL.EntryPoints[140]);
					}
				}
			}

			// Token: 0x06004FC7 RID: 20423 RVA: 0x000DB0A4 File Offset: 0x000D92A4
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetProgram([Out] int* programs, int maxPrograms, [Out] int* numPrograms)
			{
				calli(System.Void(System.UInt32*,System.Int32,System.Int32*), programs, maxPrograms, numPrograms, GL.EntryPoints[140]);
			}

			// Token: 0x06004FC8 RID: 20424 RVA: 0x000DB0BC File Offset: 0x000D92BC
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetProgram([Out] uint[] programs, int maxPrograms, [Out] int[] numPrograms)
			{
				fixed (uint* ptr = ref (programs != null && programs.Length != 0) ? ref programs[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = ref (numPrograms != null && numPrograms.Length != 0) ? ref numPrograms[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxPrograms, ptr3, GL.EntryPoints[140]);
					}
				}
			}

			// Token: 0x06004FC9 RID: 20425 RVA: 0x000DB108 File Offset: 0x000D9308
			[CLSCompliant(false)]
			public unsafe static void ExtGetProgram([Out] uint[] programs, int maxPrograms, out int numPrograms)
			{
				fixed (uint* ptr = ref (programs != null && programs.Length != 0) ? ref programs[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = &numPrograms)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxPrograms, ptr3, GL.EntryPoints[140]);
					}
				}
			}

			// Token: 0x06004FCA RID: 20426 RVA: 0x000DB140 File Offset: 0x000D9340
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetProgram(out uint programs, int maxPrograms, out int numPrograms)
			{
				fixed (uint* ptr = &programs)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = &numPrograms)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxPrograms, ptr3, GL.EntryPoints[140]);
					}
				}
			}

			// Token: 0x06004FCB RID: 20427 RVA: 0x000DB168 File Offset: 0x000D9368
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetProgram([Out] uint* programs, int maxPrograms, [Out] int* numPrograms)
			{
				calli(System.Void(System.UInt32*,System.Int32,System.Int32*), programs, maxPrograms, numPrograms, GL.EntryPoints[140]);
			}

			// Token: 0x06004FCC RID: 20428 RVA: 0x000DB180 File Offset: 0x000D9380
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetRenderbuffers([Out] int[] renderbuffers, int maxRenderbuffers, [Out] int[] numRenderbuffers)
			{
				fixed (int* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (numRenderbuffers != null && numRenderbuffers.Length != 0) ? ref numRenderbuffers[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxRenderbuffers, ptr3, GL.EntryPoints[141]);
					}
				}
			}

			// Token: 0x06004FCD RID: 20429 RVA: 0x000DB1CC File Offset: 0x000D93CC
			[CLSCompliant(false)]
			public unsafe static void ExtGetRenderbuffers([Out] int[] renderbuffers, int maxRenderbuffers, out int numRenderbuffers)
			{
				fixed (int* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &numRenderbuffers)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxRenderbuffers, ptr3, GL.EntryPoints[141]);
					}
				}
			}

			// Token: 0x06004FCE RID: 20430 RVA: 0x000DB204 File Offset: 0x000D9404
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetRenderbuffers(out int renderbuffers, int maxRenderbuffers, out int numRenderbuffers)
			{
				fixed (int* ptr = &renderbuffers)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &numRenderbuffers)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxRenderbuffers, ptr3, GL.EntryPoints[141]);
					}
				}
			}

			// Token: 0x06004FCF RID: 20431 RVA: 0x000DB22C File Offset: 0x000D942C
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetRenderbuffers([Out] int* renderbuffers, int maxRenderbuffers, [Out] int* numRenderbuffers)
			{
				calli(System.Void(System.UInt32*,System.Int32,System.Int32*), renderbuffers, maxRenderbuffers, numRenderbuffers, GL.EntryPoints[141]);
			}

			// Token: 0x06004FD0 RID: 20432 RVA: 0x000DB244 File Offset: 0x000D9444
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void ExtGetRenderbuffers([Out] uint[] renderbuffers, int maxRenderbuffers, [Out] int[] numRenderbuffers)
			{
				fixed (uint* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = ref (numRenderbuffers != null && numRenderbuffers.Length != 0) ? ref numRenderbuffers[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxRenderbuffers, ptr3, GL.EntryPoints[141]);
					}
				}
			}

			// Token: 0x06004FD1 RID: 20433 RVA: 0x000DB290 File Offset: 0x000D9490
			[CLSCompliant(false)]
			public unsafe static void ExtGetRenderbuffers([Out] uint[] renderbuffers, int maxRenderbuffers, out int numRenderbuffers)
			{
				fixed (uint* ptr = ref (renderbuffers != null && renderbuffers.Length != 0) ? ref renderbuffers[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = &numRenderbuffers)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxRenderbuffers, ptr3, GL.EntryPoints[141]);
					}
				}
			}

			// Token: 0x06004FD2 RID: 20434 RVA: 0x000DB2C8 File Offset: 0x000D94C8
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetRenderbuffers(out uint renderbuffers, int maxRenderbuffers, out int numRenderbuffers)
			{
				fixed (uint* ptr = &renderbuffers)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = &numRenderbuffers)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxRenderbuffers, ptr3, GL.EntryPoints[141]);
					}
				}
			}

			// Token: 0x06004FD3 RID: 20435 RVA: 0x000DB2F0 File Offset: 0x000D94F0
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void ExtGetRenderbuffers([Out] uint* renderbuffers, int maxRenderbuffers, [Out] int* numRenderbuffers)
			{
				calli(System.Void(System.UInt32*,System.Int32,System.Int32*), renderbuffers, maxRenderbuffers, numRenderbuffers, GL.EntryPoints[141]);
			}

			// Token: 0x06004FD4 RID: 20436 RVA: 0x000DB308 File Offset: 0x000D9508
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void ExtGetShaders([Out] int[] shaders, int maxShaders, [Out] int[] numShaders)
			{
				fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (numShaders != null && numShaders.Length != 0) ? ref numShaders[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxShaders, ptr3, GL.EntryPoints[142]);
					}
				}
			}

			// Token: 0x06004FD5 RID: 20437 RVA: 0x000DB354 File Offset: 0x000D9554
			[CLSCompliant(false)]
			public unsafe static void ExtGetShaders([Out] int[] shaders, int maxShaders, out int numShaders)
			{
				fixed (int* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &numShaders)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxShaders, ptr3, GL.EntryPoints[142]);
					}
				}
			}

			// Token: 0x06004FD6 RID: 20438 RVA: 0x000DB38C File Offset: 0x000D958C
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void ExtGetShaders(out int shaders, int maxShaders, out int numShaders)
			{
				fixed (int* ptr = &shaders)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &numShaders)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxShaders, ptr3, GL.EntryPoints[142]);
					}
				}
			}

			// Token: 0x06004FD7 RID: 20439 RVA: 0x000DB3B4 File Offset: 0x000D95B4
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void ExtGetShaders([Out] int* shaders, int maxShaders, [Out] int* numShaders)
			{
				calli(System.Void(System.UInt32*,System.Int32,System.Int32*), shaders, maxShaders, numShaders, GL.EntryPoints[142]);
			}

			// Token: 0x06004FD8 RID: 20440 RVA: 0x000DB3CC File Offset: 0x000D95CC
			[Obsolete("Use out overload instead")]
			[CLSCompliant(false)]
			public unsafe static void ExtGetShaders([Out] uint[] shaders, int maxShaders, [Out] int[] numShaders)
			{
				fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = ref (numShaders != null && numShaders.Length != 0) ? ref numShaders[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxShaders, ptr3, GL.EntryPoints[142]);
					}
				}
			}

			// Token: 0x06004FD9 RID: 20441 RVA: 0x000DB418 File Offset: 0x000D9618
			[CLSCompliant(false)]
			public unsafe static void ExtGetShaders([Out] uint[] shaders, int maxShaders, out int numShaders)
			{
				fixed (uint* ptr = ref (shaders != null && shaders.Length != 0) ? ref shaders[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = &numShaders)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxShaders, ptr3, GL.EntryPoints[142]);
					}
				}
			}

			// Token: 0x06004FDA RID: 20442 RVA: 0x000DB450 File Offset: 0x000D9650
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void ExtGetShaders(out uint shaders, int maxShaders, out int numShaders)
			{
				fixed (uint* ptr = &shaders)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = &numShaders)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxShaders, ptr3, GL.EntryPoints[142]);
					}
				}
			}

			// Token: 0x06004FDB RID: 20443 RVA: 0x000DB478 File Offset: 0x000D9678
			[CLSCompliant(false)]
			[Obsolete("Use out overload instead")]
			public unsafe static void ExtGetShaders([Out] uint* shaders, int maxShaders, [Out] int* numShaders)
			{
				calli(System.Void(System.UInt32*,System.Int32,System.Int32*), shaders, maxShaders, numShaders, GL.EntryPoints[142]);
			}

			// Token: 0x06004FDC RID: 20444 RVA: 0x000DB490 File Offset: 0x000D9690
			[CLSCompliant(false)]
			public unsafe static void ExtGetTexLevelParameter(int texture, All face, int level, All pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32*), texture, face, level, pname, ptr, GL.EntryPoints[143]);
				}
			}

			// Token: 0x06004FDD RID: 20445 RVA: 0x000DB4CC File Offset: 0x000D96CC
			[CLSCompliant(false)]
			public unsafe static void ExtGetTexLevelParameter(int texture, All face, int level, All pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32*), texture, face, level, pname, ptr, GL.EntryPoints[143]);
				}
			}

			// Token: 0x06004FDE RID: 20446 RVA: 0x000DB4F4 File Offset: 0x000D96F4
			[CLSCompliant(false)]
			public unsafe static void ExtGetTexLevelParameter(int texture, All face, int level, All pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32*), texture, face, level, pname, @params, GL.EntryPoints[143]);
			}

			// Token: 0x06004FDF RID: 20447 RVA: 0x000DB50C File Offset: 0x000D970C
			[CLSCompliant(false)]
			public unsafe static void ExtGetTexLevelParameter(uint texture, All face, int level, All pname, [Out] int[] @params)
			{
				fixed (int* ptr = ref (@params != null && @params.Length != 0) ? ref @params[0] : ref *null)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32*), texture, face, level, pname, ptr, GL.EntryPoints[143]);
				}
			}

			// Token: 0x06004FE0 RID: 20448 RVA: 0x000DB548 File Offset: 0x000D9748
			[CLSCompliant(false)]
			public unsafe static void ExtGetTexLevelParameter(uint texture, All face, int level, All pname, out int @params)
			{
				fixed (int* ptr = &@params)
				{
					calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32*), texture, face, level, pname, ptr, GL.EntryPoints[143]);
				}
			}

			// Token: 0x06004FE1 RID: 20449 RVA: 0x000DB570 File Offset: 0x000D9770
			[CLSCompliant(false)]
			public unsafe static void ExtGetTexLevelParameter(uint texture, All face, int level, All pname, [Out] int* @params)
			{
				calli(System.Void(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32*), texture, face, level, pname, @params, GL.EntryPoints[143]);
			}

			// Token: 0x06004FE2 RID: 20450 RVA: 0x000DB588 File Offset: 0x000D9788
			public static void ExtGetTexSubImage(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [Out] IntPtr texels)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels, GL.EntryPoints[144]);
			}

			// Token: 0x06004FE3 RID: 20451 RVA: 0x000DB5B8 File Offset: 0x000D97B8
			[CLSCompliant(false)]
			public unsafe static void ExtGetTexSubImage<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In] [Out] T10[] texels) where T10 : struct
			{
				fixed (T10* ptr = ref (texels != null && texels.Length != 0) ? ref texels[0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[144]);
				}
			}

			// Token: 0x06004FE4 RID: 20452 RVA: 0x000DB600 File Offset: 0x000D9800
			[CLSCompliant(false)]
			public unsafe static void ExtGetTexSubImage<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In] [Out] T10[,] texels) where T10 : struct
			{
				fixed (T10* ptr = ref (texels != null && texels.Length != 0) ? ref texels[0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[144]);
				}
			}

			// Token: 0x06004FE5 RID: 20453 RVA: 0x000DB64C File Offset: 0x000D984C
			[CLSCompliant(false)]
			public unsafe static void ExtGetTexSubImage<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In] [Out] T10[,,] texels) where T10 : struct
			{
				fixed (T10* ptr = ref (texels != null && texels.Length != 0) ? ref texels[0, 0, 0] : ref *null)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[144]);
				}
			}

			// Token: 0x06004FE6 RID: 20454 RVA: 0x000DB698 File Offset: 0x000D9898
			public unsafe static void ExtGetTexSubImage<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In] [Out] ref T10 texels) where T10 : struct
			{
				fixed (T10* ptr = &texels)
				{
					calli(System.Void(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr), target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ptr, GL.EntryPoints[144]);
				}
			}

			// Token: 0x06004FE7 RID: 20455 RVA: 0x000DB6CC File Offset: 0x000D98CC
			[CLSCompliant(false)]
			public unsafe static void ExtGetTextures([Out] int[] textures, int maxTextures, [Out] int[] numTextures)
			{
				fixed (int* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (numTextures != null && numTextures.Length != 0) ? ref numTextures[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxTextures, ptr3, GL.EntryPoints[145]);
					}
				}
			}

			// Token: 0x06004FE8 RID: 20456 RVA: 0x000DB718 File Offset: 0x000D9918
			[CLSCompliant(false)]
			public unsafe static void ExtGetTextures(out int textures, int maxTextures, out int numTextures)
			{
				fixed (int* ptr = &textures)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &numTextures)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxTextures, ptr3, GL.EntryPoints[145]);
					}
				}
			}

			// Token: 0x06004FE9 RID: 20457 RVA: 0x000DB740 File Offset: 0x000D9940
			[CLSCompliant(false)]
			public unsafe static void ExtGetTextures([Out] int* textures, int maxTextures, [Out] int* numTextures)
			{
				calli(System.Void(System.UInt32*,System.Int32,System.Int32*), textures, maxTextures, numTextures, GL.EntryPoints[145]);
			}

			// Token: 0x06004FEA RID: 20458 RVA: 0x000DB758 File Offset: 0x000D9958
			[CLSCompliant(false)]
			public unsafe static void ExtGetTextures([Out] uint[] textures, int maxTextures, [Out] int[] numTextures)
			{
				fixed (uint* ptr = ref (textures != null && textures.Length != 0) ? ref textures[0] : ref *null)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = ref (numTextures != null && numTextures.Length != 0) ? ref numTextures[0] : ref *null)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxTextures, ptr3, GL.EntryPoints[145]);
					}
				}
			}

			// Token: 0x06004FEB RID: 20459 RVA: 0x000DB7A4 File Offset: 0x000D99A4
			[CLSCompliant(false)]
			public unsafe static void ExtGetTextures(out uint textures, int maxTextures, out int numTextures)
			{
				fixed (uint* ptr = &textures)
				{
					uint* ptr2 = ptr;
					fixed (int* ptr3 = &numTextures)
					{
						calli(System.Void(System.UInt32*,System.Int32,System.Int32*), ptr2, maxTextures, ptr3, GL.EntryPoints[145]);
					}
				}
			}

			// Token: 0x06004FEC RID: 20460 RVA: 0x000DB7CC File Offset: 0x000D99CC
			[CLSCompliant(false)]
			public unsafe static void ExtGetTextures([Out] uint* textures, int maxTextures, [Out] int* numTextures)
			{
				calli(System.Void(System.UInt32*,System.Int32,System.Int32*), textures, maxTextures, numTextures, GL.EntryPoints[145]);
			}

			// Token: 0x06004FED RID: 20461 RVA: 0x000DB7E4 File Offset: 0x000D99E4
			[CLSCompliant(false)]
			public static bool ExtIsProgramBinary(int program)
			{
				return calli(System.Byte(System.UInt32), program, GL.EntryPoints[146]);
			}

			// Token: 0x06004FEE RID: 20462 RVA: 0x000DB7F8 File Offset: 0x000D99F8
			[CLSCompliant(false)]
			public static bool ExtIsProgramBinary(uint program)
			{
				return calli(System.Byte(System.UInt32), program, GL.EntryPoints[146]);
			}

			// Token: 0x06004FEF RID: 20463 RVA: 0x000DB80C File Offset: 0x000D9A0C
			public static void ExtTexObjectStateOverride(All target, All pname, int param)
			{
				calli(System.Void(System.Int32,System.Int32,System.Int32), target, pname, param, GL.EntryPoints[147]);
			}

			// Token: 0x06004FF0 RID: 20464 RVA: 0x000DB824 File Offset: 0x000D9A24
			[CLSCompliant(false)]
			public unsafe static void GetDriverControl([Out] int[] num, int size, [Out] int[] driverControls)
			{
				fixed (int* ptr = ref (num != null && num.Length != 0) ? ref num[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = ref (driverControls != null && driverControls.Length != 0) ? ref driverControls[0] : ref *null)
					{
						calli(System.Void(System.Int32*,System.Int32,System.UInt32*), ptr2, size, ptr3, GL.EntryPoints[191]);
					}
				}
			}

			// Token: 0x06004FF1 RID: 20465 RVA: 0x000DB870 File Offset: 0x000D9A70
			[CLSCompliant(false)]
			public unsafe static void GetDriverControl([Out] int[] num, int size, [Out] uint[] driverControls)
			{
				fixed (int* ptr = ref (num != null && num.Length != 0) ? ref num[0] : ref *null)
				{
					int* ptr2 = ptr;
					fixed (uint* ptr3 = ref (driverControls != null && driverControls.Length != 0) ? ref driverControls[0] : ref *null)
					{
						calli(System.Void(System.Int32*,System.Int32,System.UInt32*), ptr2, size, ptr3, GL.EntryPoints[191]);
					}
				}
			}

			// Token: 0x06004FF2 RID: 20466 RVA: 0x000DB8BC File Offset: 0x000D9ABC
			[CLSCompliant(false)]
			public unsafe static void GetDriverControl(out int num, int size, out int driverControls)
			{
				fixed (int* ptr = &num)
				{
					int* ptr2 = ptr;
					fixed (int* ptr3 = &driverControls)
					{
						calli(System.Void(System.Int32*,System.Int32,System.UInt32*), ptr2, size, ptr3, GL.EntryPoints[191]);
					}
				}
			}

			// Token: 0x06004FF3 RID: 20467 RVA: 0x000DB8E4 File Offset: 0x000D9AE4
			[CLSCompliant(false)]
			public unsafe static void GetDriverControl(out int num, int size, out uint driverControls)
			{
				fixed (int* ptr = &num)
				{
					int* ptr2 = ptr;
					fixed (uint* ptr3 = &driverControls)
					{
						calli(System.Void(System.Int32*,System.Int32,System.UInt32*), ptr2, size, ptr3, GL.EntryPoints[191]);
					}
				}
			}

			// Token: 0x06004FF4 RID: 20468 RVA: 0x000DB90C File Offset: 0x000D9B0C
			[CLSCompliant(false)]
			public unsafe static void GetDriverControl([Out] int* num, int size, [Out] int* driverControls)
			{
				calli(System.Void(System.Int32*,System.Int32,System.UInt32*), num, size, driverControls, GL.EntryPoints[191]);
			}

			// Token: 0x06004FF5 RID: 20469 RVA: 0x000DB924 File Offset: 0x000D9B24
			[CLSCompliant(false)]
			public unsafe static void GetDriverControl([Out] int* num, int size, [Out] uint* driverControls)
			{
				calli(System.Void(System.Int32*,System.Int32,System.UInt32*), num, size, driverControls, GL.EntryPoints[191]);
			}

			// Token: 0x06004FF6 RID: 20470 RVA: 0x000DB93C File Offset: 0x000D9B3C
			[CLSCompliant(false)]
			public unsafe static void GetDriverControlString(int driverControl, int bufSize, [Out] int[] length, [Out] StringBuilder driverControlString)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)driverControlString.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), driverControl, bufSize, ptr2, intPtr, GL.EntryPoints[192]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, driverControlString);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004FF7 RID: 20471 RVA: 0x000DB98C File Offset: 0x000D9B8C
			[CLSCompliant(false)]
			public unsafe static void GetDriverControlString(int driverControl, int bufSize, out int length, [Out] StringBuilder driverControlString)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)driverControlString.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), driverControl, bufSize, ptr2, intPtr, GL.EntryPoints[192]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, driverControlString);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004FF8 RID: 20472 RVA: 0x000DB9CC File Offset: 0x000D9BCC
			[CLSCompliant(false)]
			public unsafe static void GetDriverControlString(int driverControl, int bufSize, [Out] int* length, [Out] StringBuilder driverControlString)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)driverControlString.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), driverControl, bufSize, length, intPtr, GL.EntryPoints[192]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, driverControlString);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004FF9 RID: 20473 RVA: 0x000DBA08 File Offset: 0x000D9C08
			[CLSCompliant(false)]
			public unsafe static void GetDriverControlString(uint driverControl, int bufSize, [Out] int[] length, [Out] StringBuilder driverControlString)
			{
				fixed (int* ptr = ref (length != null && length.Length != 0) ? ref length[0] : ref *null)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)driverControlString.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), driverControl, bufSize, ptr2, intPtr, GL.EntryPoints[192]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, driverControlString);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004FFA RID: 20474 RVA: 0x000DBA58 File Offset: 0x000D9C58
			[CLSCompliant(false)]
			public unsafe static void GetDriverControlString(uint driverControl, int bufSize, out int length, [Out] StringBuilder driverControlString)
			{
				fixed (int* ptr = &length)
				{
					int* ptr2 = ptr;
					IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)driverControlString.Capacity);
					calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), driverControl, bufSize, ptr2, intPtr, GL.EntryPoints[192]);
					BindingsBase.MarshalPtrToStringBuilder(intPtr, driverControlString);
					Marshal.FreeHGlobal(intPtr);
				}
			}

			// Token: 0x06004FFB RID: 20475 RVA: 0x000DBA98 File Offset: 0x000D9C98
			[CLSCompliant(false)]
			public unsafe static void GetDriverControlString(uint driverControl, int bufSize, [Out] int* length, [Out] StringBuilder driverControlString)
			{
				IntPtr intPtr = Marshal.AllocHGlobal((IntPtr)driverControlString.Capacity);
				calli(System.Void(System.UInt32,System.Int32,System.Int32*,System.IntPtr), driverControl, bufSize, length, intPtr, GL.EntryPoints[192]);
				BindingsBase.MarshalPtrToStringBuilder(intPtr, driverControlString);
				Marshal.FreeHGlobal(intPtr);
			}

			// Token: 0x06004FFC RID: 20476 RVA: 0x000DBAD4 File Offset: 0x000D9CD4
			[CLSCompliant(false)]
			public static void StartTiling(int x, int y, int width, int height, int preserveMask)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), x, y, width, height, preserveMask, GL.EntryPoints[381]);
			}

			// Token: 0x06004FFD RID: 20477 RVA: 0x000DBAEC File Offset: 0x000D9CEC
			[CLSCompliant(false)]
			public static void StartTiling(uint x, uint y, uint width, uint height, uint preserveMask)
			{
				calli(System.Void(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32), x, y, width, height, preserveMask, GL.EntryPoints[381]);
			}
		}
	}
}
